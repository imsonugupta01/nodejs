var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all3) => {
  for (var name2 in all3)
    __defProp(target, name2, { get: all3[name2], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};

// ../../node_modules/.pnpm/esbuild-plugin-polyfill-node@0.3.0_esbuild@0.16.12/node_modules/esbuild-plugin-polyfill-node/polyfills/__dirname.js
var init_dirname = __esm({
  "../../node_modules/.pnpm/esbuild-plugin-polyfill-node@0.3.0_esbuild@0.16.12/node_modules/esbuild-plugin-polyfill-node/polyfills/__dirname.js"() {
  }
});

// ../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/process.js
var process_exports = {};
__export(process_exports, {
  _debugEnd: () => _debugEnd,
  _debugProcess: () => _debugProcess,
  _events: () => _events,
  _eventsCount: () => _eventsCount,
  _exiting: () => _exiting,
  _fatalExceptions: () => _fatalExceptions,
  _getActiveHandles: () => _getActiveHandles,
  _getActiveRequests: () => _getActiveRequests,
  _kill: () => _kill,
  _linkedBinding: () => _linkedBinding,
  _maxListeners: () => _maxListeners,
  _preload_modules: () => _preload_modules,
  _rawDebug: () => _rawDebug,
  _startProfilerIdleNotifier: () => _startProfilerIdleNotifier,
  _stopProfilerIdleNotifier: () => _stopProfilerIdleNotifier,
  _tickCallback: () => _tickCallback,
  abort: () => abort,
  addListener: () => addListener,
  allowedNodeEnvironmentFlags: () => allowedNodeEnvironmentFlags,
  arch: () => arch,
  argv: () => argv,
  argv0: () => argv0,
  assert: () => assert,
  binding: () => binding,
  chdir: () => chdir,
  config: () => config,
  cpuUsage: () => cpuUsage,
  cwd: () => cwd,
  debugPort: () => debugPort,
  default: () => process,
  dlopen: () => dlopen,
  domain: () => domain,
  emit: () => emit,
  emitWarning: () => emitWarning,
  env: () => env,
  execArgv: () => execArgv,
  execPath: () => execPath,
  exit: () => exit,
  features: () => features,
  hasUncaughtExceptionCaptureCallback: () => hasUncaughtExceptionCaptureCallback,
  hrtime: () => hrtime,
  kill: () => kill,
  listeners: () => listeners,
  memoryUsage: () => memoryUsage,
  moduleLoadList: () => moduleLoadList,
  nextTick: () => nextTick,
  off: () => off,
  on: () => on,
  once: () => once,
  openStdin: () => openStdin,
  pid: () => pid,
  platform: () => platform,
  ppid: () => ppid,
  prependListener: () => prependListener,
  prependOnceListener: () => prependOnceListener,
  reallyExit: () => reallyExit,
  release: () => release,
  removeAllListeners: () => removeAllListeners,
  removeListener: () => removeListener,
  resourceUsage: () => resourceUsage,
  setSourceMapsEnabled: () => setSourceMapsEnabled,
  setUncaughtExceptionCaptureCallback: () => setUncaughtExceptionCaptureCallback,
  stderr: () => stderr,
  stdin: () => stdin,
  stdout: () => stdout,
  title: () => title,
  umask: () => umask,
  uptime: () => uptime,
  version: () => version,
  versions: () => versions
});
function unimplemented(name2) {
  throw new Error("Node.js process " + name2 + " is not supported by JSPM core outside of Node.js");
}
function cleanUpNextTick() {
  if (!draining || !currentQueue)
    return;
  draining = false;
  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }
  if (queue.length)
    drainQueue();
}
function drainQueue() {
  if (draining)
    return;
  var timeout = setTimeout(cleanUpNextTick, 0);
  draining = true;
  var len = queue.length;
  while (len) {
    currentQueue = queue;
    queue = [];
    while (++queueIndex < len) {
      if (currentQueue)
        currentQueue[queueIndex].run();
    }
    queueIndex = -1;
    len = queue.length;
  }
  currentQueue = null;
  draining = false;
  clearTimeout(timeout);
}
function nextTick(fun) {
  var args = new Array(arguments.length - 1);
  if (arguments.length > 1) {
    for (var i8 = 1; i8 < arguments.length; i8++)
      args[i8 - 1] = arguments[i8];
  }
  queue.push(new Item(fun, args));
  if (queue.length === 1 && !draining)
    setTimeout(drainQueue, 0);
}
function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}
function noop() {
}
function _linkedBinding(name2) {
  unimplemented("_linkedBinding");
}
function dlopen(name2) {
  unimplemented("dlopen");
}
function _getActiveRequests() {
  return [];
}
function _getActiveHandles() {
  return [];
}
function assert(condition, message) {
  if (!condition)
    throw new Error(message || "assertion error");
}
function hasUncaughtExceptionCaptureCallback() {
  return false;
}
function uptime() {
  return _performance.now() / 1e3;
}
function hrtime(previousTimestamp) {
  var baseNow = Math.floor((Date.now() - _performance.now()) * 1e-3);
  var clocktime = _performance.now() * 1e-3;
  var seconds = Math.floor(clocktime) + baseNow;
  var nanoseconds = Math.floor(clocktime % 1 * 1e9);
  if (previousTimestamp) {
    seconds = seconds - previousTimestamp[0];
    nanoseconds = nanoseconds - previousTimestamp[1];
    if (nanoseconds < 0) {
      seconds--;
      nanoseconds += nanoPerSec;
    }
  }
  return [seconds, nanoseconds];
}
function on() {
  return process;
}
function listeners(name2) {
  return [];
}
var queue, draining, currentQueue, queueIndex, title, arch, platform, env, argv, execArgv, version, versions, emitWarning, binding, umask, cwd, chdir, release, _rawDebug, moduleLoadList, domain, _exiting, config, reallyExit, _kill, cpuUsage, resourceUsage, memoryUsage, kill, exit, openStdin, allowedNodeEnvironmentFlags, features, _fatalExceptions, setUncaughtExceptionCaptureCallback, _tickCallback, _debugProcess, _debugEnd, _startProfilerIdleNotifier, _stopProfilerIdleNotifier, stdout, stderr, stdin, abort, pid, ppid, execPath, debugPort, argv0, _preload_modules, setSourceMapsEnabled, _performance, nowOffset, nanoPerSec, _maxListeners, _events, _eventsCount, addListener, once, off, removeListener, removeAllListeners, emit, prependListener, prependOnceListener, process;
var init_process = __esm({
  "../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/process.js"() {
    init_dirname();
    init_buffer2();
    init_process2();
    queue = [];
    draining = false;
    queueIndex = -1;
    Item.prototype.run = function() {
      this.fun.apply(null, this.array);
    };
    title = "browser";
    arch = "x64";
    platform = "browser";
    env = {
      PATH: "/usr/bin",
      LANG: navigator.language + ".UTF-8",
      PWD: "/",
      HOME: "/home",
      TMP: "/tmp"
    };
    argv = ["/usr/bin/node"];
    execArgv = [];
    version = "v16.8.0";
    versions = {};
    emitWarning = function(message, type) {
      console.warn((type ? type + ": " : "") + message);
    };
    binding = function(name2) {
      unimplemented("binding");
    };
    umask = function(mask) {
      return 0;
    };
    cwd = function() {
      return "/";
    };
    chdir = function(dir) {
    };
    release = {
      name: "node",
      sourceUrl: "",
      headersUrl: "",
      libUrl: ""
    };
    _rawDebug = noop;
    moduleLoadList = [];
    domain = {};
    _exiting = false;
    config = {};
    reallyExit = noop;
    _kill = noop;
    cpuUsage = function() {
      return {};
    };
    resourceUsage = cpuUsage;
    memoryUsage = cpuUsage;
    kill = noop;
    exit = noop;
    openStdin = noop;
    allowedNodeEnvironmentFlags = {};
    features = {
      inspector: false,
      debug: false,
      uv: false,
      ipv6: false,
      tls_alpn: false,
      tls_sni: false,
      tls_ocsp: false,
      tls: false,
      cached_builtins: true
    };
    _fatalExceptions = noop;
    setUncaughtExceptionCaptureCallback = noop;
    _tickCallback = noop;
    _debugProcess = noop;
    _debugEnd = noop;
    _startProfilerIdleNotifier = noop;
    _stopProfilerIdleNotifier = noop;
    stdout = void 0;
    stderr = void 0;
    stdin = void 0;
    abort = noop;
    pid = 2;
    ppid = 1;
    execPath = "/bin/usr/node";
    debugPort = 9229;
    argv0 = "node";
    _preload_modules = [];
    setSourceMapsEnabled = noop;
    _performance = {
      now: typeof performance !== "undefined" ? performance.now.bind(performance) : void 0,
      timing: typeof performance !== "undefined" ? performance.timing : void 0
    };
    if (_performance.now === void 0) {
      nowOffset = Date.now();
      if (_performance.timing && _performance.timing.navigationStart) {
        nowOffset = _performance.timing.navigationStart;
      }
      _performance.now = () => Date.now() - nowOffset;
    }
    nanoPerSec = 1e9;
    hrtime.bigint = function(time) {
      var diff = hrtime(time);
      if (typeof BigInt === "undefined") {
        return diff[0] * nanoPerSec + diff[1];
      }
      return BigInt(diff[0] * nanoPerSec) + BigInt(diff[1]);
    };
    _maxListeners = 10;
    _events = {};
    _eventsCount = 0;
    addListener = on;
    once = on;
    off = on;
    removeListener = on;
    removeAllListeners = on;
    emit = noop;
    prependListener = on;
    prependOnceListener = on;
    process = {
      version,
      versions,
      arch,
      platform,
      release,
      _rawDebug,
      moduleLoadList,
      binding,
      _linkedBinding,
      _events,
      _eventsCount,
      _maxListeners,
      on,
      addListener,
      once,
      off,
      removeListener,
      removeAllListeners,
      emit,
      prependListener,
      prependOnceListener,
      listeners,
      domain,
      _exiting,
      config,
      dlopen,
      uptime,
      _getActiveRequests,
      _getActiveHandles,
      reallyExit,
      _kill,
      cpuUsage,
      resourceUsage,
      memoryUsage,
      kill,
      exit,
      openStdin,
      allowedNodeEnvironmentFlags,
      assert,
      features,
      _fatalExceptions,
      setUncaughtExceptionCaptureCallback,
      hasUncaughtExceptionCaptureCallback,
      emitWarning,
      nextTick,
      _tickCallback,
      _debugProcess,
      _debugEnd,
      _startProfilerIdleNotifier,
      _stopProfilerIdleNotifier,
      stdout,
      stdin,
      stderr,
      abort,
      umask,
      chdir,
      cwd,
      env,
      title,
      argv,
      execArgv,
      pid,
      ppid,
      execPath,
      debugPort,
      hrtime,
      argv0,
      _preload_modules,
      setSourceMapsEnabled
    };
  }
});

// ../../node_modules/.pnpm/esbuild-plugin-polyfill-node@0.3.0_esbuild@0.16.12/node_modules/esbuild-plugin-polyfill-node/polyfills/process.js
var init_process2 = __esm({
  "../../node_modules/.pnpm/esbuild-plugin-polyfill-node@0.3.0_esbuild@0.16.12/node_modules/esbuild-plugin-polyfill-node/polyfills/process.js"() {
    init_process();
  }
});

// ../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/buffer.js
var buffer_exports = {};
__export(buffer_exports, {
  Buffer: () => Buffer2,
  INSPECT_MAX_BYTES: () => INSPECT_MAX_BYTES,
  default: () => exports,
  kMaxLength: () => kMaxLength
});
function dew$2() {
  if (_dewExec$2)
    return exports$3;
  _dewExec$2 = true;
  exports$3.byteLength = byteLength;
  exports$3.toByteArray = toByteArray;
  exports$3.fromByteArray = fromByteArray;
  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
  var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  for (var i8 = 0, len = code.length; i8 < len; ++i8) {
    lookup[i8] = code[i8];
    revLookup[code.charCodeAt(i8)] = i8;
  }
  revLookup["-".charCodeAt(0)] = 62;
  revLookup["_".charCodeAt(0)] = 63;
  function getLens(b64) {
    var len2 = b64.length;
    if (len2 % 4 > 0) {
      throw new Error("Invalid string. Length must be a multiple of 4");
    }
    var validLen = b64.indexOf("=");
    if (validLen === -1)
      validLen = len2;
    var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
    return [validLen, placeHoldersLen];
  }
  function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }
  function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }
  function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i9;
    for (i9 = 0; i9 < len2; i9 += 4) {
      tmp = revLookup[b64.charCodeAt(i9)] << 18 | revLookup[b64.charCodeAt(i9 + 1)] << 12 | revLookup[b64.charCodeAt(i9 + 2)] << 6 | revLookup[b64.charCodeAt(i9 + 3)];
      arr[curByte++] = tmp >> 16 & 255;
      arr[curByte++] = tmp >> 8 & 255;
      arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 2) {
      tmp = revLookup[b64.charCodeAt(i9)] << 2 | revLookup[b64.charCodeAt(i9 + 1)] >> 4;
      arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 1) {
      tmp = revLookup[b64.charCodeAt(i9)] << 10 | revLookup[b64.charCodeAt(i9 + 1)] << 4 | revLookup[b64.charCodeAt(i9 + 2)] >> 2;
      arr[curByte++] = tmp >> 8 & 255;
      arr[curByte++] = tmp & 255;
    }
    return arr;
  }
  function tripletToBase64(num) {
    return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
  }
  function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for (var i9 = start; i9 < end; i9 += 3) {
      tmp = (uint8[i9] << 16 & 16711680) + (uint8[i9 + 1] << 8 & 65280) + (uint8[i9 + 2] & 255);
      output.push(tripletToBase64(tmp));
    }
    return output.join("");
  }
  function fromByteArray(uint8) {
    var tmp;
    var len2 = uint8.length;
    var extraBytes = len2 % 3;
    var parts = [];
    var maxChunkLength = 16383;
    for (var i9 = 0, len22 = len2 - extraBytes; i9 < len22; i9 += maxChunkLength) {
      parts.push(encodeChunk(uint8, i9, i9 + maxChunkLength > len22 ? len22 : i9 + maxChunkLength));
    }
    if (extraBytes === 1) {
      tmp = uint8[len2 - 1];
      parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "==");
    } else if (extraBytes === 2) {
      tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
      parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "=");
    }
    return parts.join("");
  }
  return exports$3;
}
function dew$1() {
  if (_dewExec$1)
    return exports$2;
  _dewExec$1 = true;
  exports$2.read = function(buffer2, offset, isLE, mLen, nBytes) {
    var e11, m6;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i8 = isLE ? nBytes - 1 : 0;
    var d6 = isLE ? -1 : 1;
    var s7 = buffer2[offset + i8];
    i8 += d6;
    e11 = s7 & (1 << -nBits) - 1;
    s7 >>= -nBits;
    nBits += eLen;
    for (; nBits > 0; e11 = e11 * 256 + buffer2[offset + i8], i8 += d6, nBits -= 8) {
    }
    m6 = e11 & (1 << -nBits) - 1;
    e11 >>= -nBits;
    nBits += mLen;
    for (; nBits > 0; m6 = m6 * 256 + buffer2[offset + i8], i8 += d6, nBits -= 8) {
    }
    if (e11 === 0) {
      e11 = 1 - eBias;
    } else if (e11 === eMax) {
      return m6 ? NaN : (s7 ? -1 : 1) * Infinity;
    } else {
      m6 = m6 + Math.pow(2, mLen);
      e11 = e11 - eBias;
    }
    return (s7 ? -1 : 1) * m6 * Math.pow(2, e11 - mLen);
  };
  exports$2.write = function(buffer2, value, offset, isLE, mLen, nBytes) {
    var e11, m6, c8;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i8 = isLE ? 0 : nBytes - 1;
    var d6 = isLE ? 1 : -1;
    var s7 = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
      m6 = isNaN(value) ? 1 : 0;
      e11 = eMax;
    } else {
      e11 = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c8 = Math.pow(2, -e11)) < 1) {
        e11--;
        c8 *= 2;
      }
      if (e11 + eBias >= 1) {
        value += rt / c8;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c8 >= 2) {
        e11++;
        c8 /= 2;
      }
      if (e11 + eBias >= eMax) {
        m6 = 0;
        e11 = eMax;
      } else if (e11 + eBias >= 1) {
        m6 = (value * c8 - 1) * Math.pow(2, mLen);
        e11 = e11 + eBias;
      } else {
        m6 = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e11 = 0;
      }
    }
    for (; mLen >= 8; buffer2[offset + i8] = m6 & 255, i8 += d6, m6 /= 256, mLen -= 8) {
    }
    e11 = e11 << mLen | m6;
    eLen += mLen;
    for (; eLen > 0; buffer2[offset + i8] = e11 & 255, i8 += d6, e11 /= 256, eLen -= 8) {
    }
    buffer2[offset + i8 - d6] |= s7 * 128;
  };
  return exports$2;
}
function dew() {
  if (_dewExec)
    return exports$1;
  _dewExec = true;
  const base64 = dew$2();
  const ieee754 = dew$1();
  const customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
  exports$1.Buffer = Buffer3;
  exports$1.SlowBuffer = SlowBuffer;
  exports$1.INSPECT_MAX_BYTES = 50;
  const K_MAX_LENGTH = 2147483647;
  exports$1.kMaxLength = K_MAX_LENGTH;
  Buffer3.TYPED_ARRAY_SUPPORT = typedArraySupport();
  if (!Buffer3.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
    console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
  }
  function typedArraySupport() {
    try {
      const arr = new Uint8Array(1);
      const proto = {
        foo: function() {
          return 42;
        }
      };
      Object.setPrototypeOf(proto, Uint8Array.prototype);
      Object.setPrototypeOf(arr, proto);
      return arr.foo() === 42;
    } catch (e11) {
      return false;
    }
  }
  Object.defineProperty(Buffer3.prototype, "parent", {
    enumerable: true,
    get: function() {
      if (!Buffer3.isBuffer(this))
        return void 0;
      return this.buffer;
    }
  });
  Object.defineProperty(Buffer3.prototype, "offset", {
    enumerable: true,
    get: function() {
      if (!Buffer3.isBuffer(this))
        return void 0;
      return this.byteOffset;
    }
  });
  function createBuffer(length) {
    if (length > K_MAX_LENGTH) {
      throw new RangeError('The value "' + length + '" is invalid for option "size"');
    }
    const buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer3.prototype);
    return buf;
  }
  function Buffer3(arg, encodingOrOffset, length) {
    if (typeof arg === "number") {
      if (typeof encodingOrOffset === "string") {
        throw new TypeError('The "string" argument must be of type string. Received type number');
      }
      return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
  }
  Buffer3.poolSize = 8192;
  function from(value, encodingOrOffset, length) {
    if (typeof value === "string") {
      return fromString(value, encodingOrOffset);
    }
    if (ArrayBuffer.isView(value)) {
      return fromArrayView(value);
    }
    if (value == null) {
      throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    }
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
      return fromArrayBuffer(value, encodingOrOffset, length);
    }
    if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
      return fromArrayBuffer(value, encodingOrOffset, length);
    }
    if (typeof value === "number") {
      throw new TypeError('The "value" argument must not be of type number. Received type number');
    }
    const valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) {
      return Buffer3.from(valueOf, encodingOrOffset, length);
    }
    const b5 = fromObject(value);
    if (b5)
      return b5;
    if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
      return Buffer3.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
    }
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
  }
  Buffer3.from = function(value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
  };
  Object.setPrototypeOf(Buffer3.prototype, Uint8Array.prototype);
  Object.setPrototypeOf(Buffer3, Uint8Array);
  function assertSize(size) {
    if (typeof size !== "number") {
      throw new TypeError('"size" argument must be of type number');
    } else if (size < 0) {
      throw new RangeError('The value "' + size + '" is invalid for option "size"');
    }
  }
  function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) {
      return createBuffer(size);
    }
    if (fill !== void 0) {
      return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    }
    return createBuffer(size);
  }
  Buffer3.alloc = function(size, fill, encoding) {
    return alloc(size, fill, encoding);
  };
  function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
  }
  Buffer3.allocUnsafe = function(size) {
    return allocUnsafe(size);
  };
  Buffer3.allocUnsafeSlow = function(size) {
    return allocUnsafe(size);
  };
  function fromString(string, encoding) {
    if (typeof encoding !== "string" || encoding === "") {
      encoding = "utf8";
    }
    if (!Buffer3.isEncoding(encoding)) {
      throw new TypeError("Unknown encoding: " + encoding);
    }
    const length = byteLength(string, encoding) | 0;
    let buf = createBuffer(length);
    const actual = buf.write(string, encoding);
    if (actual !== length) {
      buf = buf.slice(0, actual);
    }
    return buf;
  }
  function fromArrayLike(array) {
    const length = array.length < 0 ? 0 : checked(array.length) | 0;
    const buf = createBuffer(length);
    for (let i8 = 0; i8 < length; i8 += 1) {
      buf[i8] = array[i8] & 255;
    }
    return buf;
  }
  function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
      const copy = new Uint8Array(arrayView);
      return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
  }
  function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError('"offset" is outside of buffer bounds');
    }
    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('"length" is outside of buffer bounds');
    }
    let buf;
    if (byteOffset === void 0 && length === void 0) {
      buf = new Uint8Array(array);
    } else if (length === void 0) {
      buf = new Uint8Array(array, byteOffset);
    } else {
      buf = new Uint8Array(array, byteOffset, length);
    }
    Object.setPrototypeOf(buf, Buffer3.prototype);
    return buf;
  }
  function fromObject(obj) {
    if (Buffer3.isBuffer(obj)) {
      const len = checked(obj.length) | 0;
      const buf = createBuffer(len);
      if (buf.length === 0) {
        return buf;
      }
      obj.copy(buf, 0, 0, len);
      return buf;
    }
    if (obj.length !== void 0) {
      if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
        return createBuffer(0);
      }
      return fromArrayLike(obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data);
    }
  }
  function checked(length) {
    if (length >= K_MAX_LENGTH) {
      throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
    }
    return length | 0;
  }
  function SlowBuffer(length) {
    if (+length != length) {
      length = 0;
    }
    return Buffer3.alloc(+length);
  }
  Buffer3.isBuffer = function isBuffer4(b5) {
    return b5 != null && b5._isBuffer === true && b5 !== Buffer3.prototype;
  };
  Buffer3.compare = function compare(a8, b5) {
    if (isInstance(a8, Uint8Array))
      a8 = Buffer3.from(a8, a8.offset, a8.byteLength);
    if (isInstance(b5, Uint8Array))
      b5 = Buffer3.from(b5, b5.offset, b5.byteLength);
    if (!Buffer3.isBuffer(a8) || !Buffer3.isBuffer(b5)) {
      throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    }
    if (a8 === b5)
      return 0;
    let x4 = a8.length;
    let y6 = b5.length;
    for (let i8 = 0, len = Math.min(x4, y6); i8 < len; ++i8) {
      if (a8[i8] !== b5[i8]) {
        x4 = a8[i8];
        y6 = b5[i8];
        break;
      }
    }
    if (x4 < y6)
      return -1;
    if (y6 < x4)
      return 1;
    return 0;
  };
  Buffer3.isEncoding = function isEncoding(encoding) {
    switch (String(encoding).toLowerCase()) {
      case "hex":
      case "utf8":
      case "utf-8":
      case "ascii":
      case "latin1":
      case "binary":
      case "base64":
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return true;
      default:
        return false;
    }
  };
  Buffer3.concat = function concat(list, length) {
    if (!Array.isArray(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }
    if (list.length === 0) {
      return Buffer3.alloc(0);
    }
    let i8;
    if (length === void 0) {
      length = 0;
      for (i8 = 0; i8 < list.length; ++i8) {
        length += list[i8].length;
      }
    }
    const buffer2 = Buffer3.allocUnsafe(length);
    let pos = 0;
    for (i8 = 0; i8 < list.length; ++i8) {
      let buf = list[i8];
      if (isInstance(buf, Uint8Array)) {
        if (pos + buf.length > buffer2.length) {
          if (!Buffer3.isBuffer(buf))
            buf = Buffer3.from(buf);
          buf.copy(buffer2, pos);
        } else {
          Uint8Array.prototype.set.call(buffer2, buf, pos);
        }
      } else if (!Buffer3.isBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      } else {
        buf.copy(buffer2, pos);
      }
      pos += buf.length;
    }
    return buffer2;
  };
  function byteLength(string, encoding) {
    if (Buffer3.isBuffer(string)) {
      return string.length;
    }
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
      return string.byteLength;
    }
    if (typeof string !== "string") {
      throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
    }
    const len = string.length;
    const mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0)
      return 0;
    let loweredCase = false;
    for (; ; ) {
      switch (encoding) {
        case "ascii":
        case "latin1":
        case "binary":
          return len;
        case "utf8":
        case "utf-8":
          return utf8ToBytes(string).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return len * 2;
        case "hex":
          return len >>> 1;
        case "base64":
          return base64ToBytes(string).length;
        default:
          if (loweredCase) {
            return mustMatch ? -1 : utf8ToBytes(string).length;
          }
          encoding = ("" + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer3.byteLength = byteLength;
  function slowToString(encoding, start, end) {
    let loweredCase = false;
    if (start === void 0 || start < 0) {
      start = 0;
    }
    if (start > this.length) {
      return "";
    }
    if (end === void 0 || end > this.length) {
      end = this.length;
    }
    if (end <= 0) {
      return "";
    }
    end >>>= 0;
    start >>>= 0;
    if (end <= start) {
      return "";
    }
    if (!encoding)
      encoding = "utf8";
    while (true) {
      switch (encoding) {
        case "hex":
          return hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
          return utf8Slice(this, start, end);
        case "ascii":
          return asciiSlice(this, start, end);
        case "latin1":
        case "binary":
          return latin1Slice(this, start, end);
        case "base64":
          return base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return utf16leSlice(this, start, end);
        default:
          if (loweredCase)
            throw new TypeError("Unknown encoding: " + encoding);
          encoding = (encoding + "").toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer3.prototype._isBuffer = true;
  function swap(b5, n9, m6) {
    const i8 = b5[n9];
    b5[n9] = b5[m6];
    b5[m6] = i8;
  }
  Buffer3.prototype.swap16 = function swap16() {
    const len = this.length;
    if (len % 2 !== 0) {
      throw new RangeError("Buffer size must be a multiple of 16-bits");
    }
    for (let i8 = 0; i8 < len; i8 += 2) {
      swap(this, i8, i8 + 1);
    }
    return this;
  };
  Buffer3.prototype.swap32 = function swap32() {
    const len = this.length;
    if (len % 4 !== 0) {
      throw new RangeError("Buffer size must be a multiple of 32-bits");
    }
    for (let i8 = 0; i8 < len; i8 += 4) {
      swap(this, i8, i8 + 3);
      swap(this, i8 + 1, i8 + 2);
    }
    return this;
  };
  Buffer3.prototype.swap64 = function swap64() {
    const len = this.length;
    if (len % 8 !== 0) {
      throw new RangeError("Buffer size must be a multiple of 64-bits");
    }
    for (let i8 = 0; i8 < len; i8 += 8) {
      swap(this, i8, i8 + 7);
      swap(this, i8 + 1, i8 + 6);
      swap(this, i8 + 2, i8 + 5);
      swap(this, i8 + 3, i8 + 4);
    }
    return this;
  };
  Buffer3.prototype.toString = function toString3() {
    const length = this.length;
    if (length === 0)
      return "";
    if (arguments.length === 0)
      return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
  };
  Buffer3.prototype.toLocaleString = Buffer3.prototype.toString;
  Buffer3.prototype.equals = function equals(b5) {
    if (!Buffer3.isBuffer(b5))
      throw new TypeError("Argument must be a Buffer");
    if (this === b5)
      return true;
    return Buffer3.compare(this, b5) === 0;
  };
  Buffer3.prototype.inspect = function inspect3() {
    let str = "";
    const max = exports$1.INSPECT_MAX_BYTES;
    str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
    if (this.length > max)
      str += " ... ";
    return "<Buffer " + str + ">";
  };
  if (customInspectSymbol) {
    Buffer3.prototype[customInspectSymbol] = Buffer3.prototype.inspect;
  }
  Buffer3.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) {
      target = Buffer3.from(target, target.offset, target.byteLength);
    }
    if (!Buffer3.isBuffer(target)) {
      throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
    }
    if (start === void 0) {
      start = 0;
    }
    if (end === void 0) {
      end = target ? target.length : 0;
    }
    if (thisStart === void 0) {
      thisStart = 0;
    }
    if (thisEnd === void 0) {
      thisEnd = this.length;
    }
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError("out of range index");
    }
    if (thisStart >= thisEnd && start >= end) {
      return 0;
    }
    if (thisStart >= thisEnd) {
      return -1;
    }
    if (start >= end) {
      return 1;
    }
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target)
      return 0;
    let x4 = thisEnd - thisStart;
    let y6 = end - start;
    const len = Math.min(x4, y6);
    const thisCopy = this.slice(thisStart, thisEnd);
    const targetCopy = target.slice(start, end);
    for (let i8 = 0; i8 < len; ++i8) {
      if (thisCopy[i8] !== targetCopy[i8]) {
        x4 = thisCopy[i8];
        y6 = targetCopy[i8];
        break;
      }
    }
    if (x4 < y6)
      return -1;
    if (y6 < x4)
      return 1;
    return 0;
  };
  function bidirectionalIndexOf(buffer2, val, byteOffset, encoding, dir) {
    if (buffer2.length === 0)
      return -1;
    if (typeof byteOffset === "string") {
      encoding = byteOffset;
      byteOffset = 0;
    } else if (byteOffset > 2147483647) {
      byteOffset = 2147483647;
    } else if (byteOffset < -2147483648) {
      byteOffset = -2147483648;
    }
    byteOffset = +byteOffset;
    if (numberIsNaN(byteOffset)) {
      byteOffset = dir ? 0 : buffer2.length - 1;
    }
    if (byteOffset < 0)
      byteOffset = buffer2.length + byteOffset;
    if (byteOffset >= buffer2.length) {
      if (dir)
        return -1;
      else
        byteOffset = buffer2.length - 1;
    } else if (byteOffset < 0) {
      if (dir)
        byteOffset = 0;
      else
        return -1;
    }
    if (typeof val === "string") {
      val = Buffer3.from(val, encoding);
    }
    if (Buffer3.isBuffer(val)) {
      if (val.length === 0) {
        return -1;
      }
      return arrayIndexOf(buffer2, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
      val = val & 255;
      if (typeof Uint8Array.prototype.indexOf === "function") {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer2, val, byteOffset);
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer2, val, byteOffset);
        }
      }
      return arrayIndexOf(buffer2, [val], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
  }
  function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    let indexSize = 1;
    let arrLength = arr.length;
    let valLength = val.length;
    if (encoding !== void 0) {
      encoding = String(encoding).toLowerCase();
      if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
        if (arr.length < 2 || val.length < 2) {
          return -1;
        }
        indexSize = 2;
        arrLength /= 2;
        valLength /= 2;
        byteOffset /= 2;
      }
    }
    function read(buf, i9) {
      if (indexSize === 1) {
        return buf[i9];
      } else {
        return buf.readUInt16BE(i9 * indexSize);
      }
    }
    let i8;
    if (dir) {
      let foundIndex = -1;
      for (i8 = byteOffset; i8 < arrLength; i8++) {
        if (read(arr, i8) === read(val, foundIndex === -1 ? 0 : i8 - foundIndex)) {
          if (foundIndex === -1)
            foundIndex = i8;
          if (i8 - foundIndex + 1 === valLength)
            return foundIndex * indexSize;
        } else {
          if (foundIndex !== -1)
            i8 -= i8 - foundIndex;
          foundIndex = -1;
        }
      }
    } else {
      if (byteOffset + valLength > arrLength)
        byteOffset = arrLength - valLength;
      for (i8 = byteOffset; i8 >= 0; i8--) {
        let found = true;
        for (let j4 = 0; j4 < valLength; j4++) {
          if (read(arr, i8 + j4) !== read(val, j4)) {
            found = false;
            break;
          }
        }
        if (found)
          return i8;
      }
    }
    return -1;
  }
  Buffer3.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
  };
  Buffer3.prototype.indexOf = function indexOf2(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
  };
  Buffer3.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
  };
  function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    const remaining = buf.length - offset;
    if (!length) {
      length = remaining;
    } else {
      length = Number(length);
      if (length > remaining) {
        length = remaining;
      }
    }
    const strLen = string.length;
    if (length > strLen / 2) {
      length = strLen / 2;
    }
    let i8;
    for (i8 = 0; i8 < length; ++i8) {
      const parsed = parseInt(string.substr(i8 * 2, 2), 16);
      if (numberIsNaN(parsed))
        return i8;
      buf[offset + i8] = parsed;
    }
    return i8;
  }
  function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
  }
  function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
  }
  function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
  }
  function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
  }
  Buffer3.prototype.write = function write(string, offset, length, encoding) {
    if (offset === void 0) {
      encoding = "utf8";
      length = this.length;
      offset = 0;
    } else if (length === void 0 && typeof offset === "string") {
      encoding = offset;
      length = this.length;
      offset = 0;
    } else if (isFinite(offset)) {
      offset = offset >>> 0;
      if (isFinite(length)) {
        length = length >>> 0;
        if (encoding === void 0)
          encoding = "utf8";
      } else {
        encoding = length;
        length = void 0;
      }
    } else {
      throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    }
    const remaining = this.length - offset;
    if (length === void 0 || length > remaining)
      length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
      throw new RangeError("Attempt to write outside buffer bounds");
    }
    if (!encoding)
      encoding = "utf8";
    let loweredCase = false;
    for (; ; ) {
      switch (encoding) {
        case "hex":
          return hexWrite(this, string, offset, length);
        case "utf8":
        case "utf-8":
          return utf8Write(this, string, offset, length);
        case "ascii":
        case "latin1":
        case "binary":
          return asciiWrite(this, string, offset, length);
        case "base64":
          return base64Write(this, string, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return ucs2Write(this, string, offset, length);
        default:
          if (loweredCase)
            throw new TypeError("Unknown encoding: " + encoding);
          encoding = ("" + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  };
  Buffer3.prototype.toJSON = function toJSON2() {
    return {
      type: "Buffer",
      data: Array.prototype.slice.call(this._arr || this, 0)
    };
  };
  function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) {
      return base64.fromByteArray(buf);
    } else {
      return base64.fromByteArray(buf.slice(start, end));
    }
  }
  function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    const res = [];
    let i8 = start;
    while (i8 < end) {
      const firstByte = buf[i8];
      let codePoint = null;
      let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
      if (i8 + bytesPerSequence <= end) {
        let secondByte, thirdByte, fourthByte, tempCodePoint;
        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 128) {
              codePoint = firstByte;
            }
            break;
          case 2:
            secondByte = buf[i8 + 1];
            if ((secondByte & 192) === 128) {
              tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
              if (tempCodePoint > 127) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 3:
            secondByte = buf[i8 + 1];
            thirdByte = buf[i8 + 2];
            if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
              tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
              if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 4:
            secondByte = buf[i8 + 1];
            thirdByte = buf[i8 + 2];
            fourthByte = buf[i8 + 3];
            if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
              tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
              if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                codePoint = tempCodePoint;
              }
            }
        }
      }
      if (codePoint === null) {
        codePoint = 65533;
        bytesPerSequence = 1;
      } else if (codePoint > 65535) {
        codePoint -= 65536;
        res.push(codePoint >>> 10 & 1023 | 55296);
        codePoint = 56320 | codePoint & 1023;
      }
      res.push(codePoint);
      i8 += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
  }
  const MAX_ARGUMENTS_LENGTH = 4096;
  function decodeCodePointsArray(codePoints) {
    const len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints);
    }
    let res = "";
    let i8 = 0;
    while (i8 < len) {
      res += String.fromCharCode.apply(String, codePoints.slice(i8, i8 += MAX_ARGUMENTS_LENGTH));
    }
    return res;
  }
  function asciiSlice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for (let i8 = start; i8 < end; ++i8) {
      ret += String.fromCharCode(buf[i8] & 127);
    }
    return ret;
  }
  function latin1Slice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for (let i8 = start; i8 < end; ++i8) {
      ret += String.fromCharCode(buf[i8]);
    }
    return ret;
  }
  function hexSlice(buf, start, end) {
    const len = buf.length;
    if (!start || start < 0)
      start = 0;
    if (!end || end < 0 || end > len)
      end = len;
    let out = "";
    for (let i8 = start; i8 < end; ++i8) {
      out += hexSliceLookupTable[buf[i8]];
    }
    return out;
  }
  function utf16leSlice(buf, start, end) {
    const bytes = buf.slice(start, end);
    let res = "";
    for (let i8 = 0; i8 < bytes.length - 1; i8 += 2) {
      res += String.fromCharCode(bytes[i8] + bytes[i8 + 1] * 256);
    }
    return res;
  }
  Buffer3.prototype.slice = function slice(start, end) {
    const len = this.length;
    start = ~~start;
    end = end === void 0 ? len : ~~end;
    if (start < 0) {
      start += len;
      if (start < 0)
        start = 0;
    } else if (start > len) {
      start = len;
    }
    if (end < 0) {
      end += len;
      if (end < 0)
        end = 0;
    } else if (end > len) {
      end = len;
    }
    if (end < start)
      end = start;
    const newBuf = this.subarray(start, end);
    Object.setPrototypeOf(newBuf, Buffer3.prototype);
    return newBuf;
  };
  function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0)
      throw new RangeError("offset is not uint");
    if (offset + ext > length)
      throw new RangeError("Trying to access beyond buffer length");
  }
  Buffer3.prototype.readUintLE = Buffer3.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
    offset = offset >>> 0;
    byteLength2 = byteLength2 >>> 0;
    if (!noAssert)
      checkOffset(offset, byteLength2, this.length);
    let val = this[offset];
    let mul = 1;
    let i8 = 0;
    while (++i8 < byteLength2 && (mul *= 256)) {
      val += this[offset + i8] * mul;
    }
    return val;
  };
  Buffer3.prototype.readUintBE = Buffer3.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
    offset = offset >>> 0;
    byteLength2 = byteLength2 >>> 0;
    if (!noAssert) {
      checkOffset(offset, byteLength2, this.length);
    }
    let val = this[offset + --byteLength2];
    let mul = 1;
    while (byteLength2 > 0 && (mul *= 256)) {
      val += this[offset + --byteLength2] * mul;
    }
    return val;
  };
  Buffer3.prototype.readUint8 = Buffer3.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 1, this.length);
    return this[offset];
  };
  Buffer3.prototype.readUint16LE = Buffer3.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
  };
  Buffer3.prototype.readUint16BE = Buffer3.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
  };
  Buffer3.prototype.readUint32LE = Buffer3.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
  };
  Buffer3.prototype.readUint32BE = Buffer3.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
  };
  Buffer3.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === void 0 || last === void 0) {
      boundsError(offset, this.length - 8);
    }
    const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
    const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
    return BigInt(lo) + (BigInt(hi) << BigInt(32));
  });
  Buffer3.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === void 0 || last === void 0) {
      boundsError(offset, this.length - 8);
    }
    const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
    const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
    return (BigInt(hi) << BigInt(32)) + BigInt(lo);
  });
  Buffer3.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
    offset = offset >>> 0;
    byteLength2 = byteLength2 >>> 0;
    if (!noAssert)
      checkOffset(offset, byteLength2, this.length);
    let val = this[offset];
    let mul = 1;
    let i8 = 0;
    while (++i8 < byteLength2 && (mul *= 256)) {
      val += this[offset + i8] * mul;
    }
    mul *= 128;
    if (val >= mul)
      val -= Math.pow(2, 8 * byteLength2);
    return val;
  };
  Buffer3.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
    offset = offset >>> 0;
    byteLength2 = byteLength2 >>> 0;
    if (!noAssert)
      checkOffset(offset, byteLength2, this.length);
    let i8 = byteLength2;
    let mul = 1;
    let val = this[offset + --i8];
    while (i8 > 0 && (mul *= 256)) {
      val += this[offset + --i8] * mul;
    }
    mul *= 128;
    if (val >= mul)
      val -= Math.pow(2, 8 * byteLength2);
    return val;
  };
  Buffer3.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 1, this.length);
    if (!(this[offset] & 128))
      return this[offset];
    return (255 - this[offset] + 1) * -1;
  };
  Buffer3.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 2, this.length);
    const val = this[offset] | this[offset + 1] << 8;
    return val & 32768 ? val | 4294901760 : val;
  };
  Buffer3.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 2, this.length);
    const val = this[offset + 1] | this[offset] << 8;
    return val & 32768 ? val | 4294901760 : val;
  };
  Buffer3.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
  };
  Buffer3.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
  };
  Buffer3.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === void 0 || last === void 0) {
      boundsError(offset, this.length - 8);
    }
    const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);
    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
  });
  Buffer3.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === void 0 || last === void 0) {
      boundsError(offset, this.length - 8);
    }
    const val = (first << 24) + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);
  });
  Buffer3.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
  };
  Buffer3.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
  };
  Buffer3.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
  };
  Buffer3.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
  };
  function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer3.isBuffer(buf))
      throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min)
      throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length)
      throw new RangeError("Index out of range");
  }
  Buffer3.prototype.writeUintLE = Buffer3.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength2 = byteLength2 >>> 0;
    if (!noAssert) {
      const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
      checkInt(this, value, offset, byteLength2, maxBytes, 0);
    }
    let mul = 1;
    let i8 = 0;
    this[offset] = value & 255;
    while (++i8 < byteLength2 && (mul *= 256)) {
      this[offset + i8] = value / mul & 255;
    }
    return offset + byteLength2;
  };
  Buffer3.prototype.writeUintBE = Buffer3.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength2 = byteLength2 >>> 0;
    if (!noAssert) {
      const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
      checkInt(this, value, offset, byteLength2, maxBytes, 0);
    }
    let i8 = byteLength2 - 1;
    let mul = 1;
    this[offset + i8] = value & 255;
    while (--i8 >= 0 && (mul *= 256)) {
      this[offset + i8] = value / mul & 255;
    }
    return offset + byteLength2;
  };
  Buffer3.prototype.writeUint8 = Buffer3.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value, offset, 1, 255, 0);
    this[offset] = value & 255;
    return offset + 1;
  };
  Buffer3.prototype.writeUint16LE = Buffer3.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value, offset, 2, 65535, 0);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    return offset + 2;
  };
  Buffer3.prototype.writeUint16BE = Buffer3.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value, offset, 2, 65535, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 255;
    return offset + 2;
  };
  Buffer3.prototype.writeUint32LE = Buffer3.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value, offset, 4, 4294967295, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 255;
    return offset + 4;
  };
  Buffer3.prototype.writeUint32BE = Buffer3.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value, offset, 4, 4294967295, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 255;
    return offset + 4;
  };
  function wrtBigUInt64LE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(4294967295));
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(4294967295));
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    return offset;
  }
  function wrtBigUInt64BE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(4294967295));
    buf[offset + 7] = lo;
    lo = lo >> 8;
    buf[offset + 6] = lo;
    lo = lo >> 8;
    buf[offset + 5] = lo;
    lo = lo >> 8;
    buf[offset + 4] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(4294967295));
    buf[offset + 3] = hi;
    hi = hi >> 8;
    buf[offset + 2] = hi;
    hi = hi >> 8;
    buf[offset + 1] = hi;
    hi = hi >> 8;
    buf[offset] = hi;
    return offset + 8;
  }
  Buffer3.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
  });
  Buffer3.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
  });
  Buffer3.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
      const limit = Math.pow(2, 8 * byteLength2 - 1);
      checkInt(this, value, offset, byteLength2, limit - 1, -limit);
    }
    let i8 = 0;
    let mul = 1;
    let sub = 0;
    this[offset] = value & 255;
    while (++i8 < byteLength2 && (mul *= 256)) {
      if (value < 0 && sub === 0 && this[offset + i8 - 1] !== 0) {
        sub = 1;
      }
      this[offset + i8] = (value / mul >> 0) - sub & 255;
    }
    return offset + byteLength2;
  };
  Buffer3.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
      const limit = Math.pow(2, 8 * byteLength2 - 1);
      checkInt(this, value, offset, byteLength2, limit - 1, -limit);
    }
    let i8 = byteLength2 - 1;
    let mul = 1;
    let sub = 0;
    this[offset + i8] = value & 255;
    while (--i8 >= 0 && (mul *= 256)) {
      if (value < 0 && sub === 0 && this[offset + i8 + 1] !== 0) {
        sub = 1;
      }
      this[offset + i8] = (value / mul >> 0) - sub & 255;
    }
    return offset + byteLength2;
  };
  Buffer3.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value, offset, 1, 127, -128);
    if (value < 0)
      value = 255 + value + 1;
    this[offset] = value & 255;
    return offset + 1;
  };
  Buffer3.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value, offset, 2, 32767, -32768);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    return offset + 2;
  };
  Buffer3.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value, offset, 2, 32767, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 255;
    return offset + 2;
  };
  Buffer3.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value, offset, 4, 2147483647, -2147483648);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
  };
  Buffer3.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value, offset, 4, 2147483647, -2147483648);
    if (value < 0)
      value = 4294967295 + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 255;
    return offset + 4;
  };
  Buffer3.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
  });
  Buffer3.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
  });
  function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length)
      throw new RangeError("Index out of range");
    if (offset < 0)
      throw new RangeError("Index out of range");
  }
  function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4);
    }
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
  }
  Buffer3.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
  };
  Buffer3.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
  };
  function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8);
    }
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
  }
  Buffer3.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
  };
  Buffer3.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
  };
  Buffer3.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer3.isBuffer(target))
      throw new TypeError("argument should be a Buffer");
    if (!start)
      start = 0;
    if (!end && end !== 0)
      end = this.length;
    if (targetStart >= target.length)
      targetStart = target.length;
    if (!targetStart)
      targetStart = 0;
    if (end > 0 && end < start)
      end = start;
    if (end === start)
      return 0;
    if (target.length === 0 || this.length === 0)
      return 0;
    if (targetStart < 0) {
      throw new RangeError("targetStart out of bounds");
    }
    if (start < 0 || start >= this.length)
      throw new RangeError("Index out of range");
    if (end < 0)
      throw new RangeError("sourceEnd out of bounds");
    if (end > this.length)
      end = this.length;
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start;
    }
    const len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
      this.copyWithin(targetStart, start, end);
    } else {
      Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    }
    return len;
  };
  Buffer3.prototype.fill = function fill(val, start, end, encoding) {
    if (typeof val === "string") {
      if (typeof start === "string") {
        encoding = start;
        start = 0;
        end = this.length;
      } else if (typeof end === "string") {
        encoding = end;
        end = this.length;
      }
      if (encoding !== void 0 && typeof encoding !== "string") {
        throw new TypeError("encoding must be a string");
      }
      if (typeof encoding === "string" && !Buffer3.isEncoding(encoding)) {
        throw new TypeError("Unknown encoding: " + encoding);
      }
      if (val.length === 1) {
        const code = val.charCodeAt(0);
        if (encoding === "utf8" && code < 128 || encoding === "latin1") {
          val = code;
        }
      }
    } else if (typeof val === "number") {
      val = val & 255;
    } else if (typeof val === "boolean") {
      val = Number(val);
    }
    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError("Out of range index");
    }
    if (end <= start) {
      return this;
    }
    start = start >>> 0;
    end = end === void 0 ? this.length : end >>> 0;
    if (!val)
      val = 0;
    let i8;
    if (typeof val === "number") {
      for (i8 = start; i8 < end; ++i8) {
        this[i8] = val;
      }
    } else {
      const bytes = Buffer3.isBuffer(val) ? val : Buffer3.from(val, encoding);
      const len = bytes.length;
      if (len === 0) {
        throw new TypeError('The value "' + val + '" is invalid for argument "value"');
      }
      for (i8 = 0; i8 < end - start; ++i8) {
        this[i8 + start] = bytes[i8 % len];
      }
    }
    return this;
  };
  const errors = {};
  function E4(sym, getMessage, Base) {
    errors[sym] = class NodeError extends Base {
      constructor() {
        super();
        Object.defineProperty(this, "message", {
          value: getMessage.apply(this, arguments),
          writable: true,
          configurable: true
        });
        this.name = `${this.name} [${sym}]`;
        this.stack;
        delete this.name;
      }
      get code() {
        return sym;
      }
      set code(value) {
        Object.defineProperty(this, "code", {
          configurable: true,
          enumerable: true,
          value,
          writable: true
        });
      }
      toString() {
        return `${this.name} [${sym}]: ${this.message}`;
      }
    };
  }
  E4("ERR_BUFFER_OUT_OF_BOUNDS", function(name2) {
    if (name2) {
      return `${name2} is outside of buffer bounds`;
    }
    return "Attempt to access memory outside buffer bounds";
  }, RangeError);
  E4("ERR_INVALID_ARG_TYPE", function(name2, actual) {
    return `The "${name2}" argument must be of type number. Received type ${typeof actual}`;
  }, TypeError);
  E4("ERR_OUT_OF_RANGE", function(str, range, input) {
    let msg = `The value of "${str}" is out of range.`;
    let received = input;
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
      received = addNumericalSeparator(String(input));
    } else if (typeof input === "bigint") {
      received = String(input);
      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
        received = addNumericalSeparator(received);
      }
      received += "n";
    }
    msg += ` It must be ${range}. Received ${received}`;
    return msg;
  }, RangeError);
  function addNumericalSeparator(val) {
    let res = "";
    let i8 = val.length;
    const start = val[0] === "-" ? 1 : 0;
    for (; i8 >= start + 4; i8 -= 3) {
      res = `_${val.slice(i8 - 3, i8)}${res}`;
    }
    return `${val.slice(0, i8)}${res}`;
  }
  function checkBounds(buf, offset, byteLength2) {
    validateNumber(offset, "offset");
    if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {
      boundsError(offset, buf.length - (byteLength2 + 1));
    }
  }
  function checkIntBI(value, min, max, buf, offset, byteLength2) {
    if (value > max || value < min) {
      const n9 = typeof min === "bigint" ? "n" : "";
      let range;
      if (byteLength2 > 3) {
        if (min === 0 || min === BigInt(0)) {
          range = `>= 0${n9} and < 2${n9} ** ${(byteLength2 + 1) * 8}${n9}`;
        } else {
          range = `>= -(2${n9} ** ${(byteLength2 + 1) * 8 - 1}${n9}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n9}`;
        }
      } else {
        range = `>= ${min}${n9} and <= ${max}${n9}`;
      }
      throw new errors.ERR_OUT_OF_RANGE("value", range, value);
    }
    checkBounds(buf, offset, byteLength2);
  }
  function validateNumber(value, name2) {
    if (typeof value !== "number") {
      throw new errors.ERR_INVALID_ARG_TYPE(name2, "number", value);
    }
  }
  function boundsError(value, length, type) {
    if (Math.floor(value) !== value) {
      validateNumber(value, type);
      throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
    }
    if (length < 0) {
      throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
    }
    throw new errors.ERR_OUT_OF_RANGE(type || "offset", `>= ${type ? 1 : 0} and <= ${length}`, value);
  }
  const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
  function base64clean(str) {
    str = str.split("=")[0];
    str = str.trim().replace(INVALID_BASE64_RE, "");
    if (str.length < 2)
      return "";
    while (str.length % 4 !== 0) {
      str = str + "=";
    }
    return str;
  }
  function utf8ToBytes(string, units) {
    units = units || Infinity;
    let codePoint;
    const length = string.length;
    let leadSurrogate = null;
    const bytes = [];
    for (let i8 = 0; i8 < length; ++i8) {
      codePoint = string.charCodeAt(i8);
      if (codePoint > 55295 && codePoint < 57344) {
        if (!leadSurrogate) {
          if (codePoint > 56319) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
            continue;
          } else if (i8 + 1 === length) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
            continue;
          }
          leadSurrogate = codePoint;
          continue;
        }
        if (codePoint < 56320) {
          if ((units -= 3) > -1)
            bytes.push(239, 191, 189);
          leadSurrogate = codePoint;
          continue;
        }
        codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
      } else if (leadSurrogate) {
        if ((units -= 3) > -1)
          bytes.push(239, 191, 189);
      }
      leadSurrogate = null;
      if (codePoint < 128) {
        if ((units -= 1) < 0)
          break;
        bytes.push(codePoint);
      } else if (codePoint < 2048) {
        if ((units -= 2) < 0)
          break;
        bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
      } else if (codePoint < 65536) {
        if ((units -= 3) < 0)
          break;
        bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
      } else if (codePoint < 1114112) {
        if ((units -= 4) < 0)
          break;
        bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
      } else {
        throw new Error("Invalid code point");
      }
    }
    return bytes;
  }
  function asciiToBytes(str) {
    const byteArray = [];
    for (let i8 = 0; i8 < str.length; ++i8) {
      byteArray.push(str.charCodeAt(i8) & 255);
    }
    return byteArray;
  }
  function utf16leToBytes(str, units) {
    let c8, hi, lo;
    const byteArray = [];
    for (let i8 = 0; i8 < str.length; ++i8) {
      if ((units -= 2) < 0)
        break;
      c8 = str.charCodeAt(i8);
      hi = c8 >> 8;
      lo = c8 % 256;
      byteArray.push(lo);
      byteArray.push(hi);
    }
    return byteArray;
  }
  function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
  }
  function blitBuffer(src, dst, offset, length) {
    let i8;
    for (i8 = 0; i8 < length; ++i8) {
      if (i8 + offset >= dst.length || i8 >= src.length)
        break;
      dst[i8 + offset] = src[i8];
    }
    return i8;
  }
  function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
  }
  function numberIsNaN(obj) {
    return obj !== obj;
  }
  const hexSliceLookupTable = function() {
    const alphabet = "0123456789abcdef";
    const table = new Array(256);
    for (let i8 = 0; i8 < 16; ++i8) {
      const i16 = i8 * 16;
      for (let j4 = 0; j4 < 16; ++j4) {
        table[i16 + j4] = alphabet[i8] + alphabet[j4];
      }
    }
    return table;
  }();
  function defineBigIntMethod(fn) {
    return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
  }
  function BufferBigIntNotDefined() {
    throw new Error("BigInt not supported");
  }
  return exports$1;
}
var exports$3, _dewExec$2, exports$2, _dewExec$1, exports$1, _dewExec, exports, Buffer2, INSPECT_MAX_BYTES, kMaxLength;
var init_buffer = __esm({
  "../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/buffer.js"() {
    init_dirname();
    init_buffer2();
    init_process2();
    exports$3 = {};
    _dewExec$2 = false;
    exports$2 = {};
    _dewExec$1 = false;
    exports$1 = {};
    _dewExec = false;
    exports = dew();
    exports["Buffer"];
    exports["SlowBuffer"];
    exports["INSPECT_MAX_BYTES"];
    exports["kMaxLength"];
    Buffer2 = exports.Buffer;
    INSPECT_MAX_BYTES = exports.INSPECT_MAX_BYTES;
    kMaxLength = exports.kMaxLength;
  }
});

// ../../node_modules/.pnpm/esbuild-plugin-polyfill-node@0.3.0_esbuild@0.16.12/node_modules/esbuild-plugin-polyfill-node/polyfills/buffer.js
var init_buffer2 = __esm({
  "../../node_modules/.pnpm/esbuild-plugin-polyfill-node@0.3.0_esbuild@0.16.12/node_modules/esbuild-plugin-polyfill-node/polyfills/buffer.js"() {
    init_buffer();
  }
});

// ../../node_modules/.pnpm/form-data@4.0.0/node_modules/form-data/lib/browser.js
var require_browser = __commonJS({
  "../../node_modules/.pnpm/form-data@4.0.0/node_modules/form-data/lib/browser.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    module3.exports = typeof self == "object" ? self.FormData : window.FormData;
  }
});

// ../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/chunk-4bd36a8f.js
function o() {
  o.init.call(this);
}
function u(e11) {
  if ("function" != typeof e11)
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof e11);
}
function f(e11) {
  return void 0 === e11._maxListeners ? o.defaultMaxListeners : e11._maxListeners;
}
function v(e11, t8, n9, r9) {
  var i8, o9, s7, v6;
  if (u(n9), void 0 === (o9 = e11._events) ? (o9 = e11._events = /* @__PURE__ */ Object.create(null), e11._eventsCount = 0) : (void 0 !== o9.newListener && (e11.emit("newListener", t8, n9.listener ? n9.listener : n9), o9 = e11._events), s7 = o9[t8]), void 0 === s7)
    s7 = o9[t8] = n9, ++e11._eventsCount;
  else if ("function" == typeof s7 ? s7 = o9[t8] = r9 ? [n9, s7] : [s7, n9] : r9 ? s7.unshift(n9) : s7.push(n9), (i8 = f(e11)) > 0 && s7.length > i8 && !s7.warned) {
    s7.warned = true;
    var a8 = new Error("Possible EventEmitter memory leak detected. " + s7.length + " " + String(t8) + " listeners added. Use emitter.setMaxListeners() to increase limit");
    a8.name = "MaxListenersExceededWarning", a8.emitter = e11, a8.type = t8, a8.count = s7.length, v6 = a8, console && console.warn && console.warn(v6);
  }
  return e11;
}
function a() {
  if (!this.fired)
    return this.target.removeListener(this.type, this.wrapFn), this.fired = true, 0 === arguments.length ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
}
function l(e11, t8, n9) {
  var r9 = { fired: false, wrapFn: void 0, target: e11, type: t8, listener: n9 }, i8 = a.bind(r9);
  return i8.listener = n9, r9.wrapFn = i8, i8;
}
function h(e11, t8, n9) {
  var r9 = e11._events;
  if (void 0 === r9)
    return [];
  var i8 = r9[t8];
  return void 0 === i8 ? [] : "function" == typeof i8 ? n9 ? [i8.listener || i8] : [i8] : n9 ? function(e12) {
    for (var t9 = new Array(e12.length), n10 = 0; n10 < t9.length; ++n10)
      t9[n10] = e12[n10].listener || e12[n10];
    return t9;
  }(i8) : c(i8, i8.length);
}
function p(e11) {
  var t8 = this._events;
  if (void 0 !== t8) {
    var n9 = t8[e11];
    if ("function" == typeof n9)
      return 1;
    if (void 0 !== n9)
      return n9.length;
  }
  return 0;
}
function c(e11, t8) {
  for (var n9 = new Array(t8), r9 = 0; r9 < t8; ++r9)
    n9[r9] = e11[r9];
  return n9;
}
var e, t, n, r, i, s, y;
var init_chunk_4bd36a8f = __esm({
  "../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/chunk-4bd36a8f.js"() {
    init_dirname();
    init_buffer2();
    init_process2();
    n = "object" == typeof Reflect ? Reflect : null;
    r = n && "function" == typeof n.apply ? n.apply : function(e11, t8, n9) {
      return Function.prototype.apply.call(e11, t8, n9);
    };
    t = n && "function" == typeof n.ownKeys ? n.ownKeys : Object.getOwnPropertySymbols ? function(e11) {
      return Object.getOwnPropertyNames(e11).concat(Object.getOwnPropertySymbols(e11));
    } : function(e11) {
      return Object.getOwnPropertyNames(e11);
    };
    i = Number.isNaN || function(e11) {
      return e11 != e11;
    };
    e = o, o.EventEmitter = o, o.prototype._events = void 0, o.prototype._eventsCount = 0, o.prototype._maxListeners = void 0;
    s = 10;
    Object.defineProperty(o, "defaultMaxListeners", { enumerable: true, get: function() {
      return s;
    }, set: function(e11) {
      if ("number" != typeof e11 || e11 < 0 || i(e11))
        throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + e11 + ".");
      s = e11;
    } }), o.init = function() {
      void 0 !== this._events && this._events !== Object.getPrototypeOf(this)._events || (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
    }, o.prototype.setMaxListeners = function(e11) {
      if ("number" != typeof e11 || e11 < 0 || i(e11))
        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + e11 + ".");
      return this._maxListeners = e11, this;
    }, o.prototype.getMaxListeners = function() {
      return f(this);
    }, o.prototype.emit = function(e11) {
      for (var t8 = [], n9 = 1; n9 < arguments.length; n9++)
        t8.push(arguments[n9]);
      var i8 = "error" === e11, o9 = this._events;
      if (void 0 !== o9)
        i8 = i8 && void 0 === o9.error;
      else if (!i8)
        return false;
      if (i8) {
        var s7;
        if (t8.length > 0 && (s7 = t8[0]), s7 instanceof Error)
          throw s7;
        var u8 = new Error("Unhandled error." + (s7 ? " (" + s7.message + ")" : ""));
        throw u8.context = s7, u8;
      }
      var f9 = o9[e11];
      if (void 0 === f9)
        return false;
      if ("function" == typeof f9)
        r(f9, this, t8);
      else {
        var v6 = f9.length, a8 = c(f9, v6);
        for (n9 = 0; n9 < v6; ++n9)
          r(a8[n9], this, t8);
      }
      return true;
    }, o.prototype.addListener = function(e11, t8) {
      return v(this, e11, t8, false);
    }, o.prototype.on = o.prototype.addListener, o.prototype.prependListener = function(e11, t8) {
      return v(this, e11, t8, true);
    }, o.prototype.once = function(e11, t8) {
      return u(t8), this.on(e11, l(this, e11, t8)), this;
    }, o.prototype.prependOnceListener = function(e11, t8) {
      return u(t8), this.prependListener(e11, l(this, e11, t8)), this;
    }, o.prototype.removeListener = function(e11, t8) {
      var n9, r9, i8, o9, s7;
      if (u(t8), void 0 === (r9 = this._events))
        return this;
      if (void 0 === (n9 = r9[e11]))
        return this;
      if (n9 === t8 || n9.listener === t8)
        0 == --this._eventsCount ? this._events = /* @__PURE__ */ Object.create(null) : (delete r9[e11], r9.removeListener && this.emit("removeListener", e11, n9.listener || t8));
      else if ("function" != typeof n9) {
        for (i8 = -1, o9 = n9.length - 1; o9 >= 0; o9--)
          if (n9[o9] === t8 || n9[o9].listener === t8) {
            s7 = n9[o9].listener, i8 = o9;
            break;
          }
        if (i8 < 0)
          return this;
        0 === i8 ? n9.shift() : !function(e12, t9) {
          for (; t9 + 1 < e12.length; t9++)
            e12[t9] = e12[t9 + 1];
          e12.pop();
        }(n9, i8), 1 === n9.length && (r9[e11] = n9[0]), void 0 !== r9.removeListener && this.emit("removeListener", e11, s7 || t8);
      }
      return this;
    }, o.prototype.off = o.prototype.removeListener, o.prototype.removeAllListeners = function(e11) {
      var t8, n9, r9;
      if (void 0 === (n9 = this._events))
        return this;
      if (void 0 === n9.removeListener)
        return 0 === arguments.length ? (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0) : void 0 !== n9[e11] && (0 == --this._eventsCount ? this._events = /* @__PURE__ */ Object.create(null) : delete n9[e11]), this;
      if (0 === arguments.length) {
        var i8, o9 = Object.keys(n9);
        for (r9 = 0; r9 < o9.length; ++r9)
          "removeListener" !== (i8 = o9[r9]) && this.removeAllListeners(i8);
        return this.removeAllListeners("removeListener"), this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0, this;
      }
      if ("function" == typeof (t8 = n9[e11]))
        this.removeListener(e11, t8);
      else if (void 0 !== t8)
        for (r9 = t8.length - 1; r9 >= 0; r9--)
          this.removeListener(e11, t8[r9]);
      return this;
    }, o.prototype.listeners = function(e11) {
      return h(this, e11, true);
    }, o.prototype.rawListeners = function(e11) {
      return h(this, e11, false);
    }, o.listenerCount = function(e11, t8) {
      return "function" == typeof e11.listenerCount ? e11.listenerCount(t8) : p.call(e11, t8);
    }, o.prototype.listenerCount = p, o.prototype.eventNames = function() {
      return this._eventsCount > 0 ? t(this._events) : [];
    };
    y = e;
    y.EventEmitter;
    y.defaultMaxListeners;
    y.init;
    y.listenerCount;
    y.EventEmitter;
    y.defaultMaxListeners;
    y.init;
    y.listenerCount;
  }
});

// ../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/chunk-5decc758.js
function i2() {
  throw new Error("setTimeout has not been defined");
}
function u2() {
  throw new Error("clearTimeout has not been defined");
}
function c2(e11) {
  if (t2 === setTimeout)
    return setTimeout(e11, 0);
  if ((t2 === i2 || !t2) && setTimeout)
    return t2 = setTimeout, setTimeout(e11, 0);
  try {
    return t2(e11, 0);
  } catch (n9) {
    try {
      return t2.call(null, e11, 0);
    } catch (n10) {
      return t2.call(this || r2, e11, 0);
    }
  }
}
function h2() {
  f2 && l2 && (f2 = false, l2.length ? s2 = l2.concat(s2) : a2 = -1, s2.length && d());
}
function d() {
  if (!f2) {
    var e11 = c2(h2);
    f2 = true;
    for (var t8 = s2.length; t8; ) {
      for (l2 = s2, s2 = []; ++a2 < t8; )
        l2 && l2[a2].run();
      a2 = -1, t8 = s2.length;
    }
    l2 = null, f2 = false, function(e12) {
      if (n2 === clearTimeout)
        return clearTimeout(e12);
      if ((n2 === u2 || !n2) && clearTimeout)
        return n2 = clearTimeout, clearTimeout(e12);
      try {
        n2(e12);
      } catch (t9) {
        try {
          return n2.call(null, e12);
        } catch (t10) {
          return n2.call(this || r2, e12);
        }
      }
    }(e11);
  }
}
function m(e11, t8) {
  (this || r2).fun = e11, (this || r2).array = t8;
}
function p2() {
}
var e2, t2, n2, r2, o2, l2, s2, f2, a2, T;
var init_chunk_5decc758 = __esm({
  "../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/chunk-5decc758.js"() {
    init_dirname();
    init_buffer2();
    init_process2();
    r2 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    o2 = e2 = {};
    !function() {
      try {
        t2 = "function" == typeof setTimeout ? setTimeout : i2;
      } catch (e11) {
        t2 = i2;
      }
      try {
        n2 = "function" == typeof clearTimeout ? clearTimeout : u2;
      } catch (e11) {
        n2 = u2;
      }
    }();
    s2 = [];
    f2 = false;
    a2 = -1;
    o2.nextTick = function(e11) {
      var t8 = new Array(arguments.length - 1);
      if (arguments.length > 1)
        for (var n9 = 1; n9 < arguments.length; n9++)
          t8[n9 - 1] = arguments[n9];
      s2.push(new m(e11, t8)), 1 !== s2.length || f2 || c2(d);
    }, m.prototype.run = function() {
      (this || r2).fun.apply(null, (this || r2).array);
    }, o2.title = "browser", o2.browser = true, o2.env = {}, o2.argv = [], o2.version = "", o2.versions = {}, o2.on = p2, o2.addListener = p2, o2.once = p2, o2.off = p2, o2.removeListener = p2, o2.removeAllListeners = p2, o2.emit = p2, o2.prependListener = p2, o2.prependOnceListener = p2, o2.listeners = function(e11) {
      return [];
    }, o2.binding = function(e11) {
      throw new Error("process.binding is not supported");
    }, o2.cwd = function() {
      return "/";
    }, o2.chdir = function(e11) {
      throw new Error("process.chdir is not supported");
    }, o2.umask = function() {
      return 0;
    };
    T = e2;
    T.addListener;
    T.argv;
    T.binding;
    T.browser;
    T.chdir;
    T.cwd;
    T.emit;
    T.env;
    T.listeners;
    T.nextTick;
    T.off;
    T.on;
    T.once;
    T.prependListener;
    T.prependOnceListener;
    T.removeAllListeners;
    T.removeListener;
    T.title;
    T.umask;
    T.version;
    T.versions;
  }
});

// ../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/chunk-b4205b57.js
function c$1(e11) {
  return e11.call.bind(e11);
}
function O(e11, t8) {
  if ("object" != typeof e11)
    return false;
  try {
    return t8(e11), true;
  } catch (e12) {
    return false;
  }
}
function S(e11) {
  return l$1 && y2 ? void 0 !== b(e11) : B(e11) || k(e11) || E(e11) || D(e11) || U(e11) || P(e11) || x(e11) || I(e11) || M(e11) || z(e11) || F(e11);
}
function B(e11) {
  return l$1 && y2 ? "Uint8Array" === b(e11) : "[object Uint8Array]" === m2(e11) || u$1(e11) && void 0 !== e11.buffer;
}
function k(e11) {
  return l$1 && y2 ? "Uint8ClampedArray" === b(e11) : "[object Uint8ClampedArray]" === m2(e11);
}
function E(e11) {
  return l$1 && y2 ? "Uint16Array" === b(e11) : "[object Uint16Array]" === m2(e11);
}
function D(e11) {
  return l$1 && y2 ? "Uint32Array" === b(e11) : "[object Uint32Array]" === m2(e11);
}
function U(e11) {
  return l$1 && y2 ? "Int8Array" === b(e11) : "[object Int8Array]" === m2(e11);
}
function P(e11) {
  return l$1 && y2 ? "Int16Array" === b(e11) : "[object Int16Array]" === m2(e11);
}
function x(e11) {
  return l$1 && y2 ? "Int32Array" === b(e11) : "[object Int32Array]" === m2(e11);
}
function I(e11) {
  return l$1 && y2 ? "Float32Array" === b(e11) : "[object Float32Array]" === m2(e11);
}
function M(e11) {
  return l$1 && y2 ? "Float64Array" === b(e11) : "[object Float64Array]" === m2(e11);
}
function z(e11) {
  return l$1 && y2 ? "BigInt64Array" === b(e11) : "[object BigInt64Array]" === m2(e11);
}
function F(e11) {
  return l$1 && y2 ? "BigUint64Array" === b(e11) : "[object BigUint64Array]" === m2(e11);
}
function T2(e11) {
  return "[object Map]" === m2(e11);
}
function N(e11) {
  return "[object Set]" === m2(e11);
}
function W(e11) {
  return "[object WeakMap]" === m2(e11);
}
function $(e11) {
  return "[object WeakSet]" === m2(e11);
}
function C(e11) {
  return "[object ArrayBuffer]" === m2(e11);
}
function V(e11) {
  return "undefined" != typeof ArrayBuffer && (C.working ? C(e11) : e11 instanceof ArrayBuffer);
}
function G(e11) {
  return "[object DataView]" === m2(e11);
}
function R(e11) {
  return "undefined" != typeof DataView && (G.working ? G(e11) : e11 instanceof DataView);
}
function J(e11) {
  return "[object SharedArrayBuffer]" === m2(e11);
}
function _(e11) {
  return "undefined" != typeof SharedArrayBuffer && (J.working ? J(e11) : e11 instanceof SharedArrayBuffer);
}
function H(e11) {
  return O(e11, h3);
}
function Z(e11) {
  return O(e11, j);
}
function q(e11) {
  return O(e11, A);
}
function K(e11) {
  return s3 && O(e11, w);
}
function L(e11) {
  return p3 && O(e11, v2);
}
function oe(e11, t8) {
  var r9 = { seen: [], stylize: fe };
  return arguments.length >= 3 && (r9.depth = arguments[2]), arguments.length >= 4 && (r9.colors = arguments[3]), ye(t8) ? r9.showHidden = t8 : t8 && X._extend(r9, t8), be(r9.showHidden) && (r9.showHidden = false), be(r9.depth) && (r9.depth = 2), be(r9.colors) && (r9.colors = false), be(r9.customInspect) && (r9.customInspect = true), r9.colors && (r9.stylize = ue), ae(r9, e11, r9.depth);
}
function ue(e11, t8) {
  var r9 = oe.styles[t8];
  return r9 ? "\x1B[" + oe.colors[r9][0] + "m" + e11 + "\x1B[" + oe.colors[r9][1] + "m" : e11;
}
function fe(e11, t8) {
  return e11;
}
function ae(e11, t8, r9) {
  if (e11.customInspect && t8 && we(t8.inspect) && t8.inspect !== X.inspect && (!t8.constructor || t8.constructor.prototype !== t8)) {
    var n9 = t8.inspect(r9, e11);
    return ge(n9) || (n9 = ae(e11, n9, r9)), n9;
  }
  var i8 = function(e12, t9) {
    if (be(t9))
      return e12.stylize("undefined", "undefined");
    if (ge(t9)) {
      var r10 = "'" + JSON.stringify(t9).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
      return e12.stylize(r10, "string");
    }
    if (de(t9))
      return e12.stylize("" + t9, "number");
    if (ye(t9))
      return e12.stylize("" + t9, "boolean");
    if (le(t9))
      return e12.stylize("null", "null");
  }(e11, t8);
  if (i8)
    return i8;
  var o9 = Object.keys(t8), u8 = function(e12) {
    var t9 = {};
    return e12.forEach(function(e13, r10) {
      t9[e13] = true;
    }), t9;
  }(o9);
  if (e11.showHidden && (o9 = Object.getOwnPropertyNames(t8)), Ae(t8) && (o9.indexOf("message") >= 0 || o9.indexOf("description") >= 0))
    return ce(t8);
  if (0 === o9.length) {
    if (we(t8)) {
      var f9 = t8.name ? ": " + t8.name : "";
      return e11.stylize("[Function" + f9 + "]", "special");
    }
    if (me(t8))
      return e11.stylize(RegExp.prototype.toString.call(t8), "regexp");
    if (je(t8))
      return e11.stylize(Date.prototype.toString.call(t8), "date");
    if (Ae(t8))
      return ce(t8);
  }
  var a8, c8 = "", s7 = false, p8 = ["{", "}"];
  (pe(t8) && (s7 = true, p8 = ["[", "]"]), we(t8)) && (c8 = " [Function" + (t8.name ? ": " + t8.name : "") + "]");
  return me(t8) && (c8 = " " + RegExp.prototype.toString.call(t8)), je(t8) && (c8 = " " + Date.prototype.toUTCString.call(t8)), Ae(t8) && (c8 = " " + ce(t8)), 0 !== o9.length || s7 && 0 != t8.length ? r9 < 0 ? me(t8) ? e11.stylize(RegExp.prototype.toString.call(t8), "regexp") : e11.stylize("[Object]", "special") : (e11.seen.push(t8), a8 = s7 ? function(e12, t9, r10, n10, i9) {
    for (var o10 = [], u9 = 0, f10 = t9.length; u9 < f10; ++u9)
      ke(t9, String(u9)) ? o10.push(se(e12, t9, r10, n10, String(u9), true)) : o10.push("");
    return i9.forEach(function(i10) {
      i10.match(/^\d+$/) || o10.push(se(e12, t9, r10, n10, i10, true));
    }), o10;
  }(e11, t8, r9, u8, o9) : o9.map(function(n10) {
    return se(e11, t8, r9, u8, n10, s7);
  }), e11.seen.pop(), function(e12, t9, r10) {
    var n10 = 0;
    if (e12.reduce(function(e13, t10) {
      return n10++, t10.indexOf("\n") >= 0 && n10++, e13 + t10.replace(/\u001b\[\d\d?m/g, "").length + 1;
    }, 0) > 60)
      return r10[0] + ("" === t9 ? "" : t9 + "\n ") + " " + e12.join(",\n  ") + " " + r10[1];
    return r10[0] + t9 + " " + e12.join(", ") + " " + r10[1];
  }(a8, c8, p8)) : p8[0] + c8 + p8[1];
}
function ce(e11) {
  return "[" + Error.prototype.toString.call(e11) + "]";
}
function se(e11, t8, r9, n9, i8, o9) {
  var u8, f9, a8;
  if ((a8 = Object.getOwnPropertyDescriptor(t8, i8) || { value: t8[i8] }).get ? f9 = a8.set ? e11.stylize("[Getter/Setter]", "special") : e11.stylize("[Getter]", "special") : a8.set && (f9 = e11.stylize("[Setter]", "special")), ke(n9, i8) || (u8 = "[" + i8 + "]"), f9 || (e11.seen.indexOf(a8.value) < 0 ? (f9 = le(r9) ? ae(e11, a8.value, null) : ae(e11, a8.value, r9 - 1)).indexOf("\n") > -1 && (f9 = o9 ? f9.split("\n").map(function(e12) {
    return "  " + e12;
  }).join("\n").substr(2) : "\n" + f9.split("\n").map(function(e12) {
    return "   " + e12;
  }).join("\n")) : f9 = e11.stylize("[Circular]", "special")), be(u8)) {
    if (o9 && i8.match(/^\d+$/))
      return f9;
    (u8 = JSON.stringify("" + i8)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/) ? (u8 = u8.substr(1, u8.length - 2), u8 = e11.stylize(u8, "name")) : (u8 = u8.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'"), u8 = e11.stylize(u8, "string"));
  }
  return u8 + ": " + f9;
}
function pe(e11) {
  return Array.isArray(e11);
}
function ye(e11) {
  return "boolean" == typeof e11;
}
function le(e11) {
  return null === e11;
}
function de(e11) {
  return "number" == typeof e11;
}
function ge(e11) {
  return "string" == typeof e11;
}
function be(e11) {
  return void 0 === e11;
}
function me(e11) {
  return he(e11) && "[object RegExp]" === ve(e11);
}
function he(e11) {
  return "object" == typeof e11 && null !== e11;
}
function je(e11) {
  return he(e11) && "[object Date]" === ve(e11);
}
function Ae(e11) {
  return he(e11) && ("[object Error]" === ve(e11) || e11 instanceof Error);
}
function we(e11) {
  return "function" == typeof e11;
}
function ve(e11) {
  return Object.prototype.toString.call(e11);
}
function Oe(e11) {
  return e11 < 10 ? "0" + e11.toString(10) : e11.toString(10);
}
function Be() {
  var e11 = new Date(), t8 = [Oe(e11.getHours()), Oe(e11.getMinutes()), Oe(e11.getSeconds())].join(":");
  return [e11.getDate(), Se[e11.getMonth()], t8].join(" ");
}
function ke(e11, t8) {
  return Object.prototype.hasOwnProperty.call(e11, t8);
}
function De(e11, t8) {
  if (!e11) {
    var r9 = new Error("Promise was rejected with a falsy value");
    r9.reason = e11, e11 = r9;
  }
  return t8(e11);
}
var t3, e3, o3, n3, r3, l3, t$1, o$1, n$1, e$1, r$1, c3, u3, i3, t$2, i$1, o$2, u$1, f3, a3, s3, p3, y2, l$1, d2, m2, h3, j, A, Q, X, Y, ee, te, re, ne, ie2, Se, Ee;
var init_chunk_b4205b57 = __esm({
  "../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/chunk-b4205b57.js"() {
    init_dirname();
    init_buffer2();
    init_process2();
    init_chunk_5decc758();
    t3 = "function" == typeof Symbol && "symbol" == typeof Symbol.toStringTag;
    e3 = Object.prototype.toString;
    o3 = function(o9) {
      return !(t3 && o9 && "object" == typeof o9 && Symbol.toStringTag in o9) && "[object Arguments]" === e3.call(o9);
    };
    n3 = function(t8) {
      return !!o3(t8) || null !== t8 && "object" == typeof t8 && "number" == typeof t8.length && t8.length >= 0 && "[object Array]" !== e3.call(t8) && "[object Function]" === e3.call(t8.callee);
    };
    r3 = function() {
      return o3(arguments);
    }();
    o3.isLegacyArguments = n3;
    l3 = r3 ? o3 : n3;
    t$1 = Object.prototype.toString;
    o$1 = Function.prototype.toString;
    n$1 = /^\s*(?:function)?\*/;
    e$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.toStringTag;
    r$1 = Object.getPrototypeOf;
    c3 = function() {
      if (!e$1)
        return false;
      try {
        return Function("return function*() {}")();
      } catch (t8) {
      }
    }();
    u3 = c3 ? r$1(c3) : {};
    i3 = function(c8) {
      return "function" == typeof c8 && (!!n$1.test(o$1.call(c8)) || (e$1 ? r$1(c8) === u3 : "[object GeneratorFunction]" === t$1.call(c8)));
    };
    t$2 = "function" == typeof Object.create ? function(t8, e11) {
      e11 && (t8.super_ = e11, t8.prototype = Object.create(e11.prototype, { constructor: { value: t8, enumerable: false, writable: true, configurable: true } }));
    } : function(t8, e11) {
      if (e11) {
        t8.super_ = e11;
        var o9 = function() {
        };
        o9.prototype = e11.prototype, t8.prototype = new o9(), t8.prototype.constructor = t8;
      }
    };
    i$1 = function(e11) {
      return e11 && "object" == typeof e11 && "function" == typeof e11.copy && "function" == typeof e11.fill && "function" == typeof e11.readUInt8;
    };
    o$2 = {};
    u$1 = i$1;
    f3 = l3;
    a3 = i3;
    s3 = "undefined" != typeof BigInt;
    p3 = "undefined" != typeof Symbol;
    y2 = p3 && void 0 !== Symbol.toStringTag;
    l$1 = "undefined" != typeof Uint8Array;
    d2 = "undefined" != typeof ArrayBuffer;
    if (l$1 && y2)
      var g = Object.getPrototypeOf(Uint8Array.prototype), b = c$1(Object.getOwnPropertyDescriptor(g, Symbol.toStringTag).get);
    m2 = c$1(Object.prototype.toString);
    h3 = c$1(Number.prototype.valueOf);
    j = c$1(String.prototype.valueOf);
    A = c$1(Boolean.prototype.valueOf);
    if (s3)
      var w = c$1(BigInt.prototype.valueOf);
    if (p3)
      var v2 = c$1(Symbol.prototype.valueOf);
    o$2.isArgumentsObject = f3, o$2.isGeneratorFunction = a3, o$2.isPromise = function(e11) {
      return "undefined" != typeof Promise && e11 instanceof Promise || null !== e11 && "object" == typeof e11 && "function" == typeof e11.then && "function" == typeof e11.catch;
    }, o$2.isArrayBufferView = function(e11) {
      return d2 && ArrayBuffer.isView ? ArrayBuffer.isView(e11) : S(e11) || R(e11);
    }, o$2.isTypedArray = S, o$2.isUint8Array = B, o$2.isUint8ClampedArray = k, o$2.isUint16Array = E, o$2.isUint32Array = D, o$2.isInt8Array = U, o$2.isInt16Array = P, o$2.isInt32Array = x, o$2.isFloat32Array = I, o$2.isFloat64Array = M, o$2.isBigInt64Array = z, o$2.isBigUint64Array = F, T2.working = "undefined" != typeof Map && T2(/* @__PURE__ */ new Map()), o$2.isMap = function(e11) {
      return "undefined" != typeof Map && (T2.working ? T2(e11) : e11 instanceof Map);
    }, N.working = "undefined" != typeof Set && N(/* @__PURE__ */ new Set()), o$2.isSet = function(e11) {
      return "undefined" != typeof Set && (N.working ? N(e11) : e11 instanceof Set);
    }, W.working = "undefined" != typeof WeakMap && W(/* @__PURE__ */ new WeakMap()), o$2.isWeakMap = function(e11) {
      return "undefined" != typeof WeakMap && (W.working ? W(e11) : e11 instanceof WeakMap);
    }, $.working = "undefined" != typeof WeakSet && $(/* @__PURE__ */ new WeakSet()), o$2.isWeakSet = function(e11) {
      return $(e11);
    }, C.working = "undefined" != typeof ArrayBuffer && C(new ArrayBuffer()), o$2.isArrayBuffer = V, G.working = "undefined" != typeof ArrayBuffer && "undefined" != typeof DataView && G(new DataView(new ArrayBuffer(1), 0, 1)), o$2.isDataView = R, J.working = "undefined" != typeof SharedArrayBuffer && J(new SharedArrayBuffer()), o$2.isSharedArrayBuffer = _, o$2.isAsyncFunction = function(e11) {
      return "[object AsyncFunction]" === m2(e11);
    }, o$2.isMapIterator = function(e11) {
      return "[object Map Iterator]" === m2(e11);
    }, o$2.isSetIterator = function(e11) {
      return "[object Set Iterator]" === m2(e11);
    }, o$2.isGeneratorObject = function(e11) {
      return "[object Generator]" === m2(e11);
    }, o$2.isWebAssemblyCompiledModule = function(e11) {
      return "[object WebAssembly.Module]" === m2(e11);
    }, o$2.isNumberObject = H, o$2.isStringObject = Z, o$2.isBooleanObject = q, o$2.isBigIntObject = K, o$2.isSymbolObject = L, o$2.isBoxedPrimitive = function(e11) {
      return H(e11) || Z(e11) || q(e11) || K(e11) || L(e11);
    }, o$2.isAnyArrayBuffer = function(e11) {
      return l$1 && (V(e11) || _(e11));
    }, ["isProxy", "isExternal", "isModuleNamespaceObject"].forEach(function(e11) {
      Object.defineProperty(o$2, e11, { enumerable: false, value: function() {
        throw new Error(e11 + " is not supported in userland");
      } });
    });
    Q = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    X = {};
    Y = T;
    ee = Object.getOwnPropertyDescriptors || function(e11) {
      for (var t8 = Object.keys(e11), r9 = {}, n9 = 0; n9 < t8.length; n9++)
        r9[t8[n9]] = Object.getOwnPropertyDescriptor(e11, t8[n9]);
      return r9;
    };
    te = /%[sdj%]/g;
    X.format = function(e11) {
      if (!ge(e11)) {
        for (var t8 = [], r9 = 0; r9 < arguments.length; r9++)
          t8.push(oe(arguments[r9]));
        return t8.join(" ");
      }
      r9 = 1;
      for (var n9 = arguments, i8 = n9.length, o9 = String(e11).replace(te, function(e12) {
        if ("%%" === e12)
          return "%";
        if (r9 >= i8)
          return e12;
        switch (e12) {
          case "%s":
            return String(n9[r9++]);
          case "%d":
            return Number(n9[r9++]);
          case "%j":
            try {
              return JSON.stringify(n9[r9++]);
            } catch (e13) {
              return "[Circular]";
            }
          default:
            return e12;
        }
      }), u8 = n9[r9]; r9 < i8; u8 = n9[++r9])
        le(u8) || !he(u8) ? o9 += " " + u8 : o9 += " " + oe(u8);
      return o9;
    }, X.deprecate = function(e11, t8) {
      if (void 0 !== Y && true === Y.noDeprecation)
        return e11;
      if (void 0 === Y)
        return function() {
          return X.deprecate(e11, t8).apply(this || Q, arguments);
        };
      var r9 = false;
      return function() {
        if (!r9) {
          if (Y.throwDeprecation)
            throw new Error(t8);
          Y.traceDeprecation ? console.trace(t8) : console.error(t8), r9 = true;
        }
        return e11.apply(this || Q, arguments);
      };
    };
    re = {};
    ne = /^$/;
    if (Y.env.NODE_DEBUG) {
      ie2 = Y.env.NODE_DEBUG;
      ie2 = ie2.replace(/[|\\{}()[\]^$+?.]/g, "\\$&").replace(/\*/g, ".*").replace(/,/g, "$|^").toUpperCase(), ne = new RegExp("^" + ie2 + "$", "i");
    }
    X.debuglog = function(e11) {
      if (e11 = e11.toUpperCase(), !re[e11])
        if (ne.test(e11)) {
          var t8 = Y.pid;
          re[e11] = function() {
            var r9 = X.format.apply(X, arguments);
            console.error("%s %d: %s", e11, t8, r9);
          };
        } else
          re[e11] = function() {
          };
      return re[e11];
    }, X.inspect = oe, oe.colors = { bold: [1, 22], italic: [3, 23], underline: [4, 24], inverse: [7, 27], white: [37, 39], grey: [90, 39], black: [30, 39], blue: [34, 39], cyan: [36, 39], green: [32, 39], magenta: [35, 39], red: [31, 39], yellow: [33, 39] }, oe.styles = { special: "cyan", number: "yellow", boolean: "yellow", undefined: "grey", null: "bold", string: "green", date: "magenta", regexp: "red" }, X.types = o$2, X.isArray = pe, X.isBoolean = ye, X.isNull = le, X.isNullOrUndefined = function(e11) {
      return null == e11;
    }, X.isNumber = de, X.isString = ge, X.isSymbol = function(e11) {
      return "symbol" == typeof e11;
    }, X.isUndefined = be, X.isRegExp = me, X.types.isRegExp = me, X.isObject = he, X.isDate = je, X.types.isDate = je, X.isError = Ae, X.types.isNativeError = Ae, X.isFunction = we, X.isPrimitive = function(e11) {
      return null === e11 || "boolean" == typeof e11 || "number" == typeof e11 || "string" == typeof e11 || "symbol" == typeof e11 || void 0 === e11;
    }, X.isBuffer = i$1;
    Se = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    X.log = function() {
      console.log("%s - %s", Be(), X.format.apply(X, arguments));
    }, X.inherits = t$2, X._extend = function(e11, t8) {
      if (!t8 || !he(t8))
        return e11;
      for (var r9 = Object.keys(t8), n9 = r9.length; n9--; )
        e11[r9[n9]] = t8[r9[n9]];
      return e11;
    };
    Ee = "undefined" != typeof Symbol ? Symbol("util.promisify.custom") : void 0;
    X.promisify = function(e11) {
      if ("function" != typeof e11)
        throw new TypeError('The "original" argument must be of type Function');
      if (Ee && e11[Ee]) {
        var t8;
        if ("function" != typeof (t8 = e11[Ee]))
          throw new TypeError('The "util.promisify.custom" argument must be of type Function');
        return Object.defineProperty(t8, Ee, { value: t8, enumerable: false, writable: false, configurable: true }), t8;
      }
      function t8() {
        for (var t9, r9, n9 = new Promise(function(e12, n10) {
          t9 = e12, r9 = n10;
        }), i8 = [], o9 = 0; o9 < arguments.length; o9++)
          i8.push(arguments[o9]);
        i8.push(function(e12, n10) {
          e12 ? r9(e12) : t9(n10);
        });
        try {
          e11.apply(this || Q, i8);
        } catch (e12) {
          r9(e12);
        }
        return n9;
      }
      return Object.setPrototypeOf(t8, Object.getPrototypeOf(e11)), Ee && Object.defineProperty(t8, Ee, { value: t8, enumerable: false, writable: false, configurable: true }), Object.defineProperties(t8, ee(e11));
    }, X.promisify.custom = Ee, X.callbackify = function(e11) {
      if ("function" != typeof e11)
        throw new TypeError('The "original" argument must be of type Function');
      function t8() {
        for (var t9 = [], r9 = 0; r9 < arguments.length; r9++)
          t9.push(arguments[r9]);
        var n9 = t9.pop();
        if ("function" != typeof n9)
          throw new TypeError("The last argument must be of type Function");
        var i8 = this || Q, o9 = function() {
          return n9.apply(i8, arguments);
        };
        e11.apply(this || Q, t9).then(function(e12) {
          Y.nextTick(o9.bind(null, null, e12));
        }, function(e12) {
          Y.nextTick(De.bind(null, e12, o9));
        });
      }
      return Object.setPrototypeOf(t8, Object.getPrototypeOf(e11)), Object.defineProperties(t8, ee(e11)), t8;
    };
  }
});

// ../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/chunk-ce0fbc82.js
var _extend, callbackify, debuglog, deprecate, format, inherits2, inspect, isArray2, isBoolean2, isBuffer2, isDate2, isError, isFunction2, isNull, isNullOrUndefined, isNumber2, isObject2, isPrimitive, isRegExp2, isString2, isSymbol, isUndefined2, log, promisify, types, TextEncoder, TextDecoder;
var init_chunk_ce0fbc82 = __esm({
  "../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/chunk-ce0fbc82.js"() {
    init_dirname();
    init_buffer2();
    init_process2();
    init_chunk_b4205b57();
    init_chunk_5decc758();
    X._extend;
    X.callbackify;
    X.debuglog;
    X.deprecate;
    X.format;
    X.inherits;
    X.inspect;
    X.isArray;
    X.isBoolean;
    X.isBuffer;
    X.isDate;
    X.isError;
    X.isFunction;
    X.isNull;
    X.isNullOrUndefined;
    X.isNumber;
    X.isObject;
    X.isPrimitive;
    X.isRegExp;
    X.isString;
    X.isSymbol;
    X.isUndefined;
    X.log;
    X.promisify;
    _extend = X._extend;
    callbackify = X.callbackify;
    debuglog = X.debuglog;
    deprecate = X.deprecate;
    format = X.format;
    inherits2 = X.inherits;
    inspect = X.inspect;
    isArray2 = X.isArray;
    isBoolean2 = X.isBoolean;
    isBuffer2 = X.isBuffer;
    isDate2 = X.isDate;
    isError = X.isError;
    isFunction2 = X.isFunction;
    isNull = X.isNull;
    isNullOrUndefined = X.isNullOrUndefined;
    isNumber2 = X.isNumber;
    isObject2 = X.isObject;
    isPrimitive = X.isPrimitive;
    isRegExp2 = X.isRegExp;
    isString2 = X.isString;
    isSymbol = X.isSymbol;
    isUndefined2 = X.isUndefined;
    log = X.log;
    promisify = X.promisify;
    types = X.types;
    TextEncoder = self.TextEncoder;
    TextDecoder = self.TextDecoder;
  }
});

// ../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/chunk-2eac56ff.js
function dew2() {
  if (_dewExec2)
    return exports2;
  _dewExec2 = true;
  var process3 = exports2 = {};
  var cachedSetTimeout;
  var cachedClearTimeout;
  function defaultSetTimout() {
    throw new Error("setTimeout has not been defined");
  }
  function defaultClearTimeout() {
    throw new Error("clearTimeout has not been defined");
  }
  (function() {
    try {
      if (typeof setTimeout === "function") {
        cachedSetTimeout = setTimeout;
      } else {
        cachedSetTimeout = defaultSetTimout;
      }
    } catch (e11) {
      cachedSetTimeout = defaultSetTimout;
    }
    try {
      if (typeof clearTimeout === "function") {
        cachedClearTimeout = clearTimeout;
      } else {
        cachedClearTimeout = defaultClearTimeout;
      }
    } catch (e11) {
      cachedClearTimeout = defaultClearTimeout;
    }
  })();
  function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
      return setTimeout(fun, 0);
    }
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
      cachedSetTimeout = setTimeout;
      return setTimeout(fun, 0);
    }
    try {
      return cachedSetTimeout(fun, 0);
    } catch (e11) {
      try {
        return cachedSetTimeout.call(null, fun, 0);
      } catch (e12) {
        return cachedSetTimeout.call(this || _global2, fun, 0);
      }
    }
  }
  function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
      return clearTimeout(marker);
    }
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
      cachedClearTimeout = clearTimeout;
      return clearTimeout(marker);
    }
    try {
      return cachedClearTimeout(marker);
    } catch (e11) {
      try {
        return cachedClearTimeout.call(null, marker);
      } catch (e12) {
        return cachedClearTimeout.call(this || _global2, marker);
      }
    }
  }
  var queue2 = [];
  var draining2 = false;
  var currentQueue2;
  var queueIndex2 = -1;
  function cleanUpNextTick2() {
    if (!draining2 || !currentQueue2) {
      return;
    }
    draining2 = false;
    if (currentQueue2.length) {
      queue2 = currentQueue2.concat(queue2);
    } else {
      queueIndex2 = -1;
    }
    if (queue2.length) {
      drainQueue2();
    }
  }
  function drainQueue2() {
    if (draining2) {
      return;
    }
    var timeout = runTimeout(cleanUpNextTick2);
    draining2 = true;
    var len = queue2.length;
    while (len) {
      currentQueue2 = queue2;
      queue2 = [];
      while (++queueIndex2 < len) {
        if (currentQueue2) {
          currentQueue2[queueIndex2].run();
        }
      }
      queueIndex2 = -1;
      len = queue2.length;
    }
    currentQueue2 = null;
    draining2 = false;
    runClearTimeout(timeout);
  }
  process3.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
      for (var i8 = 1; i8 < arguments.length; i8++) {
        args[i8 - 1] = arguments[i8];
      }
    }
    queue2.push(new Item2(fun, args));
    if (queue2.length === 1 && !draining2) {
      runTimeout(drainQueue2);
    }
  };
  function Item2(fun, array) {
    (this || _global2).fun = fun;
    (this || _global2).array = array;
  }
  Item2.prototype.run = function() {
    (this || _global2).fun.apply(null, (this || _global2).array);
  };
  process3.title = "browser";
  process3.browser = true;
  process3.env = {};
  process3.argv = [];
  process3.version = "";
  process3.versions = {};
  function noop3() {
  }
  process3.on = noop3;
  process3.addListener = noop3;
  process3.once = noop3;
  process3.off = noop3;
  process3.removeListener = noop3;
  process3.removeAllListeners = noop3;
  process3.emit = noop3;
  process3.prependListener = noop3;
  process3.prependOnceListener = noop3;
  process3.listeners = function(name2) {
    return [];
  };
  process3.binding = function(name2) {
    throw new Error("process.binding is not supported");
  };
  process3.cwd = function() {
    return "/";
  };
  process3.chdir = function(dir) {
    throw new Error("process.chdir is not supported");
  };
  process3.umask = function() {
    return 0;
  };
  return exports2;
}
var exports2, _dewExec2, _global2, process2;
var init_chunk_2eac56ff = __esm({
  "../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/chunk-2eac56ff.js"() {
    init_dirname();
    init_buffer2();
    init_process2();
    exports2 = {};
    _dewExec2 = false;
    _global2 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    process2 = dew2();
    process2.platform = "browser";
    process2.addListener;
    process2.argv;
    process2.binding;
    process2.browser;
    process2.chdir;
    process2.cwd;
    process2.emit;
    process2.env;
    process2.listeners;
    process2.nextTick;
    process2.off;
    process2.on;
    process2.once;
    process2.prependListener;
    process2.prependOnceListener;
    process2.removeAllListeners;
    process2.removeListener;
    process2.title;
    process2.umask;
    process2.version;
    process2.versions;
  }
});

// ../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/chunk-4ccc3a29.js
function u$2(r9) {
  var t8 = r9.length;
  if (t8 % 4 > 0)
    throw new Error("Invalid string. Length must be a multiple of 4");
  var e11 = r9.indexOf("=");
  return -1 === e11 && (e11 = t8), [e11, e11 === t8 ? 0 : 4 - e11 % 4];
}
function c$12(r9, e11, n9) {
  for (var o9, a8, h8 = [], u8 = e11; u8 < n9; u8 += 3)
    o9 = (r9[u8] << 16 & 16711680) + (r9[u8 + 1] << 8 & 65280) + (255 & r9[u8 + 2]), h8.push(t$13[(a8 = o9) >> 18 & 63] + t$13[a8 >> 12 & 63] + t$13[a8 >> 6 & 63] + t$13[63 & a8]);
  return h8.join("");
}
function f$2(t8) {
  if (t8 > 2147483647)
    throw new RangeError('The value "' + t8 + '" is invalid for option "size"');
  var r9 = new Uint8Array(t8);
  return Object.setPrototypeOf(r9, u$1$1.prototype), r9;
}
function u$1$1(t8, r9, e11) {
  if ("number" == typeof t8) {
    if ("string" == typeof r9)
      throw new TypeError('The "string" argument must be of type string. Received type number');
    return a$2(t8);
  }
  return s$1(t8, r9, e11);
}
function s$1(t8, r9, e11) {
  if ("string" == typeof t8)
    return function(t9, r10) {
      "string" == typeof r10 && "" !== r10 || (r10 = "utf8");
      if (!u$1$1.isEncoding(r10))
        throw new TypeError("Unknown encoding: " + r10);
      var e12 = 0 | y3(t9, r10), n10 = f$2(e12), i9 = n10.write(t9, r10);
      i9 !== e12 && (n10 = n10.slice(0, i9));
      return n10;
    }(t8, r9);
  if (ArrayBuffer.isView(t8))
    return p4(t8);
  if (null == t8)
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof t8);
  if (F2(t8, ArrayBuffer) || t8 && F2(t8.buffer, ArrayBuffer))
    return c$1$1(t8, r9, e11);
  if ("undefined" != typeof SharedArrayBuffer && (F2(t8, SharedArrayBuffer) || t8 && F2(t8.buffer, SharedArrayBuffer)))
    return c$1$1(t8, r9, e11);
  if ("number" == typeof t8)
    throw new TypeError('The "value" argument must not be of type number. Received type number');
  var n9 = t8.valueOf && t8.valueOf();
  if (null != n9 && n9 !== t8)
    return u$1$1.from(n9, r9, e11);
  var i8 = function(t9) {
    if (u$1$1.isBuffer(t9)) {
      var r10 = 0 | l$12(t9.length), e12 = f$2(r10);
      return 0 === e12.length || t9.copy(e12, 0, 0, r10), e12;
    }
    if (void 0 !== t9.length)
      return "number" != typeof t9.length || N2(t9.length) ? f$2(0) : p4(t9);
    if ("Buffer" === t9.type && Array.isArray(t9.data))
      return p4(t9.data);
  }(t8);
  if (i8)
    return i8;
  if ("undefined" != typeof Symbol && null != Symbol.toPrimitive && "function" == typeof t8[Symbol.toPrimitive])
    return u$1$1.from(t8[Symbol.toPrimitive]("string"), r9, e11);
  throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof t8);
}
function h$1$1(t8) {
  if ("number" != typeof t8)
    throw new TypeError('"size" argument must be of type number');
  if (t8 < 0)
    throw new RangeError('The value "' + t8 + '" is invalid for option "size"');
}
function a$2(t8) {
  return h$1$1(t8), f$2(t8 < 0 ? 0 : 0 | l$12(t8));
}
function p4(t8) {
  for (var r9 = t8.length < 0 ? 0 : 0 | l$12(t8.length), e11 = f$2(r9), n9 = 0; n9 < r9; n9 += 1)
    e11[n9] = 255 & t8[n9];
  return e11;
}
function c$1$1(t8, r9, e11) {
  if (r9 < 0 || t8.byteLength < r9)
    throw new RangeError('"offset" is outside of buffer bounds');
  if (t8.byteLength < r9 + (e11 || 0))
    throw new RangeError('"length" is outside of buffer bounds');
  var n9;
  return n9 = void 0 === r9 && void 0 === e11 ? new Uint8Array(t8) : void 0 === e11 ? new Uint8Array(t8, r9) : new Uint8Array(t8, r9, e11), Object.setPrototypeOf(n9, u$1$1.prototype), n9;
}
function l$12(t8) {
  if (t8 >= 2147483647)
    throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + 2147483647 .toString(16) + " bytes");
  return 0 | t8;
}
function y3(t8, r9) {
  if (u$1$1.isBuffer(t8))
    return t8.length;
  if (ArrayBuffer.isView(t8) || F2(t8, ArrayBuffer))
    return t8.byteLength;
  if ("string" != typeof t8)
    throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof t8);
  var e11 = t8.length, n9 = arguments.length > 2 && true === arguments[2];
  if (!n9 && 0 === e11)
    return 0;
  for (var i8 = false; ; )
    switch (r9) {
      case "ascii":
      case "latin1":
      case "binary":
        return e11;
      case "utf8":
      case "utf-8":
        return _2(t8).length;
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return 2 * e11;
      case "hex":
        return e11 >>> 1;
      case "base64":
        return z2(t8).length;
      default:
        if (i8)
          return n9 ? -1 : _2(t8).length;
        r9 = ("" + r9).toLowerCase(), i8 = true;
    }
}
function g2(t8, r9, e11) {
  var n9 = false;
  if ((void 0 === r9 || r9 < 0) && (r9 = 0), r9 > this.length)
    return "";
  if ((void 0 === e11 || e11 > this.length) && (e11 = this.length), e11 <= 0)
    return "";
  if ((e11 >>>= 0) <= (r9 >>>= 0))
    return "";
  for (t8 || (t8 = "utf8"); ; )
    switch (t8) {
      case "hex":
        return O2(this, r9, e11);
      case "utf8":
      case "utf-8":
        return I2(this, r9, e11);
      case "ascii":
        return S2(this, r9, e11);
      case "latin1":
      case "binary":
        return R2(this, r9, e11);
      case "base64":
        return T3(this, r9, e11);
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return L2(this, r9, e11);
      default:
        if (n9)
          throw new TypeError("Unknown encoding: " + t8);
        t8 = (t8 + "").toLowerCase(), n9 = true;
    }
}
function w2(t8, r9, e11) {
  var n9 = t8[r9];
  t8[r9] = t8[e11], t8[e11] = n9;
}
function d3(t8, r9, e11, n9, i8) {
  if (0 === t8.length)
    return -1;
  if ("string" == typeof e11 ? (n9 = e11, e11 = 0) : e11 > 2147483647 ? e11 = 2147483647 : e11 < -2147483648 && (e11 = -2147483648), N2(e11 = +e11) && (e11 = i8 ? 0 : t8.length - 1), e11 < 0 && (e11 = t8.length + e11), e11 >= t8.length) {
    if (i8)
      return -1;
    e11 = t8.length - 1;
  } else if (e11 < 0) {
    if (!i8)
      return -1;
    e11 = 0;
  }
  if ("string" == typeof r9 && (r9 = u$1$1.from(r9, n9)), u$1$1.isBuffer(r9))
    return 0 === r9.length ? -1 : v3(t8, r9, e11, n9, i8);
  if ("number" == typeof r9)
    return r9 &= 255, "function" == typeof Uint8Array.prototype.indexOf ? i8 ? Uint8Array.prototype.indexOf.call(t8, r9, e11) : Uint8Array.prototype.lastIndexOf.call(t8, r9, e11) : v3(t8, [r9], e11, n9, i8);
  throw new TypeError("val must be string, number or Buffer");
}
function v3(t8, r9, e11, n9, i8) {
  var o9, f9 = 1, u8 = t8.length, s7 = r9.length;
  if (void 0 !== n9 && ("ucs2" === (n9 = String(n9).toLowerCase()) || "ucs-2" === n9 || "utf16le" === n9 || "utf-16le" === n9)) {
    if (t8.length < 2 || r9.length < 2)
      return -1;
    f9 = 2, u8 /= 2, s7 /= 2, e11 /= 2;
  }
  function h8(t9, r10) {
    return 1 === f9 ? t9[r10] : t9.readUInt16BE(r10 * f9);
  }
  if (i8) {
    var a8 = -1;
    for (o9 = e11; o9 < u8; o9++)
      if (h8(t8, o9) === h8(r9, -1 === a8 ? 0 : o9 - a8)) {
        if (-1 === a8 && (a8 = o9), o9 - a8 + 1 === s7)
          return a8 * f9;
      } else
        -1 !== a8 && (o9 -= o9 - a8), a8 = -1;
  } else
    for (e11 + s7 > u8 && (e11 = u8 - s7), o9 = e11; o9 >= 0; o9--) {
      for (var p8 = true, c8 = 0; c8 < s7; c8++)
        if (h8(t8, o9 + c8) !== h8(r9, c8)) {
          p8 = false;
          break;
        }
      if (p8)
        return o9;
    }
  return -1;
}
function b2(t8, r9, e11, n9) {
  e11 = Number(e11) || 0;
  var i8 = t8.length - e11;
  n9 ? (n9 = Number(n9)) > i8 && (n9 = i8) : n9 = i8;
  var o9 = r9.length;
  n9 > o9 / 2 && (n9 = o9 / 2);
  for (var f9 = 0; f9 < n9; ++f9) {
    var u8 = parseInt(r9.substr(2 * f9, 2), 16);
    if (N2(u8))
      return f9;
    t8[e11 + f9] = u8;
  }
  return f9;
}
function m3(t8, r9, e11, n9) {
  return D2(_2(r9, t8.length - e11), t8, e11, n9);
}
function E2(t8, r9, e11, n9) {
  return D2(function(t9) {
    for (var r10 = [], e12 = 0; e12 < t9.length; ++e12)
      r10.push(255 & t9.charCodeAt(e12));
    return r10;
  }(r9), t8, e11, n9);
}
function B2(t8, r9, e11, n9) {
  return E2(t8, r9, e11, n9);
}
function A2(t8, r9, e11, n9) {
  return D2(z2(r9), t8, e11, n9);
}
function U2(t8, r9, e11, n9) {
  return D2(function(t9, r10) {
    for (var e12, n10, i8, o9 = [], f9 = 0; f9 < t9.length && !((r10 -= 2) < 0); ++f9)
      e12 = t9.charCodeAt(f9), n10 = e12 >> 8, i8 = e12 % 256, o9.push(i8), o9.push(n10);
    return o9;
  }(r9, t8.length - e11), t8, e11, n9);
}
function T3(t8, r9, e11) {
  return 0 === r9 && e11 === t8.length ? n$1$1.fromByteArray(t8) : n$1$1.fromByteArray(t8.slice(r9, e11));
}
function I2(t8, r9, e11) {
  e11 = Math.min(t8.length, e11);
  for (var n9 = [], i8 = r9; i8 < e11; ) {
    var o9, f9, u8, s7, h8 = t8[i8], a8 = null, p8 = h8 > 239 ? 4 : h8 > 223 ? 3 : h8 > 191 ? 2 : 1;
    if (i8 + p8 <= e11)
      switch (p8) {
        case 1:
          h8 < 128 && (a8 = h8);
          break;
        case 2:
          128 == (192 & (o9 = t8[i8 + 1])) && (s7 = (31 & h8) << 6 | 63 & o9) > 127 && (a8 = s7);
          break;
        case 3:
          o9 = t8[i8 + 1], f9 = t8[i8 + 2], 128 == (192 & o9) && 128 == (192 & f9) && (s7 = (15 & h8) << 12 | (63 & o9) << 6 | 63 & f9) > 2047 && (s7 < 55296 || s7 > 57343) && (a8 = s7);
          break;
        case 4:
          o9 = t8[i8 + 1], f9 = t8[i8 + 2], u8 = t8[i8 + 3], 128 == (192 & o9) && 128 == (192 & f9) && 128 == (192 & u8) && (s7 = (15 & h8) << 18 | (63 & o9) << 12 | (63 & f9) << 6 | 63 & u8) > 65535 && s7 < 1114112 && (a8 = s7);
      }
    null === a8 ? (a8 = 65533, p8 = 1) : a8 > 65535 && (a8 -= 65536, n9.push(a8 >>> 10 & 1023 | 55296), a8 = 56320 | 1023 & a8), n9.push(a8), i8 += p8;
  }
  return function(t9) {
    var r10 = t9.length;
    if (r10 <= 4096)
      return String.fromCharCode.apply(String, t9);
    var e12 = "", n10 = 0;
    for (; n10 < r10; )
      e12 += String.fromCharCode.apply(String, t9.slice(n10, n10 += 4096));
    return e12;
  }(n9);
}
function S2(t8, r9, e11) {
  var n9 = "";
  e11 = Math.min(t8.length, e11);
  for (var i8 = r9; i8 < e11; ++i8)
    n9 += String.fromCharCode(127 & t8[i8]);
  return n9;
}
function R2(t8, r9, e11) {
  var n9 = "";
  e11 = Math.min(t8.length, e11);
  for (var i8 = r9; i8 < e11; ++i8)
    n9 += String.fromCharCode(t8[i8]);
  return n9;
}
function O2(t8, r9, e11) {
  var n9 = t8.length;
  (!r9 || r9 < 0) && (r9 = 0), (!e11 || e11 < 0 || e11 > n9) && (e11 = n9);
  for (var i8 = "", o9 = r9; o9 < e11; ++o9)
    i8 += Y2[t8[o9]];
  return i8;
}
function L2(t8, r9, e11) {
  for (var n9 = t8.slice(r9, e11), i8 = "", o9 = 0; o9 < n9.length; o9 += 2)
    i8 += String.fromCharCode(n9[o9] + 256 * n9[o9 + 1]);
  return i8;
}
function x2(t8, r9, e11) {
  if (t8 % 1 != 0 || t8 < 0)
    throw new RangeError("offset is not uint");
  if (t8 + r9 > e11)
    throw new RangeError("Trying to access beyond buffer length");
}
function C2(t8, r9, e11, n9, i8, o9) {
  if (!u$1$1.isBuffer(t8))
    throw new TypeError('"buffer" argument must be a Buffer instance');
  if (r9 > i8 || r9 < o9)
    throw new RangeError('"value" argument is out of bounds');
  if (e11 + n9 > t8.length)
    throw new RangeError("Index out of range");
}
function P2(t8, r9, e11, n9, i8, o9) {
  if (e11 + n9 > t8.length)
    throw new RangeError("Index out of range");
  if (e11 < 0)
    throw new RangeError("Index out of range");
}
function k2(t8, r9, e11, n9, o9) {
  return r9 = +r9, e11 >>>= 0, o9 || P2(t8, 0, e11, 4), i$12.write(t8, r9, e11, n9, 23, 4), e11 + 4;
}
function M2(t8, r9, e11, n9, o9) {
  return r9 = +r9, e11 >>>= 0, o9 || P2(t8, 0, e11, 8), i$12.write(t8, r9, e11, n9, 52, 8), e11 + 8;
}
function _2(t8, r9) {
  var e11;
  r9 = r9 || 1 / 0;
  for (var n9 = t8.length, i8 = null, o9 = [], f9 = 0; f9 < n9; ++f9) {
    if ((e11 = t8.charCodeAt(f9)) > 55295 && e11 < 57344) {
      if (!i8) {
        if (e11 > 56319) {
          (r9 -= 3) > -1 && o9.push(239, 191, 189);
          continue;
        }
        if (f9 + 1 === n9) {
          (r9 -= 3) > -1 && o9.push(239, 191, 189);
          continue;
        }
        i8 = e11;
        continue;
      }
      if (e11 < 56320) {
        (r9 -= 3) > -1 && o9.push(239, 191, 189), i8 = e11;
        continue;
      }
      e11 = 65536 + (i8 - 55296 << 10 | e11 - 56320);
    } else
      i8 && (r9 -= 3) > -1 && o9.push(239, 191, 189);
    if (i8 = null, e11 < 128) {
      if ((r9 -= 1) < 0)
        break;
      o9.push(e11);
    } else if (e11 < 2048) {
      if ((r9 -= 2) < 0)
        break;
      o9.push(e11 >> 6 | 192, 63 & e11 | 128);
    } else if (e11 < 65536) {
      if ((r9 -= 3) < 0)
        break;
      o9.push(e11 >> 12 | 224, e11 >> 6 & 63 | 128, 63 & e11 | 128);
    } else {
      if (!(e11 < 1114112))
        throw new Error("Invalid code point");
      if ((r9 -= 4) < 0)
        break;
      o9.push(e11 >> 18 | 240, e11 >> 12 & 63 | 128, e11 >> 6 & 63 | 128, 63 & e11 | 128);
    }
  }
  return o9;
}
function z2(t8) {
  return n$1$1.toByteArray(function(t9) {
    if ((t9 = (t9 = t9.split("=")[0]).trim().replace(j2, "")).length < 2)
      return "";
    for (; t9.length % 4 != 0; )
      t9 += "=";
    return t9;
  }(t8));
}
function D2(t8, r9, e11, n9) {
  for (var i8 = 0; i8 < n9 && !(i8 + e11 >= r9.length || i8 >= t8.length); ++i8)
    r9[i8 + e11] = t8[i8];
  return i8;
}
function F2(t8, r9) {
  return t8 instanceof r9 || null != t8 && null != t8.constructor && null != t8.constructor.name && t8.constructor.name === r9.name;
}
function N2(t8) {
  return t8 != t8;
}
function t4(r9, e11) {
  for (var n9 in r9)
    e11[n9] = r9[n9];
}
function f4(r9, e11, n9) {
  return o4(r9, e11, n9);
}
function a4(t8) {
  var e11;
  switch (this.encoding = function(t9) {
    var e12 = function(t10) {
      if (!t10)
        return "utf8";
      for (var e13; ; )
        switch (t10) {
          case "utf8":
          case "utf-8":
            return "utf8";
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return "utf16le";
          case "latin1":
          case "binary":
            return "latin1";
          case "base64":
          case "ascii":
          case "hex":
            return t10;
          default:
            if (e13)
              return;
            t10 = ("" + t10).toLowerCase(), e13 = true;
        }
    }(t9);
    if ("string" != typeof e12 && (s4.isEncoding === i4 || !i4(t9)))
      throw new Error("Unknown encoding: " + t9);
    return e12 || t9;
  }(t8), this.encoding) {
    case "utf16le":
      this.text = h4, this.end = l4, e11 = 4;
      break;
    case "utf8":
      this.fillLast = n$12, e11 = 4;
      break;
    case "base64":
      this.text = u$12, this.end = o$12, e11 = 3;
      break;
    default:
      return this.write = f$1, this.end = c4, void 0;
  }
  this.lastNeed = 0, this.lastTotal = 0, this.lastChar = s4.allocUnsafe(e11);
}
function r4(t8) {
  return t8 <= 127 ? 0 : t8 >> 5 == 6 ? 2 : t8 >> 4 == 14 ? 3 : t8 >> 3 == 30 ? 4 : t8 >> 6 == 2 ? -1 : -2;
}
function n$12(t8) {
  var e11 = this.lastTotal - this.lastNeed, s7 = function(t9, e12, s8) {
    if (128 != (192 & e12[0]))
      return t9.lastNeed = 0, "\uFFFD";
    if (t9.lastNeed > 1 && e12.length > 1) {
      if (128 != (192 & e12[1]))
        return t9.lastNeed = 1, "\uFFFD";
      if (t9.lastNeed > 2 && e12.length > 2 && 128 != (192 & e12[2]))
        return t9.lastNeed = 2, "\uFFFD";
    }
  }(this, t8);
  return void 0 !== s7 ? s7 : this.lastNeed <= t8.length ? (t8.copy(this.lastChar, e11, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal)) : (t8.copy(this.lastChar, e11, 0, t8.length), this.lastNeed -= t8.length, void 0);
}
function h4(t8, e11) {
  if ((t8.length - e11) % 2 == 0) {
    var s7 = t8.toString("utf16le", e11);
    if (s7) {
      var i8 = s7.charCodeAt(s7.length - 1);
      if (i8 >= 55296 && i8 <= 56319)
        return this.lastNeed = 2, this.lastTotal = 4, this.lastChar[0] = t8[t8.length - 2], this.lastChar[1] = t8[t8.length - 1], s7.slice(0, -1);
    }
    return s7;
  }
  return this.lastNeed = 1, this.lastTotal = 2, this.lastChar[0] = t8[t8.length - 1], t8.toString("utf16le", e11, t8.length - 1);
}
function l4(t8) {
  var e11 = t8 && t8.length ? this.write(t8) : "";
  if (this.lastNeed) {
    var s7 = this.lastTotal - this.lastNeed;
    return e11 + this.lastChar.toString("utf16le", 0, s7);
  }
  return e11;
}
function u$12(t8, e11) {
  var s7 = (t8.length - e11) % 3;
  return 0 === s7 ? t8.toString("base64", e11) : (this.lastNeed = 3 - s7, this.lastTotal = 3, 1 === s7 ? this.lastChar[0] = t8[t8.length - 1] : (this.lastChar[0] = t8[t8.length - 2], this.lastChar[1] = t8[t8.length - 1]), t8.toString("base64", e11, t8.length - s7));
}
function o$12(t8) {
  var e11 = t8 && t8.length ? this.write(t8) : "";
  return this.lastNeed ? e11 + this.lastChar.toString("base64", 0, 3 - this.lastNeed) : e11;
}
function f$1(t8) {
  return t8.toString(this.encoding);
}
function c4(t8) {
  return t8 && t8.length ? this.write(t8) : "";
}
var r$13, t$13, e$22, n$22, o$23, a$12, h$12, a$1$1, e$1$1, n$1$1, i$12, o$1$1, j2, Y2, e4, n4, o4, u4, e$12, s4, i4;
var init_chunk_4ccc3a29 = __esm({
  "../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/chunk-4ccc3a29.js"() {
    init_dirname();
    init_buffer2();
    init_process2();
    for (r$13 = { byteLength: function(r9) {
      var t8 = u$2(r9), e11 = t8[0], n9 = t8[1];
      return 3 * (e11 + n9) / 4 - n9;
    }, toByteArray: function(r9) {
      var t8, o9, a8 = u$2(r9), h8 = a8[0], c8 = a8[1], d6 = new n$22(function(r10, t9, e11) {
        return 3 * (t9 + e11) / 4 - e11;
      }(0, h8, c8)), f9 = 0, A4 = c8 > 0 ? h8 - 4 : h8;
      for (o9 = 0; o9 < A4; o9 += 4)
        t8 = e$22[r9.charCodeAt(o9)] << 18 | e$22[r9.charCodeAt(o9 + 1)] << 12 | e$22[r9.charCodeAt(o9 + 2)] << 6 | e$22[r9.charCodeAt(o9 + 3)], d6[f9++] = t8 >> 16 & 255, d6[f9++] = t8 >> 8 & 255, d6[f9++] = 255 & t8;
      2 === c8 && (t8 = e$22[r9.charCodeAt(o9)] << 2 | e$22[r9.charCodeAt(o9 + 1)] >> 4, d6[f9++] = 255 & t8);
      1 === c8 && (t8 = e$22[r9.charCodeAt(o9)] << 10 | e$22[r9.charCodeAt(o9 + 1)] << 4 | e$22[r9.charCodeAt(o9 + 2)] >> 2, d6[f9++] = t8 >> 8 & 255, d6[f9++] = 255 & t8);
      return d6;
    }, fromByteArray: function(r9) {
      for (var e11, n9 = r9.length, o9 = n9 % 3, a8 = [], h8 = 0, u8 = n9 - o9; h8 < u8; h8 += 16383)
        a8.push(c$12(r9, h8, h8 + 16383 > u8 ? u8 : h8 + 16383));
      1 === o9 ? (e11 = r9[n9 - 1], a8.push(t$13[e11 >> 2] + t$13[e11 << 4 & 63] + "==")) : 2 === o9 && (e11 = (r9[n9 - 2] << 8) + r9[n9 - 1], a8.push(t$13[e11 >> 10] + t$13[e11 >> 4 & 63] + t$13[e11 << 2 & 63] + "="));
      return a8.join("");
    } }, t$13 = [], e$22 = [], n$22 = "undefined" != typeof Uint8Array ? Uint8Array : Array, o$23 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", a$12 = 0, h$12 = o$23.length; a$12 < h$12; ++a$12)
      t$13[a$12] = o$23[a$12], e$22[o$23.charCodeAt(a$12)] = a$12;
    e$22["-".charCodeAt(0)] = 62, e$22["_".charCodeAt(0)] = 63;
    a$1$1 = { read: function(a8, t8, o9, r9, h8) {
      var M4, f9, p8 = 8 * h8 - r9 - 1, w4 = (1 << p8) - 1, e11 = w4 >> 1, i8 = -7, N4 = o9 ? h8 - 1 : 0, n9 = o9 ? -1 : 1, u8 = a8[t8 + N4];
      for (N4 += n9, M4 = u8 & (1 << -i8) - 1, u8 >>= -i8, i8 += p8; i8 > 0; M4 = 256 * M4 + a8[t8 + N4], N4 += n9, i8 -= 8)
        ;
      for (f9 = M4 & (1 << -i8) - 1, M4 >>= -i8, i8 += r9; i8 > 0; f9 = 256 * f9 + a8[t8 + N4], N4 += n9, i8 -= 8)
        ;
      if (0 === M4)
        M4 = 1 - e11;
      else {
        if (M4 === w4)
          return f9 ? NaN : 1 / 0 * (u8 ? -1 : 1);
        f9 += Math.pow(2, r9), M4 -= e11;
      }
      return (u8 ? -1 : 1) * f9 * Math.pow(2, M4 - r9);
    }, write: function(a8, t8, o9, r9, h8, M4) {
      var f9, p8, w4, e11 = 8 * M4 - h8 - 1, i8 = (1 << e11) - 1, N4 = i8 >> 1, n9 = 23 === h8 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, u8 = r9 ? 0 : M4 - 1, l8 = r9 ? 1 : -1, s7 = t8 < 0 || 0 === t8 && 1 / t8 < 0 ? 1 : 0;
      for (t8 = Math.abs(t8), isNaN(t8) || t8 === 1 / 0 ? (p8 = isNaN(t8) ? 1 : 0, f9 = i8) : (f9 = Math.floor(Math.log(t8) / Math.LN2), t8 * (w4 = Math.pow(2, -f9)) < 1 && (f9--, w4 *= 2), (t8 += f9 + N4 >= 1 ? n9 / w4 : n9 * Math.pow(2, 1 - N4)) * w4 >= 2 && (f9++, w4 /= 2), f9 + N4 >= i8 ? (p8 = 0, f9 = i8) : f9 + N4 >= 1 ? (p8 = (t8 * w4 - 1) * Math.pow(2, h8), f9 += N4) : (p8 = t8 * Math.pow(2, N4 - 1) * Math.pow(2, h8), f9 = 0)); h8 >= 8; a8[o9 + u8] = 255 & p8, u8 += l8, p8 /= 256, h8 -= 8)
        ;
      for (f9 = f9 << h8 | p8, e11 += h8; e11 > 0; a8[o9 + u8] = 255 & f9, u8 += l8, f9 /= 256, e11 -= 8)
        ;
      a8[o9 + u8 - l8] |= 128 * s7;
    } };
    e$1$1 = {};
    n$1$1 = r$13;
    i$12 = a$1$1;
    o$1$1 = "function" == typeof Symbol && "function" == typeof Symbol.for ? Symbol.for("nodejs.util.inspect.custom") : null;
    e$1$1.Buffer = u$1$1, e$1$1.SlowBuffer = function(t8) {
      +t8 != t8 && (t8 = 0);
      return u$1$1.alloc(+t8);
    }, e$1$1.INSPECT_MAX_BYTES = 50;
    e$1$1.kMaxLength = 2147483647, u$1$1.TYPED_ARRAY_SUPPORT = function() {
      try {
        var t8 = new Uint8Array(1), r9 = { foo: function() {
          return 42;
        } };
        return Object.setPrototypeOf(r9, Uint8Array.prototype), Object.setPrototypeOf(t8, r9), 42 === t8.foo();
      } catch (t9) {
        return false;
      }
    }(), u$1$1.TYPED_ARRAY_SUPPORT || "undefined" == typeof console || "function" != typeof console.error || console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."), Object.defineProperty(u$1$1.prototype, "parent", { enumerable: true, get: function() {
      if (u$1$1.isBuffer(this))
        return this.buffer;
    } }), Object.defineProperty(u$1$1.prototype, "offset", { enumerable: true, get: function() {
      if (u$1$1.isBuffer(this))
        return this.byteOffset;
    } }), u$1$1.poolSize = 8192, u$1$1.from = function(t8, r9, e11) {
      return s$1(t8, r9, e11);
    }, Object.setPrototypeOf(u$1$1.prototype, Uint8Array.prototype), Object.setPrototypeOf(u$1$1, Uint8Array), u$1$1.alloc = function(t8, r9, e11) {
      return function(t9, r10, e12) {
        return h$1$1(t9), t9 <= 0 ? f$2(t9) : void 0 !== r10 ? "string" == typeof e12 ? f$2(t9).fill(r10, e12) : f$2(t9).fill(r10) : f$2(t9);
      }(t8, r9, e11);
    }, u$1$1.allocUnsafe = function(t8) {
      return a$2(t8);
    }, u$1$1.allocUnsafeSlow = function(t8) {
      return a$2(t8);
    }, u$1$1.isBuffer = function(t8) {
      return null != t8 && true === t8._isBuffer && t8 !== u$1$1.prototype;
    }, u$1$1.compare = function(t8, r9) {
      if (F2(t8, Uint8Array) && (t8 = u$1$1.from(t8, t8.offset, t8.byteLength)), F2(r9, Uint8Array) && (r9 = u$1$1.from(r9, r9.offset, r9.byteLength)), !u$1$1.isBuffer(t8) || !u$1$1.isBuffer(r9))
        throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
      if (t8 === r9)
        return 0;
      for (var e11 = t8.length, n9 = r9.length, i8 = 0, o9 = Math.min(e11, n9); i8 < o9; ++i8)
        if (t8[i8] !== r9[i8]) {
          e11 = t8[i8], n9 = r9[i8];
          break;
        }
      return e11 < n9 ? -1 : n9 < e11 ? 1 : 0;
    }, u$1$1.isEncoding = function(t8) {
      switch (String(t8).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return true;
        default:
          return false;
      }
    }, u$1$1.concat = function(t8, r9) {
      if (!Array.isArray(t8))
        throw new TypeError('"list" argument must be an Array of Buffers');
      if (0 === t8.length)
        return u$1$1.alloc(0);
      var e11;
      if (void 0 === r9)
        for (r9 = 0, e11 = 0; e11 < t8.length; ++e11)
          r9 += t8[e11].length;
      var n9 = u$1$1.allocUnsafe(r9), i8 = 0;
      for (e11 = 0; e11 < t8.length; ++e11) {
        var o9 = t8[e11];
        if (F2(o9, Uint8Array) && (o9 = u$1$1.from(o9)), !u$1$1.isBuffer(o9))
          throw new TypeError('"list" argument must be an Array of Buffers');
        o9.copy(n9, i8), i8 += o9.length;
      }
      return n9;
    }, u$1$1.byteLength = y3, u$1$1.prototype._isBuffer = true, u$1$1.prototype.swap16 = function() {
      var t8 = this.length;
      if (t8 % 2 != 0)
        throw new RangeError("Buffer size must be a multiple of 16-bits");
      for (var r9 = 0; r9 < t8; r9 += 2)
        w2(this, r9, r9 + 1);
      return this;
    }, u$1$1.prototype.swap32 = function() {
      var t8 = this.length;
      if (t8 % 4 != 0)
        throw new RangeError("Buffer size must be a multiple of 32-bits");
      for (var r9 = 0; r9 < t8; r9 += 4)
        w2(this, r9, r9 + 3), w2(this, r9 + 1, r9 + 2);
      return this;
    }, u$1$1.prototype.swap64 = function() {
      var t8 = this.length;
      if (t8 % 8 != 0)
        throw new RangeError("Buffer size must be a multiple of 64-bits");
      for (var r9 = 0; r9 < t8; r9 += 8)
        w2(this, r9, r9 + 7), w2(this, r9 + 1, r9 + 6), w2(this, r9 + 2, r9 + 5), w2(this, r9 + 3, r9 + 4);
      return this;
    }, u$1$1.prototype.toString = function() {
      var t8 = this.length;
      return 0 === t8 ? "" : 0 === arguments.length ? I2(this, 0, t8) : g2.apply(this, arguments);
    }, u$1$1.prototype.toLocaleString = u$1$1.prototype.toString, u$1$1.prototype.equals = function(t8) {
      if (!u$1$1.isBuffer(t8))
        throw new TypeError("Argument must be a Buffer");
      return this === t8 || 0 === u$1$1.compare(this, t8);
    }, u$1$1.prototype.inspect = function() {
      var t8 = "", r9 = e$1$1.INSPECT_MAX_BYTES;
      return t8 = this.toString("hex", 0, r9).replace(/(.{2})/g, "$1 ").trim(), this.length > r9 && (t8 += " ... "), "<Buffer " + t8 + ">";
    }, o$1$1 && (u$1$1.prototype[o$1$1] = u$1$1.prototype.inspect), u$1$1.prototype.compare = function(t8, r9, e11, n9, i8) {
      if (F2(t8, Uint8Array) && (t8 = u$1$1.from(t8, t8.offset, t8.byteLength)), !u$1$1.isBuffer(t8))
        throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof t8);
      if (void 0 === r9 && (r9 = 0), void 0 === e11 && (e11 = t8 ? t8.length : 0), void 0 === n9 && (n9 = 0), void 0 === i8 && (i8 = this.length), r9 < 0 || e11 > t8.length || n9 < 0 || i8 > this.length)
        throw new RangeError("out of range index");
      if (n9 >= i8 && r9 >= e11)
        return 0;
      if (n9 >= i8)
        return -1;
      if (r9 >= e11)
        return 1;
      if (this === t8)
        return 0;
      for (var o9 = (i8 >>>= 0) - (n9 >>>= 0), f9 = (e11 >>>= 0) - (r9 >>>= 0), s7 = Math.min(o9, f9), h8 = this.slice(n9, i8), a8 = t8.slice(r9, e11), p8 = 0; p8 < s7; ++p8)
        if (h8[p8] !== a8[p8]) {
          o9 = h8[p8], f9 = a8[p8];
          break;
        }
      return o9 < f9 ? -1 : f9 < o9 ? 1 : 0;
    }, u$1$1.prototype.includes = function(t8, r9, e11) {
      return -1 !== this.indexOf(t8, r9, e11);
    }, u$1$1.prototype.indexOf = function(t8, r9, e11) {
      return d3(this, t8, r9, e11, true);
    }, u$1$1.prototype.lastIndexOf = function(t8, r9, e11) {
      return d3(this, t8, r9, e11, false);
    }, u$1$1.prototype.write = function(t8, r9, e11, n9) {
      if (void 0 === r9)
        n9 = "utf8", e11 = this.length, r9 = 0;
      else if (void 0 === e11 && "string" == typeof r9)
        n9 = r9, e11 = this.length, r9 = 0;
      else {
        if (!isFinite(r9))
          throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
        r9 >>>= 0, isFinite(e11) ? (e11 >>>= 0, void 0 === n9 && (n9 = "utf8")) : (n9 = e11, e11 = void 0);
      }
      var i8 = this.length - r9;
      if ((void 0 === e11 || e11 > i8) && (e11 = i8), t8.length > 0 && (e11 < 0 || r9 < 0) || r9 > this.length)
        throw new RangeError("Attempt to write outside buffer bounds");
      n9 || (n9 = "utf8");
      for (var o9 = false; ; )
        switch (n9) {
          case "hex":
            return b2(this, t8, r9, e11);
          case "utf8":
          case "utf-8":
            return m3(this, t8, r9, e11);
          case "ascii":
            return E2(this, t8, r9, e11);
          case "latin1":
          case "binary":
            return B2(this, t8, r9, e11);
          case "base64":
            return A2(this, t8, r9, e11);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return U2(this, t8, r9, e11);
          default:
            if (o9)
              throw new TypeError("Unknown encoding: " + n9);
            n9 = ("" + n9).toLowerCase(), o9 = true;
        }
    }, u$1$1.prototype.toJSON = function() {
      return { type: "Buffer", data: Array.prototype.slice.call(this._arr || this, 0) };
    };
    u$1$1.prototype.slice = function(t8, r9) {
      var e11 = this.length;
      (t8 = ~~t8) < 0 ? (t8 += e11) < 0 && (t8 = 0) : t8 > e11 && (t8 = e11), (r9 = void 0 === r9 ? e11 : ~~r9) < 0 ? (r9 += e11) < 0 && (r9 = 0) : r9 > e11 && (r9 = e11), r9 < t8 && (r9 = t8);
      var n9 = this.subarray(t8, r9);
      return Object.setPrototypeOf(n9, u$1$1.prototype), n9;
    }, u$1$1.prototype.readUIntLE = function(t8, r9, e11) {
      t8 >>>= 0, r9 >>>= 0, e11 || x2(t8, r9, this.length);
      for (var n9 = this[t8], i8 = 1, o9 = 0; ++o9 < r9 && (i8 *= 256); )
        n9 += this[t8 + o9] * i8;
      return n9;
    }, u$1$1.prototype.readUIntBE = function(t8, r9, e11) {
      t8 >>>= 0, r9 >>>= 0, e11 || x2(t8, r9, this.length);
      for (var n9 = this[t8 + --r9], i8 = 1; r9 > 0 && (i8 *= 256); )
        n9 += this[t8 + --r9] * i8;
      return n9;
    }, u$1$1.prototype.readUInt8 = function(t8, r9) {
      return t8 >>>= 0, r9 || x2(t8, 1, this.length), this[t8];
    }, u$1$1.prototype.readUInt16LE = function(t8, r9) {
      return t8 >>>= 0, r9 || x2(t8, 2, this.length), this[t8] | this[t8 + 1] << 8;
    }, u$1$1.prototype.readUInt16BE = function(t8, r9) {
      return t8 >>>= 0, r9 || x2(t8, 2, this.length), this[t8] << 8 | this[t8 + 1];
    }, u$1$1.prototype.readUInt32LE = function(t8, r9) {
      return t8 >>>= 0, r9 || x2(t8, 4, this.length), (this[t8] | this[t8 + 1] << 8 | this[t8 + 2] << 16) + 16777216 * this[t8 + 3];
    }, u$1$1.prototype.readUInt32BE = function(t8, r9) {
      return t8 >>>= 0, r9 || x2(t8, 4, this.length), 16777216 * this[t8] + (this[t8 + 1] << 16 | this[t8 + 2] << 8 | this[t8 + 3]);
    }, u$1$1.prototype.readIntLE = function(t8, r9, e11) {
      t8 >>>= 0, r9 >>>= 0, e11 || x2(t8, r9, this.length);
      for (var n9 = this[t8], i8 = 1, o9 = 0; ++o9 < r9 && (i8 *= 256); )
        n9 += this[t8 + o9] * i8;
      return n9 >= (i8 *= 128) && (n9 -= Math.pow(2, 8 * r9)), n9;
    }, u$1$1.prototype.readIntBE = function(t8, r9, e11) {
      t8 >>>= 0, r9 >>>= 0, e11 || x2(t8, r9, this.length);
      for (var n9 = r9, i8 = 1, o9 = this[t8 + --n9]; n9 > 0 && (i8 *= 256); )
        o9 += this[t8 + --n9] * i8;
      return o9 >= (i8 *= 128) && (o9 -= Math.pow(2, 8 * r9)), o9;
    }, u$1$1.prototype.readInt8 = function(t8, r9) {
      return t8 >>>= 0, r9 || x2(t8, 1, this.length), 128 & this[t8] ? -1 * (255 - this[t8] + 1) : this[t8];
    }, u$1$1.prototype.readInt16LE = function(t8, r9) {
      t8 >>>= 0, r9 || x2(t8, 2, this.length);
      var e11 = this[t8] | this[t8 + 1] << 8;
      return 32768 & e11 ? 4294901760 | e11 : e11;
    }, u$1$1.prototype.readInt16BE = function(t8, r9) {
      t8 >>>= 0, r9 || x2(t8, 2, this.length);
      var e11 = this[t8 + 1] | this[t8] << 8;
      return 32768 & e11 ? 4294901760 | e11 : e11;
    }, u$1$1.prototype.readInt32LE = function(t8, r9) {
      return t8 >>>= 0, r9 || x2(t8, 4, this.length), this[t8] | this[t8 + 1] << 8 | this[t8 + 2] << 16 | this[t8 + 3] << 24;
    }, u$1$1.prototype.readInt32BE = function(t8, r9) {
      return t8 >>>= 0, r9 || x2(t8, 4, this.length), this[t8] << 24 | this[t8 + 1] << 16 | this[t8 + 2] << 8 | this[t8 + 3];
    }, u$1$1.prototype.readFloatLE = function(t8, r9) {
      return t8 >>>= 0, r9 || x2(t8, 4, this.length), i$12.read(this, t8, true, 23, 4);
    }, u$1$1.prototype.readFloatBE = function(t8, r9) {
      return t8 >>>= 0, r9 || x2(t8, 4, this.length), i$12.read(this, t8, false, 23, 4);
    }, u$1$1.prototype.readDoubleLE = function(t8, r9) {
      return t8 >>>= 0, r9 || x2(t8, 8, this.length), i$12.read(this, t8, true, 52, 8);
    }, u$1$1.prototype.readDoubleBE = function(t8, r9) {
      return t8 >>>= 0, r9 || x2(t8, 8, this.length), i$12.read(this, t8, false, 52, 8);
    }, u$1$1.prototype.writeUIntLE = function(t8, r9, e11, n9) {
      (t8 = +t8, r9 >>>= 0, e11 >>>= 0, n9) || C2(this, t8, r9, e11, Math.pow(2, 8 * e11) - 1, 0);
      var i8 = 1, o9 = 0;
      for (this[r9] = 255 & t8; ++o9 < e11 && (i8 *= 256); )
        this[r9 + o9] = t8 / i8 & 255;
      return r9 + e11;
    }, u$1$1.prototype.writeUIntBE = function(t8, r9, e11, n9) {
      (t8 = +t8, r9 >>>= 0, e11 >>>= 0, n9) || C2(this, t8, r9, e11, Math.pow(2, 8 * e11) - 1, 0);
      var i8 = e11 - 1, o9 = 1;
      for (this[r9 + i8] = 255 & t8; --i8 >= 0 && (o9 *= 256); )
        this[r9 + i8] = t8 / o9 & 255;
      return r9 + e11;
    }, u$1$1.prototype.writeUInt8 = function(t8, r9, e11) {
      return t8 = +t8, r9 >>>= 0, e11 || C2(this, t8, r9, 1, 255, 0), this[r9] = 255 & t8, r9 + 1;
    }, u$1$1.prototype.writeUInt16LE = function(t8, r9, e11) {
      return t8 = +t8, r9 >>>= 0, e11 || C2(this, t8, r9, 2, 65535, 0), this[r9] = 255 & t8, this[r9 + 1] = t8 >>> 8, r9 + 2;
    }, u$1$1.prototype.writeUInt16BE = function(t8, r9, e11) {
      return t8 = +t8, r9 >>>= 0, e11 || C2(this, t8, r9, 2, 65535, 0), this[r9] = t8 >>> 8, this[r9 + 1] = 255 & t8, r9 + 2;
    }, u$1$1.prototype.writeUInt32LE = function(t8, r9, e11) {
      return t8 = +t8, r9 >>>= 0, e11 || C2(this, t8, r9, 4, 4294967295, 0), this[r9 + 3] = t8 >>> 24, this[r9 + 2] = t8 >>> 16, this[r9 + 1] = t8 >>> 8, this[r9] = 255 & t8, r9 + 4;
    }, u$1$1.prototype.writeUInt32BE = function(t8, r9, e11) {
      return t8 = +t8, r9 >>>= 0, e11 || C2(this, t8, r9, 4, 4294967295, 0), this[r9] = t8 >>> 24, this[r9 + 1] = t8 >>> 16, this[r9 + 2] = t8 >>> 8, this[r9 + 3] = 255 & t8, r9 + 4;
    }, u$1$1.prototype.writeIntLE = function(t8, r9, e11, n9) {
      if (t8 = +t8, r9 >>>= 0, !n9) {
        var i8 = Math.pow(2, 8 * e11 - 1);
        C2(this, t8, r9, e11, i8 - 1, -i8);
      }
      var o9 = 0, f9 = 1, u8 = 0;
      for (this[r9] = 255 & t8; ++o9 < e11 && (f9 *= 256); )
        t8 < 0 && 0 === u8 && 0 !== this[r9 + o9 - 1] && (u8 = 1), this[r9 + o9] = (t8 / f9 >> 0) - u8 & 255;
      return r9 + e11;
    }, u$1$1.prototype.writeIntBE = function(t8, r9, e11, n9) {
      if (t8 = +t8, r9 >>>= 0, !n9) {
        var i8 = Math.pow(2, 8 * e11 - 1);
        C2(this, t8, r9, e11, i8 - 1, -i8);
      }
      var o9 = e11 - 1, f9 = 1, u8 = 0;
      for (this[r9 + o9] = 255 & t8; --o9 >= 0 && (f9 *= 256); )
        t8 < 0 && 0 === u8 && 0 !== this[r9 + o9 + 1] && (u8 = 1), this[r9 + o9] = (t8 / f9 >> 0) - u8 & 255;
      return r9 + e11;
    }, u$1$1.prototype.writeInt8 = function(t8, r9, e11) {
      return t8 = +t8, r9 >>>= 0, e11 || C2(this, t8, r9, 1, 127, -128), t8 < 0 && (t8 = 255 + t8 + 1), this[r9] = 255 & t8, r9 + 1;
    }, u$1$1.prototype.writeInt16LE = function(t8, r9, e11) {
      return t8 = +t8, r9 >>>= 0, e11 || C2(this, t8, r9, 2, 32767, -32768), this[r9] = 255 & t8, this[r9 + 1] = t8 >>> 8, r9 + 2;
    }, u$1$1.prototype.writeInt16BE = function(t8, r9, e11) {
      return t8 = +t8, r9 >>>= 0, e11 || C2(this, t8, r9, 2, 32767, -32768), this[r9] = t8 >>> 8, this[r9 + 1] = 255 & t8, r9 + 2;
    }, u$1$1.prototype.writeInt32LE = function(t8, r9, e11) {
      return t8 = +t8, r9 >>>= 0, e11 || C2(this, t8, r9, 4, 2147483647, -2147483648), this[r9] = 255 & t8, this[r9 + 1] = t8 >>> 8, this[r9 + 2] = t8 >>> 16, this[r9 + 3] = t8 >>> 24, r9 + 4;
    }, u$1$1.prototype.writeInt32BE = function(t8, r9, e11) {
      return t8 = +t8, r9 >>>= 0, e11 || C2(this, t8, r9, 4, 2147483647, -2147483648), t8 < 0 && (t8 = 4294967295 + t8 + 1), this[r9] = t8 >>> 24, this[r9 + 1] = t8 >>> 16, this[r9 + 2] = t8 >>> 8, this[r9 + 3] = 255 & t8, r9 + 4;
    }, u$1$1.prototype.writeFloatLE = function(t8, r9, e11) {
      return k2(this, t8, r9, true, e11);
    }, u$1$1.prototype.writeFloatBE = function(t8, r9, e11) {
      return k2(this, t8, r9, false, e11);
    }, u$1$1.prototype.writeDoubleLE = function(t8, r9, e11) {
      return M2(this, t8, r9, true, e11);
    }, u$1$1.prototype.writeDoubleBE = function(t8, r9, e11) {
      return M2(this, t8, r9, false, e11);
    }, u$1$1.prototype.copy = function(t8, r9, e11, n9) {
      if (!u$1$1.isBuffer(t8))
        throw new TypeError("argument should be a Buffer");
      if (e11 || (e11 = 0), n9 || 0 === n9 || (n9 = this.length), r9 >= t8.length && (r9 = t8.length), r9 || (r9 = 0), n9 > 0 && n9 < e11 && (n9 = e11), n9 === e11)
        return 0;
      if (0 === t8.length || 0 === this.length)
        return 0;
      if (r9 < 0)
        throw new RangeError("targetStart out of bounds");
      if (e11 < 0 || e11 >= this.length)
        throw new RangeError("Index out of range");
      if (n9 < 0)
        throw new RangeError("sourceEnd out of bounds");
      n9 > this.length && (n9 = this.length), t8.length - r9 < n9 - e11 && (n9 = t8.length - r9 + e11);
      var i8 = n9 - e11;
      if (this === t8 && "function" == typeof Uint8Array.prototype.copyWithin)
        this.copyWithin(r9, e11, n9);
      else if (this === t8 && e11 < r9 && r9 < n9)
        for (var o9 = i8 - 1; o9 >= 0; --o9)
          t8[o9 + r9] = this[o9 + e11];
      else
        Uint8Array.prototype.set.call(t8, this.subarray(e11, n9), r9);
      return i8;
    }, u$1$1.prototype.fill = function(t8, r9, e11, n9) {
      if ("string" == typeof t8) {
        if ("string" == typeof r9 ? (n9 = r9, r9 = 0, e11 = this.length) : "string" == typeof e11 && (n9 = e11, e11 = this.length), void 0 !== n9 && "string" != typeof n9)
          throw new TypeError("encoding must be a string");
        if ("string" == typeof n9 && !u$1$1.isEncoding(n9))
          throw new TypeError("Unknown encoding: " + n9);
        if (1 === t8.length) {
          var i8 = t8.charCodeAt(0);
          ("utf8" === n9 && i8 < 128 || "latin1" === n9) && (t8 = i8);
        }
      } else
        "number" == typeof t8 ? t8 &= 255 : "boolean" == typeof t8 && (t8 = Number(t8));
      if (r9 < 0 || this.length < r9 || this.length < e11)
        throw new RangeError("Out of range index");
      if (e11 <= r9)
        return this;
      var o9;
      if (r9 >>>= 0, e11 = void 0 === e11 ? this.length : e11 >>> 0, t8 || (t8 = 0), "number" == typeof t8)
        for (o9 = r9; o9 < e11; ++o9)
          this[o9] = t8;
      else {
        var f9 = u$1$1.isBuffer(t8) ? t8 : u$1$1.from(t8, n9), s7 = f9.length;
        if (0 === s7)
          throw new TypeError('The value "' + t8 + '" is invalid for argument "value"');
        for (o9 = 0; o9 < e11 - r9; ++o9)
          this[o9 + r9] = f9[o9 % s7];
      }
      return this;
    };
    j2 = /[^+/0-9A-Za-z-_]/g;
    Y2 = function() {
      for (var t8 = new Array(256), r9 = 0; r9 < 16; ++r9)
        for (var e11 = 16 * r9, n9 = 0; n9 < 16; ++n9)
          t8[e11 + n9] = "0123456789abcdef"[r9] + "0123456789abcdef"[n9];
      return t8;
    }();
    e$1$1.Buffer;
    e$1$1.INSPECT_MAX_BYTES;
    e$1$1.kMaxLength;
    e4 = {};
    n4 = e$1$1;
    o4 = n4.Buffer;
    o4.from && o4.alloc && o4.allocUnsafe && o4.allocUnsafeSlow ? e4 = n4 : (t4(n4, e4), e4.Buffer = f4), f4.prototype = Object.create(o4.prototype), t4(o4, f4), f4.from = function(r9, e11, n9) {
      if ("number" == typeof r9)
        throw new TypeError("Argument must not be a number");
      return o4(r9, e11, n9);
    }, f4.alloc = function(r9, e11, n9) {
      if ("number" != typeof r9)
        throw new TypeError("Argument must be a number");
      var t8 = o4(r9);
      return void 0 !== e11 ? "string" == typeof n9 ? t8.fill(e11, n9) : t8.fill(e11) : t8.fill(0), t8;
    }, f4.allocUnsafe = function(r9) {
      if ("number" != typeof r9)
        throw new TypeError("Argument must be a number");
      return o4(r9);
    }, f4.allocUnsafeSlow = function(r9) {
      if ("number" != typeof r9)
        throw new TypeError("Argument must be a number");
      return n4.SlowBuffer(r9);
    };
    u4 = e4;
    e$12 = {};
    s4 = u4.Buffer;
    i4 = s4.isEncoding || function(t8) {
      switch ((t8 = "" + t8) && t8.toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
          return true;
        default:
          return false;
      }
    };
    e$12.StringDecoder = a4, a4.prototype.write = function(t8) {
      if (0 === t8.length)
        return "";
      var e11, s7;
      if (this.lastNeed) {
        if (void 0 === (e11 = this.fillLast(t8)))
          return "";
        s7 = this.lastNeed, this.lastNeed = 0;
      } else
        s7 = 0;
      return s7 < t8.length ? e11 ? e11 + this.text(t8, s7) : this.text(t8, s7) : e11 || "";
    }, a4.prototype.end = function(t8) {
      var e11 = t8 && t8.length ? this.write(t8) : "";
      return this.lastNeed ? e11 + "\uFFFD" : e11;
    }, a4.prototype.text = function(t8, e11) {
      var s7 = function(t9, e12, s8) {
        var i9 = e12.length - 1;
        if (i9 < s8)
          return 0;
        var a8 = r4(e12[i9]);
        if (a8 >= 0)
          return a8 > 0 && (t9.lastNeed = a8 - 1), a8;
        if (--i9 < s8 || -2 === a8)
          return 0;
        if ((a8 = r4(e12[i9])) >= 0)
          return a8 > 0 && (t9.lastNeed = a8 - 2), a8;
        if (--i9 < s8 || -2 === a8)
          return 0;
        if ((a8 = r4(e12[i9])) >= 0)
          return a8 > 0 && (2 === a8 ? a8 = 0 : t9.lastNeed = a8 - 3), a8;
        return 0;
      }(this, t8, e11);
      if (!this.lastNeed)
        return t8.toString("utf8", e11);
      this.lastTotal = s7;
      var i8 = t8.length - (s7 - this.lastNeed);
      return t8.copy(this.lastChar, 0, i8), t8.toString("utf8", e11, i8);
    }, a4.prototype.fillLast = function(t8) {
      if (this.lastNeed <= t8.length)
        return t8.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
      t8.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, t8.length), this.lastNeed -= t8.length;
    };
    e$12.StringDecoder;
    e$12.StringDecoder;
  }
});

// ../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/chunk-44e51b61.js
function dew$2$1() {
  if (_dewExec$2$1)
    return exports$2$1;
  _dewExec$2$1 = true;
  exports$2$1.byteLength = byteLength;
  exports$2$1.toByteArray = toByteArray;
  exports$2$1.fromByteArray = fromByteArray;
  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
  var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  for (var i8 = 0, len = code.length; i8 < len; ++i8) {
    lookup[i8] = code[i8];
    revLookup[code.charCodeAt(i8)] = i8;
  }
  revLookup["-".charCodeAt(0)] = 62;
  revLookup["_".charCodeAt(0)] = 63;
  function getLens(b64) {
    var len2 = b64.length;
    if (len2 % 4 > 0) {
      throw new Error("Invalid string. Length must be a multiple of 4");
    }
    var validLen = b64.indexOf("=");
    if (validLen === -1)
      validLen = len2;
    var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
    return [validLen, placeHoldersLen];
  }
  function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }
  function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }
  function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i9;
    for (i9 = 0; i9 < len2; i9 += 4) {
      tmp = revLookup[b64.charCodeAt(i9)] << 18 | revLookup[b64.charCodeAt(i9 + 1)] << 12 | revLookup[b64.charCodeAt(i9 + 2)] << 6 | revLookup[b64.charCodeAt(i9 + 3)];
      arr[curByte++] = tmp >> 16 & 255;
      arr[curByte++] = tmp >> 8 & 255;
      arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 2) {
      tmp = revLookup[b64.charCodeAt(i9)] << 2 | revLookup[b64.charCodeAt(i9 + 1)] >> 4;
      arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 1) {
      tmp = revLookup[b64.charCodeAt(i9)] << 10 | revLookup[b64.charCodeAt(i9 + 1)] << 4 | revLookup[b64.charCodeAt(i9 + 2)] >> 2;
      arr[curByte++] = tmp >> 8 & 255;
      arr[curByte++] = tmp & 255;
    }
    return arr;
  }
  function tripletToBase64(num) {
    return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
  }
  function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for (var i9 = start; i9 < end; i9 += 3) {
      tmp = (uint8[i9] << 16 & 16711680) + (uint8[i9 + 1] << 8 & 65280) + (uint8[i9 + 2] & 255);
      output.push(tripletToBase64(tmp));
    }
    return output.join("");
  }
  function fromByteArray(uint8) {
    var tmp;
    var len2 = uint8.length;
    var extraBytes = len2 % 3;
    var parts = [];
    var maxChunkLength = 16383;
    for (var i9 = 0, len22 = len2 - extraBytes; i9 < len22; i9 += maxChunkLength) {
      parts.push(encodeChunk(uint8, i9, i9 + maxChunkLength > len22 ? len22 : i9 + maxChunkLength));
    }
    if (extraBytes === 1) {
      tmp = uint8[len2 - 1];
      parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "==");
    } else if (extraBytes === 2) {
      tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
      parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "=");
    }
    return parts.join("");
  }
  return exports$2$1;
}
function dew$1$1() {
  if (_dewExec$1$1)
    return exports$1$1;
  _dewExec$1$1 = true;
  exports$1$1.read = function(buffer2, offset, isLE, mLen, nBytes) {
    var e11, m6;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i8 = isLE ? nBytes - 1 : 0;
    var d6 = isLE ? -1 : 1;
    var s7 = buffer2[offset + i8];
    i8 += d6;
    e11 = s7 & (1 << -nBits) - 1;
    s7 >>= -nBits;
    nBits += eLen;
    for (; nBits > 0; e11 = e11 * 256 + buffer2[offset + i8], i8 += d6, nBits -= 8) {
    }
    m6 = e11 & (1 << -nBits) - 1;
    e11 >>= -nBits;
    nBits += mLen;
    for (; nBits > 0; m6 = m6 * 256 + buffer2[offset + i8], i8 += d6, nBits -= 8) {
    }
    if (e11 === 0) {
      e11 = 1 - eBias;
    } else if (e11 === eMax) {
      return m6 ? NaN : (s7 ? -1 : 1) * Infinity;
    } else {
      m6 = m6 + Math.pow(2, mLen);
      e11 = e11 - eBias;
    }
    return (s7 ? -1 : 1) * m6 * Math.pow(2, e11 - mLen);
  };
  exports$1$1.write = function(buffer2, value, offset, isLE, mLen, nBytes) {
    var e11, m6, c8;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i8 = isLE ? 0 : nBytes - 1;
    var d6 = isLE ? 1 : -1;
    var s7 = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
      m6 = isNaN(value) ? 1 : 0;
      e11 = eMax;
    } else {
      e11 = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c8 = Math.pow(2, -e11)) < 1) {
        e11--;
        c8 *= 2;
      }
      if (e11 + eBias >= 1) {
        value += rt / c8;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c8 >= 2) {
        e11++;
        c8 /= 2;
      }
      if (e11 + eBias >= eMax) {
        m6 = 0;
        e11 = eMax;
      } else if (e11 + eBias >= 1) {
        m6 = (value * c8 - 1) * Math.pow(2, mLen);
        e11 = e11 + eBias;
      } else {
        m6 = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e11 = 0;
      }
    }
    for (; mLen >= 8; buffer2[offset + i8] = m6 & 255, i8 += d6, m6 /= 256, mLen -= 8) {
    }
    e11 = e11 << mLen | m6;
    eLen += mLen;
    for (; eLen > 0; buffer2[offset + i8] = e11 & 255, i8 += d6, e11 /= 256, eLen -= 8) {
    }
    buffer2[offset + i8 - d6] |= s7 * 128;
  };
  return exports$1$1;
}
function dew$g() {
  if (_dewExec$g)
    return exports$g;
  _dewExec$g = true;
  const base64 = dew$2$1();
  const ieee754 = dew$1$1();
  const customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
  exports$g.Buffer = Buffer3;
  exports$g.SlowBuffer = SlowBuffer;
  exports$g.INSPECT_MAX_BYTES = 50;
  const K_MAX_LENGTH = 2147483647;
  exports$g.kMaxLength = K_MAX_LENGTH;
  Buffer3.TYPED_ARRAY_SUPPORT = typedArraySupport();
  if (!Buffer3.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
    console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
  }
  function typedArraySupport() {
    try {
      const arr = new Uint8Array(1);
      const proto = {
        foo: function() {
          return 42;
        }
      };
      Object.setPrototypeOf(proto, Uint8Array.prototype);
      Object.setPrototypeOf(arr, proto);
      return arr.foo() === 42;
    } catch (e11) {
      return false;
    }
  }
  Object.defineProperty(Buffer3.prototype, "parent", {
    enumerable: true,
    get: function() {
      if (!Buffer3.isBuffer(this))
        return void 0;
      return this.buffer;
    }
  });
  Object.defineProperty(Buffer3.prototype, "offset", {
    enumerable: true,
    get: function() {
      if (!Buffer3.isBuffer(this))
        return void 0;
      return this.byteOffset;
    }
  });
  function createBuffer(length) {
    if (length > K_MAX_LENGTH) {
      throw new RangeError('The value "' + length + '" is invalid for option "size"');
    }
    const buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer3.prototype);
    return buf;
  }
  function Buffer3(arg, encodingOrOffset, length) {
    if (typeof arg === "number") {
      if (typeof encodingOrOffset === "string") {
        throw new TypeError('The "string" argument must be of type string. Received type number');
      }
      return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
  }
  Buffer3.poolSize = 8192;
  function from(value, encodingOrOffset, length) {
    if (typeof value === "string") {
      return fromString(value, encodingOrOffset);
    }
    if (ArrayBuffer.isView(value)) {
      return fromArrayView(value);
    }
    if (value == null) {
      throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    }
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
      return fromArrayBuffer(value, encodingOrOffset, length);
    }
    if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
      return fromArrayBuffer(value, encodingOrOffset, length);
    }
    if (typeof value === "number") {
      throw new TypeError('The "value" argument must not be of type number. Received type number');
    }
    const valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) {
      return Buffer3.from(valueOf, encodingOrOffset, length);
    }
    const b5 = fromObject(value);
    if (b5)
      return b5;
    if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
      return Buffer3.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
    }
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
  }
  Buffer3.from = function(value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
  };
  Object.setPrototypeOf(Buffer3.prototype, Uint8Array.prototype);
  Object.setPrototypeOf(Buffer3, Uint8Array);
  function assertSize(size) {
    if (typeof size !== "number") {
      throw new TypeError('"size" argument must be of type number');
    } else if (size < 0) {
      throw new RangeError('The value "' + size + '" is invalid for option "size"');
    }
  }
  function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) {
      return createBuffer(size);
    }
    if (fill !== void 0) {
      return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    }
    return createBuffer(size);
  }
  Buffer3.alloc = function(size, fill, encoding) {
    return alloc(size, fill, encoding);
  };
  function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
  }
  Buffer3.allocUnsafe = function(size) {
    return allocUnsafe(size);
  };
  Buffer3.allocUnsafeSlow = function(size) {
    return allocUnsafe(size);
  };
  function fromString(string, encoding) {
    if (typeof encoding !== "string" || encoding === "") {
      encoding = "utf8";
    }
    if (!Buffer3.isEncoding(encoding)) {
      throw new TypeError("Unknown encoding: " + encoding);
    }
    const length = byteLength(string, encoding) | 0;
    let buf = createBuffer(length);
    const actual = buf.write(string, encoding);
    if (actual !== length) {
      buf = buf.slice(0, actual);
    }
    return buf;
  }
  function fromArrayLike(array) {
    const length = array.length < 0 ? 0 : checked(array.length) | 0;
    const buf = createBuffer(length);
    for (let i8 = 0; i8 < length; i8 += 1) {
      buf[i8] = array[i8] & 255;
    }
    return buf;
  }
  function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
      const copy = new Uint8Array(arrayView);
      return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
  }
  function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError('"offset" is outside of buffer bounds');
    }
    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('"length" is outside of buffer bounds');
    }
    let buf;
    if (byteOffset === void 0 && length === void 0) {
      buf = new Uint8Array(array);
    } else if (length === void 0) {
      buf = new Uint8Array(array, byteOffset);
    } else {
      buf = new Uint8Array(array, byteOffset, length);
    }
    Object.setPrototypeOf(buf, Buffer3.prototype);
    return buf;
  }
  function fromObject(obj) {
    if (Buffer3.isBuffer(obj)) {
      const len = checked(obj.length) | 0;
      const buf = createBuffer(len);
      if (buf.length === 0) {
        return buf;
      }
      obj.copy(buf, 0, 0, len);
      return buf;
    }
    if (obj.length !== void 0) {
      if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
        return createBuffer(0);
      }
      return fromArrayLike(obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data);
    }
  }
  function checked(length) {
    if (length >= K_MAX_LENGTH) {
      throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
    }
    return length | 0;
  }
  function SlowBuffer(length) {
    if (+length != length) {
      length = 0;
    }
    return Buffer3.alloc(+length);
  }
  Buffer3.isBuffer = function isBuffer4(b5) {
    return b5 != null && b5._isBuffer === true && b5 !== Buffer3.prototype;
  };
  Buffer3.compare = function compare(a8, b5) {
    if (isInstance(a8, Uint8Array))
      a8 = Buffer3.from(a8, a8.offset, a8.byteLength);
    if (isInstance(b5, Uint8Array))
      b5 = Buffer3.from(b5, b5.offset, b5.byteLength);
    if (!Buffer3.isBuffer(a8) || !Buffer3.isBuffer(b5)) {
      throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    }
    if (a8 === b5)
      return 0;
    let x4 = a8.length;
    let y6 = b5.length;
    for (let i8 = 0, len = Math.min(x4, y6); i8 < len; ++i8) {
      if (a8[i8] !== b5[i8]) {
        x4 = a8[i8];
        y6 = b5[i8];
        break;
      }
    }
    if (x4 < y6)
      return -1;
    if (y6 < x4)
      return 1;
    return 0;
  };
  Buffer3.isEncoding = function isEncoding(encoding) {
    switch (String(encoding).toLowerCase()) {
      case "hex":
      case "utf8":
      case "utf-8":
      case "ascii":
      case "latin1":
      case "binary":
      case "base64":
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return true;
      default:
        return false;
    }
  };
  Buffer3.concat = function concat(list, length) {
    if (!Array.isArray(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }
    if (list.length === 0) {
      return Buffer3.alloc(0);
    }
    let i8;
    if (length === void 0) {
      length = 0;
      for (i8 = 0; i8 < list.length; ++i8) {
        length += list[i8].length;
      }
    }
    const buffer2 = Buffer3.allocUnsafe(length);
    let pos = 0;
    for (i8 = 0; i8 < list.length; ++i8) {
      let buf = list[i8];
      if (isInstance(buf, Uint8Array)) {
        if (pos + buf.length > buffer2.length) {
          if (!Buffer3.isBuffer(buf))
            buf = Buffer3.from(buf);
          buf.copy(buffer2, pos);
        } else {
          Uint8Array.prototype.set.call(buffer2, buf, pos);
        }
      } else if (!Buffer3.isBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      } else {
        buf.copy(buffer2, pos);
      }
      pos += buf.length;
    }
    return buffer2;
  };
  function byteLength(string, encoding) {
    if (Buffer3.isBuffer(string)) {
      return string.length;
    }
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
      return string.byteLength;
    }
    if (typeof string !== "string") {
      throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
    }
    const len = string.length;
    const mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0)
      return 0;
    let loweredCase = false;
    for (; ; ) {
      switch (encoding) {
        case "ascii":
        case "latin1":
        case "binary":
          return len;
        case "utf8":
        case "utf-8":
          return utf8ToBytes(string).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return len * 2;
        case "hex":
          return len >>> 1;
        case "base64":
          return base64ToBytes(string).length;
        default:
          if (loweredCase) {
            return mustMatch ? -1 : utf8ToBytes(string).length;
          }
          encoding = ("" + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer3.byteLength = byteLength;
  function slowToString(encoding, start, end) {
    let loweredCase = false;
    if (start === void 0 || start < 0) {
      start = 0;
    }
    if (start > this.length) {
      return "";
    }
    if (end === void 0 || end > this.length) {
      end = this.length;
    }
    if (end <= 0) {
      return "";
    }
    end >>>= 0;
    start >>>= 0;
    if (end <= start) {
      return "";
    }
    if (!encoding)
      encoding = "utf8";
    while (true) {
      switch (encoding) {
        case "hex":
          return hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
          return utf8Slice(this, start, end);
        case "ascii":
          return asciiSlice(this, start, end);
        case "latin1":
        case "binary":
          return latin1Slice(this, start, end);
        case "base64":
          return base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return utf16leSlice(this, start, end);
        default:
          if (loweredCase)
            throw new TypeError("Unknown encoding: " + encoding);
          encoding = (encoding + "").toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer3.prototype._isBuffer = true;
  function swap(b5, n9, m6) {
    const i8 = b5[n9];
    b5[n9] = b5[m6];
    b5[m6] = i8;
  }
  Buffer3.prototype.swap16 = function swap16() {
    const len = this.length;
    if (len % 2 !== 0) {
      throw new RangeError("Buffer size must be a multiple of 16-bits");
    }
    for (let i8 = 0; i8 < len; i8 += 2) {
      swap(this, i8, i8 + 1);
    }
    return this;
  };
  Buffer3.prototype.swap32 = function swap32() {
    const len = this.length;
    if (len % 4 !== 0) {
      throw new RangeError("Buffer size must be a multiple of 32-bits");
    }
    for (let i8 = 0; i8 < len; i8 += 4) {
      swap(this, i8, i8 + 3);
      swap(this, i8 + 1, i8 + 2);
    }
    return this;
  };
  Buffer3.prototype.swap64 = function swap64() {
    const len = this.length;
    if (len % 8 !== 0) {
      throw new RangeError("Buffer size must be a multiple of 64-bits");
    }
    for (let i8 = 0; i8 < len; i8 += 8) {
      swap(this, i8, i8 + 7);
      swap(this, i8 + 1, i8 + 6);
      swap(this, i8 + 2, i8 + 5);
      swap(this, i8 + 3, i8 + 4);
    }
    return this;
  };
  Buffer3.prototype.toString = function toString3() {
    const length = this.length;
    if (length === 0)
      return "";
    if (arguments.length === 0)
      return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
  };
  Buffer3.prototype.toLocaleString = Buffer3.prototype.toString;
  Buffer3.prototype.equals = function equals(b5) {
    if (!Buffer3.isBuffer(b5))
      throw new TypeError("Argument must be a Buffer");
    if (this === b5)
      return true;
    return Buffer3.compare(this, b5) === 0;
  };
  Buffer3.prototype.inspect = function inspect3() {
    let str = "";
    const max = exports$g.INSPECT_MAX_BYTES;
    str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
    if (this.length > max)
      str += " ... ";
    return "<Buffer " + str + ">";
  };
  if (customInspectSymbol) {
    Buffer3.prototype[customInspectSymbol] = Buffer3.prototype.inspect;
  }
  Buffer3.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) {
      target = Buffer3.from(target, target.offset, target.byteLength);
    }
    if (!Buffer3.isBuffer(target)) {
      throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
    }
    if (start === void 0) {
      start = 0;
    }
    if (end === void 0) {
      end = target ? target.length : 0;
    }
    if (thisStart === void 0) {
      thisStart = 0;
    }
    if (thisEnd === void 0) {
      thisEnd = this.length;
    }
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError("out of range index");
    }
    if (thisStart >= thisEnd && start >= end) {
      return 0;
    }
    if (thisStart >= thisEnd) {
      return -1;
    }
    if (start >= end) {
      return 1;
    }
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target)
      return 0;
    let x4 = thisEnd - thisStart;
    let y6 = end - start;
    const len = Math.min(x4, y6);
    const thisCopy = this.slice(thisStart, thisEnd);
    const targetCopy = target.slice(start, end);
    for (let i8 = 0; i8 < len; ++i8) {
      if (thisCopy[i8] !== targetCopy[i8]) {
        x4 = thisCopy[i8];
        y6 = targetCopy[i8];
        break;
      }
    }
    if (x4 < y6)
      return -1;
    if (y6 < x4)
      return 1;
    return 0;
  };
  function bidirectionalIndexOf(buffer2, val, byteOffset, encoding, dir) {
    if (buffer2.length === 0)
      return -1;
    if (typeof byteOffset === "string") {
      encoding = byteOffset;
      byteOffset = 0;
    } else if (byteOffset > 2147483647) {
      byteOffset = 2147483647;
    } else if (byteOffset < -2147483648) {
      byteOffset = -2147483648;
    }
    byteOffset = +byteOffset;
    if (numberIsNaN(byteOffset)) {
      byteOffset = dir ? 0 : buffer2.length - 1;
    }
    if (byteOffset < 0)
      byteOffset = buffer2.length + byteOffset;
    if (byteOffset >= buffer2.length) {
      if (dir)
        return -1;
      else
        byteOffset = buffer2.length - 1;
    } else if (byteOffset < 0) {
      if (dir)
        byteOffset = 0;
      else
        return -1;
    }
    if (typeof val === "string") {
      val = Buffer3.from(val, encoding);
    }
    if (Buffer3.isBuffer(val)) {
      if (val.length === 0) {
        return -1;
      }
      return arrayIndexOf(buffer2, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
      val = val & 255;
      if (typeof Uint8Array.prototype.indexOf === "function") {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer2, val, byteOffset);
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer2, val, byteOffset);
        }
      }
      return arrayIndexOf(buffer2, [val], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
  }
  function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    let indexSize = 1;
    let arrLength = arr.length;
    let valLength = val.length;
    if (encoding !== void 0) {
      encoding = String(encoding).toLowerCase();
      if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
        if (arr.length < 2 || val.length < 2) {
          return -1;
        }
        indexSize = 2;
        arrLength /= 2;
        valLength /= 2;
        byteOffset /= 2;
      }
    }
    function read(buf, i9) {
      if (indexSize === 1) {
        return buf[i9];
      } else {
        return buf.readUInt16BE(i9 * indexSize);
      }
    }
    let i8;
    if (dir) {
      let foundIndex = -1;
      for (i8 = byteOffset; i8 < arrLength; i8++) {
        if (read(arr, i8) === read(val, foundIndex === -1 ? 0 : i8 - foundIndex)) {
          if (foundIndex === -1)
            foundIndex = i8;
          if (i8 - foundIndex + 1 === valLength)
            return foundIndex * indexSize;
        } else {
          if (foundIndex !== -1)
            i8 -= i8 - foundIndex;
          foundIndex = -1;
        }
      }
    } else {
      if (byteOffset + valLength > arrLength)
        byteOffset = arrLength - valLength;
      for (i8 = byteOffset; i8 >= 0; i8--) {
        let found = true;
        for (let j4 = 0; j4 < valLength; j4++) {
          if (read(arr, i8 + j4) !== read(val, j4)) {
            found = false;
            break;
          }
        }
        if (found)
          return i8;
      }
    }
    return -1;
  }
  Buffer3.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
  };
  Buffer3.prototype.indexOf = function indexOf2(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
  };
  Buffer3.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
  };
  function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    const remaining = buf.length - offset;
    if (!length) {
      length = remaining;
    } else {
      length = Number(length);
      if (length > remaining) {
        length = remaining;
      }
    }
    const strLen = string.length;
    if (length > strLen / 2) {
      length = strLen / 2;
    }
    let i8;
    for (i8 = 0; i8 < length; ++i8) {
      const parsed = parseInt(string.substr(i8 * 2, 2), 16);
      if (numberIsNaN(parsed))
        return i8;
      buf[offset + i8] = parsed;
    }
    return i8;
  }
  function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
  }
  function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
  }
  function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
  }
  function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
  }
  Buffer3.prototype.write = function write(string, offset, length, encoding) {
    if (offset === void 0) {
      encoding = "utf8";
      length = this.length;
      offset = 0;
    } else if (length === void 0 && typeof offset === "string") {
      encoding = offset;
      length = this.length;
      offset = 0;
    } else if (isFinite(offset)) {
      offset = offset >>> 0;
      if (isFinite(length)) {
        length = length >>> 0;
        if (encoding === void 0)
          encoding = "utf8";
      } else {
        encoding = length;
        length = void 0;
      }
    } else {
      throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    }
    const remaining = this.length - offset;
    if (length === void 0 || length > remaining)
      length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
      throw new RangeError("Attempt to write outside buffer bounds");
    }
    if (!encoding)
      encoding = "utf8";
    let loweredCase = false;
    for (; ; ) {
      switch (encoding) {
        case "hex":
          return hexWrite(this, string, offset, length);
        case "utf8":
        case "utf-8":
          return utf8Write(this, string, offset, length);
        case "ascii":
        case "latin1":
        case "binary":
          return asciiWrite(this, string, offset, length);
        case "base64":
          return base64Write(this, string, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return ucs2Write(this, string, offset, length);
        default:
          if (loweredCase)
            throw new TypeError("Unknown encoding: " + encoding);
          encoding = ("" + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  };
  Buffer3.prototype.toJSON = function toJSON2() {
    return {
      type: "Buffer",
      data: Array.prototype.slice.call(this._arr || this, 0)
    };
  };
  function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) {
      return base64.fromByteArray(buf);
    } else {
      return base64.fromByteArray(buf.slice(start, end));
    }
  }
  function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    const res = [];
    let i8 = start;
    while (i8 < end) {
      const firstByte = buf[i8];
      let codePoint = null;
      let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
      if (i8 + bytesPerSequence <= end) {
        let secondByte, thirdByte, fourthByte, tempCodePoint;
        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 128) {
              codePoint = firstByte;
            }
            break;
          case 2:
            secondByte = buf[i8 + 1];
            if ((secondByte & 192) === 128) {
              tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
              if (tempCodePoint > 127) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 3:
            secondByte = buf[i8 + 1];
            thirdByte = buf[i8 + 2];
            if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
              tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
              if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 4:
            secondByte = buf[i8 + 1];
            thirdByte = buf[i8 + 2];
            fourthByte = buf[i8 + 3];
            if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
              tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
              if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                codePoint = tempCodePoint;
              }
            }
        }
      }
      if (codePoint === null) {
        codePoint = 65533;
        bytesPerSequence = 1;
      } else if (codePoint > 65535) {
        codePoint -= 65536;
        res.push(codePoint >>> 10 & 1023 | 55296);
        codePoint = 56320 | codePoint & 1023;
      }
      res.push(codePoint);
      i8 += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
  }
  const MAX_ARGUMENTS_LENGTH = 4096;
  function decodeCodePointsArray(codePoints) {
    const len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints);
    }
    let res = "";
    let i8 = 0;
    while (i8 < len) {
      res += String.fromCharCode.apply(String, codePoints.slice(i8, i8 += MAX_ARGUMENTS_LENGTH));
    }
    return res;
  }
  function asciiSlice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for (let i8 = start; i8 < end; ++i8) {
      ret += String.fromCharCode(buf[i8] & 127);
    }
    return ret;
  }
  function latin1Slice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for (let i8 = start; i8 < end; ++i8) {
      ret += String.fromCharCode(buf[i8]);
    }
    return ret;
  }
  function hexSlice(buf, start, end) {
    const len = buf.length;
    if (!start || start < 0)
      start = 0;
    if (!end || end < 0 || end > len)
      end = len;
    let out = "";
    for (let i8 = start; i8 < end; ++i8) {
      out += hexSliceLookupTable[buf[i8]];
    }
    return out;
  }
  function utf16leSlice(buf, start, end) {
    const bytes = buf.slice(start, end);
    let res = "";
    for (let i8 = 0; i8 < bytes.length - 1; i8 += 2) {
      res += String.fromCharCode(bytes[i8] + bytes[i8 + 1] * 256);
    }
    return res;
  }
  Buffer3.prototype.slice = function slice(start, end) {
    const len = this.length;
    start = ~~start;
    end = end === void 0 ? len : ~~end;
    if (start < 0) {
      start += len;
      if (start < 0)
        start = 0;
    } else if (start > len) {
      start = len;
    }
    if (end < 0) {
      end += len;
      if (end < 0)
        end = 0;
    } else if (end > len) {
      end = len;
    }
    if (end < start)
      end = start;
    const newBuf = this.subarray(start, end);
    Object.setPrototypeOf(newBuf, Buffer3.prototype);
    return newBuf;
  };
  function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0)
      throw new RangeError("offset is not uint");
    if (offset + ext > length)
      throw new RangeError("Trying to access beyond buffer length");
  }
  Buffer3.prototype.readUintLE = Buffer3.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
    offset = offset >>> 0;
    byteLength2 = byteLength2 >>> 0;
    if (!noAssert)
      checkOffset(offset, byteLength2, this.length);
    let val = this[offset];
    let mul = 1;
    let i8 = 0;
    while (++i8 < byteLength2 && (mul *= 256)) {
      val += this[offset + i8] * mul;
    }
    return val;
  };
  Buffer3.prototype.readUintBE = Buffer3.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
    offset = offset >>> 0;
    byteLength2 = byteLength2 >>> 0;
    if (!noAssert) {
      checkOffset(offset, byteLength2, this.length);
    }
    let val = this[offset + --byteLength2];
    let mul = 1;
    while (byteLength2 > 0 && (mul *= 256)) {
      val += this[offset + --byteLength2] * mul;
    }
    return val;
  };
  Buffer3.prototype.readUint8 = Buffer3.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 1, this.length);
    return this[offset];
  };
  Buffer3.prototype.readUint16LE = Buffer3.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
  };
  Buffer3.prototype.readUint16BE = Buffer3.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
  };
  Buffer3.prototype.readUint32LE = Buffer3.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
  };
  Buffer3.prototype.readUint32BE = Buffer3.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
  };
  Buffer3.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === void 0 || last === void 0) {
      boundsError(offset, this.length - 8);
    }
    const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
    const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
    return BigInt(lo) + (BigInt(hi) << BigInt(32));
  });
  Buffer3.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === void 0 || last === void 0) {
      boundsError(offset, this.length - 8);
    }
    const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
    const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
    return (BigInt(hi) << BigInt(32)) + BigInt(lo);
  });
  Buffer3.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
    offset = offset >>> 0;
    byteLength2 = byteLength2 >>> 0;
    if (!noAssert)
      checkOffset(offset, byteLength2, this.length);
    let val = this[offset];
    let mul = 1;
    let i8 = 0;
    while (++i8 < byteLength2 && (mul *= 256)) {
      val += this[offset + i8] * mul;
    }
    mul *= 128;
    if (val >= mul)
      val -= Math.pow(2, 8 * byteLength2);
    return val;
  };
  Buffer3.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
    offset = offset >>> 0;
    byteLength2 = byteLength2 >>> 0;
    if (!noAssert)
      checkOffset(offset, byteLength2, this.length);
    let i8 = byteLength2;
    let mul = 1;
    let val = this[offset + --i8];
    while (i8 > 0 && (mul *= 256)) {
      val += this[offset + --i8] * mul;
    }
    mul *= 128;
    if (val >= mul)
      val -= Math.pow(2, 8 * byteLength2);
    return val;
  };
  Buffer3.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 1, this.length);
    if (!(this[offset] & 128))
      return this[offset];
    return (255 - this[offset] + 1) * -1;
  };
  Buffer3.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 2, this.length);
    const val = this[offset] | this[offset + 1] << 8;
    return val & 32768 ? val | 4294901760 : val;
  };
  Buffer3.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 2, this.length);
    const val = this[offset + 1] | this[offset] << 8;
    return val & 32768 ? val | 4294901760 : val;
  };
  Buffer3.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
  };
  Buffer3.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
  };
  Buffer3.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === void 0 || last === void 0) {
      boundsError(offset, this.length - 8);
    }
    const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);
    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
  });
  Buffer3.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === void 0 || last === void 0) {
      boundsError(offset, this.length - 8);
    }
    const val = (first << 24) + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);
  });
  Buffer3.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
  };
  Buffer3.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
  };
  Buffer3.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
  };
  Buffer3.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert)
      checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
  };
  function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer3.isBuffer(buf))
      throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min)
      throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length)
      throw new RangeError("Index out of range");
  }
  Buffer3.prototype.writeUintLE = Buffer3.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength2 = byteLength2 >>> 0;
    if (!noAssert) {
      const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
      checkInt(this, value, offset, byteLength2, maxBytes, 0);
    }
    let mul = 1;
    let i8 = 0;
    this[offset] = value & 255;
    while (++i8 < byteLength2 && (mul *= 256)) {
      this[offset + i8] = value / mul & 255;
    }
    return offset + byteLength2;
  };
  Buffer3.prototype.writeUintBE = Buffer3.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength2 = byteLength2 >>> 0;
    if (!noAssert) {
      const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
      checkInt(this, value, offset, byteLength2, maxBytes, 0);
    }
    let i8 = byteLength2 - 1;
    let mul = 1;
    this[offset + i8] = value & 255;
    while (--i8 >= 0 && (mul *= 256)) {
      this[offset + i8] = value / mul & 255;
    }
    return offset + byteLength2;
  };
  Buffer3.prototype.writeUint8 = Buffer3.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value, offset, 1, 255, 0);
    this[offset] = value & 255;
    return offset + 1;
  };
  Buffer3.prototype.writeUint16LE = Buffer3.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value, offset, 2, 65535, 0);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    return offset + 2;
  };
  Buffer3.prototype.writeUint16BE = Buffer3.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value, offset, 2, 65535, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 255;
    return offset + 2;
  };
  Buffer3.prototype.writeUint32LE = Buffer3.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value, offset, 4, 4294967295, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 255;
    return offset + 4;
  };
  Buffer3.prototype.writeUint32BE = Buffer3.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value, offset, 4, 4294967295, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 255;
    return offset + 4;
  };
  function wrtBigUInt64LE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(4294967295));
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(4294967295));
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    return offset;
  }
  function wrtBigUInt64BE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(4294967295));
    buf[offset + 7] = lo;
    lo = lo >> 8;
    buf[offset + 6] = lo;
    lo = lo >> 8;
    buf[offset + 5] = lo;
    lo = lo >> 8;
    buf[offset + 4] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(4294967295));
    buf[offset + 3] = hi;
    hi = hi >> 8;
    buf[offset + 2] = hi;
    hi = hi >> 8;
    buf[offset + 1] = hi;
    hi = hi >> 8;
    buf[offset] = hi;
    return offset + 8;
  }
  Buffer3.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
  });
  Buffer3.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
  });
  Buffer3.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
      const limit = Math.pow(2, 8 * byteLength2 - 1);
      checkInt(this, value, offset, byteLength2, limit - 1, -limit);
    }
    let i8 = 0;
    let mul = 1;
    let sub = 0;
    this[offset] = value & 255;
    while (++i8 < byteLength2 && (mul *= 256)) {
      if (value < 0 && sub === 0 && this[offset + i8 - 1] !== 0) {
        sub = 1;
      }
      this[offset + i8] = (value / mul >> 0) - sub & 255;
    }
    return offset + byteLength2;
  };
  Buffer3.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
      const limit = Math.pow(2, 8 * byteLength2 - 1);
      checkInt(this, value, offset, byteLength2, limit - 1, -limit);
    }
    let i8 = byteLength2 - 1;
    let mul = 1;
    let sub = 0;
    this[offset + i8] = value & 255;
    while (--i8 >= 0 && (mul *= 256)) {
      if (value < 0 && sub === 0 && this[offset + i8 + 1] !== 0) {
        sub = 1;
      }
      this[offset + i8] = (value / mul >> 0) - sub & 255;
    }
    return offset + byteLength2;
  };
  Buffer3.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value, offset, 1, 127, -128);
    if (value < 0)
      value = 255 + value + 1;
    this[offset] = value & 255;
    return offset + 1;
  };
  Buffer3.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value, offset, 2, 32767, -32768);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    return offset + 2;
  };
  Buffer3.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value, offset, 2, 32767, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 255;
    return offset + 2;
  };
  Buffer3.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value, offset, 4, 2147483647, -2147483648);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
  };
  Buffer3.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert)
      checkInt(this, value, offset, 4, 2147483647, -2147483648);
    if (value < 0)
      value = 4294967295 + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 255;
    return offset + 4;
  };
  Buffer3.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
  });
  Buffer3.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
  });
  function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length)
      throw new RangeError("Index out of range");
    if (offset < 0)
      throw new RangeError("Index out of range");
  }
  function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4);
    }
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
  }
  Buffer3.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
  };
  Buffer3.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
  };
  function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8);
    }
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
  }
  Buffer3.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
  };
  Buffer3.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
  };
  Buffer3.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer3.isBuffer(target))
      throw new TypeError("argument should be a Buffer");
    if (!start)
      start = 0;
    if (!end && end !== 0)
      end = this.length;
    if (targetStart >= target.length)
      targetStart = target.length;
    if (!targetStart)
      targetStart = 0;
    if (end > 0 && end < start)
      end = start;
    if (end === start)
      return 0;
    if (target.length === 0 || this.length === 0)
      return 0;
    if (targetStart < 0) {
      throw new RangeError("targetStart out of bounds");
    }
    if (start < 0 || start >= this.length)
      throw new RangeError("Index out of range");
    if (end < 0)
      throw new RangeError("sourceEnd out of bounds");
    if (end > this.length)
      end = this.length;
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start;
    }
    const len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
      this.copyWithin(targetStart, start, end);
    } else {
      Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    }
    return len;
  };
  Buffer3.prototype.fill = function fill(val, start, end, encoding) {
    if (typeof val === "string") {
      if (typeof start === "string") {
        encoding = start;
        start = 0;
        end = this.length;
      } else if (typeof end === "string") {
        encoding = end;
        end = this.length;
      }
      if (encoding !== void 0 && typeof encoding !== "string") {
        throw new TypeError("encoding must be a string");
      }
      if (typeof encoding === "string" && !Buffer3.isEncoding(encoding)) {
        throw new TypeError("Unknown encoding: " + encoding);
      }
      if (val.length === 1) {
        const code = val.charCodeAt(0);
        if (encoding === "utf8" && code < 128 || encoding === "latin1") {
          val = code;
        }
      }
    } else if (typeof val === "number") {
      val = val & 255;
    } else if (typeof val === "boolean") {
      val = Number(val);
    }
    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError("Out of range index");
    }
    if (end <= start) {
      return this;
    }
    start = start >>> 0;
    end = end === void 0 ? this.length : end >>> 0;
    if (!val)
      val = 0;
    let i8;
    if (typeof val === "number") {
      for (i8 = start; i8 < end; ++i8) {
        this[i8] = val;
      }
    } else {
      const bytes = Buffer3.isBuffer(val) ? val : Buffer3.from(val, encoding);
      const len = bytes.length;
      if (len === 0) {
        throw new TypeError('The value "' + val + '" is invalid for argument "value"');
      }
      for (i8 = 0; i8 < end - start; ++i8) {
        this[i8 + start] = bytes[i8 % len];
      }
    }
    return this;
  };
  const errors = {};
  function E4(sym, getMessage, Base) {
    errors[sym] = class NodeError extends Base {
      constructor() {
        super();
        Object.defineProperty(this, "message", {
          value: getMessage.apply(this, arguments),
          writable: true,
          configurable: true
        });
        this.name = `${this.name} [${sym}]`;
        this.stack;
        delete this.name;
      }
      get code() {
        return sym;
      }
      set code(value) {
        Object.defineProperty(this, "code", {
          configurable: true,
          enumerable: true,
          value,
          writable: true
        });
      }
      toString() {
        return `${this.name} [${sym}]: ${this.message}`;
      }
    };
  }
  E4("ERR_BUFFER_OUT_OF_BOUNDS", function(name2) {
    if (name2) {
      return `${name2} is outside of buffer bounds`;
    }
    return "Attempt to access memory outside buffer bounds";
  }, RangeError);
  E4("ERR_INVALID_ARG_TYPE", function(name2, actual) {
    return `The "${name2}" argument must be of type number. Received type ${typeof actual}`;
  }, TypeError);
  E4("ERR_OUT_OF_RANGE", function(str, range, input) {
    let msg = `The value of "${str}" is out of range.`;
    let received = input;
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
      received = addNumericalSeparator(String(input));
    } else if (typeof input === "bigint") {
      received = String(input);
      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
        received = addNumericalSeparator(received);
      }
      received += "n";
    }
    msg += ` It must be ${range}. Received ${received}`;
    return msg;
  }, RangeError);
  function addNumericalSeparator(val) {
    let res = "";
    let i8 = val.length;
    const start = val[0] === "-" ? 1 : 0;
    for (; i8 >= start + 4; i8 -= 3) {
      res = `_${val.slice(i8 - 3, i8)}${res}`;
    }
    return `${val.slice(0, i8)}${res}`;
  }
  function checkBounds(buf, offset, byteLength2) {
    validateNumber(offset, "offset");
    if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {
      boundsError(offset, buf.length - (byteLength2 + 1));
    }
  }
  function checkIntBI(value, min, max, buf, offset, byteLength2) {
    if (value > max || value < min) {
      const n9 = typeof min === "bigint" ? "n" : "";
      let range;
      if (byteLength2 > 3) {
        if (min === 0 || min === BigInt(0)) {
          range = `>= 0${n9} and < 2${n9} ** ${(byteLength2 + 1) * 8}${n9}`;
        } else {
          range = `>= -(2${n9} ** ${(byteLength2 + 1) * 8 - 1}${n9}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n9}`;
        }
      } else {
        range = `>= ${min}${n9} and <= ${max}${n9}`;
      }
      throw new errors.ERR_OUT_OF_RANGE("value", range, value);
    }
    checkBounds(buf, offset, byteLength2);
  }
  function validateNumber(value, name2) {
    if (typeof value !== "number") {
      throw new errors.ERR_INVALID_ARG_TYPE(name2, "number", value);
    }
  }
  function boundsError(value, length, type) {
    if (Math.floor(value) !== value) {
      validateNumber(value, type);
      throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
    }
    if (length < 0) {
      throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
    }
    throw new errors.ERR_OUT_OF_RANGE(type || "offset", `>= ${type ? 1 : 0} and <= ${length}`, value);
  }
  const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
  function base64clean(str) {
    str = str.split("=")[0];
    str = str.trim().replace(INVALID_BASE64_RE, "");
    if (str.length < 2)
      return "";
    while (str.length % 4 !== 0) {
      str = str + "=";
    }
    return str;
  }
  function utf8ToBytes(string, units) {
    units = units || Infinity;
    let codePoint;
    const length = string.length;
    let leadSurrogate = null;
    const bytes = [];
    for (let i8 = 0; i8 < length; ++i8) {
      codePoint = string.charCodeAt(i8);
      if (codePoint > 55295 && codePoint < 57344) {
        if (!leadSurrogate) {
          if (codePoint > 56319) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
            continue;
          } else if (i8 + 1 === length) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
            continue;
          }
          leadSurrogate = codePoint;
          continue;
        }
        if (codePoint < 56320) {
          if ((units -= 3) > -1)
            bytes.push(239, 191, 189);
          leadSurrogate = codePoint;
          continue;
        }
        codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
      } else if (leadSurrogate) {
        if ((units -= 3) > -1)
          bytes.push(239, 191, 189);
      }
      leadSurrogate = null;
      if (codePoint < 128) {
        if ((units -= 1) < 0)
          break;
        bytes.push(codePoint);
      } else if (codePoint < 2048) {
        if ((units -= 2) < 0)
          break;
        bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
      } else if (codePoint < 65536) {
        if ((units -= 3) < 0)
          break;
        bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
      } else if (codePoint < 1114112) {
        if ((units -= 4) < 0)
          break;
        bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
      } else {
        throw new Error("Invalid code point");
      }
    }
    return bytes;
  }
  function asciiToBytes(str) {
    const byteArray = [];
    for (let i8 = 0; i8 < str.length; ++i8) {
      byteArray.push(str.charCodeAt(i8) & 255);
    }
    return byteArray;
  }
  function utf16leToBytes(str, units) {
    let c8, hi, lo;
    const byteArray = [];
    for (let i8 = 0; i8 < str.length; ++i8) {
      if ((units -= 2) < 0)
        break;
      c8 = str.charCodeAt(i8);
      hi = c8 >> 8;
      lo = c8 % 256;
      byteArray.push(lo);
      byteArray.push(hi);
    }
    return byteArray;
  }
  function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
  }
  function blitBuffer(src, dst, offset, length) {
    let i8;
    for (i8 = 0; i8 < length; ++i8) {
      if (i8 + offset >= dst.length || i8 >= src.length)
        break;
      dst[i8 + offset] = src[i8];
    }
    return i8;
  }
  function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
  }
  function numberIsNaN(obj) {
    return obj !== obj;
  }
  const hexSliceLookupTable = function() {
    const alphabet = "0123456789abcdef";
    const table = new Array(256);
    for (let i8 = 0; i8 < 16; ++i8) {
      const i16 = i8 * 16;
      for (let j4 = 0; j4 < 16; ++j4) {
        table[i16 + j4] = alphabet[i8] + alphabet[j4];
      }
    }
    return table;
  }();
  function defineBigIntMethod(fn) {
    return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
  }
  function BufferBigIntNotDefined() {
    throw new Error("BigInt not supported");
  }
  return exports$g;
}
function dew$f() {
  if (_dewExec$f)
    return exports$f;
  _dewExec$f = true;
  if (typeof Object.create === "function") {
    exports$f = function inherits4(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      }
    };
  } else {
    exports$f = function inherits4(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
    };
  }
  return exports$f;
}
function dew$e() {
  if (_dewExec$e)
    return exports$e;
  _dewExec$e = true;
  exports$e = y.EventEmitter;
  return exports$e;
}
function dew$d() {
  if (_dewExec$d)
    return exports$d;
  _dewExec$d = true;
  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread(target) {
    for (var i8 = 1; i8 < arguments.length; i8++) {
      var source = arguments[i8] != null ? arguments[i8] : {};
      if (i8 % 2) {
        ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties(target, props) {
    for (var i8 = 0; i8 < props.length; i8++) {
      var descriptor = props[i8];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties(Constructor, staticProps);
    return Constructor;
  }
  var _require = buffer, Buffer3 = _require.Buffer;
  var _require2 = X, inspect3 = _require2.inspect;
  var custom2 = inspect3 && inspect3.custom || "inspect";
  function copyBuffer(src, target, offset) {
    Buffer3.prototype.copy.call(src, target, offset);
  }
  exports$d = /* @__PURE__ */ function() {
    function BufferList() {
      _classCallCheck(this, BufferList);
      this.head = null;
      this.tail = null;
      this.length = 0;
    }
    _createClass(BufferList, [{
      key: "push",
      value: function push(v6) {
        var entry = {
          data: v6,
          next: null
        };
        if (this.length > 0)
          this.tail.next = entry;
        else
          this.head = entry;
        this.tail = entry;
        ++this.length;
      }
    }, {
      key: "unshift",
      value: function unshift(v6) {
        var entry = {
          data: v6,
          next: this.head
        };
        if (this.length === 0)
          this.tail = entry;
        this.head = entry;
        ++this.length;
      }
    }, {
      key: "shift",
      value: function shift() {
        if (this.length === 0)
          return;
        var ret = this.head.data;
        if (this.length === 1)
          this.head = this.tail = null;
        else
          this.head = this.head.next;
        --this.length;
        return ret;
      }
    }, {
      key: "clear",
      value: function clear() {
        this.head = this.tail = null;
        this.length = 0;
      }
    }, {
      key: "join",
      value: function join(s7) {
        if (this.length === 0)
          return "";
        var p8 = this.head;
        var ret = "" + p8.data;
        while (p8 = p8.next) {
          ret += s7 + p8.data;
        }
        return ret;
      }
    }, {
      key: "concat",
      value: function concat(n9) {
        if (this.length === 0)
          return Buffer3.alloc(0);
        var ret = Buffer3.allocUnsafe(n9 >>> 0);
        var p8 = this.head;
        var i8 = 0;
        while (p8) {
          copyBuffer(p8.data, ret, i8);
          i8 += p8.data.length;
          p8 = p8.next;
        }
        return ret;
      }
    }, {
      key: "consume",
      value: function consume(n9, hasStrings) {
        var ret;
        if (n9 < this.head.data.length) {
          ret = this.head.data.slice(0, n9);
          this.head.data = this.head.data.slice(n9);
        } else if (n9 === this.head.data.length) {
          ret = this.shift();
        } else {
          ret = hasStrings ? this._getString(n9) : this._getBuffer(n9);
        }
        return ret;
      }
    }, {
      key: "first",
      value: function first() {
        return this.head.data;
      }
    }, {
      key: "_getString",
      value: function _getString(n9) {
        var p8 = this.head;
        var c8 = 1;
        var ret = p8.data;
        n9 -= ret.length;
        while (p8 = p8.next) {
          var str = p8.data;
          var nb = n9 > str.length ? str.length : n9;
          if (nb === str.length)
            ret += str;
          else
            ret += str.slice(0, n9);
          n9 -= nb;
          if (n9 === 0) {
            if (nb === str.length) {
              ++c8;
              if (p8.next)
                this.head = p8.next;
              else
                this.head = this.tail = null;
            } else {
              this.head = p8;
              p8.data = str.slice(nb);
            }
            break;
          }
          ++c8;
        }
        this.length -= c8;
        return ret;
      }
    }, {
      key: "_getBuffer",
      value: function _getBuffer(n9) {
        var ret = Buffer3.allocUnsafe(n9);
        var p8 = this.head;
        var c8 = 1;
        p8.data.copy(ret);
        n9 -= p8.data.length;
        while (p8 = p8.next) {
          var buf = p8.data;
          var nb = n9 > buf.length ? buf.length : n9;
          buf.copy(ret, ret.length - n9, 0, nb);
          n9 -= nb;
          if (n9 === 0) {
            if (nb === buf.length) {
              ++c8;
              if (p8.next)
                this.head = p8.next;
              else
                this.head = this.tail = null;
            } else {
              this.head = p8;
              p8.data = buf.slice(nb);
            }
            break;
          }
          ++c8;
        }
        this.length -= c8;
        return ret;
      }
    }, {
      key: custom2,
      value: function value(_4, options) {
        return inspect3(this, _objectSpread({}, options, {
          depth: 0,
          customInspect: false
        }));
      }
    }]);
    return BufferList;
  }();
  return exports$d;
}
function dew$c() {
  if (_dewExec$c)
    return exports$c;
  _dewExec$c = true;
  var process$1 = process2;
  function destroy(err, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
      if (cb) {
        cb(err);
      } else if (err) {
        if (!this._writableState) {
          process$1.nextTick(emitErrorNT, this, err);
        } else if (!this._writableState.errorEmitted) {
          this._writableState.errorEmitted = true;
          process$1.nextTick(emitErrorNT, this, err);
        }
      }
      return this;
    }
    if (this._readableState) {
      this._readableState.destroyed = true;
    }
    if (this._writableState) {
      this._writableState.destroyed = true;
    }
    this._destroy(err || null, function(err2) {
      if (!cb && err2) {
        if (!_this._writableState) {
          process$1.nextTick(emitErrorAndCloseNT, _this, err2);
        } else if (!_this._writableState.errorEmitted) {
          _this._writableState.errorEmitted = true;
          process$1.nextTick(emitErrorAndCloseNT, _this, err2);
        } else {
          process$1.nextTick(emitCloseNT, _this);
        }
      } else if (cb) {
        process$1.nextTick(emitCloseNT, _this);
        cb(err2);
      } else {
        process$1.nextTick(emitCloseNT, _this);
      }
    });
    return this;
  }
  function emitErrorAndCloseNT(self2, err) {
    emitErrorNT(self2, err);
    emitCloseNT(self2);
  }
  function emitCloseNT(self2) {
    if (self2._writableState && !self2._writableState.emitClose)
      return;
    if (self2._readableState && !self2._readableState.emitClose)
      return;
    self2.emit("close");
  }
  function undestroy() {
    if (this._readableState) {
      this._readableState.destroyed = false;
      this._readableState.reading = false;
      this._readableState.ended = false;
      this._readableState.endEmitted = false;
    }
    if (this._writableState) {
      this._writableState.destroyed = false;
      this._writableState.ended = false;
      this._writableState.ending = false;
      this._writableState.finalCalled = false;
      this._writableState.prefinished = false;
      this._writableState.finished = false;
      this._writableState.errorEmitted = false;
    }
  }
  function emitErrorNT(self2, err) {
    self2.emit("error", err);
  }
  function errorOrDestroy(stream2, err) {
    var rState = stream2._readableState;
    var wState = stream2._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy)
      stream2.destroy(err);
    else
      stream2.emit("error", err);
  }
  exports$c = {
    destroy,
    undestroy,
    errorOrDestroy
  };
  return exports$c;
}
function dew$b() {
  if (_dewExec$b)
    return exports$b;
  _dewExec$b = true;
  const codes = {};
  function createErrorType(code, message, Base) {
    if (!Base) {
      Base = Error;
    }
    function getMessage(arg1, arg2, arg3) {
      if (typeof message === "string") {
        return message;
      } else {
        return message(arg1, arg2, arg3);
      }
    }
    class NodeError extends Base {
      constructor(arg1, arg2, arg3) {
        super(getMessage(arg1, arg2, arg3));
      }
    }
    NodeError.prototype.name = Base.name;
    NodeError.prototype.code = code;
    codes[code] = NodeError;
  }
  function oneOf(expected, thing) {
    if (Array.isArray(expected)) {
      const len = expected.length;
      expected = expected.map((i8) => String(i8));
      if (len > 2) {
        return `one of ${thing} ${expected.slice(0, len - 1).join(", ")}, or ` + expected[len - 1];
      } else if (len === 2) {
        return `one of ${thing} ${expected[0]} or ${expected[1]}`;
      } else {
        return `of ${thing} ${expected[0]}`;
      }
    } else {
      return `of ${thing} ${String(expected)}`;
    }
  }
  function startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
  }
  function endsWith2(str, search, this_len) {
    if (this_len === void 0 || this_len > str.length) {
      this_len = str.length;
    }
    return str.substring(this_len - search.length, this_len) === search;
  }
  function includes(str, search, start) {
    if (typeof start !== "number") {
      start = 0;
    }
    if (start + search.length > str.length) {
      return false;
    } else {
      return str.indexOf(search, start) !== -1;
    }
  }
  createErrorType("ERR_INVALID_OPT_VALUE", function(name2, value) {
    return 'The value "' + value + '" is invalid for option "' + name2 + '"';
  }, TypeError);
  createErrorType("ERR_INVALID_ARG_TYPE", function(name2, expected, actual) {
    let determiner;
    if (typeof expected === "string" && startsWith(expected, "not ")) {
      determiner = "must not be";
      expected = expected.replace(/^not /, "");
    } else {
      determiner = "must be";
    }
    let msg;
    if (endsWith2(name2, " argument")) {
      msg = `The ${name2} ${determiner} ${oneOf(expected, "type")}`;
    } else {
      const type = includes(name2, ".") ? "property" : "argument";
      msg = `The "${name2}" ${type} ${determiner} ${oneOf(expected, "type")}`;
    }
    msg += `. Received type ${typeof actual}`;
    return msg;
  }, TypeError);
  createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
  createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name2) {
    return "The " + name2 + " method is not implemented";
  });
  createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
  createErrorType("ERR_STREAM_DESTROYED", function(name2) {
    return "Cannot call " + name2 + " after a stream was destroyed";
  });
  createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
  createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
  createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
  createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
  createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
    return "Unknown encoding: " + arg;
  }, TypeError);
  createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
  exports$b.codes = codes;
  return exports$b;
}
function dew$a() {
  if (_dewExec$a)
    return exports$a;
  _dewExec$a = true;
  var ERR_INVALID_OPT_VALUE = dew$b().codes.ERR_INVALID_OPT_VALUE;
  function highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
  }
  function getHighWaterMark(state, options, duplexKey, isDuplex) {
    var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
    if (hwm != null) {
      if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
        var name2 = isDuplex ? duplexKey : "highWaterMark";
        throw new ERR_INVALID_OPT_VALUE(name2, hwm);
      }
      return Math.floor(hwm);
    }
    return state.objectMode ? 16 : 16 * 1024;
  }
  exports$a = {
    getHighWaterMark
  };
  return exports$a;
}
function dew$9() {
  if (_dewExec$9)
    return exports$9;
  _dewExec$9 = true;
  exports$9 = deprecate3;
  function deprecate3(fn, msg) {
    if (config2("noDeprecation")) {
      return fn;
    }
    var warned = false;
    function deprecated() {
      if (!warned) {
        if (config2("throwDeprecation")) {
          throw new Error(msg);
        } else if (config2("traceDeprecation")) {
          console.trace(msg);
        } else {
          console.warn(msg);
        }
        warned = true;
      }
      return fn.apply(this || _global$2, arguments);
    }
    return deprecated;
  }
  function config2(name2) {
    try {
      if (!_global$2.localStorage)
        return false;
    } catch (_4) {
      return false;
    }
    var val = _global$2.localStorage[name2];
    if (null == val)
      return false;
    return String(val).toLowerCase() === "true";
  }
  return exports$9;
}
function dew$8() {
  if (_dewExec$8)
    return exports$8;
  _dewExec$8 = true;
  var process$1 = process2;
  exports$8 = Writable2;
  function CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
      onCorkedFinish(_this, state);
    };
  }
  var Duplex2;
  Writable2.WritableState = WritableState;
  var internalUtil = {
    deprecate: dew$9()
  };
  var Stream2 = dew$e();
  var Buffer3 = buffer.Buffer;
  var OurUint8Array = _global$1.Uint8Array || function() {
  };
  function _uint8ArrayToBuffer(chunk) {
    return Buffer3.from(chunk);
  }
  function _isUint8Array(obj) {
    return Buffer3.isBuffer(obj) || obj instanceof OurUint8Array;
  }
  var destroyImpl = dew$c();
  var _require = dew$a(), getHighWaterMark = _require.getHighWaterMark;
  var _require$codes = dew$b().codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED, ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES, ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END, ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
  var errorOrDestroy = destroyImpl.errorOrDestroy;
  dew$f()(Writable2, Stream2);
  function nop() {
  }
  function WritableState(options, stream2, isDuplex) {
    Duplex2 = Duplex2 || dew$7();
    options = options || {};
    if (typeof isDuplex !== "boolean")
      isDuplex = stream2 instanceof Duplex2;
    this.objectMode = !!options.objectMode;
    if (isDuplex)
      this.objectMode = this.objectMode || !!options.writableObjectMode;
    this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
    this.finalCalled = false;
    this.needDrain = false;
    this.ending = false;
    this.ended = false;
    this.finished = false;
    this.destroyed = false;
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;
    this.defaultEncoding = options.defaultEncoding || "utf8";
    this.length = 0;
    this.writing = false;
    this.corked = 0;
    this.sync = true;
    this.bufferProcessing = false;
    this.onwrite = function(er) {
      onwrite(stream2, er);
    };
    this.writecb = null;
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null;
    this.pendingcb = 0;
    this.prefinished = false;
    this.errorEmitted = false;
    this.emitClose = options.emitClose !== false;
    this.autoDestroy = !!options.autoDestroy;
    this.bufferedRequestCount = 0;
    this.corkedRequestsFree = new CorkedRequest(this);
  }
  WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while (current) {
      out.push(current);
      current = current.next;
    }
    return out;
  };
  (function() {
    try {
      Object.defineProperty(WritableState.prototype, "buffer", {
        get: internalUtil.deprecate(function writableStateBufferGetter() {
          return this.getBuffer();
        }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
      });
    } catch (_4) {
    }
  })();
  var realHasInstance;
  if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
    realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty(Writable2, Symbol.hasInstance, {
      value: function value(object) {
        if (realHasInstance.call(this, object))
          return true;
        if (this !== Writable2)
          return false;
        return object && object._writableState instanceof WritableState;
      }
    });
  } else {
    realHasInstance = function realHasInstance2(object) {
      return object instanceof this;
    };
  }
  function Writable2(options) {
    Duplex2 = Duplex2 || dew$7();
    var isDuplex = this instanceof Duplex2;
    if (!isDuplex && !realHasInstance.call(Writable2, this))
      return new Writable2(options);
    this._writableState = new WritableState(options, this, isDuplex);
    this.writable = true;
    if (options) {
      if (typeof options.write === "function")
        this._write = options.write;
      if (typeof options.writev === "function")
        this._writev = options.writev;
      if (typeof options.destroy === "function")
        this._destroy = options.destroy;
      if (typeof options.final === "function")
        this._final = options.final;
    }
    Stream2.call(this);
  }
  Writable2.prototype.pipe = function() {
    errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
  };
  function writeAfterEnd(stream2, cb) {
    var er = new ERR_STREAM_WRITE_AFTER_END();
    errorOrDestroy(stream2, er);
    process$1.nextTick(cb, er);
  }
  function validChunk(stream2, state, chunk, cb) {
    var er;
    if (chunk === null) {
      er = new ERR_STREAM_NULL_VALUES();
    } else if (typeof chunk !== "string" && !state.objectMode) {
      er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer"], chunk);
    }
    if (er) {
      errorOrDestroy(stream2, er);
      process$1.nextTick(cb, er);
      return false;
    }
    return true;
  }
  Writable2.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && _isUint8Array(chunk);
    if (isBuf && !Buffer3.isBuffer(chunk)) {
      chunk = _uint8ArrayToBuffer(chunk);
    }
    if (typeof encoding === "function") {
      cb = encoding;
      encoding = null;
    }
    if (isBuf)
      encoding = "buffer";
    else if (!encoding)
      encoding = state.defaultEncoding;
    if (typeof cb !== "function")
      cb = nop;
    if (state.ending)
      writeAfterEnd(this, cb);
    else if (isBuf || validChunk(this, state, chunk, cb)) {
      state.pendingcb++;
      ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
  };
  Writable2.prototype.cork = function() {
    this._writableState.corked++;
  };
  Writable2.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
      state.corked--;
      if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest)
        clearBuffer(this, state);
    }
  };
  Writable2.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    if (typeof encoding === "string")
      encoding = encoding.toLowerCase();
    if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1))
      throw new ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
  };
  Object.defineProperty(Writable2.prototype, "writableBuffer", {
    enumerable: false,
    get: function get3() {
      return this._writableState && this._writableState.getBuffer();
    }
  });
  function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
      chunk = Buffer3.from(chunk, encoding);
    }
    return chunk;
  }
  Object.defineProperty(Writable2.prototype, "writableHighWaterMark", {
    enumerable: false,
    get: function get3() {
      return this._writableState.highWaterMark;
    }
  });
  function writeOrBuffer(stream2, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
      var newChunk = decodeChunk(state, chunk, encoding);
      if (chunk !== newChunk) {
        isBuf = true;
        encoding = "buffer";
        chunk = newChunk;
      }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark;
    if (!ret)
      state.needDrain = true;
    if (state.writing || state.corked) {
      var last = state.lastBufferedRequest;
      state.lastBufferedRequest = {
        chunk,
        encoding,
        isBuf,
        callback: cb,
        next: null
      };
      if (last) {
        last.next = state.lastBufferedRequest;
      } else {
        state.bufferedRequest = state.lastBufferedRequest;
      }
      state.bufferedRequestCount += 1;
    } else {
      doWrite(stream2, state, false, len, chunk, encoding, cb);
    }
    return ret;
  }
  function doWrite(stream2, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed)
      state.onwrite(new ERR_STREAM_DESTROYED("write"));
    else if (writev)
      stream2._writev(chunk, state.onwrite);
    else
      stream2._write(chunk, encoding, state.onwrite);
    state.sync = false;
  }
  function onwriteError(stream2, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
      process$1.nextTick(cb, er);
      process$1.nextTick(finishMaybe, stream2, state);
      stream2._writableState.errorEmitted = true;
      errorOrDestroy(stream2, er);
    } else {
      cb(er);
      stream2._writableState.errorEmitted = true;
      errorOrDestroy(stream2, er);
      finishMaybe(stream2, state);
    }
  }
  function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
  }
  function onwrite(stream2, er) {
    var state = stream2._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== "function")
      throw new ERR_MULTIPLE_CALLBACK();
    onwriteStateUpdate(state);
    if (er)
      onwriteError(stream2, state, sync, er, cb);
    else {
      var finished2 = needFinish(state) || stream2.destroyed;
      if (!finished2 && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
        clearBuffer(stream2, state);
      }
      if (sync) {
        process$1.nextTick(afterWrite, stream2, state, finished2, cb);
      } else {
        afterWrite(stream2, state, finished2, cb);
      }
    }
  }
  function afterWrite(stream2, state, finished2, cb) {
    if (!finished2)
      onwriteDrain(stream2, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream2, state);
  }
  function onwriteDrain(stream2, state) {
    if (state.length === 0 && state.needDrain) {
      state.needDrain = false;
      stream2.emit("drain");
    }
  }
  function clearBuffer(stream2, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream2._writev && entry && entry.next) {
      var l8 = state.bufferedRequestCount;
      var buffer2 = new Array(l8);
      var holder = state.corkedRequestsFree;
      holder.entry = entry;
      var count = 0;
      var allBuffers = true;
      while (entry) {
        buffer2[count] = entry;
        if (!entry.isBuf)
          allBuffers = false;
        entry = entry.next;
        count += 1;
      }
      buffer2.allBuffers = allBuffers;
      doWrite(stream2, state, true, state.length, buffer2, "", holder.finish);
      state.pendingcb++;
      state.lastBufferedRequest = null;
      if (holder.next) {
        state.corkedRequestsFree = holder.next;
        holder.next = null;
      } else {
        state.corkedRequestsFree = new CorkedRequest(state);
      }
      state.bufferedRequestCount = 0;
    } else {
      while (entry) {
        var chunk = entry.chunk;
        var encoding = entry.encoding;
        var cb = entry.callback;
        var len = state.objectMode ? 1 : chunk.length;
        doWrite(stream2, state, false, len, chunk, encoding, cb);
        entry = entry.next;
        state.bufferedRequestCount--;
        if (state.writing) {
          break;
        }
      }
      if (entry === null)
        state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
  }
  Writable2.prototype._write = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
  };
  Writable2.prototype._writev = null;
  Writable2.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === "function") {
      cb = chunk;
      chunk = null;
      encoding = null;
    } else if (typeof encoding === "function") {
      cb = encoding;
      encoding = null;
    }
    if (chunk !== null && chunk !== void 0)
      this.write(chunk, encoding);
    if (state.corked) {
      state.corked = 1;
      this.uncork();
    }
    if (!state.ending)
      endWritable(this, state, cb);
    return this;
  };
  Object.defineProperty(Writable2.prototype, "writableLength", {
    enumerable: false,
    get: function get3() {
      return this._writableState.length;
    }
  });
  function needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
  }
  function callFinal(stream2, state) {
    stream2._final(function(err) {
      state.pendingcb--;
      if (err) {
        errorOrDestroy(stream2, err);
      }
      state.prefinished = true;
      stream2.emit("prefinish");
      finishMaybe(stream2, state);
    });
  }
  function prefinish(stream2, state) {
    if (!state.prefinished && !state.finalCalled) {
      if (typeof stream2._final === "function" && !state.destroyed) {
        state.pendingcb++;
        state.finalCalled = true;
        process$1.nextTick(callFinal, stream2, state);
      } else {
        state.prefinished = true;
        stream2.emit("prefinish");
      }
    }
  }
  function finishMaybe(stream2, state) {
    var need = needFinish(state);
    if (need) {
      prefinish(stream2, state);
      if (state.pendingcb === 0) {
        state.finished = true;
        stream2.emit("finish");
        if (state.autoDestroy) {
          var rState = stream2._readableState;
          if (!rState || rState.autoDestroy && rState.endEmitted) {
            stream2.destroy();
          }
        }
      }
    }
    return need;
  }
  function endWritable(stream2, state, cb) {
    state.ending = true;
    finishMaybe(stream2, state);
    if (cb) {
      if (state.finished)
        process$1.nextTick(cb);
      else
        stream2.once("finish", cb);
    }
    state.ended = true;
    stream2.writable = false;
  }
  function onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while (entry) {
      var cb = entry.callback;
      state.pendingcb--;
      cb(err);
      entry = entry.next;
    }
    state.corkedRequestsFree.next = corkReq;
  }
  Object.defineProperty(Writable2.prototype, "destroyed", {
    enumerable: false,
    get: function get3() {
      if (this._writableState === void 0) {
        return false;
      }
      return this._writableState.destroyed;
    },
    set: function set(value) {
      if (!this._writableState) {
        return;
      }
      this._writableState.destroyed = value;
    }
  });
  Writable2.prototype.destroy = destroyImpl.destroy;
  Writable2.prototype._undestroy = destroyImpl.undestroy;
  Writable2.prototype._destroy = function(err, cb) {
    cb(err);
  };
  return exports$8;
}
function dew$7() {
  if (_dewExec$7)
    return exports$7;
  _dewExec$7 = true;
  var process$1 = process2;
  var objectKeys = Object.keys || function(obj) {
    var keys2 = [];
    for (var key in obj) {
      keys2.push(key);
    }
    return keys2;
  };
  exports$7 = Duplex2;
  var Readable2 = dew$3();
  var Writable2 = dew$8();
  dew$f()(Duplex2, Readable2);
  {
    var keys = objectKeys(Writable2.prototype);
    for (var v6 = 0; v6 < keys.length; v6++) {
      var method = keys[v6];
      if (!Duplex2.prototype[method])
        Duplex2.prototype[method] = Writable2.prototype[method];
    }
  }
  function Duplex2(options) {
    if (!(this instanceof Duplex2))
      return new Duplex2(options);
    Readable2.call(this, options);
    Writable2.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
      if (options.readable === false)
        this.readable = false;
      if (options.writable === false)
        this.writable = false;
      if (options.allowHalfOpen === false) {
        this.allowHalfOpen = false;
        this.once("end", onend);
      }
    }
  }
  Object.defineProperty(Duplex2.prototype, "writableHighWaterMark", {
    enumerable: false,
    get: function get3() {
      return this._writableState.highWaterMark;
    }
  });
  Object.defineProperty(Duplex2.prototype, "writableBuffer", {
    enumerable: false,
    get: function get3() {
      return this._writableState && this._writableState.getBuffer();
    }
  });
  Object.defineProperty(Duplex2.prototype, "writableLength", {
    enumerable: false,
    get: function get3() {
      return this._writableState.length;
    }
  });
  function onend() {
    if (this._writableState.ended)
      return;
    process$1.nextTick(onEndNT, this);
  }
  function onEndNT(self2) {
    self2.end();
  }
  Object.defineProperty(Duplex2.prototype, "destroyed", {
    enumerable: false,
    get: function get3() {
      if (this._readableState === void 0 || this._writableState === void 0) {
        return false;
      }
      return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
      if (this._readableState === void 0 || this._writableState === void 0) {
        return;
      }
      this._readableState.destroyed = value;
      this._writableState.destroyed = value;
    }
  });
  return exports$7;
}
function dew$6() {
  if (_dewExec$6)
    return exports$6;
  _dewExec$6 = true;
  var ERR_STREAM_PREMATURE_CLOSE = dew$b().codes.ERR_STREAM_PREMATURE_CLOSE;
  function once3(callback) {
    var called = false;
    return function() {
      if (called)
        return;
      called = true;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      callback.apply(this, args);
    };
  }
  function noop3() {
  }
  function isRequest(stream2) {
    return stream2.setHeader && typeof stream2.abort === "function";
  }
  function eos(stream2, opts, callback) {
    if (typeof opts === "function")
      return eos(stream2, null, opts);
    if (!opts)
      opts = {};
    callback = once3(callback || noop3);
    var readable = opts.readable || opts.readable !== false && stream2.readable;
    var writable = opts.writable || opts.writable !== false && stream2.writable;
    var onlegacyfinish = function onlegacyfinish2() {
      if (!stream2.writable)
        onfinish();
    };
    var writableEnded = stream2._writableState && stream2._writableState.finished;
    var onfinish = function onfinish2() {
      writable = false;
      writableEnded = true;
      if (!readable)
        callback.call(stream2);
    };
    var readableEnded = stream2._readableState && stream2._readableState.endEmitted;
    var onend = function onend2() {
      readable = false;
      readableEnded = true;
      if (!writable)
        callback.call(stream2);
    };
    var onerror = function onerror2(err) {
      callback.call(stream2, err);
    };
    var onclose = function onclose2() {
      var err;
      if (readable && !readableEnded) {
        if (!stream2._readableState || !stream2._readableState.ended)
          err = new ERR_STREAM_PREMATURE_CLOSE();
        return callback.call(stream2, err);
      }
      if (writable && !writableEnded) {
        if (!stream2._writableState || !stream2._writableState.ended)
          err = new ERR_STREAM_PREMATURE_CLOSE();
        return callback.call(stream2, err);
      }
    };
    var onrequest = function onrequest2() {
      stream2.req.on("finish", onfinish);
    };
    if (isRequest(stream2)) {
      stream2.on("complete", onfinish);
      stream2.on("abort", onclose);
      if (stream2.req)
        onrequest();
      else
        stream2.on("request", onrequest);
    } else if (writable && !stream2._writableState) {
      stream2.on("end", onlegacyfinish);
      stream2.on("close", onlegacyfinish);
    }
    stream2.on("end", onend);
    stream2.on("finish", onfinish);
    if (opts.error !== false)
      stream2.on("error", onerror);
    stream2.on("close", onclose);
    return function() {
      stream2.removeListener("complete", onfinish);
      stream2.removeListener("abort", onclose);
      stream2.removeListener("request", onrequest);
      if (stream2.req)
        stream2.req.removeListener("finish", onfinish);
      stream2.removeListener("end", onlegacyfinish);
      stream2.removeListener("close", onlegacyfinish);
      stream2.removeListener("finish", onfinish);
      stream2.removeListener("end", onend);
      stream2.removeListener("error", onerror);
      stream2.removeListener("close", onclose);
    };
  }
  exports$6 = eos;
  return exports$6;
}
function dew$5() {
  if (_dewExec$5)
    return exports$5;
  _dewExec$5 = true;
  var process$1 = process2;
  var _Object$setPrototypeO;
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var finished2 = dew$6();
  var kLastResolve = Symbol("lastResolve");
  var kLastReject = Symbol("lastReject");
  var kError = Symbol("error");
  var kEnded = Symbol("ended");
  var kLastPromise = Symbol("lastPromise");
  var kHandlePromise = Symbol("handlePromise");
  var kStream = Symbol("stream");
  function createIterResult2(value, done) {
    return {
      value,
      done
    };
  }
  function readAndResolve(iter) {
    var resolve2 = iter[kLastResolve];
    if (resolve2 !== null) {
      var data = iter[kStream].read();
      if (data !== null) {
        iter[kLastPromise] = null;
        iter[kLastResolve] = null;
        iter[kLastReject] = null;
        resolve2(createIterResult2(data, false));
      }
    }
  }
  function onReadable(iter) {
    process$1.nextTick(readAndResolve, iter);
  }
  function wrapForNext(lastPromise, iter) {
    return function(resolve2, reject) {
      lastPromise.then(function() {
        if (iter[kEnded]) {
          resolve2(createIterResult2(void 0, true));
          return;
        }
        iter[kHandlePromise](resolve2, reject);
      }, reject);
    };
  }
  var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
  });
  var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
    get stream() {
      return this[kStream];
    },
    next: function next() {
      var _this = this;
      var error = this[kError];
      if (error !== null) {
        return Promise.reject(error);
      }
      if (this[kEnded]) {
        return Promise.resolve(createIterResult2(void 0, true));
      }
      if (this[kStream].destroyed) {
        return new Promise(function(resolve2, reject) {
          process$1.nextTick(function() {
            if (_this[kError]) {
              reject(_this[kError]);
            } else {
              resolve2(createIterResult2(void 0, true));
            }
          });
        });
      }
      var lastPromise = this[kLastPromise];
      var promise;
      if (lastPromise) {
        promise = new Promise(wrapForNext(lastPromise, this));
      } else {
        var data = this[kStream].read();
        if (data !== null) {
          return Promise.resolve(createIterResult2(data, false));
        }
        promise = new Promise(this[kHandlePromise]);
      }
      this[kLastPromise] = promise;
      return promise;
    }
  }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
  }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    return new Promise(function(resolve2, reject) {
      _this2[kStream].destroy(null, function(err) {
        if (err) {
          reject(err);
          return;
        }
        resolve2(createIterResult2(void 0, true));
      });
    });
  }), _Object$setPrototypeO), AsyncIteratorPrototype);
  var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream2) {
    var _Object$create;
    var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
      value: stream2,
      writable: true
    }), _defineProperty(_Object$create, kLastResolve, {
      value: null,
      writable: true
    }), _defineProperty(_Object$create, kLastReject, {
      value: null,
      writable: true
    }), _defineProperty(_Object$create, kError, {
      value: null,
      writable: true
    }), _defineProperty(_Object$create, kEnded, {
      value: stream2._readableState.endEmitted,
      writable: true
    }), _defineProperty(_Object$create, kHandlePromise, {
      value: function value(resolve2, reject) {
        var data = iterator[kStream].read();
        if (data) {
          iterator[kLastPromise] = null;
          iterator[kLastResolve] = null;
          iterator[kLastReject] = null;
          resolve2(createIterResult2(data, false));
        } else {
          iterator[kLastResolve] = resolve2;
          iterator[kLastReject] = reject;
        }
      },
      writable: true
    }), _Object$create));
    iterator[kLastPromise] = null;
    finished2(stream2, function(err) {
      if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
        var reject = iterator[kLastReject];
        if (reject !== null) {
          iterator[kLastPromise] = null;
          iterator[kLastResolve] = null;
          iterator[kLastReject] = null;
          reject(err);
        }
        iterator[kError] = err;
        return;
      }
      var resolve2 = iterator[kLastResolve];
      if (resolve2 !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve2(createIterResult2(void 0, true));
      }
      iterator[kEnded] = true;
    });
    stream2.on("readable", onReadable.bind(null, iterator));
    return iterator;
  };
  exports$5 = createReadableStreamAsyncIterator;
  return exports$5;
}
function dew$4() {
  if (_dewExec$4)
    return exports$4;
  _dewExec$4 = true;
  exports$4 = function() {
    throw new Error("Readable.from is not available in the browser");
  };
  return exports$4;
}
function dew$3() {
  if (_dewExec$3)
    return exports$32;
  _dewExec$3 = true;
  var process$1 = process2;
  exports$32 = Readable2;
  var Duplex2;
  Readable2.ReadableState = ReadableState;
  y.EventEmitter;
  var EElistenerCount = function EElistenerCount2(emitter, type) {
    return emitter.listeners(type).length;
  };
  var Stream2 = dew$e();
  var Buffer3 = buffer.Buffer;
  var OurUint8Array = _global3.Uint8Array || function() {
  };
  function _uint8ArrayToBuffer(chunk) {
    return Buffer3.from(chunk);
  }
  function _isUint8Array(obj) {
    return Buffer3.isBuffer(obj) || obj instanceof OurUint8Array;
  }
  var debugUtil = X;
  var debug;
  if (debugUtil && debugUtil.debuglog) {
    debug = debugUtil.debuglog("stream");
  } else {
    debug = function debug2() {
    };
  }
  var BufferList = dew$d();
  var destroyImpl = dew$c();
  var _require = dew$a(), getHighWaterMark = _require.getHighWaterMark;
  var _require$codes = dew$b().codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
  var StringDecoder;
  var createReadableStreamAsyncIterator;
  var from;
  dew$f()(Readable2, Stream2);
  var errorOrDestroy = destroyImpl.errorOrDestroy;
  var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
  function prependListener2(emitter, event, fn) {
    if (typeof emitter.prependListener === "function")
      return emitter.prependListener(event, fn);
    if (!emitter._events || !emitter._events[event])
      emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event]))
      emitter._events[event].unshift(fn);
    else
      emitter._events[event] = [fn, emitter._events[event]];
  }
  function ReadableState(options, stream2, isDuplex) {
    Duplex2 = Duplex2 || dew$7();
    options = options || {};
    if (typeof isDuplex !== "boolean")
      isDuplex = stream2 instanceof Duplex2;
    this.objectMode = !!options.objectMode;
    if (isDuplex)
      this.objectMode = this.objectMode || !!options.readableObjectMode;
    this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
    this.buffer = new BufferList();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;
    this.sync = true;
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true;
    this.emitClose = options.emitClose !== false;
    this.autoDestroy = !!options.autoDestroy;
    this.destroyed = false;
    this.defaultEncoding = options.defaultEncoding || "utf8";
    this.awaitDrain = 0;
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
      if (!StringDecoder)
        StringDecoder = e$12.StringDecoder;
      this.decoder = new StringDecoder(options.encoding);
      this.encoding = options.encoding;
    }
  }
  function Readable2(options) {
    Duplex2 = Duplex2 || dew$7();
    if (!(this instanceof Readable2))
      return new Readable2(options);
    var isDuplex = this instanceof Duplex2;
    this._readableState = new ReadableState(options, this, isDuplex);
    this.readable = true;
    if (options) {
      if (typeof options.read === "function")
        this._read = options.read;
      if (typeof options.destroy === "function")
        this._destroy = options.destroy;
    }
    Stream2.call(this);
  }
  Object.defineProperty(Readable2.prototype, "destroyed", {
    enumerable: false,
    get: function get3() {
      if (this._readableState === void 0) {
        return false;
      }
      return this._readableState.destroyed;
    },
    set: function set(value) {
      if (!this._readableState) {
        return;
      }
      this._readableState.destroyed = value;
    }
  });
  Readable2.prototype.destroy = destroyImpl.destroy;
  Readable2.prototype._undestroy = destroyImpl.undestroy;
  Readable2.prototype._destroy = function(err, cb) {
    cb(err);
  };
  Readable2.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
      if (typeof chunk === "string") {
        encoding = encoding || state.defaultEncoding;
        if (encoding !== state.encoding) {
          chunk = Buffer3.from(chunk, encoding);
          encoding = "";
        }
        skipChunkCheck = true;
      }
    } else {
      skipChunkCheck = true;
    }
    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
  };
  Readable2.prototype.unshift = function(chunk) {
    return readableAddChunk(this, chunk, null, true, false);
  };
  function readableAddChunk(stream2, chunk, encoding, addToFront, skipChunkCheck) {
    debug("readableAddChunk", chunk);
    var state = stream2._readableState;
    if (chunk === null) {
      state.reading = false;
      onEofChunk(stream2, state);
    } else {
      var er;
      if (!skipChunkCheck)
        er = chunkInvalid(state, chunk);
      if (er) {
        errorOrDestroy(stream2, er);
      } else if (state.objectMode || chunk && chunk.length > 0) {
        if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer3.prototype) {
          chunk = _uint8ArrayToBuffer(chunk);
        }
        if (addToFront) {
          if (state.endEmitted)
            errorOrDestroy(stream2, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
          else
            addChunk(stream2, state, chunk, true);
        } else if (state.ended) {
          errorOrDestroy(stream2, new ERR_STREAM_PUSH_AFTER_EOF());
        } else if (state.destroyed) {
          return false;
        } else {
          state.reading = false;
          if (state.decoder && !encoding) {
            chunk = state.decoder.write(chunk);
            if (state.objectMode || chunk.length !== 0)
              addChunk(stream2, state, chunk, false);
            else
              maybeReadMore(stream2, state);
          } else {
            addChunk(stream2, state, chunk, false);
          }
        }
      } else if (!addToFront) {
        state.reading = false;
        maybeReadMore(stream2, state);
      }
    }
    return !state.ended && (state.length < state.highWaterMark || state.length === 0);
  }
  function addChunk(stream2, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
      state.awaitDrain = 0;
      stream2.emit("data", chunk);
    } else {
      state.length += state.objectMode ? 1 : chunk.length;
      if (addToFront)
        state.buffer.unshift(chunk);
      else
        state.buffer.push(chunk);
      if (state.needReadable)
        emitReadable(stream2);
    }
    maybeReadMore(stream2, state);
  }
  function chunkInvalid(state, chunk) {
    var er;
    if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
      er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer", "Uint8Array"], chunk);
    }
    return er;
  }
  Readable2.prototype.isPaused = function() {
    return this._readableState.flowing === false;
  };
  Readable2.prototype.setEncoding = function(enc) {
    if (!StringDecoder)
      StringDecoder = e$12.StringDecoder;
    var decoder = new StringDecoder(enc);
    this._readableState.decoder = decoder;
    this._readableState.encoding = this._readableState.decoder.encoding;
    var p8 = this._readableState.buffer.head;
    var content = "";
    while (p8 !== null) {
      content += decoder.write(p8.data);
      p8 = p8.next;
    }
    this._readableState.buffer.clear();
    if (content !== "")
      this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
  };
  var MAX_HWM = 1073741824;
  function computeNewHighWaterMark(n9) {
    if (n9 >= MAX_HWM) {
      n9 = MAX_HWM;
    } else {
      n9--;
      n9 |= n9 >>> 1;
      n9 |= n9 >>> 2;
      n9 |= n9 >>> 4;
      n9 |= n9 >>> 8;
      n9 |= n9 >>> 16;
      n9++;
    }
    return n9;
  }
  function howMuchToRead(n9, state) {
    if (n9 <= 0 || state.length === 0 && state.ended)
      return 0;
    if (state.objectMode)
      return 1;
    if (n9 !== n9) {
      if (state.flowing && state.length)
        return state.buffer.head.data.length;
      else
        return state.length;
    }
    if (n9 > state.highWaterMark)
      state.highWaterMark = computeNewHighWaterMark(n9);
    if (n9 <= state.length)
      return n9;
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    }
    return state.length;
  }
  Readable2.prototype.read = function(n9) {
    debug("read", n9);
    n9 = parseInt(n9, 10);
    var state = this._readableState;
    var nOrig = n9;
    if (n9 !== 0)
      state.emittedReadable = false;
    if (n9 === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
      debug("read: emitReadable", state.length, state.ended);
      if (state.length === 0 && state.ended)
        endReadable(this);
      else
        emitReadable(this);
      return null;
    }
    n9 = howMuchToRead(n9, state);
    if (n9 === 0 && state.ended) {
      if (state.length === 0)
        endReadable(this);
      return null;
    }
    var doRead = state.needReadable;
    debug("need readable", doRead);
    if (state.length === 0 || state.length - n9 < state.highWaterMark) {
      doRead = true;
      debug("length less than watermark", doRead);
    }
    if (state.ended || state.reading) {
      doRead = false;
      debug("reading or ended", doRead);
    } else if (doRead) {
      debug("do read");
      state.reading = true;
      state.sync = true;
      if (state.length === 0)
        state.needReadable = true;
      this._read(state.highWaterMark);
      state.sync = false;
      if (!state.reading)
        n9 = howMuchToRead(nOrig, state);
    }
    var ret;
    if (n9 > 0)
      ret = fromList(n9, state);
    else
      ret = null;
    if (ret === null) {
      state.needReadable = state.length <= state.highWaterMark;
      n9 = 0;
    } else {
      state.length -= n9;
      state.awaitDrain = 0;
    }
    if (state.length === 0) {
      if (!state.ended)
        state.needReadable = true;
      if (nOrig !== n9 && state.ended)
        endReadable(this);
    }
    if (ret !== null)
      this.emit("data", ret);
    return ret;
  };
  function onEofChunk(stream2, state) {
    debug("onEofChunk");
    if (state.ended)
      return;
    if (state.decoder) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) {
        state.buffer.push(chunk);
        state.length += state.objectMode ? 1 : chunk.length;
      }
    }
    state.ended = true;
    if (state.sync) {
      emitReadable(stream2);
    } else {
      state.needReadable = false;
      if (!state.emittedReadable) {
        state.emittedReadable = true;
        emitReadable_(stream2);
      }
    }
  }
  function emitReadable(stream2) {
    var state = stream2._readableState;
    debug("emitReadable", state.needReadable, state.emittedReadable);
    state.needReadable = false;
    if (!state.emittedReadable) {
      debug("emitReadable", state.flowing);
      state.emittedReadable = true;
      process$1.nextTick(emitReadable_, stream2);
    }
  }
  function emitReadable_(stream2) {
    var state = stream2._readableState;
    debug("emitReadable_", state.destroyed, state.length, state.ended);
    if (!state.destroyed && (state.length || state.ended)) {
      stream2.emit("readable");
      state.emittedReadable = false;
    }
    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    flow(stream2);
  }
  function maybeReadMore(stream2, state) {
    if (!state.readingMore) {
      state.readingMore = true;
      process$1.nextTick(maybeReadMore_, stream2, state);
    }
  }
  function maybeReadMore_(stream2, state) {
    while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
      var len = state.length;
      debug("maybeReadMore read 0");
      stream2.read(0);
      if (len === state.length)
        break;
    }
    state.readingMore = false;
  }
  Readable2.prototype._read = function(n9) {
    errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
  };
  Readable2.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
    switch (state.pipesCount) {
      case 0:
        state.pipes = dest;
        break;
      case 1:
        state.pipes = [state.pipes, dest];
        break;
      default:
        state.pipes.push(dest);
        break;
    }
    state.pipesCount += 1;
    debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process$1.stdout && dest !== process$1.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted)
      process$1.nextTick(endFn);
    else
      src.once("end", endFn);
    dest.on("unpipe", onunpipe);
    function onunpipe(readable, unpipeInfo) {
      debug("onunpipe");
      if (readable === src) {
        if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
          unpipeInfo.hasUnpiped = true;
          cleanup();
        }
      }
    }
    function onend() {
      debug("onend");
      dest.end();
    }
    var ondrain = pipeOnDrain(src);
    dest.on("drain", ondrain);
    var cleanedUp = false;
    function cleanup() {
      debug("cleanup");
      dest.removeListener("close", onclose);
      dest.removeListener("finish", onfinish);
      dest.removeListener("drain", ondrain);
      dest.removeListener("error", onerror);
      dest.removeListener("unpipe", onunpipe);
      src.removeListener("end", onend);
      src.removeListener("end", unpipe);
      src.removeListener("data", ondata);
      cleanedUp = true;
      if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
        ondrain();
    }
    src.on("data", ondata);
    function ondata(chunk) {
      debug("ondata");
      var ret = dest.write(chunk);
      debug("dest.write", ret);
      if (ret === false) {
        if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf2(state.pipes, dest) !== -1) && !cleanedUp) {
          debug("false write response, pause", state.awaitDrain);
          state.awaitDrain++;
        }
        src.pause();
      }
    }
    function onerror(er) {
      debug("onerror", er);
      unpipe();
      dest.removeListener("error", onerror);
      if (EElistenerCount(dest, "error") === 0)
        errorOrDestroy(dest, er);
    }
    prependListener2(dest, "error", onerror);
    function onclose() {
      dest.removeListener("finish", onfinish);
      unpipe();
    }
    dest.once("close", onclose);
    function onfinish() {
      debug("onfinish");
      dest.removeListener("close", onclose);
      unpipe();
    }
    dest.once("finish", onfinish);
    function unpipe() {
      debug("unpipe");
      src.unpipe(dest);
    }
    dest.emit("pipe", src);
    if (!state.flowing) {
      debug("pipe resume");
      src.resume();
    }
    return dest;
  };
  function pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
      var state = src._readableState;
      debug("pipeOnDrain", state.awaitDrain);
      if (state.awaitDrain)
        state.awaitDrain--;
      if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
        state.flowing = true;
        flow(src);
      }
    };
  }
  Readable2.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {
      hasUnpiped: false
    };
    if (state.pipesCount === 0)
      return this;
    if (state.pipesCount === 1) {
      if (dest && dest !== state.pipes)
        return this;
      if (!dest)
        dest = state.pipes;
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;
      if (dest)
        dest.emit("unpipe", this, unpipeInfo);
      return this;
    }
    if (!dest) {
      var dests = state.pipes;
      var len = state.pipesCount;
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;
      for (var i8 = 0; i8 < len; i8++) {
        dests[i8].emit("unpipe", this, {
          hasUnpiped: false
        });
      }
      return this;
    }
    var index = indexOf2(state.pipes, dest);
    if (index === -1)
      return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1)
      state.pipes = state.pipes[0];
    dest.emit("unpipe", this, unpipeInfo);
    return this;
  };
  Readable2.prototype.on = function(ev, fn) {
    var res = Stream2.prototype.on.call(this, ev, fn);
    var state = this._readableState;
    if (ev === "data") {
      state.readableListening = this.listenerCount("readable") > 0;
      if (state.flowing !== false)
        this.resume();
    } else if (ev === "readable") {
      if (!state.endEmitted && !state.readableListening) {
        state.readableListening = state.needReadable = true;
        state.flowing = false;
        state.emittedReadable = false;
        debug("on readable", state.length, state.reading);
        if (state.length) {
          emitReadable(this);
        } else if (!state.reading) {
          process$1.nextTick(nReadingNextTick, this);
        }
      }
    }
    return res;
  };
  Readable2.prototype.addListener = Readable2.prototype.on;
  Readable2.prototype.removeListener = function(ev, fn) {
    var res = Stream2.prototype.removeListener.call(this, ev, fn);
    if (ev === "readable") {
      process$1.nextTick(updateReadableListening, this);
    }
    return res;
  };
  Readable2.prototype.removeAllListeners = function(ev) {
    var res = Stream2.prototype.removeAllListeners.apply(this, arguments);
    if (ev === "readable" || ev === void 0) {
      process$1.nextTick(updateReadableListening, this);
    }
    return res;
  };
  function updateReadableListening(self2) {
    var state = self2._readableState;
    state.readableListening = self2.listenerCount("readable") > 0;
    if (state.resumeScheduled && !state.paused) {
      state.flowing = true;
    } else if (self2.listenerCount("data") > 0) {
      self2.resume();
    }
  }
  function nReadingNextTick(self2) {
    debug("readable nexttick read 0");
    self2.read(0);
  }
  Readable2.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
      debug("resume");
      state.flowing = !state.readableListening;
      resume(this, state);
    }
    state.paused = false;
    return this;
  };
  function resume(stream2, state) {
    if (!state.resumeScheduled) {
      state.resumeScheduled = true;
      process$1.nextTick(resume_, stream2, state);
    }
  }
  function resume_(stream2, state) {
    debug("resume", state.reading);
    if (!state.reading) {
      stream2.read(0);
    }
    state.resumeScheduled = false;
    stream2.emit("resume");
    flow(stream2);
    if (state.flowing && !state.reading)
      stream2.read(0);
  }
  Readable2.prototype.pause = function() {
    debug("call pause flowing=%j", this._readableState.flowing);
    if (this._readableState.flowing !== false) {
      debug("pause");
      this._readableState.flowing = false;
      this.emit("pause");
    }
    this._readableState.paused = true;
    return this;
  };
  function flow(stream2) {
    var state = stream2._readableState;
    debug("flow", state.flowing);
    while (state.flowing && stream2.read() !== null) {
    }
  }
  Readable2.prototype.wrap = function(stream2) {
    var _this = this;
    var state = this._readableState;
    var paused = false;
    stream2.on("end", function() {
      debug("wrapped end");
      if (state.decoder && !state.ended) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length)
          _this.push(chunk);
      }
      _this.push(null);
    });
    stream2.on("data", function(chunk) {
      debug("wrapped data");
      if (state.decoder)
        chunk = state.decoder.write(chunk);
      if (state.objectMode && (chunk === null || chunk === void 0))
        return;
      else if (!state.objectMode && (!chunk || !chunk.length))
        return;
      var ret = _this.push(chunk);
      if (!ret) {
        paused = true;
        stream2.pause();
      }
    });
    for (var i8 in stream2) {
      if (this[i8] === void 0 && typeof stream2[i8] === "function") {
        this[i8] = function methodWrap(method) {
          return function methodWrapReturnFunction() {
            return stream2[method].apply(stream2, arguments);
          };
        }(i8);
      }
    }
    for (var n9 = 0; n9 < kProxyEvents.length; n9++) {
      stream2.on(kProxyEvents[n9], this.emit.bind(this, kProxyEvents[n9]));
    }
    this._read = function(n10) {
      debug("wrapped _read", n10);
      if (paused) {
        paused = false;
        stream2.resume();
      }
    };
    return this;
  };
  if (typeof Symbol === "function") {
    Readable2.prototype[Symbol.asyncIterator] = function() {
      if (createReadableStreamAsyncIterator === void 0) {
        createReadableStreamAsyncIterator = dew$5();
      }
      return createReadableStreamAsyncIterator(this);
    };
  }
  Object.defineProperty(Readable2.prototype, "readableHighWaterMark", {
    enumerable: false,
    get: function get3() {
      return this._readableState.highWaterMark;
    }
  });
  Object.defineProperty(Readable2.prototype, "readableBuffer", {
    enumerable: false,
    get: function get3() {
      return this._readableState && this._readableState.buffer;
    }
  });
  Object.defineProperty(Readable2.prototype, "readableFlowing", {
    enumerable: false,
    get: function get3() {
      return this._readableState.flowing;
    },
    set: function set(state) {
      if (this._readableState) {
        this._readableState.flowing = state;
      }
    }
  });
  Readable2._fromList = fromList;
  Object.defineProperty(Readable2.prototype, "readableLength", {
    enumerable: false,
    get: function get3() {
      return this._readableState.length;
    }
  });
  function fromList(n9, state) {
    if (state.length === 0)
      return null;
    var ret;
    if (state.objectMode)
      ret = state.buffer.shift();
    else if (!n9 || n9 >= state.length) {
      if (state.decoder)
        ret = state.buffer.join("");
      else if (state.buffer.length === 1)
        ret = state.buffer.first();
      else
        ret = state.buffer.concat(state.length);
      state.buffer.clear();
    } else {
      ret = state.buffer.consume(n9, state.decoder);
    }
    return ret;
  }
  function endReadable(stream2) {
    var state = stream2._readableState;
    debug("endReadable", state.endEmitted);
    if (!state.endEmitted) {
      state.ended = true;
      process$1.nextTick(endReadableNT, state, stream2);
    }
  }
  function endReadableNT(state, stream2) {
    debug("endReadableNT", state.endEmitted, state.length);
    if (!state.endEmitted && state.length === 0) {
      state.endEmitted = true;
      stream2.readable = false;
      stream2.emit("end");
      if (state.autoDestroy) {
        var wState = stream2._writableState;
        if (!wState || wState.autoDestroy && wState.finished) {
          stream2.destroy();
        }
      }
    }
  }
  if (typeof Symbol === "function") {
    Readable2.from = function(iterable, opts) {
      if (from === void 0) {
        from = dew$4();
      }
      return from(Readable2, iterable, opts);
    };
  }
  function indexOf2(xs, x4) {
    for (var i8 = 0, l8 = xs.length; i8 < l8; i8++) {
      if (xs[i8] === x4)
        return i8;
    }
    return -1;
  }
  return exports$32;
}
function dew$22() {
  if (_dewExec$22)
    return exports$22;
  _dewExec$22 = true;
  exports$22 = Transform2;
  var _require$codes = dew$b().codes, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
  var Duplex2 = dew$7();
  dew$f()(Transform2, Duplex2);
  function afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (cb === null) {
      return this.emit("error", new ERR_MULTIPLE_CALLBACK());
    }
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null)
      this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) {
      this._read(rs.highWaterMark);
    }
  }
  function Transform2(options) {
    if (!(this instanceof Transform2))
      return new Transform2(options);
    Duplex2.call(this, options);
    this._transformState = {
      afterTransform: afterTransform.bind(this),
      needTransform: false,
      transforming: false,
      writecb: null,
      writechunk: null,
      writeencoding: null
    };
    this._readableState.needReadable = true;
    this._readableState.sync = false;
    if (options) {
      if (typeof options.transform === "function")
        this._transform = options.transform;
      if (typeof options.flush === "function")
        this._flush = options.flush;
    }
    this.on("prefinish", prefinish);
  }
  function prefinish() {
    var _this = this;
    if (typeof this._flush === "function" && !this._readableState.destroyed) {
      this._flush(function(er, data) {
        done(_this, er, data);
      });
    } else {
      done(this, null, null);
    }
  }
  Transform2.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex2.prototype.push.call(this, chunk, encoding);
  };
  Transform2.prototype._transform = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
  };
  Transform2.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
      var rs = this._readableState;
      if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
        this._read(rs.highWaterMark);
    }
  };
  Transform2.prototype._read = function(n9) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
      ts.transforming = true;
      this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else {
      ts.needTransform = true;
    }
  };
  Transform2.prototype._destroy = function(err, cb) {
    Duplex2.prototype._destroy.call(this, err, function(err2) {
      cb(err2);
    });
  };
  function done(stream2, er, data) {
    if (er)
      return stream2.emit("error", er);
    if (data != null)
      stream2.push(data);
    if (stream2._writableState.length)
      throw new ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream2._transformState.transforming)
      throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream2.push(null);
  }
  return exports$22;
}
function dew$12() {
  if (_dewExec$12)
    return exports$12;
  _dewExec$12 = true;
  exports$12 = PassThrough2;
  var Transform2 = dew$22();
  dew$f()(PassThrough2, Transform2);
  function PassThrough2(options) {
    if (!(this instanceof PassThrough2))
      return new PassThrough2(options);
    Transform2.call(this, options);
  }
  PassThrough2.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
  };
  return exports$12;
}
function dew3() {
  if (_dewExec3)
    return exports3;
  _dewExec3 = true;
  var eos;
  function once3(callback) {
    var called = false;
    return function() {
      if (called)
        return;
      called = true;
      callback.apply(void 0, arguments);
    };
  }
  var _require$codes = dew$b().codes, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
  function noop3(err) {
    if (err)
      throw err;
  }
  function isRequest(stream2) {
    return stream2.setHeader && typeof stream2.abort === "function";
  }
  function destroyer(stream2, reading, writing, callback) {
    callback = once3(callback);
    var closed = false;
    stream2.on("close", function() {
      closed = true;
    });
    if (eos === void 0)
      eos = dew$6();
    eos(stream2, {
      readable: reading,
      writable: writing
    }, function(err) {
      if (err)
        return callback(err);
      closed = true;
      callback();
    });
    var destroyed = false;
    return function(err) {
      if (closed)
        return;
      if (destroyed)
        return;
      destroyed = true;
      if (isRequest(stream2))
        return stream2.abort();
      if (typeof stream2.destroy === "function")
        return stream2.destroy();
      callback(err || new ERR_STREAM_DESTROYED("pipe"));
    };
  }
  function call(fn) {
    fn();
  }
  function pipe(from, to) {
    return from.pipe(to);
  }
  function popCallback(streams) {
    if (!streams.length)
      return noop3;
    if (typeof streams[streams.length - 1] !== "function")
      return noop3;
    return streams.pop();
  }
  function pipeline2() {
    for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
      streams[_key] = arguments[_key];
    }
    var callback = popCallback(streams);
    if (Array.isArray(streams[0]))
      streams = streams[0];
    if (streams.length < 2) {
      throw new ERR_MISSING_ARGS("streams");
    }
    var error;
    var destroys = streams.map(function(stream2, i8) {
      var reading = i8 < streams.length - 1;
      var writing = i8 > 0;
      return destroyer(stream2, reading, writing, function(err) {
        if (!error)
          error = err;
        if (err)
          destroys.forEach(call);
        if (reading)
          return;
        destroys.forEach(call);
        callback(error);
      });
    });
    return streams.reduce(pipe);
  }
  exports3 = pipeline2;
  return exports3;
}
var exports$2$1, _dewExec$2$1, exports$1$1, _dewExec$1$1, exports$g, _dewExec$g, buffer, exports$f, _dewExec$f, exports$e, _dewExec$e, exports$d, _dewExec$d, exports$c, _dewExec$c, exports$b, _dewExec$b, exports$a, _dewExec$a, exports$9, _dewExec$9, _global$2, exports$8, _dewExec$8, _global$1, exports$7, _dewExec$7, exports$6, _dewExec$6, exports$5, _dewExec$5, exports$4, _dewExec$4, exports$32, _dewExec$3, _global3, exports$22, _dewExec$22, exports$12, _dewExec$12, exports3, _dewExec3;
var init_chunk_44e51b61 = __esm({
  "../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/chunk-44e51b61.js"() {
    init_dirname();
    init_buffer2();
    init_process2();
    init_chunk_4bd36a8f();
    init_chunk_ce0fbc82();
    init_chunk_b4205b57();
    init_chunk_2eac56ff();
    init_chunk_4ccc3a29();
    exports$2$1 = {};
    _dewExec$2$1 = false;
    exports$1$1 = {};
    _dewExec$1$1 = false;
    exports$g = {};
    _dewExec$g = false;
    buffer = dew$g();
    buffer.Buffer;
    buffer.INSPECT_MAX_BYTES;
    buffer.kMaxLength;
    exports$f = {};
    _dewExec$f = false;
    exports$e = {};
    _dewExec$e = false;
    exports$d = {};
    _dewExec$d = false;
    exports$c = {};
    _dewExec$c = false;
    exports$b = {};
    _dewExec$b = false;
    exports$a = {};
    _dewExec$a = false;
    exports$9 = {};
    _dewExec$9 = false;
    _global$2 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$8 = {};
    _dewExec$8 = false;
    _global$1 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$7 = {};
    _dewExec$7 = false;
    exports$6 = {};
    _dewExec$6 = false;
    exports$5 = {};
    _dewExec$5 = false;
    exports$4 = {};
    _dewExec$4 = false;
    exports$32 = {};
    _dewExec$3 = false;
    _global3 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$22 = {};
    _dewExec$22 = false;
    exports$12 = {};
    _dewExec$12 = false;
    exports3 = {};
    _dewExec3 = false;
  }
});

// ../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/chunk-c3d025d9.js
function dew4() {
  if (_dewExec4)
    return exports4;
  _dewExec4 = true;
  exports4 = exports4 = dew$3();
  exports4.Stream = exports4;
  exports4.Readable = exports4;
  exports4.Writable = dew$8();
  exports4.Duplex = dew$7();
  exports4.Transform = dew$22();
  exports4.PassThrough = dew$12();
  exports4.finished = dew$6();
  exports4.pipeline = dew3();
  return exports4;
}
var exports4, _dewExec4;
var init_chunk_c3d025d9 = __esm({
  "../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/chunk-c3d025d9.js"() {
    init_dirname();
    init_buffer2();
    init_process2();
    init_chunk_44e51b61();
    exports4 = {};
    _dewExec4 = false;
  }
});

// ../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/crypto.js
var crypto_exports = {};
__export(crypto_exports, {
  Cipher: () => Cipher,
  Cipheriv: () => Cipheriv,
  Decipher: () => Decipher,
  Decipheriv: () => Decipheriv,
  DiffieHellman: () => DiffieHellman,
  DiffieHellmanGroup: () => DiffieHellmanGroup,
  Hash: () => Hash,
  Hmac: () => Hmac,
  Sign: () => Sign,
  Verify: () => Verify,
  constants: () => constants,
  createCipher: () => createCipher,
  createCipheriv: () => createCipheriv,
  createCredentials: () => createCredentials,
  createDecipher: () => createDecipher,
  createDecipheriv: () => createDecipheriv,
  createDiffieHellman: () => createDiffieHellman,
  createDiffieHellmanGroup: () => createDiffieHellmanGroup,
  createECDH: () => createECDH,
  createHash: () => createHash,
  createHmac: () => createHmac,
  createSign: () => createSign,
  createVerify: () => createVerify,
  default: () => exports5,
  getCiphers: () => getCiphers,
  getDiffieHellman: () => getDiffieHellman,
  getHashes: () => getHashes,
  listCiphers: () => listCiphers,
  pbkdf2: () => pbkdf2,
  pbkdf2Sync: () => pbkdf2Sync,
  privateDecrypt: () => privateDecrypt,
  privateEncrypt: () => privateEncrypt,
  prng: () => prng,
  pseudoRandomBytes: () => pseudoRandomBytes,
  publicDecrypt: () => publicDecrypt,
  publicEncrypt: () => publicEncrypt,
  randomBytes: () => randomBytes,
  randomFill: () => randomFill,
  randomFillSync: () => randomFillSync,
  rng: () => rng,
  webcrypto: () => webcrypto
});
function dew$2P() {
  if (_dewExec$2P)
    return exports$2Q;
  _dewExec$2P = true;
  var buffer$1 = buffer;
  var Buffer3 = buffer$1.Buffer;
  function copyProps(src, dst) {
    for (var key in src) {
      dst[key] = src[key];
    }
  }
  if (Buffer3.from && Buffer3.alloc && Buffer3.allocUnsafe && Buffer3.allocUnsafeSlow) {
    exports$2Q = buffer$1;
  } else {
    copyProps(buffer$1, exports$2Q);
    exports$2Q.Buffer = SafeBuffer;
  }
  function SafeBuffer(arg, encodingOrOffset, length) {
    return Buffer3(arg, encodingOrOffset, length);
  }
  copyProps(Buffer3, SafeBuffer);
  SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === "number") {
      throw new TypeError("Argument must not be a number");
    }
    return Buffer3(arg, encodingOrOffset, length);
  };
  SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== "number") {
      throw new TypeError("Argument must be a number");
    }
    var buf = Buffer3(size);
    if (fill !== void 0) {
      if (typeof encoding === "string") {
        buf.fill(fill, encoding);
      } else {
        buf.fill(fill);
      }
    } else {
      buf.fill(0);
    }
    return buf;
  };
  SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== "number") {
      throw new TypeError("Argument must be a number");
    }
    return Buffer3(size);
  };
  SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== "number") {
      throw new TypeError("Argument must be a number");
    }
    return buffer$1.SlowBuffer(size);
  };
  return exports$2Q;
}
function dew$2O() {
  if (_dewExec$2O)
    return exports$2P;
  _dewExec$2O = true;
  var process$1 = process2;
  var MAX_BYTES = 65536;
  var MAX_UINT32 = 4294967295;
  function oldBrowser() {
    throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11");
  }
  var Buffer3 = dew$2P().Buffer;
  var crypto2 = _global$U.crypto || _global$U.msCrypto;
  if (crypto2 && crypto2.getRandomValues) {
    exports$2P = randomBytes2;
  } else {
    exports$2P = oldBrowser;
  }
  function randomBytes2(size, cb) {
    if (size > MAX_UINT32)
      throw new RangeError("requested too many random bytes");
    var bytes = Buffer3.allocUnsafe(size);
    if (size > 0) {
      if (size > MAX_BYTES) {
        for (var generated = 0; generated < size; generated += MAX_BYTES) {
          crypto2.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));
        }
      } else {
        crypto2.getRandomValues(bytes);
      }
    }
    if (typeof cb === "function") {
      return process$1.nextTick(function() {
        cb(null, bytes);
      });
    }
    return bytes;
  }
  return exports$2P;
}
function dew$2N() {
  if (_dewExec$2N)
    return exports$2O;
  _dewExec$2N = true;
  var buffer$1 = buffer;
  var Buffer3 = buffer$1.Buffer;
  function copyProps(src, dst) {
    for (var key in src) {
      dst[key] = src[key];
    }
  }
  if (Buffer3.from && Buffer3.alloc && Buffer3.allocUnsafe && Buffer3.allocUnsafeSlow) {
    exports$2O = buffer$1;
  } else {
    copyProps(buffer$1, exports$2O);
    exports$2O.Buffer = SafeBuffer;
  }
  function SafeBuffer(arg, encodingOrOffset, length) {
    return Buffer3(arg, encodingOrOffset, length);
  }
  SafeBuffer.prototype = Object.create(Buffer3.prototype);
  copyProps(Buffer3, SafeBuffer);
  SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === "number") {
      throw new TypeError("Argument must not be a number");
    }
    return Buffer3(arg, encodingOrOffset, length);
  };
  SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== "number") {
      throw new TypeError("Argument must be a number");
    }
    var buf = Buffer3(size);
    if (fill !== void 0) {
      if (typeof encoding === "string") {
        buf.fill(fill, encoding);
      } else {
        buf.fill(fill);
      }
    } else {
      buf.fill(0);
    }
    return buf;
  };
  SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== "number") {
      throw new TypeError("Argument must be a number");
    }
    return Buffer3(size);
  };
  SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== "number") {
      throw new TypeError("Argument must be a number");
    }
    return buffer$1.SlowBuffer(size);
  };
  return exports$2O;
}
function dew$2M() {
  if (_dewExec$2M)
    return exports$2N;
  _dewExec$2M = true;
  var Buffer3 = dew$2N().Buffer;
  var Transform2 = dew4().Transform;
  var inherits4 = dew$f();
  function throwIfNotStringOrBuffer(val, prefix) {
    if (!Buffer3.isBuffer(val) && typeof val !== "string") {
      throw new TypeError(prefix + " must be a string or a buffer");
    }
  }
  function HashBase(blockSize) {
    Transform2.call(this);
    this._block = Buffer3.allocUnsafe(blockSize);
    this._blockSize = blockSize;
    this._blockOffset = 0;
    this._length = [0, 0, 0, 0];
    this._finalized = false;
  }
  inherits4(HashBase, Transform2);
  HashBase.prototype._transform = function(chunk, encoding, callback) {
    var error = null;
    try {
      this.update(chunk, encoding);
    } catch (err) {
      error = err;
    }
    callback(error);
  };
  HashBase.prototype._flush = function(callback) {
    var error = null;
    try {
      this.push(this.digest());
    } catch (err) {
      error = err;
    }
    callback(error);
  };
  HashBase.prototype.update = function(data, encoding) {
    throwIfNotStringOrBuffer(data, "Data");
    if (this._finalized)
      throw new Error("Digest already called");
    if (!Buffer3.isBuffer(data))
      data = Buffer3.from(data, encoding);
    var block = this._block;
    var offset = 0;
    while (this._blockOffset + data.length - offset >= this._blockSize) {
      for (var i8 = this._blockOffset; i8 < this._blockSize; )
        block[i8++] = data[offset++];
      this._update();
      this._blockOffset = 0;
    }
    while (offset < data.length)
      block[this._blockOffset++] = data[offset++];
    for (var j4 = 0, carry = data.length * 8; carry > 0; ++j4) {
      this._length[j4] += carry;
      carry = this._length[j4] / 4294967296 | 0;
      if (carry > 0)
        this._length[j4] -= 4294967296 * carry;
    }
    return this;
  };
  HashBase.prototype._update = function() {
    throw new Error("_update is not implemented");
  };
  HashBase.prototype.digest = function(encoding) {
    if (this._finalized)
      throw new Error("Digest already called");
    this._finalized = true;
    var digest = this._digest();
    if (encoding !== void 0)
      digest = digest.toString(encoding);
    this._block.fill(0);
    this._blockOffset = 0;
    for (var i8 = 0; i8 < 4; ++i8)
      this._length[i8] = 0;
    return digest;
  };
  HashBase.prototype._digest = function() {
    throw new Error("_digest is not implemented");
  };
  exports$2N = HashBase;
  return exports$2N;
}
function dew$2L() {
  if (_dewExec$2L)
    return exports$2M;
  _dewExec$2L = true;
  var inherits4 = dew$f();
  var HashBase = dew$2M();
  var Buffer3 = dew$2P().Buffer;
  var ARRAY16 = new Array(16);
  function MD5() {
    HashBase.call(this, 64);
    this._a = 1732584193;
    this._b = 4023233417;
    this._c = 2562383102;
    this._d = 271733878;
  }
  inherits4(MD5, HashBase);
  MD5.prototype._update = function() {
    var M4 = ARRAY16;
    for (var i8 = 0; i8 < 16; ++i8)
      M4[i8] = this._block.readInt32LE(i8 * 4);
    var a8 = this._a;
    var b5 = this._b;
    var c8 = this._c;
    var d6 = this._d;
    a8 = fnF(a8, b5, c8, d6, M4[0], 3614090360, 7);
    d6 = fnF(d6, a8, b5, c8, M4[1], 3905402710, 12);
    c8 = fnF(c8, d6, a8, b5, M4[2], 606105819, 17);
    b5 = fnF(b5, c8, d6, a8, M4[3], 3250441966, 22);
    a8 = fnF(a8, b5, c8, d6, M4[4], 4118548399, 7);
    d6 = fnF(d6, a8, b5, c8, M4[5], 1200080426, 12);
    c8 = fnF(c8, d6, a8, b5, M4[6], 2821735955, 17);
    b5 = fnF(b5, c8, d6, a8, M4[7], 4249261313, 22);
    a8 = fnF(a8, b5, c8, d6, M4[8], 1770035416, 7);
    d6 = fnF(d6, a8, b5, c8, M4[9], 2336552879, 12);
    c8 = fnF(c8, d6, a8, b5, M4[10], 4294925233, 17);
    b5 = fnF(b5, c8, d6, a8, M4[11], 2304563134, 22);
    a8 = fnF(a8, b5, c8, d6, M4[12], 1804603682, 7);
    d6 = fnF(d6, a8, b5, c8, M4[13], 4254626195, 12);
    c8 = fnF(c8, d6, a8, b5, M4[14], 2792965006, 17);
    b5 = fnF(b5, c8, d6, a8, M4[15], 1236535329, 22);
    a8 = fnG(a8, b5, c8, d6, M4[1], 4129170786, 5);
    d6 = fnG(d6, a8, b5, c8, M4[6], 3225465664, 9);
    c8 = fnG(c8, d6, a8, b5, M4[11], 643717713, 14);
    b5 = fnG(b5, c8, d6, a8, M4[0], 3921069994, 20);
    a8 = fnG(a8, b5, c8, d6, M4[5], 3593408605, 5);
    d6 = fnG(d6, a8, b5, c8, M4[10], 38016083, 9);
    c8 = fnG(c8, d6, a8, b5, M4[15], 3634488961, 14);
    b5 = fnG(b5, c8, d6, a8, M4[4], 3889429448, 20);
    a8 = fnG(a8, b5, c8, d6, M4[9], 568446438, 5);
    d6 = fnG(d6, a8, b5, c8, M4[14], 3275163606, 9);
    c8 = fnG(c8, d6, a8, b5, M4[3], 4107603335, 14);
    b5 = fnG(b5, c8, d6, a8, M4[8], 1163531501, 20);
    a8 = fnG(a8, b5, c8, d6, M4[13], 2850285829, 5);
    d6 = fnG(d6, a8, b5, c8, M4[2], 4243563512, 9);
    c8 = fnG(c8, d6, a8, b5, M4[7], 1735328473, 14);
    b5 = fnG(b5, c8, d6, a8, M4[12], 2368359562, 20);
    a8 = fnH(a8, b5, c8, d6, M4[5], 4294588738, 4);
    d6 = fnH(d6, a8, b5, c8, M4[8], 2272392833, 11);
    c8 = fnH(c8, d6, a8, b5, M4[11], 1839030562, 16);
    b5 = fnH(b5, c8, d6, a8, M4[14], 4259657740, 23);
    a8 = fnH(a8, b5, c8, d6, M4[1], 2763975236, 4);
    d6 = fnH(d6, a8, b5, c8, M4[4], 1272893353, 11);
    c8 = fnH(c8, d6, a8, b5, M4[7], 4139469664, 16);
    b5 = fnH(b5, c8, d6, a8, M4[10], 3200236656, 23);
    a8 = fnH(a8, b5, c8, d6, M4[13], 681279174, 4);
    d6 = fnH(d6, a8, b5, c8, M4[0], 3936430074, 11);
    c8 = fnH(c8, d6, a8, b5, M4[3], 3572445317, 16);
    b5 = fnH(b5, c8, d6, a8, M4[6], 76029189, 23);
    a8 = fnH(a8, b5, c8, d6, M4[9], 3654602809, 4);
    d6 = fnH(d6, a8, b5, c8, M4[12], 3873151461, 11);
    c8 = fnH(c8, d6, a8, b5, M4[15], 530742520, 16);
    b5 = fnH(b5, c8, d6, a8, M4[2], 3299628645, 23);
    a8 = fnI(a8, b5, c8, d6, M4[0], 4096336452, 6);
    d6 = fnI(d6, a8, b5, c8, M4[7], 1126891415, 10);
    c8 = fnI(c8, d6, a8, b5, M4[14], 2878612391, 15);
    b5 = fnI(b5, c8, d6, a8, M4[5], 4237533241, 21);
    a8 = fnI(a8, b5, c8, d6, M4[12], 1700485571, 6);
    d6 = fnI(d6, a8, b5, c8, M4[3], 2399980690, 10);
    c8 = fnI(c8, d6, a8, b5, M4[10], 4293915773, 15);
    b5 = fnI(b5, c8, d6, a8, M4[1], 2240044497, 21);
    a8 = fnI(a8, b5, c8, d6, M4[8], 1873313359, 6);
    d6 = fnI(d6, a8, b5, c8, M4[15], 4264355552, 10);
    c8 = fnI(c8, d6, a8, b5, M4[6], 2734768916, 15);
    b5 = fnI(b5, c8, d6, a8, M4[13], 1309151649, 21);
    a8 = fnI(a8, b5, c8, d6, M4[4], 4149444226, 6);
    d6 = fnI(d6, a8, b5, c8, M4[11], 3174756917, 10);
    c8 = fnI(c8, d6, a8, b5, M4[2], 718787259, 15);
    b5 = fnI(b5, c8, d6, a8, M4[9], 3951481745, 21);
    this._a = this._a + a8 | 0;
    this._b = this._b + b5 | 0;
    this._c = this._c + c8 | 0;
    this._d = this._d + d6 | 0;
  };
  MD5.prototype._digest = function() {
    this._block[this._blockOffset++] = 128;
    if (this._blockOffset > 56) {
      this._block.fill(0, this._blockOffset, 64);
      this._update();
      this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    var buffer2 = Buffer3.allocUnsafe(16);
    buffer2.writeInt32LE(this._a, 0);
    buffer2.writeInt32LE(this._b, 4);
    buffer2.writeInt32LE(this._c, 8);
    buffer2.writeInt32LE(this._d, 12);
    return buffer2;
  };
  function rotl(x4, n9) {
    return x4 << n9 | x4 >>> 32 - n9;
  }
  function fnF(a8, b5, c8, d6, m6, k4, s7) {
    return rotl(a8 + (b5 & c8 | ~b5 & d6) + m6 + k4 | 0, s7) + b5 | 0;
  }
  function fnG(a8, b5, c8, d6, m6, k4, s7) {
    return rotl(a8 + (b5 & d6 | c8 & ~d6) + m6 + k4 | 0, s7) + b5 | 0;
  }
  function fnH(a8, b5, c8, d6, m6, k4, s7) {
    return rotl(a8 + (b5 ^ c8 ^ d6) + m6 + k4 | 0, s7) + b5 | 0;
  }
  function fnI(a8, b5, c8, d6, m6, k4, s7) {
    return rotl(a8 + (c8 ^ (b5 | ~d6)) + m6 + k4 | 0, s7) + b5 | 0;
  }
  exports$2M = MD5;
  return exports$2M;
}
function dew$2K() {
  if (_dewExec$2K)
    return exports$2L;
  _dewExec$2K = true;
  var Buffer3 = buffer.Buffer;
  var inherits4 = dew$f();
  var HashBase = dew$2M();
  var ARRAY16 = new Array(16);
  var zl = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];
  var zr = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];
  var sl = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];
  var sr = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];
  var hl = [0, 1518500249, 1859775393, 2400959708, 2840853838];
  var hr = [1352829926, 1548603684, 1836072691, 2053994217, 0];
  function RIPEMD160() {
    HashBase.call(this, 64);
    this._a = 1732584193;
    this._b = 4023233417;
    this._c = 2562383102;
    this._d = 271733878;
    this._e = 3285377520;
  }
  inherits4(RIPEMD160, HashBase);
  RIPEMD160.prototype._update = function() {
    var words = ARRAY16;
    for (var j4 = 0; j4 < 16; ++j4)
      words[j4] = this._block.readInt32LE(j4 * 4);
    var al = this._a | 0;
    var bl = this._b | 0;
    var cl = this._c | 0;
    var dl = this._d | 0;
    var el = this._e | 0;
    var ar = this._a | 0;
    var br = this._b | 0;
    var cr = this._c | 0;
    var dr = this._d | 0;
    var er = this._e | 0;
    for (var i8 = 0; i8 < 80; i8 += 1) {
      var tl;
      var tr;
      if (i8 < 16) {
        tl = fn1(al, bl, cl, dl, el, words[zl[i8]], hl[0], sl[i8]);
        tr = fn5(ar, br, cr, dr, er, words[zr[i8]], hr[0], sr[i8]);
      } else if (i8 < 32) {
        tl = fn2(al, bl, cl, dl, el, words[zl[i8]], hl[1], sl[i8]);
        tr = fn4(ar, br, cr, dr, er, words[zr[i8]], hr[1], sr[i8]);
      } else if (i8 < 48) {
        tl = fn3(al, bl, cl, dl, el, words[zl[i8]], hl[2], sl[i8]);
        tr = fn3(ar, br, cr, dr, er, words[zr[i8]], hr[2], sr[i8]);
      } else if (i8 < 64) {
        tl = fn4(al, bl, cl, dl, el, words[zl[i8]], hl[3], sl[i8]);
        tr = fn2(ar, br, cr, dr, er, words[zr[i8]], hr[3], sr[i8]);
      } else {
        tl = fn5(al, bl, cl, dl, el, words[zl[i8]], hl[4], sl[i8]);
        tr = fn1(ar, br, cr, dr, er, words[zr[i8]], hr[4], sr[i8]);
      }
      al = el;
      el = dl;
      dl = rotl(cl, 10);
      cl = bl;
      bl = tl;
      ar = er;
      er = dr;
      dr = rotl(cr, 10);
      cr = br;
      br = tr;
    }
    var t8 = this._b + cl + dr | 0;
    this._b = this._c + dl + er | 0;
    this._c = this._d + el + ar | 0;
    this._d = this._e + al + br | 0;
    this._e = this._a + bl + cr | 0;
    this._a = t8;
  };
  RIPEMD160.prototype._digest = function() {
    this._block[this._blockOffset++] = 128;
    if (this._blockOffset > 56) {
      this._block.fill(0, this._blockOffset, 64);
      this._update();
      this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    var buffer2 = Buffer3.alloc ? Buffer3.alloc(20) : new Buffer3(20);
    buffer2.writeInt32LE(this._a, 0);
    buffer2.writeInt32LE(this._b, 4);
    buffer2.writeInt32LE(this._c, 8);
    buffer2.writeInt32LE(this._d, 12);
    buffer2.writeInt32LE(this._e, 16);
    return buffer2;
  };
  function rotl(x4, n9) {
    return x4 << n9 | x4 >>> 32 - n9;
  }
  function fn1(a8, b5, c8, d6, e11, m6, k4, s7) {
    return rotl(a8 + (b5 ^ c8 ^ d6) + m6 + k4 | 0, s7) + e11 | 0;
  }
  function fn2(a8, b5, c8, d6, e11, m6, k4, s7) {
    return rotl(a8 + (b5 & c8 | ~b5 & d6) + m6 + k4 | 0, s7) + e11 | 0;
  }
  function fn3(a8, b5, c8, d6, e11, m6, k4, s7) {
    return rotl(a8 + ((b5 | ~c8) ^ d6) + m6 + k4 | 0, s7) + e11 | 0;
  }
  function fn4(a8, b5, c8, d6, e11, m6, k4, s7) {
    return rotl(a8 + (b5 & d6 | c8 & ~d6) + m6 + k4 | 0, s7) + e11 | 0;
  }
  function fn5(a8, b5, c8, d6, e11, m6, k4, s7) {
    return rotl(a8 + (b5 ^ (c8 | ~d6)) + m6 + k4 | 0, s7) + e11 | 0;
  }
  exports$2L = RIPEMD160;
  return exports$2L;
}
function dew$2J() {
  if (_dewExec$2J)
    return exports$2K;
  _dewExec$2J = true;
  var Buffer3 = dew$2P().Buffer;
  function Hash2(blockSize, finalSize) {
    (this || _global$T)._block = Buffer3.alloc(blockSize);
    (this || _global$T)._finalSize = finalSize;
    (this || _global$T)._blockSize = blockSize;
    (this || _global$T)._len = 0;
  }
  Hash2.prototype.update = function(data, enc) {
    if (typeof data === "string") {
      enc = enc || "utf8";
      data = Buffer3.from(data, enc);
    }
    var block = (this || _global$T)._block;
    var blockSize = (this || _global$T)._blockSize;
    var length = data.length;
    var accum = (this || _global$T)._len;
    for (var offset = 0; offset < length; ) {
      var assigned = accum % blockSize;
      var remainder = Math.min(length - offset, blockSize - assigned);
      for (var i8 = 0; i8 < remainder; i8++) {
        block[assigned + i8] = data[offset + i8];
      }
      accum += remainder;
      offset += remainder;
      if (accum % blockSize === 0) {
        this._update(block);
      }
    }
    (this || _global$T)._len += length;
    return this || _global$T;
  };
  Hash2.prototype.digest = function(enc) {
    var rem = (this || _global$T)._len % (this || _global$T)._blockSize;
    (this || _global$T)._block[rem] = 128;
    (this || _global$T)._block.fill(0, rem + 1);
    if (rem >= (this || _global$T)._finalSize) {
      this._update((this || _global$T)._block);
      (this || _global$T)._block.fill(0);
    }
    var bits = (this || _global$T)._len * 8;
    if (bits <= 4294967295) {
      (this || _global$T)._block.writeUInt32BE(bits, (this || _global$T)._blockSize - 4);
    } else {
      var lowBits = (bits & 4294967295) >>> 0;
      var highBits = (bits - lowBits) / 4294967296;
      (this || _global$T)._block.writeUInt32BE(highBits, (this || _global$T)._blockSize - 8);
      (this || _global$T)._block.writeUInt32BE(lowBits, (this || _global$T)._blockSize - 4);
    }
    this._update((this || _global$T)._block);
    var hash = this._hash();
    return enc ? hash.toString(enc) : hash;
  };
  Hash2.prototype._update = function() {
    throw new Error("_update must be implemented by subclass");
  };
  exports$2K = Hash2;
  return exports$2K;
}
function dew$2I() {
  if (_dewExec$2I)
    return exports$2J;
  _dewExec$2I = true;
  var inherits4 = dew$f();
  var Hash2 = dew$2J();
  var Buffer3 = dew$2P().Buffer;
  var K3 = [1518500249, 1859775393, 2400959708 | 0, 3395469782 | 0];
  var W3 = new Array(80);
  function Sha() {
    this.init();
    (this || _global$S)._w = W3;
    Hash2.call(this || _global$S, 64, 56);
  }
  inherits4(Sha, Hash2);
  Sha.prototype.init = function() {
    (this || _global$S)._a = 1732584193;
    (this || _global$S)._b = 4023233417;
    (this || _global$S)._c = 2562383102;
    (this || _global$S)._d = 271733878;
    (this || _global$S)._e = 3285377520;
    return this || _global$S;
  };
  function rotl5(num) {
    return num << 5 | num >>> 27;
  }
  function rotl30(num) {
    return num << 30 | num >>> 2;
  }
  function ft(s7, b5, c8, d6) {
    if (s7 === 0)
      return b5 & c8 | ~b5 & d6;
    if (s7 === 2)
      return b5 & c8 | b5 & d6 | c8 & d6;
    return b5 ^ c8 ^ d6;
  }
  Sha.prototype._update = function(M4) {
    var W4 = (this || _global$S)._w;
    var a8 = (this || _global$S)._a | 0;
    var b5 = (this || _global$S)._b | 0;
    var c8 = (this || _global$S)._c | 0;
    var d6 = (this || _global$S)._d | 0;
    var e11 = (this || _global$S)._e | 0;
    for (var i8 = 0; i8 < 16; ++i8)
      W4[i8] = M4.readInt32BE(i8 * 4);
    for (; i8 < 80; ++i8)
      W4[i8] = W4[i8 - 3] ^ W4[i8 - 8] ^ W4[i8 - 14] ^ W4[i8 - 16];
    for (var j4 = 0; j4 < 80; ++j4) {
      var s7 = ~~(j4 / 20);
      var t8 = rotl5(a8) + ft(s7, b5, c8, d6) + e11 + W4[j4] + K3[s7] | 0;
      e11 = d6;
      d6 = c8;
      c8 = rotl30(b5);
      b5 = a8;
      a8 = t8;
    }
    (this || _global$S)._a = a8 + (this || _global$S)._a | 0;
    (this || _global$S)._b = b5 + (this || _global$S)._b | 0;
    (this || _global$S)._c = c8 + (this || _global$S)._c | 0;
    (this || _global$S)._d = d6 + (this || _global$S)._d | 0;
    (this || _global$S)._e = e11 + (this || _global$S)._e | 0;
  };
  Sha.prototype._hash = function() {
    var H3 = Buffer3.allocUnsafe(20);
    H3.writeInt32BE((this || _global$S)._a | 0, 0);
    H3.writeInt32BE((this || _global$S)._b | 0, 4);
    H3.writeInt32BE((this || _global$S)._c | 0, 8);
    H3.writeInt32BE((this || _global$S)._d | 0, 12);
    H3.writeInt32BE((this || _global$S)._e | 0, 16);
    return H3;
  };
  exports$2J = Sha;
  return exports$2J;
}
function dew$2H() {
  if (_dewExec$2H)
    return exports$2I;
  _dewExec$2H = true;
  var inherits4 = dew$f();
  var Hash2 = dew$2J();
  var Buffer3 = dew$2P().Buffer;
  var K3 = [1518500249, 1859775393, 2400959708 | 0, 3395469782 | 0];
  var W3 = new Array(80);
  function Sha1() {
    this.init();
    (this || _global$R)._w = W3;
    Hash2.call(this || _global$R, 64, 56);
  }
  inherits4(Sha1, Hash2);
  Sha1.prototype.init = function() {
    (this || _global$R)._a = 1732584193;
    (this || _global$R)._b = 4023233417;
    (this || _global$R)._c = 2562383102;
    (this || _global$R)._d = 271733878;
    (this || _global$R)._e = 3285377520;
    return this || _global$R;
  };
  function rotl1(num) {
    return num << 1 | num >>> 31;
  }
  function rotl5(num) {
    return num << 5 | num >>> 27;
  }
  function rotl30(num) {
    return num << 30 | num >>> 2;
  }
  function ft(s7, b5, c8, d6) {
    if (s7 === 0)
      return b5 & c8 | ~b5 & d6;
    if (s7 === 2)
      return b5 & c8 | b5 & d6 | c8 & d6;
    return b5 ^ c8 ^ d6;
  }
  Sha1.prototype._update = function(M4) {
    var W4 = (this || _global$R)._w;
    var a8 = (this || _global$R)._a | 0;
    var b5 = (this || _global$R)._b | 0;
    var c8 = (this || _global$R)._c | 0;
    var d6 = (this || _global$R)._d | 0;
    var e11 = (this || _global$R)._e | 0;
    for (var i8 = 0; i8 < 16; ++i8)
      W4[i8] = M4.readInt32BE(i8 * 4);
    for (; i8 < 80; ++i8)
      W4[i8] = rotl1(W4[i8 - 3] ^ W4[i8 - 8] ^ W4[i8 - 14] ^ W4[i8 - 16]);
    for (var j4 = 0; j4 < 80; ++j4) {
      var s7 = ~~(j4 / 20);
      var t8 = rotl5(a8) + ft(s7, b5, c8, d6) + e11 + W4[j4] + K3[s7] | 0;
      e11 = d6;
      d6 = c8;
      c8 = rotl30(b5);
      b5 = a8;
      a8 = t8;
    }
    (this || _global$R)._a = a8 + (this || _global$R)._a | 0;
    (this || _global$R)._b = b5 + (this || _global$R)._b | 0;
    (this || _global$R)._c = c8 + (this || _global$R)._c | 0;
    (this || _global$R)._d = d6 + (this || _global$R)._d | 0;
    (this || _global$R)._e = e11 + (this || _global$R)._e | 0;
  };
  Sha1.prototype._hash = function() {
    var H3 = Buffer3.allocUnsafe(20);
    H3.writeInt32BE((this || _global$R)._a | 0, 0);
    H3.writeInt32BE((this || _global$R)._b | 0, 4);
    H3.writeInt32BE((this || _global$R)._c | 0, 8);
    H3.writeInt32BE((this || _global$R)._d | 0, 12);
    H3.writeInt32BE((this || _global$R)._e | 0, 16);
    return H3;
  };
  exports$2I = Sha1;
  return exports$2I;
}
function dew$2G() {
  if (_dewExec$2G)
    return exports$2H;
  _dewExec$2G = true;
  var inherits4 = dew$f();
  var Hash2 = dew$2J();
  var Buffer3 = dew$2P().Buffer;
  var K3 = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298];
  var W3 = new Array(64);
  function Sha256() {
    this.init();
    (this || _global$Q)._w = W3;
    Hash2.call(this || _global$Q, 64, 56);
  }
  inherits4(Sha256, Hash2);
  Sha256.prototype.init = function() {
    (this || _global$Q)._a = 1779033703;
    (this || _global$Q)._b = 3144134277;
    (this || _global$Q)._c = 1013904242;
    (this || _global$Q)._d = 2773480762;
    (this || _global$Q)._e = 1359893119;
    (this || _global$Q)._f = 2600822924;
    (this || _global$Q)._g = 528734635;
    (this || _global$Q)._h = 1541459225;
    return this || _global$Q;
  };
  function ch(x4, y6, z5) {
    return z5 ^ x4 & (y6 ^ z5);
  }
  function maj(x4, y6, z5) {
    return x4 & y6 | z5 & (x4 | y6);
  }
  function sigma0(x4) {
    return (x4 >>> 2 | x4 << 30) ^ (x4 >>> 13 | x4 << 19) ^ (x4 >>> 22 | x4 << 10);
  }
  function sigma1(x4) {
    return (x4 >>> 6 | x4 << 26) ^ (x4 >>> 11 | x4 << 21) ^ (x4 >>> 25 | x4 << 7);
  }
  function gamma0(x4) {
    return (x4 >>> 7 | x4 << 25) ^ (x4 >>> 18 | x4 << 14) ^ x4 >>> 3;
  }
  function gamma1(x4) {
    return (x4 >>> 17 | x4 << 15) ^ (x4 >>> 19 | x4 << 13) ^ x4 >>> 10;
  }
  Sha256.prototype._update = function(M4) {
    var W4 = (this || _global$Q)._w;
    var a8 = (this || _global$Q)._a | 0;
    var b5 = (this || _global$Q)._b | 0;
    var c8 = (this || _global$Q)._c | 0;
    var d6 = (this || _global$Q)._d | 0;
    var e11 = (this || _global$Q)._e | 0;
    var f9 = (this || _global$Q)._f | 0;
    var g5 = (this || _global$Q)._g | 0;
    var h8 = (this || _global$Q)._h | 0;
    for (var i8 = 0; i8 < 16; ++i8)
      W4[i8] = M4.readInt32BE(i8 * 4);
    for (; i8 < 64; ++i8)
      W4[i8] = gamma1(W4[i8 - 2]) + W4[i8 - 7] + gamma0(W4[i8 - 15]) + W4[i8 - 16] | 0;
    for (var j4 = 0; j4 < 64; ++j4) {
      var T1 = h8 + sigma1(e11) + ch(e11, f9, g5) + K3[j4] + W4[j4] | 0;
      var T22 = sigma0(a8) + maj(a8, b5, c8) | 0;
      h8 = g5;
      g5 = f9;
      f9 = e11;
      e11 = d6 + T1 | 0;
      d6 = c8;
      c8 = b5;
      b5 = a8;
      a8 = T1 + T22 | 0;
    }
    (this || _global$Q)._a = a8 + (this || _global$Q)._a | 0;
    (this || _global$Q)._b = b5 + (this || _global$Q)._b | 0;
    (this || _global$Q)._c = c8 + (this || _global$Q)._c | 0;
    (this || _global$Q)._d = d6 + (this || _global$Q)._d | 0;
    (this || _global$Q)._e = e11 + (this || _global$Q)._e | 0;
    (this || _global$Q)._f = f9 + (this || _global$Q)._f | 0;
    (this || _global$Q)._g = g5 + (this || _global$Q)._g | 0;
    (this || _global$Q)._h = h8 + (this || _global$Q)._h | 0;
  };
  Sha256.prototype._hash = function() {
    var H3 = Buffer3.allocUnsafe(32);
    H3.writeInt32BE((this || _global$Q)._a, 0);
    H3.writeInt32BE((this || _global$Q)._b, 4);
    H3.writeInt32BE((this || _global$Q)._c, 8);
    H3.writeInt32BE((this || _global$Q)._d, 12);
    H3.writeInt32BE((this || _global$Q)._e, 16);
    H3.writeInt32BE((this || _global$Q)._f, 20);
    H3.writeInt32BE((this || _global$Q)._g, 24);
    H3.writeInt32BE((this || _global$Q)._h, 28);
    return H3;
  };
  exports$2H = Sha256;
  return exports$2H;
}
function dew$2F() {
  if (_dewExec$2F)
    return exports$2G;
  _dewExec$2F = true;
  var inherits4 = dew$f();
  var Sha256 = dew$2G();
  var Hash2 = dew$2J();
  var Buffer3 = dew$2P().Buffer;
  var W3 = new Array(64);
  function Sha224() {
    this.init();
    (this || _global$P)._w = W3;
    Hash2.call(this || _global$P, 64, 56);
  }
  inherits4(Sha224, Sha256);
  Sha224.prototype.init = function() {
    (this || _global$P)._a = 3238371032;
    (this || _global$P)._b = 914150663;
    (this || _global$P)._c = 812702999;
    (this || _global$P)._d = 4144912697;
    (this || _global$P)._e = 4290775857;
    (this || _global$P)._f = 1750603025;
    (this || _global$P)._g = 1694076839;
    (this || _global$P)._h = 3204075428;
    return this || _global$P;
  };
  Sha224.prototype._hash = function() {
    var H3 = Buffer3.allocUnsafe(28);
    H3.writeInt32BE((this || _global$P)._a, 0);
    H3.writeInt32BE((this || _global$P)._b, 4);
    H3.writeInt32BE((this || _global$P)._c, 8);
    H3.writeInt32BE((this || _global$P)._d, 12);
    H3.writeInt32BE((this || _global$P)._e, 16);
    H3.writeInt32BE((this || _global$P)._f, 20);
    H3.writeInt32BE((this || _global$P)._g, 24);
    return H3;
  };
  exports$2G = Sha224;
  return exports$2G;
}
function dew$2E() {
  if (_dewExec$2E)
    return exports$2F;
  _dewExec$2E = true;
  var inherits4 = dew$f();
  var Hash2 = dew$2J();
  var Buffer3 = dew$2P().Buffer;
  var K3 = [1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591];
  var W3 = new Array(160);
  function Sha512() {
    this.init();
    (this || _global$O)._w = W3;
    Hash2.call(this || _global$O, 128, 112);
  }
  inherits4(Sha512, Hash2);
  Sha512.prototype.init = function() {
    (this || _global$O)._ah = 1779033703;
    (this || _global$O)._bh = 3144134277;
    (this || _global$O)._ch = 1013904242;
    (this || _global$O)._dh = 2773480762;
    (this || _global$O)._eh = 1359893119;
    (this || _global$O)._fh = 2600822924;
    (this || _global$O)._gh = 528734635;
    (this || _global$O)._hh = 1541459225;
    (this || _global$O)._al = 4089235720;
    (this || _global$O)._bl = 2227873595;
    (this || _global$O)._cl = 4271175723;
    (this || _global$O)._dl = 1595750129;
    (this || _global$O)._el = 2917565137;
    (this || _global$O)._fl = 725511199;
    (this || _global$O)._gl = 4215389547;
    (this || _global$O)._hl = 327033209;
    return this || _global$O;
  };
  function Ch(x4, y6, z5) {
    return z5 ^ x4 & (y6 ^ z5);
  }
  function maj(x4, y6, z5) {
    return x4 & y6 | z5 & (x4 | y6);
  }
  function sigma0(x4, xl) {
    return (x4 >>> 28 | xl << 4) ^ (xl >>> 2 | x4 << 30) ^ (xl >>> 7 | x4 << 25);
  }
  function sigma1(x4, xl) {
    return (x4 >>> 14 | xl << 18) ^ (x4 >>> 18 | xl << 14) ^ (xl >>> 9 | x4 << 23);
  }
  function Gamma0(x4, xl) {
    return (x4 >>> 1 | xl << 31) ^ (x4 >>> 8 | xl << 24) ^ x4 >>> 7;
  }
  function Gamma0l(x4, xl) {
    return (x4 >>> 1 | xl << 31) ^ (x4 >>> 8 | xl << 24) ^ (x4 >>> 7 | xl << 25);
  }
  function Gamma1(x4, xl) {
    return (x4 >>> 19 | xl << 13) ^ (xl >>> 29 | x4 << 3) ^ x4 >>> 6;
  }
  function Gamma1l(x4, xl) {
    return (x4 >>> 19 | xl << 13) ^ (xl >>> 29 | x4 << 3) ^ (x4 >>> 6 | xl << 26);
  }
  function getCarry(a8, b5) {
    return a8 >>> 0 < b5 >>> 0 ? 1 : 0;
  }
  Sha512.prototype._update = function(M4) {
    var W4 = (this || _global$O)._w;
    var ah = (this || _global$O)._ah | 0;
    var bh = (this || _global$O)._bh | 0;
    var ch = (this || _global$O)._ch | 0;
    var dh = (this || _global$O)._dh | 0;
    var eh = (this || _global$O)._eh | 0;
    var fh = (this || _global$O)._fh | 0;
    var gh = (this || _global$O)._gh | 0;
    var hh = (this || _global$O)._hh | 0;
    var al = (this || _global$O)._al | 0;
    var bl = (this || _global$O)._bl | 0;
    var cl = (this || _global$O)._cl | 0;
    var dl = (this || _global$O)._dl | 0;
    var el = (this || _global$O)._el | 0;
    var fl = (this || _global$O)._fl | 0;
    var gl = (this || _global$O)._gl | 0;
    var hl = (this || _global$O)._hl | 0;
    for (var i8 = 0; i8 < 32; i8 += 2) {
      W4[i8] = M4.readInt32BE(i8 * 4);
      W4[i8 + 1] = M4.readInt32BE(i8 * 4 + 4);
    }
    for (; i8 < 160; i8 += 2) {
      var xh = W4[i8 - 15 * 2];
      var xl = W4[i8 - 15 * 2 + 1];
      var gamma0 = Gamma0(xh, xl);
      var gamma0l = Gamma0l(xl, xh);
      xh = W4[i8 - 2 * 2];
      xl = W4[i8 - 2 * 2 + 1];
      var gamma1 = Gamma1(xh, xl);
      var gamma1l = Gamma1l(xl, xh);
      var Wi7h = W4[i8 - 7 * 2];
      var Wi7l = W4[i8 - 7 * 2 + 1];
      var Wi16h = W4[i8 - 16 * 2];
      var Wi16l = W4[i8 - 16 * 2 + 1];
      var Wil = gamma0l + Wi7l | 0;
      var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;
      Wil = Wil + gamma1l | 0;
      Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;
      Wil = Wil + Wi16l | 0;
      Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;
      W4[i8] = Wih;
      W4[i8 + 1] = Wil;
    }
    for (var j4 = 0; j4 < 160; j4 += 2) {
      Wih = W4[j4];
      Wil = W4[j4 + 1];
      var majh = maj(ah, bh, ch);
      var majl = maj(al, bl, cl);
      var sigma0h = sigma0(ah, al);
      var sigma0l = sigma0(al, ah);
      var sigma1h = sigma1(eh, el);
      var sigma1l = sigma1(el, eh);
      var Kih = K3[j4];
      var Kil = K3[j4 + 1];
      var chh = Ch(eh, fh, gh);
      var chl = Ch(el, fl, gl);
      var t1l = hl + sigma1l | 0;
      var t1h = hh + sigma1h + getCarry(t1l, hl) | 0;
      t1l = t1l + chl | 0;
      t1h = t1h + chh + getCarry(t1l, chl) | 0;
      t1l = t1l + Kil | 0;
      t1h = t1h + Kih + getCarry(t1l, Kil) | 0;
      t1l = t1l + Wil | 0;
      t1h = t1h + Wih + getCarry(t1l, Wil) | 0;
      var t2l = sigma0l + majl | 0;
      var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;
      hh = gh;
      hl = gl;
      gh = fh;
      gl = fl;
      fh = eh;
      fl = el;
      el = dl + t1l | 0;
      eh = dh + t1h + getCarry(el, dl) | 0;
      dh = ch;
      dl = cl;
      ch = bh;
      cl = bl;
      bh = ah;
      bl = al;
      al = t1l + t2l | 0;
      ah = t1h + t2h + getCarry(al, t1l) | 0;
    }
    (this || _global$O)._al = (this || _global$O)._al + al | 0;
    (this || _global$O)._bl = (this || _global$O)._bl + bl | 0;
    (this || _global$O)._cl = (this || _global$O)._cl + cl | 0;
    (this || _global$O)._dl = (this || _global$O)._dl + dl | 0;
    (this || _global$O)._el = (this || _global$O)._el + el | 0;
    (this || _global$O)._fl = (this || _global$O)._fl + fl | 0;
    (this || _global$O)._gl = (this || _global$O)._gl + gl | 0;
    (this || _global$O)._hl = (this || _global$O)._hl + hl | 0;
    (this || _global$O)._ah = (this || _global$O)._ah + ah + getCarry((this || _global$O)._al, al) | 0;
    (this || _global$O)._bh = (this || _global$O)._bh + bh + getCarry((this || _global$O)._bl, bl) | 0;
    (this || _global$O)._ch = (this || _global$O)._ch + ch + getCarry((this || _global$O)._cl, cl) | 0;
    (this || _global$O)._dh = (this || _global$O)._dh + dh + getCarry((this || _global$O)._dl, dl) | 0;
    (this || _global$O)._eh = (this || _global$O)._eh + eh + getCarry((this || _global$O)._el, el) | 0;
    (this || _global$O)._fh = (this || _global$O)._fh + fh + getCarry((this || _global$O)._fl, fl) | 0;
    (this || _global$O)._gh = (this || _global$O)._gh + gh + getCarry((this || _global$O)._gl, gl) | 0;
    (this || _global$O)._hh = (this || _global$O)._hh + hh + getCarry((this || _global$O)._hl, hl) | 0;
  };
  Sha512.prototype._hash = function() {
    var H3 = Buffer3.allocUnsafe(64);
    function writeInt64BE(h8, l8, offset) {
      H3.writeInt32BE(h8, offset);
      H3.writeInt32BE(l8, offset + 4);
    }
    writeInt64BE((this || _global$O)._ah, (this || _global$O)._al, 0);
    writeInt64BE((this || _global$O)._bh, (this || _global$O)._bl, 8);
    writeInt64BE((this || _global$O)._ch, (this || _global$O)._cl, 16);
    writeInt64BE((this || _global$O)._dh, (this || _global$O)._dl, 24);
    writeInt64BE((this || _global$O)._eh, (this || _global$O)._el, 32);
    writeInt64BE((this || _global$O)._fh, (this || _global$O)._fl, 40);
    writeInt64BE((this || _global$O)._gh, (this || _global$O)._gl, 48);
    writeInt64BE((this || _global$O)._hh, (this || _global$O)._hl, 56);
    return H3;
  };
  exports$2F = Sha512;
  return exports$2F;
}
function dew$2D() {
  if (_dewExec$2D)
    return exports$2E;
  _dewExec$2D = true;
  var inherits4 = dew$f();
  var SHA512 = dew$2E();
  var Hash2 = dew$2J();
  var Buffer3 = dew$2P().Buffer;
  var W3 = new Array(160);
  function Sha384() {
    this.init();
    (this || _global$N)._w = W3;
    Hash2.call(this || _global$N, 128, 112);
  }
  inherits4(Sha384, SHA512);
  Sha384.prototype.init = function() {
    (this || _global$N)._ah = 3418070365;
    (this || _global$N)._bh = 1654270250;
    (this || _global$N)._ch = 2438529370;
    (this || _global$N)._dh = 355462360;
    (this || _global$N)._eh = 1731405415;
    (this || _global$N)._fh = 2394180231;
    (this || _global$N)._gh = 3675008525;
    (this || _global$N)._hh = 1203062813;
    (this || _global$N)._al = 3238371032;
    (this || _global$N)._bl = 914150663;
    (this || _global$N)._cl = 812702999;
    (this || _global$N)._dl = 4144912697;
    (this || _global$N)._el = 4290775857;
    (this || _global$N)._fl = 1750603025;
    (this || _global$N)._gl = 1694076839;
    (this || _global$N)._hl = 3204075428;
    return this || _global$N;
  };
  Sha384.prototype._hash = function() {
    var H3 = Buffer3.allocUnsafe(48);
    function writeInt64BE(h8, l8, offset) {
      H3.writeInt32BE(h8, offset);
      H3.writeInt32BE(l8, offset + 4);
    }
    writeInt64BE((this || _global$N)._ah, (this || _global$N)._al, 0);
    writeInt64BE((this || _global$N)._bh, (this || _global$N)._bl, 8);
    writeInt64BE((this || _global$N)._ch, (this || _global$N)._cl, 16);
    writeInt64BE((this || _global$N)._dh, (this || _global$N)._dl, 24);
    writeInt64BE((this || _global$N)._eh, (this || _global$N)._el, 32);
    writeInt64BE((this || _global$N)._fh, (this || _global$N)._fl, 40);
    return H3;
  };
  exports$2E = Sha384;
  return exports$2E;
}
function dew$2C() {
  if (_dewExec$2C)
    return module$b.exports;
  _dewExec$2C = true;
  var exports11 = module$b.exports = function SHA(algorithm) {
    algorithm = algorithm.toLowerCase();
    var Algorithm = exports11[algorithm];
    if (!Algorithm)
      throw new Error(algorithm + " is not supported (we accept pull requests)");
    return new Algorithm();
  };
  exports11.sha = dew$2I();
  exports11.sha1 = dew$2H();
  exports11.sha224 = dew$2F();
  exports11.sha256 = dew$2G();
  exports11.sha384 = dew$2D();
  exports11.sha512 = dew$2E();
  return module$b.exports;
}
function dew$f$2() {
  if (_dewExec$f$2)
    return exports$f$2;
  _dewExec$f$2 = true;
  if (typeof Object.create === "function") {
    exports$f$2 = function inherits4(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      }
    };
  } else {
    exports$f$2 = function inherits4(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
    };
  }
  return exports$f$2;
}
function dew$e$2() {
  if (_dewExec$e$2)
    return exports$e$2;
  _dewExec$e$2 = true;
  exports$e$2 = y.EventEmitter;
  return exports$e$2;
}
function dew$d$2() {
  if (_dewExec$d$2)
    return exports$d$2;
  _dewExec$d$2 = true;
  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread(target) {
    for (var i8 = 1; i8 < arguments.length; i8++) {
      var source = arguments[i8] != null ? arguments[i8] : {};
      if (i8 % 2) {
        ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties(target, props) {
    for (var i8 = 0; i8 < props.length; i8++) {
      var descriptor = props[i8];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties(Constructor, staticProps);
    return Constructor;
  }
  var _require = e$1$1, Buffer3 = _require.Buffer;
  var _require2 = X, inspect3 = _require2.inspect;
  var custom2 = inspect3 && inspect3.custom || "inspect";
  function copyBuffer(src, target, offset) {
    Buffer3.prototype.copy.call(src, target, offset);
  }
  exports$d$2 = /* @__PURE__ */ function() {
    function BufferList() {
      _classCallCheck(this, BufferList);
      this.head = null;
      this.tail = null;
      this.length = 0;
    }
    _createClass(BufferList, [{
      key: "push",
      value: function push(v6) {
        var entry = {
          data: v6,
          next: null
        };
        if (this.length > 0)
          this.tail.next = entry;
        else
          this.head = entry;
        this.tail = entry;
        ++this.length;
      }
    }, {
      key: "unshift",
      value: function unshift(v6) {
        var entry = {
          data: v6,
          next: this.head
        };
        if (this.length === 0)
          this.tail = entry;
        this.head = entry;
        ++this.length;
      }
    }, {
      key: "shift",
      value: function shift() {
        if (this.length === 0)
          return;
        var ret = this.head.data;
        if (this.length === 1)
          this.head = this.tail = null;
        else
          this.head = this.head.next;
        --this.length;
        return ret;
      }
    }, {
      key: "clear",
      value: function clear() {
        this.head = this.tail = null;
        this.length = 0;
      }
    }, {
      key: "join",
      value: function join(s7) {
        if (this.length === 0)
          return "";
        var p8 = this.head;
        var ret = "" + p8.data;
        while (p8 = p8.next) {
          ret += s7 + p8.data;
        }
        return ret;
      }
    }, {
      key: "concat",
      value: function concat(n9) {
        if (this.length === 0)
          return Buffer3.alloc(0);
        var ret = Buffer3.allocUnsafe(n9 >>> 0);
        var p8 = this.head;
        var i8 = 0;
        while (p8) {
          copyBuffer(p8.data, ret, i8);
          i8 += p8.data.length;
          p8 = p8.next;
        }
        return ret;
      }
    }, {
      key: "consume",
      value: function consume(n9, hasStrings) {
        var ret;
        if (n9 < this.head.data.length) {
          ret = this.head.data.slice(0, n9);
          this.head.data = this.head.data.slice(n9);
        } else if (n9 === this.head.data.length) {
          ret = this.shift();
        } else {
          ret = hasStrings ? this._getString(n9) : this._getBuffer(n9);
        }
        return ret;
      }
    }, {
      key: "first",
      value: function first() {
        return this.head.data;
      }
    }, {
      key: "_getString",
      value: function _getString(n9) {
        var p8 = this.head;
        var c8 = 1;
        var ret = p8.data;
        n9 -= ret.length;
        while (p8 = p8.next) {
          var str = p8.data;
          var nb = n9 > str.length ? str.length : n9;
          if (nb === str.length)
            ret += str;
          else
            ret += str.slice(0, n9);
          n9 -= nb;
          if (n9 === 0) {
            if (nb === str.length) {
              ++c8;
              if (p8.next)
                this.head = p8.next;
              else
                this.head = this.tail = null;
            } else {
              this.head = p8;
              p8.data = str.slice(nb);
            }
            break;
          }
          ++c8;
        }
        this.length -= c8;
        return ret;
      }
    }, {
      key: "_getBuffer",
      value: function _getBuffer(n9) {
        var ret = Buffer3.allocUnsafe(n9);
        var p8 = this.head;
        var c8 = 1;
        p8.data.copy(ret);
        n9 -= p8.data.length;
        while (p8 = p8.next) {
          var buf = p8.data;
          var nb = n9 > buf.length ? buf.length : n9;
          buf.copy(ret, ret.length - n9, 0, nb);
          n9 -= nb;
          if (n9 === 0) {
            if (nb === buf.length) {
              ++c8;
              if (p8.next)
                this.head = p8.next;
              else
                this.head = this.tail = null;
            } else {
              this.head = p8;
              p8.data = buf.slice(nb);
            }
            break;
          }
          ++c8;
        }
        this.length -= c8;
        return ret;
      }
    }, {
      key: custom2,
      value: function value(_4, options) {
        return inspect3(this, _objectSpread({}, options, {
          depth: 0,
          customInspect: false
        }));
      }
    }]);
    return BufferList;
  }();
  return exports$d$2;
}
function dew$c$2() {
  if (_dewExec$c$2)
    return exports$c$2;
  _dewExec$c$2 = true;
  var process3 = T;
  function destroy(err, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
      if (cb) {
        cb(err);
      } else if (err) {
        if (!this._writableState) {
          process3.nextTick(emitErrorNT, this, err);
        } else if (!this._writableState.errorEmitted) {
          this._writableState.errorEmitted = true;
          process3.nextTick(emitErrorNT, this, err);
        }
      }
      return this;
    }
    if (this._readableState) {
      this._readableState.destroyed = true;
    }
    if (this._writableState) {
      this._writableState.destroyed = true;
    }
    this._destroy(err || null, function(err2) {
      if (!cb && err2) {
        if (!_this._writableState) {
          process3.nextTick(emitErrorAndCloseNT, _this, err2);
        } else if (!_this._writableState.errorEmitted) {
          _this._writableState.errorEmitted = true;
          process3.nextTick(emitErrorAndCloseNT, _this, err2);
        } else {
          process3.nextTick(emitCloseNT, _this);
        }
      } else if (cb) {
        process3.nextTick(emitCloseNT, _this);
        cb(err2);
      } else {
        process3.nextTick(emitCloseNT, _this);
      }
    });
    return this;
  }
  function emitErrorAndCloseNT(self2, err) {
    emitErrorNT(self2, err);
    emitCloseNT(self2);
  }
  function emitCloseNT(self2) {
    if (self2._writableState && !self2._writableState.emitClose)
      return;
    if (self2._readableState && !self2._readableState.emitClose)
      return;
    self2.emit("close");
  }
  function undestroy() {
    if (this._readableState) {
      this._readableState.destroyed = false;
      this._readableState.reading = false;
      this._readableState.ended = false;
      this._readableState.endEmitted = false;
    }
    if (this._writableState) {
      this._writableState.destroyed = false;
      this._writableState.ended = false;
      this._writableState.ending = false;
      this._writableState.finalCalled = false;
      this._writableState.prefinished = false;
      this._writableState.finished = false;
      this._writableState.errorEmitted = false;
    }
  }
  function emitErrorNT(self2, err) {
    self2.emit("error", err);
  }
  function errorOrDestroy(stream2, err) {
    var rState = stream2._readableState;
    var wState = stream2._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy)
      stream2.destroy(err);
    else
      stream2.emit("error", err);
  }
  exports$c$2 = {
    destroy,
    undestroy,
    errorOrDestroy
  };
  return exports$c$2;
}
function dew$b$2() {
  if (_dewExec$b$2)
    return exports$b$2;
  _dewExec$b$2 = true;
  const codes = {};
  function createErrorType(code, message, Base) {
    if (!Base) {
      Base = Error;
    }
    function getMessage(arg1, arg2, arg3) {
      if (typeof message === "string") {
        return message;
      } else {
        return message(arg1, arg2, arg3);
      }
    }
    class NodeError extends Base {
      constructor(arg1, arg2, arg3) {
        super(getMessage(arg1, arg2, arg3));
      }
    }
    NodeError.prototype.name = Base.name;
    NodeError.prototype.code = code;
    codes[code] = NodeError;
  }
  function oneOf(expected, thing) {
    if (Array.isArray(expected)) {
      const len = expected.length;
      expected = expected.map((i8) => String(i8));
      if (len > 2) {
        return `one of ${thing} ${expected.slice(0, len - 1).join(", ")}, or ` + expected[len - 1];
      } else if (len === 2) {
        return `one of ${thing} ${expected[0]} or ${expected[1]}`;
      } else {
        return `of ${thing} ${expected[0]}`;
      }
    } else {
      return `of ${thing} ${String(expected)}`;
    }
  }
  function startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
  }
  function endsWith2(str, search, this_len) {
    if (this_len === void 0 || this_len > str.length) {
      this_len = str.length;
    }
    return str.substring(this_len - search.length, this_len) === search;
  }
  function includes(str, search, start) {
    if (typeof start !== "number") {
      start = 0;
    }
    if (start + search.length > str.length) {
      return false;
    } else {
      return str.indexOf(search, start) !== -1;
    }
  }
  createErrorType("ERR_INVALID_OPT_VALUE", function(name2, value) {
    return 'The value "' + value + '" is invalid for option "' + name2 + '"';
  }, TypeError);
  createErrorType("ERR_INVALID_ARG_TYPE", function(name2, expected, actual) {
    let determiner;
    if (typeof expected === "string" && startsWith(expected, "not ")) {
      determiner = "must not be";
      expected = expected.replace(/^not /, "");
    } else {
      determiner = "must be";
    }
    let msg;
    if (endsWith2(name2, " argument")) {
      msg = `The ${name2} ${determiner} ${oneOf(expected, "type")}`;
    } else {
      const type = includes(name2, ".") ? "property" : "argument";
      msg = `The "${name2}" ${type} ${determiner} ${oneOf(expected, "type")}`;
    }
    msg += `. Received type ${typeof actual}`;
    return msg;
  }, TypeError);
  createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
  createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name2) {
    return "The " + name2 + " method is not implemented";
  });
  createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
  createErrorType("ERR_STREAM_DESTROYED", function(name2) {
    return "Cannot call " + name2 + " after a stream was destroyed";
  });
  createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
  createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
  createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
  createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
  createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
    return "Unknown encoding: " + arg;
  }, TypeError);
  createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
  exports$b$2.codes = codes;
  return exports$b$2;
}
function dew$a$2() {
  if (_dewExec$a$2)
    return exports$a$2;
  _dewExec$a$2 = true;
  var ERR_INVALID_OPT_VALUE = dew$b$2().codes.ERR_INVALID_OPT_VALUE;
  function highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
  }
  function getHighWaterMark(state, options, duplexKey, isDuplex) {
    var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
    if (hwm != null) {
      if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
        var name2 = isDuplex ? duplexKey : "highWaterMark";
        throw new ERR_INVALID_OPT_VALUE(name2, hwm);
      }
      return Math.floor(hwm);
    }
    return state.objectMode ? 16 : 16 * 1024;
  }
  exports$a$2 = {
    getHighWaterMark
  };
  return exports$a$2;
}
function dew$9$2() {
  if (_dewExec$9$2)
    return exports$9$2;
  _dewExec$9$2 = true;
  exports$9$2 = deprecate3;
  function deprecate3(fn, msg) {
    if (config2("noDeprecation")) {
      return fn;
    }
    var warned = false;
    function deprecated() {
      if (!warned) {
        if (config2("throwDeprecation")) {
          throw new Error(msg);
        } else if (config2("traceDeprecation")) {
          console.trace(msg);
        } else {
          console.warn(msg);
        }
        warned = true;
      }
      return fn.apply(this || _global$2$2, arguments);
    }
    return deprecated;
  }
  function config2(name2) {
    try {
      if (!_global$2$2.localStorage)
        return false;
    } catch (_4) {
      return false;
    }
    var val = _global$2$2.localStorage[name2];
    if (null == val)
      return false;
    return String(val).toLowerCase() === "true";
  }
  return exports$9$2;
}
function dew$8$2() {
  if (_dewExec$8$2)
    return exports$8$2;
  _dewExec$8$2 = true;
  var process3 = T;
  exports$8$2 = Writable2;
  function CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
      onCorkedFinish(_this, state);
    };
  }
  var Duplex2;
  Writable2.WritableState = WritableState;
  var internalUtil = {
    deprecate: dew$9$2()
  };
  var Stream2 = dew$e$2();
  var Buffer3 = e$1$1.Buffer;
  var OurUint8Array = _global$1$2.Uint8Array || function() {
  };
  function _uint8ArrayToBuffer(chunk) {
    return Buffer3.from(chunk);
  }
  function _isUint8Array(obj) {
    return Buffer3.isBuffer(obj) || obj instanceof OurUint8Array;
  }
  var destroyImpl = dew$c$2();
  var _require = dew$a$2(), getHighWaterMark = _require.getHighWaterMark;
  var _require$codes = dew$b$2().codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED, ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES, ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END, ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
  var errorOrDestroy = destroyImpl.errorOrDestroy;
  dew$f$2()(Writable2, Stream2);
  function nop() {
  }
  function WritableState(options, stream2, isDuplex) {
    Duplex2 = Duplex2 || dew$7$2();
    options = options || {};
    if (typeof isDuplex !== "boolean")
      isDuplex = stream2 instanceof Duplex2;
    this.objectMode = !!options.objectMode;
    if (isDuplex)
      this.objectMode = this.objectMode || !!options.writableObjectMode;
    this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
    this.finalCalled = false;
    this.needDrain = false;
    this.ending = false;
    this.ended = false;
    this.finished = false;
    this.destroyed = false;
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;
    this.defaultEncoding = options.defaultEncoding || "utf8";
    this.length = 0;
    this.writing = false;
    this.corked = 0;
    this.sync = true;
    this.bufferProcessing = false;
    this.onwrite = function(er) {
      onwrite(stream2, er);
    };
    this.writecb = null;
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null;
    this.pendingcb = 0;
    this.prefinished = false;
    this.errorEmitted = false;
    this.emitClose = options.emitClose !== false;
    this.autoDestroy = !!options.autoDestroy;
    this.bufferedRequestCount = 0;
    this.corkedRequestsFree = new CorkedRequest(this);
  }
  WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while (current) {
      out.push(current);
      current = current.next;
    }
    return out;
  };
  (function() {
    try {
      Object.defineProperty(WritableState.prototype, "buffer", {
        get: internalUtil.deprecate(function writableStateBufferGetter() {
          return this.getBuffer();
        }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
      });
    } catch (_4) {
    }
  })();
  var realHasInstance;
  if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
    realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty(Writable2, Symbol.hasInstance, {
      value: function value(object) {
        if (realHasInstance.call(this, object))
          return true;
        if (this !== Writable2)
          return false;
        return object && object._writableState instanceof WritableState;
      }
    });
  } else {
    realHasInstance = function realHasInstance2(object) {
      return object instanceof this;
    };
  }
  function Writable2(options) {
    Duplex2 = Duplex2 || dew$7$2();
    var isDuplex = this instanceof Duplex2;
    if (!isDuplex && !realHasInstance.call(Writable2, this))
      return new Writable2(options);
    this._writableState = new WritableState(options, this, isDuplex);
    this.writable = true;
    if (options) {
      if (typeof options.write === "function")
        this._write = options.write;
      if (typeof options.writev === "function")
        this._writev = options.writev;
      if (typeof options.destroy === "function")
        this._destroy = options.destroy;
      if (typeof options.final === "function")
        this._final = options.final;
    }
    Stream2.call(this);
  }
  Writable2.prototype.pipe = function() {
    errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
  };
  function writeAfterEnd(stream2, cb) {
    var er = new ERR_STREAM_WRITE_AFTER_END();
    errorOrDestroy(stream2, er);
    process3.nextTick(cb, er);
  }
  function validChunk(stream2, state, chunk, cb) {
    var er;
    if (chunk === null) {
      er = new ERR_STREAM_NULL_VALUES();
    } else if (typeof chunk !== "string" && !state.objectMode) {
      er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer"], chunk);
    }
    if (er) {
      errorOrDestroy(stream2, er);
      process3.nextTick(cb, er);
      return false;
    }
    return true;
  }
  Writable2.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && _isUint8Array(chunk);
    if (isBuf && !Buffer3.isBuffer(chunk)) {
      chunk = _uint8ArrayToBuffer(chunk);
    }
    if (typeof encoding === "function") {
      cb = encoding;
      encoding = null;
    }
    if (isBuf)
      encoding = "buffer";
    else if (!encoding)
      encoding = state.defaultEncoding;
    if (typeof cb !== "function")
      cb = nop;
    if (state.ending)
      writeAfterEnd(this, cb);
    else if (isBuf || validChunk(this, state, chunk, cb)) {
      state.pendingcb++;
      ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
  };
  Writable2.prototype.cork = function() {
    this._writableState.corked++;
  };
  Writable2.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
      state.corked--;
      if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest)
        clearBuffer(this, state);
    }
  };
  Writable2.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    if (typeof encoding === "string")
      encoding = encoding.toLowerCase();
    if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1))
      throw new ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
  };
  Object.defineProperty(Writable2.prototype, "writableBuffer", {
    enumerable: false,
    get: function get3() {
      return this._writableState && this._writableState.getBuffer();
    }
  });
  function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
      chunk = Buffer3.from(chunk, encoding);
    }
    return chunk;
  }
  Object.defineProperty(Writable2.prototype, "writableHighWaterMark", {
    enumerable: false,
    get: function get3() {
      return this._writableState.highWaterMark;
    }
  });
  function writeOrBuffer(stream2, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
      var newChunk = decodeChunk(state, chunk, encoding);
      if (chunk !== newChunk) {
        isBuf = true;
        encoding = "buffer";
        chunk = newChunk;
      }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark;
    if (!ret)
      state.needDrain = true;
    if (state.writing || state.corked) {
      var last = state.lastBufferedRequest;
      state.lastBufferedRequest = {
        chunk,
        encoding,
        isBuf,
        callback: cb,
        next: null
      };
      if (last) {
        last.next = state.lastBufferedRequest;
      } else {
        state.bufferedRequest = state.lastBufferedRequest;
      }
      state.bufferedRequestCount += 1;
    } else {
      doWrite(stream2, state, false, len, chunk, encoding, cb);
    }
    return ret;
  }
  function doWrite(stream2, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed)
      state.onwrite(new ERR_STREAM_DESTROYED("write"));
    else if (writev)
      stream2._writev(chunk, state.onwrite);
    else
      stream2._write(chunk, encoding, state.onwrite);
    state.sync = false;
  }
  function onwriteError(stream2, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
      process3.nextTick(cb, er);
      process3.nextTick(finishMaybe, stream2, state);
      stream2._writableState.errorEmitted = true;
      errorOrDestroy(stream2, er);
    } else {
      cb(er);
      stream2._writableState.errorEmitted = true;
      errorOrDestroy(stream2, er);
      finishMaybe(stream2, state);
    }
  }
  function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
  }
  function onwrite(stream2, er) {
    var state = stream2._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== "function")
      throw new ERR_MULTIPLE_CALLBACK();
    onwriteStateUpdate(state);
    if (er)
      onwriteError(stream2, state, sync, er, cb);
    else {
      var finished2 = needFinish(state) || stream2.destroyed;
      if (!finished2 && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
        clearBuffer(stream2, state);
      }
      if (sync) {
        process3.nextTick(afterWrite, stream2, state, finished2, cb);
      } else {
        afterWrite(stream2, state, finished2, cb);
      }
    }
  }
  function afterWrite(stream2, state, finished2, cb) {
    if (!finished2)
      onwriteDrain(stream2, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream2, state);
  }
  function onwriteDrain(stream2, state) {
    if (state.length === 0 && state.needDrain) {
      state.needDrain = false;
      stream2.emit("drain");
    }
  }
  function clearBuffer(stream2, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream2._writev && entry && entry.next) {
      var l8 = state.bufferedRequestCount;
      var buffer2 = new Array(l8);
      var holder = state.corkedRequestsFree;
      holder.entry = entry;
      var count = 0;
      var allBuffers = true;
      while (entry) {
        buffer2[count] = entry;
        if (!entry.isBuf)
          allBuffers = false;
        entry = entry.next;
        count += 1;
      }
      buffer2.allBuffers = allBuffers;
      doWrite(stream2, state, true, state.length, buffer2, "", holder.finish);
      state.pendingcb++;
      state.lastBufferedRequest = null;
      if (holder.next) {
        state.corkedRequestsFree = holder.next;
        holder.next = null;
      } else {
        state.corkedRequestsFree = new CorkedRequest(state);
      }
      state.bufferedRequestCount = 0;
    } else {
      while (entry) {
        var chunk = entry.chunk;
        var encoding = entry.encoding;
        var cb = entry.callback;
        var len = state.objectMode ? 1 : chunk.length;
        doWrite(stream2, state, false, len, chunk, encoding, cb);
        entry = entry.next;
        state.bufferedRequestCount--;
        if (state.writing) {
          break;
        }
      }
      if (entry === null)
        state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
  }
  Writable2.prototype._write = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
  };
  Writable2.prototype._writev = null;
  Writable2.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === "function") {
      cb = chunk;
      chunk = null;
      encoding = null;
    } else if (typeof encoding === "function") {
      cb = encoding;
      encoding = null;
    }
    if (chunk !== null && chunk !== void 0)
      this.write(chunk, encoding);
    if (state.corked) {
      state.corked = 1;
      this.uncork();
    }
    if (!state.ending)
      endWritable(this, state, cb);
    return this;
  };
  Object.defineProperty(Writable2.prototype, "writableLength", {
    enumerable: false,
    get: function get3() {
      return this._writableState.length;
    }
  });
  function needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
  }
  function callFinal(stream2, state) {
    stream2._final(function(err) {
      state.pendingcb--;
      if (err) {
        errorOrDestroy(stream2, err);
      }
      state.prefinished = true;
      stream2.emit("prefinish");
      finishMaybe(stream2, state);
    });
  }
  function prefinish(stream2, state) {
    if (!state.prefinished && !state.finalCalled) {
      if (typeof stream2._final === "function" && !state.destroyed) {
        state.pendingcb++;
        state.finalCalled = true;
        process3.nextTick(callFinal, stream2, state);
      } else {
        state.prefinished = true;
        stream2.emit("prefinish");
      }
    }
  }
  function finishMaybe(stream2, state) {
    var need = needFinish(state);
    if (need) {
      prefinish(stream2, state);
      if (state.pendingcb === 0) {
        state.finished = true;
        stream2.emit("finish");
        if (state.autoDestroy) {
          var rState = stream2._readableState;
          if (!rState || rState.autoDestroy && rState.endEmitted) {
            stream2.destroy();
          }
        }
      }
    }
    return need;
  }
  function endWritable(stream2, state, cb) {
    state.ending = true;
    finishMaybe(stream2, state);
    if (cb) {
      if (state.finished)
        process3.nextTick(cb);
      else
        stream2.once("finish", cb);
    }
    state.ended = true;
    stream2.writable = false;
  }
  function onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while (entry) {
      var cb = entry.callback;
      state.pendingcb--;
      cb(err);
      entry = entry.next;
    }
    state.corkedRequestsFree.next = corkReq;
  }
  Object.defineProperty(Writable2.prototype, "destroyed", {
    enumerable: false,
    get: function get3() {
      if (this._writableState === void 0) {
        return false;
      }
      return this._writableState.destroyed;
    },
    set: function set(value) {
      if (!this._writableState) {
        return;
      }
      this._writableState.destroyed = value;
    }
  });
  Writable2.prototype.destroy = destroyImpl.destroy;
  Writable2.prototype._undestroy = destroyImpl.undestroy;
  Writable2.prototype._destroy = function(err, cb) {
    cb(err);
  };
  return exports$8$2;
}
function dew$7$2() {
  if (_dewExec$7$2)
    return exports$7$2;
  _dewExec$7$2 = true;
  var process3 = T;
  var objectKeys = Object.keys || function(obj) {
    var keys2 = [];
    for (var key in obj) {
      keys2.push(key);
    }
    return keys2;
  };
  exports$7$2 = Duplex2;
  var Readable2 = dew$3$2();
  var Writable2 = dew$8$2();
  dew$f$2()(Duplex2, Readable2);
  {
    var keys = objectKeys(Writable2.prototype);
    for (var v6 = 0; v6 < keys.length; v6++) {
      var method = keys[v6];
      if (!Duplex2.prototype[method])
        Duplex2.prototype[method] = Writable2.prototype[method];
    }
  }
  function Duplex2(options) {
    if (!(this instanceof Duplex2))
      return new Duplex2(options);
    Readable2.call(this, options);
    Writable2.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
      if (options.readable === false)
        this.readable = false;
      if (options.writable === false)
        this.writable = false;
      if (options.allowHalfOpen === false) {
        this.allowHalfOpen = false;
        this.once("end", onend);
      }
    }
  }
  Object.defineProperty(Duplex2.prototype, "writableHighWaterMark", {
    enumerable: false,
    get: function get3() {
      return this._writableState.highWaterMark;
    }
  });
  Object.defineProperty(Duplex2.prototype, "writableBuffer", {
    enumerable: false,
    get: function get3() {
      return this._writableState && this._writableState.getBuffer();
    }
  });
  Object.defineProperty(Duplex2.prototype, "writableLength", {
    enumerable: false,
    get: function get3() {
      return this._writableState.length;
    }
  });
  function onend() {
    if (this._writableState.ended)
      return;
    process3.nextTick(onEndNT, this);
  }
  function onEndNT(self2) {
    self2.end();
  }
  Object.defineProperty(Duplex2.prototype, "destroyed", {
    enumerable: false,
    get: function get3() {
      if (this._readableState === void 0 || this._writableState === void 0) {
        return false;
      }
      return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
      if (this._readableState === void 0 || this._writableState === void 0) {
        return;
      }
      this._readableState.destroyed = value;
      this._writableState.destroyed = value;
    }
  });
  return exports$7$2;
}
function dew$6$2() {
  if (_dewExec$6$2)
    return exports$6$2;
  _dewExec$6$2 = true;
  var ERR_STREAM_PREMATURE_CLOSE = dew$b$2().codes.ERR_STREAM_PREMATURE_CLOSE;
  function once3(callback) {
    var called = false;
    return function() {
      if (called)
        return;
      called = true;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      callback.apply(this, args);
    };
  }
  function noop3() {
  }
  function isRequest(stream2) {
    return stream2.setHeader && typeof stream2.abort === "function";
  }
  function eos(stream2, opts, callback) {
    if (typeof opts === "function")
      return eos(stream2, null, opts);
    if (!opts)
      opts = {};
    callback = once3(callback || noop3);
    var readable = opts.readable || opts.readable !== false && stream2.readable;
    var writable = opts.writable || opts.writable !== false && stream2.writable;
    var onlegacyfinish = function onlegacyfinish2() {
      if (!stream2.writable)
        onfinish();
    };
    var writableEnded = stream2._writableState && stream2._writableState.finished;
    var onfinish = function onfinish2() {
      writable = false;
      writableEnded = true;
      if (!readable)
        callback.call(stream2);
    };
    var readableEnded = stream2._readableState && stream2._readableState.endEmitted;
    var onend = function onend2() {
      readable = false;
      readableEnded = true;
      if (!writable)
        callback.call(stream2);
    };
    var onerror = function onerror2(err) {
      callback.call(stream2, err);
    };
    var onclose = function onclose2() {
      var err;
      if (readable && !readableEnded) {
        if (!stream2._readableState || !stream2._readableState.ended)
          err = new ERR_STREAM_PREMATURE_CLOSE();
        return callback.call(stream2, err);
      }
      if (writable && !writableEnded) {
        if (!stream2._writableState || !stream2._writableState.ended)
          err = new ERR_STREAM_PREMATURE_CLOSE();
        return callback.call(stream2, err);
      }
    };
    var onrequest = function onrequest2() {
      stream2.req.on("finish", onfinish);
    };
    if (isRequest(stream2)) {
      stream2.on("complete", onfinish);
      stream2.on("abort", onclose);
      if (stream2.req)
        onrequest();
      else
        stream2.on("request", onrequest);
    } else if (writable && !stream2._writableState) {
      stream2.on("end", onlegacyfinish);
      stream2.on("close", onlegacyfinish);
    }
    stream2.on("end", onend);
    stream2.on("finish", onfinish);
    if (opts.error !== false)
      stream2.on("error", onerror);
    stream2.on("close", onclose);
    return function() {
      stream2.removeListener("complete", onfinish);
      stream2.removeListener("abort", onclose);
      stream2.removeListener("request", onrequest);
      if (stream2.req)
        stream2.req.removeListener("finish", onfinish);
      stream2.removeListener("end", onlegacyfinish);
      stream2.removeListener("close", onlegacyfinish);
      stream2.removeListener("finish", onfinish);
      stream2.removeListener("end", onend);
      stream2.removeListener("error", onerror);
      stream2.removeListener("close", onclose);
    };
  }
  exports$6$2 = eos;
  return exports$6$2;
}
function dew$5$2() {
  if (_dewExec$5$2)
    return exports$5$2;
  _dewExec$5$2 = true;
  var process3 = T;
  var _Object$setPrototypeO;
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var finished2 = dew$6$2();
  var kLastResolve = Symbol("lastResolve");
  var kLastReject = Symbol("lastReject");
  var kError = Symbol("error");
  var kEnded = Symbol("ended");
  var kLastPromise = Symbol("lastPromise");
  var kHandlePromise = Symbol("handlePromise");
  var kStream = Symbol("stream");
  function createIterResult2(value, done) {
    return {
      value,
      done
    };
  }
  function readAndResolve(iter) {
    var resolve2 = iter[kLastResolve];
    if (resolve2 !== null) {
      var data = iter[kStream].read();
      if (data !== null) {
        iter[kLastPromise] = null;
        iter[kLastResolve] = null;
        iter[kLastReject] = null;
        resolve2(createIterResult2(data, false));
      }
    }
  }
  function onReadable(iter) {
    process3.nextTick(readAndResolve, iter);
  }
  function wrapForNext(lastPromise, iter) {
    return function(resolve2, reject) {
      lastPromise.then(function() {
        if (iter[kEnded]) {
          resolve2(createIterResult2(void 0, true));
          return;
        }
        iter[kHandlePromise](resolve2, reject);
      }, reject);
    };
  }
  var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
  });
  var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
    get stream() {
      return this[kStream];
    },
    next: function next() {
      var _this = this;
      var error = this[kError];
      if (error !== null) {
        return Promise.reject(error);
      }
      if (this[kEnded]) {
        return Promise.resolve(createIterResult2(void 0, true));
      }
      if (this[kStream].destroyed) {
        return new Promise(function(resolve2, reject) {
          process3.nextTick(function() {
            if (_this[kError]) {
              reject(_this[kError]);
            } else {
              resolve2(createIterResult2(void 0, true));
            }
          });
        });
      }
      var lastPromise = this[kLastPromise];
      var promise;
      if (lastPromise) {
        promise = new Promise(wrapForNext(lastPromise, this));
      } else {
        var data = this[kStream].read();
        if (data !== null) {
          return Promise.resolve(createIterResult2(data, false));
        }
        promise = new Promise(this[kHandlePromise]);
      }
      this[kLastPromise] = promise;
      return promise;
    }
  }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
  }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    return new Promise(function(resolve2, reject) {
      _this2[kStream].destroy(null, function(err) {
        if (err) {
          reject(err);
          return;
        }
        resolve2(createIterResult2(void 0, true));
      });
    });
  }), _Object$setPrototypeO), AsyncIteratorPrototype);
  var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream2) {
    var _Object$create;
    var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
      value: stream2,
      writable: true
    }), _defineProperty(_Object$create, kLastResolve, {
      value: null,
      writable: true
    }), _defineProperty(_Object$create, kLastReject, {
      value: null,
      writable: true
    }), _defineProperty(_Object$create, kError, {
      value: null,
      writable: true
    }), _defineProperty(_Object$create, kEnded, {
      value: stream2._readableState.endEmitted,
      writable: true
    }), _defineProperty(_Object$create, kHandlePromise, {
      value: function value(resolve2, reject) {
        var data = iterator[kStream].read();
        if (data) {
          iterator[kLastPromise] = null;
          iterator[kLastResolve] = null;
          iterator[kLastReject] = null;
          resolve2(createIterResult2(data, false));
        } else {
          iterator[kLastResolve] = resolve2;
          iterator[kLastReject] = reject;
        }
      },
      writable: true
    }), _Object$create));
    iterator[kLastPromise] = null;
    finished2(stream2, function(err) {
      if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
        var reject = iterator[kLastReject];
        if (reject !== null) {
          iterator[kLastPromise] = null;
          iterator[kLastResolve] = null;
          iterator[kLastReject] = null;
          reject(err);
        }
        iterator[kError] = err;
        return;
      }
      var resolve2 = iterator[kLastResolve];
      if (resolve2 !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve2(createIterResult2(void 0, true));
      }
      iterator[kEnded] = true;
    });
    stream2.on("readable", onReadable.bind(null, iterator));
    return iterator;
  };
  exports$5$2 = createReadableStreamAsyncIterator;
  return exports$5$2;
}
function dew$4$2() {
  if (_dewExec$4$2)
    return exports$4$2;
  _dewExec$4$2 = true;
  exports$4$2 = function() {
    throw new Error("Readable.from is not available in the browser");
  };
  return exports$4$2;
}
function dew$3$2() {
  if (_dewExec$3$2)
    return exports$3$2;
  _dewExec$3$2 = true;
  var process3 = T;
  exports$3$2 = Readable2;
  var Duplex2;
  Readable2.ReadableState = ReadableState;
  y.EventEmitter;
  var EElistenerCount = function EElistenerCount2(emitter, type) {
    return emitter.listeners(type).length;
  };
  var Stream2 = dew$e$2();
  var Buffer3 = e$1$1.Buffer;
  var OurUint8Array = _global$M.Uint8Array || function() {
  };
  function _uint8ArrayToBuffer(chunk) {
    return Buffer3.from(chunk);
  }
  function _isUint8Array(obj) {
    return Buffer3.isBuffer(obj) || obj instanceof OurUint8Array;
  }
  var debugUtil = X;
  var debug;
  if (debugUtil && debugUtil.debuglog) {
    debug = debugUtil.debuglog("stream");
  } else {
    debug = function debug2() {
    };
  }
  var BufferList = dew$d$2();
  var destroyImpl = dew$c$2();
  var _require = dew$a$2(), getHighWaterMark = _require.getHighWaterMark;
  var _require$codes = dew$b$2().codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
  var StringDecoder;
  var createReadableStreamAsyncIterator;
  var from;
  dew$f$2()(Readable2, Stream2);
  var errorOrDestroy = destroyImpl.errorOrDestroy;
  var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
  function prependListener2(emitter, event, fn) {
    if (typeof emitter.prependListener === "function")
      return emitter.prependListener(event, fn);
    if (!emitter._events || !emitter._events[event])
      emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event]))
      emitter._events[event].unshift(fn);
    else
      emitter._events[event] = [fn, emitter._events[event]];
  }
  function ReadableState(options, stream2, isDuplex) {
    Duplex2 = Duplex2 || dew$7$2();
    options = options || {};
    if (typeof isDuplex !== "boolean")
      isDuplex = stream2 instanceof Duplex2;
    this.objectMode = !!options.objectMode;
    if (isDuplex)
      this.objectMode = this.objectMode || !!options.readableObjectMode;
    this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
    this.buffer = new BufferList();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;
    this.sync = true;
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true;
    this.emitClose = options.emitClose !== false;
    this.autoDestroy = !!options.autoDestroy;
    this.destroyed = false;
    this.defaultEncoding = options.defaultEncoding || "utf8";
    this.awaitDrain = 0;
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
      if (!StringDecoder)
        StringDecoder = e$12.StringDecoder;
      this.decoder = new StringDecoder(options.encoding);
      this.encoding = options.encoding;
    }
  }
  function Readable2(options) {
    Duplex2 = Duplex2 || dew$7$2();
    if (!(this instanceof Readable2))
      return new Readable2(options);
    var isDuplex = this instanceof Duplex2;
    this._readableState = new ReadableState(options, this, isDuplex);
    this.readable = true;
    if (options) {
      if (typeof options.read === "function")
        this._read = options.read;
      if (typeof options.destroy === "function")
        this._destroy = options.destroy;
    }
    Stream2.call(this);
  }
  Object.defineProperty(Readable2.prototype, "destroyed", {
    enumerable: false,
    get: function get3() {
      if (this._readableState === void 0) {
        return false;
      }
      return this._readableState.destroyed;
    },
    set: function set(value) {
      if (!this._readableState) {
        return;
      }
      this._readableState.destroyed = value;
    }
  });
  Readable2.prototype.destroy = destroyImpl.destroy;
  Readable2.prototype._undestroy = destroyImpl.undestroy;
  Readable2.prototype._destroy = function(err, cb) {
    cb(err);
  };
  Readable2.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
      if (typeof chunk === "string") {
        encoding = encoding || state.defaultEncoding;
        if (encoding !== state.encoding) {
          chunk = Buffer3.from(chunk, encoding);
          encoding = "";
        }
        skipChunkCheck = true;
      }
    } else {
      skipChunkCheck = true;
    }
    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
  };
  Readable2.prototype.unshift = function(chunk) {
    return readableAddChunk(this, chunk, null, true, false);
  };
  function readableAddChunk(stream2, chunk, encoding, addToFront, skipChunkCheck) {
    debug("readableAddChunk", chunk);
    var state = stream2._readableState;
    if (chunk === null) {
      state.reading = false;
      onEofChunk(stream2, state);
    } else {
      var er;
      if (!skipChunkCheck)
        er = chunkInvalid(state, chunk);
      if (er) {
        errorOrDestroy(stream2, er);
      } else if (state.objectMode || chunk && chunk.length > 0) {
        if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer3.prototype) {
          chunk = _uint8ArrayToBuffer(chunk);
        }
        if (addToFront) {
          if (state.endEmitted)
            errorOrDestroy(stream2, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
          else
            addChunk(stream2, state, chunk, true);
        } else if (state.ended) {
          errorOrDestroy(stream2, new ERR_STREAM_PUSH_AFTER_EOF());
        } else if (state.destroyed) {
          return false;
        } else {
          state.reading = false;
          if (state.decoder && !encoding) {
            chunk = state.decoder.write(chunk);
            if (state.objectMode || chunk.length !== 0)
              addChunk(stream2, state, chunk, false);
            else
              maybeReadMore(stream2, state);
          } else {
            addChunk(stream2, state, chunk, false);
          }
        }
      } else if (!addToFront) {
        state.reading = false;
        maybeReadMore(stream2, state);
      }
    }
    return !state.ended && (state.length < state.highWaterMark || state.length === 0);
  }
  function addChunk(stream2, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
      state.awaitDrain = 0;
      stream2.emit("data", chunk);
    } else {
      state.length += state.objectMode ? 1 : chunk.length;
      if (addToFront)
        state.buffer.unshift(chunk);
      else
        state.buffer.push(chunk);
      if (state.needReadable)
        emitReadable(stream2);
    }
    maybeReadMore(stream2, state);
  }
  function chunkInvalid(state, chunk) {
    var er;
    if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
      er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer", "Uint8Array"], chunk);
    }
    return er;
  }
  Readable2.prototype.isPaused = function() {
    return this._readableState.flowing === false;
  };
  Readable2.prototype.setEncoding = function(enc) {
    if (!StringDecoder)
      StringDecoder = e$12.StringDecoder;
    var decoder = new StringDecoder(enc);
    this._readableState.decoder = decoder;
    this._readableState.encoding = this._readableState.decoder.encoding;
    var p8 = this._readableState.buffer.head;
    var content = "";
    while (p8 !== null) {
      content += decoder.write(p8.data);
      p8 = p8.next;
    }
    this._readableState.buffer.clear();
    if (content !== "")
      this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
  };
  var MAX_HWM = 1073741824;
  function computeNewHighWaterMark(n9) {
    if (n9 >= MAX_HWM) {
      n9 = MAX_HWM;
    } else {
      n9--;
      n9 |= n9 >>> 1;
      n9 |= n9 >>> 2;
      n9 |= n9 >>> 4;
      n9 |= n9 >>> 8;
      n9 |= n9 >>> 16;
      n9++;
    }
    return n9;
  }
  function howMuchToRead(n9, state) {
    if (n9 <= 0 || state.length === 0 && state.ended)
      return 0;
    if (state.objectMode)
      return 1;
    if (n9 !== n9) {
      if (state.flowing && state.length)
        return state.buffer.head.data.length;
      else
        return state.length;
    }
    if (n9 > state.highWaterMark)
      state.highWaterMark = computeNewHighWaterMark(n9);
    if (n9 <= state.length)
      return n9;
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    }
    return state.length;
  }
  Readable2.prototype.read = function(n9) {
    debug("read", n9);
    n9 = parseInt(n9, 10);
    var state = this._readableState;
    var nOrig = n9;
    if (n9 !== 0)
      state.emittedReadable = false;
    if (n9 === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
      debug("read: emitReadable", state.length, state.ended);
      if (state.length === 0 && state.ended)
        endReadable(this);
      else
        emitReadable(this);
      return null;
    }
    n9 = howMuchToRead(n9, state);
    if (n9 === 0 && state.ended) {
      if (state.length === 0)
        endReadable(this);
      return null;
    }
    var doRead = state.needReadable;
    debug("need readable", doRead);
    if (state.length === 0 || state.length - n9 < state.highWaterMark) {
      doRead = true;
      debug("length less than watermark", doRead);
    }
    if (state.ended || state.reading) {
      doRead = false;
      debug("reading or ended", doRead);
    } else if (doRead) {
      debug("do read");
      state.reading = true;
      state.sync = true;
      if (state.length === 0)
        state.needReadable = true;
      this._read(state.highWaterMark);
      state.sync = false;
      if (!state.reading)
        n9 = howMuchToRead(nOrig, state);
    }
    var ret;
    if (n9 > 0)
      ret = fromList(n9, state);
    else
      ret = null;
    if (ret === null) {
      state.needReadable = state.length <= state.highWaterMark;
      n9 = 0;
    } else {
      state.length -= n9;
      state.awaitDrain = 0;
    }
    if (state.length === 0) {
      if (!state.ended)
        state.needReadable = true;
      if (nOrig !== n9 && state.ended)
        endReadable(this);
    }
    if (ret !== null)
      this.emit("data", ret);
    return ret;
  };
  function onEofChunk(stream2, state) {
    debug("onEofChunk");
    if (state.ended)
      return;
    if (state.decoder) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) {
        state.buffer.push(chunk);
        state.length += state.objectMode ? 1 : chunk.length;
      }
    }
    state.ended = true;
    if (state.sync) {
      emitReadable(stream2);
    } else {
      state.needReadable = false;
      if (!state.emittedReadable) {
        state.emittedReadable = true;
        emitReadable_(stream2);
      }
    }
  }
  function emitReadable(stream2) {
    var state = stream2._readableState;
    debug("emitReadable", state.needReadable, state.emittedReadable);
    state.needReadable = false;
    if (!state.emittedReadable) {
      debug("emitReadable", state.flowing);
      state.emittedReadable = true;
      process3.nextTick(emitReadable_, stream2);
    }
  }
  function emitReadable_(stream2) {
    var state = stream2._readableState;
    debug("emitReadable_", state.destroyed, state.length, state.ended);
    if (!state.destroyed && (state.length || state.ended)) {
      stream2.emit("readable");
      state.emittedReadable = false;
    }
    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    flow(stream2);
  }
  function maybeReadMore(stream2, state) {
    if (!state.readingMore) {
      state.readingMore = true;
      process3.nextTick(maybeReadMore_, stream2, state);
    }
  }
  function maybeReadMore_(stream2, state) {
    while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
      var len = state.length;
      debug("maybeReadMore read 0");
      stream2.read(0);
      if (len === state.length)
        break;
    }
    state.readingMore = false;
  }
  Readable2.prototype._read = function(n9) {
    errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
  };
  Readable2.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
    switch (state.pipesCount) {
      case 0:
        state.pipes = dest;
        break;
      case 1:
        state.pipes = [state.pipes, dest];
        break;
      default:
        state.pipes.push(dest);
        break;
    }
    state.pipesCount += 1;
    debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process3.stdout && dest !== process3.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted)
      process3.nextTick(endFn);
    else
      src.once("end", endFn);
    dest.on("unpipe", onunpipe);
    function onunpipe(readable, unpipeInfo) {
      debug("onunpipe");
      if (readable === src) {
        if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
          unpipeInfo.hasUnpiped = true;
          cleanup();
        }
      }
    }
    function onend() {
      debug("onend");
      dest.end();
    }
    var ondrain = pipeOnDrain(src);
    dest.on("drain", ondrain);
    var cleanedUp = false;
    function cleanup() {
      debug("cleanup");
      dest.removeListener("close", onclose);
      dest.removeListener("finish", onfinish);
      dest.removeListener("drain", ondrain);
      dest.removeListener("error", onerror);
      dest.removeListener("unpipe", onunpipe);
      src.removeListener("end", onend);
      src.removeListener("end", unpipe);
      src.removeListener("data", ondata);
      cleanedUp = true;
      if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
        ondrain();
    }
    src.on("data", ondata);
    function ondata(chunk) {
      debug("ondata");
      var ret = dest.write(chunk);
      debug("dest.write", ret);
      if (ret === false) {
        if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf2(state.pipes, dest) !== -1) && !cleanedUp) {
          debug("false write response, pause", state.awaitDrain);
          state.awaitDrain++;
        }
        src.pause();
      }
    }
    function onerror(er) {
      debug("onerror", er);
      unpipe();
      dest.removeListener("error", onerror);
      if (EElistenerCount(dest, "error") === 0)
        errorOrDestroy(dest, er);
    }
    prependListener2(dest, "error", onerror);
    function onclose() {
      dest.removeListener("finish", onfinish);
      unpipe();
    }
    dest.once("close", onclose);
    function onfinish() {
      debug("onfinish");
      dest.removeListener("close", onclose);
      unpipe();
    }
    dest.once("finish", onfinish);
    function unpipe() {
      debug("unpipe");
      src.unpipe(dest);
    }
    dest.emit("pipe", src);
    if (!state.flowing) {
      debug("pipe resume");
      src.resume();
    }
    return dest;
  };
  function pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
      var state = src._readableState;
      debug("pipeOnDrain", state.awaitDrain);
      if (state.awaitDrain)
        state.awaitDrain--;
      if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
        state.flowing = true;
        flow(src);
      }
    };
  }
  Readable2.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {
      hasUnpiped: false
    };
    if (state.pipesCount === 0)
      return this;
    if (state.pipesCount === 1) {
      if (dest && dest !== state.pipes)
        return this;
      if (!dest)
        dest = state.pipes;
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;
      if (dest)
        dest.emit("unpipe", this, unpipeInfo);
      return this;
    }
    if (!dest) {
      var dests = state.pipes;
      var len = state.pipesCount;
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;
      for (var i8 = 0; i8 < len; i8++) {
        dests[i8].emit("unpipe", this, {
          hasUnpiped: false
        });
      }
      return this;
    }
    var index = indexOf2(state.pipes, dest);
    if (index === -1)
      return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1)
      state.pipes = state.pipes[0];
    dest.emit("unpipe", this, unpipeInfo);
    return this;
  };
  Readable2.prototype.on = function(ev, fn) {
    var res = Stream2.prototype.on.call(this, ev, fn);
    var state = this._readableState;
    if (ev === "data") {
      state.readableListening = this.listenerCount("readable") > 0;
      if (state.flowing !== false)
        this.resume();
    } else if (ev === "readable") {
      if (!state.endEmitted && !state.readableListening) {
        state.readableListening = state.needReadable = true;
        state.flowing = false;
        state.emittedReadable = false;
        debug("on readable", state.length, state.reading);
        if (state.length) {
          emitReadable(this);
        } else if (!state.reading) {
          process3.nextTick(nReadingNextTick, this);
        }
      }
    }
    return res;
  };
  Readable2.prototype.addListener = Readable2.prototype.on;
  Readable2.prototype.removeListener = function(ev, fn) {
    var res = Stream2.prototype.removeListener.call(this, ev, fn);
    if (ev === "readable") {
      process3.nextTick(updateReadableListening, this);
    }
    return res;
  };
  Readable2.prototype.removeAllListeners = function(ev) {
    var res = Stream2.prototype.removeAllListeners.apply(this, arguments);
    if (ev === "readable" || ev === void 0) {
      process3.nextTick(updateReadableListening, this);
    }
    return res;
  };
  function updateReadableListening(self2) {
    var state = self2._readableState;
    state.readableListening = self2.listenerCount("readable") > 0;
    if (state.resumeScheduled && !state.paused) {
      state.flowing = true;
    } else if (self2.listenerCount("data") > 0) {
      self2.resume();
    }
  }
  function nReadingNextTick(self2) {
    debug("readable nexttick read 0");
    self2.read(0);
  }
  Readable2.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
      debug("resume");
      state.flowing = !state.readableListening;
      resume(this, state);
    }
    state.paused = false;
    return this;
  };
  function resume(stream2, state) {
    if (!state.resumeScheduled) {
      state.resumeScheduled = true;
      process3.nextTick(resume_, stream2, state);
    }
  }
  function resume_(stream2, state) {
    debug("resume", state.reading);
    if (!state.reading) {
      stream2.read(0);
    }
    state.resumeScheduled = false;
    stream2.emit("resume");
    flow(stream2);
    if (state.flowing && !state.reading)
      stream2.read(0);
  }
  Readable2.prototype.pause = function() {
    debug("call pause flowing=%j", this._readableState.flowing);
    if (this._readableState.flowing !== false) {
      debug("pause");
      this._readableState.flowing = false;
      this.emit("pause");
    }
    this._readableState.paused = true;
    return this;
  };
  function flow(stream2) {
    var state = stream2._readableState;
    debug("flow", state.flowing);
    while (state.flowing && stream2.read() !== null) {
    }
  }
  Readable2.prototype.wrap = function(stream2) {
    var _this = this;
    var state = this._readableState;
    var paused = false;
    stream2.on("end", function() {
      debug("wrapped end");
      if (state.decoder && !state.ended) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length)
          _this.push(chunk);
      }
      _this.push(null);
    });
    stream2.on("data", function(chunk) {
      debug("wrapped data");
      if (state.decoder)
        chunk = state.decoder.write(chunk);
      if (state.objectMode && (chunk === null || chunk === void 0))
        return;
      else if (!state.objectMode && (!chunk || !chunk.length))
        return;
      var ret = _this.push(chunk);
      if (!ret) {
        paused = true;
        stream2.pause();
      }
    });
    for (var i8 in stream2) {
      if (this[i8] === void 0 && typeof stream2[i8] === "function") {
        this[i8] = function methodWrap(method) {
          return function methodWrapReturnFunction() {
            return stream2[method].apply(stream2, arguments);
          };
        }(i8);
      }
    }
    for (var n9 = 0; n9 < kProxyEvents.length; n9++) {
      stream2.on(kProxyEvents[n9], this.emit.bind(this, kProxyEvents[n9]));
    }
    this._read = function(n10) {
      debug("wrapped _read", n10);
      if (paused) {
        paused = false;
        stream2.resume();
      }
    };
    return this;
  };
  if (typeof Symbol === "function") {
    Readable2.prototype[Symbol.asyncIterator] = function() {
      if (createReadableStreamAsyncIterator === void 0) {
        createReadableStreamAsyncIterator = dew$5$2();
      }
      return createReadableStreamAsyncIterator(this);
    };
  }
  Object.defineProperty(Readable2.prototype, "readableHighWaterMark", {
    enumerable: false,
    get: function get3() {
      return this._readableState.highWaterMark;
    }
  });
  Object.defineProperty(Readable2.prototype, "readableBuffer", {
    enumerable: false,
    get: function get3() {
      return this._readableState && this._readableState.buffer;
    }
  });
  Object.defineProperty(Readable2.prototype, "readableFlowing", {
    enumerable: false,
    get: function get3() {
      return this._readableState.flowing;
    },
    set: function set(state) {
      if (this._readableState) {
        this._readableState.flowing = state;
      }
    }
  });
  Readable2._fromList = fromList;
  Object.defineProperty(Readable2.prototype, "readableLength", {
    enumerable: false,
    get: function get3() {
      return this._readableState.length;
    }
  });
  function fromList(n9, state) {
    if (state.length === 0)
      return null;
    var ret;
    if (state.objectMode)
      ret = state.buffer.shift();
    else if (!n9 || n9 >= state.length) {
      if (state.decoder)
        ret = state.buffer.join("");
      else if (state.buffer.length === 1)
        ret = state.buffer.first();
      else
        ret = state.buffer.concat(state.length);
      state.buffer.clear();
    } else {
      ret = state.buffer.consume(n9, state.decoder);
    }
    return ret;
  }
  function endReadable(stream2) {
    var state = stream2._readableState;
    debug("endReadable", state.endEmitted);
    if (!state.endEmitted) {
      state.ended = true;
      process3.nextTick(endReadableNT, state, stream2);
    }
  }
  function endReadableNT(state, stream2) {
    debug("endReadableNT", state.endEmitted, state.length);
    if (!state.endEmitted && state.length === 0) {
      state.endEmitted = true;
      stream2.readable = false;
      stream2.emit("end");
      if (state.autoDestroy) {
        var wState = stream2._writableState;
        if (!wState || wState.autoDestroy && wState.finished) {
          stream2.destroy();
        }
      }
    }
  }
  if (typeof Symbol === "function") {
    Readable2.from = function(iterable, opts) {
      if (from === void 0) {
        from = dew$4$2();
      }
      return from(Readable2, iterable, opts);
    };
  }
  function indexOf2(xs, x4) {
    for (var i8 = 0, l8 = xs.length; i8 < l8; i8++) {
      if (xs[i8] === x4)
        return i8;
    }
    return -1;
  }
  return exports$3$2;
}
function dew$2$2() {
  if (_dewExec$2$2)
    return exports$2$2;
  _dewExec$2$2 = true;
  exports$2$2 = Transform2;
  var _require$codes = dew$b$2().codes, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
  var Duplex2 = dew$7$2();
  dew$f$2()(Transform2, Duplex2);
  function afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (cb === null) {
      return this.emit("error", new ERR_MULTIPLE_CALLBACK());
    }
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null)
      this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) {
      this._read(rs.highWaterMark);
    }
  }
  function Transform2(options) {
    if (!(this instanceof Transform2))
      return new Transform2(options);
    Duplex2.call(this, options);
    this._transformState = {
      afterTransform: afterTransform.bind(this),
      needTransform: false,
      transforming: false,
      writecb: null,
      writechunk: null,
      writeencoding: null
    };
    this._readableState.needReadable = true;
    this._readableState.sync = false;
    if (options) {
      if (typeof options.transform === "function")
        this._transform = options.transform;
      if (typeof options.flush === "function")
        this._flush = options.flush;
    }
    this.on("prefinish", prefinish);
  }
  function prefinish() {
    var _this = this;
    if (typeof this._flush === "function" && !this._readableState.destroyed) {
      this._flush(function(er, data) {
        done(_this, er, data);
      });
    } else {
      done(this, null, null);
    }
  }
  Transform2.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex2.prototype.push.call(this, chunk, encoding);
  };
  Transform2.prototype._transform = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
  };
  Transform2.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
      var rs = this._readableState;
      if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
        this._read(rs.highWaterMark);
    }
  };
  Transform2.prototype._read = function(n9) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
      ts.transforming = true;
      this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else {
      ts.needTransform = true;
    }
  };
  Transform2.prototype._destroy = function(err, cb) {
    Duplex2.prototype._destroy.call(this, err, function(err2) {
      cb(err2);
    });
  };
  function done(stream2, er, data) {
    if (er)
      return stream2.emit("error", er);
    if (data != null)
      stream2.push(data);
    if (stream2._writableState.length)
      throw new ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream2._transformState.transforming)
      throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream2.push(null);
  }
  return exports$2$2;
}
function dew$1$2() {
  if (_dewExec$1$2)
    return exports$1$2;
  _dewExec$1$2 = true;
  exports$1$2 = PassThrough2;
  var Transform2 = dew$2$2();
  dew$f$2()(PassThrough2, Transform2);
  function PassThrough2(options) {
    if (!(this instanceof PassThrough2))
      return new PassThrough2(options);
    Transform2.call(this, options);
  }
  PassThrough2.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
  };
  return exports$1$2;
}
function dew$2B() {
  if (_dewExec$2B)
    return exports$2C;
  _dewExec$2B = true;
  var eos;
  function once3(callback) {
    var called = false;
    return function() {
      if (called)
        return;
      called = true;
      callback.apply(void 0, arguments);
    };
  }
  var _require$codes = dew$b$2().codes, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
  function noop3(err) {
    if (err)
      throw err;
  }
  function isRequest(stream2) {
    return stream2.setHeader && typeof stream2.abort === "function";
  }
  function destroyer(stream2, reading, writing, callback) {
    callback = once3(callback);
    var closed = false;
    stream2.on("close", function() {
      closed = true;
    });
    if (eos === void 0)
      eos = dew$6$2();
    eos(stream2, {
      readable: reading,
      writable: writing
    }, function(err) {
      if (err)
        return callback(err);
      closed = true;
      callback();
    });
    var destroyed = false;
    return function(err) {
      if (closed)
        return;
      if (destroyed)
        return;
      destroyed = true;
      if (isRequest(stream2))
        return stream2.abort();
      if (typeof stream2.destroy === "function")
        return stream2.destroy();
      callback(err || new ERR_STREAM_DESTROYED("pipe"));
    };
  }
  function call(fn) {
    fn();
  }
  function pipe(from, to) {
    return from.pipe(to);
  }
  function popCallback(streams) {
    if (!streams.length)
      return noop3;
    if (typeof streams[streams.length - 1] !== "function")
      return noop3;
    return streams.pop();
  }
  function pipeline2() {
    for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
      streams[_key] = arguments[_key];
    }
    var callback = popCallback(streams);
    if (Array.isArray(streams[0]))
      streams = streams[0];
    if (streams.length < 2) {
      throw new ERR_MISSING_ARGS("streams");
    }
    var error;
    var destroys = streams.map(function(stream2, i8) {
      var reading = i8 < streams.length - 1;
      var writing = i8 > 0;
      return destroyer(stream2, reading, writing, function(err) {
        if (!error)
          error = err;
        if (err)
          destroys.forEach(call);
        if (reading)
          return;
        destroys.forEach(call);
        callback(error);
      });
    });
    return streams.reduce(pipe);
  }
  exports$2C = pipeline2;
  return exports$2C;
}
function dew$2A() {
  if (_dewExec$2A)
    return exports$2B;
  _dewExec$2A = true;
  exports$2B = Stream2;
  var EE = y.EventEmitter;
  var inherits4 = dew$f$2();
  inherits4(Stream2, EE);
  Stream2.Readable = dew$3$2();
  Stream2.Writable = dew$8$2();
  Stream2.Duplex = dew$7$2();
  Stream2.Transform = dew$2$2();
  Stream2.PassThrough = dew$1$2();
  Stream2.finished = dew$6$2();
  Stream2.pipeline = dew$2B();
  Stream2.Stream = Stream2;
  function Stream2() {
    EE.call(this || _global$L);
  }
  Stream2.prototype.pipe = function(dest, options) {
    var source = this || _global$L;
    function ondata(chunk) {
      if (dest.writable) {
        if (false === dest.write(chunk) && source.pause) {
          source.pause();
        }
      }
    }
    source.on("data", ondata);
    function ondrain() {
      if (source.readable && source.resume) {
        source.resume();
      }
    }
    dest.on("drain", ondrain);
    if (!dest._isStdio && (!options || options.end !== false)) {
      source.on("end", onend);
      source.on("close", onclose);
    }
    var didOnEnd = false;
    function onend() {
      if (didOnEnd)
        return;
      didOnEnd = true;
      dest.end();
    }
    function onclose() {
      if (didOnEnd)
        return;
      didOnEnd = true;
      if (typeof dest.destroy === "function")
        dest.destroy();
    }
    function onerror(er) {
      cleanup();
      if (EE.listenerCount(this || _global$L, "error") === 0) {
        throw er;
      }
    }
    source.on("error", onerror);
    dest.on("error", onerror);
    function cleanup() {
      source.removeListener("data", ondata);
      dest.removeListener("drain", ondrain);
      source.removeListener("end", onend);
      source.removeListener("close", onclose);
      source.removeListener("error", onerror);
      dest.removeListener("error", onerror);
      source.removeListener("end", cleanup);
      source.removeListener("close", cleanup);
      dest.removeListener("close", cleanup);
    }
    source.on("end", cleanup);
    source.on("close", cleanup);
    dest.on("close", cleanup);
    dest.emit("pipe", source);
    return dest;
  };
  return exports$2B;
}
function dew$2z() {
  if (_dewExec$2z)
    return exports$2A;
  _dewExec$2z = true;
  var Buffer3 = dew$2P().Buffer;
  var Transform2 = stream.Transform;
  var StringDecoder = e$12.StringDecoder;
  var inherits4 = dew$f();
  function CipherBase(hashMode) {
    Transform2.call(this || _global$K);
    (this || _global$K).hashMode = typeof hashMode === "string";
    if ((this || _global$K).hashMode) {
      (this || _global$K)[hashMode] = (this || _global$K)._finalOrDigest;
    } else {
      (this || _global$K).final = (this || _global$K)._finalOrDigest;
    }
    if ((this || _global$K)._final) {
      (this || _global$K).__final = (this || _global$K)._final;
      (this || _global$K)._final = null;
    }
    (this || _global$K)._decoder = null;
    (this || _global$K)._encoding = null;
  }
  inherits4(CipherBase, Transform2);
  CipherBase.prototype.update = function(data, inputEnc, outputEnc) {
    if (typeof data === "string") {
      data = Buffer3.from(data, inputEnc);
    }
    var outData = this._update(data);
    if ((this || _global$K).hashMode)
      return this || _global$K;
    if (outputEnc) {
      outData = this._toString(outData, outputEnc);
    }
    return outData;
  };
  CipherBase.prototype.setAutoPadding = function() {
  };
  CipherBase.prototype.getAuthTag = function() {
    throw new Error("trying to get auth tag in unsupported state");
  };
  CipherBase.prototype.setAuthTag = function() {
    throw new Error("trying to set auth tag in unsupported state");
  };
  CipherBase.prototype.setAAD = function() {
    throw new Error("trying to set aad in unsupported state");
  };
  CipherBase.prototype._transform = function(data, _4, next) {
    var err;
    try {
      if ((this || _global$K).hashMode) {
        this._update(data);
      } else {
        this.push(this._update(data));
      }
    } catch (e11) {
      err = e11;
    } finally {
      next(err);
    }
  };
  CipherBase.prototype._flush = function(done) {
    var err;
    try {
      this.push(this.__final());
    } catch (e11) {
      err = e11;
    }
    done(err);
  };
  CipherBase.prototype._finalOrDigest = function(outputEnc) {
    var outData = this.__final() || Buffer3.alloc(0);
    if (outputEnc) {
      outData = this._toString(outData, outputEnc, true);
    }
    return outData;
  };
  CipherBase.prototype._toString = function(value, enc, fin) {
    if (!(this || _global$K)._decoder) {
      (this || _global$K)._decoder = new StringDecoder(enc);
      (this || _global$K)._encoding = enc;
    }
    if ((this || _global$K)._encoding !== enc)
      throw new Error("can't switch encodings");
    var out = (this || _global$K)._decoder.write(value);
    if (fin) {
      out += (this || _global$K)._decoder.end();
    }
    return out;
  };
  exports$2A = CipherBase;
  return exports$2A;
}
function dew$2y() {
  if (_dewExec$2y)
    return exports$2z;
  _dewExec$2y = true;
  var inherits4 = dew$f();
  var MD5 = dew$2L();
  var RIPEMD160 = dew$2K();
  var sha = dew$2C();
  var Base = dew$2z();
  function Hash2(hash) {
    Base.call(this, "digest");
    this._hash = hash;
  }
  inherits4(Hash2, Base);
  Hash2.prototype._update = function(data) {
    this._hash.update(data);
  };
  Hash2.prototype._final = function() {
    return this._hash.digest();
  };
  exports$2z = function createHash2(alg) {
    alg = alg.toLowerCase();
    if (alg === "md5")
      return new MD5();
    if (alg === "rmd160" || alg === "ripemd160")
      return new RIPEMD160();
    return new Hash2(sha(alg));
  };
  return exports$2z;
}
function dew$2x() {
  if (_dewExec$2x)
    return exports$2y;
  _dewExec$2x = true;
  var inherits4 = dew$f();
  var Buffer3 = dew$2P().Buffer;
  var Base = dew$2z();
  var ZEROS = Buffer3.alloc(128);
  var blocksize = 64;
  function Hmac2(alg, key) {
    Base.call(this, "digest");
    if (typeof key === "string") {
      key = Buffer3.from(key);
    }
    this._alg = alg;
    this._key = key;
    if (key.length > blocksize) {
      key = alg(key);
    } else if (key.length < blocksize) {
      key = Buffer3.concat([key, ZEROS], blocksize);
    }
    var ipad = this._ipad = Buffer3.allocUnsafe(blocksize);
    var opad = this._opad = Buffer3.allocUnsafe(blocksize);
    for (var i8 = 0; i8 < blocksize; i8++) {
      ipad[i8] = key[i8] ^ 54;
      opad[i8] = key[i8] ^ 92;
    }
    this._hash = [ipad];
  }
  inherits4(Hmac2, Base);
  Hmac2.prototype._update = function(data) {
    this._hash.push(data);
  };
  Hmac2.prototype._final = function() {
    var h8 = this._alg(Buffer3.concat(this._hash));
    return this._alg(Buffer3.concat([this._opad, h8]));
  };
  exports$2y = Hmac2;
  return exports$2y;
}
function dew$2w() {
  if (_dewExec$2w)
    return exports$2x;
  _dewExec$2w = true;
  var MD5 = dew$2L();
  exports$2x = function(buffer2) {
    return new MD5().update(buffer2).digest();
  };
  return exports$2x;
}
function dew$2v() {
  if (_dewExec$2v)
    return exports$2w;
  _dewExec$2v = true;
  var inherits4 = dew$f();
  var Legacy = dew$2x();
  var Base = dew$2z();
  var Buffer3 = dew$2P().Buffer;
  var md5 = dew$2w();
  var RIPEMD160 = dew$2K();
  var sha = dew$2C();
  var ZEROS = Buffer3.alloc(128);
  function Hmac2(alg, key) {
    Base.call(this, "digest");
    if (typeof key === "string") {
      key = Buffer3.from(key);
    }
    var blocksize = alg === "sha512" || alg === "sha384" ? 128 : 64;
    this._alg = alg;
    this._key = key;
    if (key.length > blocksize) {
      var hash = alg === "rmd160" ? new RIPEMD160() : sha(alg);
      key = hash.update(key).digest();
    } else if (key.length < blocksize) {
      key = Buffer3.concat([key, ZEROS], blocksize);
    }
    var ipad = this._ipad = Buffer3.allocUnsafe(blocksize);
    var opad = this._opad = Buffer3.allocUnsafe(blocksize);
    for (var i8 = 0; i8 < blocksize; i8++) {
      ipad[i8] = key[i8] ^ 54;
      opad[i8] = key[i8] ^ 92;
    }
    this._hash = alg === "rmd160" ? new RIPEMD160() : sha(alg);
    this._hash.update(ipad);
  }
  inherits4(Hmac2, Base);
  Hmac2.prototype._update = function(data) {
    this._hash.update(data);
  };
  Hmac2.prototype._final = function() {
    var h8 = this._hash.digest();
    var hash = this._alg === "rmd160" ? new RIPEMD160() : sha(this._alg);
    return hash.update(this._opad).update(h8).digest();
  };
  exports$2w = function createHmac2(alg, key) {
    alg = alg.toLowerCase();
    if (alg === "rmd160" || alg === "ripemd160") {
      return new Hmac2("rmd160", key);
    }
    if (alg === "md5") {
      return new Legacy(md5, key);
    }
    return new Hmac2(alg, key);
  };
  return exports$2w;
}
function dew$2u() {
  if (_dewExec$2u)
    return exports$2v;
  _dewExec$2u = true;
  exports$2v = _algorithms$1;
  return exports$2v;
}
function dew$2t() {
  if (_dewExec$2t)
    return exports$2u;
  _dewExec$2t = true;
  var MAX_ALLOC = Math.pow(2, 30) - 1;
  exports$2u = function(iterations, keylen) {
    if (typeof iterations !== "number") {
      throw new TypeError("Iterations not a number");
    }
    if (iterations < 0) {
      throw new TypeError("Bad iterations");
    }
    if (typeof keylen !== "number") {
      throw new TypeError("Key length not a number");
    }
    if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) {
      throw new TypeError("Bad key length");
    }
  };
  return exports$2u;
}
function dew$2s() {
  if (_dewExec$2s)
    return exports$2t;
  _dewExec$2s = true;
  var process$1 = process2;
  var defaultEncoding;
  if (_global$J.process && _global$J.process.browser) {
    defaultEncoding = "utf-8";
  } else if (_global$J.process && _global$J.process.version) {
    var pVersionMajor = parseInt(process$1.version.split(".")[0].slice(1), 10);
    defaultEncoding = pVersionMajor >= 6 ? "utf-8" : "binary";
  } else {
    defaultEncoding = "utf-8";
  }
  exports$2t = defaultEncoding;
  return exports$2t;
}
function dew$2r() {
  if (_dewExec$2r)
    return exports$2s;
  _dewExec$2r = true;
  var Buffer3 = dew$2P().Buffer;
  exports$2s = function(thing, encoding, name2) {
    if (Buffer3.isBuffer(thing)) {
      return thing;
    } else if (typeof thing === "string") {
      return Buffer3.from(thing, encoding);
    } else if (ArrayBuffer.isView(thing)) {
      return Buffer3.from(thing.buffer);
    } else {
      throw new TypeError(name2 + " must be a string, a Buffer, a typed array or a DataView");
    }
  };
  return exports$2s;
}
function dew$2q() {
  if (_dewExec$2q)
    return exports$2r;
  _dewExec$2q = true;
  var md5 = dew$2w();
  var RIPEMD160 = dew$2K();
  var sha = dew$2C();
  var Buffer3 = dew$2P().Buffer;
  var checkParameters = dew$2t();
  var defaultEncoding = dew$2s();
  var toBuffer = dew$2r();
  var ZEROS = Buffer3.alloc(128);
  var sizes = {
    md5: 16,
    sha1: 20,
    sha224: 28,
    sha256: 32,
    sha384: 48,
    sha512: 64,
    rmd160: 20,
    ripemd160: 20
  };
  function Hmac2(alg, key, saltLen) {
    var hash = getDigest(alg);
    var blocksize = alg === "sha512" || alg === "sha384" ? 128 : 64;
    if (key.length > blocksize) {
      key = hash(key);
    } else if (key.length < blocksize) {
      key = Buffer3.concat([key, ZEROS], blocksize);
    }
    var ipad = Buffer3.allocUnsafe(blocksize + sizes[alg]);
    var opad = Buffer3.allocUnsafe(blocksize + sizes[alg]);
    for (var i8 = 0; i8 < blocksize; i8++) {
      ipad[i8] = key[i8] ^ 54;
      opad[i8] = key[i8] ^ 92;
    }
    var ipad1 = Buffer3.allocUnsafe(blocksize + saltLen + 4);
    ipad.copy(ipad1, 0, 0, blocksize);
    (this || _global$I).ipad1 = ipad1;
    (this || _global$I).ipad2 = ipad;
    (this || _global$I).opad = opad;
    (this || _global$I).alg = alg;
    (this || _global$I).blocksize = blocksize;
    (this || _global$I).hash = hash;
    (this || _global$I).size = sizes[alg];
  }
  Hmac2.prototype.run = function(data, ipad) {
    data.copy(ipad, (this || _global$I).blocksize);
    var h8 = this.hash(ipad);
    h8.copy((this || _global$I).opad, (this || _global$I).blocksize);
    return this.hash((this || _global$I).opad);
  };
  function getDigest(alg) {
    function shaFunc(data) {
      return sha(alg).update(data).digest();
    }
    function rmd160Func(data) {
      return new RIPEMD160().update(data).digest();
    }
    if (alg === "rmd160" || alg === "ripemd160")
      return rmd160Func;
    if (alg === "md5")
      return md5;
    return shaFunc;
  }
  function pbkdf22(password, salt, iterations, keylen, digest) {
    checkParameters(iterations, keylen);
    password = toBuffer(password, defaultEncoding, "Password");
    salt = toBuffer(salt, defaultEncoding, "Salt");
    digest = digest || "sha1";
    var hmac = new Hmac2(digest, password, salt.length);
    var DK = Buffer3.allocUnsafe(keylen);
    var block1 = Buffer3.allocUnsafe(salt.length + 4);
    salt.copy(block1, 0, 0, salt.length);
    var destPos = 0;
    var hLen = sizes[digest];
    var l8 = Math.ceil(keylen / hLen);
    for (var i8 = 1; i8 <= l8; i8++) {
      block1.writeUInt32BE(i8, salt.length);
      var T5 = hmac.run(block1, hmac.ipad1);
      var U4 = T5;
      for (var j4 = 1; j4 < iterations; j4++) {
        U4 = hmac.run(U4, hmac.ipad2);
        for (var k4 = 0; k4 < hLen; k4++)
          T5[k4] ^= U4[k4];
      }
      T5.copy(DK, destPos);
      destPos += hLen;
    }
    return DK;
  }
  exports$2r = pbkdf22;
  return exports$2r;
}
function dew$2p() {
  if (_dewExec$2p)
    return exports$2q;
  _dewExec$2p = true;
  var Buffer3 = dew$2P().Buffer;
  var checkParameters = dew$2t();
  var defaultEncoding = dew$2s();
  var sync = dew$2q();
  var toBuffer = dew$2r();
  var ZERO_BUF;
  var subtle = _global$H.crypto && _global$H.crypto.subtle;
  var toBrowser = {
    sha: "SHA-1",
    "sha-1": "SHA-1",
    sha1: "SHA-1",
    sha256: "SHA-256",
    "sha-256": "SHA-256",
    sha384: "SHA-384",
    "sha-384": "SHA-384",
    "sha-512": "SHA-512",
    sha512: "SHA-512"
  };
  var checks = [];
  function checkNative(algo) {
    if (_global$H.process && !_global$H.process.browser) {
      return Promise.resolve(false);
    }
    if (!subtle || !subtle.importKey || !subtle.deriveBits) {
      return Promise.resolve(false);
    }
    if (checks[algo] !== void 0) {
      return checks[algo];
    }
    ZERO_BUF = ZERO_BUF || Buffer3.alloc(8);
    var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo).then(function() {
      return true;
    }).catch(function() {
      return false;
    });
    checks[algo] = prom;
    return prom;
  }
  var nextTick2;
  function getNextTick() {
    if (nextTick2) {
      return nextTick2;
    }
    if (_global$H.process && _global$H.process.nextTick) {
      nextTick2 = _global$H.process.nextTick;
    } else if (_global$H.queueMicrotask) {
      nextTick2 = _global$H.queueMicrotask;
    } else if (_global$H.setImmediate) {
      nextTick2 = _global$H.setImmediate;
    } else {
      nextTick2 = _global$H.setTimeout;
    }
    return nextTick2;
  }
  function browserPbkdf2(password, salt, iterations, length, algo) {
    return subtle.importKey("raw", password, {
      name: "PBKDF2"
    }, false, ["deriveBits"]).then(function(key) {
      return subtle.deriveBits({
        name: "PBKDF2",
        salt,
        iterations,
        hash: {
          name: algo
        }
      }, key, length << 3);
    }).then(function(res) {
      return Buffer3.from(res);
    });
  }
  function resolvePromise(promise, callback) {
    promise.then(function(out) {
      getNextTick()(function() {
        callback(null, out);
      });
    }, function(e11) {
      getNextTick()(function() {
        callback(e11);
      });
    });
  }
  exports$2q = function(password, salt, iterations, keylen, digest, callback) {
    if (typeof digest === "function") {
      callback = digest;
      digest = void 0;
    }
    digest = digest || "sha1";
    var algo = toBrowser[digest.toLowerCase()];
    if (!algo || typeof _global$H.Promise !== "function") {
      getNextTick()(function() {
        var out;
        try {
          out = sync(password, salt, iterations, keylen, digest);
        } catch (e11) {
          return callback(e11);
        }
        callback(null, out);
      });
      return;
    }
    checkParameters(iterations, keylen);
    password = toBuffer(password, defaultEncoding, "Password");
    salt = toBuffer(salt, defaultEncoding, "Salt");
    if (typeof callback !== "function")
      throw new Error("No callback provided to pbkdf2");
    resolvePromise(checkNative(algo).then(function(resp) {
      if (resp)
        return browserPbkdf2(password, salt, iterations, keylen, algo);
      return sync(password, salt, iterations, keylen, digest);
    }), callback);
  };
  return exports$2q;
}
function dew$2o() {
  if (_dewExec$2o)
    return exports$2p;
  _dewExec$2o = true;
  exports$2p.pbkdf2 = dew$2p();
  exports$2p.pbkdf2Sync = dew$2q();
  return exports$2p;
}
function dew$2n() {
  if (_dewExec$2n)
    return exports$2o;
  _dewExec$2n = true;
  exports$2o.readUInt32BE = function readUInt32BE(bytes, off2) {
    var res = bytes[0 + off2] << 24 | bytes[1 + off2] << 16 | bytes[2 + off2] << 8 | bytes[3 + off2];
    return res >>> 0;
  };
  exports$2o.writeUInt32BE = function writeUInt32BE(bytes, value, off2) {
    bytes[0 + off2] = value >>> 24;
    bytes[1 + off2] = value >>> 16 & 255;
    bytes[2 + off2] = value >>> 8 & 255;
    bytes[3 + off2] = value & 255;
  };
  exports$2o.ip = function ip(inL, inR, out, off2) {
    var outL = 0;
    var outR = 0;
    for (var i8 = 6; i8 >= 0; i8 -= 2) {
      for (var j4 = 0; j4 <= 24; j4 += 8) {
        outL <<= 1;
        outL |= inR >>> j4 + i8 & 1;
      }
      for (var j4 = 0; j4 <= 24; j4 += 8) {
        outL <<= 1;
        outL |= inL >>> j4 + i8 & 1;
      }
    }
    for (var i8 = 6; i8 >= 0; i8 -= 2) {
      for (var j4 = 1; j4 <= 25; j4 += 8) {
        outR <<= 1;
        outR |= inR >>> j4 + i8 & 1;
      }
      for (var j4 = 1; j4 <= 25; j4 += 8) {
        outR <<= 1;
        outR |= inL >>> j4 + i8 & 1;
      }
    }
    out[off2 + 0] = outL >>> 0;
    out[off2 + 1] = outR >>> 0;
  };
  exports$2o.rip = function rip(inL, inR, out, off2) {
    var outL = 0;
    var outR = 0;
    for (var i8 = 0; i8 < 4; i8++) {
      for (var j4 = 24; j4 >= 0; j4 -= 8) {
        outL <<= 1;
        outL |= inR >>> j4 + i8 & 1;
        outL <<= 1;
        outL |= inL >>> j4 + i8 & 1;
      }
    }
    for (var i8 = 4; i8 < 8; i8++) {
      for (var j4 = 24; j4 >= 0; j4 -= 8) {
        outR <<= 1;
        outR |= inR >>> j4 + i8 & 1;
        outR <<= 1;
        outR |= inL >>> j4 + i8 & 1;
      }
    }
    out[off2 + 0] = outL >>> 0;
    out[off2 + 1] = outR >>> 0;
  };
  exports$2o.pc1 = function pc1(inL, inR, out, off2) {
    var outL = 0;
    var outR = 0;
    for (var i8 = 7; i8 >= 5; i8--) {
      for (var j4 = 0; j4 <= 24; j4 += 8) {
        outL <<= 1;
        outL |= inR >> j4 + i8 & 1;
      }
      for (var j4 = 0; j4 <= 24; j4 += 8) {
        outL <<= 1;
        outL |= inL >> j4 + i8 & 1;
      }
    }
    for (var j4 = 0; j4 <= 24; j4 += 8) {
      outL <<= 1;
      outL |= inR >> j4 + i8 & 1;
    }
    for (var i8 = 1; i8 <= 3; i8++) {
      for (var j4 = 0; j4 <= 24; j4 += 8) {
        outR <<= 1;
        outR |= inR >> j4 + i8 & 1;
      }
      for (var j4 = 0; j4 <= 24; j4 += 8) {
        outR <<= 1;
        outR |= inL >> j4 + i8 & 1;
      }
    }
    for (var j4 = 0; j4 <= 24; j4 += 8) {
      outR <<= 1;
      outR |= inL >> j4 + i8 & 1;
    }
    out[off2 + 0] = outL >>> 0;
    out[off2 + 1] = outR >>> 0;
  };
  exports$2o.r28shl = function r28shl(num, shift) {
    return num << shift & 268435455 | num >>> 28 - shift;
  };
  var pc2table = [
    14,
    11,
    17,
    4,
    27,
    23,
    25,
    0,
    13,
    22,
    7,
    18,
    5,
    9,
    16,
    24,
    2,
    20,
    12,
    21,
    1,
    8,
    15,
    26,
    15,
    4,
    25,
    19,
    9,
    1,
    26,
    16,
    5,
    11,
    23,
    8,
    12,
    7,
    17,
    0,
    22,
    3,
    10,
    14,
    6,
    20,
    27,
    24
  ];
  exports$2o.pc2 = function pc2(inL, inR, out, off2) {
    var outL = 0;
    var outR = 0;
    var len = pc2table.length >>> 1;
    for (var i8 = 0; i8 < len; i8++) {
      outL <<= 1;
      outL |= inL >>> pc2table[i8] & 1;
    }
    for (var i8 = len; i8 < pc2table.length; i8++) {
      outR <<= 1;
      outR |= inR >>> pc2table[i8] & 1;
    }
    out[off2 + 0] = outL >>> 0;
    out[off2 + 1] = outR >>> 0;
  };
  exports$2o.expand = function expand(r9, out, off2) {
    var outL = 0;
    var outR = 0;
    outL = (r9 & 1) << 5 | r9 >>> 27;
    for (var i8 = 23; i8 >= 15; i8 -= 4) {
      outL <<= 6;
      outL |= r9 >>> i8 & 63;
    }
    for (var i8 = 11; i8 >= 3; i8 -= 4) {
      outR |= r9 >>> i8 & 63;
      outR <<= 6;
    }
    outR |= (r9 & 31) << 1 | r9 >>> 31;
    out[off2 + 0] = outL >>> 0;
    out[off2 + 1] = outR >>> 0;
  };
  var sTable = [14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1, 3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8, 4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7, 15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13, 15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14, 9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5, 0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2, 5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9, 10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10, 1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1, 13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7, 11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12, 7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3, 1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9, 10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8, 15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14, 2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1, 8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6, 4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13, 15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3, 12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5, 0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8, 9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10, 7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13, 4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10, 3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6, 1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7, 10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12, 13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4, 10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2, 7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13, 0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11];
  exports$2o.substitute = function substitute(inL, inR) {
    var out = 0;
    for (var i8 = 0; i8 < 4; i8++) {
      var b5 = inL >>> 18 - i8 * 6 & 63;
      var sb = sTable[i8 * 64 + b5];
      out <<= 4;
      out |= sb;
    }
    for (var i8 = 0; i8 < 4; i8++) {
      var b5 = inR >>> 18 - i8 * 6 & 63;
      var sb = sTable[4 * 64 + i8 * 64 + b5];
      out <<= 4;
      out |= sb;
    }
    return out >>> 0;
  };
  var permuteTable = [16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22, 30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7];
  exports$2o.permute = function permute(num) {
    var out = 0;
    for (var i8 = 0; i8 < permuteTable.length; i8++) {
      out <<= 1;
      out |= num >>> permuteTable[i8] & 1;
    }
    return out >>> 0;
  };
  exports$2o.padSplit = function padSplit(num, size, group) {
    var str = num.toString(2);
    while (str.length < size)
      str = "0" + str;
    var out = [];
    for (var i8 = 0; i8 < size; i8 += group)
      out.push(str.slice(i8, i8 + group));
    return out.join(" ");
  };
  return exports$2o;
}
function dew$2m() {
  if (_dewExec$2m)
    return exports$2n;
  _dewExec$2m = true;
  exports$2n = assert2;
  function assert2(val, msg) {
    if (!val)
      throw new Error(msg || "Assertion failed");
  }
  assert2.equal = function assertEqual(l8, r9, msg) {
    if (l8 != r9)
      throw new Error(msg || "Assertion failed: " + l8 + " != " + r9);
  };
  return exports$2n;
}
function dew$2l() {
  if (_dewExec$2l)
    return exports$2m;
  _dewExec$2l = true;
  var assert2 = dew$2m();
  function Cipher2(options) {
    this.options = options;
    this.type = this.options.type;
    this.blockSize = 8;
    this._init();
    this.buffer = new Array(this.blockSize);
    this.bufferOff = 0;
  }
  exports$2m = Cipher2;
  Cipher2.prototype._init = function _init() {
  };
  Cipher2.prototype.update = function update(data) {
    if (data.length === 0)
      return [];
    if (this.type === "decrypt")
      return this._updateDecrypt(data);
    else
      return this._updateEncrypt(data);
  };
  Cipher2.prototype._buffer = function _buffer(data, off2) {
    var min = Math.min(this.buffer.length - this.bufferOff, data.length - off2);
    for (var i8 = 0; i8 < min; i8++)
      this.buffer[this.bufferOff + i8] = data[off2 + i8];
    this.bufferOff += min;
    return min;
  };
  Cipher2.prototype._flushBuffer = function _flushBuffer(out, off2) {
    this._update(this.buffer, 0, out, off2);
    this.bufferOff = 0;
    return this.blockSize;
  };
  Cipher2.prototype._updateEncrypt = function _updateEncrypt(data) {
    var inputOff = 0;
    var outputOff = 0;
    var count = (this.bufferOff + data.length) / this.blockSize | 0;
    var out = new Array(count * this.blockSize);
    if (this.bufferOff !== 0) {
      inputOff += this._buffer(data, inputOff);
      if (this.bufferOff === this.buffer.length)
        outputOff += this._flushBuffer(out, outputOff);
    }
    var max = data.length - (data.length - inputOff) % this.blockSize;
    for (; inputOff < max; inputOff += this.blockSize) {
      this._update(data, inputOff, out, outputOff);
      outputOff += this.blockSize;
    }
    for (; inputOff < data.length; inputOff++, this.bufferOff++)
      this.buffer[this.bufferOff] = data[inputOff];
    return out;
  };
  Cipher2.prototype._updateDecrypt = function _updateDecrypt(data) {
    var inputOff = 0;
    var outputOff = 0;
    var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
    var out = new Array(count * this.blockSize);
    for (; count > 0; count--) {
      inputOff += this._buffer(data, inputOff);
      outputOff += this._flushBuffer(out, outputOff);
    }
    inputOff += this._buffer(data, inputOff);
    return out;
  };
  Cipher2.prototype.final = function final(buffer2) {
    var first;
    if (buffer2)
      first = this.update(buffer2);
    var last;
    if (this.type === "encrypt")
      last = this._finalEncrypt();
    else
      last = this._finalDecrypt();
    if (first)
      return first.concat(last);
    else
      return last;
  };
  Cipher2.prototype._pad = function _pad(buffer2, off2) {
    if (off2 === 0)
      return false;
    while (off2 < buffer2.length)
      buffer2[off2++] = 0;
    return true;
  };
  Cipher2.prototype._finalEncrypt = function _finalEncrypt() {
    if (!this._pad(this.buffer, this.bufferOff))
      return [];
    var out = new Array(this.blockSize);
    this._update(this.buffer, 0, out, 0);
    return out;
  };
  Cipher2.prototype._unpad = function _unpad(buffer2) {
    return buffer2;
  };
  Cipher2.prototype._finalDecrypt = function _finalDecrypt() {
    assert2.equal(this.bufferOff, this.blockSize, "Not enough data to decrypt");
    var out = new Array(this.blockSize);
    this._flushBuffer(out, 0);
    return this._unpad(out);
  };
  return exports$2m;
}
function dew$2k() {
  if (_dewExec$2k)
    return exports$2l;
  _dewExec$2k = true;
  var assert2 = dew$2m();
  var inherits4 = dew$f();
  var utils = dew$2n();
  var Cipher2 = dew$2l();
  function DESState() {
    this.tmp = new Array(2);
    this.keys = null;
  }
  function DES(options) {
    Cipher2.call(this, options);
    var state = new DESState();
    this._desState = state;
    this.deriveKeys(state, options.key);
  }
  inherits4(DES, Cipher2);
  exports$2l = DES;
  DES.create = function create(options) {
    return new DES(options);
  };
  var shiftTable = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1];
  DES.prototype.deriveKeys = function deriveKeys(state, key) {
    state.keys = new Array(16 * 2);
    assert2.equal(key.length, this.blockSize, "Invalid key length");
    var kL = utils.readUInt32BE(key, 0);
    var kR = utils.readUInt32BE(key, 4);
    utils.pc1(kL, kR, state.tmp, 0);
    kL = state.tmp[0];
    kR = state.tmp[1];
    for (var i8 = 0; i8 < state.keys.length; i8 += 2) {
      var shift = shiftTable[i8 >>> 1];
      kL = utils.r28shl(kL, shift);
      kR = utils.r28shl(kR, shift);
      utils.pc2(kL, kR, state.keys, i8);
    }
  };
  DES.prototype._update = function _update(inp, inOff, out, outOff) {
    var state = this._desState;
    var l8 = utils.readUInt32BE(inp, inOff);
    var r9 = utils.readUInt32BE(inp, inOff + 4);
    utils.ip(l8, r9, state.tmp, 0);
    l8 = state.tmp[0];
    r9 = state.tmp[1];
    if (this.type === "encrypt")
      this._encrypt(state, l8, r9, state.tmp, 0);
    else
      this._decrypt(state, l8, r9, state.tmp, 0);
    l8 = state.tmp[0];
    r9 = state.tmp[1];
    utils.writeUInt32BE(out, l8, outOff);
    utils.writeUInt32BE(out, r9, outOff + 4);
  };
  DES.prototype._pad = function _pad(buffer2, off2) {
    var value = buffer2.length - off2;
    for (var i8 = off2; i8 < buffer2.length; i8++)
      buffer2[i8] = value;
    return true;
  };
  DES.prototype._unpad = function _unpad(buffer2) {
    var pad = buffer2[buffer2.length - 1];
    for (var i8 = buffer2.length - pad; i8 < buffer2.length; i8++)
      assert2.equal(buffer2[i8], pad);
    return buffer2.slice(0, buffer2.length - pad);
  };
  DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off2) {
    var l8 = lStart;
    var r9 = rStart;
    for (var i8 = 0; i8 < state.keys.length; i8 += 2) {
      var keyL = state.keys[i8];
      var keyR = state.keys[i8 + 1];
      utils.expand(r9, state.tmp, 0);
      keyL ^= state.tmp[0];
      keyR ^= state.tmp[1];
      var s7 = utils.substitute(keyL, keyR);
      var f9 = utils.permute(s7);
      var t8 = r9;
      r9 = (l8 ^ f9) >>> 0;
      l8 = t8;
    }
    utils.rip(r9, l8, out, off2);
  };
  DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off2) {
    var l8 = rStart;
    var r9 = lStart;
    for (var i8 = state.keys.length - 2; i8 >= 0; i8 -= 2) {
      var keyL = state.keys[i8];
      var keyR = state.keys[i8 + 1];
      utils.expand(l8, state.tmp, 0);
      keyL ^= state.tmp[0];
      keyR ^= state.tmp[1];
      var s7 = utils.substitute(keyL, keyR);
      var f9 = utils.permute(s7);
      var t8 = l8;
      l8 = (r9 ^ f9) >>> 0;
      r9 = t8;
    }
    utils.rip(l8, r9, out, off2);
  };
  return exports$2l;
}
function dew$2j() {
  if (_dewExec$2j)
    return exports$2k;
  _dewExec$2j = true;
  var assert2 = dew$2m();
  var inherits4 = dew$f();
  var proto = {};
  function CBCState(iv) {
    assert2.equal(iv.length, 8, "Invalid IV length");
    this.iv = new Array(8);
    for (var i8 = 0; i8 < this.iv.length; i8++)
      this.iv[i8] = iv[i8];
  }
  function instantiate(Base) {
    function CBC(options) {
      Base.call(this, options);
      this._cbcInit();
    }
    inherits4(CBC, Base);
    var keys = Object.keys(proto);
    for (var i8 = 0; i8 < keys.length; i8++) {
      var key = keys[i8];
      CBC.prototype[key] = proto[key];
    }
    CBC.create = function create(options) {
      return new CBC(options);
    };
    return CBC;
  }
  exports$2k.instantiate = instantiate;
  proto._cbcInit = function _cbcInit() {
    var state = new CBCState(this.options.iv);
    this._cbcState = state;
  };
  proto._update = function _update(inp, inOff, out, outOff) {
    var state = this._cbcState;
    var superProto = this.constructor.super_.prototype;
    var iv = state.iv;
    if (this.type === "encrypt") {
      for (var i8 = 0; i8 < this.blockSize; i8++)
        iv[i8] ^= inp[inOff + i8];
      superProto._update.call(this, iv, 0, out, outOff);
      for (var i8 = 0; i8 < this.blockSize; i8++)
        iv[i8] = out[outOff + i8];
    } else {
      superProto._update.call(this, inp, inOff, out, outOff);
      for (var i8 = 0; i8 < this.blockSize; i8++)
        out[outOff + i8] ^= iv[i8];
      for (var i8 = 0; i8 < this.blockSize; i8++)
        iv[i8] = inp[inOff + i8];
    }
  };
  return exports$2k;
}
function dew$2i() {
  if (_dewExec$2i)
    return exports$2j;
  _dewExec$2i = true;
  var assert2 = dew$2m();
  var inherits4 = dew$f();
  var Cipher2 = dew$2l();
  var DES = dew$2k();
  function EDEState(type, key) {
    assert2.equal(key.length, 24, "Invalid key length");
    var k1 = key.slice(0, 8);
    var k22 = key.slice(8, 16);
    var k32 = key.slice(16, 24);
    if (type === "encrypt") {
      this.ciphers = [DES.create({
        type: "encrypt",
        key: k1
      }), DES.create({
        type: "decrypt",
        key: k22
      }), DES.create({
        type: "encrypt",
        key: k32
      })];
    } else {
      this.ciphers = [DES.create({
        type: "decrypt",
        key: k32
      }), DES.create({
        type: "encrypt",
        key: k22
      }), DES.create({
        type: "decrypt",
        key: k1
      })];
    }
  }
  function EDE(options) {
    Cipher2.call(this, options);
    var state = new EDEState(this.type, this.options.key);
    this._edeState = state;
  }
  inherits4(EDE, Cipher2);
  exports$2j = EDE;
  EDE.create = function create(options) {
    return new EDE(options);
  };
  EDE.prototype._update = function _update(inp, inOff, out, outOff) {
    var state = this._edeState;
    state.ciphers[0]._update(inp, inOff, out, outOff);
    state.ciphers[1]._update(out, outOff, out, outOff);
    state.ciphers[2]._update(out, outOff, out, outOff);
  };
  EDE.prototype._pad = DES.prototype._pad;
  EDE.prototype._unpad = DES.prototype._unpad;
  return exports$2j;
}
function dew$2h() {
  if (_dewExec$2h)
    return exports$2i;
  _dewExec$2h = true;
  exports$2i.utils = dew$2n();
  exports$2i.Cipher = dew$2l();
  exports$2i.DES = dew$2k();
  exports$2i.CBC = dew$2j();
  exports$2i.EDE = dew$2i();
  return exports$2i;
}
function dew$2g() {
  if (_dewExec$2g)
    return exports$2h;
  _dewExec$2g = true;
  var CipherBase = dew$2z();
  var des = dew$2h();
  var inherits4 = dew$f();
  var Buffer3 = dew$2P().Buffer;
  var modes = {
    "des-ede3-cbc": des.CBC.instantiate(des.EDE),
    "des-ede3": des.EDE,
    "des-ede-cbc": des.CBC.instantiate(des.EDE),
    "des-ede": des.EDE,
    "des-cbc": des.CBC.instantiate(des.DES),
    "des-ecb": des.DES
  };
  modes.des = modes["des-cbc"];
  modes.des3 = modes["des-ede3-cbc"];
  exports$2h = DES;
  inherits4(DES, CipherBase);
  function DES(opts) {
    CipherBase.call(this || _global$G);
    var modeName = opts.mode.toLowerCase();
    var mode = modes[modeName];
    var type;
    if (opts.decrypt) {
      type = "decrypt";
    } else {
      type = "encrypt";
    }
    var key = opts.key;
    if (!Buffer3.isBuffer(key)) {
      key = Buffer3.from(key);
    }
    if (modeName === "des-ede" || modeName === "des-ede-cbc") {
      key = Buffer3.concat([key, key.slice(0, 8)]);
    }
    var iv = opts.iv;
    if (!Buffer3.isBuffer(iv)) {
      iv = Buffer3.from(iv);
    }
    (this || _global$G)._des = mode.create({
      key,
      iv,
      type
    });
  }
  DES.prototype._update = function(data) {
    return Buffer3.from((this || _global$G)._des.update(data));
  };
  DES.prototype._final = function() {
    return Buffer3.from((this || _global$G)._des.final());
  };
  return exports$2h;
}
function dew$2f() {
  if (_dewExec$2f)
    return exports$2g;
  _dewExec$2f = true;
  exports$2g.encrypt = function(self2, block) {
    return self2._cipher.encryptBlock(block);
  };
  exports$2g.decrypt = function(self2, block) {
    return self2._cipher.decryptBlock(block);
  };
  return exports$2g;
}
function dew$2e() {
  if (_dewExec$2e)
    return exports$2f;
  _dewExec$2e = true;
  var Buffer3 = buffer.Buffer;
  exports$2f = function xor(a8, b5) {
    var length = Math.min(a8.length, b5.length);
    var buffer2 = new Buffer3(length);
    for (var i8 = 0; i8 < length; ++i8) {
      buffer2[i8] = a8[i8] ^ b5[i8];
    }
    return buffer2;
  };
  return exports$2f;
}
function dew$2d() {
  if (_dewExec$2d)
    return exports$2e;
  _dewExec$2d = true;
  var xor = dew$2e();
  exports$2e.encrypt = function(self2, block) {
    var data = xor(block, self2._prev);
    self2._prev = self2._cipher.encryptBlock(data);
    return self2._prev;
  };
  exports$2e.decrypt = function(self2, block) {
    var pad = self2._prev;
    self2._prev = block;
    var out = self2._cipher.decryptBlock(block);
    return xor(out, pad);
  };
  return exports$2e;
}
function dew$2c() {
  if (_dewExec$2c)
    return exports$2d;
  _dewExec$2c = true;
  var Buffer3 = dew$2P().Buffer;
  var xor = dew$2e();
  function encryptStart(self2, data, decrypt) {
    var len = data.length;
    var out = xor(data, self2._cache);
    self2._cache = self2._cache.slice(len);
    self2._prev = Buffer3.concat([self2._prev, decrypt ? data : out]);
    return out;
  }
  exports$2d.encrypt = function(self2, data, decrypt) {
    var out = Buffer3.allocUnsafe(0);
    var len;
    while (data.length) {
      if (self2._cache.length === 0) {
        self2._cache = self2._cipher.encryptBlock(self2._prev);
        self2._prev = Buffer3.allocUnsafe(0);
      }
      if (self2._cache.length <= data.length) {
        len = self2._cache.length;
        out = Buffer3.concat([out, encryptStart(self2, data.slice(0, len), decrypt)]);
        data = data.slice(len);
      } else {
        out = Buffer3.concat([out, encryptStart(self2, data, decrypt)]);
        break;
      }
    }
    return out;
  };
  return exports$2d;
}
function dew$2b() {
  if (_dewExec$2b)
    return exports$2c;
  _dewExec$2b = true;
  var Buffer3 = dew$2P().Buffer;
  function encryptByte(self2, byteParam, decrypt) {
    var pad = self2._cipher.encryptBlock(self2._prev);
    var out = pad[0] ^ byteParam;
    self2._prev = Buffer3.concat([self2._prev.slice(1), Buffer3.from([decrypt ? byteParam : out])]);
    return out;
  }
  exports$2c.encrypt = function(self2, chunk, decrypt) {
    var len = chunk.length;
    var out = Buffer3.allocUnsafe(len);
    var i8 = -1;
    while (++i8 < len) {
      out[i8] = encryptByte(self2, chunk[i8], decrypt);
    }
    return out;
  };
  return exports$2c;
}
function dew$2a() {
  if (_dewExec$2a)
    return exports$2b;
  _dewExec$2a = true;
  var Buffer3 = dew$2P().Buffer;
  function encryptByte(self2, byteParam, decrypt) {
    var pad;
    var i8 = -1;
    var len = 8;
    var out = 0;
    var bit, value;
    while (++i8 < len) {
      pad = self2._cipher.encryptBlock(self2._prev);
      bit = byteParam & 1 << 7 - i8 ? 128 : 0;
      value = pad[0] ^ bit;
      out += (value & 128) >> i8 % 8;
      self2._prev = shiftIn(self2._prev, decrypt ? bit : value);
    }
    return out;
  }
  function shiftIn(buffer2, value) {
    var len = buffer2.length;
    var i8 = -1;
    var out = Buffer3.allocUnsafe(buffer2.length);
    buffer2 = Buffer3.concat([buffer2, Buffer3.from([value])]);
    while (++i8 < len) {
      out[i8] = buffer2[i8] << 1 | buffer2[i8 + 1] >> 7;
    }
    return out;
  }
  exports$2b.encrypt = function(self2, chunk, decrypt) {
    var len = chunk.length;
    var out = Buffer3.allocUnsafe(len);
    var i8 = -1;
    while (++i8 < len) {
      out[i8] = encryptByte(self2, chunk[i8], decrypt);
    }
    return out;
  };
  return exports$2b;
}
function dew$29() {
  if (_dewExec$29)
    return exports$2a;
  _dewExec$29 = true;
  var Buffer3 = buffer.Buffer;
  var xor = dew$2e();
  function getBlock(self2) {
    self2._prev = self2._cipher.encryptBlock(self2._prev);
    return self2._prev;
  }
  exports$2a.encrypt = function(self2, chunk) {
    while (self2._cache.length < chunk.length) {
      self2._cache = Buffer3.concat([self2._cache, getBlock(self2)]);
    }
    var pad = self2._cache.slice(0, chunk.length);
    self2._cache = self2._cache.slice(chunk.length);
    return xor(chunk, pad);
  };
  return exports$2a;
}
function dew$28() {
  if (_dewExec$28)
    return exports$29;
  _dewExec$28 = true;
  function incr32(iv) {
    var len = iv.length;
    var item;
    while (len--) {
      item = iv.readUInt8(len);
      if (item === 255) {
        iv.writeUInt8(0, len);
      } else {
        item++;
        iv.writeUInt8(item, len);
        break;
      }
    }
  }
  exports$29 = incr32;
  return exports$29;
}
function dew$27() {
  if (_dewExec$27)
    return exports$28;
  _dewExec$27 = true;
  var xor = dew$2e();
  var Buffer3 = dew$2P().Buffer;
  var incr32 = dew$28();
  function getBlock(self2) {
    var out = self2._cipher.encryptBlockRaw(self2._prev);
    incr32(self2._prev);
    return out;
  }
  var blockSize = 16;
  exports$28.encrypt = function(self2, chunk) {
    var chunkNum = Math.ceil(chunk.length / blockSize);
    var start = self2._cache.length;
    self2._cache = Buffer3.concat([self2._cache, Buffer3.allocUnsafe(chunkNum * blockSize)]);
    for (var i8 = 0; i8 < chunkNum; i8++) {
      var out = getBlock(self2);
      var offset = start + i8 * blockSize;
      self2._cache.writeUInt32BE(out[0], offset + 0);
      self2._cache.writeUInt32BE(out[1], offset + 4);
      self2._cache.writeUInt32BE(out[2], offset + 8);
      self2._cache.writeUInt32BE(out[3], offset + 12);
    }
    var pad = self2._cache.slice(0, chunk.length);
    self2._cache = self2._cache.slice(chunk.length);
    return xor(chunk, pad);
  };
  return exports$28;
}
function dew$26() {
  if (_dewExec$26)
    return exports$27;
  _dewExec$26 = true;
  var modeModules = {
    ECB: dew$2f(),
    CBC: dew$2d(),
    CFB: dew$2c(),
    CFB8: dew$2b(),
    CFB1: dew$2a(),
    OFB: dew$29(),
    CTR: dew$27(),
    GCM: dew$27()
  };
  var modes = _list$1;
  for (var key in modes) {
    modes[key].module = modeModules[modes[key].mode];
  }
  exports$27 = modes;
  return exports$27;
}
function dew$25() {
  if (_dewExec$25)
    return exports$26;
  _dewExec$25 = true;
  var Buffer3 = dew$2P().Buffer;
  function asUInt32Array(buf) {
    if (!Buffer3.isBuffer(buf))
      buf = Buffer3.from(buf);
    var len = buf.length / 4 | 0;
    var out = new Array(len);
    for (var i8 = 0; i8 < len; i8++) {
      out[i8] = buf.readUInt32BE(i8 * 4);
    }
    return out;
  }
  function scrubVec(v6) {
    for (var i8 = 0; i8 < v6.length; v6++) {
      v6[i8] = 0;
    }
  }
  function cryptBlock(M4, keySchedule, SUB_MIX, SBOX, nRounds) {
    var SUB_MIX0 = SUB_MIX[0];
    var SUB_MIX1 = SUB_MIX[1];
    var SUB_MIX2 = SUB_MIX[2];
    var SUB_MIX3 = SUB_MIX[3];
    var s0 = M4[0] ^ keySchedule[0];
    var s1 = M4[1] ^ keySchedule[1];
    var s22 = M4[2] ^ keySchedule[2];
    var s32 = M4[3] ^ keySchedule[3];
    var t0, t1, t22, t32;
    var ksRow = 4;
    for (var round = 1; round < nRounds; round++) {
      t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[s1 >>> 16 & 255] ^ SUB_MIX2[s22 >>> 8 & 255] ^ SUB_MIX3[s32 & 255] ^ keySchedule[ksRow++];
      t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[s22 >>> 16 & 255] ^ SUB_MIX2[s32 >>> 8 & 255] ^ SUB_MIX3[s0 & 255] ^ keySchedule[ksRow++];
      t22 = SUB_MIX0[s22 >>> 24] ^ SUB_MIX1[s32 >>> 16 & 255] ^ SUB_MIX2[s0 >>> 8 & 255] ^ SUB_MIX3[s1 & 255] ^ keySchedule[ksRow++];
      t32 = SUB_MIX0[s32 >>> 24] ^ SUB_MIX1[s0 >>> 16 & 255] ^ SUB_MIX2[s1 >>> 8 & 255] ^ SUB_MIX3[s22 & 255] ^ keySchedule[ksRow++];
      s0 = t0;
      s1 = t1;
      s22 = t22;
      s32 = t32;
    }
    t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 255] << 16 | SBOX[s22 >>> 8 & 255] << 8 | SBOX[s32 & 255]) ^ keySchedule[ksRow++];
    t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s22 >>> 16 & 255] << 16 | SBOX[s32 >>> 8 & 255] << 8 | SBOX[s0 & 255]) ^ keySchedule[ksRow++];
    t22 = (SBOX[s22 >>> 24] << 24 | SBOX[s32 >>> 16 & 255] << 16 | SBOX[s0 >>> 8 & 255] << 8 | SBOX[s1 & 255]) ^ keySchedule[ksRow++];
    t32 = (SBOX[s32 >>> 24] << 24 | SBOX[s0 >>> 16 & 255] << 16 | SBOX[s1 >>> 8 & 255] << 8 | SBOX[s22 & 255]) ^ keySchedule[ksRow++];
    t0 = t0 >>> 0;
    t1 = t1 >>> 0;
    t22 = t22 >>> 0;
    t32 = t32 >>> 0;
    return [t0, t1, t22, t32];
  }
  var RCON = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
  var G3 = function() {
    var d6 = new Array(256);
    for (var j4 = 0; j4 < 256; j4++) {
      if (j4 < 128) {
        d6[j4] = j4 << 1;
      } else {
        d6[j4] = j4 << 1 ^ 283;
      }
    }
    var SBOX = [];
    var INV_SBOX = [];
    var SUB_MIX = [[], [], [], []];
    var INV_SUB_MIX = [[], [], [], []];
    var x4 = 0;
    var xi = 0;
    for (var i8 = 0; i8 < 256; ++i8) {
      var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
      sx = sx >>> 8 ^ sx & 255 ^ 99;
      SBOX[x4] = sx;
      INV_SBOX[sx] = x4;
      var x22 = d6[x4];
      var x42 = d6[x22];
      var x8 = d6[x42];
      var t8 = d6[sx] * 257 ^ sx * 16843008;
      SUB_MIX[0][x4] = t8 << 24 | t8 >>> 8;
      SUB_MIX[1][x4] = t8 << 16 | t8 >>> 16;
      SUB_MIX[2][x4] = t8 << 8 | t8 >>> 24;
      SUB_MIX[3][x4] = t8;
      t8 = x8 * 16843009 ^ x42 * 65537 ^ x22 * 257 ^ x4 * 16843008;
      INV_SUB_MIX[0][sx] = t8 << 24 | t8 >>> 8;
      INV_SUB_MIX[1][sx] = t8 << 16 | t8 >>> 16;
      INV_SUB_MIX[2][sx] = t8 << 8 | t8 >>> 24;
      INV_SUB_MIX[3][sx] = t8;
      if (x4 === 0) {
        x4 = xi = 1;
      } else {
        x4 = x22 ^ d6[d6[d6[x8 ^ x22]]];
        xi ^= d6[d6[xi]];
      }
    }
    return {
      SBOX,
      INV_SBOX,
      SUB_MIX,
      INV_SUB_MIX
    };
  }();
  function AES(key) {
    (this || _global$F)._key = asUInt32Array(key);
    this._reset();
  }
  AES.blockSize = 4 * 4;
  AES.keySize = 256 / 8;
  AES.prototype.blockSize = AES.blockSize;
  AES.prototype.keySize = AES.keySize;
  AES.prototype._reset = function() {
    var keyWords = (this || _global$F)._key;
    var keySize = keyWords.length;
    var nRounds = keySize + 6;
    var ksRows = (nRounds + 1) * 4;
    var keySchedule = [];
    for (var k4 = 0; k4 < keySize; k4++) {
      keySchedule[k4] = keyWords[k4];
    }
    for (k4 = keySize; k4 < ksRows; k4++) {
      var t8 = keySchedule[k4 - 1];
      if (k4 % keySize === 0) {
        t8 = t8 << 8 | t8 >>> 24;
        t8 = G3.SBOX[t8 >>> 24] << 24 | G3.SBOX[t8 >>> 16 & 255] << 16 | G3.SBOX[t8 >>> 8 & 255] << 8 | G3.SBOX[t8 & 255];
        t8 ^= RCON[k4 / keySize | 0] << 24;
      } else if (keySize > 6 && k4 % keySize === 4) {
        t8 = G3.SBOX[t8 >>> 24] << 24 | G3.SBOX[t8 >>> 16 & 255] << 16 | G3.SBOX[t8 >>> 8 & 255] << 8 | G3.SBOX[t8 & 255];
      }
      keySchedule[k4] = keySchedule[k4 - keySize] ^ t8;
    }
    var invKeySchedule = [];
    for (var ik = 0; ik < ksRows; ik++) {
      var ksR = ksRows - ik;
      var tt2 = keySchedule[ksR - (ik % 4 ? 0 : 4)];
      if (ik < 4 || ksR <= 4) {
        invKeySchedule[ik] = tt2;
      } else {
        invKeySchedule[ik] = G3.INV_SUB_MIX[0][G3.SBOX[tt2 >>> 24]] ^ G3.INV_SUB_MIX[1][G3.SBOX[tt2 >>> 16 & 255]] ^ G3.INV_SUB_MIX[2][G3.SBOX[tt2 >>> 8 & 255]] ^ G3.INV_SUB_MIX[3][G3.SBOX[tt2 & 255]];
      }
    }
    (this || _global$F)._nRounds = nRounds;
    (this || _global$F)._keySchedule = keySchedule;
    (this || _global$F)._invKeySchedule = invKeySchedule;
  };
  AES.prototype.encryptBlockRaw = function(M4) {
    M4 = asUInt32Array(M4);
    return cryptBlock(M4, (this || _global$F)._keySchedule, G3.SUB_MIX, G3.SBOX, (this || _global$F)._nRounds);
  };
  AES.prototype.encryptBlock = function(M4) {
    var out = this.encryptBlockRaw(M4);
    var buf = Buffer3.allocUnsafe(16);
    buf.writeUInt32BE(out[0], 0);
    buf.writeUInt32BE(out[1], 4);
    buf.writeUInt32BE(out[2], 8);
    buf.writeUInt32BE(out[3], 12);
    return buf;
  };
  AES.prototype.decryptBlock = function(M4) {
    M4 = asUInt32Array(M4);
    var m1 = M4[1];
    M4[1] = M4[3];
    M4[3] = m1;
    var out = cryptBlock(M4, (this || _global$F)._invKeySchedule, G3.INV_SUB_MIX, G3.INV_SBOX, (this || _global$F)._nRounds);
    var buf = Buffer3.allocUnsafe(16);
    buf.writeUInt32BE(out[0], 0);
    buf.writeUInt32BE(out[3], 4);
    buf.writeUInt32BE(out[2], 8);
    buf.writeUInt32BE(out[1], 12);
    return buf;
  };
  AES.prototype.scrub = function() {
    scrubVec((this || _global$F)._keySchedule);
    scrubVec((this || _global$F)._invKeySchedule);
    scrubVec((this || _global$F)._key);
  };
  exports$26.AES = AES;
  return exports$26;
}
function dew$24() {
  if (_dewExec$24)
    return exports$25;
  _dewExec$24 = true;
  var Buffer3 = dew$2P().Buffer;
  var ZEROES = Buffer3.alloc(16, 0);
  function toArray2(buf) {
    return [buf.readUInt32BE(0), buf.readUInt32BE(4), buf.readUInt32BE(8), buf.readUInt32BE(12)];
  }
  function fromArray(out) {
    var buf = Buffer3.allocUnsafe(16);
    buf.writeUInt32BE(out[0] >>> 0, 0);
    buf.writeUInt32BE(out[1] >>> 0, 4);
    buf.writeUInt32BE(out[2] >>> 0, 8);
    buf.writeUInt32BE(out[3] >>> 0, 12);
    return buf;
  }
  function GHASH(key) {
    (this || _global$E).h = key;
    (this || _global$E).state = Buffer3.alloc(16, 0);
    (this || _global$E).cache = Buffer3.allocUnsafe(0);
  }
  GHASH.prototype.ghash = function(block) {
    var i8 = -1;
    while (++i8 < block.length) {
      (this || _global$E).state[i8] ^= block[i8];
    }
    this._multiply();
  };
  GHASH.prototype._multiply = function() {
    var Vi = toArray2((this || _global$E).h);
    var Zi = [0, 0, 0, 0];
    var j4, xi, lsbVi;
    var i8 = -1;
    while (++i8 < 128) {
      xi = ((this || _global$E).state[~~(i8 / 8)] & 1 << 7 - i8 % 8) !== 0;
      if (xi) {
        Zi[0] ^= Vi[0];
        Zi[1] ^= Vi[1];
        Zi[2] ^= Vi[2];
        Zi[3] ^= Vi[3];
      }
      lsbVi = (Vi[3] & 1) !== 0;
      for (j4 = 3; j4 > 0; j4--) {
        Vi[j4] = Vi[j4] >>> 1 | (Vi[j4 - 1] & 1) << 31;
      }
      Vi[0] = Vi[0] >>> 1;
      if (lsbVi) {
        Vi[0] = Vi[0] ^ 225 << 24;
      }
    }
    (this || _global$E).state = fromArray(Zi);
  };
  GHASH.prototype.update = function(buf) {
    (this || _global$E).cache = Buffer3.concat([(this || _global$E).cache, buf]);
    var chunk;
    while ((this || _global$E).cache.length >= 16) {
      chunk = (this || _global$E).cache.slice(0, 16);
      (this || _global$E).cache = (this || _global$E).cache.slice(16);
      this.ghash(chunk);
    }
  };
  GHASH.prototype.final = function(abl, bl) {
    if ((this || _global$E).cache.length) {
      this.ghash(Buffer3.concat([(this || _global$E).cache, ZEROES], 16));
    }
    this.ghash(fromArray([0, abl, 0, bl]));
    return (this || _global$E).state;
  };
  exports$25 = GHASH;
  return exports$25;
}
function dew$23() {
  if (_dewExec$23)
    return exports$24;
  _dewExec$23 = true;
  var aes = dew$25();
  var Buffer3 = dew$2P().Buffer;
  var Transform2 = dew$2z();
  var inherits4 = dew$f();
  var GHASH = dew$24();
  var xor = dew$2e();
  var incr32 = dew$28();
  function xorTest(a8, b5) {
    var out = 0;
    if (a8.length !== b5.length)
      out++;
    var len = Math.min(a8.length, b5.length);
    for (var i8 = 0; i8 < len; ++i8) {
      out += a8[i8] ^ b5[i8];
    }
    return out;
  }
  function calcIv(self2, iv, ck) {
    if (iv.length === 12) {
      self2._finID = Buffer3.concat([iv, Buffer3.from([0, 0, 0, 1])]);
      return Buffer3.concat([iv, Buffer3.from([0, 0, 0, 2])]);
    }
    var ghash = new GHASH(ck);
    var len = iv.length;
    var toPad = len % 16;
    ghash.update(iv);
    if (toPad) {
      toPad = 16 - toPad;
      ghash.update(Buffer3.alloc(toPad, 0));
    }
    ghash.update(Buffer3.alloc(8, 0));
    var ivBits = len * 8;
    var tail = Buffer3.alloc(8);
    tail.writeUIntBE(ivBits, 0, 8);
    ghash.update(tail);
    self2._finID = ghash.state;
    var out = Buffer3.from(self2._finID);
    incr32(out);
    return out;
  }
  function StreamCipher(mode, key, iv, decrypt) {
    Transform2.call(this || _global$D);
    var h8 = Buffer3.alloc(4, 0);
    (this || _global$D)._cipher = new aes.AES(key);
    var ck = (this || _global$D)._cipher.encryptBlock(h8);
    (this || _global$D)._ghash = new GHASH(ck);
    iv = calcIv(this || _global$D, iv, ck);
    (this || _global$D)._prev = Buffer3.from(iv);
    (this || _global$D)._cache = Buffer3.allocUnsafe(0);
    (this || _global$D)._secCache = Buffer3.allocUnsafe(0);
    (this || _global$D)._decrypt = decrypt;
    (this || _global$D)._alen = 0;
    (this || _global$D)._len = 0;
    (this || _global$D)._mode = mode;
    (this || _global$D)._authTag = null;
    (this || _global$D)._called = false;
  }
  inherits4(StreamCipher, Transform2);
  StreamCipher.prototype._update = function(chunk) {
    if (!(this || _global$D)._called && (this || _global$D)._alen) {
      var rump = 16 - (this || _global$D)._alen % 16;
      if (rump < 16) {
        rump = Buffer3.alloc(rump, 0);
        (this || _global$D)._ghash.update(rump);
      }
    }
    (this || _global$D)._called = true;
    var out = (this || _global$D)._mode.encrypt(this || _global$D, chunk);
    if ((this || _global$D)._decrypt) {
      (this || _global$D)._ghash.update(chunk);
    } else {
      (this || _global$D)._ghash.update(out);
    }
    (this || _global$D)._len += chunk.length;
    return out;
  };
  StreamCipher.prototype._final = function() {
    if ((this || _global$D)._decrypt && !(this || _global$D)._authTag)
      throw new Error("Unsupported state or unable to authenticate data");
    var tag = xor((this || _global$D)._ghash.final((this || _global$D)._alen * 8, (this || _global$D)._len * 8), (this || _global$D)._cipher.encryptBlock((this || _global$D)._finID));
    if ((this || _global$D)._decrypt && xorTest(tag, (this || _global$D)._authTag))
      throw new Error("Unsupported state or unable to authenticate data");
    (this || _global$D)._authTag = tag;
    (this || _global$D)._cipher.scrub();
  };
  StreamCipher.prototype.getAuthTag = function getAuthTag() {
    if ((this || _global$D)._decrypt || !Buffer3.isBuffer((this || _global$D)._authTag))
      throw new Error("Attempting to get auth tag in unsupported state");
    return (this || _global$D)._authTag;
  };
  StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
    if (!(this || _global$D)._decrypt)
      throw new Error("Attempting to set auth tag in unsupported state");
    (this || _global$D)._authTag = tag;
  };
  StreamCipher.prototype.setAAD = function setAAD(buf) {
    if ((this || _global$D)._called)
      throw new Error("Attempting to set AAD in unsupported state");
    (this || _global$D)._ghash.update(buf);
    (this || _global$D)._alen += buf.length;
  };
  exports$24 = StreamCipher;
  return exports$24;
}
function dew$222() {
  if (_dewExec$222)
    return exports$23;
  _dewExec$222 = true;
  var aes = dew$25();
  var Buffer3 = dew$2P().Buffer;
  var Transform2 = dew$2z();
  var inherits4 = dew$f();
  function StreamCipher(mode, key, iv, decrypt) {
    Transform2.call(this || _global$C);
    (this || _global$C)._cipher = new aes.AES(key);
    (this || _global$C)._prev = Buffer3.from(iv);
    (this || _global$C)._cache = Buffer3.allocUnsafe(0);
    (this || _global$C)._secCache = Buffer3.allocUnsafe(0);
    (this || _global$C)._decrypt = decrypt;
    (this || _global$C)._mode = mode;
  }
  inherits4(StreamCipher, Transform2);
  StreamCipher.prototype._update = function(chunk) {
    return (this || _global$C)._mode.encrypt(this || _global$C, chunk, (this || _global$C)._decrypt);
  };
  StreamCipher.prototype._final = function() {
    (this || _global$C)._cipher.scrub();
  };
  exports$23 = StreamCipher;
  return exports$23;
}
function dew$21() {
  if (_dewExec$21)
    return exports$222;
  _dewExec$21 = true;
  var Buffer3 = dew$2P().Buffer;
  var MD5 = dew$2L();
  function EVP_BytesToKey(password, salt, keyBits, ivLen) {
    if (!Buffer3.isBuffer(password))
      password = Buffer3.from(password, "binary");
    if (salt) {
      if (!Buffer3.isBuffer(salt))
        salt = Buffer3.from(salt, "binary");
      if (salt.length !== 8)
        throw new RangeError("salt should be Buffer with 8 byte length");
    }
    var keyLen = keyBits / 8;
    var key = Buffer3.alloc(keyLen);
    var iv = Buffer3.alloc(ivLen || 0);
    var tmp = Buffer3.alloc(0);
    while (keyLen > 0 || ivLen > 0) {
      var hash = new MD5();
      hash.update(tmp);
      hash.update(password);
      if (salt)
        hash.update(salt);
      tmp = hash.digest();
      var used = 0;
      if (keyLen > 0) {
        var keyStart = key.length - keyLen;
        used = Math.min(keyLen, tmp.length);
        tmp.copy(key, keyStart, 0, used);
        keyLen -= used;
      }
      if (used < tmp.length && ivLen > 0) {
        var ivStart = iv.length - ivLen;
        var length = Math.min(ivLen, tmp.length - used);
        tmp.copy(iv, ivStart, used, used + length);
        ivLen -= length;
      }
    }
    tmp.fill(0);
    return {
      key,
      iv
    };
  }
  exports$222 = EVP_BytesToKey;
  return exports$222;
}
function dew$20() {
  if (_dewExec$20)
    return exports$21;
  _dewExec$20 = true;
  var MODES = dew$26();
  var AuthCipher = dew$23();
  var Buffer3 = dew$2P().Buffer;
  var StreamCipher = dew$222();
  var Transform2 = dew$2z();
  var aes = dew$25();
  var ebtk = dew$21();
  var inherits4 = dew$f();
  function Cipher2(mode, key, iv) {
    Transform2.call(this || _global$B);
    (this || _global$B)._cache = new Splitter();
    (this || _global$B)._cipher = new aes.AES(key);
    (this || _global$B)._prev = Buffer3.from(iv);
    (this || _global$B)._mode = mode;
    (this || _global$B)._autopadding = true;
  }
  inherits4(Cipher2, Transform2);
  Cipher2.prototype._update = function(data) {
    (this || _global$B)._cache.add(data);
    var chunk;
    var thing;
    var out = [];
    while (chunk = (this || _global$B)._cache.get()) {
      thing = (this || _global$B)._mode.encrypt(this || _global$B, chunk);
      out.push(thing);
    }
    return Buffer3.concat(out);
  };
  var PADDING = Buffer3.alloc(16, 16);
  Cipher2.prototype._final = function() {
    var chunk = (this || _global$B)._cache.flush();
    if ((this || _global$B)._autopadding) {
      chunk = (this || _global$B)._mode.encrypt(this || _global$B, chunk);
      (this || _global$B)._cipher.scrub();
      return chunk;
    }
    if (!chunk.equals(PADDING)) {
      (this || _global$B)._cipher.scrub();
      throw new Error("data not multiple of block length");
    }
  };
  Cipher2.prototype.setAutoPadding = function(setTo) {
    (this || _global$B)._autopadding = !!setTo;
    return this || _global$B;
  };
  function Splitter() {
    (this || _global$B).cache = Buffer3.allocUnsafe(0);
  }
  Splitter.prototype.add = function(data) {
    (this || _global$B).cache = Buffer3.concat([(this || _global$B).cache, data]);
  };
  Splitter.prototype.get = function() {
    if ((this || _global$B).cache.length > 15) {
      var out = (this || _global$B).cache.slice(0, 16);
      (this || _global$B).cache = (this || _global$B).cache.slice(16);
      return out;
    }
    return null;
  };
  Splitter.prototype.flush = function() {
    var len = 16 - (this || _global$B).cache.length;
    var padBuff = Buffer3.allocUnsafe(len);
    var i8 = -1;
    while (++i8 < len) {
      padBuff.writeUInt8(len, i8);
    }
    return Buffer3.concat([(this || _global$B).cache, padBuff]);
  };
  function createCipheriv2(suite, password, iv) {
    var config2 = MODES[suite.toLowerCase()];
    if (!config2)
      throw new TypeError("invalid suite type");
    if (typeof password === "string")
      password = Buffer3.from(password);
    if (password.length !== config2.key / 8)
      throw new TypeError("invalid key length " + password.length);
    if (typeof iv === "string")
      iv = Buffer3.from(iv);
    if (config2.mode !== "GCM" && iv.length !== config2.iv)
      throw new TypeError("invalid iv length " + iv.length);
    if (config2.type === "stream") {
      return new StreamCipher(config2.module, password, iv);
    } else if (config2.type === "auth") {
      return new AuthCipher(config2.module, password, iv);
    }
    return new Cipher2(config2.module, password, iv);
  }
  function createCipher2(suite, password) {
    var config2 = MODES[suite.toLowerCase()];
    if (!config2)
      throw new TypeError("invalid suite type");
    var keys = ebtk(password, false, config2.key, config2.iv);
    return createCipheriv2(suite, keys.key, keys.iv);
  }
  exports$21.createCipheriv = createCipheriv2;
  exports$21.createCipher = createCipher2;
  return exports$21;
}
function dew$1$() {
  if (_dewExec$1$)
    return exports$20;
  _dewExec$1$ = true;
  var AuthCipher = dew$23();
  var Buffer3 = dew$2P().Buffer;
  var MODES = dew$26();
  var StreamCipher = dew$222();
  var Transform2 = dew$2z();
  var aes = dew$25();
  var ebtk = dew$21();
  var inherits4 = dew$f();
  function Decipher2(mode, key, iv) {
    Transform2.call(this || _global$A);
    (this || _global$A)._cache = new Splitter();
    (this || _global$A)._last = void 0;
    (this || _global$A)._cipher = new aes.AES(key);
    (this || _global$A)._prev = Buffer3.from(iv);
    (this || _global$A)._mode = mode;
    (this || _global$A)._autopadding = true;
  }
  inherits4(Decipher2, Transform2);
  Decipher2.prototype._update = function(data) {
    (this || _global$A)._cache.add(data);
    var chunk;
    var thing;
    var out = [];
    while (chunk = (this || _global$A)._cache.get((this || _global$A)._autopadding)) {
      thing = (this || _global$A)._mode.decrypt(this || _global$A, chunk);
      out.push(thing);
    }
    return Buffer3.concat(out);
  };
  Decipher2.prototype._final = function() {
    var chunk = (this || _global$A)._cache.flush();
    if ((this || _global$A)._autopadding) {
      return unpad((this || _global$A)._mode.decrypt(this || _global$A, chunk));
    } else if (chunk) {
      throw new Error("data not multiple of block length");
    }
  };
  Decipher2.prototype.setAutoPadding = function(setTo) {
    (this || _global$A)._autopadding = !!setTo;
    return this || _global$A;
  };
  function Splitter() {
    (this || _global$A).cache = Buffer3.allocUnsafe(0);
  }
  Splitter.prototype.add = function(data) {
    (this || _global$A).cache = Buffer3.concat([(this || _global$A).cache, data]);
  };
  Splitter.prototype.get = function(autoPadding) {
    var out;
    if (autoPadding) {
      if ((this || _global$A).cache.length > 16) {
        out = (this || _global$A).cache.slice(0, 16);
        (this || _global$A).cache = (this || _global$A).cache.slice(16);
        return out;
      }
    } else {
      if ((this || _global$A).cache.length >= 16) {
        out = (this || _global$A).cache.slice(0, 16);
        (this || _global$A).cache = (this || _global$A).cache.slice(16);
        return out;
      }
    }
    return null;
  };
  Splitter.prototype.flush = function() {
    if ((this || _global$A).cache.length)
      return (this || _global$A).cache;
  };
  function unpad(last) {
    var padded = last[15];
    if (padded < 1 || padded > 16) {
      throw new Error("unable to decrypt data");
    }
    var i8 = -1;
    while (++i8 < padded) {
      if (last[i8 + (16 - padded)] !== padded) {
        throw new Error("unable to decrypt data");
      }
    }
    if (padded === 16)
      return;
    return last.slice(0, 16 - padded);
  }
  function createDecipheriv2(suite, password, iv) {
    var config2 = MODES[suite.toLowerCase()];
    if (!config2)
      throw new TypeError("invalid suite type");
    if (typeof iv === "string")
      iv = Buffer3.from(iv);
    if (config2.mode !== "GCM" && iv.length !== config2.iv)
      throw new TypeError("invalid iv length " + iv.length);
    if (typeof password === "string")
      password = Buffer3.from(password);
    if (password.length !== config2.key / 8)
      throw new TypeError("invalid key length " + password.length);
    if (config2.type === "stream") {
      return new StreamCipher(config2.module, password, iv, true);
    } else if (config2.type === "auth") {
      return new AuthCipher(config2.module, password, iv, true);
    }
    return new Decipher2(config2.module, password, iv);
  }
  function createDecipher2(suite, password) {
    var config2 = MODES[suite.toLowerCase()];
    if (!config2)
      throw new TypeError("invalid suite type");
    var keys = ebtk(password, false, config2.key, config2.iv);
    return createDecipheriv2(suite, keys.key, keys.iv);
  }
  exports$20.createDecipher = createDecipher2;
  exports$20.createDecipheriv = createDecipheriv2;
  return exports$20;
}
function dew$1_() {
  if (_dewExec$1_)
    return exports$1$;
  _dewExec$1_ = true;
  var ciphers = dew$20();
  var deciphers = dew$1$();
  var modes = _list$1;
  function getCiphers2() {
    return Object.keys(modes);
  }
  exports$1$.createCipher = exports$1$.Cipher = ciphers.createCipher;
  exports$1$.createCipheriv = exports$1$.Cipheriv = ciphers.createCipheriv;
  exports$1$.createDecipher = exports$1$.Decipher = deciphers.createDecipher;
  exports$1$.createDecipheriv = exports$1$.Decipheriv = deciphers.createDecipheriv;
  exports$1$.listCiphers = exports$1$.getCiphers = getCiphers2;
  return exports$1$;
}
function dew$1Z() {
  if (_dewExec$1Z)
    return exports$1_;
  _dewExec$1Z = true;
  exports$1_["des-ecb"] = {
    key: 8,
    iv: 0
  };
  exports$1_["des-cbc"] = exports$1_.des = {
    key: 8,
    iv: 8
  };
  exports$1_["des-ede3-cbc"] = exports$1_.des3 = {
    key: 24,
    iv: 8
  };
  exports$1_["des-ede3"] = {
    key: 24,
    iv: 0
  };
  exports$1_["des-ede-cbc"] = {
    key: 16,
    iv: 8
  };
  exports$1_["des-ede"] = {
    key: 16,
    iv: 0
  };
  return exports$1_;
}
function dew$1Y() {
  if (_dewExec$1Y)
    return exports$1Z;
  _dewExec$1Y = true;
  var DES = dew$2g();
  var aes = dew$1_();
  var aesModes = dew$26();
  var desModes = dew$1Z();
  var ebtk = dew$21();
  function createCipher2(suite, password) {
    suite = suite.toLowerCase();
    var keyLen, ivLen;
    if (aesModes[suite]) {
      keyLen = aesModes[suite].key;
      ivLen = aesModes[suite].iv;
    } else if (desModes[suite]) {
      keyLen = desModes[suite].key * 8;
      ivLen = desModes[suite].iv;
    } else {
      throw new TypeError("invalid suite type");
    }
    var keys = ebtk(password, false, keyLen, ivLen);
    return createCipheriv2(suite, keys.key, keys.iv);
  }
  function createDecipher2(suite, password) {
    suite = suite.toLowerCase();
    var keyLen, ivLen;
    if (aesModes[suite]) {
      keyLen = aesModes[suite].key;
      ivLen = aesModes[suite].iv;
    } else if (desModes[suite]) {
      keyLen = desModes[suite].key * 8;
      ivLen = desModes[suite].iv;
    } else {
      throw new TypeError("invalid suite type");
    }
    var keys = ebtk(password, false, keyLen, ivLen);
    return createDecipheriv2(suite, keys.key, keys.iv);
  }
  function createCipheriv2(suite, key, iv) {
    suite = suite.toLowerCase();
    if (aesModes[suite])
      return aes.createCipheriv(suite, key, iv);
    if (desModes[suite])
      return new DES({
        key,
        iv,
        mode: suite
      });
    throw new TypeError("invalid suite type");
  }
  function createDecipheriv2(suite, key, iv) {
    suite = suite.toLowerCase();
    if (aesModes[suite])
      return aes.createDecipheriv(suite, key, iv);
    if (desModes[suite])
      return new DES({
        key,
        iv,
        mode: suite,
        decrypt: true
      });
    throw new TypeError("invalid suite type");
  }
  function getCiphers2() {
    return Object.keys(desModes).concat(aes.getCiphers());
  }
  exports$1Z.createCipher = exports$1Z.Cipher = createCipher2;
  exports$1Z.createCipheriv = exports$1Z.Cipheriv = createCipheriv2;
  exports$1Z.createDecipher = exports$1Z.Decipher = createDecipher2;
  exports$1Z.createDecipheriv = exports$1Z.Decipheriv = createDecipheriv2;
  exports$1Z.listCiphers = exports$1Z.getCiphers = getCiphers2;
  return exports$1Z;
}
function dew$1X() {
  if (_dewExec$1X)
    return module$a.exports;
  _dewExec$1X = true;
  (function(module3, exports11) {
    function assert2(val, msg) {
      if (!val)
        throw new Error(msg || "Assertion failed");
    }
    function inherits4(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function() {
      };
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }
    function BN(number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }
      (this || _global$z).negative = 0;
      (this || _global$z).words = null;
      (this || _global$z).length = 0;
      (this || _global$z).red = null;
      if (number !== null) {
        if (base === "le" || base === "be") {
          endian = base;
          base = 10;
        }
        this._init(number || 0, base || 10, endian || "be");
      }
    }
    if (typeof module3 === "object") {
      module3.exports = BN;
    } else {
      exports11.BN = BN;
    }
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer3;
    try {
      if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
        Buffer3 = window.Buffer;
      } else {
        Buffer3 = buffer.Buffer;
      }
    } catch (e11) {
    }
    BN.isBN = function isBN(num) {
      if (num instanceof BN) {
        return true;
      }
      return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
      if (left.cmp(right) > 0)
        return left;
      return right;
    };
    BN.min = function min(left, right) {
      if (left.cmp(right) < 0)
        return left;
      return right;
    };
    BN.prototype._init = function init2(number, base, endian) {
      if (typeof number === "number") {
        return this._initNumber(number, base, endian);
      }
      if (typeof number === "object") {
        return this._initArray(number, base, endian);
      }
      if (base === "hex") {
        base = 16;
      }
      assert2(base === (base | 0) && base >= 2 && base <= 36);
      number = number.toString().replace(/\s+/g, "");
      var start = 0;
      if (number[0] === "-") {
        start++;
        (this || _global$z).negative = 1;
      }
      if (start < number.length) {
        if (base === 16) {
          this._parseHex(number, start, endian);
        } else {
          this._parseBase(number, base, start);
          if (endian === "le") {
            this._initArray(this.toArray(), base, endian);
          }
        }
      }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
      if (number < 0) {
        (this || _global$z).negative = 1;
        number = -number;
      }
      if (number < 67108864) {
        (this || _global$z).words = [number & 67108863];
        (this || _global$z).length = 1;
      } else if (number < 4503599627370496) {
        (this || _global$z).words = [number & 67108863, number / 67108864 & 67108863];
        (this || _global$z).length = 2;
      } else {
        assert2(number < 9007199254740992);
        (this || _global$z).words = [number & 67108863, number / 67108864 & 67108863, 1];
        (this || _global$z).length = 3;
      }
      if (endian !== "le")
        return;
      this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
      assert2(typeof number.length === "number");
      if (number.length <= 0) {
        (this || _global$z).words = [0];
        (this || _global$z).length = 1;
        return this || _global$z;
      }
      (this || _global$z).length = Math.ceil(number.length / 3);
      (this || _global$z).words = new Array((this || _global$z).length);
      for (var i8 = 0; i8 < (this || _global$z).length; i8++) {
        (this || _global$z).words[i8] = 0;
      }
      var j4, w4;
      var off2 = 0;
      if (endian === "be") {
        for (i8 = number.length - 1, j4 = 0; i8 >= 0; i8 -= 3) {
          w4 = number[i8] | number[i8 - 1] << 8 | number[i8 - 2] << 16;
          (this || _global$z).words[j4] |= w4 << off2 & 67108863;
          (this || _global$z).words[j4 + 1] = w4 >>> 26 - off2 & 67108863;
          off2 += 24;
          if (off2 >= 26) {
            off2 -= 26;
            j4++;
          }
        }
      } else if (endian === "le") {
        for (i8 = 0, j4 = 0; i8 < number.length; i8 += 3) {
          w4 = number[i8] | number[i8 + 1] << 8 | number[i8 + 2] << 16;
          (this || _global$z).words[j4] |= w4 << off2 & 67108863;
          (this || _global$z).words[j4 + 1] = w4 >>> 26 - off2 & 67108863;
          off2 += 24;
          if (off2 >= 26) {
            off2 -= 26;
            j4++;
          }
        }
      }
      return this.strip();
    };
    function parseHex4Bits(string, index) {
      var c8 = string.charCodeAt(index);
      if (c8 >= 65 && c8 <= 70) {
        return c8 - 55;
      } else if (c8 >= 97 && c8 <= 102) {
        return c8 - 87;
      } else {
        return c8 - 48 & 15;
      }
    }
    function parseHexByte(string, lowerBound, index) {
      var r9 = parseHex4Bits(string, index);
      if (index - 1 >= lowerBound) {
        r9 |= parseHex4Bits(string, index - 1) << 4;
      }
      return r9;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
      (this || _global$z).length = Math.ceil((number.length - start) / 6);
      (this || _global$z).words = new Array((this || _global$z).length);
      for (var i8 = 0; i8 < (this || _global$z).length; i8++) {
        (this || _global$z).words[i8] = 0;
      }
      var off2 = 0;
      var j4 = 0;
      var w4;
      if (endian === "be") {
        for (i8 = number.length - 1; i8 >= start; i8 -= 2) {
          w4 = parseHexByte(number, start, i8) << off2;
          (this || _global$z).words[j4] |= w4 & 67108863;
          if (off2 >= 18) {
            off2 -= 18;
            j4 += 1;
            (this || _global$z).words[j4] |= w4 >>> 26;
          } else {
            off2 += 8;
          }
        }
      } else {
        var parseLength = number.length - start;
        for (i8 = parseLength % 2 === 0 ? start + 1 : start; i8 < number.length; i8 += 2) {
          w4 = parseHexByte(number, start, i8) << off2;
          (this || _global$z).words[j4] |= w4 & 67108863;
          if (off2 >= 18) {
            off2 -= 18;
            j4 += 1;
            (this || _global$z).words[j4] |= w4 >>> 26;
          } else {
            off2 += 8;
          }
        }
      }
      this.strip();
    };
    function parseBase(str, start, end, mul) {
      var r9 = 0;
      var len = Math.min(str.length, end);
      for (var i8 = start; i8 < len; i8++) {
        var c8 = str.charCodeAt(i8) - 48;
        r9 *= mul;
        if (c8 >= 49) {
          r9 += c8 - 49 + 10;
        } else if (c8 >= 17) {
          r9 += c8 - 17 + 10;
        } else {
          r9 += c8;
        }
      }
      return r9;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
      (this || _global$z).words = [0];
      (this || _global$z).length = 1;
      for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
        limbLen++;
      }
      limbLen--;
      limbPow = limbPow / base | 0;
      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;
      var word = 0;
      for (var i8 = start; i8 < end; i8 += limbLen) {
        word = parseBase(number, i8, i8 + limbLen, base);
        this.imuln(limbPow);
        if ((this || _global$z).words[0] + word < 67108864) {
          (this || _global$z).words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i8, number.length, base);
        for (i8 = 0; i8 < mod; i8++) {
          pow *= base;
        }
        this.imuln(pow);
        if ((this || _global$z).words[0] + word < 67108864) {
          (this || _global$z).words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
      this.strip();
    };
    BN.prototype.copy = function copy(dest) {
      dest.words = new Array((this || _global$z).length);
      for (var i8 = 0; i8 < (this || _global$z).length; i8++) {
        dest.words[i8] = (this || _global$z).words[i8];
      }
      dest.length = (this || _global$z).length;
      dest.negative = (this || _global$z).negative;
      dest.red = (this || _global$z).red;
    };
    BN.prototype.clone = function clone() {
      var r9 = new BN(null);
      this.copy(r9);
      return r9;
    };
    BN.prototype._expand = function _expand(size) {
      while ((this || _global$z).length < size) {
        (this || _global$z).words[(this || _global$z).length++] = 0;
      }
      return this || _global$z;
    };
    BN.prototype.strip = function strip() {
      while ((this || _global$z).length > 1 && (this || _global$z).words[(this || _global$z).length - 1] === 0) {
        (this || _global$z).length--;
      }
      return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
      if ((this || _global$z).length === 1 && (this || _global$z).words[0] === 0) {
        (this || _global$z).negative = 0;
      }
      return this || _global$z;
    };
    BN.prototype.inspect = function inspect3() {
      return ((this || _global$z).red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    var zeros = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"];
    var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
    var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
    BN.prototype.toString = function toString3(base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;
      var out;
      if (base === 16 || base === "hex") {
        out = "";
        var off2 = 0;
        var carry = 0;
        for (var i8 = 0; i8 < (this || _global$z).length; i8++) {
          var w4 = (this || _global$z).words[i8];
          var word = ((w4 << off2 | carry) & 16777215).toString(16);
          carry = w4 >>> 24 - off2 & 16777215;
          if (carry !== 0 || i8 !== (this || _global$z).length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }
          off2 += 2;
          if (off2 >= 26) {
            off2 -= 26;
            i8--;
          }
        }
        if (carry !== 0) {
          out = carry.toString(16) + out;
        }
        while (out.length % padding !== 0) {
          out = "0" + out;
        }
        if ((this || _global$z).negative !== 0) {
          out = "-" + out;
        }
        return out;
      }
      if (base === (base | 0) && base >= 2 && base <= 36) {
        var groupSize = groupSizes[base];
        var groupBase = groupBases[base];
        out = "";
        var c8 = this.clone();
        c8.negative = 0;
        while (!c8.isZero()) {
          var r9 = c8.modn(groupBase).toString(base);
          c8 = c8.idivn(groupBase);
          if (!c8.isZero()) {
            out = zeros[groupSize - r9.length] + r9 + out;
          } else {
            out = r9 + out;
          }
        }
        if (this.isZero()) {
          out = "0" + out;
        }
        while (out.length % padding !== 0) {
          out = "0" + out;
        }
        if ((this || _global$z).negative !== 0) {
          out = "-" + out;
        }
        return out;
      }
      assert2(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
      var ret = (this || _global$z).words[0];
      if ((this || _global$z).length === 2) {
        ret += (this || _global$z).words[1] * 67108864;
      } else if ((this || _global$z).length === 3 && (this || _global$z).words[2] === 1) {
        ret += 4503599627370496 + (this || _global$z).words[1] * 67108864;
      } else if ((this || _global$z).length > 2) {
        assert2(false, "Number can only safely store up to 53 bits");
      }
      return (this || _global$z).negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON2() {
      return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
      assert2(typeof Buffer3 !== "undefined");
      return this.toArrayLike(Buffer3, endian, length);
    };
    BN.prototype.toArray = function toArray2(endian, length) {
      return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert2(byteLength <= reqLength, "byte array longer than desired length");
      assert2(reqLength > 0, "Requested array length <= 0");
      this.strip();
      var littleEndian = endian === "le";
      var res = new ArrayType(reqLength);
      var b5, i8;
      var q3 = this.clone();
      if (!littleEndian) {
        for (i8 = 0; i8 < reqLength - byteLength; i8++) {
          res[i8] = 0;
        }
        for (i8 = 0; !q3.isZero(); i8++) {
          b5 = q3.andln(255);
          q3.iushrn(8);
          res[reqLength - i8 - 1] = b5;
        }
      } else {
        for (i8 = 0; !q3.isZero(); i8++) {
          b5 = q3.andln(255);
          q3.iushrn(8);
          res[i8] = b5;
        }
        for (; i8 < reqLength; i8++) {
          res[i8] = 0;
        }
      }
      return res;
    };
    if (Math.clz32) {
      BN.prototype._countBits = function _countBits(w4) {
        return 32 - Math.clz32(w4);
      };
    } else {
      BN.prototype._countBits = function _countBits(w4) {
        var t8 = w4;
        var r9 = 0;
        if (t8 >= 4096) {
          r9 += 13;
          t8 >>>= 13;
        }
        if (t8 >= 64) {
          r9 += 7;
          t8 >>>= 7;
        }
        if (t8 >= 8) {
          r9 += 4;
          t8 >>>= 4;
        }
        if (t8 >= 2) {
          r9 += 2;
          t8 >>>= 2;
        }
        return r9 + t8;
      };
    }
    BN.prototype._zeroBits = function _zeroBits(w4) {
      if (w4 === 0)
        return 26;
      var t8 = w4;
      var r9 = 0;
      if ((t8 & 8191) === 0) {
        r9 += 13;
        t8 >>>= 13;
      }
      if ((t8 & 127) === 0) {
        r9 += 7;
        t8 >>>= 7;
      }
      if ((t8 & 15) === 0) {
        r9 += 4;
        t8 >>>= 4;
      }
      if ((t8 & 3) === 0) {
        r9 += 2;
        t8 >>>= 2;
      }
      if ((t8 & 1) === 0) {
        r9++;
      }
      return r9;
    };
    BN.prototype.bitLength = function bitLength() {
      var w4 = (this || _global$z).words[(this || _global$z).length - 1];
      var hi = this._countBits(w4);
      return ((this || _global$z).length - 1) * 26 + hi;
    };
    function toBitArray(num) {
      var w4 = new Array(num.bitLength());
      for (var bit = 0; bit < w4.length; bit++) {
        var off2 = bit / 26 | 0;
        var wbit = bit % 26;
        w4[bit] = (num.words[off2] & 1 << wbit) >>> wbit;
      }
      return w4;
    }
    BN.prototype.zeroBits = function zeroBits() {
      if (this.isZero())
        return 0;
      var r9 = 0;
      for (var i8 = 0; i8 < (this || _global$z).length; i8++) {
        var b5 = this._zeroBits((this || _global$z).words[i8]);
        r9 += b5;
        if (b5 !== 26)
          break;
      }
      return r9;
    };
    BN.prototype.byteLength = function byteLength() {
      return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
      if ((this || _global$z).negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }
      return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }
      return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
      return (this || _global$z).negative !== 0;
    };
    BN.prototype.neg = function neg() {
      return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
      if (!this.isZero()) {
        (this || _global$z).negative ^= 1;
      }
      return this || _global$z;
    };
    BN.prototype.iuor = function iuor(num) {
      while ((this || _global$z).length < num.length) {
        (this || _global$z).words[(this || _global$z).length++] = 0;
      }
      for (var i8 = 0; i8 < num.length; i8++) {
        (this || _global$z).words[i8] = (this || _global$z).words[i8] | num.words[i8];
      }
      return this.strip();
    };
    BN.prototype.ior = function ior(num) {
      assert2(((this || _global$z).negative | num.negative) === 0);
      return this.iuor(num);
    };
    BN.prototype.or = function or(num) {
      if ((this || _global$z).length > num.length)
        return this.clone().ior(num);
      return num.clone().ior(this || _global$z);
    };
    BN.prototype.uor = function uor(num) {
      if ((this || _global$z).length > num.length)
        return this.clone().iuor(num);
      return num.clone().iuor(this || _global$z);
    };
    BN.prototype.iuand = function iuand(num) {
      var b5;
      if ((this || _global$z).length > num.length) {
        b5 = num;
      } else {
        b5 = this || _global$z;
      }
      for (var i8 = 0; i8 < b5.length; i8++) {
        (this || _global$z).words[i8] = (this || _global$z).words[i8] & num.words[i8];
      }
      (this || _global$z).length = b5.length;
      return this.strip();
    };
    BN.prototype.iand = function iand(num) {
      assert2(((this || _global$z).negative | num.negative) === 0);
      return this.iuand(num);
    };
    BN.prototype.and = function and(num) {
      if ((this || _global$z).length > num.length)
        return this.clone().iand(num);
      return num.clone().iand(this || _global$z);
    };
    BN.prototype.uand = function uand(num) {
      if ((this || _global$z).length > num.length)
        return this.clone().iuand(num);
      return num.clone().iuand(this || _global$z);
    };
    BN.prototype.iuxor = function iuxor(num) {
      var a8;
      var b5;
      if ((this || _global$z).length > num.length) {
        a8 = this || _global$z;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$z;
      }
      for (var i8 = 0; i8 < b5.length; i8++) {
        (this || _global$z).words[i8] = a8.words[i8] ^ b5.words[i8];
      }
      if ((this || _global$z) !== a8) {
        for (; i8 < a8.length; i8++) {
          (this || _global$z).words[i8] = a8.words[i8];
        }
      }
      (this || _global$z).length = a8.length;
      return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
      assert2(((this || _global$z).negative | num.negative) === 0);
      return this.iuxor(num);
    };
    BN.prototype.xor = function xor(num) {
      if ((this || _global$z).length > num.length)
        return this.clone().ixor(num);
      return num.clone().ixor(this || _global$z);
    };
    BN.prototype.uxor = function uxor(num) {
      if ((this || _global$z).length > num.length)
        return this.clone().iuxor(num);
      return num.clone().iuxor(this || _global$z);
    };
    BN.prototype.inotn = function inotn(width) {
      assert2(typeof width === "number" && width >= 0);
      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;
      this._expand(bytesNeeded);
      if (bitsLeft > 0) {
        bytesNeeded--;
      }
      for (var i8 = 0; i8 < bytesNeeded; i8++) {
        (this || _global$z).words[i8] = ~(this || _global$z).words[i8] & 67108863;
      }
      if (bitsLeft > 0) {
        (this || _global$z).words[i8] = ~(this || _global$z).words[i8] & 67108863 >> 26 - bitsLeft;
      }
      return this.strip();
    };
    BN.prototype.notn = function notn(width) {
      return this.clone().inotn(width);
    };
    BN.prototype.setn = function setn(bit, val) {
      assert2(typeof bit === "number" && bit >= 0);
      var off2 = bit / 26 | 0;
      var wbit = bit % 26;
      this._expand(off2 + 1);
      if (val) {
        (this || _global$z).words[off2] = (this || _global$z).words[off2] | 1 << wbit;
      } else {
        (this || _global$z).words[off2] = (this || _global$z).words[off2] & ~(1 << wbit);
      }
      return this.strip();
    };
    BN.prototype.iadd = function iadd(num) {
      var r9;
      if ((this || _global$z).negative !== 0 && num.negative === 0) {
        (this || _global$z).negative = 0;
        r9 = this.isub(num);
        (this || _global$z).negative ^= 1;
        return this._normSign();
      } else if ((this || _global$z).negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r9 = this.isub(num);
        num.negative = 1;
        return r9._normSign();
      }
      var a8, b5;
      if ((this || _global$z).length > num.length) {
        a8 = this || _global$z;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$z;
      }
      var carry = 0;
      for (var i8 = 0; i8 < b5.length; i8++) {
        r9 = (a8.words[i8] | 0) + (b5.words[i8] | 0) + carry;
        (this || _global$z).words[i8] = r9 & 67108863;
        carry = r9 >>> 26;
      }
      for (; carry !== 0 && i8 < a8.length; i8++) {
        r9 = (a8.words[i8] | 0) + carry;
        (this || _global$z).words[i8] = r9 & 67108863;
        carry = r9 >>> 26;
      }
      (this || _global$z).length = a8.length;
      if (carry !== 0) {
        (this || _global$z).words[(this || _global$z).length] = carry;
        (this || _global$z).length++;
      } else if (a8 !== (this || _global$z)) {
        for (; i8 < a8.length; i8++) {
          (this || _global$z).words[i8] = a8.words[i8];
        }
      }
      return this || _global$z;
    };
    BN.prototype.add = function add(num) {
      var res;
      if (num.negative !== 0 && (this || _global$z).negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && (this || _global$z).negative !== 0) {
        (this || _global$z).negative = 0;
        res = num.sub(this || _global$z);
        (this || _global$z).negative = 1;
        return res;
      }
      if ((this || _global$z).length > num.length)
        return this.clone().iadd(num);
      return num.clone().iadd(this || _global$z);
    };
    BN.prototype.isub = function isub(num) {
      if (num.negative !== 0) {
        num.negative = 0;
        var r9 = this.iadd(num);
        num.negative = 1;
        return r9._normSign();
      } else if ((this || _global$z).negative !== 0) {
        (this || _global$z).negative = 0;
        this.iadd(num);
        (this || _global$z).negative = 1;
        return this._normSign();
      }
      var cmp = this.cmp(num);
      if (cmp === 0) {
        (this || _global$z).negative = 0;
        (this || _global$z).length = 1;
        (this || _global$z).words[0] = 0;
        return this || _global$z;
      }
      var a8, b5;
      if (cmp > 0) {
        a8 = this || _global$z;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$z;
      }
      var carry = 0;
      for (var i8 = 0; i8 < b5.length; i8++) {
        r9 = (a8.words[i8] | 0) - (b5.words[i8] | 0) + carry;
        carry = r9 >> 26;
        (this || _global$z).words[i8] = r9 & 67108863;
      }
      for (; carry !== 0 && i8 < a8.length; i8++) {
        r9 = (a8.words[i8] | 0) + carry;
        carry = r9 >> 26;
        (this || _global$z).words[i8] = r9 & 67108863;
      }
      if (carry === 0 && i8 < a8.length && a8 !== (this || _global$z)) {
        for (; i8 < a8.length; i8++) {
          (this || _global$z).words[i8] = a8.words[i8];
        }
      }
      (this || _global$z).length = Math.max((this || _global$z).length, i8);
      if (a8 !== (this || _global$z)) {
        (this || _global$z).negative = 1;
      }
      return this.strip();
    };
    BN.prototype.sub = function sub(num) {
      return this.clone().isub(num);
    };
    function smallMulTo(self2, num, out) {
      out.negative = num.negative ^ self2.negative;
      var len = self2.length + num.length | 0;
      out.length = len;
      len = len - 1 | 0;
      var a8 = self2.words[0] | 0;
      var b5 = num.words[0] | 0;
      var r9 = a8 * b5;
      var lo = r9 & 67108863;
      var carry = r9 / 67108864 | 0;
      out.words[0] = lo;
      for (var k4 = 1; k4 < len; k4++) {
        var ncarry = carry >>> 26;
        var rword = carry & 67108863;
        var maxJ = Math.min(k4, num.length - 1);
        for (var j4 = Math.max(0, k4 - self2.length + 1); j4 <= maxJ; j4++) {
          var i8 = k4 - j4 | 0;
          a8 = self2.words[i8] | 0;
          b5 = num.words[j4] | 0;
          r9 = a8 * b5 + rword;
          ncarry += r9 / 67108864 | 0;
          rword = r9 & 67108863;
        }
        out.words[k4] = rword | 0;
        carry = ncarry | 0;
      }
      if (carry !== 0) {
        out.words[k4] = carry | 0;
      } else {
        out.length--;
      }
      return out.strip();
    }
    var comb10MulTo = function comb10MulTo2(self2, num, out) {
      var a8 = self2.words;
      var b5 = num.words;
      var o9 = out.words;
      var c8 = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a8[0] | 0;
      var al0 = a0 & 8191;
      var ah0 = a0 >>> 13;
      var a1 = a8[1] | 0;
      var al1 = a1 & 8191;
      var ah1 = a1 >>> 13;
      var a22 = a8[2] | 0;
      var al2 = a22 & 8191;
      var ah2 = a22 >>> 13;
      var a32 = a8[3] | 0;
      var al3 = a32 & 8191;
      var ah3 = a32 >>> 13;
      var a42 = a8[4] | 0;
      var al4 = a42 & 8191;
      var ah4 = a42 >>> 13;
      var a52 = a8[5] | 0;
      var al5 = a52 & 8191;
      var ah5 = a52 >>> 13;
      var a62 = a8[6] | 0;
      var al6 = a62 & 8191;
      var ah6 = a62 >>> 13;
      var a72 = a8[7] | 0;
      var al7 = a72 & 8191;
      var ah7 = a72 >>> 13;
      var a82 = a8[8] | 0;
      var al8 = a82 & 8191;
      var ah8 = a82 >>> 13;
      var a9 = a8[9] | 0;
      var al9 = a9 & 8191;
      var ah9 = a9 >>> 13;
      var b0 = b5[0] | 0;
      var bl0 = b0 & 8191;
      var bh0 = b0 >>> 13;
      var b1 = b5[1] | 0;
      var bl1 = b1 & 8191;
      var bh1 = b1 >>> 13;
      var b22 = b5[2] | 0;
      var bl2 = b22 & 8191;
      var bh2 = b22 >>> 13;
      var b32 = b5[3] | 0;
      var bl3 = b32 & 8191;
      var bh3 = b32 >>> 13;
      var b42 = b5[4] | 0;
      var bl4 = b42 & 8191;
      var bh4 = b42 >>> 13;
      var b52 = b5[5] | 0;
      var bl5 = b52 & 8191;
      var bh5 = b52 >>> 13;
      var b6 = b5[6] | 0;
      var bl6 = b6 & 8191;
      var bh6 = b6 >>> 13;
      var b7 = b5[7] | 0;
      var bl7 = b7 & 8191;
      var bh7 = b7 >>> 13;
      var b8 = b5[8] | 0;
      var bl8 = b8 & 8191;
      var bh8 = b8 >>> 13;
      var b9 = b5[9] | 0;
      var bl9 = b9 & 8191;
      var bh9 = b9 >>> 13;
      out.negative = self2.negative ^ num.negative;
      out.length = 19;
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = mid + Math.imul(ah0, bl0) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
      w0 &= 67108863;
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = mid + Math.imul(ah1, bl0) | 0;
      hi = Math.imul(ah1, bh0);
      lo = lo + Math.imul(al0, bl1) | 0;
      mid = mid + Math.imul(al0, bh1) | 0;
      mid = mid + Math.imul(ah0, bl1) | 0;
      hi = hi + Math.imul(ah0, bh1) | 0;
      var w1 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
      w1 &= 67108863;
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = mid + Math.imul(ah2, bl0) | 0;
      hi = Math.imul(ah2, bh0);
      lo = lo + Math.imul(al1, bl1) | 0;
      mid = mid + Math.imul(al1, bh1) | 0;
      mid = mid + Math.imul(ah1, bl1) | 0;
      hi = hi + Math.imul(ah1, bh1) | 0;
      lo = lo + Math.imul(al0, bl2) | 0;
      mid = mid + Math.imul(al0, bh2) | 0;
      mid = mid + Math.imul(ah0, bl2) | 0;
      hi = hi + Math.imul(ah0, bh2) | 0;
      var w22 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w22 >>> 26) | 0;
      w22 &= 67108863;
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = mid + Math.imul(ah3, bl0) | 0;
      hi = Math.imul(ah3, bh0);
      lo = lo + Math.imul(al2, bl1) | 0;
      mid = mid + Math.imul(al2, bh1) | 0;
      mid = mid + Math.imul(ah2, bl1) | 0;
      hi = hi + Math.imul(ah2, bh1) | 0;
      lo = lo + Math.imul(al1, bl2) | 0;
      mid = mid + Math.imul(al1, bh2) | 0;
      mid = mid + Math.imul(ah1, bl2) | 0;
      hi = hi + Math.imul(ah1, bh2) | 0;
      lo = lo + Math.imul(al0, bl3) | 0;
      mid = mid + Math.imul(al0, bh3) | 0;
      mid = mid + Math.imul(ah0, bl3) | 0;
      hi = hi + Math.imul(ah0, bh3) | 0;
      var w32 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w32 >>> 26) | 0;
      w32 &= 67108863;
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = mid + Math.imul(ah4, bl0) | 0;
      hi = Math.imul(ah4, bh0);
      lo = lo + Math.imul(al3, bl1) | 0;
      mid = mid + Math.imul(al3, bh1) | 0;
      mid = mid + Math.imul(ah3, bl1) | 0;
      hi = hi + Math.imul(ah3, bh1) | 0;
      lo = lo + Math.imul(al2, bl2) | 0;
      mid = mid + Math.imul(al2, bh2) | 0;
      mid = mid + Math.imul(ah2, bl2) | 0;
      hi = hi + Math.imul(ah2, bh2) | 0;
      lo = lo + Math.imul(al1, bl3) | 0;
      mid = mid + Math.imul(al1, bh3) | 0;
      mid = mid + Math.imul(ah1, bl3) | 0;
      hi = hi + Math.imul(ah1, bh3) | 0;
      lo = lo + Math.imul(al0, bl4) | 0;
      mid = mid + Math.imul(al0, bh4) | 0;
      mid = mid + Math.imul(ah0, bl4) | 0;
      hi = hi + Math.imul(ah0, bh4) | 0;
      var w4 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
      w4 &= 67108863;
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = mid + Math.imul(ah5, bl0) | 0;
      hi = Math.imul(ah5, bh0);
      lo = lo + Math.imul(al4, bl1) | 0;
      mid = mid + Math.imul(al4, bh1) | 0;
      mid = mid + Math.imul(ah4, bl1) | 0;
      hi = hi + Math.imul(ah4, bh1) | 0;
      lo = lo + Math.imul(al3, bl2) | 0;
      mid = mid + Math.imul(al3, bh2) | 0;
      mid = mid + Math.imul(ah3, bl2) | 0;
      hi = hi + Math.imul(ah3, bh2) | 0;
      lo = lo + Math.imul(al2, bl3) | 0;
      mid = mid + Math.imul(al2, bh3) | 0;
      mid = mid + Math.imul(ah2, bl3) | 0;
      hi = hi + Math.imul(ah2, bh3) | 0;
      lo = lo + Math.imul(al1, bl4) | 0;
      mid = mid + Math.imul(al1, bh4) | 0;
      mid = mid + Math.imul(ah1, bl4) | 0;
      hi = hi + Math.imul(ah1, bh4) | 0;
      lo = lo + Math.imul(al0, bl5) | 0;
      mid = mid + Math.imul(al0, bh5) | 0;
      mid = mid + Math.imul(ah0, bl5) | 0;
      hi = hi + Math.imul(ah0, bh5) | 0;
      var w5 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
      w5 &= 67108863;
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = mid + Math.imul(ah6, bl0) | 0;
      hi = Math.imul(ah6, bh0);
      lo = lo + Math.imul(al5, bl1) | 0;
      mid = mid + Math.imul(al5, bh1) | 0;
      mid = mid + Math.imul(ah5, bl1) | 0;
      hi = hi + Math.imul(ah5, bh1) | 0;
      lo = lo + Math.imul(al4, bl2) | 0;
      mid = mid + Math.imul(al4, bh2) | 0;
      mid = mid + Math.imul(ah4, bl2) | 0;
      hi = hi + Math.imul(ah4, bh2) | 0;
      lo = lo + Math.imul(al3, bl3) | 0;
      mid = mid + Math.imul(al3, bh3) | 0;
      mid = mid + Math.imul(ah3, bl3) | 0;
      hi = hi + Math.imul(ah3, bh3) | 0;
      lo = lo + Math.imul(al2, bl4) | 0;
      mid = mid + Math.imul(al2, bh4) | 0;
      mid = mid + Math.imul(ah2, bl4) | 0;
      hi = hi + Math.imul(ah2, bh4) | 0;
      lo = lo + Math.imul(al1, bl5) | 0;
      mid = mid + Math.imul(al1, bh5) | 0;
      mid = mid + Math.imul(ah1, bl5) | 0;
      hi = hi + Math.imul(ah1, bh5) | 0;
      lo = lo + Math.imul(al0, bl6) | 0;
      mid = mid + Math.imul(al0, bh6) | 0;
      mid = mid + Math.imul(ah0, bl6) | 0;
      hi = hi + Math.imul(ah0, bh6) | 0;
      var w6 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
      w6 &= 67108863;
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = mid + Math.imul(ah7, bl0) | 0;
      hi = Math.imul(ah7, bh0);
      lo = lo + Math.imul(al6, bl1) | 0;
      mid = mid + Math.imul(al6, bh1) | 0;
      mid = mid + Math.imul(ah6, bl1) | 0;
      hi = hi + Math.imul(ah6, bh1) | 0;
      lo = lo + Math.imul(al5, bl2) | 0;
      mid = mid + Math.imul(al5, bh2) | 0;
      mid = mid + Math.imul(ah5, bl2) | 0;
      hi = hi + Math.imul(ah5, bh2) | 0;
      lo = lo + Math.imul(al4, bl3) | 0;
      mid = mid + Math.imul(al4, bh3) | 0;
      mid = mid + Math.imul(ah4, bl3) | 0;
      hi = hi + Math.imul(ah4, bh3) | 0;
      lo = lo + Math.imul(al3, bl4) | 0;
      mid = mid + Math.imul(al3, bh4) | 0;
      mid = mid + Math.imul(ah3, bl4) | 0;
      hi = hi + Math.imul(ah3, bh4) | 0;
      lo = lo + Math.imul(al2, bl5) | 0;
      mid = mid + Math.imul(al2, bh5) | 0;
      mid = mid + Math.imul(ah2, bl5) | 0;
      hi = hi + Math.imul(ah2, bh5) | 0;
      lo = lo + Math.imul(al1, bl6) | 0;
      mid = mid + Math.imul(al1, bh6) | 0;
      mid = mid + Math.imul(ah1, bl6) | 0;
      hi = hi + Math.imul(ah1, bh6) | 0;
      lo = lo + Math.imul(al0, bl7) | 0;
      mid = mid + Math.imul(al0, bh7) | 0;
      mid = mid + Math.imul(ah0, bl7) | 0;
      hi = hi + Math.imul(ah0, bh7) | 0;
      var w7 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
      w7 &= 67108863;
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = mid + Math.imul(ah8, bl0) | 0;
      hi = Math.imul(ah8, bh0);
      lo = lo + Math.imul(al7, bl1) | 0;
      mid = mid + Math.imul(al7, bh1) | 0;
      mid = mid + Math.imul(ah7, bl1) | 0;
      hi = hi + Math.imul(ah7, bh1) | 0;
      lo = lo + Math.imul(al6, bl2) | 0;
      mid = mid + Math.imul(al6, bh2) | 0;
      mid = mid + Math.imul(ah6, bl2) | 0;
      hi = hi + Math.imul(ah6, bh2) | 0;
      lo = lo + Math.imul(al5, bl3) | 0;
      mid = mid + Math.imul(al5, bh3) | 0;
      mid = mid + Math.imul(ah5, bl3) | 0;
      hi = hi + Math.imul(ah5, bh3) | 0;
      lo = lo + Math.imul(al4, bl4) | 0;
      mid = mid + Math.imul(al4, bh4) | 0;
      mid = mid + Math.imul(ah4, bl4) | 0;
      hi = hi + Math.imul(ah4, bh4) | 0;
      lo = lo + Math.imul(al3, bl5) | 0;
      mid = mid + Math.imul(al3, bh5) | 0;
      mid = mid + Math.imul(ah3, bl5) | 0;
      hi = hi + Math.imul(ah3, bh5) | 0;
      lo = lo + Math.imul(al2, bl6) | 0;
      mid = mid + Math.imul(al2, bh6) | 0;
      mid = mid + Math.imul(ah2, bl6) | 0;
      hi = hi + Math.imul(ah2, bh6) | 0;
      lo = lo + Math.imul(al1, bl7) | 0;
      mid = mid + Math.imul(al1, bh7) | 0;
      mid = mid + Math.imul(ah1, bl7) | 0;
      hi = hi + Math.imul(ah1, bh7) | 0;
      lo = lo + Math.imul(al0, bl8) | 0;
      mid = mid + Math.imul(al0, bh8) | 0;
      mid = mid + Math.imul(ah0, bl8) | 0;
      hi = hi + Math.imul(ah0, bh8) | 0;
      var w8 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
      w8 &= 67108863;
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = mid + Math.imul(ah9, bl0) | 0;
      hi = Math.imul(ah9, bh0);
      lo = lo + Math.imul(al8, bl1) | 0;
      mid = mid + Math.imul(al8, bh1) | 0;
      mid = mid + Math.imul(ah8, bl1) | 0;
      hi = hi + Math.imul(ah8, bh1) | 0;
      lo = lo + Math.imul(al7, bl2) | 0;
      mid = mid + Math.imul(al7, bh2) | 0;
      mid = mid + Math.imul(ah7, bl2) | 0;
      hi = hi + Math.imul(ah7, bh2) | 0;
      lo = lo + Math.imul(al6, bl3) | 0;
      mid = mid + Math.imul(al6, bh3) | 0;
      mid = mid + Math.imul(ah6, bl3) | 0;
      hi = hi + Math.imul(ah6, bh3) | 0;
      lo = lo + Math.imul(al5, bl4) | 0;
      mid = mid + Math.imul(al5, bh4) | 0;
      mid = mid + Math.imul(ah5, bl4) | 0;
      hi = hi + Math.imul(ah5, bh4) | 0;
      lo = lo + Math.imul(al4, bl5) | 0;
      mid = mid + Math.imul(al4, bh5) | 0;
      mid = mid + Math.imul(ah4, bl5) | 0;
      hi = hi + Math.imul(ah4, bh5) | 0;
      lo = lo + Math.imul(al3, bl6) | 0;
      mid = mid + Math.imul(al3, bh6) | 0;
      mid = mid + Math.imul(ah3, bl6) | 0;
      hi = hi + Math.imul(ah3, bh6) | 0;
      lo = lo + Math.imul(al2, bl7) | 0;
      mid = mid + Math.imul(al2, bh7) | 0;
      mid = mid + Math.imul(ah2, bl7) | 0;
      hi = hi + Math.imul(ah2, bh7) | 0;
      lo = lo + Math.imul(al1, bl8) | 0;
      mid = mid + Math.imul(al1, bh8) | 0;
      mid = mid + Math.imul(ah1, bl8) | 0;
      hi = hi + Math.imul(ah1, bh8) | 0;
      lo = lo + Math.imul(al0, bl9) | 0;
      mid = mid + Math.imul(al0, bh9) | 0;
      mid = mid + Math.imul(ah0, bl9) | 0;
      hi = hi + Math.imul(ah0, bh9) | 0;
      var w9 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
      w9 &= 67108863;
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = mid + Math.imul(ah9, bl1) | 0;
      hi = Math.imul(ah9, bh1);
      lo = lo + Math.imul(al8, bl2) | 0;
      mid = mid + Math.imul(al8, bh2) | 0;
      mid = mid + Math.imul(ah8, bl2) | 0;
      hi = hi + Math.imul(ah8, bh2) | 0;
      lo = lo + Math.imul(al7, bl3) | 0;
      mid = mid + Math.imul(al7, bh3) | 0;
      mid = mid + Math.imul(ah7, bl3) | 0;
      hi = hi + Math.imul(ah7, bh3) | 0;
      lo = lo + Math.imul(al6, bl4) | 0;
      mid = mid + Math.imul(al6, bh4) | 0;
      mid = mid + Math.imul(ah6, bl4) | 0;
      hi = hi + Math.imul(ah6, bh4) | 0;
      lo = lo + Math.imul(al5, bl5) | 0;
      mid = mid + Math.imul(al5, bh5) | 0;
      mid = mid + Math.imul(ah5, bl5) | 0;
      hi = hi + Math.imul(ah5, bh5) | 0;
      lo = lo + Math.imul(al4, bl6) | 0;
      mid = mid + Math.imul(al4, bh6) | 0;
      mid = mid + Math.imul(ah4, bl6) | 0;
      hi = hi + Math.imul(ah4, bh6) | 0;
      lo = lo + Math.imul(al3, bl7) | 0;
      mid = mid + Math.imul(al3, bh7) | 0;
      mid = mid + Math.imul(ah3, bl7) | 0;
      hi = hi + Math.imul(ah3, bh7) | 0;
      lo = lo + Math.imul(al2, bl8) | 0;
      mid = mid + Math.imul(al2, bh8) | 0;
      mid = mid + Math.imul(ah2, bl8) | 0;
      hi = hi + Math.imul(ah2, bh8) | 0;
      lo = lo + Math.imul(al1, bl9) | 0;
      mid = mid + Math.imul(al1, bh9) | 0;
      mid = mid + Math.imul(ah1, bl9) | 0;
      hi = hi + Math.imul(ah1, bh9) | 0;
      var w10 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
      w10 &= 67108863;
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = mid + Math.imul(ah9, bl2) | 0;
      hi = Math.imul(ah9, bh2);
      lo = lo + Math.imul(al8, bl3) | 0;
      mid = mid + Math.imul(al8, bh3) | 0;
      mid = mid + Math.imul(ah8, bl3) | 0;
      hi = hi + Math.imul(ah8, bh3) | 0;
      lo = lo + Math.imul(al7, bl4) | 0;
      mid = mid + Math.imul(al7, bh4) | 0;
      mid = mid + Math.imul(ah7, bl4) | 0;
      hi = hi + Math.imul(ah7, bh4) | 0;
      lo = lo + Math.imul(al6, bl5) | 0;
      mid = mid + Math.imul(al6, bh5) | 0;
      mid = mid + Math.imul(ah6, bl5) | 0;
      hi = hi + Math.imul(ah6, bh5) | 0;
      lo = lo + Math.imul(al5, bl6) | 0;
      mid = mid + Math.imul(al5, bh6) | 0;
      mid = mid + Math.imul(ah5, bl6) | 0;
      hi = hi + Math.imul(ah5, bh6) | 0;
      lo = lo + Math.imul(al4, bl7) | 0;
      mid = mid + Math.imul(al4, bh7) | 0;
      mid = mid + Math.imul(ah4, bl7) | 0;
      hi = hi + Math.imul(ah4, bh7) | 0;
      lo = lo + Math.imul(al3, bl8) | 0;
      mid = mid + Math.imul(al3, bh8) | 0;
      mid = mid + Math.imul(ah3, bl8) | 0;
      hi = hi + Math.imul(ah3, bh8) | 0;
      lo = lo + Math.imul(al2, bl9) | 0;
      mid = mid + Math.imul(al2, bh9) | 0;
      mid = mid + Math.imul(ah2, bl9) | 0;
      hi = hi + Math.imul(ah2, bh9) | 0;
      var w11 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
      w11 &= 67108863;
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = mid + Math.imul(ah9, bl3) | 0;
      hi = Math.imul(ah9, bh3);
      lo = lo + Math.imul(al8, bl4) | 0;
      mid = mid + Math.imul(al8, bh4) | 0;
      mid = mid + Math.imul(ah8, bl4) | 0;
      hi = hi + Math.imul(ah8, bh4) | 0;
      lo = lo + Math.imul(al7, bl5) | 0;
      mid = mid + Math.imul(al7, bh5) | 0;
      mid = mid + Math.imul(ah7, bl5) | 0;
      hi = hi + Math.imul(ah7, bh5) | 0;
      lo = lo + Math.imul(al6, bl6) | 0;
      mid = mid + Math.imul(al6, bh6) | 0;
      mid = mid + Math.imul(ah6, bl6) | 0;
      hi = hi + Math.imul(ah6, bh6) | 0;
      lo = lo + Math.imul(al5, bl7) | 0;
      mid = mid + Math.imul(al5, bh7) | 0;
      mid = mid + Math.imul(ah5, bl7) | 0;
      hi = hi + Math.imul(ah5, bh7) | 0;
      lo = lo + Math.imul(al4, bl8) | 0;
      mid = mid + Math.imul(al4, bh8) | 0;
      mid = mid + Math.imul(ah4, bl8) | 0;
      hi = hi + Math.imul(ah4, bh8) | 0;
      lo = lo + Math.imul(al3, bl9) | 0;
      mid = mid + Math.imul(al3, bh9) | 0;
      mid = mid + Math.imul(ah3, bl9) | 0;
      hi = hi + Math.imul(ah3, bh9) | 0;
      var w12 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
      w12 &= 67108863;
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = mid + Math.imul(ah9, bl4) | 0;
      hi = Math.imul(ah9, bh4);
      lo = lo + Math.imul(al8, bl5) | 0;
      mid = mid + Math.imul(al8, bh5) | 0;
      mid = mid + Math.imul(ah8, bl5) | 0;
      hi = hi + Math.imul(ah8, bh5) | 0;
      lo = lo + Math.imul(al7, bl6) | 0;
      mid = mid + Math.imul(al7, bh6) | 0;
      mid = mid + Math.imul(ah7, bl6) | 0;
      hi = hi + Math.imul(ah7, bh6) | 0;
      lo = lo + Math.imul(al6, bl7) | 0;
      mid = mid + Math.imul(al6, bh7) | 0;
      mid = mid + Math.imul(ah6, bl7) | 0;
      hi = hi + Math.imul(ah6, bh7) | 0;
      lo = lo + Math.imul(al5, bl8) | 0;
      mid = mid + Math.imul(al5, bh8) | 0;
      mid = mid + Math.imul(ah5, bl8) | 0;
      hi = hi + Math.imul(ah5, bh8) | 0;
      lo = lo + Math.imul(al4, bl9) | 0;
      mid = mid + Math.imul(al4, bh9) | 0;
      mid = mid + Math.imul(ah4, bl9) | 0;
      hi = hi + Math.imul(ah4, bh9) | 0;
      var w13 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
      w13 &= 67108863;
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = mid + Math.imul(ah9, bl5) | 0;
      hi = Math.imul(ah9, bh5);
      lo = lo + Math.imul(al8, bl6) | 0;
      mid = mid + Math.imul(al8, bh6) | 0;
      mid = mid + Math.imul(ah8, bl6) | 0;
      hi = hi + Math.imul(ah8, bh6) | 0;
      lo = lo + Math.imul(al7, bl7) | 0;
      mid = mid + Math.imul(al7, bh7) | 0;
      mid = mid + Math.imul(ah7, bl7) | 0;
      hi = hi + Math.imul(ah7, bh7) | 0;
      lo = lo + Math.imul(al6, bl8) | 0;
      mid = mid + Math.imul(al6, bh8) | 0;
      mid = mid + Math.imul(ah6, bl8) | 0;
      hi = hi + Math.imul(ah6, bh8) | 0;
      lo = lo + Math.imul(al5, bl9) | 0;
      mid = mid + Math.imul(al5, bh9) | 0;
      mid = mid + Math.imul(ah5, bl9) | 0;
      hi = hi + Math.imul(ah5, bh9) | 0;
      var w14 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
      w14 &= 67108863;
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = mid + Math.imul(ah9, bl6) | 0;
      hi = Math.imul(ah9, bh6);
      lo = lo + Math.imul(al8, bl7) | 0;
      mid = mid + Math.imul(al8, bh7) | 0;
      mid = mid + Math.imul(ah8, bl7) | 0;
      hi = hi + Math.imul(ah8, bh7) | 0;
      lo = lo + Math.imul(al7, bl8) | 0;
      mid = mid + Math.imul(al7, bh8) | 0;
      mid = mid + Math.imul(ah7, bl8) | 0;
      hi = hi + Math.imul(ah7, bh8) | 0;
      lo = lo + Math.imul(al6, bl9) | 0;
      mid = mid + Math.imul(al6, bh9) | 0;
      mid = mid + Math.imul(ah6, bl9) | 0;
      hi = hi + Math.imul(ah6, bh9) | 0;
      var w15 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
      w15 &= 67108863;
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = mid + Math.imul(ah9, bl7) | 0;
      hi = Math.imul(ah9, bh7);
      lo = lo + Math.imul(al8, bl8) | 0;
      mid = mid + Math.imul(al8, bh8) | 0;
      mid = mid + Math.imul(ah8, bl8) | 0;
      hi = hi + Math.imul(ah8, bh8) | 0;
      lo = lo + Math.imul(al7, bl9) | 0;
      mid = mid + Math.imul(al7, bh9) | 0;
      mid = mid + Math.imul(ah7, bl9) | 0;
      hi = hi + Math.imul(ah7, bh9) | 0;
      var w16 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
      w16 &= 67108863;
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = mid + Math.imul(ah9, bl8) | 0;
      hi = Math.imul(ah9, bh8);
      lo = lo + Math.imul(al8, bl9) | 0;
      mid = mid + Math.imul(al8, bh9) | 0;
      mid = mid + Math.imul(ah8, bl9) | 0;
      hi = hi + Math.imul(ah8, bh9) | 0;
      var w17 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
      w17 &= 67108863;
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = mid + Math.imul(ah9, bl9) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
      w18 &= 67108863;
      o9[0] = w0;
      o9[1] = w1;
      o9[2] = w22;
      o9[3] = w32;
      o9[4] = w4;
      o9[5] = w5;
      o9[6] = w6;
      o9[7] = w7;
      o9[8] = w8;
      o9[9] = w9;
      o9[10] = w10;
      o9[11] = w11;
      o9[12] = w12;
      o9[13] = w13;
      o9[14] = w14;
      o9[15] = w15;
      o9[16] = w16;
      o9[17] = w17;
      o9[18] = w18;
      if (c8 !== 0) {
        o9[19] = c8;
        out.length++;
      }
      return out;
    };
    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }
    function bigMulTo(self2, num, out) {
      out.negative = num.negative ^ self2.negative;
      out.length = self2.length + num.length;
      var carry = 0;
      var hncarry = 0;
      for (var k4 = 0; k4 < out.length - 1; k4++) {
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 67108863;
        var maxJ = Math.min(k4, num.length - 1);
        for (var j4 = Math.max(0, k4 - self2.length + 1); j4 <= maxJ; j4++) {
          var i8 = k4 - j4;
          var a8 = self2.words[i8] | 0;
          var b5 = num.words[j4] | 0;
          var r9 = a8 * b5;
          var lo = r9 & 67108863;
          ncarry = ncarry + (r9 / 67108864 | 0) | 0;
          lo = lo + rword | 0;
          rword = lo & 67108863;
          ncarry = ncarry + (lo >>> 26) | 0;
          hncarry += ncarry >>> 26;
          ncarry &= 67108863;
        }
        out.words[k4] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k4] = carry;
      } else {
        out.length--;
      }
      return out.strip();
    }
    function jumboMulTo(self2, num, out) {
      var fftm = new FFTM();
      return fftm.mulp(self2, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
      var res;
      var len = (this || _global$z).length + num.length;
      if ((this || _global$z).length === 10 && num.length === 10) {
        res = comb10MulTo(this || _global$z, num, out);
      } else if (len < 63) {
        res = smallMulTo(this || _global$z, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this || _global$z, num, out);
      } else {
        res = jumboMulTo(this || _global$z, num, out);
      }
      return res;
    };
    function FFTM(x4, y6) {
      (this || _global$z).x = x4;
      (this || _global$z).y = y6;
    }
    FFTM.prototype.makeRBT = function makeRBT(N4) {
      var t8 = new Array(N4);
      var l8 = BN.prototype._countBits(N4) - 1;
      for (var i8 = 0; i8 < N4; i8++) {
        t8[i8] = this.revBin(i8, l8, N4);
      }
      return t8;
    };
    FFTM.prototype.revBin = function revBin(x4, l8, N4) {
      if (x4 === 0 || x4 === N4 - 1)
        return x4;
      var rb = 0;
      for (var i8 = 0; i8 < l8; i8++) {
        rb |= (x4 & 1) << l8 - i8 - 1;
        x4 >>= 1;
      }
      return rb;
    };
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N4) {
      for (var i8 = 0; i8 < N4; i8++) {
        rtws[i8] = rws[rbt[i8]];
        itws[i8] = iws[rbt[i8]];
      }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N4, rbt) {
      this.permute(rbt, rws, iws, rtws, itws, N4);
      for (var s7 = 1; s7 < N4; s7 <<= 1) {
        var l8 = s7 << 1;
        var rtwdf = Math.cos(2 * Math.PI / l8);
        var itwdf = Math.sin(2 * Math.PI / l8);
        for (var p8 = 0; p8 < N4; p8 += l8) {
          var rtwdf_ = rtwdf;
          var itwdf_ = itwdf;
          for (var j4 = 0; j4 < s7; j4++) {
            var re3 = rtws[p8 + j4];
            var ie2 = itws[p8 + j4];
            var ro = rtws[p8 + j4 + s7];
            var io = itws[p8 + j4 + s7];
            var rx = rtwdf_ * ro - itwdf_ * io;
            io = rtwdf_ * io + itwdf_ * ro;
            ro = rx;
            rtws[p8 + j4] = re3 + ro;
            itws[p8 + j4] = ie2 + io;
            rtws[p8 + j4 + s7] = re3 - ro;
            itws[p8 + j4 + s7] = ie2 - io;
            if (j4 !== l8) {
              rx = rtwdf * rtwdf_ - itwdf * itwdf_;
              itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
              rtwdf_ = rx;
            }
          }
        }
      }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n9, m6) {
      var N4 = Math.max(m6, n9) | 1;
      var odd = N4 & 1;
      var i8 = 0;
      for (N4 = N4 / 2 | 0; N4; N4 = N4 >>> 1) {
        i8++;
      }
      return 1 << i8 + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N4) {
      if (N4 <= 1)
        return;
      for (var i8 = 0; i8 < N4 / 2; i8++) {
        var t8 = rws[i8];
        rws[i8] = rws[N4 - i8 - 1];
        rws[N4 - i8 - 1] = t8;
        t8 = iws[i8];
        iws[i8] = -iws[N4 - i8 - 1];
        iws[N4 - i8 - 1] = -t8;
      }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N4) {
      var carry = 0;
      for (var i8 = 0; i8 < N4 / 2; i8++) {
        var w4 = Math.round(ws[2 * i8 + 1] / N4) * 8192 + Math.round(ws[2 * i8] / N4) + carry;
        ws[i8] = w4 & 67108863;
        if (w4 < 67108864) {
          carry = 0;
        } else {
          carry = w4 / 67108864 | 0;
        }
      }
      return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N4) {
      var carry = 0;
      for (var i8 = 0; i8 < len; i8++) {
        carry = carry + (ws[i8] | 0);
        rws[2 * i8] = carry & 8191;
        carry = carry >>> 13;
        rws[2 * i8 + 1] = carry & 8191;
        carry = carry >>> 13;
      }
      for (i8 = 2 * len; i8 < N4; ++i8) {
        rws[i8] = 0;
      }
      assert2(carry === 0);
      assert2((carry & ~8191) === 0);
    };
    FFTM.prototype.stub = function stub(N4) {
      var ph = new Array(N4);
      for (var i8 = 0; i8 < N4; i8++) {
        ph[i8] = 0;
      }
      return ph;
    };
    FFTM.prototype.mulp = function mulp(x4, y6, out) {
      var N4 = 2 * this.guessLen13b(x4.length, y6.length);
      var rbt = this.makeRBT(N4);
      var _4 = this.stub(N4);
      var rws = new Array(N4);
      var rwst = new Array(N4);
      var iwst = new Array(N4);
      var nrws = new Array(N4);
      var nrwst = new Array(N4);
      var niwst = new Array(N4);
      var rmws = out.words;
      rmws.length = N4;
      this.convert13b(x4.words, x4.length, rws, N4);
      this.convert13b(y6.words, y6.length, nrws, N4);
      this.transform(rws, _4, rwst, iwst, N4, rbt);
      this.transform(nrws, _4, nrwst, niwst, N4, rbt);
      for (var i8 = 0; i8 < N4; i8++) {
        var rx = rwst[i8] * nrwst[i8] - iwst[i8] * niwst[i8];
        iwst[i8] = rwst[i8] * niwst[i8] + iwst[i8] * nrwst[i8];
        rwst[i8] = rx;
      }
      this.conjugate(rwst, iwst, N4);
      this.transform(rwst, iwst, rmws, _4, N4, rbt);
      this.conjugate(rmws, _4, N4);
      this.normalize13b(rmws, N4);
      out.negative = x4.negative ^ y6.negative;
      out.length = x4.length + y6.length;
      return out.strip();
    };
    BN.prototype.mul = function mul(num) {
      var out = new BN(null);
      out.words = new Array((this || _global$z).length + num.length);
      return this.mulTo(num, out);
    };
    BN.prototype.mulf = function mulf(num) {
      var out = new BN(null);
      out.words = new Array((this || _global$z).length + num.length);
      return jumboMulTo(this || _global$z, num, out);
    };
    BN.prototype.imul = function imul(num) {
      return this.clone().mulTo(num, this || _global$z);
    };
    BN.prototype.imuln = function imuln(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      var carry = 0;
      for (var i8 = 0; i8 < (this || _global$z).length; i8++) {
        var w4 = ((this || _global$z).words[i8] | 0) * num;
        var lo = (w4 & 67108863) + (carry & 67108863);
        carry >>= 26;
        carry += w4 / 67108864 | 0;
        carry += lo >>> 26;
        (this || _global$z).words[i8] = lo & 67108863;
      }
      if (carry !== 0) {
        (this || _global$z).words[i8] = carry;
        (this || _global$z).length++;
      }
      return this || _global$z;
    };
    BN.prototype.muln = function muln(num) {
      return this.clone().imuln(num);
    };
    BN.prototype.sqr = function sqr() {
      return this.mul(this || _global$z);
    };
    BN.prototype.isqr = function isqr() {
      return this.imul(this.clone());
    };
    BN.prototype.pow = function pow(num) {
      var w4 = toBitArray(num);
      if (w4.length === 0)
        return new BN(1);
      var res = this || _global$z;
      for (var i8 = 0; i8 < w4.length; i8++, res = res.sqr()) {
        if (w4[i8] !== 0)
          break;
      }
      if (++i8 < w4.length) {
        for (var q3 = res.sqr(); i8 < w4.length; i8++, q3 = q3.sqr()) {
          if (w4[i8] === 0)
            continue;
          res = res.mul(q3);
        }
      }
      return res;
    };
    BN.prototype.iushln = function iushln(bits) {
      assert2(typeof bits === "number" && bits >= 0);
      var r9 = bits % 26;
      var s7 = (bits - r9) / 26;
      var carryMask = 67108863 >>> 26 - r9 << 26 - r9;
      var i8;
      if (r9 !== 0) {
        var carry = 0;
        for (i8 = 0; i8 < (this || _global$z).length; i8++) {
          var newCarry = (this || _global$z).words[i8] & carryMask;
          var c8 = ((this || _global$z).words[i8] | 0) - newCarry << r9;
          (this || _global$z).words[i8] = c8 | carry;
          carry = newCarry >>> 26 - r9;
        }
        if (carry) {
          (this || _global$z).words[i8] = carry;
          (this || _global$z).length++;
        }
      }
      if (s7 !== 0) {
        for (i8 = (this || _global$z).length - 1; i8 >= 0; i8--) {
          (this || _global$z).words[i8 + s7] = (this || _global$z).words[i8];
        }
        for (i8 = 0; i8 < s7; i8++) {
          (this || _global$z).words[i8] = 0;
        }
        (this || _global$z).length += s7;
      }
      return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
      assert2((this || _global$z).negative === 0);
      return this.iushln(bits);
    };
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
      assert2(typeof bits === "number" && bits >= 0);
      var h8;
      if (hint) {
        h8 = (hint - hint % 26) / 26;
      } else {
        h8 = 0;
      }
      var r9 = bits % 26;
      var s7 = Math.min((bits - r9) / 26, (this || _global$z).length);
      var mask = 67108863 ^ 67108863 >>> r9 << r9;
      var maskedWords = extended;
      h8 -= s7;
      h8 = Math.max(0, h8);
      if (maskedWords) {
        for (var i8 = 0; i8 < s7; i8++) {
          maskedWords.words[i8] = (this || _global$z).words[i8];
        }
        maskedWords.length = s7;
      }
      if (s7 === 0)
        ;
      else if ((this || _global$z).length > s7) {
        (this || _global$z).length -= s7;
        for (i8 = 0; i8 < (this || _global$z).length; i8++) {
          (this || _global$z).words[i8] = (this || _global$z).words[i8 + s7];
        }
      } else {
        (this || _global$z).words[0] = 0;
        (this || _global$z).length = 1;
      }
      var carry = 0;
      for (i8 = (this || _global$z).length - 1; i8 >= 0 && (carry !== 0 || i8 >= h8); i8--) {
        var word = (this || _global$z).words[i8] | 0;
        (this || _global$z).words[i8] = carry << 26 - r9 | word >>> r9;
        carry = word & mask;
      }
      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }
      if ((this || _global$z).length === 0) {
        (this || _global$z).words[0] = 0;
        (this || _global$z).length = 1;
      }
      return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
      assert2((this || _global$z).negative === 0);
      return this.iushrn(bits, hint, extended);
    };
    BN.prototype.shln = function shln(bits) {
      return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
      return this.clone().iushln(bits);
    };
    BN.prototype.shrn = function shrn(bits) {
      return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
      return this.clone().iushrn(bits);
    };
    BN.prototype.testn = function testn(bit) {
      assert2(typeof bit === "number" && bit >= 0);
      var r9 = bit % 26;
      var s7 = (bit - r9) / 26;
      var q3 = 1 << r9;
      if ((this || _global$z).length <= s7)
        return false;
      var w4 = (this || _global$z).words[s7];
      return !!(w4 & q3);
    };
    BN.prototype.imaskn = function imaskn(bits) {
      assert2(typeof bits === "number" && bits >= 0);
      var r9 = bits % 26;
      var s7 = (bits - r9) / 26;
      assert2((this || _global$z).negative === 0, "imaskn works only with positive numbers");
      if ((this || _global$z).length <= s7) {
        return this || _global$z;
      }
      if (r9 !== 0) {
        s7++;
      }
      (this || _global$z).length = Math.min(s7, (this || _global$z).length);
      if (r9 !== 0) {
        var mask = 67108863 ^ 67108863 >>> r9 << r9;
        (this || _global$z).words[(this || _global$z).length - 1] &= mask;
      }
      return this.strip();
    };
    BN.prototype.maskn = function maskn(bits) {
      return this.clone().imaskn(bits);
    };
    BN.prototype.iaddn = function iaddn(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      if (num < 0)
        return this.isubn(-num);
      if ((this || _global$z).negative !== 0) {
        if ((this || _global$z).length === 1 && ((this || _global$z).words[0] | 0) < num) {
          (this || _global$z).words[0] = num - ((this || _global$z).words[0] | 0);
          (this || _global$z).negative = 0;
          return this || _global$z;
        }
        (this || _global$z).negative = 0;
        this.isubn(num);
        (this || _global$z).negative = 1;
        return this || _global$z;
      }
      return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
      (this || _global$z).words[0] += num;
      for (var i8 = 0; i8 < (this || _global$z).length && (this || _global$z).words[i8] >= 67108864; i8++) {
        (this || _global$z).words[i8] -= 67108864;
        if (i8 === (this || _global$z).length - 1) {
          (this || _global$z).words[i8 + 1] = 1;
        } else {
          (this || _global$z).words[i8 + 1]++;
        }
      }
      (this || _global$z).length = Math.max((this || _global$z).length, i8 + 1);
      return this || _global$z;
    };
    BN.prototype.isubn = function isubn(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      if (num < 0)
        return this.iaddn(-num);
      if ((this || _global$z).negative !== 0) {
        (this || _global$z).negative = 0;
        this.iaddn(num);
        (this || _global$z).negative = 1;
        return this || _global$z;
      }
      (this || _global$z).words[0] -= num;
      if ((this || _global$z).length === 1 && (this || _global$z).words[0] < 0) {
        (this || _global$z).words[0] = -(this || _global$z).words[0];
        (this || _global$z).negative = 1;
      } else {
        for (var i8 = 0; i8 < (this || _global$z).length && (this || _global$z).words[i8] < 0; i8++) {
          (this || _global$z).words[i8] += 67108864;
          (this || _global$z).words[i8 + 1] -= 1;
        }
      }
      return this.strip();
    };
    BN.prototype.addn = function addn(num) {
      return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
      return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
      (this || _global$z).negative = 0;
      return this || _global$z;
    };
    BN.prototype.abs = function abs() {
      return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
      var len = num.length + shift;
      var i8;
      this._expand(len);
      var w4;
      var carry = 0;
      for (i8 = 0; i8 < num.length; i8++) {
        w4 = ((this || _global$z).words[i8 + shift] | 0) + carry;
        var right = (num.words[i8] | 0) * mul;
        w4 -= right & 67108863;
        carry = (w4 >> 26) - (right / 67108864 | 0);
        (this || _global$z).words[i8 + shift] = w4 & 67108863;
      }
      for (; i8 < (this || _global$z).length - shift; i8++) {
        w4 = ((this || _global$z).words[i8 + shift] | 0) + carry;
        carry = w4 >> 26;
        (this || _global$z).words[i8 + shift] = w4 & 67108863;
      }
      if (carry === 0)
        return this.strip();
      assert2(carry === -1);
      carry = 0;
      for (i8 = 0; i8 < (this || _global$z).length; i8++) {
        w4 = -((this || _global$z).words[i8] | 0) + carry;
        carry = w4 >> 26;
        (this || _global$z).words[i8] = w4 & 67108863;
      }
      (this || _global$z).negative = 1;
      return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
      var shift = (this || _global$z).length - num.length;
      var a8 = this.clone();
      var b5 = num;
      var bhi = b5.words[b5.length - 1] | 0;
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b5 = b5.ushln(shift);
        a8.iushln(shift);
        bhi = b5.words[b5.length - 1] | 0;
      }
      var m6 = a8.length - b5.length;
      var q3;
      if (mode !== "mod") {
        q3 = new BN(null);
        q3.length = m6 + 1;
        q3.words = new Array(q3.length);
        for (var i8 = 0; i8 < q3.length; i8++) {
          q3.words[i8] = 0;
        }
      }
      var diff = a8.clone()._ishlnsubmul(b5, 1, m6);
      if (diff.negative === 0) {
        a8 = diff;
        if (q3) {
          q3.words[m6] = 1;
        }
      }
      for (var j4 = m6 - 1; j4 >= 0; j4--) {
        var qj = (a8.words[b5.length + j4] | 0) * 67108864 + (a8.words[b5.length + j4 - 1] | 0);
        qj = Math.min(qj / bhi | 0, 67108863);
        a8._ishlnsubmul(b5, qj, j4);
        while (a8.negative !== 0) {
          qj--;
          a8.negative = 0;
          a8._ishlnsubmul(b5, 1, j4);
          if (!a8.isZero()) {
            a8.negative ^= 1;
          }
        }
        if (q3) {
          q3.words[j4] = qj;
        }
      }
      if (q3) {
        q3.strip();
      }
      a8.strip();
      if (mode !== "div" && shift !== 0) {
        a8.iushrn(shift);
      }
      return {
        div: q3 || null,
        mod: a8
      };
    };
    BN.prototype.divmod = function divmod(num, mode, positive) {
      assert2(!num.isZero());
      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }
      var div, mod, res;
      if ((this || _global$z).negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);
        if (mode !== "mod") {
          div = res.div.neg();
        }
        if (mode !== "div") {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }
        return {
          div,
          mod
        };
      }
      if ((this || _global$z).negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);
        if (mode !== "mod") {
          div = res.div.neg();
        }
        return {
          div,
          mod: res.mod
        };
      }
      if (((this || _global$z).negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);
        if (mode !== "div") {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }
        return {
          div: res.div,
          mod
        };
      }
      if (num.length > (this || _global$z).length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this || _global$z
        };
      }
      if (num.length === 1) {
        if (mode === "div") {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }
        if (mode === "mod") {
          return {
            div: null,
            mod: new BN(this.modn(num.words[0]))
          };
        }
        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modn(num.words[0]))
        };
      }
      return this._wordDiv(num, mode);
    };
    BN.prototype.div = function div(num) {
      return this.divmod(num, "div", false).div;
    };
    BN.prototype.mod = function mod(num) {
      return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
      return this.divmod(num, "mod", true).mod;
    };
    BN.prototype.divRound = function divRound(num) {
      var dm = this.divmod(num);
      if (dm.mod.isZero())
        return dm.div;
      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
      var half = num.ushrn(1);
      var r22 = num.andln(1);
      var cmp = mod.cmp(half);
      if (cmp < 0 || r22 === 1 && cmp === 0)
        return dm.div;
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
      assert2(num <= 67108863);
      var p8 = (1 << 26) % num;
      var acc = 0;
      for (var i8 = (this || _global$z).length - 1; i8 >= 0; i8--) {
        acc = (p8 * acc + ((this || _global$z).words[i8] | 0)) % num;
      }
      return acc;
    };
    BN.prototype.idivn = function idivn(num) {
      assert2(num <= 67108863);
      var carry = 0;
      for (var i8 = (this || _global$z).length - 1; i8 >= 0; i8--) {
        var w4 = ((this || _global$z).words[i8] | 0) + carry * 67108864;
        (this || _global$z).words[i8] = w4 / num | 0;
        carry = w4 % num;
      }
      return this.strip();
    };
    BN.prototype.divn = function divn(num) {
      return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p8) {
      assert2(p8.negative === 0);
      assert2(!p8.isZero());
      var x4 = this || _global$z;
      var y6 = p8.clone();
      if (x4.negative !== 0) {
        x4 = x4.umod(p8);
      } else {
        x4 = x4.clone();
      }
      var A4 = new BN(1);
      var B4 = new BN(0);
      var C4 = new BN(0);
      var D4 = new BN(1);
      var g5 = 0;
      while (x4.isEven() && y6.isEven()) {
        x4.iushrn(1);
        y6.iushrn(1);
        ++g5;
      }
      var yp = y6.clone();
      var xp = x4.clone();
      while (!x4.isZero()) {
        for (var i8 = 0, im = 1; (x4.words[0] & im) === 0 && i8 < 26; ++i8, im <<= 1)
          ;
        if (i8 > 0) {
          x4.iushrn(i8);
          while (i8-- > 0) {
            if (A4.isOdd() || B4.isOdd()) {
              A4.iadd(yp);
              B4.isub(xp);
            }
            A4.iushrn(1);
            B4.iushrn(1);
          }
        }
        for (var j4 = 0, jm = 1; (y6.words[0] & jm) === 0 && j4 < 26; ++j4, jm <<= 1)
          ;
        if (j4 > 0) {
          y6.iushrn(j4);
          while (j4-- > 0) {
            if (C4.isOdd() || D4.isOdd()) {
              C4.iadd(yp);
              D4.isub(xp);
            }
            C4.iushrn(1);
            D4.iushrn(1);
          }
        }
        if (x4.cmp(y6) >= 0) {
          x4.isub(y6);
          A4.isub(C4);
          B4.isub(D4);
        } else {
          y6.isub(x4);
          C4.isub(A4);
          D4.isub(B4);
        }
      }
      return {
        a: C4,
        b: D4,
        gcd: y6.iushln(g5)
      };
    };
    BN.prototype._invmp = function _invmp(p8) {
      assert2(p8.negative === 0);
      assert2(!p8.isZero());
      var a8 = this || _global$z;
      var b5 = p8.clone();
      if (a8.negative !== 0) {
        a8 = a8.umod(p8);
      } else {
        a8 = a8.clone();
      }
      var x1 = new BN(1);
      var x22 = new BN(0);
      var delta = b5.clone();
      while (a8.cmpn(1) > 0 && b5.cmpn(1) > 0) {
        for (var i8 = 0, im = 1; (a8.words[0] & im) === 0 && i8 < 26; ++i8, im <<= 1)
          ;
        if (i8 > 0) {
          a8.iushrn(i8);
          while (i8-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }
            x1.iushrn(1);
          }
        }
        for (var j4 = 0, jm = 1; (b5.words[0] & jm) === 0 && j4 < 26; ++j4, jm <<= 1)
          ;
        if (j4 > 0) {
          b5.iushrn(j4);
          while (j4-- > 0) {
            if (x22.isOdd()) {
              x22.iadd(delta);
            }
            x22.iushrn(1);
          }
        }
        if (a8.cmp(b5) >= 0) {
          a8.isub(b5);
          x1.isub(x22);
        } else {
          b5.isub(a8);
          x22.isub(x1);
        }
      }
      var res;
      if (a8.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x22;
      }
      if (res.cmpn(0) < 0) {
        res.iadd(p8);
      }
      return res;
    };
    BN.prototype.gcd = function gcd(num) {
      if (this.isZero())
        return num.abs();
      if (num.isZero())
        return this.abs();
      var a8 = this.clone();
      var b5 = num.clone();
      a8.negative = 0;
      b5.negative = 0;
      for (var shift = 0; a8.isEven() && b5.isEven(); shift++) {
        a8.iushrn(1);
        b5.iushrn(1);
      }
      do {
        while (a8.isEven()) {
          a8.iushrn(1);
        }
        while (b5.isEven()) {
          b5.iushrn(1);
        }
        var r9 = a8.cmp(b5);
        if (r9 < 0) {
          var t8 = a8;
          a8 = b5;
          b5 = t8;
        } else if (r9 === 0 || b5.cmpn(1) === 0) {
          break;
        }
        a8.isub(b5);
      } while (true);
      return b5.iushln(shift);
    };
    BN.prototype.invm = function invm(num) {
      return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
      return ((this || _global$z).words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
      return ((this || _global$z).words[0] & 1) === 1;
    };
    BN.prototype.andln = function andln(num) {
      return (this || _global$z).words[0] & num;
    };
    BN.prototype.bincn = function bincn(bit) {
      assert2(typeof bit === "number");
      var r9 = bit % 26;
      var s7 = (bit - r9) / 26;
      var q3 = 1 << r9;
      if ((this || _global$z).length <= s7) {
        this._expand(s7 + 1);
        (this || _global$z).words[s7] |= q3;
        return this || _global$z;
      }
      var carry = q3;
      for (var i8 = s7; carry !== 0 && i8 < (this || _global$z).length; i8++) {
        var w4 = (this || _global$z).words[i8] | 0;
        w4 += carry;
        carry = w4 >>> 26;
        w4 &= 67108863;
        (this || _global$z).words[i8] = w4;
      }
      if (carry !== 0) {
        (this || _global$z).words[i8] = carry;
        (this || _global$z).length++;
      }
      return this || _global$z;
    };
    BN.prototype.isZero = function isZero() {
      return (this || _global$z).length === 1 && (this || _global$z).words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
      var negative = num < 0;
      if ((this || _global$z).negative !== 0 && !negative)
        return -1;
      if ((this || _global$z).negative === 0 && negative)
        return 1;
      this.strip();
      var res;
      if ((this || _global$z).length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }
        assert2(num <= 67108863, "Number is too big");
        var w4 = (this || _global$z).words[0] | 0;
        res = w4 === num ? 0 : w4 < num ? -1 : 1;
      }
      if ((this || _global$z).negative !== 0)
        return -res | 0;
      return res;
    };
    BN.prototype.cmp = function cmp(num) {
      if ((this || _global$z).negative !== 0 && num.negative === 0)
        return -1;
      if ((this || _global$z).negative === 0 && num.negative !== 0)
        return 1;
      var res = this.ucmp(num);
      if ((this || _global$z).negative !== 0)
        return -res | 0;
      return res;
    };
    BN.prototype.ucmp = function ucmp(num) {
      if ((this || _global$z).length > num.length)
        return 1;
      if ((this || _global$z).length < num.length)
        return -1;
      var res = 0;
      for (var i8 = (this || _global$z).length - 1; i8 >= 0; i8--) {
        var a8 = (this || _global$z).words[i8] | 0;
        var b5 = num.words[i8] | 0;
        if (a8 === b5)
          continue;
        if (a8 < b5) {
          res = -1;
        } else if (a8 > b5) {
          res = 1;
        }
        break;
      }
      return res;
    };
    BN.prototype.gtn = function gtn(num) {
      return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
      return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
      return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
      return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
      return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
      return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
      return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
      return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
      return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
      return this.cmp(num) === 0;
    };
    BN.red = function red(num) {
      return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
      assert2(!(this || _global$z).red, "Already a number in reduction context");
      assert2((this || _global$z).negative === 0, "red works only with positives");
      return ctx.convertTo(this || _global$z)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
      assert2((this || _global$z).red, "fromRed works only with numbers in reduction context");
      return (this || _global$z).red.convertFrom(this || _global$z);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
      (this || _global$z).red = ctx;
      return this || _global$z;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
      assert2(!(this || _global$z).red, "Already a number in reduction context");
      return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
      assert2((this || _global$z).red, "redAdd works only with red numbers");
      return (this || _global$z).red.add(this || _global$z, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
      assert2((this || _global$z).red, "redIAdd works only with red numbers");
      return (this || _global$z).red.iadd(this || _global$z, num);
    };
    BN.prototype.redSub = function redSub(num) {
      assert2((this || _global$z).red, "redSub works only with red numbers");
      return (this || _global$z).red.sub(this || _global$z, num);
    };
    BN.prototype.redISub = function redISub(num) {
      assert2((this || _global$z).red, "redISub works only with red numbers");
      return (this || _global$z).red.isub(this || _global$z, num);
    };
    BN.prototype.redShl = function redShl(num) {
      assert2((this || _global$z).red, "redShl works only with red numbers");
      return (this || _global$z).red.shl(this || _global$z, num);
    };
    BN.prototype.redMul = function redMul(num) {
      assert2((this || _global$z).red, "redMul works only with red numbers");
      (this || _global$z).red._verify2(this || _global$z, num);
      return (this || _global$z).red.mul(this || _global$z, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
      assert2((this || _global$z).red, "redMul works only with red numbers");
      (this || _global$z).red._verify2(this || _global$z, num);
      return (this || _global$z).red.imul(this || _global$z, num);
    };
    BN.prototype.redSqr = function redSqr() {
      assert2((this || _global$z).red, "redSqr works only with red numbers");
      (this || _global$z).red._verify1(this || _global$z);
      return (this || _global$z).red.sqr(this || _global$z);
    };
    BN.prototype.redISqr = function redISqr() {
      assert2((this || _global$z).red, "redISqr works only with red numbers");
      (this || _global$z).red._verify1(this || _global$z);
      return (this || _global$z).red.isqr(this || _global$z);
    };
    BN.prototype.redSqrt = function redSqrt() {
      assert2((this || _global$z).red, "redSqrt works only with red numbers");
      (this || _global$z).red._verify1(this || _global$z);
      return (this || _global$z).red.sqrt(this || _global$z);
    };
    BN.prototype.redInvm = function redInvm() {
      assert2((this || _global$z).red, "redInvm works only with red numbers");
      (this || _global$z).red._verify1(this || _global$z);
      return (this || _global$z).red.invm(this || _global$z);
    };
    BN.prototype.redNeg = function redNeg() {
      assert2((this || _global$z).red, "redNeg works only with red numbers");
      (this || _global$z).red._verify1(this || _global$z);
      return (this || _global$z).red.neg(this || _global$z);
    };
    BN.prototype.redPow = function redPow(num) {
      assert2((this || _global$z).red && !num.red, "redPow(normalNum)");
      (this || _global$z).red._verify1(this || _global$z);
      return (this || _global$z).red.pow(this || _global$z, num);
    };
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };
    function MPrime(name2, p8) {
      (this || _global$z).name = name2;
      (this || _global$z).p = new BN(p8, 16);
      (this || _global$z).n = (this || _global$z).p.bitLength();
      (this || _global$z).k = new BN(1).iushln((this || _global$z).n).isub((this || _global$z).p);
      (this || _global$z).tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil((this || _global$z).n / 13));
      return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
      var r9 = num;
      var rlen;
      do {
        this.split(r9, (this || _global$z).tmp);
        r9 = this.imulK(r9);
        r9 = r9.iadd((this || _global$z).tmp);
        rlen = r9.bitLength();
      } while (rlen > (this || _global$z).n);
      var cmp = rlen < (this || _global$z).n ? -1 : r9.ucmp((this || _global$z).p);
      if (cmp === 0) {
        r9.words[0] = 0;
        r9.length = 1;
      } else if (cmp > 0) {
        r9.isub((this || _global$z).p);
      } else {
        if (r9.strip !== void 0) {
          r9.strip();
        } else {
          r9._strip();
        }
      }
      return r9;
    };
    MPrime.prototype.split = function split(input, out) {
      input.iushrn((this || _global$z).n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
      return num.imul((this || _global$z).k);
    };
    function K256() {
      MPrime.call(this || _global$z, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits4(K256, MPrime);
    K256.prototype.split = function split(input, output) {
      var mask = 4194303;
      var outLen = Math.min(input.length, 9);
      for (var i8 = 0; i8 < outLen; i8++) {
        output.words[i8] = input.words[i8];
      }
      output.length = outLen;
      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }
      var prev = input.words[9];
      output.words[output.length++] = prev & mask;
      for (i8 = 10; i8 < input.length; i8++) {
        var next = input.words[i8] | 0;
        input.words[i8 - 10] = (next & mask) << 4 | prev >>> 22;
        prev = next;
      }
      prev >>>= 22;
      input.words[i8 - 10] = prev;
      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };
    K256.prototype.imulK = function imulK(num) {
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;
      var lo = 0;
      for (var i8 = 0; i8 < num.length; i8++) {
        var w4 = num.words[i8] | 0;
        lo += w4 * 977;
        num.words[i8] = lo & 67108863;
        lo = w4 * 64 + (lo / 67108864 | 0);
      }
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }
      return num;
    };
    function P224() {
      MPrime.call(this || _global$z, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits4(P224, MPrime);
    function P192() {
      MPrime.call(this || _global$z, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits4(P192, MPrime);
    function P25519() {
      MPrime.call(this || _global$z, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits4(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
      var carry = 0;
      for (var i8 = 0; i8 < num.length; i8++) {
        var hi = (num.words[i8] | 0) * 19 + carry;
        var lo = hi & 67108863;
        hi >>>= 26;
        num.words[i8] = lo;
        carry = hi;
      }
      if (carry !== 0) {
        num.words[num.length++] = carry;
      }
      return num;
    };
    BN._prime = function prime(name2) {
      if (primes[name2])
        return primes[name2];
      var prime2;
      if (name2 === "k256") {
        prime2 = new K256();
      } else if (name2 === "p224") {
        prime2 = new P224();
      } else if (name2 === "p192") {
        prime2 = new P192();
      } else if (name2 === "p25519") {
        prime2 = new P25519();
      } else {
        throw new Error("Unknown prime " + name2);
      }
      primes[name2] = prime2;
      return prime2;
    };
    function Red(m6) {
      if (typeof m6 === "string") {
        var prime = BN._prime(m6);
        (this || _global$z).m = prime.p;
        (this || _global$z).prime = prime;
      } else {
        assert2(m6.gtn(1), "modulus must be greater than 1");
        (this || _global$z).m = m6;
        (this || _global$z).prime = null;
      }
    }
    Red.prototype._verify1 = function _verify1(a8) {
      assert2(a8.negative === 0, "red works only with positives");
      assert2(a8.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a8, b5) {
      assert2((a8.negative | b5.negative) === 0, "red works only with positives");
      assert2(a8.red && a8.red === b5.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a8) {
      if ((this || _global$z).prime)
        return (this || _global$z).prime.ireduce(a8)._forceRed(this || _global$z);
      return a8.umod((this || _global$z).m)._forceRed(this || _global$z);
    };
    Red.prototype.neg = function neg(a8) {
      if (a8.isZero()) {
        return a8.clone();
      }
      return (this || _global$z).m.sub(a8)._forceRed(this || _global$z);
    };
    Red.prototype.add = function add(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.add(b5);
      if (res.cmp((this || _global$z).m) >= 0) {
        res.isub((this || _global$z).m);
      }
      return res._forceRed(this || _global$z);
    };
    Red.prototype.iadd = function iadd(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.iadd(b5);
      if (res.cmp((this || _global$z).m) >= 0) {
        res.isub((this || _global$z).m);
      }
      return res;
    };
    Red.prototype.sub = function sub(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.sub(b5);
      if (res.cmpn(0) < 0) {
        res.iadd((this || _global$z).m);
      }
      return res._forceRed(this || _global$z);
    };
    Red.prototype.isub = function isub(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.isub(b5);
      if (res.cmpn(0) < 0) {
        res.iadd((this || _global$z).m);
      }
      return res;
    };
    Red.prototype.shl = function shl(a8, num) {
      this._verify1(a8);
      return this.imod(a8.ushln(num));
    };
    Red.prototype.imul = function imul(a8, b5) {
      this._verify2(a8, b5);
      return this.imod(a8.imul(b5));
    };
    Red.prototype.mul = function mul(a8, b5) {
      this._verify2(a8, b5);
      return this.imod(a8.mul(b5));
    };
    Red.prototype.isqr = function isqr(a8) {
      return this.imul(a8, a8.clone());
    };
    Red.prototype.sqr = function sqr(a8) {
      return this.mul(a8, a8);
    };
    Red.prototype.sqrt = function sqrt(a8) {
      if (a8.isZero())
        return a8.clone();
      var mod3 = (this || _global$z).m.andln(3);
      assert2(mod3 % 2 === 1);
      if (mod3 === 3) {
        var pow = (this || _global$z).m.add(new BN(1)).iushrn(2);
        return this.pow(a8, pow);
      }
      var q3 = (this || _global$z).m.subn(1);
      var s7 = 0;
      while (!q3.isZero() && q3.andln(1) === 0) {
        s7++;
        q3.iushrn(1);
      }
      assert2(!q3.isZero());
      var one = new BN(1).toRed(this || _global$z);
      var nOne = one.redNeg();
      var lpow = (this || _global$z).m.subn(1).iushrn(1);
      var z5 = (this || _global$z).m.bitLength();
      z5 = new BN(2 * z5 * z5).toRed(this || _global$z);
      while (this.pow(z5, lpow).cmp(nOne) !== 0) {
        z5.redIAdd(nOne);
      }
      var c8 = this.pow(z5, q3);
      var r9 = this.pow(a8, q3.addn(1).iushrn(1));
      var t8 = this.pow(a8, q3);
      var m6 = s7;
      while (t8.cmp(one) !== 0) {
        var tmp = t8;
        for (var i8 = 0; tmp.cmp(one) !== 0; i8++) {
          tmp = tmp.redSqr();
        }
        assert2(i8 < m6);
        var b5 = this.pow(c8, new BN(1).iushln(m6 - i8 - 1));
        r9 = r9.redMul(b5);
        c8 = b5.redSqr();
        t8 = t8.redMul(c8);
        m6 = i8;
      }
      return r9;
    };
    Red.prototype.invm = function invm(a8) {
      var inv = a8._invmp((this || _global$z).m);
      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };
    Red.prototype.pow = function pow(a8, num) {
      if (num.isZero())
        return new BN(1).toRed(this || _global$z);
      if (num.cmpn(1) === 0)
        return a8.clone();
      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN(1).toRed(this || _global$z);
      wnd[1] = a8;
      for (var i8 = 2; i8 < wnd.length; i8++) {
        wnd[i8] = this.mul(wnd[i8 - 1], a8);
      }
      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;
      if (start === 0) {
        start = 26;
      }
      for (i8 = num.length - 1; i8 >= 0; i8--) {
        var word = num.words[i8];
        for (var j4 = start - 1; j4 >= 0; j4--) {
          var bit = word >> j4 & 1;
          if (res !== wnd[0]) {
            res = this.sqr(res);
          }
          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }
          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i8 !== 0 || j4 !== 0))
            continue;
          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }
        start = 26;
      }
      return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
      var r9 = num.umod((this || _global$z).m);
      return r9 === num ? r9.clone() : r9;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
      var res = num.clone();
      res.red = null;
      return res;
    };
    BN.mont = function mont(num) {
      return new Mont(num);
    };
    function Mont(m6) {
      Red.call(this || _global$z, m6);
      (this || _global$z).shift = (this || _global$z).m.bitLength();
      if ((this || _global$z).shift % 26 !== 0) {
        (this || _global$z).shift += 26 - (this || _global$z).shift % 26;
      }
      (this || _global$z).r = new BN(1).iushln((this || _global$z).shift);
      (this || _global$z).r2 = this.imod((this || _global$z).r.sqr());
      (this || _global$z).rinv = (this || _global$z).r._invmp((this || _global$z).m);
      (this || _global$z).minv = (this || _global$z).rinv.mul((this || _global$z).r).isubn(1).div((this || _global$z).m);
      (this || _global$z).minv = (this || _global$z).minv.umod((this || _global$z).r);
      (this || _global$z).minv = (this || _global$z).r.sub((this || _global$z).minv);
    }
    inherits4(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
      return this.imod(num.ushln((this || _global$z).shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
      var r9 = this.imod(num.mul((this || _global$z).rinv));
      r9.red = null;
      return r9;
    };
    Mont.prototype.imul = function imul(a8, b5) {
      if (a8.isZero() || b5.isZero()) {
        a8.words[0] = 0;
        a8.length = 1;
        return a8;
      }
      var t8 = a8.imul(b5);
      var c8 = t8.maskn((this || _global$z).shift).mul((this || _global$z).minv).imaskn((this || _global$z).shift).mul((this || _global$z).m);
      var u8 = t8.isub(c8).iushrn((this || _global$z).shift);
      var res = u8;
      if (u8.cmp((this || _global$z).m) >= 0) {
        res = u8.isub((this || _global$z).m);
      } else if (u8.cmpn(0) < 0) {
        res = u8.iadd((this || _global$z).m);
      }
      return res._forceRed(this || _global$z);
    };
    Mont.prototype.mul = function mul(a8, b5) {
      if (a8.isZero() || b5.isZero())
        return new BN(0)._forceRed(this || _global$z);
      var t8 = a8.mul(b5);
      var c8 = t8.maskn((this || _global$z).shift).mul((this || _global$z).minv).imaskn((this || _global$z).shift).mul((this || _global$z).m);
      var u8 = t8.isub(c8).iushrn((this || _global$z).shift);
      var res = u8;
      if (u8.cmp((this || _global$z).m) >= 0) {
        res = u8.isub((this || _global$z).m);
      } else if (u8.cmpn(0) < 0) {
        res = u8.iadd((this || _global$z).m);
      }
      return res._forceRed(this || _global$z);
    };
    Mont.prototype.invm = function invm(a8) {
      var res = this.imod(a8._invmp((this || _global$z).m).mul((this || _global$z).r2));
      return res._forceRed(this || _global$z);
    };
  })(module$a, exports$1Y);
  return module$a.exports;
}
function dew$1W() {
  if (_dewExec$1W)
    return module$9.exports;
  _dewExec$1W = true;
  (function(module3, exports11) {
    function assert2(val, msg) {
      if (!val)
        throw new Error(msg || "Assertion failed");
    }
    function inherits4(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function() {
      };
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }
    function BN(number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }
      (this || _global$y).negative = 0;
      (this || _global$y).words = null;
      (this || _global$y).length = 0;
      (this || _global$y).red = null;
      if (number !== null) {
        if (base === "le" || base === "be") {
          endian = base;
          base = 10;
        }
        this._init(number || 0, base || 10, endian || "be");
      }
    }
    if (typeof module3 === "object") {
      module3.exports = BN;
    } else {
      exports11.BN = BN;
    }
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer3;
    try {
      if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
        Buffer3 = window.Buffer;
      } else {
        Buffer3 = buffer.Buffer;
      }
    } catch (e11) {
    }
    BN.isBN = function isBN(num) {
      if (num instanceof BN) {
        return true;
      }
      return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
      if (left.cmp(right) > 0)
        return left;
      return right;
    };
    BN.min = function min(left, right) {
      if (left.cmp(right) < 0)
        return left;
      return right;
    };
    BN.prototype._init = function init2(number, base, endian) {
      if (typeof number === "number") {
        return this._initNumber(number, base, endian);
      }
      if (typeof number === "object") {
        return this._initArray(number, base, endian);
      }
      if (base === "hex") {
        base = 16;
      }
      assert2(base === (base | 0) && base >= 2 && base <= 36);
      number = number.toString().replace(/\s+/g, "");
      var start = 0;
      if (number[0] === "-") {
        start++;
        (this || _global$y).negative = 1;
      }
      if (start < number.length) {
        if (base === 16) {
          this._parseHex(number, start, endian);
        } else {
          this._parseBase(number, base, start);
          if (endian === "le") {
            this._initArray(this.toArray(), base, endian);
          }
        }
      }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
      if (number < 0) {
        (this || _global$y).negative = 1;
        number = -number;
      }
      if (number < 67108864) {
        (this || _global$y).words = [number & 67108863];
        (this || _global$y).length = 1;
      } else if (number < 4503599627370496) {
        (this || _global$y).words = [number & 67108863, number / 67108864 & 67108863];
        (this || _global$y).length = 2;
      } else {
        assert2(number < 9007199254740992);
        (this || _global$y).words = [number & 67108863, number / 67108864 & 67108863, 1];
        (this || _global$y).length = 3;
      }
      if (endian !== "le")
        return;
      this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
      assert2(typeof number.length === "number");
      if (number.length <= 0) {
        (this || _global$y).words = [0];
        (this || _global$y).length = 1;
        return this || _global$y;
      }
      (this || _global$y).length = Math.ceil(number.length / 3);
      (this || _global$y).words = new Array((this || _global$y).length);
      for (var i8 = 0; i8 < (this || _global$y).length; i8++) {
        (this || _global$y).words[i8] = 0;
      }
      var j4, w4;
      var off2 = 0;
      if (endian === "be") {
        for (i8 = number.length - 1, j4 = 0; i8 >= 0; i8 -= 3) {
          w4 = number[i8] | number[i8 - 1] << 8 | number[i8 - 2] << 16;
          (this || _global$y).words[j4] |= w4 << off2 & 67108863;
          (this || _global$y).words[j4 + 1] = w4 >>> 26 - off2 & 67108863;
          off2 += 24;
          if (off2 >= 26) {
            off2 -= 26;
            j4++;
          }
        }
      } else if (endian === "le") {
        for (i8 = 0, j4 = 0; i8 < number.length; i8 += 3) {
          w4 = number[i8] | number[i8 + 1] << 8 | number[i8 + 2] << 16;
          (this || _global$y).words[j4] |= w4 << off2 & 67108863;
          (this || _global$y).words[j4 + 1] = w4 >>> 26 - off2 & 67108863;
          off2 += 24;
          if (off2 >= 26) {
            off2 -= 26;
            j4++;
          }
        }
      }
      return this.strip();
    };
    function parseHex4Bits(string, index) {
      var c8 = string.charCodeAt(index);
      if (c8 >= 65 && c8 <= 70) {
        return c8 - 55;
      } else if (c8 >= 97 && c8 <= 102) {
        return c8 - 87;
      } else {
        return c8 - 48 & 15;
      }
    }
    function parseHexByte(string, lowerBound, index) {
      var r9 = parseHex4Bits(string, index);
      if (index - 1 >= lowerBound) {
        r9 |= parseHex4Bits(string, index - 1) << 4;
      }
      return r9;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
      (this || _global$y).length = Math.ceil((number.length - start) / 6);
      (this || _global$y).words = new Array((this || _global$y).length);
      for (var i8 = 0; i8 < (this || _global$y).length; i8++) {
        (this || _global$y).words[i8] = 0;
      }
      var off2 = 0;
      var j4 = 0;
      var w4;
      if (endian === "be") {
        for (i8 = number.length - 1; i8 >= start; i8 -= 2) {
          w4 = parseHexByte(number, start, i8) << off2;
          (this || _global$y).words[j4] |= w4 & 67108863;
          if (off2 >= 18) {
            off2 -= 18;
            j4 += 1;
            (this || _global$y).words[j4] |= w4 >>> 26;
          } else {
            off2 += 8;
          }
        }
      } else {
        var parseLength = number.length - start;
        for (i8 = parseLength % 2 === 0 ? start + 1 : start; i8 < number.length; i8 += 2) {
          w4 = parseHexByte(number, start, i8) << off2;
          (this || _global$y).words[j4] |= w4 & 67108863;
          if (off2 >= 18) {
            off2 -= 18;
            j4 += 1;
            (this || _global$y).words[j4] |= w4 >>> 26;
          } else {
            off2 += 8;
          }
        }
      }
      this.strip();
    };
    function parseBase(str, start, end, mul) {
      var r9 = 0;
      var len = Math.min(str.length, end);
      for (var i8 = start; i8 < len; i8++) {
        var c8 = str.charCodeAt(i8) - 48;
        r9 *= mul;
        if (c8 >= 49) {
          r9 += c8 - 49 + 10;
        } else if (c8 >= 17) {
          r9 += c8 - 17 + 10;
        } else {
          r9 += c8;
        }
      }
      return r9;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
      (this || _global$y).words = [0];
      (this || _global$y).length = 1;
      for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
        limbLen++;
      }
      limbLen--;
      limbPow = limbPow / base | 0;
      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;
      var word = 0;
      for (var i8 = start; i8 < end; i8 += limbLen) {
        word = parseBase(number, i8, i8 + limbLen, base);
        this.imuln(limbPow);
        if ((this || _global$y).words[0] + word < 67108864) {
          (this || _global$y).words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i8, number.length, base);
        for (i8 = 0; i8 < mod; i8++) {
          pow *= base;
        }
        this.imuln(pow);
        if ((this || _global$y).words[0] + word < 67108864) {
          (this || _global$y).words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
      this.strip();
    };
    BN.prototype.copy = function copy(dest) {
      dest.words = new Array((this || _global$y).length);
      for (var i8 = 0; i8 < (this || _global$y).length; i8++) {
        dest.words[i8] = (this || _global$y).words[i8];
      }
      dest.length = (this || _global$y).length;
      dest.negative = (this || _global$y).negative;
      dest.red = (this || _global$y).red;
    };
    BN.prototype.clone = function clone() {
      var r9 = new BN(null);
      this.copy(r9);
      return r9;
    };
    BN.prototype._expand = function _expand(size) {
      while ((this || _global$y).length < size) {
        (this || _global$y).words[(this || _global$y).length++] = 0;
      }
      return this || _global$y;
    };
    BN.prototype.strip = function strip() {
      while ((this || _global$y).length > 1 && (this || _global$y).words[(this || _global$y).length - 1] === 0) {
        (this || _global$y).length--;
      }
      return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
      if ((this || _global$y).length === 1 && (this || _global$y).words[0] === 0) {
        (this || _global$y).negative = 0;
      }
      return this || _global$y;
    };
    BN.prototype.inspect = function inspect3() {
      return ((this || _global$y).red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    var zeros = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"];
    var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
    var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
    BN.prototype.toString = function toString3(base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;
      var out;
      if (base === 16 || base === "hex") {
        out = "";
        var off2 = 0;
        var carry = 0;
        for (var i8 = 0; i8 < (this || _global$y).length; i8++) {
          var w4 = (this || _global$y).words[i8];
          var word = ((w4 << off2 | carry) & 16777215).toString(16);
          carry = w4 >>> 24 - off2 & 16777215;
          if (carry !== 0 || i8 !== (this || _global$y).length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }
          off2 += 2;
          if (off2 >= 26) {
            off2 -= 26;
            i8--;
          }
        }
        if (carry !== 0) {
          out = carry.toString(16) + out;
        }
        while (out.length % padding !== 0) {
          out = "0" + out;
        }
        if ((this || _global$y).negative !== 0) {
          out = "-" + out;
        }
        return out;
      }
      if (base === (base | 0) && base >= 2 && base <= 36) {
        var groupSize = groupSizes[base];
        var groupBase = groupBases[base];
        out = "";
        var c8 = this.clone();
        c8.negative = 0;
        while (!c8.isZero()) {
          var r9 = c8.modn(groupBase).toString(base);
          c8 = c8.idivn(groupBase);
          if (!c8.isZero()) {
            out = zeros[groupSize - r9.length] + r9 + out;
          } else {
            out = r9 + out;
          }
        }
        if (this.isZero()) {
          out = "0" + out;
        }
        while (out.length % padding !== 0) {
          out = "0" + out;
        }
        if ((this || _global$y).negative !== 0) {
          out = "-" + out;
        }
        return out;
      }
      assert2(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
      var ret = (this || _global$y).words[0];
      if ((this || _global$y).length === 2) {
        ret += (this || _global$y).words[1] * 67108864;
      } else if ((this || _global$y).length === 3 && (this || _global$y).words[2] === 1) {
        ret += 4503599627370496 + (this || _global$y).words[1] * 67108864;
      } else if ((this || _global$y).length > 2) {
        assert2(false, "Number can only safely store up to 53 bits");
      }
      return (this || _global$y).negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON2() {
      return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
      assert2(typeof Buffer3 !== "undefined");
      return this.toArrayLike(Buffer3, endian, length);
    };
    BN.prototype.toArray = function toArray2(endian, length) {
      return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert2(byteLength <= reqLength, "byte array longer than desired length");
      assert2(reqLength > 0, "Requested array length <= 0");
      this.strip();
      var littleEndian = endian === "le";
      var res = new ArrayType(reqLength);
      var b5, i8;
      var q3 = this.clone();
      if (!littleEndian) {
        for (i8 = 0; i8 < reqLength - byteLength; i8++) {
          res[i8] = 0;
        }
        for (i8 = 0; !q3.isZero(); i8++) {
          b5 = q3.andln(255);
          q3.iushrn(8);
          res[reqLength - i8 - 1] = b5;
        }
      } else {
        for (i8 = 0; !q3.isZero(); i8++) {
          b5 = q3.andln(255);
          q3.iushrn(8);
          res[i8] = b5;
        }
        for (; i8 < reqLength; i8++) {
          res[i8] = 0;
        }
      }
      return res;
    };
    if (Math.clz32) {
      BN.prototype._countBits = function _countBits(w4) {
        return 32 - Math.clz32(w4);
      };
    } else {
      BN.prototype._countBits = function _countBits(w4) {
        var t8 = w4;
        var r9 = 0;
        if (t8 >= 4096) {
          r9 += 13;
          t8 >>>= 13;
        }
        if (t8 >= 64) {
          r9 += 7;
          t8 >>>= 7;
        }
        if (t8 >= 8) {
          r9 += 4;
          t8 >>>= 4;
        }
        if (t8 >= 2) {
          r9 += 2;
          t8 >>>= 2;
        }
        return r9 + t8;
      };
    }
    BN.prototype._zeroBits = function _zeroBits(w4) {
      if (w4 === 0)
        return 26;
      var t8 = w4;
      var r9 = 0;
      if ((t8 & 8191) === 0) {
        r9 += 13;
        t8 >>>= 13;
      }
      if ((t8 & 127) === 0) {
        r9 += 7;
        t8 >>>= 7;
      }
      if ((t8 & 15) === 0) {
        r9 += 4;
        t8 >>>= 4;
      }
      if ((t8 & 3) === 0) {
        r9 += 2;
        t8 >>>= 2;
      }
      if ((t8 & 1) === 0) {
        r9++;
      }
      return r9;
    };
    BN.prototype.bitLength = function bitLength() {
      var w4 = (this || _global$y).words[(this || _global$y).length - 1];
      var hi = this._countBits(w4);
      return ((this || _global$y).length - 1) * 26 + hi;
    };
    function toBitArray(num) {
      var w4 = new Array(num.bitLength());
      for (var bit = 0; bit < w4.length; bit++) {
        var off2 = bit / 26 | 0;
        var wbit = bit % 26;
        w4[bit] = (num.words[off2] & 1 << wbit) >>> wbit;
      }
      return w4;
    }
    BN.prototype.zeroBits = function zeroBits() {
      if (this.isZero())
        return 0;
      var r9 = 0;
      for (var i8 = 0; i8 < (this || _global$y).length; i8++) {
        var b5 = this._zeroBits((this || _global$y).words[i8]);
        r9 += b5;
        if (b5 !== 26)
          break;
      }
      return r9;
    };
    BN.prototype.byteLength = function byteLength() {
      return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
      if ((this || _global$y).negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }
      return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }
      return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
      return (this || _global$y).negative !== 0;
    };
    BN.prototype.neg = function neg() {
      return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
      if (!this.isZero()) {
        (this || _global$y).negative ^= 1;
      }
      return this || _global$y;
    };
    BN.prototype.iuor = function iuor(num) {
      while ((this || _global$y).length < num.length) {
        (this || _global$y).words[(this || _global$y).length++] = 0;
      }
      for (var i8 = 0; i8 < num.length; i8++) {
        (this || _global$y).words[i8] = (this || _global$y).words[i8] | num.words[i8];
      }
      return this.strip();
    };
    BN.prototype.ior = function ior(num) {
      assert2(((this || _global$y).negative | num.negative) === 0);
      return this.iuor(num);
    };
    BN.prototype.or = function or(num) {
      if ((this || _global$y).length > num.length)
        return this.clone().ior(num);
      return num.clone().ior(this || _global$y);
    };
    BN.prototype.uor = function uor(num) {
      if ((this || _global$y).length > num.length)
        return this.clone().iuor(num);
      return num.clone().iuor(this || _global$y);
    };
    BN.prototype.iuand = function iuand(num) {
      var b5;
      if ((this || _global$y).length > num.length) {
        b5 = num;
      } else {
        b5 = this || _global$y;
      }
      for (var i8 = 0; i8 < b5.length; i8++) {
        (this || _global$y).words[i8] = (this || _global$y).words[i8] & num.words[i8];
      }
      (this || _global$y).length = b5.length;
      return this.strip();
    };
    BN.prototype.iand = function iand(num) {
      assert2(((this || _global$y).negative | num.negative) === 0);
      return this.iuand(num);
    };
    BN.prototype.and = function and(num) {
      if ((this || _global$y).length > num.length)
        return this.clone().iand(num);
      return num.clone().iand(this || _global$y);
    };
    BN.prototype.uand = function uand(num) {
      if ((this || _global$y).length > num.length)
        return this.clone().iuand(num);
      return num.clone().iuand(this || _global$y);
    };
    BN.prototype.iuxor = function iuxor(num) {
      var a8;
      var b5;
      if ((this || _global$y).length > num.length) {
        a8 = this || _global$y;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$y;
      }
      for (var i8 = 0; i8 < b5.length; i8++) {
        (this || _global$y).words[i8] = a8.words[i8] ^ b5.words[i8];
      }
      if ((this || _global$y) !== a8) {
        for (; i8 < a8.length; i8++) {
          (this || _global$y).words[i8] = a8.words[i8];
        }
      }
      (this || _global$y).length = a8.length;
      return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
      assert2(((this || _global$y).negative | num.negative) === 0);
      return this.iuxor(num);
    };
    BN.prototype.xor = function xor(num) {
      if ((this || _global$y).length > num.length)
        return this.clone().ixor(num);
      return num.clone().ixor(this || _global$y);
    };
    BN.prototype.uxor = function uxor(num) {
      if ((this || _global$y).length > num.length)
        return this.clone().iuxor(num);
      return num.clone().iuxor(this || _global$y);
    };
    BN.prototype.inotn = function inotn(width) {
      assert2(typeof width === "number" && width >= 0);
      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;
      this._expand(bytesNeeded);
      if (bitsLeft > 0) {
        bytesNeeded--;
      }
      for (var i8 = 0; i8 < bytesNeeded; i8++) {
        (this || _global$y).words[i8] = ~(this || _global$y).words[i8] & 67108863;
      }
      if (bitsLeft > 0) {
        (this || _global$y).words[i8] = ~(this || _global$y).words[i8] & 67108863 >> 26 - bitsLeft;
      }
      return this.strip();
    };
    BN.prototype.notn = function notn(width) {
      return this.clone().inotn(width);
    };
    BN.prototype.setn = function setn(bit, val) {
      assert2(typeof bit === "number" && bit >= 0);
      var off2 = bit / 26 | 0;
      var wbit = bit % 26;
      this._expand(off2 + 1);
      if (val) {
        (this || _global$y).words[off2] = (this || _global$y).words[off2] | 1 << wbit;
      } else {
        (this || _global$y).words[off2] = (this || _global$y).words[off2] & ~(1 << wbit);
      }
      return this.strip();
    };
    BN.prototype.iadd = function iadd(num) {
      var r9;
      if ((this || _global$y).negative !== 0 && num.negative === 0) {
        (this || _global$y).negative = 0;
        r9 = this.isub(num);
        (this || _global$y).negative ^= 1;
        return this._normSign();
      } else if ((this || _global$y).negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r9 = this.isub(num);
        num.negative = 1;
        return r9._normSign();
      }
      var a8, b5;
      if ((this || _global$y).length > num.length) {
        a8 = this || _global$y;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$y;
      }
      var carry = 0;
      for (var i8 = 0; i8 < b5.length; i8++) {
        r9 = (a8.words[i8] | 0) + (b5.words[i8] | 0) + carry;
        (this || _global$y).words[i8] = r9 & 67108863;
        carry = r9 >>> 26;
      }
      for (; carry !== 0 && i8 < a8.length; i8++) {
        r9 = (a8.words[i8] | 0) + carry;
        (this || _global$y).words[i8] = r9 & 67108863;
        carry = r9 >>> 26;
      }
      (this || _global$y).length = a8.length;
      if (carry !== 0) {
        (this || _global$y).words[(this || _global$y).length] = carry;
        (this || _global$y).length++;
      } else if (a8 !== (this || _global$y)) {
        for (; i8 < a8.length; i8++) {
          (this || _global$y).words[i8] = a8.words[i8];
        }
      }
      return this || _global$y;
    };
    BN.prototype.add = function add(num) {
      var res;
      if (num.negative !== 0 && (this || _global$y).negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && (this || _global$y).negative !== 0) {
        (this || _global$y).negative = 0;
        res = num.sub(this || _global$y);
        (this || _global$y).negative = 1;
        return res;
      }
      if ((this || _global$y).length > num.length)
        return this.clone().iadd(num);
      return num.clone().iadd(this || _global$y);
    };
    BN.prototype.isub = function isub(num) {
      if (num.negative !== 0) {
        num.negative = 0;
        var r9 = this.iadd(num);
        num.negative = 1;
        return r9._normSign();
      } else if ((this || _global$y).negative !== 0) {
        (this || _global$y).negative = 0;
        this.iadd(num);
        (this || _global$y).negative = 1;
        return this._normSign();
      }
      var cmp = this.cmp(num);
      if (cmp === 0) {
        (this || _global$y).negative = 0;
        (this || _global$y).length = 1;
        (this || _global$y).words[0] = 0;
        return this || _global$y;
      }
      var a8, b5;
      if (cmp > 0) {
        a8 = this || _global$y;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$y;
      }
      var carry = 0;
      for (var i8 = 0; i8 < b5.length; i8++) {
        r9 = (a8.words[i8] | 0) - (b5.words[i8] | 0) + carry;
        carry = r9 >> 26;
        (this || _global$y).words[i8] = r9 & 67108863;
      }
      for (; carry !== 0 && i8 < a8.length; i8++) {
        r9 = (a8.words[i8] | 0) + carry;
        carry = r9 >> 26;
        (this || _global$y).words[i8] = r9 & 67108863;
      }
      if (carry === 0 && i8 < a8.length && a8 !== (this || _global$y)) {
        for (; i8 < a8.length; i8++) {
          (this || _global$y).words[i8] = a8.words[i8];
        }
      }
      (this || _global$y).length = Math.max((this || _global$y).length, i8);
      if (a8 !== (this || _global$y)) {
        (this || _global$y).negative = 1;
      }
      return this.strip();
    };
    BN.prototype.sub = function sub(num) {
      return this.clone().isub(num);
    };
    function smallMulTo(self2, num, out) {
      out.negative = num.negative ^ self2.negative;
      var len = self2.length + num.length | 0;
      out.length = len;
      len = len - 1 | 0;
      var a8 = self2.words[0] | 0;
      var b5 = num.words[0] | 0;
      var r9 = a8 * b5;
      var lo = r9 & 67108863;
      var carry = r9 / 67108864 | 0;
      out.words[0] = lo;
      for (var k4 = 1; k4 < len; k4++) {
        var ncarry = carry >>> 26;
        var rword = carry & 67108863;
        var maxJ = Math.min(k4, num.length - 1);
        for (var j4 = Math.max(0, k4 - self2.length + 1); j4 <= maxJ; j4++) {
          var i8 = k4 - j4 | 0;
          a8 = self2.words[i8] | 0;
          b5 = num.words[j4] | 0;
          r9 = a8 * b5 + rword;
          ncarry += r9 / 67108864 | 0;
          rword = r9 & 67108863;
        }
        out.words[k4] = rword | 0;
        carry = ncarry | 0;
      }
      if (carry !== 0) {
        out.words[k4] = carry | 0;
      } else {
        out.length--;
      }
      return out.strip();
    }
    var comb10MulTo = function comb10MulTo2(self2, num, out) {
      var a8 = self2.words;
      var b5 = num.words;
      var o9 = out.words;
      var c8 = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a8[0] | 0;
      var al0 = a0 & 8191;
      var ah0 = a0 >>> 13;
      var a1 = a8[1] | 0;
      var al1 = a1 & 8191;
      var ah1 = a1 >>> 13;
      var a22 = a8[2] | 0;
      var al2 = a22 & 8191;
      var ah2 = a22 >>> 13;
      var a32 = a8[3] | 0;
      var al3 = a32 & 8191;
      var ah3 = a32 >>> 13;
      var a42 = a8[4] | 0;
      var al4 = a42 & 8191;
      var ah4 = a42 >>> 13;
      var a52 = a8[5] | 0;
      var al5 = a52 & 8191;
      var ah5 = a52 >>> 13;
      var a62 = a8[6] | 0;
      var al6 = a62 & 8191;
      var ah6 = a62 >>> 13;
      var a72 = a8[7] | 0;
      var al7 = a72 & 8191;
      var ah7 = a72 >>> 13;
      var a82 = a8[8] | 0;
      var al8 = a82 & 8191;
      var ah8 = a82 >>> 13;
      var a9 = a8[9] | 0;
      var al9 = a9 & 8191;
      var ah9 = a9 >>> 13;
      var b0 = b5[0] | 0;
      var bl0 = b0 & 8191;
      var bh0 = b0 >>> 13;
      var b1 = b5[1] | 0;
      var bl1 = b1 & 8191;
      var bh1 = b1 >>> 13;
      var b22 = b5[2] | 0;
      var bl2 = b22 & 8191;
      var bh2 = b22 >>> 13;
      var b32 = b5[3] | 0;
      var bl3 = b32 & 8191;
      var bh3 = b32 >>> 13;
      var b42 = b5[4] | 0;
      var bl4 = b42 & 8191;
      var bh4 = b42 >>> 13;
      var b52 = b5[5] | 0;
      var bl5 = b52 & 8191;
      var bh5 = b52 >>> 13;
      var b6 = b5[6] | 0;
      var bl6 = b6 & 8191;
      var bh6 = b6 >>> 13;
      var b7 = b5[7] | 0;
      var bl7 = b7 & 8191;
      var bh7 = b7 >>> 13;
      var b8 = b5[8] | 0;
      var bl8 = b8 & 8191;
      var bh8 = b8 >>> 13;
      var b9 = b5[9] | 0;
      var bl9 = b9 & 8191;
      var bh9 = b9 >>> 13;
      out.negative = self2.negative ^ num.negative;
      out.length = 19;
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = mid + Math.imul(ah0, bl0) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
      w0 &= 67108863;
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = mid + Math.imul(ah1, bl0) | 0;
      hi = Math.imul(ah1, bh0);
      lo = lo + Math.imul(al0, bl1) | 0;
      mid = mid + Math.imul(al0, bh1) | 0;
      mid = mid + Math.imul(ah0, bl1) | 0;
      hi = hi + Math.imul(ah0, bh1) | 0;
      var w1 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
      w1 &= 67108863;
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = mid + Math.imul(ah2, bl0) | 0;
      hi = Math.imul(ah2, bh0);
      lo = lo + Math.imul(al1, bl1) | 0;
      mid = mid + Math.imul(al1, bh1) | 0;
      mid = mid + Math.imul(ah1, bl1) | 0;
      hi = hi + Math.imul(ah1, bh1) | 0;
      lo = lo + Math.imul(al0, bl2) | 0;
      mid = mid + Math.imul(al0, bh2) | 0;
      mid = mid + Math.imul(ah0, bl2) | 0;
      hi = hi + Math.imul(ah0, bh2) | 0;
      var w22 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w22 >>> 26) | 0;
      w22 &= 67108863;
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = mid + Math.imul(ah3, bl0) | 0;
      hi = Math.imul(ah3, bh0);
      lo = lo + Math.imul(al2, bl1) | 0;
      mid = mid + Math.imul(al2, bh1) | 0;
      mid = mid + Math.imul(ah2, bl1) | 0;
      hi = hi + Math.imul(ah2, bh1) | 0;
      lo = lo + Math.imul(al1, bl2) | 0;
      mid = mid + Math.imul(al1, bh2) | 0;
      mid = mid + Math.imul(ah1, bl2) | 0;
      hi = hi + Math.imul(ah1, bh2) | 0;
      lo = lo + Math.imul(al0, bl3) | 0;
      mid = mid + Math.imul(al0, bh3) | 0;
      mid = mid + Math.imul(ah0, bl3) | 0;
      hi = hi + Math.imul(ah0, bh3) | 0;
      var w32 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w32 >>> 26) | 0;
      w32 &= 67108863;
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = mid + Math.imul(ah4, bl0) | 0;
      hi = Math.imul(ah4, bh0);
      lo = lo + Math.imul(al3, bl1) | 0;
      mid = mid + Math.imul(al3, bh1) | 0;
      mid = mid + Math.imul(ah3, bl1) | 0;
      hi = hi + Math.imul(ah3, bh1) | 0;
      lo = lo + Math.imul(al2, bl2) | 0;
      mid = mid + Math.imul(al2, bh2) | 0;
      mid = mid + Math.imul(ah2, bl2) | 0;
      hi = hi + Math.imul(ah2, bh2) | 0;
      lo = lo + Math.imul(al1, bl3) | 0;
      mid = mid + Math.imul(al1, bh3) | 0;
      mid = mid + Math.imul(ah1, bl3) | 0;
      hi = hi + Math.imul(ah1, bh3) | 0;
      lo = lo + Math.imul(al0, bl4) | 0;
      mid = mid + Math.imul(al0, bh4) | 0;
      mid = mid + Math.imul(ah0, bl4) | 0;
      hi = hi + Math.imul(ah0, bh4) | 0;
      var w4 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
      w4 &= 67108863;
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = mid + Math.imul(ah5, bl0) | 0;
      hi = Math.imul(ah5, bh0);
      lo = lo + Math.imul(al4, bl1) | 0;
      mid = mid + Math.imul(al4, bh1) | 0;
      mid = mid + Math.imul(ah4, bl1) | 0;
      hi = hi + Math.imul(ah4, bh1) | 0;
      lo = lo + Math.imul(al3, bl2) | 0;
      mid = mid + Math.imul(al3, bh2) | 0;
      mid = mid + Math.imul(ah3, bl2) | 0;
      hi = hi + Math.imul(ah3, bh2) | 0;
      lo = lo + Math.imul(al2, bl3) | 0;
      mid = mid + Math.imul(al2, bh3) | 0;
      mid = mid + Math.imul(ah2, bl3) | 0;
      hi = hi + Math.imul(ah2, bh3) | 0;
      lo = lo + Math.imul(al1, bl4) | 0;
      mid = mid + Math.imul(al1, bh4) | 0;
      mid = mid + Math.imul(ah1, bl4) | 0;
      hi = hi + Math.imul(ah1, bh4) | 0;
      lo = lo + Math.imul(al0, bl5) | 0;
      mid = mid + Math.imul(al0, bh5) | 0;
      mid = mid + Math.imul(ah0, bl5) | 0;
      hi = hi + Math.imul(ah0, bh5) | 0;
      var w5 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
      w5 &= 67108863;
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = mid + Math.imul(ah6, bl0) | 0;
      hi = Math.imul(ah6, bh0);
      lo = lo + Math.imul(al5, bl1) | 0;
      mid = mid + Math.imul(al5, bh1) | 0;
      mid = mid + Math.imul(ah5, bl1) | 0;
      hi = hi + Math.imul(ah5, bh1) | 0;
      lo = lo + Math.imul(al4, bl2) | 0;
      mid = mid + Math.imul(al4, bh2) | 0;
      mid = mid + Math.imul(ah4, bl2) | 0;
      hi = hi + Math.imul(ah4, bh2) | 0;
      lo = lo + Math.imul(al3, bl3) | 0;
      mid = mid + Math.imul(al3, bh3) | 0;
      mid = mid + Math.imul(ah3, bl3) | 0;
      hi = hi + Math.imul(ah3, bh3) | 0;
      lo = lo + Math.imul(al2, bl4) | 0;
      mid = mid + Math.imul(al2, bh4) | 0;
      mid = mid + Math.imul(ah2, bl4) | 0;
      hi = hi + Math.imul(ah2, bh4) | 0;
      lo = lo + Math.imul(al1, bl5) | 0;
      mid = mid + Math.imul(al1, bh5) | 0;
      mid = mid + Math.imul(ah1, bl5) | 0;
      hi = hi + Math.imul(ah1, bh5) | 0;
      lo = lo + Math.imul(al0, bl6) | 0;
      mid = mid + Math.imul(al0, bh6) | 0;
      mid = mid + Math.imul(ah0, bl6) | 0;
      hi = hi + Math.imul(ah0, bh6) | 0;
      var w6 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
      w6 &= 67108863;
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = mid + Math.imul(ah7, bl0) | 0;
      hi = Math.imul(ah7, bh0);
      lo = lo + Math.imul(al6, bl1) | 0;
      mid = mid + Math.imul(al6, bh1) | 0;
      mid = mid + Math.imul(ah6, bl1) | 0;
      hi = hi + Math.imul(ah6, bh1) | 0;
      lo = lo + Math.imul(al5, bl2) | 0;
      mid = mid + Math.imul(al5, bh2) | 0;
      mid = mid + Math.imul(ah5, bl2) | 0;
      hi = hi + Math.imul(ah5, bh2) | 0;
      lo = lo + Math.imul(al4, bl3) | 0;
      mid = mid + Math.imul(al4, bh3) | 0;
      mid = mid + Math.imul(ah4, bl3) | 0;
      hi = hi + Math.imul(ah4, bh3) | 0;
      lo = lo + Math.imul(al3, bl4) | 0;
      mid = mid + Math.imul(al3, bh4) | 0;
      mid = mid + Math.imul(ah3, bl4) | 0;
      hi = hi + Math.imul(ah3, bh4) | 0;
      lo = lo + Math.imul(al2, bl5) | 0;
      mid = mid + Math.imul(al2, bh5) | 0;
      mid = mid + Math.imul(ah2, bl5) | 0;
      hi = hi + Math.imul(ah2, bh5) | 0;
      lo = lo + Math.imul(al1, bl6) | 0;
      mid = mid + Math.imul(al1, bh6) | 0;
      mid = mid + Math.imul(ah1, bl6) | 0;
      hi = hi + Math.imul(ah1, bh6) | 0;
      lo = lo + Math.imul(al0, bl7) | 0;
      mid = mid + Math.imul(al0, bh7) | 0;
      mid = mid + Math.imul(ah0, bl7) | 0;
      hi = hi + Math.imul(ah0, bh7) | 0;
      var w7 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
      w7 &= 67108863;
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = mid + Math.imul(ah8, bl0) | 0;
      hi = Math.imul(ah8, bh0);
      lo = lo + Math.imul(al7, bl1) | 0;
      mid = mid + Math.imul(al7, bh1) | 0;
      mid = mid + Math.imul(ah7, bl1) | 0;
      hi = hi + Math.imul(ah7, bh1) | 0;
      lo = lo + Math.imul(al6, bl2) | 0;
      mid = mid + Math.imul(al6, bh2) | 0;
      mid = mid + Math.imul(ah6, bl2) | 0;
      hi = hi + Math.imul(ah6, bh2) | 0;
      lo = lo + Math.imul(al5, bl3) | 0;
      mid = mid + Math.imul(al5, bh3) | 0;
      mid = mid + Math.imul(ah5, bl3) | 0;
      hi = hi + Math.imul(ah5, bh3) | 0;
      lo = lo + Math.imul(al4, bl4) | 0;
      mid = mid + Math.imul(al4, bh4) | 0;
      mid = mid + Math.imul(ah4, bl4) | 0;
      hi = hi + Math.imul(ah4, bh4) | 0;
      lo = lo + Math.imul(al3, bl5) | 0;
      mid = mid + Math.imul(al3, bh5) | 0;
      mid = mid + Math.imul(ah3, bl5) | 0;
      hi = hi + Math.imul(ah3, bh5) | 0;
      lo = lo + Math.imul(al2, bl6) | 0;
      mid = mid + Math.imul(al2, bh6) | 0;
      mid = mid + Math.imul(ah2, bl6) | 0;
      hi = hi + Math.imul(ah2, bh6) | 0;
      lo = lo + Math.imul(al1, bl7) | 0;
      mid = mid + Math.imul(al1, bh7) | 0;
      mid = mid + Math.imul(ah1, bl7) | 0;
      hi = hi + Math.imul(ah1, bh7) | 0;
      lo = lo + Math.imul(al0, bl8) | 0;
      mid = mid + Math.imul(al0, bh8) | 0;
      mid = mid + Math.imul(ah0, bl8) | 0;
      hi = hi + Math.imul(ah0, bh8) | 0;
      var w8 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
      w8 &= 67108863;
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = mid + Math.imul(ah9, bl0) | 0;
      hi = Math.imul(ah9, bh0);
      lo = lo + Math.imul(al8, bl1) | 0;
      mid = mid + Math.imul(al8, bh1) | 0;
      mid = mid + Math.imul(ah8, bl1) | 0;
      hi = hi + Math.imul(ah8, bh1) | 0;
      lo = lo + Math.imul(al7, bl2) | 0;
      mid = mid + Math.imul(al7, bh2) | 0;
      mid = mid + Math.imul(ah7, bl2) | 0;
      hi = hi + Math.imul(ah7, bh2) | 0;
      lo = lo + Math.imul(al6, bl3) | 0;
      mid = mid + Math.imul(al6, bh3) | 0;
      mid = mid + Math.imul(ah6, bl3) | 0;
      hi = hi + Math.imul(ah6, bh3) | 0;
      lo = lo + Math.imul(al5, bl4) | 0;
      mid = mid + Math.imul(al5, bh4) | 0;
      mid = mid + Math.imul(ah5, bl4) | 0;
      hi = hi + Math.imul(ah5, bh4) | 0;
      lo = lo + Math.imul(al4, bl5) | 0;
      mid = mid + Math.imul(al4, bh5) | 0;
      mid = mid + Math.imul(ah4, bl5) | 0;
      hi = hi + Math.imul(ah4, bh5) | 0;
      lo = lo + Math.imul(al3, bl6) | 0;
      mid = mid + Math.imul(al3, bh6) | 0;
      mid = mid + Math.imul(ah3, bl6) | 0;
      hi = hi + Math.imul(ah3, bh6) | 0;
      lo = lo + Math.imul(al2, bl7) | 0;
      mid = mid + Math.imul(al2, bh7) | 0;
      mid = mid + Math.imul(ah2, bl7) | 0;
      hi = hi + Math.imul(ah2, bh7) | 0;
      lo = lo + Math.imul(al1, bl8) | 0;
      mid = mid + Math.imul(al1, bh8) | 0;
      mid = mid + Math.imul(ah1, bl8) | 0;
      hi = hi + Math.imul(ah1, bh8) | 0;
      lo = lo + Math.imul(al0, bl9) | 0;
      mid = mid + Math.imul(al0, bh9) | 0;
      mid = mid + Math.imul(ah0, bl9) | 0;
      hi = hi + Math.imul(ah0, bh9) | 0;
      var w9 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
      w9 &= 67108863;
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = mid + Math.imul(ah9, bl1) | 0;
      hi = Math.imul(ah9, bh1);
      lo = lo + Math.imul(al8, bl2) | 0;
      mid = mid + Math.imul(al8, bh2) | 0;
      mid = mid + Math.imul(ah8, bl2) | 0;
      hi = hi + Math.imul(ah8, bh2) | 0;
      lo = lo + Math.imul(al7, bl3) | 0;
      mid = mid + Math.imul(al7, bh3) | 0;
      mid = mid + Math.imul(ah7, bl3) | 0;
      hi = hi + Math.imul(ah7, bh3) | 0;
      lo = lo + Math.imul(al6, bl4) | 0;
      mid = mid + Math.imul(al6, bh4) | 0;
      mid = mid + Math.imul(ah6, bl4) | 0;
      hi = hi + Math.imul(ah6, bh4) | 0;
      lo = lo + Math.imul(al5, bl5) | 0;
      mid = mid + Math.imul(al5, bh5) | 0;
      mid = mid + Math.imul(ah5, bl5) | 0;
      hi = hi + Math.imul(ah5, bh5) | 0;
      lo = lo + Math.imul(al4, bl6) | 0;
      mid = mid + Math.imul(al4, bh6) | 0;
      mid = mid + Math.imul(ah4, bl6) | 0;
      hi = hi + Math.imul(ah4, bh6) | 0;
      lo = lo + Math.imul(al3, bl7) | 0;
      mid = mid + Math.imul(al3, bh7) | 0;
      mid = mid + Math.imul(ah3, bl7) | 0;
      hi = hi + Math.imul(ah3, bh7) | 0;
      lo = lo + Math.imul(al2, bl8) | 0;
      mid = mid + Math.imul(al2, bh8) | 0;
      mid = mid + Math.imul(ah2, bl8) | 0;
      hi = hi + Math.imul(ah2, bh8) | 0;
      lo = lo + Math.imul(al1, bl9) | 0;
      mid = mid + Math.imul(al1, bh9) | 0;
      mid = mid + Math.imul(ah1, bl9) | 0;
      hi = hi + Math.imul(ah1, bh9) | 0;
      var w10 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
      w10 &= 67108863;
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = mid + Math.imul(ah9, bl2) | 0;
      hi = Math.imul(ah9, bh2);
      lo = lo + Math.imul(al8, bl3) | 0;
      mid = mid + Math.imul(al8, bh3) | 0;
      mid = mid + Math.imul(ah8, bl3) | 0;
      hi = hi + Math.imul(ah8, bh3) | 0;
      lo = lo + Math.imul(al7, bl4) | 0;
      mid = mid + Math.imul(al7, bh4) | 0;
      mid = mid + Math.imul(ah7, bl4) | 0;
      hi = hi + Math.imul(ah7, bh4) | 0;
      lo = lo + Math.imul(al6, bl5) | 0;
      mid = mid + Math.imul(al6, bh5) | 0;
      mid = mid + Math.imul(ah6, bl5) | 0;
      hi = hi + Math.imul(ah6, bh5) | 0;
      lo = lo + Math.imul(al5, bl6) | 0;
      mid = mid + Math.imul(al5, bh6) | 0;
      mid = mid + Math.imul(ah5, bl6) | 0;
      hi = hi + Math.imul(ah5, bh6) | 0;
      lo = lo + Math.imul(al4, bl7) | 0;
      mid = mid + Math.imul(al4, bh7) | 0;
      mid = mid + Math.imul(ah4, bl7) | 0;
      hi = hi + Math.imul(ah4, bh7) | 0;
      lo = lo + Math.imul(al3, bl8) | 0;
      mid = mid + Math.imul(al3, bh8) | 0;
      mid = mid + Math.imul(ah3, bl8) | 0;
      hi = hi + Math.imul(ah3, bh8) | 0;
      lo = lo + Math.imul(al2, bl9) | 0;
      mid = mid + Math.imul(al2, bh9) | 0;
      mid = mid + Math.imul(ah2, bl9) | 0;
      hi = hi + Math.imul(ah2, bh9) | 0;
      var w11 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
      w11 &= 67108863;
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = mid + Math.imul(ah9, bl3) | 0;
      hi = Math.imul(ah9, bh3);
      lo = lo + Math.imul(al8, bl4) | 0;
      mid = mid + Math.imul(al8, bh4) | 0;
      mid = mid + Math.imul(ah8, bl4) | 0;
      hi = hi + Math.imul(ah8, bh4) | 0;
      lo = lo + Math.imul(al7, bl5) | 0;
      mid = mid + Math.imul(al7, bh5) | 0;
      mid = mid + Math.imul(ah7, bl5) | 0;
      hi = hi + Math.imul(ah7, bh5) | 0;
      lo = lo + Math.imul(al6, bl6) | 0;
      mid = mid + Math.imul(al6, bh6) | 0;
      mid = mid + Math.imul(ah6, bl6) | 0;
      hi = hi + Math.imul(ah6, bh6) | 0;
      lo = lo + Math.imul(al5, bl7) | 0;
      mid = mid + Math.imul(al5, bh7) | 0;
      mid = mid + Math.imul(ah5, bl7) | 0;
      hi = hi + Math.imul(ah5, bh7) | 0;
      lo = lo + Math.imul(al4, bl8) | 0;
      mid = mid + Math.imul(al4, bh8) | 0;
      mid = mid + Math.imul(ah4, bl8) | 0;
      hi = hi + Math.imul(ah4, bh8) | 0;
      lo = lo + Math.imul(al3, bl9) | 0;
      mid = mid + Math.imul(al3, bh9) | 0;
      mid = mid + Math.imul(ah3, bl9) | 0;
      hi = hi + Math.imul(ah3, bh9) | 0;
      var w12 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
      w12 &= 67108863;
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = mid + Math.imul(ah9, bl4) | 0;
      hi = Math.imul(ah9, bh4);
      lo = lo + Math.imul(al8, bl5) | 0;
      mid = mid + Math.imul(al8, bh5) | 0;
      mid = mid + Math.imul(ah8, bl5) | 0;
      hi = hi + Math.imul(ah8, bh5) | 0;
      lo = lo + Math.imul(al7, bl6) | 0;
      mid = mid + Math.imul(al7, bh6) | 0;
      mid = mid + Math.imul(ah7, bl6) | 0;
      hi = hi + Math.imul(ah7, bh6) | 0;
      lo = lo + Math.imul(al6, bl7) | 0;
      mid = mid + Math.imul(al6, bh7) | 0;
      mid = mid + Math.imul(ah6, bl7) | 0;
      hi = hi + Math.imul(ah6, bh7) | 0;
      lo = lo + Math.imul(al5, bl8) | 0;
      mid = mid + Math.imul(al5, bh8) | 0;
      mid = mid + Math.imul(ah5, bl8) | 0;
      hi = hi + Math.imul(ah5, bh8) | 0;
      lo = lo + Math.imul(al4, bl9) | 0;
      mid = mid + Math.imul(al4, bh9) | 0;
      mid = mid + Math.imul(ah4, bl9) | 0;
      hi = hi + Math.imul(ah4, bh9) | 0;
      var w13 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
      w13 &= 67108863;
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = mid + Math.imul(ah9, bl5) | 0;
      hi = Math.imul(ah9, bh5);
      lo = lo + Math.imul(al8, bl6) | 0;
      mid = mid + Math.imul(al8, bh6) | 0;
      mid = mid + Math.imul(ah8, bl6) | 0;
      hi = hi + Math.imul(ah8, bh6) | 0;
      lo = lo + Math.imul(al7, bl7) | 0;
      mid = mid + Math.imul(al7, bh7) | 0;
      mid = mid + Math.imul(ah7, bl7) | 0;
      hi = hi + Math.imul(ah7, bh7) | 0;
      lo = lo + Math.imul(al6, bl8) | 0;
      mid = mid + Math.imul(al6, bh8) | 0;
      mid = mid + Math.imul(ah6, bl8) | 0;
      hi = hi + Math.imul(ah6, bh8) | 0;
      lo = lo + Math.imul(al5, bl9) | 0;
      mid = mid + Math.imul(al5, bh9) | 0;
      mid = mid + Math.imul(ah5, bl9) | 0;
      hi = hi + Math.imul(ah5, bh9) | 0;
      var w14 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
      w14 &= 67108863;
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = mid + Math.imul(ah9, bl6) | 0;
      hi = Math.imul(ah9, bh6);
      lo = lo + Math.imul(al8, bl7) | 0;
      mid = mid + Math.imul(al8, bh7) | 0;
      mid = mid + Math.imul(ah8, bl7) | 0;
      hi = hi + Math.imul(ah8, bh7) | 0;
      lo = lo + Math.imul(al7, bl8) | 0;
      mid = mid + Math.imul(al7, bh8) | 0;
      mid = mid + Math.imul(ah7, bl8) | 0;
      hi = hi + Math.imul(ah7, bh8) | 0;
      lo = lo + Math.imul(al6, bl9) | 0;
      mid = mid + Math.imul(al6, bh9) | 0;
      mid = mid + Math.imul(ah6, bl9) | 0;
      hi = hi + Math.imul(ah6, bh9) | 0;
      var w15 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
      w15 &= 67108863;
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = mid + Math.imul(ah9, bl7) | 0;
      hi = Math.imul(ah9, bh7);
      lo = lo + Math.imul(al8, bl8) | 0;
      mid = mid + Math.imul(al8, bh8) | 0;
      mid = mid + Math.imul(ah8, bl8) | 0;
      hi = hi + Math.imul(ah8, bh8) | 0;
      lo = lo + Math.imul(al7, bl9) | 0;
      mid = mid + Math.imul(al7, bh9) | 0;
      mid = mid + Math.imul(ah7, bl9) | 0;
      hi = hi + Math.imul(ah7, bh9) | 0;
      var w16 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
      w16 &= 67108863;
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = mid + Math.imul(ah9, bl8) | 0;
      hi = Math.imul(ah9, bh8);
      lo = lo + Math.imul(al8, bl9) | 0;
      mid = mid + Math.imul(al8, bh9) | 0;
      mid = mid + Math.imul(ah8, bl9) | 0;
      hi = hi + Math.imul(ah8, bh9) | 0;
      var w17 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
      w17 &= 67108863;
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = mid + Math.imul(ah9, bl9) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
      w18 &= 67108863;
      o9[0] = w0;
      o9[1] = w1;
      o9[2] = w22;
      o9[3] = w32;
      o9[4] = w4;
      o9[5] = w5;
      o9[6] = w6;
      o9[7] = w7;
      o9[8] = w8;
      o9[9] = w9;
      o9[10] = w10;
      o9[11] = w11;
      o9[12] = w12;
      o9[13] = w13;
      o9[14] = w14;
      o9[15] = w15;
      o9[16] = w16;
      o9[17] = w17;
      o9[18] = w18;
      if (c8 !== 0) {
        o9[19] = c8;
        out.length++;
      }
      return out;
    };
    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }
    function bigMulTo(self2, num, out) {
      out.negative = num.negative ^ self2.negative;
      out.length = self2.length + num.length;
      var carry = 0;
      var hncarry = 0;
      for (var k4 = 0; k4 < out.length - 1; k4++) {
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 67108863;
        var maxJ = Math.min(k4, num.length - 1);
        for (var j4 = Math.max(0, k4 - self2.length + 1); j4 <= maxJ; j4++) {
          var i8 = k4 - j4;
          var a8 = self2.words[i8] | 0;
          var b5 = num.words[j4] | 0;
          var r9 = a8 * b5;
          var lo = r9 & 67108863;
          ncarry = ncarry + (r9 / 67108864 | 0) | 0;
          lo = lo + rword | 0;
          rword = lo & 67108863;
          ncarry = ncarry + (lo >>> 26) | 0;
          hncarry += ncarry >>> 26;
          ncarry &= 67108863;
        }
        out.words[k4] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k4] = carry;
      } else {
        out.length--;
      }
      return out.strip();
    }
    function jumboMulTo(self2, num, out) {
      var fftm = new FFTM();
      return fftm.mulp(self2, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
      var res;
      var len = (this || _global$y).length + num.length;
      if ((this || _global$y).length === 10 && num.length === 10) {
        res = comb10MulTo(this || _global$y, num, out);
      } else if (len < 63) {
        res = smallMulTo(this || _global$y, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this || _global$y, num, out);
      } else {
        res = jumboMulTo(this || _global$y, num, out);
      }
      return res;
    };
    function FFTM(x4, y6) {
      (this || _global$y).x = x4;
      (this || _global$y).y = y6;
    }
    FFTM.prototype.makeRBT = function makeRBT(N4) {
      var t8 = new Array(N4);
      var l8 = BN.prototype._countBits(N4) - 1;
      for (var i8 = 0; i8 < N4; i8++) {
        t8[i8] = this.revBin(i8, l8, N4);
      }
      return t8;
    };
    FFTM.prototype.revBin = function revBin(x4, l8, N4) {
      if (x4 === 0 || x4 === N4 - 1)
        return x4;
      var rb = 0;
      for (var i8 = 0; i8 < l8; i8++) {
        rb |= (x4 & 1) << l8 - i8 - 1;
        x4 >>= 1;
      }
      return rb;
    };
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N4) {
      for (var i8 = 0; i8 < N4; i8++) {
        rtws[i8] = rws[rbt[i8]];
        itws[i8] = iws[rbt[i8]];
      }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N4, rbt) {
      this.permute(rbt, rws, iws, rtws, itws, N4);
      for (var s7 = 1; s7 < N4; s7 <<= 1) {
        var l8 = s7 << 1;
        var rtwdf = Math.cos(2 * Math.PI / l8);
        var itwdf = Math.sin(2 * Math.PI / l8);
        for (var p8 = 0; p8 < N4; p8 += l8) {
          var rtwdf_ = rtwdf;
          var itwdf_ = itwdf;
          for (var j4 = 0; j4 < s7; j4++) {
            var re3 = rtws[p8 + j4];
            var ie2 = itws[p8 + j4];
            var ro = rtws[p8 + j4 + s7];
            var io = itws[p8 + j4 + s7];
            var rx = rtwdf_ * ro - itwdf_ * io;
            io = rtwdf_ * io + itwdf_ * ro;
            ro = rx;
            rtws[p8 + j4] = re3 + ro;
            itws[p8 + j4] = ie2 + io;
            rtws[p8 + j4 + s7] = re3 - ro;
            itws[p8 + j4 + s7] = ie2 - io;
            if (j4 !== l8) {
              rx = rtwdf * rtwdf_ - itwdf * itwdf_;
              itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
              rtwdf_ = rx;
            }
          }
        }
      }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n9, m6) {
      var N4 = Math.max(m6, n9) | 1;
      var odd = N4 & 1;
      var i8 = 0;
      for (N4 = N4 / 2 | 0; N4; N4 = N4 >>> 1) {
        i8++;
      }
      return 1 << i8 + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N4) {
      if (N4 <= 1)
        return;
      for (var i8 = 0; i8 < N4 / 2; i8++) {
        var t8 = rws[i8];
        rws[i8] = rws[N4 - i8 - 1];
        rws[N4 - i8 - 1] = t8;
        t8 = iws[i8];
        iws[i8] = -iws[N4 - i8 - 1];
        iws[N4 - i8 - 1] = -t8;
      }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N4) {
      var carry = 0;
      for (var i8 = 0; i8 < N4 / 2; i8++) {
        var w4 = Math.round(ws[2 * i8 + 1] / N4) * 8192 + Math.round(ws[2 * i8] / N4) + carry;
        ws[i8] = w4 & 67108863;
        if (w4 < 67108864) {
          carry = 0;
        } else {
          carry = w4 / 67108864 | 0;
        }
      }
      return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N4) {
      var carry = 0;
      for (var i8 = 0; i8 < len; i8++) {
        carry = carry + (ws[i8] | 0);
        rws[2 * i8] = carry & 8191;
        carry = carry >>> 13;
        rws[2 * i8 + 1] = carry & 8191;
        carry = carry >>> 13;
      }
      for (i8 = 2 * len; i8 < N4; ++i8) {
        rws[i8] = 0;
      }
      assert2(carry === 0);
      assert2((carry & ~8191) === 0);
    };
    FFTM.prototype.stub = function stub(N4) {
      var ph = new Array(N4);
      for (var i8 = 0; i8 < N4; i8++) {
        ph[i8] = 0;
      }
      return ph;
    };
    FFTM.prototype.mulp = function mulp(x4, y6, out) {
      var N4 = 2 * this.guessLen13b(x4.length, y6.length);
      var rbt = this.makeRBT(N4);
      var _4 = this.stub(N4);
      var rws = new Array(N4);
      var rwst = new Array(N4);
      var iwst = new Array(N4);
      var nrws = new Array(N4);
      var nrwst = new Array(N4);
      var niwst = new Array(N4);
      var rmws = out.words;
      rmws.length = N4;
      this.convert13b(x4.words, x4.length, rws, N4);
      this.convert13b(y6.words, y6.length, nrws, N4);
      this.transform(rws, _4, rwst, iwst, N4, rbt);
      this.transform(nrws, _4, nrwst, niwst, N4, rbt);
      for (var i8 = 0; i8 < N4; i8++) {
        var rx = rwst[i8] * nrwst[i8] - iwst[i8] * niwst[i8];
        iwst[i8] = rwst[i8] * niwst[i8] + iwst[i8] * nrwst[i8];
        rwst[i8] = rx;
      }
      this.conjugate(rwst, iwst, N4);
      this.transform(rwst, iwst, rmws, _4, N4, rbt);
      this.conjugate(rmws, _4, N4);
      this.normalize13b(rmws, N4);
      out.negative = x4.negative ^ y6.negative;
      out.length = x4.length + y6.length;
      return out.strip();
    };
    BN.prototype.mul = function mul(num) {
      var out = new BN(null);
      out.words = new Array((this || _global$y).length + num.length);
      return this.mulTo(num, out);
    };
    BN.prototype.mulf = function mulf(num) {
      var out = new BN(null);
      out.words = new Array((this || _global$y).length + num.length);
      return jumboMulTo(this || _global$y, num, out);
    };
    BN.prototype.imul = function imul(num) {
      return this.clone().mulTo(num, this || _global$y);
    };
    BN.prototype.imuln = function imuln(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      var carry = 0;
      for (var i8 = 0; i8 < (this || _global$y).length; i8++) {
        var w4 = ((this || _global$y).words[i8] | 0) * num;
        var lo = (w4 & 67108863) + (carry & 67108863);
        carry >>= 26;
        carry += w4 / 67108864 | 0;
        carry += lo >>> 26;
        (this || _global$y).words[i8] = lo & 67108863;
      }
      if (carry !== 0) {
        (this || _global$y).words[i8] = carry;
        (this || _global$y).length++;
      }
      return this || _global$y;
    };
    BN.prototype.muln = function muln(num) {
      return this.clone().imuln(num);
    };
    BN.prototype.sqr = function sqr() {
      return this.mul(this || _global$y);
    };
    BN.prototype.isqr = function isqr() {
      return this.imul(this.clone());
    };
    BN.prototype.pow = function pow(num) {
      var w4 = toBitArray(num);
      if (w4.length === 0)
        return new BN(1);
      var res = this || _global$y;
      for (var i8 = 0; i8 < w4.length; i8++, res = res.sqr()) {
        if (w4[i8] !== 0)
          break;
      }
      if (++i8 < w4.length) {
        for (var q3 = res.sqr(); i8 < w4.length; i8++, q3 = q3.sqr()) {
          if (w4[i8] === 0)
            continue;
          res = res.mul(q3);
        }
      }
      return res;
    };
    BN.prototype.iushln = function iushln(bits) {
      assert2(typeof bits === "number" && bits >= 0);
      var r9 = bits % 26;
      var s7 = (bits - r9) / 26;
      var carryMask = 67108863 >>> 26 - r9 << 26 - r9;
      var i8;
      if (r9 !== 0) {
        var carry = 0;
        for (i8 = 0; i8 < (this || _global$y).length; i8++) {
          var newCarry = (this || _global$y).words[i8] & carryMask;
          var c8 = ((this || _global$y).words[i8] | 0) - newCarry << r9;
          (this || _global$y).words[i8] = c8 | carry;
          carry = newCarry >>> 26 - r9;
        }
        if (carry) {
          (this || _global$y).words[i8] = carry;
          (this || _global$y).length++;
        }
      }
      if (s7 !== 0) {
        for (i8 = (this || _global$y).length - 1; i8 >= 0; i8--) {
          (this || _global$y).words[i8 + s7] = (this || _global$y).words[i8];
        }
        for (i8 = 0; i8 < s7; i8++) {
          (this || _global$y).words[i8] = 0;
        }
        (this || _global$y).length += s7;
      }
      return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
      assert2((this || _global$y).negative === 0);
      return this.iushln(bits);
    };
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
      assert2(typeof bits === "number" && bits >= 0);
      var h8;
      if (hint) {
        h8 = (hint - hint % 26) / 26;
      } else {
        h8 = 0;
      }
      var r9 = bits % 26;
      var s7 = Math.min((bits - r9) / 26, (this || _global$y).length);
      var mask = 67108863 ^ 67108863 >>> r9 << r9;
      var maskedWords = extended;
      h8 -= s7;
      h8 = Math.max(0, h8);
      if (maskedWords) {
        for (var i8 = 0; i8 < s7; i8++) {
          maskedWords.words[i8] = (this || _global$y).words[i8];
        }
        maskedWords.length = s7;
      }
      if (s7 === 0)
        ;
      else if ((this || _global$y).length > s7) {
        (this || _global$y).length -= s7;
        for (i8 = 0; i8 < (this || _global$y).length; i8++) {
          (this || _global$y).words[i8] = (this || _global$y).words[i8 + s7];
        }
      } else {
        (this || _global$y).words[0] = 0;
        (this || _global$y).length = 1;
      }
      var carry = 0;
      for (i8 = (this || _global$y).length - 1; i8 >= 0 && (carry !== 0 || i8 >= h8); i8--) {
        var word = (this || _global$y).words[i8] | 0;
        (this || _global$y).words[i8] = carry << 26 - r9 | word >>> r9;
        carry = word & mask;
      }
      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }
      if ((this || _global$y).length === 0) {
        (this || _global$y).words[0] = 0;
        (this || _global$y).length = 1;
      }
      return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
      assert2((this || _global$y).negative === 0);
      return this.iushrn(bits, hint, extended);
    };
    BN.prototype.shln = function shln(bits) {
      return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
      return this.clone().iushln(bits);
    };
    BN.prototype.shrn = function shrn(bits) {
      return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
      return this.clone().iushrn(bits);
    };
    BN.prototype.testn = function testn(bit) {
      assert2(typeof bit === "number" && bit >= 0);
      var r9 = bit % 26;
      var s7 = (bit - r9) / 26;
      var q3 = 1 << r9;
      if ((this || _global$y).length <= s7)
        return false;
      var w4 = (this || _global$y).words[s7];
      return !!(w4 & q3);
    };
    BN.prototype.imaskn = function imaskn(bits) {
      assert2(typeof bits === "number" && bits >= 0);
      var r9 = bits % 26;
      var s7 = (bits - r9) / 26;
      assert2((this || _global$y).negative === 0, "imaskn works only with positive numbers");
      if ((this || _global$y).length <= s7) {
        return this || _global$y;
      }
      if (r9 !== 0) {
        s7++;
      }
      (this || _global$y).length = Math.min(s7, (this || _global$y).length);
      if (r9 !== 0) {
        var mask = 67108863 ^ 67108863 >>> r9 << r9;
        (this || _global$y).words[(this || _global$y).length - 1] &= mask;
      }
      return this.strip();
    };
    BN.prototype.maskn = function maskn(bits) {
      return this.clone().imaskn(bits);
    };
    BN.prototype.iaddn = function iaddn(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      if (num < 0)
        return this.isubn(-num);
      if ((this || _global$y).negative !== 0) {
        if ((this || _global$y).length === 1 && ((this || _global$y).words[0] | 0) < num) {
          (this || _global$y).words[0] = num - ((this || _global$y).words[0] | 0);
          (this || _global$y).negative = 0;
          return this || _global$y;
        }
        (this || _global$y).negative = 0;
        this.isubn(num);
        (this || _global$y).negative = 1;
        return this || _global$y;
      }
      return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
      (this || _global$y).words[0] += num;
      for (var i8 = 0; i8 < (this || _global$y).length && (this || _global$y).words[i8] >= 67108864; i8++) {
        (this || _global$y).words[i8] -= 67108864;
        if (i8 === (this || _global$y).length - 1) {
          (this || _global$y).words[i8 + 1] = 1;
        } else {
          (this || _global$y).words[i8 + 1]++;
        }
      }
      (this || _global$y).length = Math.max((this || _global$y).length, i8 + 1);
      return this || _global$y;
    };
    BN.prototype.isubn = function isubn(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      if (num < 0)
        return this.iaddn(-num);
      if ((this || _global$y).negative !== 0) {
        (this || _global$y).negative = 0;
        this.iaddn(num);
        (this || _global$y).negative = 1;
        return this || _global$y;
      }
      (this || _global$y).words[0] -= num;
      if ((this || _global$y).length === 1 && (this || _global$y).words[0] < 0) {
        (this || _global$y).words[0] = -(this || _global$y).words[0];
        (this || _global$y).negative = 1;
      } else {
        for (var i8 = 0; i8 < (this || _global$y).length && (this || _global$y).words[i8] < 0; i8++) {
          (this || _global$y).words[i8] += 67108864;
          (this || _global$y).words[i8 + 1] -= 1;
        }
      }
      return this.strip();
    };
    BN.prototype.addn = function addn(num) {
      return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
      return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
      (this || _global$y).negative = 0;
      return this || _global$y;
    };
    BN.prototype.abs = function abs() {
      return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
      var len = num.length + shift;
      var i8;
      this._expand(len);
      var w4;
      var carry = 0;
      for (i8 = 0; i8 < num.length; i8++) {
        w4 = ((this || _global$y).words[i8 + shift] | 0) + carry;
        var right = (num.words[i8] | 0) * mul;
        w4 -= right & 67108863;
        carry = (w4 >> 26) - (right / 67108864 | 0);
        (this || _global$y).words[i8 + shift] = w4 & 67108863;
      }
      for (; i8 < (this || _global$y).length - shift; i8++) {
        w4 = ((this || _global$y).words[i8 + shift] | 0) + carry;
        carry = w4 >> 26;
        (this || _global$y).words[i8 + shift] = w4 & 67108863;
      }
      if (carry === 0)
        return this.strip();
      assert2(carry === -1);
      carry = 0;
      for (i8 = 0; i8 < (this || _global$y).length; i8++) {
        w4 = -((this || _global$y).words[i8] | 0) + carry;
        carry = w4 >> 26;
        (this || _global$y).words[i8] = w4 & 67108863;
      }
      (this || _global$y).negative = 1;
      return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
      var shift = (this || _global$y).length - num.length;
      var a8 = this.clone();
      var b5 = num;
      var bhi = b5.words[b5.length - 1] | 0;
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b5 = b5.ushln(shift);
        a8.iushln(shift);
        bhi = b5.words[b5.length - 1] | 0;
      }
      var m6 = a8.length - b5.length;
      var q3;
      if (mode !== "mod") {
        q3 = new BN(null);
        q3.length = m6 + 1;
        q3.words = new Array(q3.length);
        for (var i8 = 0; i8 < q3.length; i8++) {
          q3.words[i8] = 0;
        }
      }
      var diff = a8.clone()._ishlnsubmul(b5, 1, m6);
      if (diff.negative === 0) {
        a8 = diff;
        if (q3) {
          q3.words[m6] = 1;
        }
      }
      for (var j4 = m6 - 1; j4 >= 0; j4--) {
        var qj = (a8.words[b5.length + j4] | 0) * 67108864 + (a8.words[b5.length + j4 - 1] | 0);
        qj = Math.min(qj / bhi | 0, 67108863);
        a8._ishlnsubmul(b5, qj, j4);
        while (a8.negative !== 0) {
          qj--;
          a8.negative = 0;
          a8._ishlnsubmul(b5, 1, j4);
          if (!a8.isZero()) {
            a8.negative ^= 1;
          }
        }
        if (q3) {
          q3.words[j4] = qj;
        }
      }
      if (q3) {
        q3.strip();
      }
      a8.strip();
      if (mode !== "div" && shift !== 0) {
        a8.iushrn(shift);
      }
      return {
        div: q3 || null,
        mod: a8
      };
    };
    BN.prototype.divmod = function divmod(num, mode, positive) {
      assert2(!num.isZero());
      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }
      var div, mod, res;
      if ((this || _global$y).negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);
        if (mode !== "mod") {
          div = res.div.neg();
        }
        if (mode !== "div") {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }
        return {
          div,
          mod
        };
      }
      if ((this || _global$y).negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);
        if (mode !== "mod") {
          div = res.div.neg();
        }
        return {
          div,
          mod: res.mod
        };
      }
      if (((this || _global$y).negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);
        if (mode !== "div") {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }
        return {
          div: res.div,
          mod
        };
      }
      if (num.length > (this || _global$y).length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this || _global$y
        };
      }
      if (num.length === 1) {
        if (mode === "div") {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }
        if (mode === "mod") {
          return {
            div: null,
            mod: new BN(this.modn(num.words[0]))
          };
        }
        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modn(num.words[0]))
        };
      }
      return this._wordDiv(num, mode);
    };
    BN.prototype.div = function div(num) {
      return this.divmod(num, "div", false).div;
    };
    BN.prototype.mod = function mod(num) {
      return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
      return this.divmod(num, "mod", true).mod;
    };
    BN.prototype.divRound = function divRound(num) {
      var dm = this.divmod(num);
      if (dm.mod.isZero())
        return dm.div;
      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
      var half = num.ushrn(1);
      var r22 = num.andln(1);
      var cmp = mod.cmp(half);
      if (cmp < 0 || r22 === 1 && cmp === 0)
        return dm.div;
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
      assert2(num <= 67108863);
      var p8 = (1 << 26) % num;
      var acc = 0;
      for (var i8 = (this || _global$y).length - 1; i8 >= 0; i8--) {
        acc = (p8 * acc + ((this || _global$y).words[i8] | 0)) % num;
      }
      return acc;
    };
    BN.prototype.idivn = function idivn(num) {
      assert2(num <= 67108863);
      var carry = 0;
      for (var i8 = (this || _global$y).length - 1; i8 >= 0; i8--) {
        var w4 = ((this || _global$y).words[i8] | 0) + carry * 67108864;
        (this || _global$y).words[i8] = w4 / num | 0;
        carry = w4 % num;
      }
      return this.strip();
    };
    BN.prototype.divn = function divn(num) {
      return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p8) {
      assert2(p8.negative === 0);
      assert2(!p8.isZero());
      var x4 = this || _global$y;
      var y6 = p8.clone();
      if (x4.negative !== 0) {
        x4 = x4.umod(p8);
      } else {
        x4 = x4.clone();
      }
      var A4 = new BN(1);
      var B4 = new BN(0);
      var C4 = new BN(0);
      var D4 = new BN(1);
      var g5 = 0;
      while (x4.isEven() && y6.isEven()) {
        x4.iushrn(1);
        y6.iushrn(1);
        ++g5;
      }
      var yp = y6.clone();
      var xp = x4.clone();
      while (!x4.isZero()) {
        for (var i8 = 0, im = 1; (x4.words[0] & im) === 0 && i8 < 26; ++i8, im <<= 1)
          ;
        if (i8 > 0) {
          x4.iushrn(i8);
          while (i8-- > 0) {
            if (A4.isOdd() || B4.isOdd()) {
              A4.iadd(yp);
              B4.isub(xp);
            }
            A4.iushrn(1);
            B4.iushrn(1);
          }
        }
        for (var j4 = 0, jm = 1; (y6.words[0] & jm) === 0 && j4 < 26; ++j4, jm <<= 1)
          ;
        if (j4 > 0) {
          y6.iushrn(j4);
          while (j4-- > 0) {
            if (C4.isOdd() || D4.isOdd()) {
              C4.iadd(yp);
              D4.isub(xp);
            }
            C4.iushrn(1);
            D4.iushrn(1);
          }
        }
        if (x4.cmp(y6) >= 0) {
          x4.isub(y6);
          A4.isub(C4);
          B4.isub(D4);
        } else {
          y6.isub(x4);
          C4.isub(A4);
          D4.isub(B4);
        }
      }
      return {
        a: C4,
        b: D4,
        gcd: y6.iushln(g5)
      };
    };
    BN.prototype._invmp = function _invmp(p8) {
      assert2(p8.negative === 0);
      assert2(!p8.isZero());
      var a8 = this || _global$y;
      var b5 = p8.clone();
      if (a8.negative !== 0) {
        a8 = a8.umod(p8);
      } else {
        a8 = a8.clone();
      }
      var x1 = new BN(1);
      var x22 = new BN(0);
      var delta = b5.clone();
      while (a8.cmpn(1) > 0 && b5.cmpn(1) > 0) {
        for (var i8 = 0, im = 1; (a8.words[0] & im) === 0 && i8 < 26; ++i8, im <<= 1)
          ;
        if (i8 > 0) {
          a8.iushrn(i8);
          while (i8-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }
            x1.iushrn(1);
          }
        }
        for (var j4 = 0, jm = 1; (b5.words[0] & jm) === 0 && j4 < 26; ++j4, jm <<= 1)
          ;
        if (j4 > 0) {
          b5.iushrn(j4);
          while (j4-- > 0) {
            if (x22.isOdd()) {
              x22.iadd(delta);
            }
            x22.iushrn(1);
          }
        }
        if (a8.cmp(b5) >= 0) {
          a8.isub(b5);
          x1.isub(x22);
        } else {
          b5.isub(a8);
          x22.isub(x1);
        }
      }
      var res;
      if (a8.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x22;
      }
      if (res.cmpn(0) < 0) {
        res.iadd(p8);
      }
      return res;
    };
    BN.prototype.gcd = function gcd(num) {
      if (this.isZero())
        return num.abs();
      if (num.isZero())
        return this.abs();
      var a8 = this.clone();
      var b5 = num.clone();
      a8.negative = 0;
      b5.negative = 0;
      for (var shift = 0; a8.isEven() && b5.isEven(); shift++) {
        a8.iushrn(1);
        b5.iushrn(1);
      }
      do {
        while (a8.isEven()) {
          a8.iushrn(1);
        }
        while (b5.isEven()) {
          b5.iushrn(1);
        }
        var r9 = a8.cmp(b5);
        if (r9 < 0) {
          var t8 = a8;
          a8 = b5;
          b5 = t8;
        } else if (r9 === 0 || b5.cmpn(1) === 0) {
          break;
        }
        a8.isub(b5);
      } while (true);
      return b5.iushln(shift);
    };
    BN.prototype.invm = function invm(num) {
      return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
      return ((this || _global$y).words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
      return ((this || _global$y).words[0] & 1) === 1;
    };
    BN.prototype.andln = function andln(num) {
      return (this || _global$y).words[0] & num;
    };
    BN.prototype.bincn = function bincn(bit) {
      assert2(typeof bit === "number");
      var r9 = bit % 26;
      var s7 = (bit - r9) / 26;
      var q3 = 1 << r9;
      if ((this || _global$y).length <= s7) {
        this._expand(s7 + 1);
        (this || _global$y).words[s7] |= q3;
        return this || _global$y;
      }
      var carry = q3;
      for (var i8 = s7; carry !== 0 && i8 < (this || _global$y).length; i8++) {
        var w4 = (this || _global$y).words[i8] | 0;
        w4 += carry;
        carry = w4 >>> 26;
        w4 &= 67108863;
        (this || _global$y).words[i8] = w4;
      }
      if (carry !== 0) {
        (this || _global$y).words[i8] = carry;
        (this || _global$y).length++;
      }
      return this || _global$y;
    };
    BN.prototype.isZero = function isZero() {
      return (this || _global$y).length === 1 && (this || _global$y).words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
      var negative = num < 0;
      if ((this || _global$y).negative !== 0 && !negative)
        return -1;
      if ((this || _global$y).negative === 0 && negative)
        return 1;
      this.strip();
      var res;
      if ((this || _global$y).length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }
        assert2(num <= 67108863, "Number is too big");
        var w4 = (this || _global$y).words[0] | 0;
        res = w4 === num ? 0 : w4 < num ? -1 : 1;
      }
      if ((this || _global$y).negative !== 0)
        return -res | 0;
      return res;
    };
    BN.prototype.cmp = function cmp(num) {
      if ((this || _global$y).negative !== 0 && num.negative === 0)
        return -1;
      if ((this || _global$y).negative === 0 && num.negative !== 0)
        return 1;
      var res = this.ucmp(num);
      if ((this || _global$y).negative !== 0)
        return -res | 0;
      return res;
    };
    BN.prototype.ucmp = function ucmp(num) {
      if ((this || _global$y).length > num.length)
        return 1;
      if ((this || _global$y).length < num.length)
        return -1;
      var res = 0;
      for (var i8 = (this || _global$y).length - 1; i8 >= 0; i8--) {
        var a8 = (this || _global$y).words[i8] | 0;
        var b5 = num.words[i8] | 0;
        if (a8 === b5)
          continue;
        if (a8 < b5) {
          res = -1;
        } else if (a8 > b5) {
          res = 1;
        }
        break;
      }
      return res;
    };
    BN.prototype.gtn = function gtn(num) {
      return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
      return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
      return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
      return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
      return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
      return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
      return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
      return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
      return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
      return this.cmp(num) === 0;
    };
    BN.red = function red(num) {
      return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
      assert2(!(this || _global$y).red, "Already a number in reduction context");
      assert2((this || _global$y).negative === 0, "red works only with positives");
      return ctx.convertTo(this || _global$y)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
      assert2((this || _global$y).red, "fromRed works only with numbers in reduction context");
      return (this || _global$y).red.convertFrom(this || _global$y);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
      (this || _global$y).red = ctx;
      return this || _global$y;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
      assert2(!(this || _global$y).red, "Already a number in reduction context");
      return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
      assert2((this || _global$y).red, "redAdd works only with red numbers");
      return (this || _global$y).red.add(this || _global$y, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
      assert2((this || _global$y).red, "redIAdd works only with red numbers");
      return (this || _global$y).red.iadd(this || _global$y, num);
    };
    BN.prototype.redSub = function redSub(num) {
      assert2((this || _global$y).red, "redSub works only with red numbers");
      return (this || _global$y).red.sub(this || _global$y, num);
    };
    BN.prototype.redISub = function redISub(num) {
      assert2((this || _global$y).red, "redISub works only with red numbers");
      return (this || _global$y).red.isub(this || _global$y, num);
    };
    BN.prototype.redShl = function redShl(num) {
      assert2((this || _global$y).red, "redShl works only with red numbers");
      return (this || _global$y).red.shl(this || _global$y, num);
    };
    BN.prototype.redMul = function redMul(num) {
      assert2((this || _global$y).red, "redMul works only with red numbers");
      (this || _global$y).red._verify2(this || _global$y, num);
      return (this || _global$y).red.mul(this || _global$y, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
      assert2((this || _global$y).red, "redMul works only with red numbers");
      (this || _global$y).red._verify2(this || _global$y, num);
      return (this || _global$y).red.imul(this || _global$y, num);
    };
    BN.prototype.redSqr = function redSqr() {
      assert2((this || _global$y).red, "redSqr works only with red numbers");
      (this || _global$y).red._verify1(this || _global$y);
      return (this || _global$y).red.sqr(this || _global$y);
    };
    BN.prototype.redISqr = function redISqr() {
      assert2((this || _global$y).red, "redISqr works only with red numbers");
      (this || _global$y).red._verify1(this || _global$y);
      return (this || _global$y).red.isqr(this || _global$y);
    };
    BN.prototype.redSqrt = function redSqrt() {
      assert2((this || _global$y).red, "redSqrt works only with red numbers");
      (this || _global$y).red._verify1(this || _global$y);
      return (this || _global$y).red.sqrt(this || _global$y);
    };
    BN.prototype.redInvm = function redInvm() {
      assert2((this || _global$y).red, "redInvm works only with red numbers");
      (this || _global$y).red._verify1(this || _global$y);
      return (this || _global$y).red.invm(this || _global$y);
    };
    BN.prototype.redNeg = function redNeg() {
      assert2((this || _global$y).red, "redNeg works only with red numbers");
      (this || _global$y).red._verify1(this || _global$y);
      return (this || _global$y).red.neg(this || _global$y);
    };
    BN.prototype.redPow = function redPow(num) {
      assert2((this || _global$y).red && !num.red, "redPow(normalNum)");
      (this || _global$y).red._verify1(this || _global$y);
      return (this || _global$y).red.pow(this || _global$y, num);
    };
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };
    function MPrime(name2, p8) {
      (this || _global$y).name = name2;
      (this || _global$y).p = new BN(p8, 16);
      (this || _global$y).n = (this || _global$y).p.bitLength();
      (this || _global$y).k = new BN(1).iushln((this || _global$y).n).isub((this || _global$y).p);
      (this || _global$y).tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil((this || _global$y).n / 13));
      return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
      var r9 = num;
      var rlen;
      do {
        this.split(r9, (this || _global$y).tmp);
        r9 = this.imulK(r9);
        r9 = r9.iadd((this || _global$y).tmp);
        rlen = r9.bitLength();
      } while (rlen > (this || _global$y).n);
      var cmp = rlen < (this || _global$y).n ? -1 : r9.ucmp((this || _global$y).p);
      if (cmp === 0) {
        r9.words[0] = 0;
        r9.length = 1;
      } else if (cmp > 0) {
        r9.isub((this || _global$y).p);
      } else {
        if (r9.strip !== void 0) {
          r9.strip();
        } else {
          r9._strip();
        }
      }
      return r9;
    };
    MPrime.prototype.split = function split(input, out) {
      input.iushrn((this || _global$y).n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
      return num.imul((this || _global$y).k);
    };
    function K256() {
      MPrime.call(this || _global$y, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits4(K256, MPrime);
    K256.prototype.split = function split(input, output) {
      var mask = 4194303;
      var outLen = Math.min(input.length, 9);
      for (var i8 = 0; i8 < outLen; i8++) {
        output.words[i8] = input.words[i8];
      }
      output.length = outLen;
      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }
      var prev = input.words[9];
      output.words[output.length++] = prev & mask;
      for (i8 = 10; i8 < input.length; i8++) {
        var next = input.words[i8] | 0;
        input.words[i8 - 10] = (next & mask) << 4 | prev >>> 22;
        prev = next;
      }
      prev >>>= 22;
      input.words[i8 - 10] = prev;
      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };
    K256.prototype.imulK = function imulK(num) {
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;
      var lo = 0;
      for (var i8 = 0; i8 < num.length; i8++) {
        var w4 = num.words[i8] | 0;
        lo += w4 * 977;
        num.words[i8] = lo & 67108863;
        lo = w4 * 64 + (lo / 67108864 | 0);
      }
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }
      return num;
    };
    function P224() {
      MPrime.call(this || _global$y, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits4(P224, MPrime);
    function P192() {
      MPrime.call(this || _global$y, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits4(P192, MPrime);
    function P25519() {
      MPrime.call(this || _global$y, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits4(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
      var carry = 0;
      for (var i8 = 0; i8 < num.length; i8++) {
        var hi = (num.words[i8] | 0) * 19 + carry;
        var lo = hi & 67108863;
        hi >>>= 26;
        num.words[i8] = lo;
        carry = hi;
      }
      if (carry !== 0) {
        num.words[num.length++] = carry;
      }
      return num;
    };
    BN._prime = function prime(name2) {
      if (primes[name2])
        return primes[name2];
      var prime2;
      if (name2 === "k256") {
        prime2 = new K256();
      } else if (name2 === "p224") {
        prime2 = new P224();
      } else if (name2 === "p192") {
        prime2 = new P192();
      } else if (name2 === "p25519") {
        prime2 = new P25519();
      } else {
        throw new Error("Unknown prime " + name2);
      }
      primes[name2] = prime2;
      return prime2;
    };
    function Red(m6) {
      if (typeof m6 === "string") {
        var prime = BN._prime(m6);
        (this || _global$y).m = prime.p;
        (this || _global$y).prime = prime;
      } else {
        assert2(m6.gtn(1), "modulus must be greater than 1");
        (this || _global$y).m = m6;
        (this || _global$y).prime = null;
      }
    }
    Red.prototype._verify1 = function _verify1(a8) {
      assert2(a8.negative === 0, "red works only with positives");
      assert2(a8.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a8, b5) {
      assert2((a8.negative | b5.negative) === 0, "red works only with positives");
      assert2(a8.red && a8.red === b5.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a8) {
      if ((this || _global$y).prime)
        return (this || _global$y).prime.ireduce(a8)._forceRed(this || _global$y);
      return a8.umod((this || _global$y).m)._forceRed(this || _global$y);
    };
    Red.prototype.neg = function neg(a8) {
      if (a8.isZero()) {
        return a8.clone();
      }
      return (this || _global$y).m.sub(a8)._forceRed(this || _global$y);
    };
    Red.prototype.add = function add(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.add(b5);
      if (res.cmp((this || _global$y).m) >= 0) {
        res.isub((this || _global$y).m);
      }
      return res._forceRed(this || _global$y);
    };
    Red.prototype.iadd = function iadd(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.iadd(b5);
      if (res.cmp((this || _global$y).m) >= 0) {
        res.isub((this || _global$y).m);
      }
      return res;
    };
    Red.prototype.sub = function sub(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.sub(b5);
      if (res.cmpn(0) < 0) {
        res.iadd((this || _global$y).m);
      }
      return res._forceRed(this || _global$y);
    };
    Red.prototype.isub = function isub(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.isub(b5);
      if (res.cmpn(0) < 0) {
        res.iadd((this || _global$y).m);
      }
      return res;
    };
    Red.prototype.shl = function shl(a8, num) {
      this._verify1(a8);
      return this.imod(a8.ushln(num));
    };
    Red.prototype.imul = function imul(a8, b5) {
      this._verify2(a8, b5);
      return this.imod(a8.imul(b5));
    };
    Red.prototype.mul = function mul(a8, b5) {
      this._verify2(a8, b5);
      return this.imod(a8.mul(b5));
    };
    Red.prototype.isqr = function isqr(a8) {
      return this.imul(a8, a8.clone());
    };
    Red.prototype.sqr = function sqr(a8) {
      return this.mul(a8, a8);
    };
    Red.prototype.sqrt = function sqrt(a8) {
      if (a8.isZero())
        return a8.clone();
      var mod3 = (this || _global$y).m.andln(3);
      assert2(mod3 % 2 === 1);
      if (mod3 === 3) {
        var pow = (this || _global$y).m.add(new BN(1)).iushrn(2);
        return this.pow(a8, pow);
      }
      var q3 = (this || _global$y).m.subn(1);
      var s7 = 0;
      while (!q3.isZero() && q3.andln(1) === 0) {
        s7++;
        q3.iushrn(1);
      }
      assert2(!q3.isZero());
      var one = new BN(1).toRed(this || _global$y);
      var nOne = one.redNeg();
      var lpow = (this || _global$y).m.subn(1).iushrn(1);
      var z5 = (this || _global$y).m.bitLength();
      z5 = new BN(2 * z5 * z5).toRed(this || _global$y);
      while (this.pow(z5, lpow).cmp(nOne) !== 0) {
        z5.redIAdd(nOne);
      }
      var c8 = this.pow(z5, q3);
      var r9 = this.pow(a8, q3.addn(1).iushrn(1));
      var t8 = this.pow(a8, q3);
      var m6 = s7;
      while (t8.cmp(one) !== 0) {
        var tmp = t8;
        for (var i8 = 0; tmp.cmp(one) !== 0; i8++) {
          tmp = tmp.redSqr();
        }
        assert2(i8 < m6);
        var b5 = this.pow(c8, new BN(1).iushln(m6 - i8 - 1));
        r9 = r9.redMul(b5);
        c8 = b5.redSqr();
        t8 = t8.redMul(c8);
        m6 = i8;
      }
      return r9;
    };
    Red.prototype.invm = function invm(a8) {
      var inv = a8._invmp((this || _global$y).m);
      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };
    Red.prototype.pow = function pow(a8, num) {
      if (num.isZero())
        return new BN(1).toRed(this || _global$y);
      if (num.cmpn(1) === 0)
        return a8.clone();
      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN(1).toRed(this || _global$y);
      wnd[1] = a8;
      for (var i8 = 2; i8 < wnd.length; i8++) {
        wnd[i8] = this.mul(wnd[i8 - 1], a8);
      }
      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;
      if (start === 0) {
        start = 26;
      }
      for (i8 = num.length - 1; i8 >= 0; i8--) {
        var word = num.words[i8];
        for (var j4 = start - 1; j4 >= 0; j4--) {
          var bit = word >> j4 & 1;
          if (res !== wnd[0]) {
            res = this.sqr(res);
          }
          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }
          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i8 !== 0 || j4 !== 0))
            continue;
          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }
        start = 26;
      }
      return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
      var r9 = num.umod((this || _global$y).m);
      return r9 === num ? r9.clone() : r9;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
      var res = num.clone();
      res.red = null;
      return res;
    };
    BN.mont = function mont(num) {
      return new Mont(num);
    };
    function Mont(m6) {
      Red.call(this || _global$y, m6);
      (this || _global$y).shift = (this || _global$y).m.bitLength();
      if ((this || _global$y).shift % 26 !== 0) {
        (this || _global$y).shift += 26 - (this || _global$y).shift % 26;
      }
      (this || _global$y).r = new BN(1).iushln((this || _global$y).shift);
      (this || _global$y).r2 = this.imod((this || _global$y).r.sqr());
      (this || _global$y).rinv = (this || _global$y).r._invmp((this || _global$y).m);
      (this || _global$y).minv = (this || _global$y).rinv.mul((this || _global$y).r).isubn(1).div((this || _global$y).m);
      (this || _global$y).minv = (this || _global$y).minv.umod((this || _global$y).r);
      (this || _global$y).minv = (this || _global$y).r.sub((this || _global$y).minv);
    }
    inherits4(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
      return this.imod(num.ushln((this || _global$y).shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
      var r9 = this.imod(num.mul((this || _global$y).rinv));
      r9.red = null;
      return r9;
    };
    Mont.prototype.imul = function imul(a8, b5) {
      if (a8.isZero() || b5.isZero()) {
        a8.words[0] = 0;
        a8.length = 1;
        return a8;
      }
      var t8 = a8.imul(b5);
      var c8 = t8.maskn((this || _global$y).shift).mul((this || _global$y).minv).imaskn((this || _global$y).shift).mul((this || _global$y).m);
      var u8 = t8.isub(c8).iushrn((this || _global$y).shift);
      var res = u8;
      if (u8.cmp((this || _global$y).m) >= 0) {
        res = u8.isub((this || _global$y).m);
      } else if (u8.cmpn(0) < 0) {
        res = u8.iadd((this || _global$y).m);
      }
      return res._forceRed(this || _global$y);
    };
    Mont.prototype.mul = function mul(a8, b5) {
      if (a8.isZero() || b5.isZero())
        return new BN(0)._forceRed(this || _global$y);
      var t8 = a8.mul(b5);
      var c8 = t8.maskn((this || _global$y).shift).mul((this || _global$y).minv).imaskn((this || _global$y).shift).mul((this || _global$y).m);
      var u8 = t8.isub(c8).iushrn((this || _global$y).shift);
      var res = u8;
      if (u8.cmp((this || _global$y).m) >= 0) {
        res = u8.isub((this || _global$y).m);
      } else if (u8.cmpn(0) < 0) {
        res = u8.iadd((this || _global$y).m);
      }
      return res._forceRed(this || _global$y);
    };
    Mont.prototype.invm = function invm(a8) {
      var res = this.imod(a8._invmp((this || _global$y).m).mul((this || _global$y).r2));
      return res._forceRed(this || _global$y);
    };
  })(module$9, exports$1X);
  return module$9.exports;
}
function dew$1V() {
  if (_dewExec$1V)
    return exports$1W;
  _dewExec$1V = true;
  exports$1W = exports$1W = dew$3$2();
  exports$1W.Stream = exports$1W;
  exports$1W.Readable = exports$1W;
  exports$1W.Writable = dew$8$2();
  exports$1W.Duplex = dew$7$2();
  exports$1W.Transform = dew$2$2();
  exports$1W.PassThrough = dew$1$2();
  exports$1W.finished = dew$6$2();
  exports$1W.pipeline = dew$2B();
  return exports$1W;
}
function dew$1T() {
  if (_dewExec$1T)
    return exports$1U;
  _dewExec$1T = true;
  var buffer2 = e$1$1;
  var Buffer3 = buffer2.Buffer;
  function copyProps(src, dst) {
    for (var key in src) {
      dst[key] = src[key];
    }
  }
  if (Buffer3.from && Buffer3.alloc && Buffer3.allocUnsafe && Buffer3.allocUnsafeSlow) {
    exports$1U = buffer2;
  } else {
    copyProps(buffer2, exports$1U);
    exports$1U.Buffer = SafeBuffer;
  }
  function SafeBuffer(arg, encodingOrOffset, length) {
    return Buffer3(arg, encodingOrOffset, length);
  }
  SafeBuffer.prototype = Object.create(Buffer3.prototype);
  copyProps(Buffer3, SafeBuffer);
  SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === "number") {
      throw new TypeError("Argument must not be a number");
    }
    return Buffer3(arg, encodingOrOffset, length);
  };
  SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== "number") {
      throw new TypeError("Argument must be a number");
    }
    var buf = Buffer3(size);
    if (fill !== void 0) {
      if (typeof encoding === "string") {
        buf.fill(fill, encoding);
      } else {
        buf.fill(fill);
      }
    } else {
      buf.fill(0);
    }
    return buf;
  };
  SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== "number") {
      throw new TypeError("Argument must be a number");
    }
    return Buffer3(size);
  };
  SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== "number") {
      throw new TypeError("Argument must be a number");
    }
    return buffer2.SlowBuffer(size);
  };
  return exports$1U;
}
function dew$1S() {
  if (_dewExec$1S)
    return exports$1T;
  _dewExec$1S = true;
  var process3 = T;
  var MAX_BYTES = 65536;
  var MAX_UINT32 = 4294967295;
  function oldBrowser() {
    throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11");
  }
  var Buffer3 = dew$1T().Buffer;
  var crypto2 = _global$w.crypto || _global$w.msCrypto;
  if (crypto2 && crypto2.getRandomValues) {
    exports$1T = randomBytes2;
  } else {
    exports$1T = oldBrowser;
  }
  function randomBytes2(size, cb) {
    if (size > MAX_UINT32)
      throw new RangeError("requested too many random bytes");
    var bytes = Buffer3.allocUnsafe(size);
    if (size > 0) {
      if (size > MAX_BYTES) {
        for (var generated = 0; generated < size; generated += MAX_BYTES) {
          crypto2.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));
        }
      } else {
        crypto2.getRandomValues(bytes);
      }
    }
    if (typeof cb === "function") {
      return process3.nextTick(function() {
        cb(null, bytes);
      });
    }
    return bytes;
  }
  return exports$1T;
}
function dew$1R() {
  if (_dewExec$1R)
    return exports$1S;
  _dewExec$1R = true;
  var Buffer3 = dew$1T().Buffer;
  var Transform2 = dew$1V().Transform;
  var inherits4 = dew$f$2();
  function throwIfNotStringOrBuffer(val, prefix) {
    if (!Buffer3.isBuffer(val) && typeof val !== "string") {
      throw new TypeError(prefix + " must be a string or a buffer");
    }
  }
  function HashBase(blockSize) {
    Transform2.call(this);
    this._block = Buffer3.allocUnsafe(blockSize);
    this._blockSize = blockSize;
    this._blockOffset = 0;
    this._length = [0, 0, 0, 0];
    this._finalized = false;
  }
  inherits4(HashBase, Transform2);
  HashBase.prototype._transform = function(chunk, encoding, callback) {
    var error = null;
    try {
      this.update(chunk, encoding);
    } catch (err) {
      error = err;
    }
    callback(error);
  };
  HashBase.prototype._flush = function(callback) {
    var error = null;
    try {
      this.push(this.digest());
    } catch (err) {
      error = err;
    }
    callback(error);
  };
  HashBase.prototype.update = function(data, encoding) {
    throwIfNotStringOrBuffer(data, "Data");
    if (this._finalized)
      throw new Error("Digest already called");
    if (!Buffer3.isBuffer(data))
      data = Buffer3.from(data, encoding);
    var block = this._block;
    var offset = 0;
    while (this._blockOffset + data.length - offset >= this._blockSize) {
      for (var i8 = this._blockOffset; i8 < this._blockSize; )
        block[i8++] = data[offset++];
      this._update();
      this._blockOffset = 0;
    }
    while (offset < data.length)
      block[this._blockOffset++] = data[offset++];
    for (var j4 = 0, carry = data.length * 8; carry > 0; ++j4) {
      this._length[j4] += carry;
      carry = this._length[j4] / 4294967296 | 0;
      if (carry > 0)
        this._length[j4] -= 4294967296 * carry;
    }
    return this;
  };
  HashBase.prototype._update = function() {
    throw new Error("_update is not implemented");
  };
  HashBase.prototype.digest = function(encoding) {
    if (this._finalized)
      throw new Error("Digest already called");
    this._finalized = true;
    var digest = this._digest();
    if (encoding !== void 0)
      digest = digest.toString(encoding);
    this._block.fill(0);
    this._blockOffset = 0;
    for (var i8 = 0; i8 < 4; ++i8)
      this._length[i8] = 0;
    return digest;
  };
  HashBase.prototype._digest = function() {
    throw new Error("_digest is not implemented");
  };
  exports$1S = HashBase;
  return exports$1S;
}
function dew$1Q() {
  if (_dewExec$1Q)
    return exports$1R;
  _dewExec$1Q = true;
  var inherits4 = dew$f$2();
  var HashBase = dew$1R();
  var Buffer3 = dew$1T().Buffer;
  var ARRAY16 = new Array(16);
  function MD5() {
    HashBase.call(this, 64);
    this._a = 1732584193;
    this._b = 4023233417;
    this._c = 2562383102;
    this._d = 271733878;
  }
  inherits4(MD5, HashBase);
  MD5.prototype._update = function() {
    var M4 = ARRAY16;
    for (var i8 = 0; i8 < 16; ++i8)
      M4[i8] = this._block.readInt32LE(i8 * 4);
    var a8 = this._a;
    var b5 = this._b;
    var c8 = this._c;
    var d6 = this._d;
    a8 = fnF(a8, b5, c8, d6, M4[0], 3614090360, 7);
    d6 = fnF(d6, a8, b5, c8, M4[1], 3905402710, 12);
    c8 = fnF(c8, d6, a8, b5, M4[2], 606105819, 17);
    b5 = fnF(b5, c8, d6, a8, M4[3], 3250441966, 22);
    a8 = fnF(a8, b5, c8, d6, M4[4], 4118548399, 7);
    d6 = fnF(d6, a8, b5, c8, M4[5], 1200080426, 12);
    c8 = fnF(c8, d6, a8, b5, M4[6], 2821735955, 17);
    b5 = fnF(b5, c8, d6, a8, M4[7], 4249261313, 22);
    a8 = fnF(a8, b5, c8, d6, M4[8], 1770035416, 7);
    d6 = fnF(d6, a8, b5, c8, M4[9], 2336552879, 12);
    c8 = fnF(c8, d6, a8, b5, M4[10], 4294925233, 17);
    b5 = fnF(b5, c8, d6, a8, M4[11], 2304563134, 22);
    a8 = fnF(a8, b5, c8, d6, M4[12], 1804603682, 7);
    d6 = fnF(d6, a8, b5, c8, M4[13], 4254626195, 12);
    c8 = fnF(c8, d6, a8, b5, M4[14], 2792965006, 17);
    b5 = fnF(b5, c8, d6, a8, M4[15], 1236535329, 22);
    a8 = fnG(a8, b5, c8, d6, M4[1], 4129170786, 5);
    d6 = fnG(d6, a8, b5, c8, M4[6], 3225465664, 9);
    c8 = fnG(c8, d6, a8, b5, M4[11], 643717713, 14);
    b5 = fnG(b5, c8, d6, a8, M4[0], 3921069994, 20);
    a8 = fnG(a8, b5, c8, d6, M4[5], 3593408605, 5);
    d6 = fnG(d6, a8, b5, c8, M4[10], 38016083, 9);
    c8 = fnG(c8, d6, a8, b5, M4[15], 3634488961, 14);
    b5 = fnG(b5, c8, d6, a8, M4[4], 3889429448, 20);
    a8 = fnG(a8, b5, c8, d6, M4[9], 568446438, 5);
    d6 = fnG(d6, a8, b5, c8, M4[14], 3275163606, 9);
    c8 = fnG(c8, d6, a8, b5, M4[3], 4107603335, 14);
    b5 = fnG(b5, c8, d6, a8, M4[8], 1163531501, 20);
    a8 = fnG(a8, b5, c8, d6, M4[13], 2850285829, 5);
    d6 = fnG(d6, a8, b5, c8, M4[2], 4243563512, 9);
    c8 = fnG(c8, d6, a8, b5, M4[7], 1735328473, 14);
    b5 = fnG(b5, c8, d6, a8, M4[12], 2368359562, 20);
    a8 = fnH(a8, b5, c8, d6, M4[5], 4294588738, 4);
    d6 = fnH(d6, a8, b5, c8, M4[8], 2272392833, 11);
    c8 = fnH(c8, d6, a8, b5, M4[11], 1839030562, 16);
    b5 = fnH(b5, c8, d6, a8, M4[14], 4259657740, 23);
    a8 = fnH(a8, b5, c8, d6, M4[1], 2763975236, 4);
    d6 = fnH(d6, a8, b5, c8, M4[4], 1272893353, 11);
    c8 = fnH(c8, d6, a8, b5, M4[7], 4139469664, 16);
    b5 = fnH(b5, c8, d6, a8, M4[10], 3200236656, 23);
    a8 = fnH(a8, b5, c8, d6, M4[13], 681279174, 4);
    d6 = fnH(d6, a8, b5, c8, M4[0], 3936430074, 11);
    c8 = fnH(c8, d6, a8, b5, M4[3], 3572445317, 16);
    b5 = fnH(b5, c8, d6, a8, M4[6], 76029189, 23);
    a8 = fnH(a8, b5, c8, d6, M4[9], 3654602809, 4);
    d6 = fnH(d6, a8, b5, c8, M4[12], 3873151461, 11);
    c8 = fnH(c8, d6, a8, b5, M4[15], 530742520, 16);
    b5 = fnH(b5, c8, d6, a8, M4[2], 3299628645, 23);
    a8 = fnI(a8, b5, c8, d6, M4[0], 4096336452, 6);
    d6 = fnI(d6, a8, b5, c8, M4[7], 1126891415, 10);
    c8 = fnI(c8, d6, a8, b5, M4[14], 2878612391, 15);
    b5 = fnI(b5, c8, d6, a8, M4[5], 4237533241, 21);
    a8 = fnI(a8, b5, c8, d6, M4[12], 1700485571, 6);
    d6 = fnI(d6, a8, b5, c8, M4[3], 2399980690, 10);
    c8 = fnI(c8, d6, a8, b5, M4[10], 4293915773, 15);
    b5 = fnI(b5, c8, d6, a8, M4[1], 2240044497, 21);
    a8 = fnI(a8, b5, c8, d6, M4[8], 1873313359, 6);
    d6 = fnI(d6, a8, b5, c8, M4[15], 4264355552, 10);
    c8 = fnI(c8, d6, a8, b5, M4[6], 2734768916, 15);
    b5 = fnI(b5, c8, d6, a8, M4[13], 1309151649, 21);
    a8 = fnI(a8, b5, c8, d6, M4[4], 4149444226, 6);
    d6 = fnI(d6, a8, b5, c8, M4[11], 3174756917, 10);
    c8 = fnI(c8, d6, a8, b5, M4[2], 718787259, 15);
    b5 = fnI(b5, c8, d6, a8, M4[9], 3951481745, 21);
    this._a = this._a + a8 | 0;
    this._b = this._b + b5 | 0;
    this._c = this._c + c8 | 0;
    this._d = this._d + d6 | 0;
  };
  MD5.prototype._digest = function() {
    this._block[this._blockOffset++] = 128;
    if (this._blockOffset > 56) {
      this._block.fill(0, this._blockOffset, 64);
      this._update();
      this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    var buffer2 = Buffer3.allocUnsafe(16);
    buffer2.writeInt32LE(this._a, 0);
    buffer2.writeInt32LE(this._b, 4);
    buffer2.writeInt32LE(this._c, 8);
    buffer2.writeInt32LE(this._d, 12);
    return buffer2;
  };
  function rotl(x4, n9) {
    return x4 << n9 | x4 >>> 32 - n9;
  }
  function fnF(a8, b5, c8, d6, m6, k4, s7) {
    return rotl(a8 + (b5 & c8 | ~b5 & d6) + m6 + k4 | 0, s7) + b5 | 0;
  }
  function fnG(a8, b5, c8, d6, m6, k4, s7) {
    return rotl(a8 + (b5 & d6 | c8 & ~d6) + m6 + k4 | 0, s7) + b5 | 0;
  }
  function fnH(a8, b5, c8, d6, m6, k4, s7) {
    return rotl(a8 + (b5 ^ c8 ^ d6) + m6 + k4 | 0, s7) + b5 | 0;
  }
  function fnI(a8, b5, c8, d6, m6, k4, s7) {
    return rotl(a8 + (c8 ^ (b5 | ~d6)) + m6 + k4 | 0, s7) + b5 | 0;
  }
  exports$1R = MD5;
  return exports$1R;
}
function dew$1P() {
  if (_dewExec$1P)
    return exports$1Q;
  _dewExec$1P = true;
  var Buffer3 = e$1$1.Buffer;
  var inherits4 = dew$f$2();
  var HashBase = dew$1R();
  var ARRAY16 = new Array(16);
  var zl = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];
  var zr = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];
  var sl = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];
  var sr = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];
  var hl = [0, 1518500249, 1859775393, 2400959708, 2840853838];
  var hr = [1352829926, 1548603684, 1836072691, 2053994217, 0];
  function RIPEMD160() {
    HashBase.call(this, 64);
    this._a = 1732584193;
    this._b = 4023233417;
    this._c = 2562383102;
    this._d = 271733878;
    this._e = 3285377520;
  }
  inherits4(RIPEMD160, HashBase);
  RIPEMD160.prototype._update = function() {
    var words = ARRAY16;
    for (var j4 = 0; j4 < 16; ++j4)
      words[j4] = this._block.readInt32LE(j4 * 4);
    var al = this._a | 0;
    var bl = this._b | 0;
    var cl = this._c | 0;
    var dl = this._d | 0;
    var el = this._e | 0;
    var ar = this._a | 0;
    var br = this._b | 0;
    var cr = this._c | 0;
    var dr = this._d | 0;
    var er = this._e | 0;
    for (var i8 = 0; i8 < 80; i8 += 1) {
      var tl;
      var tr;
      if (i8 < 16) {
        tl = fn1(al, bl, cl, dl, el, words[zl[i8]], hl[0], sl[i8]);
        tr = fn5(ar, br, cr, dr, er, words[zr[i8]], hr[0], sr[i8]);
      } else if (i8 < 32) {
        tl = fn2(al, bl, cl, dl, el, words[zl[i8]], hl[1], sl[i8]);
        tr = fn4(ar, br, cr, dr, er, words[zr[i8]], hr[1], sr[i8]);
      } else if (i8 < 48) {
        tl = fn3(al, bl, cl, dl, el, words[zl[i8]], hl[2], sl[i8]);
        tr = fn3(ar, br, cr, dr, er, words[zr[i8]], hr[2], sr[i8]);
      } else if (i8 < 64) {
        tl = fn4(al, bl, cl, dl, el, words[zl[i8]], hl[3], sl[i8]);
        tr = fn2(ar, br, cr, dr, er, words[zr[i8]], hr[3], sr[i8]);
      } else {
        tl = fn5(al, bl, cl, dl, el, words[zl[i8]], hl[4], sl[i8]);
        tr = fn1(ar, br, cr, dr, er, words[zr[i8]], hr[4], sr[i8]);
      }
      al = el;
      el = dl;
      dl = rotl(cl, 10);
      cl = bl;
      bl = tl;
      ar = er;
      er = dr;
      dr = rotl(cr, 10);
      cr = br;
      br = tr;
    }
    var t8 = this._b + cl + dr | 0;
    this._b = this._c + dl + er | 0;
    this._c = this._d + el + ar | 0;
    this._d = this._e + al + br | 0;
    this._e = this._a + bl + cr | 0;
    this._a = t8;
  };
  RIPEMD160.prototype._digest = function() {
    this._block[this._blockOffset++] = 128;
    if (this._blockOffset > 56) {
      this._block.fill(0, this._blockOffset, 64);
      this._update();
      this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    var buffer2 = Buffer3.alloc ? Buffer3.alloc(20) : new Buffer3(20);
    buffer2.writeInt32LE(this._a, 0);
    buffer2.writeInt32LE(this._b, 4);
    buffer2.writeInt32LE(this._c, 8);
    buffer2.writeInt32LE(this._d, 12);
    buffer2.writeInt32LE(this._e, 16);
    return buffer2;
  };
  function rotl(x4, n9) {
    return x4 << n9 | x4 >>> 32 - n9;
  }
  function fn1(a8, b5, c8, d6, e11, m6, k4, s7) {
    return rotl(a8 + (b5 ^ c8 ^ d6) + m6 + k4 | 0, s7) + e11 | 0;
  }
  function fn2(a8, b5, c8, d6, e11, m6, k4, s7) {
    return rotl(a8 + (b5 & c8 | ~b5 & d6) + m6 + k4 | 0, s7) + e11 | 0;
  }
  function fn3(a8, b5, c8, d6, e11, m6, k4, s7) {
    return rotl(a8 + ((b5 | ~c8) ^ d6) + m6 + k4 | 0, s7) + e11 | 0;
  }
  function fn4(a8, b5, c8, d6, e11, m6, k4, s7) {
    return rotl(a8 + (b5 & d6 | c8 & ~d6) + m6 + k4 | 0, s7) + e11 | 0;
  }
  function fn5(a8, b5, c8, d6, e11, m6, k4, s7) {
    return rotl(a8 + (b5 ^ (c8 | ~d6)) + m6 + k4 | 0, s7) + e11 | 0;
  }
  exports$1Q = RIPEMD160;
  return exports$1Q;
}
function dew$1O() {
  if (_dewExec$1O)
    return exports$1P;
  _dewExec$1O = true;
  var Buffer3 = dew$1T().Buffer;
  function Hash2(blockSize, finalSize) {
    (this || _global$v)._block = Buffer3.alloc(blockSize);
    (this || _global$v)._finalSize = finalSize;
    (this || _global$v)._blockSize = blockSize;
    (this || _global$v)._len = 0;
  }
  Hash2.prototype.update = function(data, enc) {
    if (typeof data === "string") {
      enc = enc || "utf8";
      data = Buffer3.from(data, enc);
    }
    var block = (this || _global$v)._block;
    var blockSize = (this || _global$v)._blockSize;
    var length = data.length;
    var accum = (this || _global$v)._len;
    for (var offset = 0; offset < length; ) {
      var assigned = accum % blockSize;
      var remainder = Math.min(length - offset, blockSize - assigned);
      for (var i8 = 0; i8 < remainder; i8++) {
        block[assigned + i8] = data[offset + i8];
      }
      accum += remainder;
      offset += remainder;
      if (accum % blockSize === 0) {
        this._update(block);
      }
    }
    (this || _global$v)._len += length;
    return this || _global$v;
  };
  Hash2.prototype.digest = function(enc) {
    var rem = (this || _global$v)._len % (this || _global$v)._blockSize;
    (this || _global$v)._block[rem] = 128;
    (this || _global$v)._block.fill(0, rem + 1);
    if (rem >= (this || _global$v)._finalSize) {
      this._update((this || _global$v)._block);
      (this || _global$v)._block.fill(0);
    }
    var bits = (this || _global$v)._len * 8;
    if (bits <= 4294967295) {
      (this || _global$v)._block.writeUInt32BE(bits, (this || _global$v)._blockSize - 4);
    } else {
      var lowBits = (bits & 4294967295) >>> 0;
      var highBits = (bits - lowBits) / 4294967296;
      (this || _global$v)._block.writeUInt32BE(highBits, (this || _global$v)._blockSize - 8);
      (this || _global$v)._block.writeUInt32BE(lowBits, (this || _global$v)._blockSize - 4);
    }
    this._update((this || _global$v)._block);
    var hash = this._hash();
    return enc ? hash.toString(enc) : hash;
  };
  Hash2.prototype._update = function() {
    throw new Error("_update must be implemented by subclass");
  };
  exports$1P = Hash2;
  return exports$1P;
}
function dew$1N() {
  if (_dewExec$1N)
    return exports$1O;
  _dewExec$1N = true;
  var inherits4 = dew$f$2();
  var Hash2 = dew$1O();
  var Buffer3 = dew$1T().Buffer;
  var K3 = [1518500249, 1859775393, 2400959708 | 0, 3395469782 | 0];
  var W3 = new Array(80);
  function Sha() {
    this.init();
    (this || _global$u)._w = W3;
    Hash2.call(this || _global$u, 64, 56);
  }
  inherits4(Sha, Hash2);
  Sha.prototype.init = function() {
    (this || _global$u)._a = 1732584193;
    (this || _global$u)._b = 4023233417;
    (this || _global$u)._c = 2562383102;
    (this || _global$u)._d = 271733878;
    (this || _global$u)._e = 3285377520;
    return this || _global$u;
  };
  function rotl5(num) {
    return num << 5 | num >>> 27;
  }
  function rotl30(num) {
    return num << 30 | num >>> 2;
  }
  function ft(s7, b5, c8, d6) {
    if (s7 === 0)
      return b5 & c8 | ~b5 & d6;
    if (s7 === 2)
      return b5 & c8 | b5 & d6 | c8 & d6;
    return b5 ^ c8 ^ d6;
  }
  Sha.prototype._update = function(M4) {
    var W4 = (this || _global$u)._w;
    var a8 = (this || _global$u)._a | 0;
    var b5 = (this || _global$u)._b | 0;
    var c8 = (this || _global$u)._c | 0;
    var d6 = (this || _global$u)._d | 0;
    var e11 = (this || _global$u)._e | 0;
    for (var i8 = 0; i8 < 16; ++i8)
      W4[i8] = M4.readInt32BE(i8 * 4);
    for (; i8 < 80; ++i8)
      W4[i8] = W4[i8 - 3] ^ W4[i8 - 8] ^ W4[i8 - 14] ^ W4[i8 - 16];
    for (var j4 = 0; j4 < 80; ++j4) {
      var s7 = ~~(j4 / 20);
      var t8 = rotl5(a8) + ft(s7, b5, c8, d6) + e11 + W4[j4] + K3[s7] | 0;
      e11 = d6;
      d6 = c8;
      c8 = rotl30(b5);
      b5 = a8;
      a8 = t8;
    }
    (this || _global$u)._a = a8 + (this || _global$u)._a | 0;
    (this || _global$u)._b = b5 + (this || _global$u)._b | 0;
    (this || _global$u)._c = c8 + (this || _global$u)._c | 0;
    (this || _global$u)._d = d6 + (this || _global$u)._d | 0;
    (this || _global$u)._e = e11 + (this || _global$u)._e | 0;
  };
  Sha.prototype._hash = function() {
    var H3 = Buffer3.allocUnsafe(20);
    H3.writeInt32BE((this || _global$u)._a | 0, 0);
    H3.writeInt32BE((this || _global$u)._b | 0, 4);
    H3.writeInt32BE((this || _global$u)._c | 0, 8);
    H3.writeInt32BE((this || _global$u)._d | 0, 12);
    H3.writeInt32BE((this || _global$u)._e | 0, 16);
    return H3;
  };
  exports$1O = Sha;
  return exports$1O;
}
function dew$1M() {
  if (_dewExec$1M)
    return exports$1N;
  _dewExec$1M = true;
  var inherits4 = dew$f$2();
  var Hash2 = dew$1O();
  var Buffer3 = dew$1T().Buffer;
  var K3 = [1518500249, 1859775393, 2400959708 | 0, 3395469782 | 0];
  var W3 = new Array(80);
  function Sha1() {
    this.init();
    (this || _global$t)._w = W3;
    Hash2.call(this || _global$t, 64, 56);
  }
  inherits4(Sha1, Hash2);
  Sha1.prototype.init = function() {
    (this || _global$t)._a = 1732584193;
    (this || _global$t)._b = 4023233417;
    (this || _global$t)._c = 2562383102;
    (this || _global$t)._d = 271733878;
    (this || _global$t)._e = 3285377520;
    return this || _global$t;
  };
  function rotl1(num) {
    return num << 1 | num >>> 31;
  }
  function rotl5(num) {
    return num << 5 | num >>> 27;
  }
  function rotl30(num) {
    return num << 30 | num >>> 2;
  }
  function ft(s7, b5, c8, d6) {
    if (s7 === 0)
      return b5 & c8 | ~b5 & d6;
    if (s7 === 2)
      return b5 & c8 | b5 & d6 | c8 & d6;
    return b5 ^ c8 ^ d6;
  }
  Sha1.prototype._update = function(M4) {
    var W4 = (this || _global$t)._w;
    var a8 = (this || _global$t)._a | 0;
    var b5 = (this || _global$t)._b | 0;
    var c8 = (this || _global$t)._c | 0;
    var d6 = (this || _global$t)._d | 0;
    var e11 = (this || _global$t)._e | 0;
    for (var i8 = 0; i8 < 16; ++i8)
      W4[i8] = M4.readInt32BE(i8 * 4);
    for (; i8 < 80; ++i8)
      W4[i8] = rotl1(W4[i8 - 3] ^ W4[i8 - 8] ^ W4[i8 - 14] ^ W4[i8 - 16]);
    for (var j4 = 0; j4 < 80; ++j4) {
      var s7 = ~~(j4 / 20);
      var t8 = rotl5(a8) + ft(s7, b5, c8, d6) + e11 + W4[j4] + K3[s7] | 0;
      e11 = d6;
      d6 = c8;
      c8 = rotl30(b5);
      b5 = a8;
      a8 = t8;
    }
    (this || _global$t)._a = a8 + (this || _global$t)._a | 0;
    (this || _global$t)._b = b5 + (this || _global$t)._b | 0;
    (this || _global$t)._c = c8 + (this || _global$t)._c | 0;
    (this || _global$t)._d = d6 + (this || _global$t)._d | 0;
    (this || _global$t)._e = e11 + (this || _global$t)._e | 0;
  };
  Sha1.prototype._hash = function() {
    var H3 = Buffer3.allocUnsafe(20);
    H3.writeInt32BE((this || _global$t)._a | 0, 0);
    H3.writeInt32BE((this || _global$t)._b | 0, 4);
    H3.writeInt32BE((this || _global$t)._c | 0, 8);
    H3.writeInt32BE((this || _global$t)._d | 0, 12);
    H3.writeInt32BE((this || _global$t)._e | 0, 16);
    return H3;
  };
  exports$1N = Sha1;
  return exports$1N;
}
function dew$1L() {
  if (_dewExec$1L)
    return exports$1M;
  _dewExec$1L = true;
  var inherits4 = dew$f$2();
  var Hash2 = dew$1O();
  var Buffer3 = dew$1T().Buffer;
  var K3 = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298];
  var W3 = new Array(64);
  function Sha256() {
    this.init();
    (this || _global$s)._w = W3;
    Hash2.call(this || _global$s, 64, 56);
  }
  inherits4(Sha256, Hash2);
  Sha256.prototype.init = function() {
    (this || _global$s)._a = 1779033703;
    (this || _global$s)._b = 3144134277;
    (this || _global$s)._c = 1013904242;
    (this || _global$s)._d = 2773480762;
    (this || _global$s)._e = 1359893119;
    (this || _global$s)._f = 2600822924;
    (this || _global$s)._g = 528734635;
    (this || _global$s)._h = 1541459225;
    return this || _global$s;
  };
  function ch(x4, y6, z5) {
    return z5 ^ x4 & (y6 ^ z5);
  }
  function maj(x4, y6, z5) {
    return x4 & y6 | z5 & (x4 | y6);
  }
  function sigma0(x4) {
    return (x4 >>> 2 | x4 << 30) ^ (x4 >>> 13 | x4 << 19) ^ (x4 >>> 22 | x4 << 10);
  }
  function sigma1(x4) {
    return (x4 >>> 6 | x4 << 26) ^ (x4 >>> 11 | x4 << 21) ^ (x4 >>> 25 | x4 << 7);
  }
  function gamma0(x4) {
    return (x4 >>> 7 | x4 << 25) ^ (x4 >>> 18 | x4 << 14) ^ x4 >>> 3;
  }
  function gamma1(x4) {
    return (x4 >>> 17 | x4 << 15) ^ (x4 >>> 19 | x4 << 13) ^ x4 >>> 10;
  }
  Sha256.prototype._update = function(M4) {
    var W4 = (this || _global$s)._w;
    var a8 = (this || _global$s)._a | 0;
    var b5 = (this || _global$s)._b | 0;
    var c8 = (this || _global$s)._c | 0;
    var d6 = (this || _global$s)._d | 0;
    var e11 = (this || _global$s)._e | 0;
    var f9 = (this || _global$s)._f | 0;
    var g5 = (this || _global$s)._g | 0;
    var h8 = (this || _global$s)._h | 0;
    for (var i8 = 0; i8 < 16; ++i8)
      W4[i8] = M4.readInt32BE(i8 * 4);
    for (; i8 < 64; ++i8)
      W4[i8] = gamma1(W4[i8 - 2]) + W4[i8 - 7] + gamma0(W4[i8 - 15]) + W4[i8 - 16] | 0;
    for (var j4 = 0; j4 < 64; ++j4) {
      var T1 = h8 + sigma1(e11) + ch(e11, f9, g5) + K3[j4] + W4[j4] | 0;
      var T22 = sigma0(a8) + maj(a8, b5, c8) | 0;
      h8 = g5;
      g5 = f9;
      f9 = e11;
      e11 = d6 + T1 | 0;
      d6 = c8;
      c8 = b5;
      b5 = a8;
      a8 = T1 + T22 | 0;
    }
    (this || _global$s)._a = a8 + (this || _global$s)._a | 0;
    (this || _global$s)._b = b5 + (this || _global$s)._b | 0;
    (this || _global$s)._c = c8 + (this || _global$s)._c | 0;
    (this || _global$s)._d = d6 + (this || _global$s)._d | 0;
    (this || _global$s)._e = e11 + (this || _global$s)._e | 0;
    (this || _global$s)._f = f9 + (this || _global$s)._f | 0;
    (this || _global$s)._g = g5 + (this || _global$s)._g | 0;
    (this || _global$s)._h = h8 + (this || _global$s)._h | 0;
  };
  Sha256.prototype._hash = function() {
    var H3 = Buffer3.allocUnsafe(32);
    H3.writeInt32BE((this || _global$s)._a, 0);
    H3.writeInt32BE((this || _global$s)._b, 4);
    H3.writeInt32BE((this || _global$s)._c, 8);
    H3.writeInt32BE((this || _global$s)._d, 12);
    H3.writeInt32BE((this || _global$s)._e, 16);
    H3.writeInt32BE((this || _global$s)._f, 20);
    H3.writeInt32BE((this || _global$s)._g, 24);
    H3.writeInt32BE((this || _global$s)._h, 28);
    return H3;
  };
  exports$1M = Sha256;
  return exports$1M;
}
function dew$1K() {
  if (_dewExec$1K)
    return exports$1L;
  _dewExec$1K = true;
  var inherits4 = dew$f$2();
  var Sha256 = dew$1L();
  var Hash2 = dew$1O();
  var Buffer3 = dew$1T().Buffer;
  var W3 = new Array(64);
  function Sha224() {
    this.init();
    (this || _global$r)._w = W3;
    Hash2.call(this || _global$r, 64, 56);
  }
  inherits4(Sha224, Sha256);
  Sha224.prototype.init = function() {
    (this || _global$r)._a = 3238371032;
    (this || _global$r)._b = 914150663;
    (this || _global$r)._c = 812702999;
    (this || _global$r)._d = 4144912697;
    (this || _global$r)._e = 4290775857;
    (this || _global$r)._f = 1750603025;
    (this || _global$r)._g = 1694076839;
    (this || _global$r)._h = 3204075428;
    return this || _global$r;
  };
  Sha224.prototype._hash = function() {
    var H3 = Buffer3.allocUnsafe(28);
    H3.writeInt32BE((this || _global$r)._a, 0);
    H3.writeInt32BE((this || _global$r)._b, 4);
    H3.writeInt32BE((this || _global$r)._c, 8);
    H3.writeInt32BE((this || _global$r)._d, 12);
    H3.writeInt32BE((this || _global$r)._e, 16);
    H3.writeInt32BE((this || _global$r)._f, 20);
    H3.writeInt32BE((this || _global$r)._g, 24);
    return H3;
  };
  exports$1L = Sha224;
  return exports$1L;
}
function dew$1J() {
  if (_dewExec$1J)
    return exports$1K;
  _dewExec$1J = true;
  var inherits4 = dew$f$2();
  var Hash2 = dew$1O();
  var Buffer3 = dew$1T().Buffer;
  var K3 = [1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591];
  var W3 = new Array(160);
  function Sha512() {
    this.init();
    (this || _global$q)._w = W3;
    Hash2.call(this || _global$q, 128, 112);
  }
  inherits4(Sha512, Hash2);
  Sha512.prototype.init = function() {
    (this || _global$q)._ah = 1779033703;
    (this || _global$q)._bh = 3144134277;
    (this || _global$q)._ch = 1013904242;
    (this || _global$q)._dh = 2773480762;
    (this || _global$q)._eh = 1359893119;
    (this || _global$q)._fh = 2600822924;
    (this || _global$q)._gh = 528734635;
    (this || _global$q)._hh = 1541459225;
    (this || _global$q)._al = 4089235720;
    (this || _global$q)._bl = 2227873595;
    (this || _global$q)._cl = 4271175723;
    (this || _global$q)._dl = 1595750129;
    (this || _global$q)._el = 2917565137;
    (this || _global$q)._fl = 725511199;
    (this || _global$q)._gl = 4215389547;
    (this || _global$q)._hl = 327033209;
    return this || _global$q;
  };
  function Ch(x4, y6, z5) {
    return z5 ^ x4 & (y6 ^ z5);
  }
  function maj(x4, y6, z5) {
    return x4 & y6 | z5 & (x4 | y6);
  }
  function sigma0(x4, xl) {
    return (x4 >>> 28 | xl << 4) ^ (xl >>> 2 | x4 << 30) ^ (xl >>> 7 | x4 << 25);
  }
  function sigma1(x4, xl) {
    return (x4 >>> 14 | xl << 18) ^ (x4 >>> 18 | xl << 14) ^ (xl >>> 9 | x4 << 23);
  }
  function Gamma0(x4, xl) {
    return (x4 >>> 1 | xl << 31) ^ (x4 >>> 8 | xl << 24) ^ x4 >>> 7;
  }
  function Gamma0l(x4, xl) {
    return (x4 >>> 1 | xl << 31) ^ (x4 >>> 8 | xl << 24) ^ (x4 >>> 7 | xl << 25);
  }
  function Gamma1(x4, xl) {
    return (x4 >>> 19 | xl << 13) ^ (xl >>> 29 | x4 << 3) ^ x4 >>> 6;
  }
  function Gamma1l(x4, xl) {
    return (x4 >>> 19 | xl << 13) ^ (xl >>> 29 | x4 << 3) ^ (x4 >>> 6 | xl << 26);
  }
  function getCarry(a8, b5) {
    return a8 >>> 0 < b5 >>> 0 ? 1 : 0;
  }
  Sha512.prototype._update = function(M4) {
    var W4 = (this || _global$q)._w;
    var ah = (this || _global$q)._ah | 0;
    var bh = (this || _global$q)._bh | 0;
    var ch = (this || _global$q)._ch | 0;
    var dh = (this || _global$q)._dh | 0;
    var eh = (this || _global$q)._eh | 0;
    var fh = (this || _global$q)._fh | 0;
    var gh = (this || _global$q)._gh | 0;
    var hh = (this || _global$q)._hh | 0;
    var al = (this || _global$q)._al | 0;
    var bl = (this || _global$q)._bl | 0;
    var cl = (this || _global$q)._cl | 0;
    var dl = (this || _global$q)._dl | 0;
    var el = (this || _global$q)._el | 0;
    var fl = (this || _global$q)._fl | 0;
    var gl = (this || _global$q)._gl | 0;
    var hl = (this || _global$q)._hl | 0;
    for (var i8 = 0; i8 < 32; i8 += 2) {
      W4[i8] = M4.readInt32BE(i8 * 4);
      W4[i8 + 1] = M4.readInt32BE(i8 * 4 + 4);
    }
    for (; i8 < 160; i8 += 2) {
      var xh = W4[i8 - 15 * 2];
      var xl = W4[i8 - 15 * 2 + 1];
      var gamma0 = Gamma0(xh, xl);
      var gamma0l = Gamma0l(xl, xh);
      xh = W4[i8 - 2 * 2];
      xl = W4[i8 - 2 * 2 + 1];
      var gamma1 = Gamma1(xh, xl);
      var gamma1l = Gamma1l(xl, xh);
      var Wi7h = W4[i8 - 7 * 2];
      var Wi7l = W4[i8 - 7 * 2 + 1];
      var Wi16h = W4[i8 - 16 * 2];
      var Wi16l = W4[i8 - 16 * 2 + 1];
      var Wil = gamma0l + Wi7l | 0;
      var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;
      Wil = Wil + gamma1l | 0;
      Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;
      Wil = Wil + Wi16l | 0;
      Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;
      W4[i8] = Wih;
      W4[i8 + 1] = Wil;
    }
    for (var j4 = 0; j4 < 160; j4 += 2) {
      Wih = W4[j4];
      Wil = W4[j4 + 1];
      var majh = maj(ah, bh, ch);
      var majl = maj(al, bl, cl);
      var sigma0h = sigma0(ah, al);
      var sigma0l = sigma0(al, ah);
      var sigma1h = sigma1(eh, el);
      var sigma1l = sigma1(el, eh);
      var Kih = K3[j4];
      var Kil = K3[j4 + 1];
      var chh = Ch(eh, fh, gh);
      var chl = Ch(el, fl, gl);
      var t1l = hl + sigma1l | 0;
      var t1h = hh + sigma1h + getCarry(t1l, hl) | 0;
      t1l = t1l + chl | 0;
      t1h = t1h + chh + getCarry(t1l, chl) | 0;
      t1l = t1l + Kil | 0;
      t1h = t1h + Kih + getCarry(t1l, Kil) | 0;
      t1l = t1l + Wil | 0;
      t1h = t1h + Wih + getCarry(t1l, Wil) | 0;
      var t2l = sigma0l + majl | 0;
      var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;
      hh = gh;
      hl = gl;
      gh = fh;
      gl = fl;
      fh = eh;
      fl = el;
      el = dl + t1l | 0;
      eh = dh + t1h + getCarry(el, dl) | 0;
      dh = ch;
      dl = cl;
      ch = bh;
      cl = bl;
      bh = ah;
      bl = al;
      al = t1l + t2l | 0;
      ah = t1h + t2h + getCarry(al, t1l) | 0;
    }
    (this || _global$q)._al = (this || _global$q)._al + al | 0;
    (this || _global$q)._bl = (this || _global$q)._bl + bl | 0;
    (this || _global$q)._cl = (this || _global$q)._cl + cl | 0;
    (this || _global$q)._dl = (this || _global$q)._dl + dl | 0;
    (this || _global$q)._el = (this || _global$q)._el + el | 0;
    (this || _global$q)._fl = (this || _global$q)._fl + fl | 0;
    (this || _global$q)._gl = (this || _global$q)._gl + gl | 0;
    (this || _global$q)._hl = (this || _global$q)._hl + hl | 0;
    (this || _global$q)._ah = (this || _global$q)._ah + ah + getCarry((this || _global$q)._al, al) | 0;
    (this || _global$q)._bh = (this || _global$q)._bh + bh + getCarry((this || _global$q)._bl, bl) | 0;
    (this || _global$q)._ch = (this || _global$q)._ch + ch + getCarry((this || _global$q)._cl, cl) | 0;
    (this || _global$q)._dh = (this || _global$q)._dh + dh + getCarry((this || _global$q)._dl, dl) | 0;
    (this || _global$q)._eh = (this || _global$q)._eh + eh + getCarry((this || _global$q)._el, el) | 0;
    (this || _global$q)._fh = (this || _global$q)._fh + fh + getCarry((this || _global$q)._fl, fl) | 0;
    (this || _global$q)._gh = (this || _global$q)._gh + gh + getCarry((this || _global$q)._gl, gl) | 0;
    (this || _global$q)._hh = (this || _global$q)._hh + hh + getCarry((this || _global$q)._hl, hl) | 0;
  };
  Sha512.prototype._hash = function() {
    var H3 = Buffer3.allocUnsafe(64);
    function writeInt64BE(h8, l8, offset) {
      H3.writeInt32BE(h8, offset);
      H3.writeInt32BE(l8, offset + 4);
    }
    writeInt64BE((this || _global$q)._ah, (this || _global$q)._al, 0);
    writeInt64BE((this || _global$q)._bh, (this || _global$q)._bl, 8);
    writeInt64BE((this || _global$q)._ch, (this || _global$q)._cl, 16);
    writeInt64BE((this || _global$q)._dh, (this || _global$q)._dl, 24);
    writeInt64BE((this || _global$q)._eh, (this || _global$q)._el, 32);
    writeInt64BE((this || _global$q)._fh, (this || _global$q)._fl, 40);
    writeInt64BE((this || _global$q)._gh, (this || _global$q)._gl, 48);
    writeInt64BE((this || _global$q)._hh, (this || _global$q)._hl, 56);
    return H3;
  };
  exports$1K = Sha512;
  return exports$1K;
}
function dew$1I() {
  if (_dewExec$1I)
    return exports$1J;
  _dewExec$1I = true;
  var inherits4 = dew$f$2();
  var SHA512 = dew$1J();
  var Hash2 = dew$1O();
  var Buffer3 = dew$1T().Buffer;
  var W3 = new Array(160);
  function Sha384() {
    this.init();
    (this || _global$p)._w = W3;
    Hash2.call(this || _global$p, 128, 112);
  }
  inherits4(Sha384, SHA512);
  Sha384.prototype.init = function() {
    (this || _global$p)._ah = 3418070365;
    (this || _global$p)._bh = 1654270250;
    (this || _global$p)._ch = 2438529370;
    (this || _global$p)._dh = 355462360;
    (this || _global$p)._eh = 1731405415;
    (this || _global$p)._fh = 2394180231;
    (this || _global$p)._gh = 3675008525;
    (this || _global$p)._hh = 1203062813;
    (this || _global$p)._al = 3238371032;
    (this || _global$p)._bl = 914150663;
    (this || _global$p)._cl = 812702999;
    (this || _global$p)._dl = 4144912697;
    (this || _global$p)._el = 4290775857;
    (this || _global$p)._fl = 1750603025;
    (this || _global$p)._gl = 1694076839;
    (this || _global$p)._hl = 3204075428;
    return this || _global$p;
  };
  Sha384.prototype._hash = function() {
    var H3 = Buffer3.allocUnsafe(48);
    function writeInt64BE(h8, l8, offset) {
      H3.writeInt32BE(h8, offset);
      H3.writeInt32BE(l8, offset + 4);
    }
    writeInt64BE((this || _global$p)._ah, (this || _global$p)._al, 0);
    writeInt64BE((this || _global$p)._bh, (this || _global$p)._bl, 8);
    writeInt64BE((this || _global$p)._ch, (this || _global$p)._cl, 16);
    writeInt64BE((this || _global$p)._dh, (this || _global$p)._dl, 24);
    writeInt64BE((this || _global$p)._eh, (this || _global$p)._el, 32);
    writeInt64BE((this || _global$p)._fh, (this || _global$p)._fl, 40);
    return H3;
  };
  exports$1J = Sha384;
  return exports$1J;
}
function dew$1H() {
  if (_dewExec$1H)
    return module$7.exports;
  _dewExec$1H = true;
  var exports11 = module$7.exports = function SHA(algorithm) {
    algorithm = algorithm.toLowerCase();
    var Algorithm = exports11[algorithm];
    if (!Algorithm)
      throw new Error(algorithm + " is not supported (we accept pull requests)");
    return new Algorithm();
  };
  exports11.sha = dew$1N();
  exports11.sha1 = dew$1M();
  exports11.sha224 = dew$1K();
  exports11.sha256 = dew$1L();
  exports11.sha384 = dew$1I();
  exports11.sha512 = dew$1J();
  return module$7.exports;
}
function n$q(e11, n9, r9) {
  r9 || (r9 = Error);
  class o9 extends r9 {
    constructor(e12, t8, r10) {
      super(function(e13, t9, r11) {
        return "string" == typeof n9 ? n9 : n9(e13, t9, r11);
      }(e12, t8, r10));
    }
  }
  o9.prototype.name = r9.name, o9.prototype.code = e11, t$c[e11] = o9;
}
function r$h(e11, t8) {
  if (Array.isArray(e11)) {
    const n9 = e11.length;
    return e11 = e11.map((e12) => String(e12)), n9 > 2 ? `one of ${t8} ${e11.slice(0, n9 - 1).join(", ")}, or ` + e11[n9 - 1] : 2 === n9 ? `one of ${t8} ${e11[0]} or ${e11[1]}` : `of ${t8} ${e11[0]}`;
  }
  return `of ${t8} ${String(e11)}`;
}
function e$2$1(e11) {
  try {
    if (!r$2$1.localStorage)
      return false;
  } catch (r9) {
    return false;
  }
  var t8 = r$2$1.localStorage[e11];
  return null != t8 && "true" === String(t8).toLowerCase();
}
function u$p(e11, t8) {
  var n9 = Object.keys(e11);
  if (Object.getOwnPropertySymbols) {
    var r9 = Object.getOwnPropertySymbols(e11);
    t8 && (r9 = r9.filter(function(t9) {
      return Object.getOwnPropertyDescriptor(e11, t9).enumerable;
    })), n9.push.apply(n9, r9);
  }
  return n9;
}
function f$v(e11, t8, n9) {
  return t8 in e11 ? Object.defineProperty(e11, t8, { value: n9, enumerable: true, configurable: true, writable: true }) : e11[t8] = n9, e11;
}
function h$l(e11, t8) {
  for (var n9 = 0; n9 < t8.length; n9++) {
    var r9 = t8[n9];
    r9.enumerable = r9.enumerable || false, r9.configurable = true, "value" in r9 && (r9.writable = true), Object.defineProperty(e11, r9.key, r9);
  }
}
function w$j(e11, t8) {
  _$h(e11, t8), v$k(e11);
}
function v$k(e11) {
  e11._writableState && !e11._writableState.emitClose || e11._readableState && !e11._readableState.emitClose || e11.emit("close");
}
function _$h(e11, t8) {
  e11.emit("error", t8);
}
function E$e() {
}
function T$8(e11, t8, n9) {
  return t8 in e11 ? Object.defineProperty(e11, t8, { value: n9, enumerable: true, configurable: true, writable: true }) : e11[t8] = n9, e11;
}
function B$c(e11, t8) {
  return { value: e11, done: t8 };
}
function I$b(e11) {
  var t8 = e11[x$a];
  if (null !== t8) {
    var n9 = e11[W$5].read();
    null !== n9 && (e11[A$c] = null, e11[x$a] = null, e11[L$8] = null, t8(B$c(n9, false)));
  }
}
function N$7(e11) {
  O$8.nextTick(I$b, e11);
}
function K$8() {
  if (G$5)
    return V$6;
  G$5 = true;
  var d6, u8 = T;
  V$6 = C4, C4.ReadableState = D4;
  y.EventEmitter;
  var f9 = function(e11, t8) {
    return e11.listeners(t8).length;
  }, h8 = e$g, c8 = e$1$1.Buffer, b5 = Y$4.Uint8Array || function() {
  };
  var p8, y6 = X;
  p8 = y6 && y6.debuglog ? y6.debuglog("stream") : function() {
  };
  var w4, v6, _4, S4 = g$h, k4 = m$m, E4 = R$7.getHighWaterMark, M4 = e$1$12.codes, j4 = M4.ERR_INVALID_ARG_TYPE, O5 = M4.ERR_STREAM_PUSH_AFTER_EOF, T5 = M4.ERR_METHOD_NOT_IMPLEMENTED, P4 = M4.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
  t$2(C4, h8);
  var x4 = k4.errorOrDestroy, L4 = ["error", "close", "destroy", "pause", "resume"];
  function D4(e11, t8, n9) {
    d6 = d6 || ee$1(), e11 = e11 || {}, "boolean" != typeof n9 && (n9 = t8 instanceof d6), this.objectMode = !!e11.objectMode, n9 && (this.objectMode = this.objectMode || !!e11.readableObjectMode), this.highWaterMark = E4(this, e11, "readableHighWaterMark", n9), this.buffer = new S4(), this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = false, this.endEmitted = false, this.reading = false, this.sync = true, this.needReadable = false, this.emittedReadable = false, this.readableListening = false, this.resumeScheduled = false, this.paused = true, this.emitClose = false !== e11.emitClose, this.autoDestroy = !!e11.autoDestroy, this.destroyed = false, this.defaultEncoding = e11.defaultEncoding || "utf8", this.awaitDrain = 0, this.readingMore = false, this.decoder = null, this.encoding = null, e11.encoding && (w4 || (w4 = e$12.StringDecoder), this.decoder = new w4(e11.encoding), this.encoding = e11.encoding);
  }
  function C4(e11) {
    if (d6 = d6 || ee$1(), !(this instanceof C4))
      return new C4(e11);
    var t8 = this instanceof d6;
    this._readableState = new D4(e11, this, t8), this.readable = true, e11 && ("function" == typeof e11.read && (this._read = e11.read), "function" == typeof e11.destroy && (this._destroy = e11.destroy)), h8.call(this);
  }
  function A4(e11, t8, n9, r9, i8) {
    p8("readableAddChunk", t8);
    var a8, o9 = e11._readableState;
    if (null === t8)
      o9.reading = false, function(e12, t9) {
        if (p8("onEofChunk"), t9.ended)
          return;
        if (t9.decoder) {
          var n10 = t9.decoder.end();
          n10 && n10.length && (t9.buffer.push(n10), t9.length += t9.objectMode ? 1 : n10.length);
        }
        t9.ended = true, t9.sync ? B4(e12) : (t9.needReadable = false, t9.emittedReadable || (t9.emittedReadable = true, I4(e12)));
      }(e11, o9);
    else if (i8 || (a8 = function(e12, t9) {
      var n10;
      r10 = t9, c8.isBuffer(r10) || r10 instanceof b5 || "string" == typeof t9 || void 0 === t9 || e12.objectMode || (n10 = new j4("chunk", ["string", "Buffer", "Uint8Array"], t9));
      var r10;
      return n10;
    }(o9, t8)), a8)
      x4(e11, a8);
    else if (o9.objectMode || t8 && t8.length > 0)
      if ("string" == typeof t8 || o9.objectMode || Object.getPrototypeOf(t8) === c8.prototype || (t8 = function(e12) {
        return c8.from(e12);
      }(t8)), r9)
        o9.endEmitted ? x4(e11, new P4()) : q3(e11, o9, t8, true);
      else if (o9.ended)
        x4(e11, new O5());
      else {
        if (o9.destroyed)
          return false;
        o9.reading = false, o9.decoder && !n9 ? (t8 = o9.decoder.write(t8), o9.objectMode || 0 !== t8.length ? q3(e11, o9, t8, false) : N4(e11, o9)) : q3(e11, o9, t8, false);
      }
    else
      r9 || (o9.reading = false, N4(e11, o9));
    return !o9.ended && (o9.length < o9.highWaterMark || 0 === o9.length);
  }
  function q3(e11, t8, n9, r9) {
    t8.flowing && 0 === t8.length && !t8.sync ? (t8.awaitDrain = 0, e11.emit("data", n9)) : (t8.length += t8.objectMode ? 1 : n9.length, r9 ? t8.buffer.unshift(n9) : t8.buffer.push(n9), t8.needReadable && B4(e11)), N4(e11, t8);
  }
  Object.defineProperty(C4.prototype, "destroyed", { enumerable: false, get: function() {
    return void 0 !== this._readableState && this._readableState.destroyed;
  }, set: function(e11) {
    this._readableState && (this._readableState.destroyed = e11);
  } }), C4.prototype.destroy = k4.destroy, C4.prototype._undestroy = k4.undestroy, C4.prototype._destroy = function(e11, t8) {
    t8(e11);
  }, C4.prototype.push = function(e11, t8) {
    var n9, r9 = this._readableState;
    return r9.objectMode ? n9 = true : "string" == typeof e11 && ((t8 = t8 || r9.defaultEncoding) !== r9.encoding && (e11 = c8.from(e11, t8), t8 = ""), n9 = true), A4(this, e11, t8, false, n9);
  }, C4.prototype.unshift = function(e11) {
    return A4(this, e11, null, true, false);
  }, C4.prototype.isPaused = function() {
    return false === this._readableState.flowing;
  }, C4.prototype.setEncoding = function(e11) {
    w4 || (w4 = e$12.StringDecoder);
    var t8 = new w4(e11);
    this._readableState.decoder = t8, this._readableState.encoding = this._readableState.decoder.encoding;
    for (var n9 = this._readableState.buffer.head, r9 = ""; null !== n9; )
      r9 += t8.write(n9.data), n9 = n9.next;
    return this._readableState.buffer.clear(), "" !== r9 && this._readableState.buffer.push(r9), this._readableState.length = r9.length, this;
  };
  function W3(e11, t8) {
    return e11 <= 0 || 0 === t8.length && t8.ended ? 0 : t8.objectMode ? 1 : e11 != e11 ? t8.flowing && t8.length ? t8.buffer.head.data.length : t8.length : (e11 > t8.highWaterMark && (t8.highWaterMark = function(e12) {
      return e12 >= 1073741824 ? e12 = 1073741824 : (e12--, e12 |= e12 >>> 1, e12 |= e12 >>> 2, e12 |= e12 >>> 4, e12 |= e12 >>> 8, e12 |= e12 >>> 16, e12++), e12;
    }(e11)), e11 <= t8.length ? e11 : t8.ended ? t8.length : (t8.needReadable = true, 0));
  }
  function B4(e11) {
    var t8 = e11._readableState;
    p8("emitReadable", t8.needReadable, t8.emittedReadable), t8.needReadable = false, t8.emittedReadable || (p8("emitReadable", t8.flowing), t8.emittedReadable = true, u8.nextTick(I4, e11));
  }
  function I4(e11) {
    var t8 = e11._readableState;
    p8("emitReadable_", t8.destroyed, t8.length, t8.ended), t8.destroyed || !t8.length && !t8.ended || (e11.emit("readable"), t8.emittedReadable = false), t8.needReadable = !t8.flowing && !t8.ended && t8.length <= t8.highWaterMark, J3(e11);
  }
  function N4(e11, t8) {
    t8.readingMore || (t8.readingMore = true, u8.nextTick(U4, e11, t8));
  }
  function U4(e11, t8) {
    for (; !t8.reading && !t8.ended && (t8.length < t8.highWaterMark || t8.flowing && 0 === t8.length); ) {
      var n9 = t8.length;
      if (p8("maybeReadMore read 0"), e11.read(0), n9 === t8.length)
        break;
    }
    t8.readingMore = false;
  }
  function H3(e11) {
    var t8 = e11._readableState;
    t8.readableListening = e11.listenerCount("readable") > 0, t8.resumeScheduled && !t8.paused ? t8.flowing = true : e11.listenerCount("data") > 0 && e11.resume();
  }
  function K3(e11) {
    p8("readable nexttick read 0"), e11.read(0);
  }
  function z5(e11, t8) {
    p8("resume", t8.reading), t8.reading || e11.read(0), t8.resumeScheduled = false, e11.emit("resume"), J3(e11), t8.flowing && !t8.reading && e11.read(0);
  }
  function J3(e11) {
    var t8 = e11._readableState;
    for (p8("flow", t8.flowing); t8.flowing && null !== e11.read(); )
      ;
  }
  function Q3(e11, t8) {
    return 0 === t8.length ? null : (t8.objectMode ? n9 = t8.buffer.shift() : !e11 || e11 >= t8.length ? (n9 = t8.decoder ? t8.buffer.join("") : 1 === t8.buffer.length ? t8.buffer.first() : t8.buffer.concat(t8.length), t8.buffer.clear()) : n9 = t8.buffer.consume(e11, t8.decoder), n9);
    var n9;
  }
  function X3(e11) {
    var t8 = e11._readableState;
    p8("endReadable", t8.endEmitted), t8.endEmitted || (t8.ended = true, u8.nextTick(Z3, t8, e11));
  }
  function Z3(e11, t8) {
    if (p8("endReadableNT", e11.endEmitted, e11.length), !e11.endEmitted && 0 === e11.length && (e11.endEmitted = true, t8.readable = false, t8.emit("end"), e11.autoDestroy)) {
      var n9 = t8._writableState;
      (!n9 || n9.autoDestroy && n9.finished) && t8.destroy();
    }
  }
  function $3(e11, t8) {
    for (var n9 = 0, r9 = e11.length; n9 < r9; n9++)
      if (e11[n9] === t8)
        return n9;
    return -1;
  }
  return C4.prototype.read = function(e11) {
    p8("read", e11), e11 = parseInt(e11, 10);
    var t8 = this._readableState, n9 = e11;
    if (0 !== e11 && (t8.emittedReadable = false), 0 === e11 && t8.needReadable && ((0 !== t8.highWaterMark ? t8.length >= t8.highWaterMark : t8.length > 0) || t8.ended))
      return p8("read: emitReadable", t8.length, t8.ended), 0 === t8.length && t8.ended ? X3(this) : B4(this), null;
    if (0 === (e11 = W3(e11, t8)) && t8.ended)
      return 0 === t8.length && X3(this), null;
    var r9, i8 = t8.needReadable;
    return p8("need readable", i8), (0 === t8.length || t8.length - e11 < t8.highWaterMark) && p8("length less than watermark", i8 = true), t8.ended || t8.reading ? p8("reading or ended", i8 = false) : i8 && (p8("do read"), t8.reading = true, t8.sync = true, 0 === t8.length && (t8.needReadable = true), this._read(t8.highWaterMark), t8.sync = false, t8.reading || (e11 = W3(n9, t8))), null === (r9 = e11 > 0 ? Q3(e11, t8) : null) ? (t8.needReadable = t8.length <= t8.highWaterMark, e11 = 0) : (t8.length -= e11, t8.awaitDrain = 0), 0 === t8.length && (t8.ended || (t8.needReadable = true), n9 !== e11 && t8.ended && X3(this)), null !== r9 && this.emit("data", r9), r9;
  }, C4.prototype._read = function(e11) {
    x4(this, new T5("_read()"));
  }, C4.prototype.pipe = function(e11, t8) {
    var n9 = this, r9 = this._readableState;
    switch (r9.pipesCount) {
      case 0:
        r9.pipes = e11;
        break;
      case 1:
        r9.pipes = [r9.pipes, e11];
        break;
      default:
        r9.pipes.push(e11);
    }
    r9.pipesCount += 1, p8("pipe count=%d opts=%j", r9.pipesCount, t8);
    var i8 = (!t8 || false !== t8.end) && e11 !== u8.stdout && e11 !== u8.stderr ? o9 : g5;
    function a8(t9, i9) {
      p8("onunpipe"), t9 === n9 && i9 && false === i9.hasUnpiped && (i9.hasUnpiped = true, p8("cleanup"), e11.removeListener("close", c9), e11.removeListener("finish", b6), e11.removeListener("drain", s7), e11.removeListener("error", h9), e11.removeListener("unpipe", a8), n9.removeListener("end", o9), n9.removeListener("end", g5), n9.removeListener("data", d7), l8 = true, !r9.awaitDrain || e11._writableState && !e11._writableState.needDrain || s7());
    }
    function o9() {
      p8("onend"), e11.end();
    }
    r9.endEmitted ? u8.nextTick(i8) : n9.once("end", i8), e11.on("unpipe", a8);
    var s7 = function(e12) {
      return function() {
        var t9 = e12._readableState;
        p8("pipeOnDrain", t9.awaitDrain), t9.awaitDrain && t9.awaitDrain--, 0 === t9.awaitDrain && f9(e12, "data") && (t9.flowing = true, J3(e12));
      };
    }(n9);
    e11.on("drain", s7);
    var l8 = false;
    function d7(t9) {
      p8("ondata");
      var i9 = e11.write(t9);
      p8("dest.write", i9), false === i9 && ((1 === r9.pipesCount && r9.pipes === e11 || r9.pipesCount > 1 && -1 !== $3(r9.pipes, e11)) && !l8 && (p8("false write response, pause", r9.awaitDrain), r9.awaitDrain++), n9.pause());
    }
    function h9(t9) {
      p8("onerror", t9), g5(), e11.removeListener("error", h9), 0 === f9(e11, "error") && x4(e11, t9);
    }
    function c9() {
      e11.removeListener("finish", b6), g5();
    }
    function b6() {
      p8("onfinish"), e11.removeListener("close", c9), g5();
    }
    function g5() {
      p8("unpipe"), n9.unpipe(e11);
    }
    return n9.on("data", d7), function(e12, t9, n10) {
      if ("function" == typeof e12.prependListener)
        return e12.prependListener(t9, n10);
      e12._events && e12._events[t9] ? Array.isArray(e12._events[t9]) ? e12._events[t9].unshift(n10) : e12._events[t9] = [n10, e12._events[t9]] : e12.on(t9, n10);
    }(e11, "error", h9), e11.once("close", c9), e11.once("finish", b6), e11.emit("pipe", n9), r9.flowing || (p8("pipe resume"), n9.resume()), e11;
  }, C4.prototype.unpipe = function(e11) {
    var t8 = this._readableState, n9 = { hasUnpiped: false };
    if (0 === t8.pipesCount)
      return this;
    if (1 === t8.pipesCount)
      return e11 && e11 !== t8.pipes || (e11 || (e11 = t8.pipes), t8.pipes = null, t8.pipesCount = 0, t8.flowing = false, e11 && e11.emit("unpipe", this, n9)), this;
    if (!e11) {
      var r9 = t8.pipes, i8 = t8.pipesCount;
      t8.pipes = null, t8.pipesCount = 0, t8.flowing = false;
      for (var a8 = 0; a8 < i8; a8++)
        r9[a8].emit("unpipe", this, { hasUnpiped: false });
      return this;
    }
    var o9 = $3(t8.pipes, e11);
    return -1 === o9 || (t8.pipes.splice(o9, 1), t8.pipesCount -= 1, 1 === t8.pipesCount && (t8.pipes = t8.pipes[0]), e11.emit("unpipe", this, n9)), this;
  }, C4.prototype.on = function(e11, t8) {
    var n9 = h8.prototype.on.call(this, e11, t8), r9 = this._readableState;
    return "data" === e11 ? (r9.readableListening = this.listenerCount("readable") > 0, false !== r9.flowing && this.resume()) : "readable" === e11 && (r9.endEmitted || r9.readableListening || (r9.readableListening = r9.needReadable = true, r9.flowing = false, r9.emittedReadable = false, p8("on readable", r9.length, r9.reading), r9.length ? B4(this) : r9.reading || u8.nextTick(K3, this))), n9;
  }, C4.prototype.addListener = C4.prototype.on, C4.prototype.removeListener = function(e11, t8) {
    var n9 = h8.prototype.removeListener.call(this, e11, t8);
    return "readable" === e11 && u8.nextTick(H3, this), n9;
  }, C4.prototype.removeAllListeners = function(e11) {
    var t8 = h8.prototype.removeAllListeners.apply(this, arguments);
    return "readable" !== e11 && void 0 !== e11 || u8.nextTick(H3, this), t8;
  }, C4.prototype.resume = function() {
    var e11 = this._readableState;
    return e11.flowing || (p8("resume"), e11.flowing = !e11.readableListening, function(e12, t8) {
      t8.resumeScheduled || (t8.resumeScheduled = true, u8.nextTick(z5, e12, t8));
    }(this, e11)), e11.paused = false, this;
  }, C4.prototype.pause = function() {
    return p8("call pause flowing=%j", this._readableState.flowing), false !== this._readableState.flowing && (p8("pause"), this._readableState.flowing = false, this.emit("pause")), this._readableState.paused = true, this;
  }, C4.prototype.wrap = function(e11) {
    var t8 = this, n9 = this._readableState, r9 = false;
    for (var i8 in e11.on("end", function() {
      if (p8("wrapped end"), n9.decoder && !n9.ended) {
        var e12 = n9.decoder.end();
        e12 && e12.length && t8.push(e12);
      }
      t8.push(null);
    }), e11.on("data", function(i9) {
      (p8("wrapped data"), n9.decoder && (i9 = n9.decoder.write(i9)), n9.objectMode && null == i9) || (n9.objectMode || i9 && i9.length) && (t8.push(i9) || (r9 = true, e11.pause()));
    }), e11)
      void 0 === this[i8] && "function" == typeof e11[i8] && (this[i8] = function(t9) {
        return function() {
          return e11[t9].apply(e11, arguments);
        };
      }(i8));
    for (var a8 = 0; a8 < L4.length; a8++)
      e11.on(L4[a8], this.emit.bind(this, L4[a8]));
    return this._read = function(t9) {
      p8("wrapped _read", t9), r9 && (r9 = false, e11.resume());
    }, this;
  }, "function" == typeof Symbol && (C4.prototype[Symbol.asyncIterator] = function() {
    return void 0 === v6 && (v6 = F$8), v6(this);
  }), Object.defineProperty(C4.prototype, "readableHighWaterMark", { enumerable: false, get: function() {
    return this._readableState.highWaterMark;
  } }), Object.defineProperty(C4.prototype, "readableBuffer", { enumerable: false, get: function() {
    return this._readableState && this._readableState.buffer;
  } }), Object.defineProperty(C4.prototype, "readableFlowing", { enumerable: false, get: function() {
    return this._readableState.flowing;
  }, set: function(e11) {
    this._readableState && (this._readableState.flowing = e11);
  } }), C4._fromList = Q3, Object.defineProperty(C4.prototype, "readableLength", { enumerable: false, get: function() {
    return this._readableState.length;
  } }), "function" == typeof Symbol && (C4.from = function(e11, t8) {
    return void 0 === _4 && (_4 = r$1$1), _4(C4, e11, t8);
  }), V$6;
}
function X$4() {
  if (J$5)
    return z$9;
  J$5 = true;
  var e$22, r9 = T;
  function s7(e11) {
    var t8 = this;
    this.next = null, this.entry = null, this.finish = function() {
      !function(e12, t9, n9) {
        var r10 = e12.entry;
        e12.entry = null;
        for (; r10; ) {
          var i8 = r10.callback;
          t9.pendingcb--, i8(n9), r10 = r10.next;
        }
        t9.corkedRequestsFree.next = e12;
      }(t8, e11);
    };
  }
  z$9 = P4, P4.WritableState = T5;
  var l8 = { deprecate: t$1$1 }, u8 = e$g, f9 = e$1$1.Buffer, h8 = Q$4.Uint8Array || function() {
  };
  var c8, b5 = m$m, p8 = R$7.getHighWaterMark, g5 = e$1$12.codes, y6 = g5.ERR_INVALID_ARG_TYPE, w4 = g5.ERR_METHOD_NOT_IMPLEMENTED, v6 = g5.ERR_MULTIPLE_CALLBACK, _4 = g5.ERR_STREAM_CANNOT_PIPE, S4 = g5.ERR_STREAM_DESTROYED, k4 = g5.ERR_STREAM_NULL_VALUES, E4 = g5.ERR_STREAM_WRITE_AFTER_END, M4 = g5.ERR_UNKNOWN_ENCODING, j4 = b5.errorOrDestroy;
  function O5() {
  }
  function T5(t8, n9, i8) {
    e$22 = e$22 || ee$1(), t8 = t8 || {}, "boolean" != typeof i8 && (i8 = n9 instanceof e$22), this.objectMode = !!t8.objectMode, i8 && (this.objectMode = this.objectMode || !!t8.writableObjectMode), this.highWaterMark = p8(this, t8, "writableHighWaterMark", i8), this.finalCalled = false, this.needDrain = false, this.ending = false, this.ended = false, this.finished = false, this.destroyed = false;
    var a8 = false === t8.decodeStrings;
    this.decodeStrings = !a8, this.defaultEncoding = t8.defaultEncoding || "utf8", this.length = 0, this.writing = false, this.corked = 0, this.sync = true, this.bufferProcessing = false, this.onwrite = function(e11) {
      !function(e12, t9) {
        var n10 = e12._writableState, i9 = n10.sync, a9 = n10.writecb;
        if ("function" != typeof a9)
          throw new v6();
        if (function(e13) {
          e13.writing = false, e13.writecb = null, e13.length -= e13.writelen, e13.writelen = 0;
        }(n10), t9)
          !function(e13, t10, n11, i10, a10) {
            --t10.pendingcb, n11 ? (r9.nextTick(a10, i10), r9.nextTick(q3, e13, t10), e13._writableState.errorEmitted = true, j4(e13, i10)) : (a10(i10), e13._writableState.errorEmitted = true, j4(e13, i10), q3(e13, t10));
          }(e12, n10, i9, t9, a9);
        else {
          var o9 = C4(n10) || e12.destroyed;
          o9 || n10.corked || n10.bufferProcessing || !n10.bufferedRequest || D4(e12, n10), i9 ? r9.nextTick(L4, e12, n10, o9, a9) : L4(e12, n10, o9, a9);
        }
      }(n9, e11);
    }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, this.prefinished = false, this.errorEmitted = false, this.emitClose = false !== t8.emitClose, this.autoDestroy = !!t8.autoDestroy, this.bufferedRequestCount = 0, this.corkedRequestsFree = new s7(this);
  }
  function P4(t8) {
    var n9 = this instanceof (e$22 = e$22 || ee$1());
    if (!n9 && !c8.call(P4, this))
      return new P4(t8);
    this._writableState = new T5(t8, this, n9), this.writable = true, t8 && ("function" == typeof t8.write && (this._write = t8.write), "function" == typeof t8.writev && (this._writev = t8.writev), "function" == typeof t8.destroy && (this._destroy = t8.destroy), "function" == typeof t8.final && (this._final = t8.final)), u8.call(this);
  }
  function x4(e11, t8, n9, r10, i8, a8, o9) {
    t8.writelen = r10, t8.writecb = o9, t8.writing = true, t8.sync = true, t8.destroyed ? t8.onwrite(new S4("write")) : n9 ? e11._writev(i8, t8.onwrite) : e11._write(i8, a8, t8.onwrite), t8.sync = false;
  }
  function L4(e11, t8, n9, r10) {
    n9 || !function(e12, t9) {
      0 === t9.length && t9.needDrain && (t9.needDrain = false, e12.emit("drain"));
    }(e11, t8), t8.pendingcb--, r10(), q3(e11, t8);
  }
  function D4(e11, t8) {
    t8.bufferProcessing = true;
    var n9 = t8.bufferedRequest;
    if (e11._writev && n9 && n9.next) {
      var r10 = t8.bufferedRequestCount, i8 = new Array(r10), a8 = t8.corkedRequestsFree;
      a8.entry = n9;
      for (var o9 = 0, l9 = true; n9; )
        i8[o9] = n9, n9.isBuf || (l9 = false), n9 = n9.next, o9 += 1;
      i8.allBuffers = l9, x4(e11, t8, true, t8.length, i8, "", a8.finish), t8.pendingcb++, t8.lastBufferedRequest = null, a8.next ? (t8.corkedRequestsFree = a8.next, a8.next = null) : t8.corkedRequestsFree = new s7(t8), t8.bufferedRequestCount = 0;
    } else {
      for (; n9; ) {
        var d6 = n9.chunk, u9 = n9.encoding, f10 = n9.callback;
        if (x4(e11, t8, false, t8.objectMode ? 1 : d6.length, d6, u9, f10), n9 = n9.next, t8.bufferedRequestCount--, t8.writing)
          break;
      }
      null === n9 && (t8.lastBufferedRequest = null);
    }
    t8.bufferedRequest = n9, t8.bufferProcessing = false;
  }
  function C4(e11) {
    return e11.ending && 0 === e11.length && null === e11.bufferedRequest && !e11.finished && !e11.writing;
  }
  function A4(e11, t8) {
    e11._final(function(n9) {
      t8.pendingcb--, n9 && j4(e11, n9), t8.prefinished = true, e11.emit("prefinish"), q3(e11, t8);
    });
  }
  function q3(e11, t8) {
    var n9 = C4(t8);
    if (n9 && (!function(e12, t9) {
      t9.prefinished || t9.finalCalled || ("function" != typeof e12._final || t9.destroyed ? (t9.prefinished = true, e12.emit("prefinish")) : (t9.pendingcb++, t9.finalCalled = true, r9.nextTick(A4, e12, t9)));
    }(e11, t8), 0 === t8.pendingcb && (t8.finished = true, e11.emit("finish"), t8.autoDestroy))) {
      var i8 = e11._readableState;
      (!i8 || i8.autoDestroy && i8.endEmitted) && e11.destroy();
    }
    return n9;
  }
  return t$2(P4, u8), T5.prototype.getBuffer = function() {
    for (var e11 = this.bufferedRequest, t8 = []; e11; )
      t8.push(e11), e11 = e11.next;
    return t8;
  }, function() {
    try {
      Object.defineProperty(T5.prototype, "buffer", { get: l8.deprecate(function() {
        return this.getBuffer();
      }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003") });
    } catch (e11) {
    }
  }(), "function" == typeof Symbol && Symbol.hasInstance && "function" == typeof Function.prototype[Symbol.hasInstance] ? (c8 = Function.prototype[Symbol.hasInstance], Object.defineProperty(P4, Symbol.hasInstance, { value: function(e11) {
    return !!c8.call(this, e11) || this === P4 && (e11 && e11._writableState instanceof T5);
  } })) : c8 = function(e11) {
    return e11 instanceof this;
  }, P4.prototype.pipe = function() {
    j4(this, new _4());
  }, P4.prototype.write = function(e11, t8, n9) {
    var i8, a8 = this._writableState, o9 = false, s8 = !a8.objectMode && (i8 = e11, f9.isBuffer(i8) || i8 instanceof h8);
    return s8 && !f9.isBuffer(e11) && (e11 = function(e12) {
      return f9.from(e12);
    }(e11)), "function" == typeof t8 && (n9 = t8, t8 = null), s8 ? t8 = "buffer" : t8 || (t8 = a8.defaultEncoding), "function" != typeof n9 && (n9 = O5), a8.ending ? function(e12, t9) {
      var n10 = new E4();
      j4(e12, n10), r9.nextTick(t9, n10);
    }(this, n9) : (s8 || function(e12, t9, n10, i9) {
      var a9;
      return null === n10 ? a9 = new k4() : "string" == typeof n10 || t9.objectMode || (a9 = new y6("chunk", ["string", "Buffer"], n10)), !a9 || (j4(e12, a9), r9.nextTick(i9, a9), false);
    }(this, a8, e11, n9)) && (a8.pendingcb++, o9 = function(e12, t9, n10, r10, i9, a9) {
      if (!n10) {
        var o10 = function(e13, t10, n11) {
          e13.objectMode || false === e13.decodeStrings || "string" != typeof t10 || (t10 = f9.from(t10, n11));
          return t10;
        }(t9, r10, i9);
        r10 !== o10 && (n10 = true, i9 = "buffer", r10 = o10);
      }
      var s9 = t9.objectMode ? 1 : r10.length;
      t9.length += s9;
      var l9 = t9.length < t9.highWaterMark;
      l9 || (t9.needDrain = true);
      if (t9.writing || t9.corked) {
        var d6 = t9.lastBufferedRequest;
        t9.lastBufferedRequest = { chunk: r10, encoding: i9, isBuf: n10, callback: a9, next: null }, d6 ? d6.next = t9.lastBufferedRequest : t9.bufferedRequest = t9.lastBufferedRequest, t9.bufferedRequestCount += 1;
      } else
        x4(e12, t9, false, s9, r10, i9, a9);
      return l9;
    }(this, a8, s8, e11, t8, n9)), o9;
  }, P4.prototype.cork = function() {
    this._writableState.corked++;
  }, P4.prototype.uncork = function() {
    var e11 = this._writableState;
    e11.corked && (e11.corked--, e11.writing || e11.corked || e11.bufferProcessing || !e11.bufferedRequest || D4(this, e11));
  }, P4.prototype.setDefaultEncoding = function(e11) {
    if ("string" == typeof e11 && (e11 = e11.toLowerCase()), !(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((e11 + "").toLowerCase()) > -1))
      throw new M4(e11);
    return this._writableState.defaultEncoding = e11, this;
  }, Object.defineProperty(P4.prototype, "writableBuffer", { enumerable: false, get: function() {
    return this._writableState && this._writableState.getBuffer();
  } }), Object.defineProperty(P4.prototype, "writableHighWaterMark", { enumerable: false, get: function() {
    return this._writableState.highWaterMark;
  } }), P4.prototype._write = function(e11, t8, n9) {
    n9(new w4("_write()"));
  }, P4.prototype._writev = null, P4.prototype.end = function(e11, t8, n9) {
    var i8 = this._writableState;
    return "function" == typeof e11 ? (n9 = e11, e11 = null, t8 = null) : "function" == typeof t8 && (n9 = t8, t8 = null), null != e11 && this.write(e11, t8), i8.corked && (i8.corked = 1, this.uncork()), i8.ending || function(e12, t9, n10) {
      t9.ending = true, q3(e12, t9), n10 && (t9.finished ? r9.nextTick(n10) : e12.once("finish", n10));
      t9.ended = true, e12.writable = false;
    }(this, i8, n9), this;
  }, Object.defineProperty(P4.prototype, "writableLength", { enumerable: false, get: function() {
    return this._writableState.length;
  } }), Object.defineProperty(P4.prototype, "destroyed", { enumerable: false, get: function() {
    return void 0 !== this._writableState && this._writableState.destroyed;
  }, set: function(e11) {
    this._writableState && (this._writableState.destroyed = e11);
  } }), P4.prototype.destroy = b5.destroy, P4.prototype._undestroy = b5.undestroy, P4.prototype._destroy = function(e11, t8) {
    t8(e11);
  }, z$9;
}
function ee$1() {
  if ($$3)
    return Z$3;
  $$3 = true;
  var e11 = T, t8 = Object.keys || function(e12) {
    var t9 = [];
    for (var n10 in e12)
      t9.push(n10);
    return t9;
  };
  Z$3 = d6;
  var n9 = K$8(), r9 = X$4();
  t$2(d6, n9);
  for (var a8 = t8(r9.prototype), s7 = 0; s7 < a8.length; s7++) {
    var l8 = a8[s7];
    d6.prototype[l8] || (d6.prototype[l8] = r9.prototype[l8]);
  }
  function d6(e12) {
    if (!(this instanceof d6))
      return new d6(e12);
    n9.call(this, e12), r9.call(this, e12), this.allowHalfOpen = true, e12 && (false === e12.readable && (this.readable = false), false === e12.writable && (this.writable = false), false === e12.allowHalfOpen && (this.allowHalfOpen = false, this.once("end", u8)));
  }
  function u8() {
    this._writableState.ended || e11.nextTick(f9, this);
  }
  function f9(e12) {
    e12.end();
  }
  return Object.defineProperty(d6.prototype, "writableHighWaterMark", { enumerable: false, get: function() {
    return this._writableState.highWaterMark;
  } }), Object.defineProperty(d6.prototype, "writableBuffer", { enumerable: false, get: function() {
    return this._writableState && this._writableState.getBuffer();
  } }), Object.defineProperty(d6.prototype, "writableLength", { enumerable: false, get: function() {
    return this._writableState.length;
  } }), Object.defineProperty(d6.prototype, "destroyed", { enumerable: false, get: function() {
    return void 0 !== this._readableState && void 0 !== this._writableState && (this._readableState.destroyed && this._writableState.destroyed);
  }, set: function(e12) {
    void 0 !== this._readableState && void 0 !== this._writableState && (this._readableState.destroyed = e12, this._writableState.destroyed = e12);
  } }), Z$3;
}
function t$3$1() {
}
function f$1$1(e11, t8) {
  var n9 = Object.keys(e11);
  if (Object.getOwnPropertySymbols) {
    var r9 = Object.getOwnPropertySymbols(e11);
    t8 && (r9 = r9.filter(function(t9) {
      return Object.getOwnPropertyDescriptor(e11, t9).enumerable;
    })), n9.push.apply(n9, r9);
  }
  return n9;
}
function h$1$12(e11, t8, n9) {
  return t8 in e11 ? Object.defineProperty(e11, t8, { value: n9, enumerable: true, configurable: true, writable: true }) : e11[t8] = n9, e11;
}
function c$1$12(e11, t8) {
  for (var n9 = 0; n9 < t8.length; n9++) {
    var r9 = t8[n9];
    r9.enumerable = r9.enumerable || false, r9.configurable = true, "value" in r9 && (r9.writable = true), Object.defineProperty(e11, r9.key, r9);
  }
}
function _$1$1(e11, t8) {
  m$1$1(e11, t8), v$1$1(e11);
}
function v$1$1(e11) {
  e11._writableState && !e11._writableState.emitClose || e11._readableState && !e11._readableState.emitClose || e11.emit("close");
}
function m$1$1(e11, t8) {
  e11.emit("error", t8);
}
function j$1$1(e11, t8, n9) {
  return t8 in e11 ? Object.defineProperty(e11, t8, { value: n9, enumerable: true, configurable: true, writable: true }) : e11[t8] = n9, e11;
}
function W$1$1(e11, t8) {
  return { value: e11, done: t8 };
}
function B$1$1(e11) {
  var t8 = e11[T$1$1];
  if (null !== t8) {
    var n9 = e11[A$1$1].read();
    null !== n9 && (e11[L$1$1] = null, e11[T$1$1] = null, e11[x$1$1] = null, t8(W$1$1(n9, false)));
  }
}
function q$1$1(e11) {
  M$1$1.nextTick(B$1$1, e11);
}
function G$1$1() {
  if (F$1$1)
    return H$1$1;
  F$1$1 = true;
  var l8, u8 = T;
  H$1$1 = C4, C4.ReadableState = L4;
  y.EventEmitter;
  var f9 = function(e11, t8) {
    return e11.listeners(t8).length;
  }, h8 = e$g, c8 = e$1$1.Buffer, b5 = V$1$1.Uint8Array || function() {
  };
  var p8, g5 = X;
  p8 = g5 && g5.debuglog ? g5.debuglog("stream") : function() {
  };
  var w4, _4, v6, m6 = y$1$1, R4 = S$1$1, k4 = E$1$1.getHighWaterMark, M4 = e$1$12.codes, j4 = M4.ERR_INVALID_ARG_TYPE, O5 = M4.ERR_STREAM_PUSH_AFTER_EOF, T5 = M4.ERR_METHOD_NOT_IMPLEMENTED, x4 = M4.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
  t$2(C4, h8);
  var P4 = R4.errorOrDestroy, D4 = ["error", "close", "destroy", "pause", "resume"];
  function L4(e11, t8, n9) {
    l8 = l8 || Z$1$1(), e11 = e11 || {}, "boolean" != typeof n9 && (n9 = t8 instanceof l8), this.objectMode = !!e11.objectMode, n9 && (this.objectMode = this.objectMode || !!e11.readableObjectMode), this.highWaterMark = k4(this, e11, "readableHighWaterMark", n9), this.buffer = new m6(), this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = false, this.endEmitted = false, this.reading = false, this.sync = true, this.needReadable = false, this.emittedReadable = false, this.readableListening = false, this.resumeScheduled = false, this.paused = true, this.emitClose = false !== e11.emitClose, this.autoDestroy = !!e11.autoDestroy, this.destroyed = false, this.defaultEncoding = e11.defaultEncoding || "utf8", this.awaitDrain = 0, this.readingMore = false, this.decoder = null, this.encoding = null, e11.encoding && (w4 || (w4 = e$12.StringDecoder), this.decoder = new w4(e11.encoding), this.encoding = e11.encoding);
  }
  function C4(e11) {
    if (l8 = l8 || Z$1$1(), !(this instanceof C4))
      return new C4(e11);
    var t8 = this instanceof l8;
    this._readableState = new L4(e11, this, t8), this.readable = true, e11 && ("function" == typeof e11.read && (this._read = e11.read), "function" == typeof e11.destroy && (this._destroy = e11.destroy)), h8.call(this);
  }
  function A4(e11, t8, n9, r9, i8) {
    p8("readableAddChunk", t8);
    var a8, o9 = e11._readableState;
    if (null === t8)
      o9.reading = false, function(e12, t9) {
        if (p8("onEofChunk"), t9.ended)
          return;
        if (t9.decoder) {
          var n10 = t9.decoder.end();
          n10 && n10.length && (t9.buffer.push(n10), t9.length += t9.objectMode ? 1 : n10.length);
        }
        t9.ended = true, t9.sync ? q3(e12) : (t9.needReadable = false, t9.emittedReadable || (t9.emittedReadable = true, I4(e12)));
      }(e11, o9);
    else if (i8 || (a8 = function(e12, t9) {
      var n10;
      r10 = t9, c8.isBuffer(r10) || r10 instanceof b5 || "string" == typeof t9 || void 0 === t9 || e12.objectMode || (n10 = new j4("chunk", ["string", "Buffer", "Uint8Array"], t9));
      var r10;
      return n10;
    }(o9, t8)), a8)
      P4(e11, a8);
    else if (o9.objectMode || t8 && t8.length > 0)
      if ("string" == typeof t8 || o9.objectMode || Object.getPrototypeOf(t8) === c8.prototype || (t8 = function(e12) {
        return c8.from(e12);
      }(t8)), r9)
        o9.endEmitted ? P4(e11, new x4()) : W3(e11, o9, t8, true);
      else if (o9.ended)
        P4(e11, new O5());
      else {
        if (o9.destroyed)
          return false;
        o9.reading = false, o9.decoder && !n9 ? (t8 = o9.decoder.write(t8), o9.objectMode || 0 !== t8.length ? W3(e11, o9, t8, false) : N4(e11, o9)) : W3(e11, o9, t8, false);
      }
    else
      r9 || (o9.reading = false, N4(e11, o9));
    return !o9.ended && (o9.length < o9.highWaterMark || 0 === o9.length);
  }
  function W3(e11, t8, n9, r9) {
    t8.flowing && 0 === t8.length && !t8.sync ? (t8.awaitDrain = 0, e11.emit("data", n9)) : (t8.length += t8.objectMode ? 1 : n9.length, r9 ? t8.buffer.unshift(n9) : t8.buffer.push(n9), t8.needReadable && q3(e11)), N4(e11, t8);
  }
  Object.defineProperty(C4.prototype, "destroyed", { enumerable: false, get: function() {
    return void 0 !== this._readableState && this._readableState.destroyed;
  }, set: function(e11) {
    this._readableState && (this._readableState.destroyed = e11);
  } }), C4.prototype.destroy = R4.destroy, C4.prototype._undestroy = R4.undestroy, C4.prototype._destroy = function(e11, t8) {
    t8(e11);
  }, C4.prototype.push = function(e11, t8) {
    var n9, r9 = this._readableState;
    return r9.objectMode ? n9 = true : "string" == typeof e11 && ((t8 = t8 || r9.defaultEncoding) !== r9.encoding && (e11 = c8.from(e11, t8), t8 = ""), n9 = true), A4(this, e11, t8, false, n9);
  }, C4.prototype.unshift = function(e11) {
    return A4(this, e11, null, true, false);
  }, C4.prototype.isPaused = function() {
    return false === this._readableState.flowing;
  }, C4.prototype.setEncoding = function(e11) {
    w4 || (w4 = e$12.StringDecoder);
    var t8 = new w4(e11);
    this._readableState.decoder = t8, this._readableState.encoding = this._readableState.decoder.encoding;
    for (var n9 = this._readableState.buffer.head, r9 = ""; null !== n9; )
      r9 += t8.write(n9.data), n9 = n9.next;
    return this._readableState.buffer.clear(), "" !== r9 && this._readableState.buffer.push(r9), this._readableState.length = r9.length, this;
  };
  function B4(e11, t8) {
    return e11 <= 0 || 0 === t8.length && t8.ended ? 0 : t8.objectMode ? 1 : e11 != e11 ? t8.flowing && t8.length ? t8.buffer.head.data.length : t8.length : (e11 > t8.highWaterMark && (t8.highWaterMark = function(e12) {
      return e12 >= 1073741824 ? e12 = 1073741824 : (e12--, e12 |= e12 >>> 1, e12 |= e12 >>> 2, e12 |= e12 >>> 4, e12 |= e12 >>> 8, e12 |= e12 >>> 16, e12++), e12;
    }(e11)), e11 <= t8.length ? e11 : t8.ended ? t8.length : (t8.needReadable = true, 0));
  }
  function q3(e11) {
    var t8 = e11._readableState;
    p8("emitReadable", t8.needReadable, t8.emittedReadable), t8.needReadable = false, t8.emittedReadable || (p8("emitReadable", t8.flowing), t8.emittedReadable = true, u8.nextTick(I4, e11));
  }
  function I4(e11) {
    var t8 = e11._readableState;
    p8("emitReadable_", t8.destroyed, t8.length, t8.ended), t8.destroyed || !t8.length && !t8.ended || (e11.emit("readable"), t8.emittedReadable = false), t8.needReadable = !t8.flowing && !t8.ended && t8.length <= t8.highWaterMark, J3(e11);
  }
  function N4(e11, t8) {
    t8.readingMore || (t8.readingMore = true, u8.nextTick(G3, e11, t8));
  }
  function G3(e11, t8) {
    for (; !t8.reading && !t8.ended && (t8.length < t8.highWaterMark || t8.flowing && 0 === t8.length); ) {
      var n9 = t8.length;
      if (p8("maybeReadMore read 0"), e11.read(0), n9 === t8.length)
        break;
    }
    t8.readingMore = false;
  }
  function Y4(e11) {
    var t8 = e11._readableState;
    t8.readableListening = e11.listenerCount("readable") > 0, t8.resumeScheduled && !t8.paused ? t8.flowing = true : e11.listenerCount("data") > 0 && e11.resume();
  }
  function K3(e11) {
    p8("readable nexttick read 0"), e11.read(0);
  }
  function z5(e11, t8) {
    p8("resume", t8.reading), t8.reading || e11.read(0), t8.resumeScheduled = false, e11.emit("resume"), J3(e11), t8.flowing && !t8.reading && e11.read(0);
  }
  function J3(e11) {
    var t8 = e11._readableState;
    for (p8("flow", t8.flowing); t8.flowing && null !== e11.read(); )
      ;
  }
  function Q3(e11, t8) {
    return 0 === t8.length ? null : (t8.objectMode ? n9 = t8.buffer.shift() : !e11 || e11 >= t8.length ? (n9 = t8.decoder ? t8.buffer.join("") : 1 === t8.buffer.length ? t8.buffer.first() : t8.buffer.concat(t8.length), t8.buffer.clear()) : n9 = t8.buffer.consume(e11, t8.decoder), n9);
    var n9;
  }
  function X3(e11) {
    var t8 = e11._readableState;
    p8("endReadable", t8.endEmitted), t8.endEmitted || (t8.ended = true, u8.nextTick($3, t8, e11));
  }
  function $3(e11, t8) {
    if (p8("endReadableNT", e11.endEmitted, e11.length), !e11.endEmitted && 0 === e11.length && (e11.endEmitted = true, t8.readable = false, t8.emit("end"), e11.autoDestroy)) {
      var n9 = t8._writableState;
      (!n9 || n9.autoDestroy && n9.finished) && t8.destroy();
    }
  }
  function ee3(e11, t8) {
    for (var n9 = 0, r9 = e11.length; n9 < r9; n9++)
      if (e11[n9] === t8)
        return n9;
    return -1;
  }
  return C4.prototype.read = function(e11) {
    p8("read", e11), e11 = parseInt(e11, 10);
    var t8 = this._readableState, n9 = e11;
    if (0 !== e11 && (t8.emittedReadable = false), 0 === e11 && t8.needReadable && ((0 !== t8.highWaterMark ? t8.length >= t8.highWaterMark : t8.length > 0) || t8.ended))
      return p8("read: emitReadable", t8.length, t8.ended), 0 === t8.length && t8.ended ? X3(this) : q3(this), null;
    if (0 === (e11 = B4(e11, t8)) && t8.ended)
      return 0 === t8.length && X3(this), null;
    var r9, i8 = t8.needReadable;
    return p8("need readable", i8), (0 === t8.length || t8.length - e11 < t8.highWaterMark) && p8("length less than watermark", i8 = true), t8.ended || t8.reading ? p8("reading or ended", i8 = false) : i8 && (p8("do read"), t8.reading = true, t8.sync = true, 0 === t8.length && (t8.needReadable = true), this._read(t8.highWaterMark), t8.sync = false, t8.reading || (e11 = B4(n9, t8))), null === (r9 = e11 > 0 ? Q3(e11, t8) : null) ? (t8.needReadable = t8.length <= t8.highWaterMark, e11 = 0) : (t8.length -= e11, t8.awaitDrain = 0), 0 === t8.length && (t8.ended || (t8.needReadable = true), n9 !== e11 && t8.ended && X3(this)), null !== r9 && this.emit("data", r9), r9;
  }, C4.prototype._read = function(e11) {
    P4(this, new T5("_read()"));
  }, C4.prototype.pipe = function(e11, t8) {
    var n9 = this, r9 = this._readableState;
    switch (r9.pipesCount) {
      case 0:
        r9.pipes = e11;
        break;
      case 1:
        r9.pipes = [r9.pipes, e11];
        break;
      default:
        r9.pipes.push(e11);
    }
    r9.pipesCount += 1, p8("pipe count=%d opts=%j", r9.pipesCount, t8);
    var i8 = (!t8 || false !== t8.end) && e11 !== u8.stdout && e11 !== u8.stderr ? o9 : g6;
    function a8(t9, i9) {
      p8("onunpipe"), t9 === n9 && i9 && false === i9.hasUnpiped && (i9.hasUnpiped = true, p8("cleanup"), e11.removeListener("close", c9), e11.removeListener("finish", b6), e11.removeListener("drain", s7), e11.removeListener("error", h9), e11.removeListener("unpipe", a8), n9.removeListener("end", o9), n9.removeListener("end", g6), n9.removeListener("data", d6), l9 = true, !r9.awaitDrain || e11._writableState && !e11._writableState.needDrain || s7());
    }
    function o9() {
      p8("onend"), e11.end();
    }
    r9.endEmitted ? u8.nextTick(i8) : n9.once("end", i8), e11.on("unpipe", a8);
    var s7 = function(e12) {
      return function() {
        var t9 = e12._readableState;
        p8("pipeOnDrain", t9.awaitDrain), t9.awaitDrain && t9.awaitDrain--, 0 === t9.awaitDrain && f9(e12, "data") && (t9.flowing = true, J3(e12));
      };
    }(n9);
    e11.on("drain", s7);
    var l9 = false;
    function d6(t9) {
      p8("ondata");
      var i9 = e11.write(t9);
      p8("dest.write", i9), false === i9 && ((1 === r9.pipesCount && r9.pipes === e11 || r9.pipesCount > 1 && -1 !== ee3(r9.pipes, e11)) && !l9 && (p8("false write response, pause", r9.awaitDrain), r9.awaitDrain++), n9.pause());
    }
    function h9(t9) {
      p8("onerror", t9), g6(), e11.removeListener("error", h9), 0 === f9(e11, "error") && P4(e11, t9);
    }
    function c9() {
      e11.removeListener("finish", b6), g6();
    }
    function b6() {
      p8("onfinish"), e11.removeListener("close", c9), g6();
    }
    function g6() {
      p8("unpipe"), n9.unpipe(e11);
    }
    return n9.on("data", d6), function(e12, t9, n10) {
      if ("function" == typeof e12.prependListener)
        return e12.prependListener(t9, n10);
      e12._events && e12._events[t9] ? Array.isArray(e12._events[t9]) ? e12._events[t9].unshift(n10) : e12._events[t9] = [n10, e12._events[t9]] : e12.on(t9, n10);
    }(e11, "error", h9), e11.once("close", c9), e11.once("finish", b6), e11.emit("pipe", n9), r9.flowing || (p8("pipe resume"), n9.resume()), e11;
  }, C4.prototype.unpipe = function(e11) {
    var t8 = this._readableState, n9 = { hasUnpiped: false };
    if (0 === t8.pipesCount)
      return this;
    if (1 === t8.pipesCount)
      return e11 && e11 !== t8.pipes || (e11 || (e11 = t8.pipes), t8.pipes = null, t8.pipesCount = 0, t8.flowing = false, e11 && e11.emit("unpipe", this, n9)), this;
    if (!e11) {
      var r9 = t8.pipes, i8 = t8.pipesCount;
      t8.pipes = null, t8.pipesCount = 0, t8.flowing = false;
      for (var a8 = 0; a8 < i8; a8++)
        r9[a8].emit("unpipe", this, { hasUnpiped: false });
      return this;
    }
    var o9 = ee3(t8.pipes, e11);
    return -1 === o9 || (t8.pipes.splice(o9, 1), t8.pipesCount -= 1, 1 === t8.pipesCount && (t8.pipes = t8.pipes[0]), e11.emit("unpipe", this, n9)), this;
  }, C4.prototype.on = function(e11, t8) {
    var n9 = h8.prototype.on.call(this, e11, t8), r9 = this._readableState;
    return "data" === e11 ? (r9.readableListening = this.listenerCount("readable") > 0, false !== r9.flowing && this.resume()) : "readable" === e11 && (r9.endEmitted || r9.readableListening || (r9.readableListening = r9.needReadable = true, r9.flowing = false, r9.emittedReadable = false, p8("on readable", r9.length, r9.reading), r9.length ? q3(this) : r9.reading || u8.nextTick(K3, this))), n9;
  }, C4.prototype.addListener = C4.prototype.on, C4.prototype.removeListener = function(e11, t8) {
    var n9 = h8.prototype.removeListener.call(this, e11, t8);
    return "readable" === e11 && u8.nextTick(Y4, this), n9;
  }, C4.prototype.removeAllListeners = function(e11) {
    var t8 = h8.prototype.removeAllListeners.apply(this, arguments);
    return "readable" !== e11 && void 0 !== e11 || u8.nextTick(Y4, this), t8;
  }, C4.prototype.resume = function() {
    var e11 = this._readableState;
    return e11.flowing || (p8("resume"), e11.flowing = !e11.readableListening, function(e12, t8) {
      t8.resumeScheduled || (t8.resumeScheduled = true, u8.nextTick(z5, e12, t8));
    }(this, e11)), e11.paused = false, this;
  }, C4.prototype.pause = function() {
    return p8("call pause flowing=%j", this._readableState.flowing), false !== this._readableState.flowing && (p8("pause"), this._readableState.flowing = false, this.emit("pause")), this._readableState.paused = true, this;
  }, C4.prototype.wrap = function(e11) {
    var t8 = this, n9 = this._readableState, r9 = false;
    for (var i8 in e11.on("end", function() {
      if (p8("wrapped end"), n9.decoder && !n9.ended) {
        var e12 = n9.decoder.end();
        e12 && e12.length && t8.push(e12);
      }
      t8.push(null);
    }), e11.on("data", function(i9) {
      (p8("wrapped data"), n9.decoder && (i9 = n9.decoder.write(i9)), n9.objectMode && null == i9) || (n9.objectMode || i9 && i9.length) && (t8.push(i9) || (r9 = true, e11.pause()));
    }), e11)
      void 0 === this[i8] && "function" == typeof e11[i8] && (this[i8] = function(t9) {
        return function() {
          return e11[t9].apply(e11, arguments);
        };
      }(i8));
    for (var a8 = 0; a8 < D4.length; a8++)
      e11.on(D4[a8], this.emit.bind(this, D4[a8]));
    return this._read = function(t9) {
      p8("wrapped _read", t9), r9 && (r9 = false, e11.resume());
    }, this;
  }, "function" == typeof Symbol && (C4.prototype[Symbol.asyncIterator] = function() {
    return void 0 === _4 && (_4 = U$1$1), _4(this);
  }), Object.defineProperty(C4.prototype, "readableHighWaterMark", { enumerable: false, get: function() {
    return this._readableState.highWaterMark;
  } }), Object.defineProperty(C4.prototype, "readableBuffer", { enumerable: false, get: function() {
    return this._readableState && this._readableState.buffer;
  } }), Object.defineProperty(C4.prototype, "readableFlowing", { enumerable: false, get: function() {
    return this._readableState.flowing;
  }, set: function(e11) {
    this._readableState && (this._readableState.flowing = e11);
  } }), C4._fromList = Q3, Object.defineProperty(C4.prototype, "readableLength", { enumerable: false, get: function() {
    return this._readableState.length;
  } }), "function" == typeof Symbol && (C4.from = function(e11, t8) {
    return void 0 === v6 && (v6 = r$1$1), v6(C4, e11, t8);
  }), H$1$1;
}
function J$1$1() {
  if (K$1$1)
    return Y$1$1;
  K$1$1 = true;
  var e$22, r9 = T;
  function s7(e11) {
    var t8 = this;
    this.next = null, this.entry = null, this.finish = function() {
      !function(e12, t9, n9) {
        var r10 = e12.entry;
        e12.entry = null;
        for (; r10; ) {
          var i8 = r10.callback;
          t9.pendingcb--, i8(n9), r10 = r10.next;
        }
        t9.corkedRequestsFree.next = e12;
      }(t8, e11);
    };
  }
  Y$1$1 = x4, x4.WritableState = T5;
  var l8 = { deprecate: t$1$1 }, d6 = e$g, f9 = e$1$1.Buffer, h8 = z$1$1.Uint8Array || function() {
  };
  var c8, b5 = S$1$1, p8 = E$1$1.getHighWaterMark, g5 = e$1$12.codes, y6 = g5.ERR_INVALID_ARG_TYPE, w4 = g5.ERR_METHOD_NOT_IMPLEMENTED, _4 = g5.ERR_MULTIPLE_CALLBACK, v6 = g5.ERR_STREAM_CANNOT_PIPE, m6 = g5.ERR_STREAM_DESTROYED, R4 = g5.ERR_STREAM_NULL_VALUES, k4 = g5.ERR_STREAM_WRITE_AFTER_END, M4 = g5.ERR_UNKNOWN_ENCODING, j4 = b5.errorOrDestroy;
  function O5() {
  }
  function T5(t8, n9, i8) {
    e$22 = e$22 || Z$1$1(), t8 = t8 || {}, "boolean" != typeof i8 && (i8 = n9 instanceof e$22), this.objectMode = !!t8.objectMode, i8 && (this.objectMode = this.objectMode || !!t8.writableObjectMode), this.highWaterMark = p8(this, t8, "writableHighWaterMark", i8), this.finalCalled = false, this.needDrain = false, this.ending = false, this.ended = false, this.finished = false, this.destroyed = false;
    var a8 = false === t8.decodeStrings;
    this.decodeStrings = !a8, this.defaultEncoding = t8.defaultEncoding || "utf8", this.length = 0, this.writing = false, this.corked = 0, this.sync = true, this.bufferProcessing = false, this.onwrite = function(e11) {
      !function(e12, t9) {
        var n10 = e12._writableState, i9 = n10.sync, a9 = n10.writecb;
        if ("function" != typeof a9)
          throw new _4();
        if (function(e13) {
          e13.writing = false, e13.writecb = null, e13.length -= e13.writelen, e13.writelen = 0;
        }(n10), t9)
          !function(e13, t10, n11, i10, a10) {
            --t10.pendingcb, n11 ? (r9.nextTick(a10, i10), r9.nextTick(W3, e13, t10), e13._writableState.errorEmitted = true, j4(e13, i10)) : (a10(i10), e13._writableState.errorEmitted = true, j4(e13, i10), W3(e13, t10));
          }(e12, n10, i9, t9, a9);
        else {
          var o9 = C4(n10) || e12.destroyed;
          o9 || n10.corked || n10.bufferProcessing || !n10.bufferedRequest || L4(e12, n10), i9 ? r9.nextTick(D4, e12, n10, o9, a9) : D4(e12, n10, o9, a9);
        }
      }(n9, e11);
    }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, this.prefinished = false, this.errorEmitted = false, this.emitClose = false !== t8.emitClose, this.autoDestroy = !!t8.autoDestroy, this.bufferedRequestCount = 0, this.corkedRequestsFree = new s7(this);
  }
  function x4(t8) {
    var n9 = this instanceof (e$22 = e$22 || Z$1$1());
    if (!n9 && !c8.call(x4, this))
      return new x4(t8);
    this._writableState = new T5(t8, this, n9), this.writable = true, t8 && ("function" == typeof t8.write && (this._write = t8.write), "function" == typeof t8.writev && (this._writev = t8.writev), "function" == typeof t8.destroy && (this._destroy = t8.destroy), "function" == typeof t8.final && (this._final = t8.final)), d6.call(this);
  }
  function P4(e11, t8, n9, r10, i8, a8, o9) {
    t8.writelen = r10, t8.writecb = o9, t8.writing = true, t8.sync = true, t8.destroyed ? t8.onwrite(new m6("write")) : n9 ? e11._writev(i8, t8.onwrite) : e11._write(i8, a8, t8.onwrite), t8.sync = false;
  }
  function D4(e11, t8, n9, r10) {
    n9 || !function(e12, t9) {
      0 === t9.length && t9.needDrain && (t9.needDrain = false, e12.emit("drain"));
    }(e11, t8), t8.pendingcb--, r10(), W3(e11, t8);
  }
  function L4(e11, t8) {
    t8.bufferProcessing = true;
    var n9 = t8.bufferedRequest;
    if (e11._writev && n9 && n9.next) {
      var r10 = t8.bufferedRequestCount, i8 = new Array(r10), a8 = t8.corkedRequestsFree;
      a8.entry = n9;
      for (var o9 = 0, l9 = true; n9; )
        i8[o9] = n9, n9.isBuf || (l9 = false), n9 = n9.next, o9 += 1;
      i8.allBuffers = l9, P4(e11, t8, true, t8.length, i8, "", a8.finish), t8.pendingcb++, t8.lastBufferedRequest = null, a8.next ? (t8.corkedRequestsFree = a8.next, a8.next = null) : t8.corkedRequestsFree = new s7(t8), t8.bufferedRequestCount = 0;
    } else {
      for (; n9; ) {
        var d7 = n9.chunk, u8 = n9.encoding, f10 = n9.callback;
        if (P4(e11, t8, false, t8.objectMode ? 1 : d7.length, d7, u8, f10), n9 = n9.next, t8.bufferedRequestCount--, t8.writing)
          break;
      }
      null === n9 && (t8.lastBufferedRequest = null);
    }
    t8.bufferedRequest = n9, t8.bufferProcessing = false;
  }
  function C4(e11) {
    return e11.ending && 0 === e11.length && null === e11.bufferedRequest && !e11.finished && !e11.writing;
  }
  function A4(e11, t8) {
    e11._final(function(n9) {
      t8.pendingcb--, n9 && j4(e11, n9), t8.prefinished = true, e11.emit("prefinish"), W3(e11, t8);
    });
  }
  function W3(e11, t8) {
    var n9 = C4(t8);
    if (n9 && (!function(e12, t9) {
      t9.prefinished || t9.finalCalled || ("function" != typeof e12._final || t9.destroyed ? (t9.prefinished = true, e12.emit("prefinish")) : (t9.pendingcb++, t9.finalCalled = true, r9.nextTick(A4, e12, t9)));
    }(e11, t8), 0 === t8.pendingcb && (t8.finished = true, e11.emit("finish"), t8.autoDestroy))) {
      var i8 = e11._readableState;
      (!i8 || i8.autoDestroy && i8.endEmitted) && e11.destroy();
    }
    return n9;
  }
  return t$2(x4, d6), T5.prototype.getBuffer = function() {
    for (var e11 = this.bufferedRequest, t8 = []; e11; )
      t8.push(e11), e11 = e11.next;
    return t8;
  }, function() {
    try {
      Object.defineProperty(T5.prototype, "buffer", { get: l8.deprecate(function() {
        return this.getBuffer();
      }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003") });
    } catch (e11) {
    }
  }(), "function" == typeof Symbol && Symbol.hasInstance && "function" == typeof Function.prototype[Symbol.hasInstance] ? (c8 = Function.prototype[Symbol.hasInstance], Object.defineProperty(x4, Symbol.hasInstance, { value: function(e11) {
    return !!c8.call(this, e11) || this === x4 && (e11 && e11._writableState instanceof T5);
  } })) : c8 = function(e11) {
    return e11 instanceof this;
  }, x4.prototype.pipe = function() {
    j4(this, new v6());
  }, x4.prototype.write = function(e11, t8, n9) {
    var i8, a8 = this._writableState, o9 = false, s8 = !a8.objectMode && (i8 = e11, f9.isBuffer(i8) || i8 instanceof h8);
    return s8 && !f9.isBuffer(e11) && (e11 = function(e12) {
      return f9.from(e12);
    }(e11)), "function" == typeof t8 && (n9 = t8, t8 = null), s8 ? t8 = "buffer" : t8 || (t8 = a8.defaultEncoding), "function" != typeof n9 && (n9 = O5), a8.ending ? function(e12, t9) {
      var n10 = new k4();
      j4(e12, n10), r9.nextTick(t9, n10);
    }(this, n9) : (s8 || function(e12, t9, n10, i9) {
      var a9;
      return null === n10 ? a9 = new R4() : "string" == typeof n10 || t9.objectMode || (a9 = new y6("chunk", ["string", "Buffer"], n10)), !a9 || (j4(e12, a9), r9.nextTick(i9, a9), false);
    }(this, a8, e11, n9)) && (a8.pendingcb++, o9 = function(e12, t9, n10, r10, i9, a9) {
      if (!n10) {
        var o10 = function(e13, t10, n11) {
          e13.objectMode || false === e13.decodeStrings || "string" != typeof t10 || (t10 = f9.from(t10, n11));
          return t10;
        }(t9, r10, i9);
        r10 !== o10 && (n10 = true, i9 = "buffer", r10 = o10);
      }
      var s9 = t9.objectMode ? 1 : r10.length;
      t9.length += s9;
      var l9 = t9.length < t9.highWaterMark;
      l9 || (t9.needDrain = true);
      if (t9.writing || t9.corked) {
        var d7 = t9.lastBufferedRequest;
        t9.lastBufferedRequest = { chunk: r10, encoding: i9, isBuf: n10, callback: a9, next: null }, d7 ? d7.next = t9.lastBufferedRequest : t9.bufferedRequest = t9.lastBufferedRequest, t9.bufferedRequestCount += 1;
      } else
        P4(e12, t9, false, s9, r10, i9, a9);
      return l9;
    }(this, a8, s8, e11, t8, n9)), o9;
  }, x4.prototype.cork = function() {
    this._writableState.corked++;
  }, x4.prototype.uncork = function() {
    var e11 = this._writableState;
    e11.corked && (e11.corked--, e11.writing || e11.corked || e11.bufferProcessing || !e11.bufferedRequest || L4(this, e11));
  }, x4.prototype.setDefaultEncoding = function(e11) {
    if ("string" == typeof e11 && (e11 = e11.toLowerCase()), !(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((e11 + "").toLowerCase()) > -1))
      throw new M4(e11);
    return this._writableState.defaultEncoding = e11, this;
  }, Object.defineProperty(x4.prototype, "writableBuffer", { enumerable: false, get: function() {
    return this._writableState && this._writableState.getBuffer();
  } }), Object.defineProperty(x4.prototype, "writableHighWaterMark", { enumerable: false, get: function() {
    return this._writableState.highWaterMark;
  } }), x4.prototype._write = function(e11, t8, n9) {
    n9(new w4("_write()"));
  }, x4.prototype._writev = null, x4.prototype.end = function(e11, t8, n9) {
    var i8 = this._writableState;
    return "function" == typeof e11 ? (n9 = e11, e11 = null, t8 = null) : "function" == typeof t8 && (n9 = t8, t8 = null), null != e11 && this.write(e11, t8), i8.corked && (i8.corked = 1, this.uncork()), i8.ending || function(e12, t9, n10) {
      t9.ending = true, W3(e12, t9), n10 && (t9.finished ? r9.nextTick(n10) : e12.once("finish", n10));
      t9.ended = true, e12.writable = false;
    }(this, i8, n9), this;
  }, Object.defineProperty(x4.prototype, "writableLength", { enumerable: false, get: function() {
    return this._writableState.length;
  } }), Object.defineProperty(x4.prototype, "destroyed", { enumerable: false, get: function() {
    return void 0 !== this._writableState && this._writableState.destroyed;
  }, set: function(e11) {
    this._writableState && (this._writableState.destroyed = e11);
  } }), x4.prototype.destroy = b5.destroy, x4.prototype._undestroy = b5.undestroy, x4.prototype._destroy = function(e11, t8) {
    t8(e11);
  }, Y$1$1;
}
function Z$1$1() {
  if (X$1$1)
    return Q$1$1;
  X$1$1 = true;
  var e11 = T, t8 = Object.keys || function(e12) {
    var t9 = [];
    for (var n10 in e12)
      t9.push(n10);
    return t9;
  };
  Q$1$1 = d6;
  var n9 = G$1$1(), r9 = J$1$1();
  t$2(d6, n9);
  for (var a8 = t8(r9.prototype), s7 = 0; s7 < a8.length; s7++) {
    var l8 = a8[s7];
    d6.prototype[l8] || (d6.prototype[l8] = r9.prototype[l8]);
  }
  function d6(e12) {
    if (!(this instanceof d6))
      return new d6(e12);
    n9.call(this, e12), r9.call(this, e12), this.allowHalfOpen = true, e12 && (false === e12.readable && (this.readable = false), false === e12.writable && (this.writable = false), false === e12.allowHalfOpen && (this.allowHalfOpen = false, this.once("end", u8)));
  }
  function u8() {
    this._writableState.ended || e11.nextTick(f9, this);
  }
  function f9(e12) {
    e12.end();
  }
  return Object.defineProperty(d6.prototype, "writableHighWaterMark", { enumerable: false, get: function() {
    return this._writableState.highWaterMark;
  } }), Object.defineProperty(d6.prototype, "writableBuffer", { enumerable: false, get: function() {
    return this._writableState && this._writableState.getBuffer();
  } }), Object.defineProperty(d6.prototype, "writableLength", { enumerable: false, get: function() {
    return this._writableState.length;
  } }), Object.defineProperty(d6.prototype, "destroyed", { enumerable: false, get: function() {
    return void 0 !== this._readableState && void 0 !== this._writableState && (this._readableState.destroyed && this._writableState.destroyed);
  }, set: function(e12) {
    void 0 !== this._readableState && void 0 !== this._writableState && (this._readableState.destroyed = e12, this._writableState.destroyed = e12);
  } }), Q$1$1;
}
function l$s(t8, r9) {
  var e11 = this._transformState;
  e11.transforming = false;
  var n9 = e11.writecb;
  if (null === n9)
    return this.emit("error", new o$s());
  e11.writechunk = null, e11.writecb = null, null != r9 && this.push(r9), n9(t8);
  var i8 = this._readableState;
  i8.reading = false, (i8.needReadable || i8.length < i8.highWaterMark) && this._read(i8.highWaterMark);
}
function u$1$12(t8) {
  if (!(this instanceof u$1$12))
    return new u$1$12(t8);
  h$2$1.call(this, t8), this._transformState = { afterTransform: l$s.bind(this), needTransform: false, transforming: false, writecb: null, writechunk: null, writeencoding: null }, this._readableState.needReadable = true, this._readableState.sync = false, t8 && ("function" == typeof t8.transform && (this._transform = t8.transform), "function" == typeof t8.flush && (this._flush = t8.flush)), this.on("prefinish", m$2$1);
}
function m$2$1() {
  var t8 = this;
  "function" != typeof this._flush || this._readableState.destroyed ? _$2$1(this, null, null) : this._flush(function(r9, e11) {
    _$2$1(t8, r9, e11);
  });
}
function _$2$1(t8, r9, e11) {
  if (r9)
    return t8.emit("error", r9);
  if (null != e11 && t8.push(e11), t8._writableState.length)
    throw new f$2$1();
  if (t8._transformState.transforming)
    throw new s$q();
  return t8.push(null);
}
function i$1$1(r9) {
  if (!(this instanceof i$1$1))
    return new i$1$1(r9);
  e$3$1.call(this, r9);
}
function i$2$1(r9) {
  if (r9)
    throw r9;
}
function u$2$1(r9, o9, e11, i8) {
  i8 = function(r10) {
    var n9 = false;
    return function() {
      n9 || (n9 = true, r10.apply(void 0, arguments));
    };
  }(i8);
  var u8 = false;
  r9.on("close", function() {
    u8 = true;
  }), void 0 === t$6$1 && (t$6$1 = n$1$12), t$6$1(r9, { readable: o9, writable: e11 }, function(r10) {
    if (r10)
      return i8(r10);
    u8 = true, i8();
  });
  var a8 = false;
  return function(n9) {
    if (!u8 && !a8)
      return a8 = true, function(r10) {
        return r10.setHeader && "function" == typeof r10.abort;
      }(r9) ? r9.abort() : "function" == typeof r9.destroy ? r9.destroy() : (i8(n9 || new f$3$1("pipe")), void 0);
  };
}
function a$1$12(r9) {
  r9();
}
function c$2$1(r9, n9) {
  return r9.pipe(n9);
}
function p$3$1(r9) {
  return r9.length ? "function" != typeof r9[r9.length - 1] ? i$2$1 : r9.pop() : i$2$1;
}
function p$r() {
  f$u.call(this || d$n);
}
function dew$1G() {
  if (_dewExec$1G)
    return exports$1H;
  _dewExec$1G = true;
  var Buffer3 = dew$1T().Buffer;
  var Transform2 = b$i.Transform;
  var StringDecoder = e$12.StringDecoder;
  var inherits4 = dew$f$2();
  function CipherBase(hashMode) {
    Transform2.call(this || _global$o);
    (this || _global$o).hashMode = typeof hashMode === "string";
    if ((this || _global$o).hashMode) {
      (this || _global$o)[hashMode] = (this || _global$o)._finalOrDigest;
    } else {
      (this || _global$o).final = (this || _global$o)._finalOrDigest;
    }
    if ((this || _global$o)._final) {
      (this || _global$o).__final = (this || _global$o)._final;
      (this || _global$o)._final = null;
    }
    (this || _global$o)._decoder = null;
    (this || _global$o)._encoding = null;
  }
  inherits4(CipherBase, Transform2);
  CipherBase.prototype.update = function(data, inputEnc, outputEnc) {
    if (typeof data === "string") {
      data = Buffer3.from(data, inputEnc);
    }
    var outData = this._update(data);
    if ((this || _global$o).hashMode)
      return this || _global$o;
    if (outputEnc) {
      outData = this._toString(outData, outputEnc);
    }
    return outData;
  };
  CipherBase.prototype.setAutoPadding = function() {
  };
  CipherBase.prototype.getAuthTag = function() {
    throw new Error("trying to get auth tag in unsupported state");
  };
  CipherBase.prototype.setAuthTag = function() {
    throw new Error("trying to set auth tag in unsupported state");
  };
  CipherBase.prototype.setAAD = function() {
    throw new Error("trying to set aad in unsupported state");
  };
  CipherBase.prototype._transform = function(data, _4, next) {
    var err;
    try {
      if ((this || _global$o).hashMode) {
        this._update(data);
      } else {
        this.push(this._update(data));
      }
    } catch (e11) {
      err = e11;
    } finally {
      next(err);
    }
  };
  CipherBase.prototype._flush = function(done) {
    var err;
    try {
      this.push(this.__final());
    } catch (e11) {
      err = e11;
    }
    done(err);
  };
  CipherBase.prototype._finalOrDigest = function(outputEnc) {
    var outData = this.__final() || Buffer3.alloc(0);
    if (outputEnc) {
      outData = this._toString(outData, outputEnc, true);
    }
    return outData;
  };
  CipherBase.prototype._toString = function(value, enc, fin) {
    if (!(this || _global$o)._decoder) {
      (this || _global$o)._decoder = new StringDecoder(enc);
      (this || _global$o)._encoding = enc;
    }
    if ((this || _global$o)._encoding !== enc)
      throw new Error("can't switch encodings");
    var out = (this || _global$o)._decoder.write(value);
    if (fin) {
      out += (this || _global$o)._decoder.end();
    }
    return out;
  };
  exports$1H = CipherBase;
  return exports$1H;
}
function dew$1F() {
  if (_dewExec$1F)
    return exports$1G;
  _dewExec$1F = true;
  var inherits4 = dew$f$2();
  var MD5 = dew$1Q();
  var RIPEMD160 = dew$1P();
  var sha = dew$1H();
  var Base = dew$1G();
  function Hash2(hash) {
    Base.call(this, "digest");
    this._hash = hash;
  }
  inherits4(Hash2, Base);
  Hash2.prototype._update = function(data) {
    this._hash.update(data);
  };
  Hash2.prototype._final = function() {
    return this._hash.digest();
  };
  exports$1G = function createHash2(alg) {
    alg = alg.toLowerCase();
    if (alg === "md5")
      return new MD5();
    if (alg === "rmd160" || alg === "ripemd160")
      return new RIPEMD160();
    return new Hash2(sha(alg));
  };
  return exports$1G;
}
function dew$1E() {
  if (_dewExec$1E)
    return exports$1F;
  _dewExec$1E = true;
  var inherits4 = dew$f$2();
  var Buffer3 = dew$1T().Buffer;
  var Base = dew$1G();
  var ZEROS = Buffer3.alloc(128);
  var blocksize = 64;
  function Hmac2(alg, key) {
    Base.call(this, "digest");
    if (typeof key === "string") {
      key = Buffer3.from(key);
    }
    this._alg = alg;
    this._key = key;
    if (key.length > blocksize) {
      key = alg(key);
    } else if (key.length < blocksize) {
      key = Buffer3.concat([key, ZEROS], blocksize);
    }
    var ipad = this._ipad = Buffer3.allocUnsafe(blocksize);
    var opad = this._opad = Buffer3.allocUnsafe(blocksize);
    for (var i8 = 0; i8 < blocksize; i8++) {
      ipad[i8] = key[i8] ^ 54;
      opad[i8] = key[i8] ^ 92;
    }
    this._hash = [ipad];
  }
  inherits4(Hmac2, Base);
  Hmac2.prototype._update = function(data) {
    this._hash.push(data);
  };
  Hmac2.prototype._final = function() {
    var h8 = this._alg(Buffer3.concat(this._hash));
    return this._alg(Buffer3.concat([this._opad, h8]));
  };
  exports$1F = Hmac2;
  return exports$1F;
}
function dew$1D() {
  if (_dewExec$1D)
    return exports$1E;
  _dewExec$1D = true;
  var MD5 = dew$1Q();
  exports$1E = function(buffer2) {
    return new MD5().update(buffer2).digest();
  };
  return exports$1E;
}
function dew$1C() {
  if (_dewExec$1C)
    return exports$1D;
  _dewExec$1C = true;
  var inherits4 = dew$f$2();
  var Legacy = dew$1E();
  var Base = dew$1G();
  var Buffer3 = dew$1T().Buffer;
  var md5 = dew$1D();
  var RIPEMD160 = dew$1P();
  var sha = dew$1H();
  var ZEROS = Buffer3.alloc(128);
  function Hmac2(alg, key) {
    Base.call(this, "digest");
    if (typeof key === "string") {
      key = Buffer3.from(key);
    }
    var blocksize = alg === "sha512" || alg === "sha384" ? 128 : 64;
    this._alg = alg;
    this._key = key;
    if (key.length > blocksize) {
      var hash = alg === "rmd160" ? new RIPEMD160() : sha(alg);
      key = hash.update(key).digest();
    } else if (key.length < blocksize) {
      key = Buffer3.concat([key, ZEROS], blocksize);
    }
    var ipad = this._ipad = Buffer3.allocUnsafe(blocksize);
    var opad = this._opad = Buffer3.allocUnsafe(blocksize);
    for (var i8 = 0; i8 < blocksize; i8++) {
      ipad[i8] = key[i8] ^ 54;
      opad[i8] = key[i8] ^ 92;
    }
    this._hash = alg === "rmd160" ? new RIPEMD160() : sha(alg);
    this._hash.update(ipad);
  }
  inherits4(Hmac2, Base);
  Hmac2.prototype._update = function(data) {
    this._hash.update(data);
  };
  Hmac2.prototype._final = function() {
    var h8 = this._hash.digest();
    var hash = this._alg === "rmd160" ? new RIPEMD160() : sha(this._alg);
    return hash.update(this._opad).update(h8).digest();
  };
  exports$1D = function createHmac2(alg, key) {
    alg = alg.toLowerCase();
    if (alg === "rmd160" || alg === "ripemd160") {
      return new Hmac2("rmd160", key);
    }
    if (alg === "md5") {
      return new Legacy(md5, key);
    }
    return new Hmac2(alg, key);
  };
  return exports$1D;
}
function dew$1B() {
  if (_dewExec$1B)
    return exports$1C;
  _dewExec$1B = true;
  exports$1C = _algorithms;
  return exports$1C;
}
function dew$1A() {
  if (_dewExec$1A)
    return exports$1B;
  _dewExec$1A = true;
  var MAX_ALLOC = Math.pow(2, 30) - 1;
  exports$1B = function(iterations, keylen) {
    if (typeof iterations !== "number") {
      throw new TypeError("Iterations not a number");
    }
    if (iterations < 0) {
      throw new TypeError("Bad iterations");
    }
    if (typeof keylen !== "number") {
      throw new TypeError("Key length not a number");
    }
    if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) {
      throw new TypeError("Bad key length");
    }
  };
  return exports$1B;
}
function dew$1z() {
  if (_dewExec$1z)
    return exports$1A;
  _dewExec$1z = true;
  var process3 = T;
  var defaultEncoding;
  if (_global$n.process && _global$n.process.browser) {
    defaultEncoding = "utf-8";
  } else if (_global$n.process && _global$n.process.version) {
    var pVersionMajor = parseInt(process3.version.split(".")[0].slice(1), 10);
    defaultEncoding = pVersionMajor >= 6 ? "utf-8" : "binary";
  } else {
    defaultEncoding = "utf-8";
  }
  exports$1A = defaultEncoding;
  return exports$1A;
}
function dew$1y() {
  if (_dewExec$1y)
    return exports$1z;
  _dewExec$1y = true;
  var Buffer3 = dew$1T().Buffer;
  exports$1z = function(thing, encoding, name2) {
    if (Buffer3.isBuffer(thing)) {
      return thing;
    } else if (typeof thing === "string") {
      return Buffer3.from(thing, encoding);
    } else if (ArrayBuffer.isView(thing)) {
      return Buffer3.from(thing.buffer);
    } else {
      throw new TypeError(name2 + " must be a string, a Buffer, a typed array or a DataView");
    }
  };
  return exports$1z;
}
function dew$1x() {
  if (_dewExec$1x)
    return exports$1y;
  _dewExec$1x = true;
  var md5 = dew$1D();
  var RIPEMD160 = dew$1P();
  var sha = dew$1H();
  var Buffer3 = dew$1T().Buffer;
  var checkParameters = dew$1A();
  var defaultEncoding = dew$1z();
  var toBuffer = dew$1y();
  var ZEROS = Buffer3.alloc(128);
  var sizes = {
    md5: 16,
    sha1: 20,
    sha224: 28,
    sha256: 32,
    sha384: 48,
    sha512: 64,
    rmd160: 20,
    ripemd160: 20
  };
  function Hmac2(alg, key, saltLen) {
    var hash = getDigest(alg);
    var blocksize = alg === "sha512" || alg === "sha384" ? 128 : 64;
    if (key.length > blocksize) {
      key = hash(key);
    } else if (key.length < blocksize) {
      key = Buffer3.concat([key, ZEROS], blocksize);
    }
    var ipad = Buffer3.allocUnsafe(blocksize + sizes[alg]);
    var opad = Buffer3.allocUnsafe(blocksize + sizes[alg]);
    for (var i8 = 0; i8 < blocksize; i8++) {
      ipad[i8] = key[i8] ^ 54;
      opad[i8] = key[i8] ^ 92;
    }
    var ipad1 = Buffer3.allocUnsafe(blocksize + saltLen + 4);
    ipad.copy(ipad1, 0, 0, blocksize);
    (this || _global$m).ipad1 = ipad1;
    (this || _global$m).ipad2 = ipad;
    (this || _global$m).opad = opad;
    (this || _global$m).alg = alg;
    (this || _global$m).blocksize = blocksize;
    (this || _global$m).hash = hash;
    (this || _global$m).size = sizes[alg];
  }
  Hmac2.prototype.run = function(data, ipad) {
    data.copy(ipad, (this || _global$m).blocksize);
    var h8 = this.hash(ipad);
    h8.copy((this || _global$m).opad, (this || _global$m).blocksize);
    return this.hash((this || _global$m).opad);
  };
  function getDigest(alg) {
    function shaFunc(data) {
      return sha(alg).update(data).digest();
    }
    function rmd160Func(data) {
      return new RIPEMD160().update(data).digest();
    }
    if (alg === "rmd160" || alg === "ripemd160")
      return rmd160Func;
    if (alg === "md5")
      return md5;
    return shaFunc;
  }
  function pbkdf22(password, salt, iterations, keylen, digest) {
    checkParameters(iterations, keylen);
    password = toBuffer(password, defaultEncoding, "Password");
    salt = toBuffer(salt, defaultEncoding, "Salt");
    digest = digest || "sha1";
    var hmac = new Hmac2(digest, password, salt.length);
    var DK = Buffer3.allocUnsafe(keylen);
    var block1 = Buffer3.allocUnsafe(salt.length + 4);
    salt.copy(block1, 0, 0, salt.length);
    var destPos = 0;
    var hLen = sizes[digest];
    var l8 = Math.ceil(keylen / hLen);
    for (var i8 = 1; i8 <= l8; i8++) {
      block1.writeUInt32BE(i8, salt.length);
      var T5 = hmac.run(block1, hmac.ipad1);
      var U4 = T5;
      for (var j4 = 1; j4 < iterations; j4++) {
        U4 = hmac.run(U4, hmac.ipad2);
        for (var k4 = 0; k4 < hLen; k4++)
          T5[k4] ^= U4[k4];
      }
      T5.copy(DK, destPos);
      destPos += hLen;
    }
    return DK;
  }
  exports$1y = pbkdf22;
  return exports$1y;
}
function dew$1w() {
  if (_dewExec$1w)
    return exports$1x;
  _dewExec$1w = true;
  var Buffer3 = dew$1T().Buffer;
  var checkParameters = dew$1A();
  var defaultEncoding = dew$1z();
  var sync = dew$1x();
  var toBuffer = dew$1y();
  var ZERO_BUF;
  var subtle = _global$l.crypto && _global$l.crypto.subtle;
  var toBrowser = {
    sha: "SHA-1",
    "sha-1": "SHA-1",
    sha1: "SHA-1",
    sha256: "SHA-256",
    "sha-256": "SHA-256",
    sha384: "SHA-384",
    "sha-384": "SHA-384",
    "sha-512": "SHA-512",
    sha512: "SHA-512"
  };
  var checks = [];
  function checkNative(algo) {
    if (_global$l.process && !_global$l.process.browser) {
      return Promise.resolve(false);
    }
    if (!subtle || !subtle.importKey || !subtle.deriveBits) {
      return Promise.resolve(false);
    }
    if (checks[algo] !== void 0) {
      return checks[algo];
    }
    ZERO_BUF = ZERO_BUF || Buffer3.alloc(8);
    var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo).then(function() {
      return true;
    }).catch(function() {
      return false;
    });
    checks[algo] = prom;
    return prom;
  }
  var nextTick2;
  function getNextTick() {
    if (nextTick2) {
      return nextTick2;
    }
    if (_global$l.process && _global$l.process.nextTick) {
      nextTick2 = _global$l.process.nextTick;
    } else if (_global$l.queueMicrotask) {
      nextTick2 = _global$l.queueMicrotask;
    } else if (_global$l.setImmediate) {
      nextTick2 = _global$l.setImmediate;
    } else {
      nextTick2 = _global$l.setTimeout;
    }
    return nextTick2;
  }
  function browserPbkdf2(password, salt, iterations, length, algo) {
    return subtle.importKey("raw", password, {
      name: "PBKDF2"
    }, false, ["deriveBits"]).then(function(key) {
      return subtle.deriveBits({
        name: "PBKDF2",
        salt,
        iterations,
        hash: {
          name: algo
        }
      }, key, length << 3);
    }).then(function(res) {
      return Buffer3.from(res);
    });
  }
  function resolvePromise(promise, callback) {
    promise.then(function(out) {
      getNextTick()(function() {
        callback(null, out);
      });
    }, function(e11) {
      getNextTick()(function() {
        callback(e11);
      });
    });
  }
  exports$1x = function(password, salt, iterations, keylen, digest, callback) {
    if (typeof digest === "function") {
      callback = digest;
      digest = void 0;
    }
    digest = digest || "sha1";
    var algo = toBrowser[digest.toLowerCase()];
    if (!algo || typeof _global$l.Promise !== "function") {
      getNextTick()(function() {
        var out;
        try {
          out = sync(password, salt, iterations, keylen, digest);
        } catch (e11) {
          return callback(e11);
        }
        callback(null, out);
      });
      return;
    }
    checkParameters(iterations, keylen);
    password = toBuffer(password, defaultEncoding, "Password");
    salt = toBuffer(salt, defaultEncoding, "Salt");
    if (typeof callback !== "function")
      throw new Error("No callback provided to pbkdf2");
    resolvePromise(checkNative(algo).then(function(resp) {
      if (resp)
        return browserPbkdf2(password, salt, iterations, keylen, algo);
      return sync(password, salt, iterations, keylen, digest);
    }), callback);
  };
  return exports$1x;
}
function dew$1v() {
  if (_dewExec$1v)
    return exports$1w;
  _dewExec$1v = true;
  exports$1w.pbkdf2 = dew$1w();
  exports$1w.pbkdf2Sync = dew$1x();
  return exports$1w;
}
function dew$1u() {
  if (_dewExec$1u)
    return exports$1v;
  _dewExec$1u = true;
  exports$1v.readUInt32BE = function readUInt32BE(bytes, off2) {
    var res = bytes[0 + off2] << 24 | bytes[1 + off2] << 16 | bytes[2 + off2] << 8 | bytes[3 + off2];
    return res >>> 0;
  };
  exports$1v.writeUInt32BE = function writeUInt32BE(bytes, value, off2) {
    bytes[0 + off2] = value >>> 24;
    bytes[1 + off2] = value >>> 16 & 255;
    bytes[2 + off2] = value >>> 8 & 255;
    bytes[3 + off2] = value & 255;
  };
  exports$1v.ip = function ip(inL, inR, out, off2) {
    var outL = 0;
    var outR = 0;
    for (var i8 = 6; i8 >= 0; i8 -= 2) {
      for (var j4 = 0; j4 <= 24; j4 += 8) {
        outL <<= 1;
        outL |= inR >>> j4 + i8 & 1;
      }
      for (var j4 = 0; j4 <= 24; j4 += 8) {
        outL <<= 1;
        outL |= inL >>> j4 + i8 & 1;
      }
    }
    for (var i8 = 6; i8 >= 0; i8 -= 2) {
      for (var j4 = 1; j4 <= 25; j4 += 8) {
        outR <<= 1;
        outR |= inR >>> j4 + i8 & 1;
      }
      for (var j4 = 1; j4 <= 25; j4 += 8) {
        outR <<= 1;
        outR |= inL >>> j4 + i8 & 1;
      }
    }
    out[off2 + 0] = outL >>> 0;
    out[off2 + 1] = outR >>> 0;
  };
  exports$1v.rip = function rip(inL, inR, out, off2) {
    var outL = 0;
    var outR = 0;
    for (var i8 = 0; i8 < 4; i8++) {
      for (var j4 = 24; j4 >= 0; j4 -= 8) {
        outL <<= 1;
        outL |= inR >>> j4 + i8 & 1;
        outL <<= 1;
        outL |= inL >>> j4 + i8 & 1;
      }
    }
    for (var i8 = 4; i8 < 8; i8++) {
      for (var j4 = 24; j4 >= 0; j4 -= 8) {
        outR <<= 1;
        outR |= inR >>> j4 + i8 & 1;
        outR <<= 1;
        outR |= inL >>> j4 + i8 & 1;
      }
    }
    out[off2 + 0] = outL >>> 0;
    out[off2 + 1] = outR >>> 0;
  };
  exports$1v.pc1 = function pc1(inL, inR, out, off2) {
    var outL = 0;
    var outR = 0;
    for (var i8 = 7; i8 >= 5; i8--) {
      for (var j4 = 0; j4 <= 24; j4 += 8) {
        outL <<= 1;
        outL |= inR >> j4 + i8 & 1;
      }
      for (var j4 = 0; j4 <= 24; j4 += 8) {
        outL <<= 1;
        outL |= inL >> j4 + i8 & 1;
      }
    }
    for (var j4 = 0; j4 <= 24; j4 += 8) {
      outL <<= 1;
      outL |= inR >> j4 + i8 & 1;
    }
    for (var i8 = 1; i8 <= 3; i8++) {
      for (var j4 = 0; j4 <= 24; j4 += 8) {
        outR <<= 1;
        outR |= inR >> j4 + i8 & 1;
      }
      for (var j4 = 0; j4 <= 24; j4 += 8) {
        outR <<= 1;
        outR |= inL >> j4 + i8 & 1;
      }
    }
    for (var j4 = 0; j4 <= 24; j4 += 8) {
      outR <<= 1;
      outR |= inL >> j4 + i8 & 1;
    }
    out[off2 + 0] = outL >>> 0;
    out[off2 + 1] = outR >>> 0;
  };
  exports$1v.r28shl = function r28shl(num, shift) {
    return num << shift & 268435455 | num >>> 28 - shift;
  };
  var pc2table = [
    14,
    11,
    17,
    4,
    27,
    23,
    25,
    0,
    13,
    22,
    7,
    18,
    5,
    9,
    16,
    24,
    2,
    20,
    12,
    21,
    1,
    8,
    15,
    26,
    15,
    4,
    25,
    19,
    9,
    1,
    26,
    16,
    5,
    11,
    23,
    8,
    12,
    7,
    17,
    0,
    22,
    3,
    10,
    14,
    6,
    20,
    27,
    24
  ];
  exports$1v.pc2 = function pc2(inL, inR, out, off2) {
    var outL = 0;
    var outR = 0;
    var len = pc2table.length >>> 1;
    for (var i8 = 0; i8 < len; i8++) {
      outL <<= 1;
      outL |= inL >>> pc2table[i8] & 1;
    }
    for (var i8 = len; i8 < pc2table.length; i8++) {
      outR <<= 1;
      outR |= inR >>> pc2table[i8] & 1;
    }
    out[off2 + 0] = outL >>> 0;
    out[off2 + 1] = outR >>> 0;
  };
  exports$1v.expand = function expand(r9, out, off2) {
    var outL = 0;
    var outR = 0;
    outL = (r9 & 1) << 5 | r9 >>> 27;
    for (var i8 = 23; i8 >= 15; i8 -= 4) {
      outL <<= 6;
      outL |= r9 >>> i8 & 63;
    }
    for (var i8 = 11; i8 >= 3; i8 -= 4) {
      outR |= r9 >>> i8 & 63;
      outR <<= 6;
    }
    outR |= (r9 & 31) << 1 | r9 >>> 31;
    out[off2 + 0] = outL >>> 0;
    out[off2 + 1] = outR >>> 0;
  };
  var sTable = [14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1, 3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8, 4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7, 15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13, 15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14, 9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5, 0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2, 5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9, 10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10, 1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1, 13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7, 11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12, 7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3, 1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9, 10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8, 15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14, 2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1, 8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6, 4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13, 15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3, 12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5, 0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8, 9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10, 7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13, 4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10, 3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6, 1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7, 10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12, 13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4, 10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2, 7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13, 0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11];
  exports$1v.substitute = function substitute(inL, inR) {
    var out = 0;
    for (var i8 = 0; i8 < 4; i8++) {
      var b5 = inL >>> 18 - i8 * 6 & 63;
      var sb = sTable[i8 * 64 + b5];
      out <<= 4;
      out |= sb;
    }
    for (var i8 = 0; i8 < 4; i8++) {
      var b5 = inR >>> 18 - i8 * 6 & 63;
      var sb = sTable[4 * 64 + i8 * 64 + b5];
      out <<= 4;
      out |= sb;
    }
    return out >>> 0;
  };
  var permuteTable = [16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22, 30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7];
  exports$1v.permute = function permute(num) {
    var out = 0;
    for (var i8 = 0; i8 < permuteTable.length; i8++) {
      out <<= 1;
      out |= num >>> permuteTable[i8] & 1;
    }
    return out >>> 0;
  };
  exports$1v.padSplit = function padSplit(num, size, group) {
    var str = num.toString(2);
    while (str.length < size)
      str = "0" + str;
    var out = [];
    for (var i8 = 0; i8 < size; i8 += group)
      out.push(str.slice(i8, i8 + group));
    return out.join(" ");
  };
  return exports$1v;
}
function dew$1t() {
  if (_dewExec$1t)
    return exports$1u;
  _dewExec$1t = true;
  exports$1u = assert2;
  function assert2(val, msg) {
    if (!val)
      throw new Error(msg || "Assertion failed");
  }
  assert2.equal = function assertEqual(l8, r9, msg) {
    if (l8 != r9)
      throw new Error(msg || "Assertion failed: " + l8 + " != " + r9);
  };
  return exports$1u;
}
function dew$1s() {
  if (_dewExec$1s)
    return exports$1t;
  _dewExec$1s = true;
  var assert2 = dew$1t();
  function Cipher2(options) {
    this.options = options;
    this.type = this.options.type;
    this.blockSize = 8;
    this._init();
    this.buffer = new Array(this.blockSize);
    this.bufferOff = 0;
  }
  exports$1t = Cipher2;
  Cipher2.prototype._init = function _init() {
  };
  Cipher2.prototype.update = function update(data) {
    if (data.length === 0)
      return [];
    if (this.type === "decrypt")
      return this._updateDecrypt(data);
    else
      return this._updateEncrypt(data);
  };
  Cipher2.prototype._buffer = function _buffer(data, off2) {
    var min = Math.min(this.buffer.length - this.bufferOff, data.length - off2);
    for (var i8 = 0; i8 < min; i8++)
      this.buffer[this.bufferOff + i8] = data[off2 + i8];
    this.bufferOff += min;
    return min;
  };
  Cipher2.prototype._flushBuffer = function _flushBuffer(out, off2) {
    this._update(this.buffer, 0, out, off2);
    this.bufferOff = 0;
    return this.blockSize;
  };
  Cipher2.prototype._updateEncrypt = function _updateEncrypt(data) {
    var inputOff = 0;
    var outputOff = 0;
    var count = (this.bufferOff + data.length) / this.blockSize | 0;
    var out = new Array(count * this.blockSize);
    if (this.bufferOff !== 0) {
      inputOff += this._buffer(data, inputOff);
      if (this.bufferOff === this.buffer.length)
        outputOff += this._flushBuffer(out, outputOff);
    }
    var max = data.length - (data.length - inputOff) % this.blockSize;
    for (; inputOff < max; inputOff += this.blockSize) {
      this._update(data, inputOff, out, outputOff);
      outputOff += this.blockSize;
    }
    for (; inputOff < data.length; inputOff++, this.bufferOff++)
      this.buffer[this.bufferOff] = data[inputOff];
    return out;
  };
  Cipher2.prototype._updateDecrypt = function _updateDecrypt(data) {
    var inputOff = 0;
    var outputOff = 0;
    var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
    var out = new Array(count * this.blockSize);
    for (; count > 0; count--) {
      inputOff += this._buffer(data, inputOff);
      outputOff += this._flushBuffer(out, outputOff);
    }
    inputOff += this._buffer(data, inputOff);
    return out;
  };
  Cipher2.prototype.final = function final(buffer2) {
    var first;
    if (buffer2)
      first = this.update(buffer2);
    var last;
    if (this.type === "encrypt")
      last = this._finalEncrypt();
    else
      last = this._finalDecrypt();
    if (first)
      return first.concat(last);
    else
      return last;
  };
  Cipher2.prototype._pad = function _pad(buffer2, off2) {
    if (off2 === 0)
      return false;
    while (off2 < buffer2.length)
      buffer2[off2++] = 0;
    return true;
  };
  Cipher2.prototype._finalEncrypt = function _finalEncrypt() {
    if (!this._pad(this.buffer, this.bufferOff))
      return [];
    var out = new Array(this.blockSize);
    this._update(this.buffer, 0, out, 0);
    return out;
  };
  Cipher2.prototype._unpad = function _unpad(buffer2) {
    return buffer2;
  };
  Cipher2.prototype._finalDecrypt = function _finalDecrypt() {
    assert2.equal(this.bufferOff, this.blockSize, "Not enough data to decrypt");
    var out = new Array(this.blockSize);
    this._flushBuffer(out, 0);
    return this._unpad(out);
  };
  return exports$1t;
}
function dew$1r() {
  if (_dewExec$1r)
    return exports$1s;
  _dewExec$1r = true;
  var assert2 = dew$1t();
  var inherits4 = dew$f$2();
  var utils = dew$1u();
  var Cipher2 = dew$1s();
  function DESState() {
    this.tmp = new Array(2);
    this.keys = null;
  }
  function DES(options) {
    Cipher2.call(this, options);
    var state = new DESState();
    this._desState = state;
    this.deriveKeys(state, options.key);
  }
  inherits4(DES, Cipher2);
  exports$1s = DES;
  DES.create = function create(options) {
    return new DES(options);
  };
  var shiftTable = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1];
  DES.prototype.deriveKeys = function deriveKeys(state, key) {
    state.keys = new Array(16 * 2);
    assert2.equal(key.length, this.blockSize, "Invalid key length");
    var kL = utils.readUInt32BE(key, 0);
    var kR = utils.readUInt32BE(key, 4);
    utils.pc1(kL, kR, state.tmp, 0);
    kL = state.tmp[0];
    kR = state.tmp[1];
    for (var i8 = 0; i8 < state.keys.length; i8 += 2) {
      var shift = shiftTable[i8 >>> 1];
      kL = utils.r28shl(kL, shift);
      kR = utils.r28shl(kR, shift);
      utils.pc2(kL, kR, state.keys, i8);
    }
  };
  DES.prototype._update = function _update(inp, inOff, out, outOff) {
    var state = this._desState;
    var l8 = utils.readUInt32BE(inp, inOff);
    var r9 = utils.readUInt32BE(inp, inOff + 4);
    utils.ip(l8, r9, state.tmp, 0);
    l8 = state.tmp[0];
    r9 = state.tmp[1];
    if (this.type === "encrypt")
      this._encrypt(state, l8, r9, state.tmp, 0);
    else
      this._decrypt(state, l8, r9, state.tmp, 0);
    l8 = state.tmp[0];
    r9 = state.tmp[1];
    utils.writeUInt32BE(out, l8, outOff);
    utils.writeUInt32BE(out, r9, outOff + 4);
  };
  DES.prototype._pad = function _pad(buffer2, off2) {
    var value = buffer2.length - off2;
    for (var i8 = off2; i8 < buffer2.length; i8++)
      buffer2[i8] = value;
    return true;
  };
  DES.prototype._unpad = function _unpad(buffer2) {
    var pad = buffer2[buffer2.length - 1];
    for (var i8 = buffer2.length - pad; i8 < buffer2.length; i8++)
      assert2.equal(buffer2[i8], pad);
    return buffer2.slice(0, buffer2.length - pad);
  };
  DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off2) {
    var l8 = lStart;
    var r9 = rStart;
    for (var i8 = 0; i8 < state.keys.length; i8 += 2) {
      var keyL = state.keys[i8];
      var keyR = state.keys[i8 + 1];
      utils.expand(r9, state.tmp, 0);
      keyL ^= state.tmp[0];
      keyR ^= state.tmp[1];
      var s7 = utils.substitute(keyL, keyR);
      var f9 = utils.permute(s7);
      var t8 = r9;
      r9 = (l8 ^ f9) >>> 0;
      l8 = t8;
    }
    utils.rip(r9, l8, out, off2);
  };
  DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off2) {
    var l8 = rStart;
    var r9 = lStart;
    for (var i8 = state.keys.length - 2; i8 >= 0; i8 -= 2) {
      var keyL = state.keys[i8];
      var keyR = state.keys[i8 + 1];
      utils.expand(l8, state.tmp, 0);
      keyL ^= state.tmp[0];
      keyR ^= state.tmp[1];
      var s7 = utils.substitute(keyL, keyR);
      var f9 = utils.permute(s7);
      var t8 = l8;
      l8 = (r9 ^ f9) >>> 0;
      r9 = t8;
    }
    utils.rip(l8, r9, out, off2);
  };
  return exports$1s;
}
function dew$1q() {
  if (_dewExec$1q)
    return exports$1r;
  _dewExec$1q = true;
  var assert2 = dew$1t();
  var inherits4 = dew$f$2();
  var proto = {};
  function CBCState(iv) {
    assert2.equal(iv.length, 8, "Invalid IV length");
    this.iv = new Array(8);
    for (var i8 = 0; i8 < this.iv.length; i8++)
      this.iv[i8] = iv[i8];
  }
  function instantiate(Base) {
    function CBC(options) {
      Base.call(this, options);
      this._cbcInit();
    }
    inherits4(CBC, Base);
    var keys = Object.keys(proto);
    for (var i8 = 0; i8 < keys.length; i8++) {
      var key = keys[i8];
      CBC.prototype[key] = proto[key];
    }
    CBC.create = function create(options) {
      return new CBC(options);
    };
    return CBC;
  }
  exports$1r.instantiate = instantiate;
  proto._cbcInit = function _cbcInit() {
    var state = new CBCState(this.options.iv);
    this._cbcState = state;
  };
  proto._update = function _update(inp, inOff, out, outOff) {
    var state = this._cbcState;
    var superProto = this.constructor.super_.prototype;
    var iv = state.iv;
    if (this.type === "encrypt") {
      for (var i8 = 0; i8 < this.blockSize; i8++)
        iv[i8] ^= inp[inOff + i8];
      superProto._update.call(this, iv, 0, out, outOff);
      for (var i8 = 0; i8 < this.blockSize; i8++)
        iv[i8] = out[outOff + i8];
    } else {
      superProto._update.call(this, inp, inOff, out, outOff);
      for (var i8 = 0; i8 < this.blockSize; i8++)
        out[outOff + i8] ^= iv[i8];
      for (var i8 = 0; i8 < this.blockSize; i8++)
        iv[i8] = inp[inOff + i8];
    }
  };
  return exports$1r;
}
function dew$1p() {
  if (_dewExec$1p)
    return exports$1q;
  _dewExec$1p = true;
  var assert2 = dew$1t();
  var inherits4 = dew$f$2();
  var Cipher2 = dew$1s();
  var DES = dew$1r();
  function EDEState(type, key) {
    assert2.equal(key.length, 24, "Invalid key length");
    var k1 = key.slice(0, 8);
    var k22 = key.slice(8, 16);
    var k32 = key.slice(16, 24);
    if (type === "encrypt") {
      this.ciphers = [DES.create({
        type: "encrypt",
        key: k1
      }), DES.create({
        type: "decrypt",
        key: k22
      }), DES.create({
        type: "encrypt",
        key: k32
      })];
    } else {
      this.ciphers = [DES.create({
        type: "decrypt",
        key: k32
      }), DES.create({
        type: "encrypt",
        key: k22
      }), DES.create({
        type: "decrypt",
        key: k1
      })];
    }
  }
  function EDE(options) {
    Cipher2.call(this, options);
    var state = new EDEState(this.type, this.options.key);
    this._edeState = state;
  }
  inherits4(EDE, Cipher2);
  exports$1q = EDE;
  EDE.create = function create(options) {
    return new EDE(options);
  };
  EDE.prototype._update = function _update(inp, inOff, out, outOff) {
    var state = this._edeState;
    state.ciphers[0]._update(inp, inOff, out, outOff);
    state.ciphers[1]._update(out, outOff, out, outOff);
    state.ciphers[2]._update(out, outOff, out, outOff);
  };
  EDE.prototype._pad = DES.prototype._pad;
  EDE.prototype._unpad = DES.prototype._unpad;
  return exports$1q;
}
function dew$1o() {
  if (_dewExec$1o)
    return exports$1p;
  _dewExec$1o = true;
  exports$1p.utils = dew$1u();
  exports$1p.Cipher = dew$1s();
  exports$1p.DES = dew$1r();
  exports$1p.CBC = dew$1q();
  exports$1p.EDE = dew$1p();
  return exports$1p;
}
function dew$1n() {
  if (_dewExec$1n)
    return exports$1o;
  _dewExec$1n = true;
  var CipherBase = dew$1G();
  var des = dew$1o();
  var inherits4 = dew$f$2();
  var Buffer3 = dew$1T().Buffer;
  var modes = {
    "des-ede3-cbc": des.CBC.instantiate(des.EDE),
    "des-ede3": des.EDE,
    "des-ede-cbc": des.CBC.instantiate(des.EDE),
    "des-ede": des.EDE,
    "des-cbc": des.CBC.instantiate(des.DES),
    "des-ecb": des.DES
  };
  modes.des = modes["des-cbc"];
  modes.des3 = modes["des-ede3-cbc"];
  exports$1o = DES;
  inherits4(DES, CipherBase);
  function DES(opts) {
    CipherBase.call(this || _global$k);
    var modeName = opts.mode.toLowerCase();
    var mode = modes[modeName];
    var type;
    if (opts.decrypt) {
      type = "decrypt";
    } else {
      type = "encrypt";
    }
    var key = opts.key;
    if (!Buffer3.isBuffer(key)) {
      key = Buffer3.from(key);
    }
    if (modeName === "des-ede" || modeName === "des-ede-cbc") {
      key = Buffer3.concat([key, key.slice(0, 8)]);
    }
    var iv = opts.iv;
    if (!Buffer3.isBuffer(iv)) {
      iv = Buffer3.from(iv);
    }
    (this || _global$k)._des = mode.create({
      key,
      iv,
      type
    });
  }
  DES.prototype._update = function(data) {
    return Buffer3.from((this || _global$k)._des.update(data));
  };
  DES.prototype._final = function() {
    return Buffer3.from((this || _global$k)._des.final());
  };
  return exports$1o;
}
function dew$1m() {
  if (_dewExec$1m)
    return exports$1n;
  _dewExec$1m = true;
  exports$1n.encrypt = function(self2, block) {
    return self2._cipher.encryptBlock(block);
  };
  exports$1n.decrypt = function(self2, block) {
    return self2._cipher.decryptBlock(block);
  };
  return exports$1n;
}
function dew$1l() {
  if (_dewExec$1l)
    return exports$1m;
  _dewExec$1l = true;
  var Buffer3 = e$1$1.Buffer;
  exports$1m = function xor(a8, b5) {
    var length = Math.min(a8.length, b5.length);
    var buffer2 = new Buffer3(length);
    for (var i8 = 0; i8 < length; ++i8) {
      buffer2[i8] = a8[i8] ^ b5[i8];
    }
    return buffer2;
  };
  return exports$1m;
}
function dew$1k() {
  if (_dewExec$1k)
    return exports$1l;
  _dewExec$1k = true;
  var xor = dew$1l();
  exports$1l.encrypt = function(self2, block) {
    var data = xor(block, self2._prev);
    self2._prev = self2._cipher.encryptBlock(data);
    return self2._prev;
  };
  exports$1l.decrypt = function(self2, block) {
    var pad = self2._prev;
    self2._prev = block;
    var out = self2._cipher.decryptBlock(block);
    return xor(out, pad);
  };
  return exports$1l;
}
function dew$1j() {
  if (_dewExec$1j)
    return exports$1k;
  _dewExec$1j = true;
  var Buffer3 = dew$1T().Buffer;
  var xor = dew$1l();
  function encryptStart(self2, data, decrypt) {
    var len = data.length;
    var out = xor(data, self2._cache);
    self2._cache = self2._cache.slice(len);
    self2._prev = Buffer3.concat([self2._prev, decrypt ? data : out]);
    return out;
  }
  exports$1k.encrypt = function(self2, data, decrypt) {
    var out = Buffer3.allocUnsafe(0);
    var len;
    while (data.length) {
      if (self2._cache.length === 0) {
        self2._cache = self2._cipher.encryptBlock(self2._prev);
        self2._prev = Buffer3.allocUnsafe(0);
      }
      if (self2._cache.length <= data.length) {
        len = self2._cache.length;
        out = Buffer3.concat([out, encryptStart(self2, data.slice(0, len), decrypt)]);
        data = data.slice(len);
      } else {
        out = Buffer3.concat([out, encryptStart(self2, data, decrypt)]);
        break;
      }
    }
    return out;
  };
  return exports$1k;
}
function dew$1i() {
  if (_dewExec$1i)
    return exports$1j;
  _dewExec$1i = true;
  var Buffer3 = dew$1T().Buffer;
  function encryptByte(self2, byteParam, decrypt) {
    var pad = self2._cipher.encryptBlock(self2._prev);
    var out = pad[0] ^ byteParam;
    self2._prev = Buffer3.concat([self2._prev.slice(1), Buffer3.from([decrypt ? byteParam : out])]);
    return out;
  }
  exports$1j.encrypt = function(self2, chunk, decrypt) {
    var len = chunk.length;
    var out = Buffer3.allocUnsafe(len);
    var i8 = -1;
    while (++i8 < len) {
      out[i8] = encryptByte(self2, chunk[i8], decrypt);
    }
    return out;
  };
  return exports$1j;
}
function dew$1h() {
  if (_dewExec$1h)
    return exports$1i;
  _dewExec$1h = true;
  var Buffer3 = dew$1T().Buffer;
  function encryptByte(self2, byteParam, decrypt) {
    var pad;
    var i8 = -1;
    var len = 8;
    var out = 0;
    var bit, value;
    while (++i8 < len) {
      pad = self2._cipher.encryptBlock(self2._prev);
      bit = byteParam & 1 << 7 - i8 ? 128 : 0;
      value = pad[0] ^ bit;
      out += (value & 128) >> i8 % 8;
      self2._prev = shiftIn(self2._prev, decrypt ? bit : value);
    }
    return out;
  }
  function shiftIn(buffer2, value) {
    var len = buffer2.length;
    var i8 = -1;
    var out = Buffer3.allocUnsafe(buffer2.length);
    buffer2 = Buffer3.concat([buffer2, Buffer3.from([value])]);
    while (++i8 < len) {
      out[i8] = buffer2[i8] << 1 | buffer2[i8 + 1] >> 7;
    }
    return out;
  }
  exports$1i.encrypt = function(self2, chunk, decrypt) {
    var len = chunk.length;
    var out = Buffer3.allocUnsafe(len);
    var i8 = -1;
    while (++i8 < len) {
      out[i8] = encryptByte(self2, chunk[i8], decrypt);
    }
    return out;
  };
  return exports$1i;
}
function dew$1g() {
  if (_dewExec$1g)
    return exports$1h;
  _dewExec$1g = true;
  var Buffer3 = e$1$1.Buffer;
  var xor = dew$1l();
  function getBlock(self2) {
    self2._prev = self2._cipher.encryptBlock(self2._prev);
    return self2._prev;
  }
  exports$1h.encrypt = function(self2, chunk) {
    while (self2._cache.length < chunk.length) {
      self2._cache = Buffer3.concat([self2._cache, getBlock(self2)]);
    }
    var pad = self2._cache.slice(0, chunk.length);
    self2._cache = self2._cache.slice(chunk.length);
    return xor(chunk, pad);
  };
  return exports$1h;
}
function dew$1f() {
  if (_dewExec$1f)
    return exports$1g;
  _dewExec$1f = true;
  function incr32(iv) {
    var len = iv.length;
    var item;
    while (len--) {
      item = iv.readUInt8(len);
      if (item === 255) {
        iv.writeUInt8(0, len);
      } else {
        item++;
        iv.writeUInt8(item, len);
        break;
      }
    }
  }
  exports$1g = incr32;
  return exports$1g;
}
function dew$1e() {
  if (_dewExec$1e)
    return exports$1f;
  _dewExec$1e = true;
  var xor = dew$1l();
  var Buffer3 = dew$1T().Buffer;
  var incr32 = dew$1f();
  function getBlock(self2) {
    var out = self2._cipher.encryptBlockRaw(self2._prev);
    incr32(self2._prev);
    return out;
  }
  var blockSize = 16;
  exports$1f.encrypt = function(self2, chunk) {
    var chunkNum = Math.ceil(chunk.length / blockSize);
    var start = self2._cache.length;
    self2._cache = Buffer3.concat([self2._cache, Buffer3.allocUnsafe(chunkNum * blockSize)]);
    for (var i8 = 0; i8 < chunkNum; i8++) {
      var out = getBlock(self2);
      var offset = start + i8 * blockSize;
      self2._cache.writeUInt32BE(out[0], offset + 0);
      self2._cache.writeUInt32BE(out[1], offset + 4);
      self2._cache.writeUInt32BE(out[2], offset + 8);
      self2._cache.writeUInt32BE(out[3], offset + 12);
    }
    var pad = self2._cache.slice(0, chunk.length);
    self2._cache = self2._cache.slice(chunk.length);
    return xor(chunk, pad);
  };
  return exports$1f;
}
function dew$1d() {
  if (_dewExec$1d)
    return exports$1e;
  _dewExec$1d = true;
  var modeModules = {
    ECB: dew$1m(),
    CBC: dew$1k(),
    CFB: dew$1j(),
    CFB8: dew$1i(),
    CFB1: dew$1h(),
    OFB: dew$1g(),
    CTR: dew$1e(),
    GCM: dew$1e()
  };
  var modes = _list;
  for (var key in modes) {
    modes[key].module = modeModules[modes[key].mode];
  }
  exports$1e = modes;
  return exports$1e;
}
function dew$1c() {
  if (_dewExec$1c)
    return exports$1d;
  _dewExec$1c = true;
  var Buffer3 = dew$1T().Buffer;
  function asUInt32Array(buf) {
    if (!Buffer3.isBuffer(buf))
      buf = Buffer3.from(buf);
    var len = buf.length / 4 | 0;
    var out = new Array(len);
    for (var i8 = 0; i8 < len; i8++) {
      out[i8] = buf.readUInt32BE(i8 * 4);
    }
    return out;
  }
  function scrubVec(v6) {
    for (var i8 = 0; i8 < v6.length; v6++) {
      v6[i8] = 0;
    }
  }
  function cryptBlock(M4, keySchedule, SUB_MIX, SBOX, nRounds) {
    var SUB_MIX0 = SUB_MIX[0];
    var SUB_MIX1 = SUB_MIX[1];
    var SUB_MIX2 = SUB_MIX[2];
    var SUB_MIX3 = SUB_MIX[3];
    var s0 = M4[0] ^ keySchedule[0];
    var s1 = M4[1] ^ keySchedule[1];
    var s22 = M4[2] ^ keySchedule[2];
    var s32 = M4[3] ^ keySchedule[3];
    var t0, t1, t22, t32;
    var ksRow = 4;
    for (var round = 1; round < nRounds; round++) {
      t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[s1 >>> 16 & 255] ^ SUB_MIX2[s22 >>> 8 & 255] ^ SUB_MIX3[s32 & 255] ^ keySchedule[ksRow++];
      t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[s22 >>> 16 & 255] ^ SUB_MIX2[s32 >>> 8 & 255] ^ SUB_MIX3[s0 & 255] ^ keySchedule[ksRow++];
      t22 = SUB_MIX0[s22 >>> 24] ^ SUB_MIX1[s32 >>> 16 & 255] ^ SUB_MIX2[s0 >>> 8 & 255] ^ SUB_MIX3[s1 & 255] ^ keySchedule[ksRow++];
      t32 = SUB_MIX0[s32 >>> 24] ^ SUB_MIX1[s0 >>> 16 & 255] ^ SUB_MIX2[s1 >>> 8 & 255] ^ SUB_MIX3[s22 & 255] ^ keySchedule[ksRow++];
      s0 = t0;
      s1 = t1;
      s22 = t22;
      s32 = t32;
    }
    t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 255] << 16 | SBOX[s22 >>> 8 & 255] << 8 | SBOX[s32 & 255]) ^ keySchedule[ksRow++];
    t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s22 >>> 16 & 255] << 16 | SBOX[s32 >>> 8 & 255] << 8 | SBOX[s0 & 255]) ^ keySchedule[ksRow++];
    t22 = (SBOX[s22 >>> 24] << 24 | SBOX[s32 >>> 16 & 255] << 16 | SBOX[s0 >>> 8 & 255] << 8 | SBOX[s1 & 255]) ^ keySchedule[ksRow++];
    t32 = (SBOX[s32 >>> 24] << 24 | SBOX[s0 >>> 16 & 255] << 16 | SBOX[s1 >>> 8 & 255] << 8 | SBOX[s22 & 255]) ^ keySchedule[ksRow++];
    t0 = t0 >>> 0;
    t1 = t1 >>> 0;
    t22 = t22 >>> 0;
    t32 = t32 >>> 0;
    return [t0, t1, t22, t32];
  }
  var RCON = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
  var G3 = function() {
    var d6 = new Array(256);
    for (var j4 = 0; j4 < 256; j4++) {
      if (j4 < 128) {
        d6[j4] = j4 << 1;
      } else {
        d6[j4] = j4 << 1 ^ 283;
      }
    }
    var SBOX = [];
    var INV_SBOX = [];
    var SUB_MIX = [[], [], [], []];
    var INV_SUB_MIX = [[], [], [], []];
    var x4 = 0;
    var xi = 0;
    for (var i8 = 0; i8 < 256; ++i8) {
      var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
      sx = sx >>> 8 ^ sx & 255 ^ 99;
      SBOX[x4] = sx;
      INV_SBOX[sx] = x4;
      var x22 = d6[x4];
      var x42 = d6[x22];
      var x8 = d6[x42];
      var t8 = d6[sx] * 257 ^ sx * 16843008;
      SUB_MIX[0][x4] = t8 << 24 | t8 >>> 8;
      SUB_MIX[1][x4] = t8 << 16 | t8 >>> 16;
      SUB_MIX[2][x4] = t8 << 8 | t8 >>> 24;
      SUB_MIX[3][x4] = t8;
      t8 = x8 * 16843009 ^ x42 * 65537 ^ x22 * 257 ^ x4 * 16843008;
      INV_SUB_MIX[0][sx] = t8 << 24 | t8 >>> 8;
      INV_SUB_MIX[1][sx] = t8 << 16 | t8 >>> 16;
      INV_SUB_MIX[2][sx] = t8 << 8 | t8 >>> 24;
      INV_SUB_MIX[3][sx] = t8;
      if (x4 === 0) {
        x4 = xi = 1;
      } else {
        x4 = x22 ^ d6[d6[d6[x8 ^ x22]]];
        xi ^= d6[d6[xi]];
      }
    }
    return {
      SBOX,
      INV_SBOX,
      SUB_MIX,
      INV_SUB_MIX
    };
  }();
  function AES(key) {
    (this || _global$j)._key = asUInt32Array(key);
    this._reset();
  }
  AES.blockSize = 4 * 4;
  AES.keySize = 256 / 8;
  AES.prototype.blockSize = AES.blockSize;
  AES.prototype.keySize = AES.keySize;
  AES.prototype._reset = function() {
    var keyWords = (this || _global$j)._key;
    var keySize = keyWords.length;
    var nRounds = keySize + 6;
    var ksRows = (nRounds + 1) * 4;
    var keySchedule = [];
    for (var k4 = 0; k4 < keySize; k4++) {
      keySchedule[k4] = keyWords[k4];
    }
    for (k4 = keySize; k4 < ksRows; k4++) {
      var t8 = keySchedule[k4 - 1];
      if (k4 % keySize === 0) {
        t8 = t8 << 8 | t8 >>> 24;
        t8 = G3.SBOX[t8 >>> 24] << 24 | G3.SBOX[t8 >>> 16 & 255] << 16 | G3.SBOX[t8 >>> 8 & 255] << 8 | G3.SBOX[t8 & 255];
        t8 ^= RCON[k4 / keySize | 0] << 24;
      } else if (keySize > 6 && k4 % keySize === 4) {
        t8 = G3.SBOX[t8 >>> 24] << 24 | G3.SBOX[t8 >>> 16 & 255] << 16 | G3.SBOX[t8 >>> 8 & 255] << 8 | G3.SBOX[t8 & 255];
      }
      keySchedule[k4] = keySchedule[k4 - keySize] ^ t8;
    }
    var invKeySchedule = [];
    for (var ik = 0; ik < ksRows; ik++) {
      var ksR = ksRows - ik;
      var tt2 = keySchedule[ksR - (ik % 4 ? 0 : 4)];
      if (ik < 4 || ksR <= 4) {
        invKeySchedule[ik] = tt2;
      } else {
        invKeySchedule[ik] = G3.INV_SUB_MIX[0][G3.SBOX[tt2 >>> 24]] ^ G3.INV_SUB_MIX[1][G3.SBOX[tt2 >>> 16 & 255]] ^ G3.INV_SUB_MIX[2][G3.SBOX[tt2 >>> 8 & 255]] ^ G3.INV_SUB_MIX[3][G3.SBOX[tt2 & 255]];
      }
    }
    (this || _global$j)._nRounds = nRounds;
    (this || _global$j)._keySchedule = keySchedule;
    (this || _global$j)._invKeySchedule = invKeySchedule;
  };
  AES.prototype.encryptBlockRaw = function(M4) {
    M4 = asUInt32Array(M4);
    return cryptBlock(M4, (this || _global$j)._keySchedule, G3.SUB_MIX, G3.SBOX, (this || _global$j)._nRounds);
  };
  AES.prototype.encryptBlock = function(M4) {
    var out = this.encryptBlockRaw(M4);
    var buf = Buffer3.allocUnsafe(16);
    buf.writeUInt32BE(out[0], 0);
    buf.writeUInt32BE(out[1], 4);
    buf.writeUInt32BE(out[2], 8);
    buf.writeUInt32BE(out[3], 12);
    return buf;
  };
  AES.prototype.decryptBlock = function(M4) {
    M4 = asUInt32Array(M4);
    var m1 = M4[1];
    M4[1] = M4[3];
    M4[3] = m1;
    var out = cryptBlock(M4, (this || _global$j)._invKeySchedule, G3.INV_SUB_MIX, G3.INV_SBOX, (this || _global$j)._nRounds);
    var buf = Buffer3.allocUnsafe(16);
    buf.writeUInt32BE(out[0], 0);
    buf.writeUInt32BE(out[3], 4);
    buf.writeUInt32BE(out[2], 8);
    buf.writeUInt32BE(out[1], 12);
    return buf;
  };
  AES.prototype.scrub = function() {
    scrubVec((this || _global$j)._keySchedule);
    scrubVec((this || _global$j)._invKeySchedule);
    scrubVec((this || _global$j)._key);
  };
  exports$1d.AES = AES;
  return exports$1d;
}
function dew$1b() {
  if (_dewExec$1b)
    return exports$1c;
  _dewExec$1b = true;
  var Buffer3 = dew$1T().Buffer;
  var ZEROES = Buffer3.alloc(16, 0);
  function toArray2(buf) {
    return [buf.readUInt32BE(0), buf.readUInt32BE(4), buf.readUInt32BE(8), buf.readUInt32BE(12)];
  }
  function fromArray(out) {
    var buf = Buffer3.allocUnsafe(16);
    buf.writeUInt32BE(out[0] >>> 0, 0);
    buf.writeUInt32BE(out[1] >>> 0, 4);
    buf.writeUInt32BE(out[2] >>> 0, 8);
    buf.writeUInt32BE(out[3] >>> 0, 12);
    return buf;
  }
  function GHASH(key) {
    (this || _global$i).h = key;
    (this || _global$i).state = Buffer3.alloc(16, 0);
    (this || _global$i).cache = Buffer3.allocUnsafe(0);
  }
  GHASH.prototype.ghash = function(block) {
    var i8 = -1;
    while (++i8 < block.length) {
      (this || _global$i).state[i8] ^= block[i8];
    }
    this._multiply();
  };
  GHASH.prototype._multiply = function() {
    var Vi = toArray2((this || _global$i).h);
    var Zi = [0, 0, 0, 0];
    var j4, xi, lsbVi;
    var i8 = -1;
    while (++i8 < 128) {
      xi = ((this || _global$i).state[~~(i8 / 8)] & 1 << 7 - i8 % 8) !== 0;
      if (xi) {
        Zi[0] ^= Vi[0];
        Zi[1] ^= Vi[1];
        Zi[2] ^= Vi[2];
        Zi[3] ^= Vi[3];
      }
      lsbVi = (Vi[3] & 1) !== 0;
      for (j4 = 3; j4 > 0; j4--) {
        Vi[j4] = Vi[j4] >>> 1 | (Vi[j4 - 1] & 1) << 31;
      }
      Vi[0] = Vi[0] >>> 1;
      if (lsbVi) {
        Vi[0] = Vi[0] ^ 225 << 24;
      }
    }
    (this || _global$i).state = fromArray(Zi);
  };
  GHASH.prototype.update = function(buf) {
    (this || _global$i).cache = Buffer3.concat([(this || _global$i).cache, buf]);
    var chunk;
    while ((this || _global$i).cache.length >= 16) {
      chunk = (this || _global$i).cache.slice(0, 16);
      (this || _global$i).cache = (this || _global$i).cache.slice(16);
      this.ghash(chunk);
    }
  };
  GHASH.prototype.final = function(abl, bl) {
    if ((this || _global$i).cache.length) {
      this.ghash(Buffer3.concat([(this || _global$i).cache, ZEROES], 16));
    }
    this.ghash(fromArray([0, abl, 0, bl]));
    return (this || _global$i).state;
  };
  exports$1c = GHASH;
  return exports$1c;
}
function dew$1a() {
  if (_dewExec$1a)
    return exports$1b;
  _dewExec$1a = true;
  var aes = dew$1c();
  var Buffer3 = dew$1T().Buffer;
  var Transform2 = dew$1G();
  var inherits4 = dew$f$2();
  var GHASH = dew$1b();
  var xor = dew$1l();
  var incr32 = dew$1f();
  function xorTest(a8, b5) {
    var out = 0;
    if (a8.length !== b5.length)
      out++;
    var len = Math.min(a8.length, b5.length);
    for (var i8 = 0; i8 < len; ++i8) {
      out += a8[i8] ^ b5[i8];
    }
    return out;
  }
  function calcIv(self2, iv, ck) {
    if (iv.length === 12) {
      self2._finID = Buffer3.concat([iv, Buffer3.from([0, 0, 0, 1])]);
      return Buffer3.concat([iv, Buffer3.from([0, 0, 0, 2])]);
    }
    var ghash = new GHASH(ck);
    var len = iv.length;
    var toPad = len % 16;
    ghash.update(iv);
    if (toPad) {
      toPad = 16 - toPad;
      ghash.update(Buffer3.alloc(toPad, 0));
    }
    ghash.update(Buffer3.alloc(8, 0));
    var ivBits = len * 8;
    var tail = Buffer3.alloc(8);
    tail.writeUIntBE(ivBits, 0, 8);
    ghash.update(tail);
    self2._finID = ghash.state;
    var out = Buffer3.from(self2._finID);
    incr32(out);
    return out;
  }
  function StreamCipher(mode, key, iv, decrypt) {
    Transform2.call(this || _global$h);
    var h8 = Buffer3.alloc(4, 0);
    (this || _global$h)._cipher = new aes.AES(key);
    var ck = (this || _global$h)._cipher.encryptBlock(h8);
    (this || _global$h)._ghash = new GHASH(ck);
    iv = calcIv(this || _global$h, iv, ck);
    (this || _global$h)._prev = Buffer3.from(iv);
    (this || _global$h)._cache = Buffer3.allocUnsafe(0);
    (this || _global$h)._secCache = Buffer3.allocUnsafe(0);
    (this || _global$h)._decrypt = decrypt;
    (this || _global$h)._alen = 0;
    (this || _global$h)._len = 0;
    (this || _global$h)._mode = mode;
    (this || _global$h)._authTag = null;
    (this || _global$h)._called = false;
  }
  inherits4(StreamCipher, Transform2);
  StreamCipher.prototype._update = function(chunk) {
    if (!(this || _global$h)._called && (this || _global$h)._alen) {
      var rump = 16 - (this || _global$h)._alen % 16;
      if (rump < 16) {
        rump = Buffer3.alloc(rump, 0);
        (this || _global$h)._ghash.update(rump);
      }
    }
    (this || _global$h)._called = true;
    var out = (this || _global$h)._mode.encrypt(this || _global$h, chunk);
    if ((this || _global$h)._decrypt) {
      (this || _global$h)._ghash.update(chunk);
    } else {
      (this || _global$h)._ghash.update(out);
    }
    (this || _global$h)._len += chunk.length;
    return out;
  };
  StreamCipher.prototype._final = function() {
    if ((this || _global$h)._decrypt && !(this || _global$h)._authTag)
      throw new Error("Unsupported state or unable to authenticate data");
    var tag = xor((this || _global$h)._ghash.final((this || _global$h)._alen * 8, (this || _global$h)._len * 8), (this || _global$h)._cipher.encryptBlock((this || _global$h)._finID));
    if ((this || _global$h)._decrypt && xorTest(tag, (this || _global$h)._authTag))
      throw new Error("Unsupported state or unable to authenticate data");
    (this || _global$h)._authTag = tag;
    (this || _global$h)._cipher.scrub();
  };
  StreamCipher.prototype.getAuthTag = function getAuthTag() {
    if ((this || _global$h)._decrypt || !Buffer3.isBuffer((this || _global$h)._authTag))
      throw new Error("Attempting to get auth tag in unsupported state");
    return (this || _global$h)._authTag;
  };
  StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
    if (!(this || _global$h)._decrypt)
      throw new Error("Attempting to set auth tag in unsupported state");
    (this || _global$h)._authTag = tag;
  };
  StreamCipher.prototype.setAAD = function setAAD(buf) {
    if ((this || _global$h)._called)
      throw new Error("Attempting to set AAD in unsupported state");
    (this || _global$h)._ghash.update(buf);
    (this || _global$h)._alen += buf.length;
  };
  exports$1b = StreamCipher;
  return exports$1b;
}
function dew$19() {
  if (_dewExec$19)
    return exports$1a;
  _dewExec$19 = true;
  var aes = dew$1c();
  var Buffer3 = dew$1T().Buffer;
  var Transform2 = dew$1G();
  var inherits4 = dew$f$2();
  function StreamCipher(mode, key, iv, decrypt) {
    Transform2.call(this || _global$g);
    (this || _global$g)._cipher = new aes.AES(key);
    (this || _global$g)._prev = Buffer3.from(iv);
    (this || _global$g)._cache = Buffer3.allocUnsafe(0);
    (this || _global$g)._secCache = Buffer3.allocUnsafe(0);
    (this || _global$g)._decrypt = decrypt;
    (this || _global$g)._mode = mode;
  }
  inherits4(StreamCipher, Transform2);
  StreamCipher.prototype._update = function(chunk) {
    return (this || _global$g)._mode.encrypt(this || _global$g, chunk, (this || _global$g)._decrypt);
  };
  StreamCipher.prototype._final = function() {
    (this || _global$g)._cipher.scrub();
  };
  exports$1a = StreamCipher;
  return exports$1a;
}
function dew$18() {
  if (_dewExec$18)
    return exports$19;
  _dewExec$18 = true;
  var Buffer3 = dew$1T().Buffer;
  var MD5 = dew$1Q();
  function EVP_BytesToKey(password, salt, keyBits, ivLen) {
    if (!Buffer3.isBuffer(password))
      password = Buffer3.from(password, "binary");
    if (salt) {
      if (!Buffer3.isBuffer(salt))
        salt = Buffer3.from(salt, "binary");
      if (salt.length !== 8)
        throw new RangeError("salt should be Buffer with 8 byte length");
    }
    var keyLen = keyBits / 8;
    var key = Buffer3.alloc(keyLen);
    var iv = Buffer3.alloc(ivLen || 0);
    var tmp = Buffer3.alloc(0);
    while (keyLen > 0 || ivLen > 0) {
      var hash = new MD5();
      hash.update(tmp);
      hash.update(password);
      if (salt)
        hash.update(salt);
      tmp = hash.digest();
      var used = 0;
      if (keyLen > 0) {
        var keyStart = key.length - keyLen;
        used = Math.min(keyLen, tmp.length);
        tmp.copy(key, keyStart, 0, used);
        keyLen -= used;
      }
      if (used < tmp.length && ivLen > 0) {
        var ivStart = iv.length - ivLen;
        var length = Math.min(ivLen, tmp.length - used);
        tmp.copy(iv, ivStart, used, used + length);
        ivLen -= length;
      }
    }
    tmp.fill(0);
    return {
      key,
      iv
    };
  }
  exports$19 = EVP_BytesToKey;
  return exports$19;
}
function dew$17() {
  if (_dewExec$17)
    return exports$18;
  _dewExec$17 = true;
  var MODES = dew$1d();
  var AuthCipher = dew$1a();
  var Buffer3 = dew$1T().Buffer;
  var StreamCipher = dew$19();
  var Transform2 = dew$1G();
  var aes = dew$1c();
  var ebtk = dew$18();
  var inherits4 = dew$f$2();
  function Cipher2(mode, key, iv) {
    Transform2.call(this || _global$f);
    (this || _global$f)._cache = new Splitter();
    (this || _global$f)._cipher = new aes.AES(key);
    (this || _global$f)._prev = Buffer3.from(iv);
    (this || _global$f)._mode = mode;
    (this || _global$f)._autopadding = true;
  }
  inherits4(Cipher2, Transform2);
  Cipher2.prototype._update = function(data) {
    (this || _global$f)._cache.add(data);
    var chunk;
    var thing;
    var out = [];
    while (chunk = (this || _global$f)._cache.get()) {
      thing = (this || _global$f)._mode.encrypt(this || _global$f, chunk);
      out.push(thing);
    }
    return Buffer3.concat(out);
  };
  var PADDING = Buffer3.alloc(16, 16);
  Cipher2.prototype._final = function() {
    var chunk = (this || _global$f)._cache.flush();
    if ((this || _global$f)._autopadding) {
      chunk = (this || _global$f)._mode.encrypt(this || _global$f, chunk);
      (this || _global$f)._cipher.scrub();
      return chunk;
    }
    if (!chunk.equals(PADDING)) {
      (this || _global$f)._cipher.scrub();
      throw new Error("data not multiple of block length");
    }
  };
  Cipher2.prototype.setAutoPadding = function(setTo) {
    (this || _global$f)._autopadding = !!setTo;
    return this || _global$f;
  };
  function Splitter() {
    (this || _global$f).cache = Buffer3.allocUnsafe(0);
  }
  Splitter.prototype.add = function(data) {
    (this || _global$f).cache = Buffer3.concat([(this || _global$f).cache, data]);
  };
  Splitter.prototype.get = function() {
    if ((this || _global$f).cache.length > 15) {
      var out = (this || _global$f).cache.slice(0, 16);
      (this || _global$f).cache = (this || _global$f).cache.slice(16);
      return out;
    }
    return null;
  };
  Splitter.prototype.flush = function() {
    var len = 16 - (this || _global$f).cache.length;
    var padBuff = Buffer3.allocUnsafe(len);
    var i8 = -1;
    while (++i8 < len) {
      padBuff.writeUInt8(len, i8);
    }
    return Buffer3.concat([(this || _global$f).cache, padBuff]);
  };
  function createCipheriv2(suite, password, iv) {
    var config2 = MODES[suite.toLowerCase()];
    if (!config2)
      throw new TypeError("invalid suite type");
    if (typeof password === "string")
      password = Buffer3.from(password);
    if (password.length !== config2.key / 8)
      throw new TypeError("invalid key length " + password.length);
    if (typeof iv === "string")
      iv = Buffer3.from(iv);
    if (config2.mode !== "GCM" && iv.length !== config2.iv)
      throw new TypeError("invalid iv length " + iv.length);
    if (config2.type === "stream") {
      return new StreamCipher(config2.module, password, iv);
    } else if (config2.type === "auth") {
      return new AuthCipher(config2.module, password, iv);
    }
    return new Cipher2(config2.module, password, iv);
  }
  function createCipher2(suite, password) {
    var config2 = MODES[suite.toLowerCase()];
    if (!config2)
      throw new TypeError("invalid suite type");
    var keys = ebtk(password, false, config2.key, config2.iv);
    return createCipheriv2(suite, keys.key, keys.iv);
  }
  exports$18.createCipheriv = createCipheriv2;
  exports$18.createCipher = createCipher2;
  return exports$18;
}
function dew$16() {
  if (_dewExec$16)
    return exports$17;
  _dewExec$16 = true;
  var AuthCipher = dew$1a();
  var Buffer3 = dew$1T().Buffer;
  var MODES = dew$1d();
  var StreamCipher = dew$19();
  var Transform2 = dew$1G();
  var aes = dew$1c();
  var ebtk = dew$18();
  var inherits4 = dew$f$2();
  function Decipher2(mode, key, iv) {
    Transform2.call(this || _global$e);
    (this || _global$e)._cache = new Splitter();
    (this || _global$e)._last = void 0;
    (this || _global$e)._cipher = new aes.AES(key);
    (this || _global$e)._prev = Buffer3.from(iv);
    (this || _global$e)._mode = mode;
    (this || _global$e)._autopadding = true;
  }
  inherits4(Decipher2, Transform2);
  Decipher2.prototype._update = function(data) {
    (this || _global$e)._cache.add(data);
    var chunk;
    var thing;
    var out = [];
    while (chunk = (this || _global$e)._cache.get((this || _global$e)._autopadding)) {
      thing = (this || _global$e)._mode.decrypt(this || _global$e, chunk);
      out.push(thing);
    }
    return Buffer3.concat(out);
  };
  Decipher2.prototype._final = function() {
    var chunk = (this || _global$e)._cache.flush();
    if ((this || _global$e)._autopadding) {
      return unpad((this || _global$e)._mode.decrypt(this || _global$e, chunk));
    } else if (chunk) {
      throw new Error("data not multiple of block length");
    }
  };
  Decipher2.prototype.setAutoPadding = function(setTo) {
    (this || _global$e)._autopadding = !!setTo;
    return this || _global$e;
  };
  function Splitter() {
    (this || _global$e).cache = Buffer3.allocUnsafe(0);
  }
  Splitter.prototype.add = function(data) {
    (this || _global$e).cache = Buffer3.concat([(this || _global$e).cache, data]);
  };
  Splitter.prototype.get = function(autoPadding) {
    var out;
    if (autoPadding) {
      if ((this || _global$e).cache.length > 16) {
        out = (this || _global$e).cache.slice(0, 16);
        (this || _global$e).cache = (this || _global$e).cache.slice(16);
        return out;
      }
    } else {
      if ((this || _global$e).cache.length >= 16) {
        out = (this || _global$e).cache.slice(0, 16);
        (this || _global$e).cache = (this || _global$e).cache.slice(16);
        return out;
      }
    }
    return null;
  };
  Splitter.prototype.flush = function() {
    if ((this || _global$e).cache.length)
      return (this || _global$e).cache;
  };
  function unpad(last) {
    var padded = last[15];
    if (padded < 1 || padded > 16) {
      throw new Error("unable to decrypt data");
    }
    var i8 = -1;
    while (++i8 < padded) {
      if (last[i8 + (16 - padded)] !== padded) {
        throw new Error("unable to decrypt data");
      }
    }
    if (padded === 16)
      return;
    return last.slice(0, 16 - padded);
  }
  function createDecipheriv2(suite, password, iv) {
    var config2 = MODES[suite.toLowerCase()];
    if (!config2)
      throw new TypeError("invalid suite type");
    if (typeof iv === "string")
      iv = Buffer3.from(iv);
    if (config2.mode !== "GCM" && iv.length !== config2.iv)
      throw new TypeError("invalid iv length " + iv.length);
    if (typeof password === "string")
      password = Buffer3.from(password);
    if (password.length !== config2.key / 8)
      throw new TypeError("invalid key length " + password.length);
    if (config2.type === "stream") {
      return new StreamCipher(config2.module, password, iv, true);
    } else if (config2.type === "auth") {
      return new AuthCipher(config2.module, password, iv, true);
    }
    return new Decipher2(config2.module, password, iv);
  }
  function createDecipher2(suite, password) {
    var config2 = MODES[suite.toLowerCase()];
    if (!config2)
      throw new TypeError("invalid suite type");
    var keys = ebtk(password, false, config2.key, config2.iv);
    return createDecipheriv2(suite, keys.key, keys.iv);
  }
  exports$17.createDecipher = createDecipher2;
  exports$17.createDecipheriv = createDecipheriv2;
  return exports$17;
}
function dew$15() {
  if (_dewExec$15)
    return exports$16;
  _dewExec$15 = true;
  var ciphers = dew$17();
  var deciphers = dew$16();
  var modes = _list;
  function getCiphers2() {
    return Object.keys(modes);
  }
  exports$16.createCipher = exports$16.Cipher = ciphers.createCipher;
  exports$16.createCipheriv = exports$16.Cipheriv = ciphers.createCipheriv;
  exports$16.createDecipher = exports$16.Decipher = deciphers.createDecipher;
  exports$16.createDecipheriv = exports$16.Decipheriv = deciphers.createDecipheriv;
  exports$16.listCiphers = exports$16.getCiphers = getCiphers2;
  return exports$16;
}
function dew$14() {
  if (_dewExec$14)
    return exports$15;
  _dewExec$14 = true;
  exports$15["des-ecb"] = {
    key: 8,
    iv: 0
  };
  exports$15["des-cbc"] = exports$15.des = {
    key: 8,
    iv: 8
  };
  exports$15["des-ede3-cbc"] = exports$15.des3 = {
    key: 24,
    iv: 8
  };
  exports$15["des-ede3"] = {
    key: 24,
    iv: 0
  };
  exports$15["des-ede-cbc"] = {
    key: 16,
    iv: 8
  };
  exports$15["des-ede"] = {
    key: 16,
    iv: 0
  };
  return exports$15;
}
function dew$13() {
  if (_dewExec$13)
    return exports$14;
  _dewExec$13 = true;
  var DES = dew$1n();
  var aes = dew$15();
  var aesModes = dew$1d();
  var desModes = dew$14();
  var ebtk = dew$18();
  function createCipher2(suite, password) {
    suite = suite.toLowerCase();
    var keyLen, ivLen;
    if (aesModes[suite]) {
      keyLen = aesModes[suite].key;
      ivLen = aesModes[suite].iv;
    } else if (desModes[suite]) {
      keyLen = desModes[suite].key * 8;
      ivLen = desModes[suite].iv;
    } else {
      throw new TypeError("invalid suite type");
    }
    var keys = ebtk(password, false, keyLen, ivLen);
    return createCipheriv2(suite, keys.key, keys.iv);
  }
  function createDecipher2(suite, password) {
    suite = suite.toLowerCase();
    var keyLen, ivLen;
    if (aesModes[suite]) {
      keyLen = aesModes[suite].key;
      ivLen = aesModes[suite].iv;
    } else if (desModes[suite]) {
      keyLen = desModes[suite].key * 8;
      ivLen = desModes[suite].iv;
    } else {
      throw new TypeError("invalid suite type");
    }
    var keys = ebtk(password, false, keyLen, ivLen);
    return createDecipheriv2(suite, keys.key, keys.iv);
  }
  function createCipheriv2(suite, key, iv) {
    suite = suite.toLowerCase();
    if (aesModes[suite])
      return aes.createCipheriv(suite, key, iv);
    if (desModes[suite])
      return new DES({
        key,
        iv,
        mode: suite
      });
    throw new TypeError("invalid suite type");
  }
  function createDecipheriv2(suite, key, iv) {
    suite = suite.toLowerCase();
    if (aesModes[suite])
      return aes.createDecipheriv(suite, key, iv);
    if (desModes[suite])
      return new DES({
        key,
        iv,
        mode: suite,
        decrypt: true
      });
    throw new TypeError("invalid suite type");
  }
  function getCiphers2() {
    return Object.keys(desModes).concat(aes.getCiphers());
  }
  exports$14.createCipher = exports$14.Cipher = createCipher2;
  exports$14.createCipheriv = exports$14.Cipheriv = createCipheriv2;
  exports$14.createDecipher = exports$14.Decipher = createDecipher2;
  exports$14.createDecipheriv = exports$14.Decipheriv = createDecipheriv2;
  exports$14.listCiphers = exports$14.getCiphers = getCiphers2;
  return exports$14;
}
function dew$122() {
  if (_dewExec$122)
    return module$6.exports;
  _dewExec$122 = true;
  (function(module3, exports11) {
    function assert2(val, msg) {
      if (!val)
        throw new Error(msg || "Assertion failed");
    }
    function inherits4(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function() {
      };
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }
    function BN(number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }
      (this || _global$d).negative = 0;
      (this || _global$d).words = null;
      (this || _global$d).length = 0;
      (this || _global$d).red = null;
      if (number !== null) {
        if (base === "le" || base === "be") {
          endian = base;
          base = 10;
        }
        this._init(number || 0, base || 10, endian || "be");
      }
    }
    if (typeof module3 === "object") {
      module3.exports = BN;
    } else {
      exports11.BN = BN;
    }
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer3;
    try {
      if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
        Buffer3 = window.Buffer;
      } else {
        Buffer3 = e$1$1.Buffer;
      }
    } catch (e11) {
    }
    BN.isBN = function isBN(num) {
      if (num instanceof BN) {
        return true;
      }
      return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
      if (left.cmp(right) > 0)
        return left;
      return right;
    };
    BN.min = function min(left, right) {
      if (left.cmp(right) < 0)
        return left;
      return right;
    };
    BN.prototype._init = function init2(number, base, endian) {
      if (typeof number === "number") {
        return this._initNumber(number, base, endian);
      }
      if (typeof number === "object") {
        return this._initArray(number, base, endian);
      }
      if (base === "hex") {
        base = 16;
      }
      assert2(base === (base | 0) && base >= 2 && base <= 36);
      number = number.toString().replace(/\s+/g, "");
      var start = 0;
      if (number[0] === "-") {
        start++;
        (this || _global$d).negative = 1;
      }
      if (start < number.length) {
        if (base === 16) {
          this._parseHex(number, start, endian);
        } else {
          this._parseBase(number, base, start);
          if (endian === "le") {
            this._initArray(this.toArray(), base, endian);
          }
        }
      }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
      if (number < 0) {
        (this || _global$d).negative = 1;
        number = -number;
      }
      if (number < 67108864) {
        (this || _global$d).words = [number & 67108863];
        (this || _global$d).length = 1;
      } else if (number < 4503599627370496) {
        (this || _global$d).words = [number & 67108863, number / 67108864 & 67108863];
        (this || _global$d).length = 2;
      } else {
        assert2(number < 9007199254740992);
        (this || _global$d).words = [number & 67108863, number / 67108864 & 67108863, 1];
        (this || _global$d).length = 3;
      }
      if (endian !== "le")
        return;
      this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
      assert2(typeof number.length === "number");
      if (number.length <= 0) {
        (this || _global$d).words = [0];
        (this || _global$d).length = 1;
        return this || _global$d;
      }
      (this || _global$d).length = Math.ceil(number.length / 3);
      (this || _global$d).words = new Array((this || _global$d).length);
      for (var i8 = 0; i8 < (this || _global$d).length; i8++) {
        (this || _global$d).words[i8] = 0;
      }
      var j4, w4;
      var off2 = 0;
      if (endian === "be") {
        for (i8 = number.length - 1, j4 = 0; i8 >= 0; i8 -= 3) {
          w4 = number[i8] | number[i8 - 1] << 8 | number[i8 - 2] << 16;
          (this || _global$d).words[j4] |= w4 << off2 & 67108863;
          (this || _global$d).words[j4 + 1] = w4 >>> 26 - off2 & 67108863;
          off2 += 24;
          if (off2 >= 26) {
            off2 -= 26;
            j4++;
          }
        }
      } else if (endian === "le") {
        for (i8 = 0, j4 = 0; i8 < number.length; i8 += 3) {
          w4 = number[i8] | number[i8 + 1] << 8 | number[i8 + 2] << 16;
          (this || _global$d).words[j4] |= w4 << off2 & 67108863;
          (this || _global$d).words[j4 + 1] = w4 >>> 26 - off2 & 67108863;
          off2 += 24;
          if (off2 >= 26) {
            off2 -= 26;
            j4++;
          }
        }
      }
      return this.strip();
    };
    function parseHex4Bits(string, index) {
      var c8 = string.charCodeAt(index);
      if (c8 >= 65 && c8 <= 70) {
        return c8 - 55;
      } else if (c8 >= 97 && c8 <= 102) {
        return c8 - 87;
      } else {
        return c8 - 48 & 15;
      }
    }
    function parseHexByte(string, lowerBound, index) {
      var r9 = parseHex4Bits(string, index);
      if (index - 1 >= lowerBound) {
        r9 |= parseHex4Bits(string, index - 1) << 4;
      }
      return r9;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
      (this || _global$d).length = Math.ceil((number.length - start) / 6);
      (this || _global$d).words = new Array((this || _global$d).length);
      for (var i8 = 0; i8 < (this || _global$d).length; i8++) {
        (this || _global$d).words[i8] = 0;
      }
      var off2 = 0;
      var j4 = 0;
      var w4;
      if (endian === "be") {
        for (i8 = number.length - 1; i8 >= start; i8 -= 2) {
          w4 = parseHexByte(number, start, i8) << off2;
          (this || _global$d).words[j4] |= w4 & 67108863;
          if (off2 >= 18) {
            off2 -= 18;
            j4 += 1;
            (this || _global$d).words[j4] |= w4 >>> 26;
          } else {
            off2 += 8;
          }
        }
      } else {
        var parseLength = number.length - start;
        for (i8 = parseLength % 2 === 0 ? start + 1 : start; i8 < number.length; i8 += 2) {
          w4 = parseHexByte(number, start, i8) << off2;
          (this || _global$d).words[j4] |= w4 & 67108863;
          if (off2 >= 18) {
            off2 -= 18;
            j4 += 1;
            (this || _global$d).words[j4] |= w4 >>> 26;
          } else {
            off2 += 8;
          }
        }
      }
      this.strip();
    };
    function parseBase(str, start, end, mul) {
      var r9 = 0;
      var len = Math.min(str.length, end);
      for (var i8 = start; i8 < len; i8++) {
        var c8 = str.charCodeAt(i8) - 48;
        r9 *= mul;
        if (c8 >= 49) {
          r9 += c8 - 49 + 10;
        } else if (c8 >= 17) {
          r9 += c8 - 17 + 10;
        } else {
          r9 += c8;
        }
      }
      return r9;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
      (this || _global$d).words = [0];
      (this || _global$d).length = 1;
      for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
        limbLen++;
      }
      limbLen--;
      limbPow = limbPow / base | 0;
      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;
      var word = 0;
      for (var i8 = start; i8 < end; i8 += limbLen) {
        word = parseBase(number, i8, i8 + limbLen, base);
        this.imuln(limbPow);
        if ((this || _global$d).words[0] + word < 67108864) {
          (this || _global$d).words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i8, number.length, base);
        for (i8 = 0; i8 < mod; i8++) {
          pow *= base;
        }
        this.imuln(pow);
        if ((this || _global$d).words[0] + word < 67108864) {
          (this || _global$d).words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
      this.strip();
    };
    BN.prototype.copy = function copy(dest) {
      dest.words = new Array((this || _global$d).length);
      for (var i8 = 0; i8 < (this || _global$d).length; i8++) {
        dest.words[i8] = (this || _global$d).words[i8];
      }
      dest.length = (this || _global$d).length;
      dest.negative = (this || _global$d).negative;
      dest.red = (this || _global$d).red;
    };
    BN.prototype.clone = function clone() {
      var r9 = new BN(null);
      this.copy(r9);
      return r9;
    };
    BN.prototype._expand = function _expand(size) {
      while ((this || _global$d).length < size) {
        (this || _global$d).words[(this || _global$d).length++] = 0;
      }
      return this || _global$d;
    };
    BN.prototype.strip = function strip() {
      while ((this || _global$d).length > 1 && (this || _global$d).words[(this || _global$d).length - 1] === 0) {
        (this || _global$d).length--;
      }
      return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
      if ((this || _global$d).length === 1 && (this || _global$d).words[0] === 0) {
        (this || _global$d).negative = 0;
      }
      return this || _global$d;
    };
    BN.prototype.inspect = function inspect3() {
      return ((this || _global$d).red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    var zeros = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"];
    var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
    var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
    BN.prototype.toString = function toString3(base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;
      var out;
      if (base === 16 || base === "hex") {
        out = "";
        var off2 = 0;
        var carry = 0;
        for (var i8 = 0; i8 < (this || _global$d).length; i8++) {
          var w4 = (this || _global$d).words[i8];
          var word = ((w4 << off2 | carry) & 16777215).toString(16);
          carry = w4 >>> 24 - off2 & 16777215;
          if (carry !== 0 || i8 !== (this || _global$d).length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }
          off2 += 2;
          if (off2 >= 26) {
            off2 -= 26;
            i8--;
          }
        }
        if (carry !== 0) {
          out = carry.toString(16) + out;
        }
        while (out.length % padding !== 0) {
          out = "0" + out;
        }
        if ((this || _global$d).negative !== 0) {
          out = "-" + out;
        }
        return out;
      }
      if (base === (base | 0) && base >= 2 && base <= 36) {
        var groupSize = groupSizes[base];
        var groupBase = groupBases[base];
        out = "";
        var c8 = this.clone();
        c8.negative = 0;
        while (!c8.isZero()) {
          var r9 = c8.modn(groupBase).toString(base);
          c8 = c8.idivn(groupBase);
          if (!c8.isZero()) {
            out = zeros[groupSize - r9.length] + r9 + out;
          } else {
            out = r9 + out;
          }
        }
        if (this.isZero()) {
          out = "0" + out;
        }
        while (out.length % padding !== 0) {
          out = "0" + out;
        }
        if ((this || _global$d).negative !== 0) {
          out = "-" + out;
        }
        return out;
      }
      assert2(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
      var ret = (this || _global$d).words[0];
      if ((this || _global$d).length === 2) {
        ret += (this || _global$d).words[1] * 67108864;
      } else if ((this || _global$d).length === 3 && (this || _global$d).words[2] === 1) {
        ret += 4503599627370496 + (this || _global$d).words[1] * 67108864;
      } else if ((this || _global$d).length > 2) {
        assert2(false, "Number can only safely store up to 53 bits");
      }
      return (this || _global$d).negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON2() {
      return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
      assert2(typeof Buffer3 !== "undefined");
      return this.toArrayLike(Buffer3, endian, length);
    };
    BN.prototype.toArray = function toArray2(endian, length) {
      return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert2(byteLength <= reqLength, "byte array longer than desired length");
      assert2(reqLength > 0, "Requested array length <= 0");
      this.strip();
      var littleEndian = endian === "le";
      var res = new ArrayType(reqLength);
      var b5, i8;
      var q3 = this.clone();
      if (!littleEndian) {
        for (i8 = 0; i8 < reqLength - byteLength; i8++) {
          res[i8] = 0;
        }
        for (i8 = 0; !q3.isZero(); i8++) {
          b5 = q3.andln(255);
          q3.iushrn(8);
          res[reqLength - i8 - 1] = b5;
        }
      } else {
        for (i8 = 0; !q3.isZero(); i8++) {
          b5 = q3.andln(255);
          q3.iushrn(8);
          res[i8] = b5;
        }
        for (; i8 < reqLength; i8++) {
          res[i8] = 0;
        }
      }
      return res;
    };
    if (Math.clz32) {
      BN.prototype._countBits = function _countBits(w4) {
        return 32 - Math.clz32(w4);
      };
    } else {
      BN.prototype._countBits = function _countBits(w4) {
        var t8 = w4;
        var r9 = 0;
        if (t8 >= 4096) {
          r9 += 13;
          t8 >>>= 13;
        }
        if (t8 >= 64) {
          r9 += 7;
          t8 >>>= 7;
        }
        if (t8 >= 8) {
          r9 += 4;
          t8 >>>= 4;
        }
        if (t8 >= 2) {
          r9 += 2;
          t8 >>>= 2;
        }
        return r9 + t8;
      };
    }
    BN.prototype._zeroBits = function _zeroBits(w4) {
      if (w4 === 0)
        return 26;
      var t8 = w4;
      var r9 = 0;
      if ((t8 & 8191) === 0) {
        r9 += 13;
        t8 >>>= 13;
      }
      if ((t8 & 127) === 0) {
        r9 += 7;
        t8 >>>= 7;
      }
      if ((t8 & 15) === 0) {
        r9 += 4;
        t8 >>>= 4;
      }
      if ((t8 & 3) === 0) {
        r9 += 2;
        t8 >>>= 2;
      }
      if ((t8 & 1) === 0) {
        r9++;
      }
      return r9;
    };
    BN.prototype.bitLength = function bitLength() {
      var w4 = (this || _global$d).words[(this || _global$d).length - 1];
      var hi = this._countBits(w4);
      return ((this || _global$d).length - 1) * 26 + hi;
    };
    function toBitArray(num) {
      var w4 = new Array(num.bitLength());
      for (var bit = 0; bit < w4.length; bit++) {
        var off2 = bit / 26 | 0;
        var wbit = bit % 26;
        w4[bit] = (num.words[off2] & 1 << wbit) >>> wbit;
      }
      return w4;
    }
    BN.prototype.zeroBits = function zeroBits() {
      if (this.isZero())
        return 0;
      var r9 = 0;
      for (var i8 = 0; i8 < (this || _global$d).length; i8++) {
        var b5 = this._zeroBits((this || _global$d).words[i8]);
        r9 += b5;
        if (b5 !== 26)
          break;
      }
      return r9;
    };
    BN.prototype.byteLength = function byteLength() {
      return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
      if ((this || _global$d).negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }
      return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }
      return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
      return (this || _global$d).negative !== 0;
    };
    BN.prototype.neg = function neg() {
      return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
      if (!this.isZero()) {
        (this || _global$d).negative ^= 1;
      }
      return this || _global$d;
    };
    BN.prototype.iuor = function iuor(num) {
      while ((this || _global$d).length < num.length) {
        (this || _global$d).words[(this || _global$d).length++] = 0;
      }
      for (var i8 = 0; i8 < num.length; i8++) {
        (this || _global$d).words[i8] = (this || _global$d).words[i8] | num.words[i8];
      }
      return this.strip();
    };
    BN.prototype.ior = function ior(num) {
      assert2(((this || _global$d).negative | num.negative) === 0);
      return this.iuor(num);
    };
    BN.prototype.or = function or(num) {
      if ((this || _global$d).length > num.length)
        return this.clone().ior(num);
      return num.clone().ior(this || _global$d);
    };
    BN.prototype.uor = function uor(num) {
      if ((this || _global$d).length > num.length)
        return this.clone().iuor(num);
      return num.clone().iuor(this || _global$d);
    };
    BN.prototype.iuand = function iuand(num) {
      var b5;
      if ((this || _global$d).length > num.length) {
        b5 = num;
      } else {
        b5 = this || _global$d;
      }
      for (var i8 = 0; i8 < b5.length; i8++) {
        (this || _global$d).words[i8] = (this || _global$d).words[i8] & num.words[i8];
      }
      (this || _global$d).length = b5.length;
      return this.strip();
    };
    BN.prototype.iand = function iand(num) {
      assert2(((this || _global$d).negative | num.negative) === 0);
      return this.iuand(num);
    };
    BN.prototype.and = function and(num) {
      if ((this || _global$d).length > num.length)
        return this.clone().iand(num);
      return num.clone().iand(this || _global$d);
    };
    BN.prototype.uand = function uand(num) {
      if ((this || _global$d).length > num.length)
        return this.clone().iuand(num);
      return num.clone().iuand(this || _global$d);
    };
    BN.prototype.iuxor = function iuxor(num) {
      var a8;
      var b5;
      if ((this || _global$d).length > num.length) {
        a8 = this || _global$d;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$d;
      }
      for (var i8 = 0; i8 < b5.length; i8++) {
        (this || _global$d).words[i8] = a8.words[i8] ^ b5.words[i8];
      }
      if ((this || _global$d) !== a8) {
        for (; i8 < a8.length; i8++) {
          (this || _global$d).words[i8] = a8.words[i8];
        }
      }
      (this || _global$d).length = a8.length;
      return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
      assert2(((this || _global$d).negative | num.negative) === 0);
      return this.iuxor(num);
    };
    BN.prototype.xor = function xor(num) {
      if ((this || _global$d).length > num.length)
        return this.clone().ixor(num);
      return num.clone().ixor(this || _global$d);
    };
    BN.prototype.uxor = function uxor(num) {
      if ((this || _global$d).length > num.length)
        return this.clone().iuxor(num);
      return num.clone().iuxor(this || _global$d);
    };
    BN.prototype.inotn = function inotn(width) {
      assert2(typeof width === "number" && width >= 0);
      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;
      this._expand(bytesNeeded);
      if (bitsLeft > 0) {
        bytesNeeded--;
      }
      for (var i8 = 0; i8 < bytesNeeded; i8++) {
        (this || _global$d).words[i8] = ~(this || _global$d).words[i8] & 67108863;
      }
      if (bitsLeft > 0) {
        (this || _global$d).words[i8] = ~(this || _global$d).words[i8] & 67108863 >> 26 - bitsLeft;
      }
      return this.strip();
    };
    BN.prototype.notn = function notn(width) {
      return this.clone().inotn(width);
    };
    BN.prototype.setn = function setn(bit, val) {
      assert2(typeof bit === "number" && bit >= 0);
      var off2 = bit / 26 | 0;
      var wbit = bit % 26;
      this._expand(off2 + 1);
      if (val) {
        (this || _global$d).words[off2] = (this || _global$d).words[off2] | 1 << wbit;
      } else {
        (this || _global$d).words[off2] = (this || _global$d).words[off2] & ~(1 << wbit);
      }
      return this.strip();
    };
    BN.prototype.iadd = function iadd(num) {
      var r9;
      if ((this || _global$d).negative !== 0 && num.negative === 0) {
        (this || _global$d).negative = 0;
        r9 = this.isub(num);
        (this || _global$d).negative ^= 1;
        return this._normSign();
      } else if ((this || _global$d).negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r9 = this.isub(num);
        num.negative = 1;
        return r9._normSign();
      }
      var a8, b5;
      if ((this || _global$d).length > num.length) {
        a8 = this || _global$d;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$d;
      }
      var carry = 0;
      for (var i8 = 0; i8 < b5.length; i8++) {
        r9 = (a8.words[i8] | 0) + (b5.words[i8] | 0) + carry;
        (this || _global$d).words[i8] = r9 & 67108863;
        carry = r9 >>> 26;
      }
      for (; carry !== 0 && i8 < a8.length; i8++) {
        r9 = (a8.words[i8] | 0) + carry;
        (this || _global$d).words[i8] = r9 & 67108863;
        carry = r9 >>> 26;
      }
      (this || _global$d).length = a8.length;
      if (carry !== 0) {
        (this || _global$d).words[(this || _global$d).length] = carry;
        (this || _global$d).length++;
      } else if (a8 !== (this || _global$d)) {
        for (; i8 < a8.length; i8++) {
          (this || _global$d).words[i8] = a8.words[i8];
        }
      }
      return this || _global$d;
    };
    BN.prototype.add = function add(num) {
      var res;
      if (num.negative !== 0 && (this || _global$d).negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && (this || _global$d).negative !== 0) {
        (this || _global$d).negative = 0;
        res = num.sub(this || _global$d);
        (this || _global$d).negative = 1;
        return res;
      }
      if ((this || _global$d).length > num.length)
        return this.clone().iadd(num);
      return num.clone().iadd(this || _global$d);
    };
    BN.prototype.isub = function isub(num) {
      if (num.negative !== 0) {
        num.negative = 0;
        var r9 = this.iadd(num);
        num.negative = 1;
        return r9._normSign();
      } else if ((this || _global$d).negative !== 0) {
        (this || _global$d).negative = 0;
        this.iadd(num);
        (this || _global$d).negative = 1;
        return this._normSign();
      }
      var cmp = this.cmp(num);
      if (cmp === 0) {
        (this || _global$d).negative = 0;
        (this || _global$d).length = 1;
        (this || _global$d).words[0] = 0;
        return this || _global$d;
      }
      var a8, b5;
      if (cmp > 0) {
        a8 = this || _global$d;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$d;
      }
      var carry = 0;
      for (var i8 = 0; i8 < b5.length; i8++) {
        r9 = (a8.words[i8] | 0) - (b5.words[i8] | 0) + carry;
        carry = r9 >> 26;
        (this || _global$d).words[i8] = r9 & 67108863;
      }
      for (; carry !== 0 && i8 < a8.length; i8++) {
        r9 = (a8.words[i8] | 0) + carry;
        carry = r9 >> 26;
        (this || _global$d).words[i8] = r9 & 67108863;
      }
      if (carry === 0 && i8 < a8.length && a8 !== (this || _global$d)) {
        for (; i8 < a8.length; i8++) {
          (this || _global$d).words[i8] = a8.words[i8];
        }
      }
      (this || _global$d).length = Math.max((this || _global$d).length, i8);
      if (a8 !== (this || _global$d)) {
        (this || _global$d).negative = 1;
      }
      return this.strip();
    };
    BN.prototype.sub = function sub(num) {
      return this.clone().isub(num);
    };
    function smallMulTo(self2, num, out) {
      out.negative = num.negative ^ self2.negative;
      var len = self2.length + num.length | 0;
      out.length = len;
      len = len - 1 | 0;
      var a8 = self2.words[0] | 0;
      var b5 = num.words[0] | 0;
      var r9 = a8 * b5;
      var lo = r9 & 67108863;
      var carry = r9 / 67108864 | 0;
      out.words[0] = lo;
      for (var k4 = 1; k4 < len; k4++) {
        var ncarry = carry >>> 26;
        var rword = carry & 67108863;
        var maxJ = Math.min(k4, num.length - 1);
        for (var j4 = Math.max(0, k4 - self2.length + 1); j4 <= maxJ; j4++) {
          var i8 = k4 - j4 | 0;
          a8 = self2.words[i8] | 0;
          b5 = num.words[j4] | 0;
          r9 = a8 * b5 + rword;
          ncarry += r9 / 67108864 | 0;
          rword = r9 & 67108863;
        }
        out.words[k4] = rword | 0;
        carry = ncarry | 0;
      }
      if (carry !== 0) {
        out.words[k4] = carry | 0;
      } else {
        out.length--;
      }
      return out.strip();
    }
    var comb10MulTo = function comb10MulTo2(self2, num, out) {
      var a8 = self2.words;
      var b5 = num.words;
      var o9 = out.words;
      var c8 = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a8[0] | 0;
      var al0 = a0 & 8191;
      var ah0 = a0 >>> 13;
      var a1 = a8[1] | 0;
      var al1 = a1 & 8191;
      var ah1 = a1 >>> 13;
      var a22 = a8[2] | 0;
      var al2 = a22 & 8191;
      var ah2 = a22 >>> 13;
      var a32 = a8[3] | 0;
      var al3 = a32 & 8191;
      var ah3 = a32 >>> 13;
      var a42 = a8[4] | 0;
      var al4 = a42 & 8191;
      var ah4 = a42 >>> 13;
      var a52 = a8[5] | 0;
      var al5 = a52 & 8191;
      var ah5 = a52 >>> 13;
      var a62 = a8[6] | 0;
      var al6 = a62 & 8191;
      var ah6 = a62 >>> 13;
      var a72 = a8[7] | 0;
      var al7 = a72 & 8191;
      var ah7 = a72 >>> 13;
      var a82 = a8[8] | 0;
      var al8 = a82 & 8191;
      var ah8 = a82 >>> 13;
      var a9 = a8[9] | 0;
      var al9 = a9 & 8191;
      var ah9 = a9 >>> 13;
      var b0 = b5[0] | 0;
      var bl0 = b0 & 8191;
      var bh0 = b0 >>> 13;
      var b1 = b5[1] | 0;
      var bl1 = b1 & 8191;
      var bh1 = b1 >>> 13;
      var b22 = b5[2] | 0;
      var bl2 = b22 & 8191;
      var bh2 = b22 >>> 13;
      var b32 = b5[3] | 0;
      var bl3 = b32 & 8191;
      var bh3 = b32 >>> 13;
      var b42 = b5[4] | 0;
      var bl4 = b42 & 8191;
      var bh4 = b42 >>> 13;
      var b52 = b5[5] | 0;
      var bl5 = b52 & 8191;
      var bh5 = b52 >>> 13;
      var b6 = b5[6] | 0;
      var bl6 = b6 & 8191;
      var bh6 = b6 >>> 13;
      var b7 = b5[7] | 0;
      var bl7 = b7 & 8191;
      var bh7 = b7 >>> 13;
      var b8 = b5[8] | 0;
      var bl8 = b8 & 8191;
      var bh8 = b8 >>> 13;
      var b9 = b5[9] | 0;
      var bl9 = b9 & 8191;
      var bh9 = b9 >>> 13;
      out.negative = self2.negative ^ num.negative;
      out.length = 19;
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = mid + Math.imul(ah0, bl0) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
      w0 &= 67108863;
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = mid + Math.imul(ah1, bl0) | 0;
      hi = Math.imul(ah1, bh0);
      lo = lo + Math.imul(al0, bl1) | 0;
      mid = mid + Math.imul(al0, bh1) | 0;
      mid = mid + Math.imul(ah0, bl1) | 0;
      hi = hi + Math.imul(ah0, bh1) | 0;
      var w1 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
      w1 &= 67108863;
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = mid + Math.imul(ah2, bl0) | 0;
      hi = Math.imul(ah2, bh0);
      lo = lo + Math.imul(al1, bl1) | 0;
      mid = mid + Math.imul(al1, bh1) | 0;
      mid = mid + Math.imul(ah1, bl1) | 0;
      hi = hi + Math.imul(ah1, bh1) | 0;
      lo = lo + Math.imul(al0, bl2) | 0;
      mid = mid + Math.imul(al0, bh2) | 0;
      mid = mid + Math.imul(ah0, bl2) | 0;
      hi = hi + Math.imul(ah0, bh2) | 0;
      var w22 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w22 >>> 26) | 0;
      w22 &= 67108863;
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = mid + Math.imul(ah3, bl0) | 0;
      hi = Math.imul(ah3, bh0);
      lo = lo + Math.imul(al2, bl1) | 0;
      mid = mid + Math.imul(al2, bh1) | 0;
      mid = mid + Math.imul(ah2, bl1) | 0;
      hi = hi + Math.imul(ah2, bh1) | 0;
      lo = lo + Math.imul(al1, bl2) | 0;
      mid = mid + Math.imul(al1, bh2) | 0;
      mid = mid + Math.imul(ah1, bl2) | 0;
      hi = hi + Math.imul(ah1, bh2) | 0;
      lo = lo + Math.imul(al0, bl3) | 0;
      mid = mid + Math.imul(al0, bh3) | 0;
      mid = mid + Math.imul(ah0, bl3) | 0;
      hi = hi + Math.imul(ah0, bh3) | 0;
      var w32 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w32 >>> 26) | 0;
      w32 &= 67108863;
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = mid + Math.imul(ah4, bl0) | 0;
      hi = Math.imul(ah4, bh0);
      lo = lo + Math.imul(al3, bl1) | 0;
      mid = mid + Math.imul(al3, bh1) | 0;
      mid = mid + Math.imul(ah3, bl1) | 0;
      hi = hi + Math.imul(ah3, bh1) | 0;
      lo = lo + Math.imul(al2, bl2) | 0;
      mid = mid + Math.imul(al2, bh2) | 0;
      mid = mid + Math.imul(ah2, bl2) | 0;
      hi = hi + Math.imul(ah2, bh2) | 0;
      lo = lo + Math.imul(al1, bl3) | 0;
      mid = mid + Math.imul(al1, bh3) | 0;
      mid = mid + Math.imul(ah1, bl3) | 0;
      hi = hi + Math.imul(ah1, bh3) | 0;
      lo = lo + Math.imul(al0, bl4) | 0;
      mid = mid + Math.imul(al0, bh4) | 0;
      mid = mid + Math.imul(ah0, bl4) | 0;
      hi = hi + Math.imul(ah0, bh4) | 0;
      var w4 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
      w4 &= 67108863;
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = mid + Math.imul(ah5, bl0) | 0;
      hi = Math.imul(ah5, bh0);
      lo = lo + Math.imul(al4, bl1) | 0;
      mid = mid + Math.imul(al4, bh1) | 0;
      mid = mid + Math.imul(ah4, bl1) | 0;
      hi = hi + Math.imul(ah4, bh1) | 0;
      lo = lo + Math.imul(al3, bl2) | 0;
      mid = mid + Math.imul(al3, bh2) | 0;
      mid = mid + Math.imul(ah3, bl2) | 0;
      hi = hi + Math.imul(ah3, bh2) | 0;
      lo = lo + Math.imul(al2, bl3) | 0;
      mid = mid + Math.imul(al2, bh3) | 0;
      mid = mid + Math.imul(ah2, bl3) | 0;
      hi = hi + Math.imul(ah2, bh3) | 0;
      lo = lo + Math.imul(al1, bl4) | 0;
      mid = mid + Math.imul(al1, bh4) | 0;
      mid = mid + Math.imul(ah1, bl4) | 0;
      hi = hi + Math.imul(ah1, bh4) | 0;
      lo = lo + Math.imul(al0, bl5) | 0;
      mid = mid + Math.imul(al0, bh5) | 0;
      mid = mid + Math.imul(ah0, bl5) | 0;
      hi = hi + Math.imul(ah0, bh5) | 0;
      var w5 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
      w5 &= 67108863;
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = mid + Math.imul(ah6, bl0) | 0;
      hi = Math.imul(ah6, bh0);
      lo = lo + Math.imul(al5, bl1) | 0;
      mid = mid + Math.imul(al5, bh1) | 0;
      mid = mid + Math.imul(ah5, bl1) | 0;
      hi = hi + Math.imul(ah5, bh1) | 0;
      lo = lo + Math.imul(al4, bl2) | 0;
      mid = mid + Math.imul(al4, bh2) | 0;
      mid = mid + Math.imul(ah4, bl2) | 0;
      hi = hi + Math.imul(ah4, bh2) | 0;
      lo = lo + Math.imul(al3, bl3) | 0;
      mid = mid + Math.imul(al3, bh3) | 0;
      mid = mid + Math.imul(ah3, bl3) | 0;
      hi = hi + Math.imul(ah3, bh3) | 0;
      lo = lo + Math.imul(al2, bl4) | 0;
      mid = mid + Math.imul(al2, bh4) | 0;
      mid = mid + Math.imul(ah2, bl4) | 0;
      hi = hi + Math.imul(ah2, bh4) | 0;
      lo = lo + Math.imul(al1, bl5) | 0;
      mid = mid + Math.imul(al1, bh5) | 0;
      mid = mid + Math.imul(ah1, bl5) | 0;
      hi = hi + Math.imul(ah1, bh5) | 0;
      lo = lo + Math.imul(al0, bl6) | 0;
      mid = mid + Math.imul(al0, bh6) | 0;
      mid = mid + Math.imul(ah0, bl6) | 0;
      hi = hi + Math.imul(ah0, bh6) | 0;
      var w6 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
      w6 &= 67108863;
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = mid + Math.imul(ah7, bl0) | 0;
      hi = Math.imul(ah7, bh0);
      lo = lo + Math.imul(al6, bl1) | 0;
      mid = mid + Math.imul(al6, bh1) | 0;
      mid = mid + Math.imul(ah6, bl1) | 0;
      hi = hi + Math.imul(ah6, bh1) | 0;
      lo = lo + Math.imul(al5, bl2) | 0;
      mid = mid + Math.imul(al5, bh2) | 0;
      mid = mid + Math.imul(ah5, bl2) | 0;
      hi = hi + Math.imul(ah5, bh2) | 0;
      lo = lo + Math.imul(al4, bl3) | 0;
      mid = mid + Math.imul(al4, bh3) | 0;
      mid = mid + Math.imul(ah4, bl3) | 0;
      hi = hi + Math.imul(ah4, bh3) | 0;
      lo = lo + Math.imul(al3, bl4) | 0;
      mid = mid + Math.imul(al3, bh4) | 0;
      mid = mid + Math.imul(ah3, bl4) | 0;
      hi = hi + Math.imul(ah3, bh4) | 0;
      lo = lo + Math.imul(al2, bl5) | 0;
      mid = mid + Math.imul(al2, bh5) | 0;
      mid = mid + Math.imul(ah2, bl5) | 0;
      hi = hi + Math.imul(ah2, bh5) | 0;
      lo = lo + Math.imul(al1, bl6) | 0;
      mid = mid + Math.imul(al1, bh6) | 0;
      mid = mid + Math.imul(ah1, bl6) | 0;
      hi = hi + Math.imul(ah1, bh6) | 0;
      lo = lo + Math.imul(al0, bl7) | 0;
      mid = mid + Math.imul(al0, bh7) | 0;
      mid = mid + Math.imul(ah0, bl7) | 0;
      hi = hi + Math.imul(ah0, bh7) | 0;
      var w7 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
      w7 &= 67108863;
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = mid + Math.imul(ah8, bl0) | 0;
      hi = Math.imul(ah8, bh0);
      lo = lo + Math.imul(al7, bl1) | 0;
      mid = mid + Math.imul(al7, bh1) | 0;
      mid = mid + Math.imul(ah7, bl1) | 0;
      hi = hi + Math.imul(ah7, bh1) | 0;
      lo = lo + Math.imul(al6, bl2) | 0;
      mid = mid + Math.imul(al6, bh2) | 0;
      mid = mid + Math.imul(ah6, bl2) | 0;
      hi = hi + Math.imul(ah6, bh2) | 0;
      lo = lo + Math.imul(al5, bl3) | 0;
      mid = mid + Math.imul(al5, bh3) | 0;
      mid = mid + Math.imul(ah5, bl3) | 0;
      hi = hi + Math.imul(ah5, bh3) | 0;
      lo = lo + Math.imul(al4, bl4) | 0;
      mid = mid + Math.imul(al4, bh4) | 0;
      mid = mid + Math.imul(ah4, bl4) | 0;
      hi = hi + Math.imul(ah4, bh4) | 0;
      lo = lo + Math.imul(al3, bl5) | 0;
      mid = mid + Math.imul(al3, bh5) | 0;
      mid = mid + Math.imul(ah3, bl5) | 0;
      hi = hi + Math.imul(ah3, bh5) | 0;
      lo = lo + Math.imul(al2, bl6) | 0;
      mid = mid + Math.imul(al2, bh6) | 0;
      mid = mid + Math.imul(ah2, bl6) | 0;
      hi = hi + Math.imul(ah2, bh6) | 0;
      lo = lo + Math.imul(al1, bl7) | 0;
      mid = mid + Math.imul(al1, bh7) | 0;
      mid = mid + Math.imul(ah1, bl7) | 0;
      hi = hi + Math.imul(ah1, bh7) | 0;
      lo = lo + Math.imul(al0, bl8) | 0;
      mid = mid + Math.imul(al0, bh8) | 0;
      mid = mid + Math.imul(ah0, bl8) | 0;
      hi = hi + Math.imul(ah0, bh8) | 0;
      var w8 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
      w8 &= 67108863;
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = mid + Math.imul(ah9, bl0) | 0;
      hi = Math.imul(ah9, bh0);
      lo = lo + Math.imul(al8, bl1) | 0;
      mid = mid + Math.imul(al8, bh1) | 0;
      mid = mid + Math.imul(ah8, bl1) | 0;
      hi = hi + Math.imul(ah8, bh1) | 0;
      lo = lo + Math.imul(al7, bl2) | 0;
      mid = mid + Math.imul(al7, bh2) | 0;
      mid = mid + Math.imul(ah7, bl2) | 0;
      hi = hi + Math.imul(ah7, bh2) | 0;
      lo = lo + Math.imul(al6, bl3) | 0;
      mid = mid + Math.imul(al6, bh3) | 0;
      mid = mid + Math.imul(ah6, bl3) | 0;
      hi = hi + Math.imul(ah6, bh3) | 0;
      lo = lo + Math.imul(al5, bl4) | 0;
      mid = mid + Math.imul(al5, bh4) | 0;
      mid = mid + Math.imul(ah5, bl4) | 0;
      hi = hi + Math.imul(ah5, bh4) | 0;
      lo = lo + Math.imul(al4, bl5) | 0;
      mid = mid + Math.imul(al4, bh5) | 0;
      mid = mid + Math.imul(ah4, bl5) | 0;
      hi = hi + Math.imul(ah4, bh5) | 0;
      lo = lo + Math.imul(al3, bl6) | 0;
      mid = mid + Math.imul(al3, bh6) | 0;
      mid = mid + Math.imul(ah3, bl6) | 0;
      hi = hi + Math.imul(ah3, bh6) | 0;
      lo = lo + Math.imul(al2, bl7) | 0;
      mid = mid + Math.imul(al2, bh7) | 0;
      mid = mid + Math.imul(ah2, bl7) | 0;
      hi = hi + Math.imul(ah2, bh7) | 0;
      lo = lo + Math.imul(al1, bl8) | 0;
      mid = mid + Math.imul(al1, bh8) | 0;
      mid = mid + Math.imul(ah1, bl8) | 0;
      hi = hi + Math.imul(ah1, bh8) | 0;
      lo = lo + Math.imul(al0, bl9) | 0;
      mid = mid + Math.imul(al0, bh9) | 0;
      mid = mid + Math.imul(ah0, bl9) | 0;
      hi = hi + Math.imul(ah0, bh9) | 0;
      var w9 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
      w9 &= 67108863;
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = mid + Math.imul(ah9, bl1) | 0;
      hi = Math.imul(ah9, bh1);
      lo = lo + Math.imul(al8, bl2) | 0;
      mid = mid + Math.imul(al8, bh2) | 0;
      mid = mid + Math.imul(ah8, bl2) | 0;
      hi = hi + Math.imul(ah8, bh2) | 0;
      lo = lo + Math.imul(al7, bl3) | 0;
      mid = mid + Math.imul(al7, bh3) | 0;
      mid = mid + Math.imul(ah7, bl3) | 0;
      hi = hi + Math.imul(ah7, bh3) | 0;
      lo = lo + Math.imul(al6, bl4) | 0;
      mid = mid + Math.imul(al6, bh4) | 0;
      mid = mid + Math.imul(ah6, bl4) | 0;
      hi = hi + Math.imul(ah6, bh4) | 0;
      lo = lo + Math.imul(al5, bl5) | 0;
      mid = mid + Math.imul(al5, bh5) | 0;
      mid = mid + Math.imul(ah5, bl5) | 0;
      hi = hi + Math.imul(ah5, bh5) | 0;
      lo = lo + Math.imul(al4, bl6) | 0;
      mid = mid + Math.imul(al4, bh6) | 0;
      mid = mid + Math.imul(ah4, bl6) | 0;
      hi = hi + Math.imul(ah4, bh6) | 0;
      lo = lo + Math.imul(al3, bl7) | 0;
      mid = mid + Math.imul(al3, bh7) | 0;
      mid = mid + Math.imul(ah3, bl7) | 0;
      hi = hi + Math.imul(ah3, bh7) | 0;
      lo = lo + Math.imul(al2, bl8) | 0;
      mid = mid + Math.imul(al2, bh8) | 0;
      mid = mid + Math.imul(ah2, bl8) | 0;
      hi = hi + Math.imul(ah2, bh8) | 0;
      lo = lo + Math.imul(al1, bl9) | 0;
      mid = mid + Math.imul(al1, bh9) | 0;
      mid = mid + Math.imul(ah1, bl9) | 0;
      hi = hi + Math.imul(ah1, bh9) | 0;
      var w10 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
      w10 &= 67108863;
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = mid + Math.imul(ah9, bl2) | 0;
      hi = Math.imul(ah9, bh2);
      lo = lo + Math.imul(al8, bl3) | 0;
      mid = mid + Math.imul(al8, bh3) | 0;
      mid = mid + Math.imul(ah8, bl3) | 0;
      hi = hi + Math.imul(ah8, bh3) | 0;
      lo = lo + Math.imul(al7, bl4) | 0;
      mid = mid + Math.imul(al7, bh4) | 0;
      mid = mid + Math.imul(ah7, bl4) | 0;
      hi = hi + Math.imul(ah7, bh4) | 0;
      lo = lo + Math.imul(al6, bl5) | 0;
      mid = mid + Math.imul(al6, bh5) | 0;
      mid = mid + Math.imul(ah6, bl5) | 0;
      hi = hi + Math.imul(ah6, bh5) | 0;
      lo = lo + Math.imul(al5, bl6) | 0;
      mid = mid + Math.imul(al5, bh6) | 0;
      mid = mid + Math.imul(ah5, bl6) | 0;
      hi = hi + Math.imul(ah5, bh6) | 0;
      lo = lo + Math.imul(al4, bl7) | 0;
      mid = mid + Math.imul(al4, bh7) | 0;
      mid = mid + Math.imul(ah4, bl7) | 0;
      hi = hi + Math.imul(ah4, bh7) | 0;
      lo = lo + Math.imul(al3, bl8) | 0;
      mid = mid + Math.imul(al3, bh8) | 0;
      mid = mid + Math.imul(ah3, bl8) | 0;
      hi = hi + Math.imul(ah3, bh8) | 0;
      lo = lo + Math.imul(al2, bl9) | 0;
      mid = mid + Math.imul(al2, bh9) | 0;
      mid = mid + Math.imul(ah2, bl9) | 0;
      hi = hi + Math.imul(ah2, bh9) | 0;
      var w11 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
      w11 &= 67108863;
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = mid + Math.imul(ah9, bl3) | 0;
      hi = Math.imul(ah9, bh3);
      lo = lo + Math.imul(al8, bl4) | 0;
      mid = mid + Math.imul(al8, bh4) | 0;
      mid = mid + Math.imul(ah8, bl4) | 0;
      hi = hi + Math.imul(ah8, bh4) | 0;
      lo = lo + Math.imul(al7, bl5) | 0;
      mid = mid + Math.imul(al7, bh5) | 0;
      mid = mid + Math.imul(ah7, bl5) | 0;
      hi = hi + Math.imul(ah7, bh5) | 0;
      lo = lo + Math.imul(al6, bl6) | 0;
      mid = mid + Math.imul(al6, bh6) | 0;
      mid = mid + Math.imul(ah6, bl6) | 0;
      hi = hi + Math.imul(ah6, bh6) | 0;
      lo = lo + Math.imul(al5, bl7) | 0;
      mid = mid + Math.imul(al5, bh7) | 0;
      mid = mid + Math.imul(ah5, bl7) | 0;
      hi = hi + Math.imul(ah5, bh7) | 0;
      lo = lo + Math.imul(al4, bl8) | 0;
      mid = mid + Math.imul(al4, bh8) | 0;
      mid = mid + Math.imul(ah4, bl8) | 0;
      hi = hi + Math.imul(ah4, bh8) | 0;
      lo = lo + Math.imul(al3, bl9) | 0;
      mid = mid + Math.imul(al3, bh9) | 0;
      mid = mid + Math.imul(ah3, bl9) | 0;
      hi = hi + Math.imul(ah3, bh9) | 0;
      var w12 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
      w12 &= 67108863;
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = mid + Math.imul(ah9, bl4) | 0;
      hi = Math.imul(ah9, bh4);
      lo = lo + Math.imul(al8, bl5) | 0;
      mid = mid + Math.imul(al8, bh5) | 0;
      mid = mid + Math.imul(ah8, bl5) | 0;
      hi = hi + Math.imul(ah8, bh5) | 0;
      lo = lo + Math.imul(al7, bl6) | 0;
      mid = mid + Math.imul(al7, bh6) | 0;
      mid = mid + Math.imul(ah7, bl6) | 0;
      hi = hi + Math.imul(ah7, bh6) | 0;
      lo = lo + Math.imul(al6, bl7) | 0;
      mid = mid + Math.imul(al6, bh7) | 0;
      mid = mid + Math.imul(ah6, bl7) | 0;
      hi = hi + Math.imul(ah6, bh7) | 0;
      lo = lo + Math.imul(al5, bl8) | 0;
      mid = mid + Math.imul(al5, bh8) | 0;
      mid = mid + Math.imul(ah5, bl8) | 0;
      hi = hi + Math.imul(ah5, bh8) | 0;
      lo = lo + Math.imul(al4, bl9) | 0;
      mid = mid + Math.imul(al4, bh9) | 0;
      mid = mid + Math.imul(ah4, bl9) | 0;
      hi = hi + Math.imul(ah4, bh9) | 0;
      var w13 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
      w13 &= 67108863;
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = mid + Math.imul(ah9, bl5) | 0;
      hi = Math.imul(ah9, bh5);
      lo = lo + Math.imul(al8, bl6) | 0;
      mid = mid + Math.imul(al8, bh6) | 0;
      mid = mid + Math.imul(ah8, bl6) | 0;
      hi = hi + Math.imul(ah8, bh6) | 0;
      lo = lo + Math.imul(al7, bl7) | 0;
      mid = mid + Math.imul(al7, bh7) | 0;
      mid = mid + Math.imul(ah7, bl7) | 0;
      hi = hi + Math.imul(ah7, bh7) | 0;
      lo = lo + Math.imul(al6, bl8) | 0;
      mid = mid + Math.imul(al6, bh8) | 0;
      mid = mid + Math.imul(ah6, bl8) | 0;
      hi = hi + Math.imul(ah6, bh8) | 0;
      lo = lo + Math.imul(al5, bl9) | 0;
      mid = mid + Math.imul(al5, bh9) | 0;
      mid = mid + Math.imul(ah5, bl9) | 0;
      hi = hi + Math.imul(ah5, bh9) | 0;
      var w14 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
      w14 &= 67108863;
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = mid + Math.imul(ah9, bl6) | 0;
      hi = Math.imul(ah9, bh6);
      lo = lo + Math.imul(al8, bl7) | 0;
      mid = mid + Math.imul(al8, bh7) | 0;
      mid = mid + Math.imul(ah8, bl7) | 0;
      hi = hi + Math.imul(ah8, bh7) | 0;
      lo = lo + Math.imul(al7, bl8) | 0;
      mid = mid + Math.imul(al7, bh8) | 0;
      mid = mid + Math.imul(ah7, bl8) | 0;
      hi = hi + Math.imul(ah7, bh8) | 0;
      lo = lo + Math.imul(al6, bl9) | 0;
      mid = mid + Math.imul(al6, bh9) | 0;
      mid = mid + Math.imul(ah6, bl9) | 0;
      hi = hi + Math.imul(ah6, bh9) | 0;
      var w15 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
      w15 &= 67108863;
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = mid + Math.imul(ah9, bl7) | 0;
      hi = Math.imul(ah9, bh7);
      lo = lo + Math.imul(al8, bl8) | 0;
      mid = mid + Math.imul(al8, bh8) | 0;
      mid = mid + Math.imul(ah8, bl8) | 0;
      hi = hi + Math.imul(ah8, bh8) | 0;
      lo = lo + Math.imul(al7, bl9) | 0;
      mid = mid + Math.imul(al7, bh9) | 0;
      mid = mid + Math.imul(ah7, bl9) | 0;
      hi = hi + Math.imul(ah7, bh9) | 0;
      var w16 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
      w16 &= 67108863;
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = mid + Math.imul(ah9, bl8) | 0;
      hi = Math.imul(ah9, bh8);
      lo = lo + Math.imul(al8, bl9) | 0;
      mid = mid + Math.imul(al8, bh9) | 0;
      mid = mid + Math.imul(ah8, bl9) | 0;
      hi = hi + Math.imul(ah8, bh9) | 0;
      var w17 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
      w17 &= 67108863;
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = mid + Math.imul(ah9, bl9) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
      w18 &= 67108863;
      o9[0] = w0;
      o9[1] = w1;
      o9[2] = w22;
      o9[3] = w32;
      o9[4] = w4;
      o9[5] = w5;
      o9[6] = w6;
      o9[7] = w7;
      o9[8] = w8;
      o9[9] = w9;
      o9[10] = w10;
      o9[11] = w11;
      o9[12] = w12;
      o9[13] = w13;
      o9[14] = w14;
      o9[15] = w15;
      o9[16] = w16;
      o9[17] = w17;
      o9[18] = w18;
      if (c8 !== 0) {
        o9[19] = c8;
        out.length++;
      }
      return out;
    };
    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }
    function bigMulTo(self2, num, out) {
      out.negative = num.negative ^ self2.negative;
      out.length = self2.length + num.length;
      var carry = 0;
      var hncarry = 0;
      for (var k4 = 0; k4 < out.length - 1; k4++) {
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 67108863;
        var maxJ = Math.min(k4, num.length - 1);
        for (var j4 = Math.max(0, k4 - self2.length + 1); j4 <= maxJ; j4++) {
          var i8 = k4 - j4;
          var a8 = self2.words[i8] | 0;
          var b5 = num.words[j4] | 0;
          var r9 = a8 * b5;
          var lo = r9 & 67108863;
          ncarry = ncarry + (r9 / 67108864 | 0) | 0;
          lo = lo + rword | 0;
          rword = lo & 67108863;
          ncarry = ncarry + (lo >>> 26) | 0;
          hncarry += ncarry >>> 26;
          ncarry &= 67108863;
        }
        out.words[k4] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k4] = carry;
      } else {
        out.length--;
      }
      return out.strip();
    }
    function jumboMulTo(self2, num, out) {
      var fftm = new FFTM();
      return fftm.mulp(self2, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
      var res;
      var len = (this || _global$d).length + num.length;
      if ((this || _global$d).length === 10 && num.length === 10) {
        res = comb10MulTo(this || _global$d, num, out);
      } else if (len < 63) {
        res = smallMulTo(this || _global$d, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this || _global$d, num, out);
      } else {
        res = jumboMulTo(this || _global$d, num, out);
      }
      return res;
    };
    function FFTM(x4, y6) {
      (this || _global$d).x = x4;
      (this || _global$d).y = y6;
    }
    FFTM.prototype.makeRBT = function makeRBT(N4) {
      var t8 = new Array(N4);
      var l8 = BN.prototype._countBits(N4) - 1;
      for (var i8 = 0; i8 < N4; i8++) {
        t8[i8] = this.revBin(i8, l8, N4);
      }
      return t8;
    };
    FFTM.prototype.revBin = function revBin(x4, l8, N4) {
      if (x4 === 0 || x4 === N4 - 1)
        return x4;
      var rb = 0;
      for (var i8 = 0; i8 < l8; i8++) {
        rb |= (x4 & 1) << l8 - i8 - 1;
        x4 >>= 1;
      }
      return rb;
    };
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N4) {
      for (var i8 = 0; i8 < N4; i8++) {
        rtws[i8] = rws[rbt[i8]];
        itws[i8] = iws[rbt[i8]];
      }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N4, rbt) {
      this.permute(rbt, rws, iws, rtws, itws, N4);
      for (var s7 = 1; s7 < N4; s7 <<= 1) {
        var l8 = s7 << 1;
        var rtwdf = Math.cos(2 * Math.PI / l8);
        var itwdf = Math.sin(2 * Math.PI / l8);
        for (var p8 = 0; p8 < N4; p8 += l8) {
          var rtwdf_ = rtwdf;
          var itwdf_ = itwdf;
          for (var j4 = 0; j4 < s7; j4++) {
            var re3 = rtws[p8 + j4];
            var ie2 = itws[p8 + j4];
            var ro = rtws[p8 + j4 + s7];
            var io = itws[p8 + j4 + s7];
            var rx = rtwdf_ * ro - itwdf_ * io;
            io = rtwdf_ * io + itwdf_ * ro;
            ro = rx;
            rtws[p8 + j4] = re3 + ro;
            itws[p8 + j4] = ie2 + io;
            rtws[p8 + j4 + s7] = re3 - ro;
            itws[p8 + j4 + s7] = ie2 - io;
            if (j4 !== l8) {
              rx = rtwdf * rtwdf_ - itwdf * itwdf_;
              itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
              rtwdf_ = rx;
            }
          }
        }
      }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n9, m6) {
      var N4 = Math.max(m6, n9) | 1;
      var odd = N4 & 1;
      var i8 = 0;
      for (N4 = N4 / 2 | 0; N4; N4 = N4 >>> 1) {
        i8++;
      }
      return 1 << i8 + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N4) {
      if (N4 <= 1)
        return;
      for (var i8 = 0; i8 < N4 / 2; i8++) {
        var t8 = rws[i8];
        rws[i8] = rws[N4 - i8 - 1];
        rws[N4 - i8 - 1] = t8;
        t8 = iws[i8];
        iws[i8] = -iws[N4 - i8 - 1];
        iws[N4 - i8 - 1] = -t8;
      }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N4) {
      var carry = 0;
      for (var i8 = 0; i8 < N4 / 2; i8++) {
        var w4 = Math.round(ws[2 * i8 + 1] / N4) * 8192 + Math.round(ws[2 * i8] / N4) + carry;
        ws[i8] = w4 & 67108863;
        if (w4 < 67108864) {
          carry = 0;
        } else {
          carry = w4 / 67108864 | 0;
        }
      }
      return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N4) {
      var carry = 0;
      for (var i8 = 0; i8 < len; i8++) {
        carry = carry + (ws[i8] | 0);
        rws[2 * i8] = carry & 8191;
        carry = carry >>> 13;
        rws[2 * i8 + 1] = carry & 8191;
        carry = carry >>> 13;
      }
      for (i8 = 2 * len; i8 < N4; ++i8) {
        rws[i8] = 0;
      }
      assert2(carry === 0);
      assert2((carry & ~8191) === 0);
    };
    FFTM.prototype.stub = function stub(N4) {
      var ph = new Array(N4);
      for (var i8 = 0; i8 < N4; i8++) {
        ph[i8] = 0;
      }
      return ph;
    };
    FFTM.prototype.mulp = function mulp(x4, y6, out) {
      var N4 = 2 * this.guessLen13b(x4.length, y6.length);
      var rbt = this.makeRBT(N4);
      var _4 = this.stub(N4);
      var rws = new Array(N4);
      var rwst = new Array(N4);
      var iwst = new Array(N4);
      var nrws = new Array(N4);
      var nrwst = new Array(N4);
      var niwst = new Array(N4);
      var rmws = out.words;
      rmws.length = N4;
      this.convert13b(x4.words, x4.length, rws, N4);
      this.convert13b(y6.words, y6.length, nrws, N4);
      this.transform(rws, _4, rwst, iwst, N4, rbt);
      this.transform(nrws, _4, nrwst, niwst, N4, rbt);
      for (var i8 = 0; i8 < N4; i8++) {
        var rx = rwst[i8] * nrwst[i8] - iwst[i8] * niwst[i8];
        iwst[i8] = rwst[i8] * niwst[i8] + iwst[i8] * nrwst[i8];
        rwst[i8] = rx;
      }
      this.conjugate(rwst, iwst, N4);
      this.transform(rwst, iwst, rmws, _4, N4, rbt);
      this.conjugate(rmws, _4, N4);
      this.normalize13b(rmws, N4);
      out.negative = x4.negative ^ y6.negative;
      out.length = x4.length + y6.length;
      return out.strip();
    };
    BN.prototype.mul = function mul(num) {
      var out = new BN(null);
      out.words = new Array((this || _global$d).length + num.length);
      return this.mulTo(num, out);
    };
    BN.prototype.mulf = function mulf(num) {
      var out = new BN(null);
      out.words = new Array((this || _global$d).length + num.length);
      return jumboMulTo(this || _global$d, num, out);
    };
    BN.prototype.imul = function imul(num) {
      return this.clone().mulTo(num, this || _global$d);
    };
    BN.prototype.imuln = function imuln(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      var carry = 0;
      for (var i8 = 0; i8 < (this || _global$d).length; i8++) {
        var w4 = ((this || _global$d).words[i8] | 0) * num;
        var lo = (w4 & 67108863) + (carry & 67108863);
        carry >>= 26;
        carry += w4 / 67108864 | 0;
        carry += lo >>> 26;
        (this || _global$d).words[i8] = lo & 67108863;
      }
      if (carry !== 0) {
        (this || _global$d).words[i8] = carry;
        (this || _global$d).length++;
      }
      return this || _global$d;
    };
    BN.prototype.muln = function muln(num) {
      return this.clone().imuln(num);
    };
    BN.prototype.sqr = function sqr() {
      return this.mul(this || _global$d);
    };
    BN.prototype.isqr = function isqr() {
      return this.imul(this.clone());
    };
    BN.prototype.pow = function pow(num) {
      var w4 = toBitArray(num);
      if (w4.length === 0)
        return new BN(1);
      var res = this || _global$d;
      for (var i8 = 0; i8 < w4.length; i8++, res = res.sqr()) {
        if (w4[i8] !== 0)
          break;
      }
      if (++i8 < w4.length) {
        for (var q3 = res.sqr(); i8 < w4.length; i8++, q3 = q3.sqr()) {
          if (w4[i8] === 0)
            continue;
          res = res.mul(q3);
        }
      }
      return res;
    };
    BN.prototype.iushln = function iushln(bits) {
      assert2(typeof bits === "number" && bits >= 0);
      var r9 = bits % 26;
      var s7 = (bits - r9) / 26;
      var carryMask = 67108863 >>> 26 - r9 << 26 - r9;
      var i8;
      if (r9 !== 0) {
        var carry = 0;
        for (i8 = 0; i8 < (this || _global$d).length; i8++) {
          var newCarry = (this || _global$d).words[i8] & carryMask;
          var c8 = ((this || _global$d).words[i8] | 0) - newCarry << r9;
          (this || _global$d).words[i8] = c8 | carry;
          carry = newCarry >>> 26 - r9;
        }
        if (carry) {
          (this || _global$d).words[i8] = carry;
          (this || _global$d).length++;
        }
      }
      if (s7 !== 0) {
        for (i8 = (this || _global$d).length - 1; i8 >= 0; i8--) {
          (this || _global$d).words[i8 + s7] = (this || _global$d).words[i8];
        }
        for (i8 = 0; i8 < s7; i8++) {
          (this || _global$d).words[i8] = 0;
        }
        (this || _global$d).length += s7;
      }
      return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
      assert2((this || _global$d).negative === 0);
      return this.iushln(bits);
    };
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
      assert2(typeof bits === "number" && bits >= 0);
      var h8;
      if (hint) {
        h8 = (hint - hint % 26) / 26;
      } else {
        h8 = 0;
      }
      var r9 = bits % 26;
      var s7 = Math.min((bits - r9) / 26, (this || _global$d).length);
      var mask = 67108863 ^ 67108863 >>> r9 << r9;
      var maskedWords = extended;
      h8 -= s7;
      h8 = Math.max(0, h8);
      if (maskedWords) {
        for (var i8 = 0; i8 < s7; i8++) {
          maskedWords.words[i8] = (this || _global$d).words[i8];
        }
        maskedWords.length = s7;
      }
      if (s7 === 0)
        ;
      else if ((this || _global$d).length > s7) {
        (this || _global$d).length -= s7;
        for (i8 = 0; i8 < (this || _global$d).length; i8++) {
          (this || _global$d).words[i8] = (this || _global$d).words[i8 + s7];
        }
      } else {
        (this || _global$d).words[0] = 0;
        (this || _global$d).length = 1;
      }
      var carry = 0;
      for (i8 = (this || _global$d).length - 1; i8 >= 0 && (carry !== 0 || i8 >= h8); i8--) {
        var word = (this || _global$d).words[i8] | 0;
        (this || _global$d).words[i8] = carry << 26 - r9 | word >>> r9;
        carry = word & mask;
      }
      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }
      if ((this || _global$d).length === 0) {
        (this || _global$d).words[0] = 0;
        (this || _global$d).length = 1;
      }
      return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
      assert2((this || _global$d).negative === 0);
      return this.iushrn(bits, hint, extended);
    };
    BN.prototype.shln = function shln(bits) {
      return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
      return this.clone().iushln(bits);
    };
    BN.prototype.shrn = function shrn(bits) {
      return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
      return this.clone().iushrn(bits);
    };
    BN.prototype.testn = function testn(bit) {
      assert2(typeof bit === "number" && bit >= 0);
      var r9 = bit % 26;
      var s7 = (bit - r9) / 26;
      var q3 = 1 << r9;
      if ((this || _global$d).length <= s7)
        return false;
      var w4 = (this || _global$d).words[s7];
      return !!(w4 & q3);
    };
    BN.prototype.imaskn = function imaskn(bits) {
      assert2(typeof bits === "number" && bits >= 0);
      var r9 = bits % 26;
      var s7 = (bits - r9) / 26;
      assert2((this || _global$d).negative === 0, "imaskn works only with positive numbers");
      if ((this || _global$d).length <= s7) {
        return this || _global$d;
      }
      if (r9 !== 0) {
        s7++;
      }
      (this || _global$d).length = Math.min(s7, (this || _global$d).length);
      if (r9 !== 0) {
        var mask = 67108863 ^ 67108863 >>> r9 << r9;
        (this || _global$d).words[(this || _global$d).length - 1] &= mask;
      }
      return this.strip();
    };
    BN.prototype.maskn = function maskn(bits) {
      return this.clone().imaskn(bits);
    };
    BN.prototype.iaddn = function iaddn(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      if (num < 0)
        return this.isubn(-num);
      if ((this || _global$d).negative !== 0) {
        if ((this || _global$d).length === 1 && ((this || _global$d).words[0] | 0) < num) {
          (this || _global$d).words[0] = num - ((this || _global$d).words[0] | 0);
          (this || _global$d).negative = 0;
          return this || _global$d;
        }
        (this || _global$d).negative = 0;
        this.isubn(num);
        (this || _global$d).negative = 1;
        return this || _global$d;
      }
      return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
      (this || _global$d).words[0] += num;
      for (var i8 = 0; i8 < (this || _global$d).length && (this || _global$d).words[i8] >= 67108864; i8++) {
        (this || _global$d).words[i8] -= 67108864;
        if (i8 === (this || _global$d).length - 1) {
          (this || _global$d).words[i8 + 1] = 1;
        } else {
          (this || _global$d).words[i8 + 1]++;
        }
      }
      (this || _global$d).length = Math.max((this || _global$d).length, i8 + 1);
      return this || _global$d;
    };
    BN.prototype.isubn = function isubn(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      if (num < 0)
        return this.iaddn(-num);
      if ((this || _global$d).negative !== 0) {
        (this || _global$d).negative = 0;
        this.iaddn(num);
        (this || _global$d).negative = 1;
        return this || _global$d;
      }
      (this || _global$d).words[0] -= num;
      if ((this || _global$d).length === 1 && (this || _global$d).words[0] < 0) {
        (this || _global$d).words[0] = -(this || _global$d).words[0];
        (this || _global$d).negative = 1;
      } else {
        for (var i8 = 0; i8 < (this || _global$d).length && (this || _global$d).words[i8] < 0; i8++) {
          (this || _global$d).words[i8] += 67108864;
          (this || _global$d).words[i8 + 1] -= 1;
        }
      }
      return this.strip();
    };
    BN.prototype.addn = function addn(num) {
      return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
      return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
      (this || _global$d).negative = 0;
      return this || _global$d;
    };
    BN.prototype.abs = function abs() {
      return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
      var len = num.length + shift;
      var i8;
      this._expand(len);
      var w4;
      var carry = 0;
      for (i8 = 0; i8 < num.length; i8++) {
        w4 = ((this || _global$d).words[i8 + shift] | 0) + carry;
        var right = (num.words[i8] | 0) * mul;
        w4 -= right & 67108863;
        carry = (w4 >> 26) - (right / 67108864 | 0);
        (this || _global$d).words[i8 + shift] = w4 & 67108863;
      }
      for (; i8 < (this || _global$d).length - shift; i8++) {
        w4 = ((this || _global$d).words[i8 + shift] | 0) + carry;
        carry = w4 >> 26;
        (this || _global$d).words[i8 + shift] = w4 & 67108863;
      }
      if (carry === 0)
        return this.strip();
      assert2(carry === -1);
      carry = 0;
      for (i8 = 0; i8 < (this || _global$d).length; i8++) {
        w4 = -((this || _global$d).words[i8] | 0) + carry;
        carry = w4 >> 26;
        (this || _global$d).words[i8] = w4 & 67108863;
      }
      (this || _global$d).negative = 1;
      return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
      var shift = (this || _global$d).length - num.length;
      var a8 = this.clone();
      var b5 = num;
      var bhi = b5.words[b5.length - 1] | 0;
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b5 = b5.ushln(shift);
        a8.iushln(shift);
        bhi = b5.words[b5.length - 1] | 0;
      }
      var m6 = a8.length - b5.length;
      var q3;
      if (mode !== "mod") {
        q3 = new BN(null);
        q3.length = m6 + 1;
        q3.words = new Array(q3.length);
        for (var i8 = 0; i8 < q3.length; i8++) {
          q3.words[i8] = 0;
        }
      }
      var diff = a8.clone()._ishlnsubmul(b5, 1, m6);
      if (diff.negative === 0) {
        a8 = diff;
        if (q3) {
          q3.words[m6] = 1;
        }
      }
      for (var j4 = m6 - 1; j4 >= 0; j4--) {
        var qj = (a8.words[b5.length + j4] | 0) * 67108864 + (a8.words[b5.length + j4 - 1] | 0);
        qj = Math.min(qj / bhi | 0, 67108863);
        a8._ishlnsubmul(b5, qj, j4);
        while (a8.negative !== 0) {
          qj--;
          a8.negative = 0;
          a8._ishlnsubmul(b5, 1, j4);
          if (!a8.isZero()) {
            a8.negative ^= 1;
          }
        }
        if (q3) {
          q3.words[j4] = qj;
        }
      }
      if (q3) {
        q3.strip();
      }
      a8.strip();
      if (mode !== "div" && shift !== 0) {
        a8.iushrn(shift);
      }
      return {
        div: q3 || null,
        mod: a8
      };
    };
    BN.prototype.divmod = function divmod(num, mode, positive) {
      assert2(!num.isZero());
      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }
      var div, mod, res;
      if ((this || _global$d).negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);
        if (mode !== "mod") {
          div = res.div.neg();
        }
        if (mode !== "div") {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }
        return {
          div,
          mod
        };
      }
      if ((this || _global$d).negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);
        if (mode !== "mod") {
          div = res.div.neg();
        }
        return {
          div,
          mod: res.mod
        };
      }
      if (((this || _global$d).negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);
        if (mode !== "div") {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }
        return {
          div: res.div,
          mod
        };
      }
      if (num.length > (this || _global$d).length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this || _global$d
        };
      }
      if (num.length === 1) {
        if (mode === "div") {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }
        if (mode === "mod") {
          return {
            div: null,
            mod: new BN(this.modn(num.words[0]))
          };
        }
        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modn(num.words[0]))
        };
      }
      return this._wordDiv(num, mode);
    };
    BN.prototype.div = function div(num) {
      return this.divmod(num, "div", false).div;
    };
    BN.prototype.mod = function mod(num) {
      return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
      return this.divmod(num, "mod", true).mod;
    };
    BN.prototype.divRound = function divRound(num) {
      var dm = this.divmod(num);
      if (dm.mod.isZero())
        return dm.div;
      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
      var half = num.ushrn(1);
      var r22 = num.andln(1);
      var cmp = mod.cmp(half);
      if (cmp < 0 || r22 === 1 && cmp === 0)
        return dm.div;
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
      assert2(num <= 67108863);
      var p8 = (1 << 26) % num;
      var acc = 0;
      for (var i8 = (this || _global$d).length - 1; i8 >= 0; i8--) {
        acc = (p8 * acc + ((this || _global$d).words[i8] | 0)) % num;
      }
      return acc;
    };
    BN.prototype.idivn = function idivn(num) {
      assert2(num <= 67108863);
      var carry = 0;
      for (var i8 = (this || _global$d).length - 1; i8 >= 0; i8--) {
        var w4 = ((this || _global$d).words[i8] | 0) + carry * 67108864;
        (this || _global$d).words[i8] = w4 / num | 0;
        carry = w4 % num;
      }
      return this.strip();
    };
    BN.prototype.divn = function divn(num) {
      return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p8) {
      assert2(p8.negative === 0);
      assert2(!p8.isZero());
      var x4 = this || _global$d;
      var y6 = p8.clone();
      if (x4.negative !== 0) {
        x4 = x4.umod(p8);
      } else {
        x4 = x4.clone();
      }
      var A4 = new BN(1);
      var B4 = new BN(0);
      var C4 = new BN(0);
      var D4 = new BN(1);
      var g5 = 0;
      while (x4.isEven() && y6.isEven()) {
        x4.iushrn(1);
        y6.iushrn(1);
        ++g5;
      }
      var yp = y6.clone();
      var xp = x4.clone();
      while (!x4.isZero()) {
        for (var i8 = 0, im = 1; (x4.words[0] & im) === 0 && i8 < 26; ++i8, im <<= 1)
          ;
        if (i8 > 0) {
          x4.iushrn(i8);
          while (i8-- > 0) {
            if (A4.isOdd() || B4.isOdd()) {
              A4.iadd(yp);
              B4.isub(xp);
            }
            A4.iushrn(1);
            B4.iushrn(1);
          }
        }
        for (var j4 = 0, jm = 1; (y6.words[0] & jm) === 0 && j4 < 26; ++j4, jm <<= 1)
          ;
        if (j4 > 0) {
          y6.iushrn(j4);
          while (j4-- > 0) {
            if (C4.isOdd() || D4.isOdd()) {
              C4.iadd(yp);
              D4.isub(xp);
            }
            C4.iushrn(1);
            D4.iushrn(1);
          }
        }
        if (x4.cmp(y6) >= 0) {
          x4.isub(y6);
          A4.isub(C4);
          B4.isub(D4);
        } else {
          y6.isub(x4);
          C4.isub(A4);
          D4.isub(B4);
        }
      }
      return {
        a: C4,
        b: D4,
        gcd: y6.iushln(g5)
      };
    };
    BN.prototype._invmp = function _invmp(p8) {
      assert2(p8.negative === 0);
      assert2(!p8.isZero());
      var a8 = this || _global$d;
      var b5 = p8.clone();
      if (a8.negative !== 0) {
        a8 = a8.umod(p8);
      } else {
        a8 = a8.clone();
      }
      var x1 = new BN(1);
      var x22 = new BN(0);
      var delta = b5.clone();
      while (a8.cmpn(1) > 0 && b5.cmpn(1) > 0) {
        for (var i8 = 0, im = 1; (a8.words[0] & im) === 0 && i8 < 26; ++i8, im <<= 1)
          ;
        if (i8 > 0) {
          a8.iushrn(i8);
          while (i8-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }
            x1.iushrn(1);
          }
        }
        for (var j4 = 0, jm = 1; (b5.words[0] & jm) === 0 && j4 < 26; ++j4, jm <<= 1)
          ;
        if (j4 > 0) {
          b5.iushrn(j4);
          while (j4-- > 0) {
            if (x22.isOdd()) {
              x22.iadd(delta);
            }
            x22.iushrn(1);
          }
        }
        if (a8.cmp(b5) >= 0) {
          a8.isub(b5);
          x1.isub(x22);
        } else {
          b5.isub(a8);
          x22.isub(x1);
        }
      }
      var res;
      if (a8.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x22;
      }
      if (res.cmpn(0) < 0) {
        res.iadd(p8);
      }
      return res;
    };
    BN.prototype.gcd = function gcd(num) {
      if (this.isZero())
        return num.abs();
      if (num.isZero())
        return this.abs();
      var a8 = this.clone();
      var b5 = num.clone();
      a8.negative = 0;
      b5.negative = 0;
      for (var shift = 0; a8.isEven() && b5.isEven(); shift++) {
        a8.iushrn(1);
        b5.iushrn(1);
      }
      do {
        while (a8.isEven()) {
          a8.iushrn(1);
        }
        while (b5.isEven()) {
          b5.iushrn(1);
        }
        var r9 = a8.cmp(b5);
        if (r9 < 0) {
          var t8 = a8;
          a8 = b5;
          b5 = t8;
        } else if (r9 === 0 || b5.cmpn(1) === 0) {
          break;
        }
        a8.isub(b5);
      } while (true);
      return b5.iushln(shift);
    };
    BN.prototype.invm = function invm(num) {
      return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
      return ((this || _global$d).words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
      return ((this || _global$d).words[0] & 1) === 1;
    };
    BN.prototype.andln = function andln(num) {
      return (this || _global$d).words[0] & num;
    };
    BN.prototype.bincn = function bincn(bit) {
      assert2(typeof bit === "number");
      var r9 = bit % 26;
      var s7 = (bit - r9) / 26;
      var q3 = 1 << r9;
      if ((this || _global$d).length <= s7) {
        this._expand(s7 + 1);
        (this || _global$d).words[s7] |= q3;
        return this || _global$d;
      }
      var carry = q3;
      for (var i8 = s7; carry !== 0 && i8 < (this || _global$d).length; i8++) {
        var w4 = (this || _global$d).words[i8] | 0;
        w4 += carry;
        carry = w4 >>> 26;
        w4 &= 67108863;
        (this || _global$d).words[i8] = w4;
      }
      if (carry !== 0) {
        (this || _global$d).words[i8] = carry;
        (this || _global$d).length++;
      }
      return this || _global$d;
    };
    BN.prototype.isZero = function isZero() {
      return (this || _global$d).length === 1 && (this || _global$d).words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
      var negative = num < 0;
      if ((this || _global$d).negative !== 0 && !negative)
        return -1;
      if ((this || _global$d).negative === 0 && negative)
        return 1;
      this.strip();
      var res;
      if ((this || _global$d).length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }
        assert2(num <= 67108863, "Number is too big");
        var w4 = (this || _global$d).words[0] | 0;
        res = w4 === num ? 0 : w4 < num ? -1 : 1;
      }
      if ((this || _global$d).negative !== 0)
        return -res | 0;
      return res;
    };
    BN.prototype.cmp = function cmp(num) {
      if ((this || _global$d).negative !== 0 && num.negative === 0)
        return -1;
      if ((this || _global$d).negative === 0 && num.negative !== 0)
        return 1;
      var res = this.ucmp(num);
      if ((this || _global$d).negative !== 0)
        return -res | 0;
      return res;
    };
    BN.prototype.ucmp = function ucmp(num) {
      if ((this || _global$d).length > num.length)
        return 1;
      if ((this || _global$d).length < num.length)
        return -1;
      var res = 0;
      for (var i8 = (this || _global$d).length - 1; i8 >= 0; i8--) {
        var a8 = (this || _global$d).words[i8] | 0;
        var b5 = num.words[i8] | 0;
        if (a8 === b5)
          continue;
        if (a8 < b5) {
          res = -1;
        } else if (a8 > b5) {
          res = 1;
        }
        break;
      }
      return res;
    };
    BN.prototype.gtn = function gtn(num) {
      return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
      return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
      return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
      return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
      return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
      return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
      return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
      return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
      return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
      return this.cmp(num) === 0;
    };
    BN.red = function red(num) {
      return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
      assert2(!(this || _global$d).red, "Already a number in reduction context");
      assert2((this || _global$d).negative === 0, "red works only with positives");
      return ctx.convertTo(this || _global$d)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
      assert2((this || _global$d).red, "fromRed works only with numbers in reduction context");
      return (this || _global$d).red.convertFrom(this || _global$d);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
      (this || _global$d).red = ctx;
      return this || _global$d;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
      assert2(!(this || _global$d).red, "Already a number in reduction context");
      return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
      assert2((this || _global$d).red, "redAdd works only with red numbers");
      return (this || _global$d).red.add(this || _global$d, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
      assert2((this || _global$d).red, "redIAdd works only with red numbers");
      return (this || _global$d).red.iadd(this || _global$d, num);
    };
    BN.prototype.redSub = function redSub(num) {
      assert2((this || _global$d).red, "redSub works only with red numbers");
      return (this || _global$d).red.sub(this || _global$d, num);
    };
    BN.prototype.redISub = function redISub(num) {
      assert2((this || _global$d).red, "redISub works only with red numbers");
      return (this || _global$d).red.isub(this || _global$d, num);
    };
    BN.prototype.redShl = function redShl(num) {
      assert2((this || _global$d).red, "redShl works only with red numbers");
      return (this || _global$d).red.shl(this || _global$d, num);
    };
    BN.prototype.redMul = function redMul(num) {
      assert2((this || _global$d).red, "redMul works only with red numbers");
      (this || _global$d).red._verify2(this || _global$d, num);
      return (this || _global$d).red.mul(this || _global$d, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
      assert2((this || _global$d).red, "redMul works only with red numbers");
      (this || _global$d).red._verify2(this || _global$d, num);
      return (this || _global$d).red.imul(this || _global$d, num);
    };
    BN.prototype.redSqr = function redSqr() {
      assert2((this || _global$d).red, "redSqr works only with red numbers");
      (this || _global$d).red._verify1(this || _global$d);
      return (this || _global$d).red.sqr(this || _global$d);
    };
    BN.prototype.redISqr = function redISqr() {
      assert2((this || _global$d).red, "redISqr works only with red numbers");
      (this || _global$d).red._verify1(this || _global$d);
      return (this || _global$d).red.isqr(this || _global$d);
    };
    BN.prototype.redSqrt = function redSqrt() {
      assert2((this || _global$d).red, "redSqrt works only with red numbers");
      (this || _global$d).red._verify1(this || _global$d);
      return (this || _global$d).red.sqrt(this || _global$d);
    };
    BN.prototype.redInvm = function redInvm() {
      assert2((this || _global$d).red, "redInvm works only with red numbers");
      (this || _global$d).red._verify1(this || _global$d);
      return (this || _global$d).red.invm(this || _global$d);
    };
    BN.prototype.redNeg = function redNeg() {
      assert2((this || _global$d).red, "redNeg works only with red numbers");
      (this || _global$d).red._verify1(this || _global$d);
      return (this || _global$d).red.neg(this || _global$d);
    };
    BN.prototype.redPow = function redPow(num) {
      assert2((this || _global$d).red && !num.red, "redPow(normalNum)");
      (this || _global$d).red._verify1(this || _global$d);
      return (this || _global$d).red.pow(this || _global$d, num);
    };
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };
    function MPrime(name2, p8) {
      (this || _global$d).name = name2;
      (this || _global$d).p = new BN(p8, 16);
      (this || _global$d).n = (this || _global$d).p.bitLength();
      (this || _global$d).k = new BN(1).iushln((this || _global$d).n).isub((this || _global$d).p);
      (this || _global$d).tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil((this || _global$d).n / 13));
      return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
      var r9 = num;
      var rlen;
      do {
        this.split(r9, (this || _global$d).tmp);
        r9 = this.imulK(r9);
        r9 = r9.iadd((this || _global$d).tmp);
        rlen = r9.bitLength();
      } while (rlen > (this || _global$d).n);
      var cmp = rlen < (this || _global$d).n ? -1 : r9.ucmp((this || _global$d).p);
      if (cmp === 0) {
        r9.words[0] = 0;
        r9.length = 1;
      } else if (cmp > 0) {
        r9.isub((this || _global$d).p);
      } else {
        if (r9.strip !== void 0) {
          r9.strip();
        } else {
          r9._strip();
        }
      }
      return r9;
    };
    MPrime.prototype.split = function split(input, out) {
      input.iushrn((this || _global$d).n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
      return num.imul((this || _global$d).k);
    };
    function K256() {
      MPrime.call(this || _global$d, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits4(K256, MPrime);
    K256.prototype.split = function split(input, output) {
      var mask = 4194303;
      var outLen = Math.min(input.length, 9);
      for (var i8 = 0; i8 < outLen; i8++) {
        output.words[i8] = input.words[i8];
      }
      output.length = outLen;
      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }
      var prev = input.words[9];
      output.words[output.length++] = prev & mask;
      for (i8 = 10; i8 < input.length; i8++) {
        var next = input.words[i8] | 0;
        input.words[i8 - 10] = (next & mask) << 4 | prev >>> 22;
        prev = next;
      }
      prev >>>= 22;
      input.words[i8 - 10] = prev;
      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };
    K256.prototype.imulK = function imulK(num) {
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;
      var lo = 0;
      for (var i8 = 0; i8 < num.length; i8++) {
        var w4 = num.words[i8] | 0;
        lo += w4 * 977;
        num.words[i8] = lo & 67108863;
        lo = w4 * 64 + (lo / 67108864 | 0);
      }
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }
      return num;
    };
    function P224() {
      MPrime.call(this || _global$d, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits4(P224, MPrime);
    function P192() {
      MPrime.call(this || _global$d, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits4(P192, MPrime);
    function P25519() {
      MPrime.call(this || _global$d, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits4(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
      var carry = 0;
      for (var i8 = 0; i8 < num.length; i8++) {
        var hi = (num.words[i8] | 0) * 19 + carry;
        var lo = hi & 67108863;
        hi >>>= 26;
        num.words[i8] = lo;
        carry = hi;
      }
      if (carry !== 0) {
        num.words[num.length++] = carry;
      }
      return num;
    };
    BN._prime = function prime(name2) {
      if (primes[name2])
        return primes[name2];
      var prime2;
      if (name2 === "k256") {
        prime2 = new K256();
      } else if (name2 === "p224") {
        prime2 = new P224();
      } else if (name2 === "p192") {
        prime2 = new P192();
      } else if (name2 === "p25519") {
        prime2 = new P25519();
      } else {
        throw new Error("Unknown prime " + name2);
      }
      primes[name2] = prime2;
      return prime2;
    };
    function Red(m6) {
      if (typeof m6 === "string") {
        var prime = BN._prime(m6);
        (this || _global$d).m = prime.p;
        (this || _global$d).prime = prime;
      } else {
        assert2(m6.gtn(1), "modulus must be greater than 1");
        (this || _global$d).m = m6;
        (this || _global$d).prime = null;
      }
    }
    Red.prototype._verify1 = function _verify1(a8) {
      assert2(a8.negative === 0, "red works only with positives");
      assert2(a8.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a8, b5) {
      assert2((a8.negative | b5.negative) === 0, "red works only with positives");
      assert2(a8.red && a8.red === b5.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a8) {
      if ((this || _global$d).prime)
        return (this || _global$d).prime.ireduce(a8)._forceRed(this || _global$d);
      return a8.umod((this || _global$d).m)._forceRed(this || _global$d);
    };
    Red.prototype.neg = function neg(a8) {
      if (a8.isZero()) {
        return a8.clone();
      }
      return (this || _global$d).m.sub(a8)._forceRed(this || _global$d);
    };
    Red.prototype.add = function add(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.add(b5);
      if (res.cmp((this || _global$d).m) >= 0) {
        res.isub((this || _global$d).m);
      }
      return res._forceRed(this || _global$d);
    };
    Red.prototype.iadd = function iadd(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.iadd(b5);
      if (res.cmp((this || _global$d).m) >= 0) {
        res.isub((this || _global$d).m);
      }
      return res;
    };
    Red.prototype.sub = function sub(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.sub(b5);
      if (res.cmpn(0) < 0) {
        res.iadd((this || _global$d).m);
      }
      return res._forceRed(this || _global$d);
    };
    Red.prototype.isub = function isub(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.isub(b5);
      if (res.cmpn(0) < 0) {
        res.iadd((this || _global$d).m);
      }
      return res;
    };
    Red.prototype.shl = function shl(a8, num) {
      this._verify1(a8);
      return this.imod(a8.ushln(num));
    };
    Red.prototype.imul = function imul(a8, b5) {
      this._verify2(a8, b5);
      return this.imod(a8.imul(b5));
    };
    Red.prototype.mul = function mul(a8, b5) {
      this._verify2(a8, b5);
      return this.imod(a8.mul(b5));
    };
    Red.prototype.isqr = function isqr(a8) {
      return this.imul(a8, a8.clone());
    };
    Red.prototype.sqr = function sqr(a8) {
      return this.mul(a8, a8);
    };
    Red.prototype.sqrt = function sqrt(a8) {
      if (a8.isZero())
        return a8.clone();
      var mod3 = (this || _global$d).m.andln(3);
      assert2(mod3 % 2 === 1);
      if (mod3 === 3) {
        var pow = (this || _global$d).m.add(new BN(1)).iushrn(2);
        return this.pow(a8, pow);
      }
      var q3 = (this || _global$d).m.subn(1);
      var s7 = 0;
      while (!q3.isZero() && q3.andln(1) === 0) {
        s7++;
        q3.iushrn(1);
      }
      assert2(!q3.isZero());
      var one = new BN(1).toRed(this || _global$d);
      var nOne = one.redNeg();
      var lpow = (this || _global$d).m.subn(1).iushrn(1);
      var z5 = (this || _global$d).m.bitLength();
      z5 = new BN(2 * z5 * z5).toRed(this || _global$d);
      while (this.pow(z5, lpow).cmp(nOne) !== 0) {
        z5.redIAdd(nOne);
      }
      var c8 = this.pow(z5, q3);
      var r9 = this.pow(a8, q3.addn(1).iushrn(1));
      var t8 = this.pow(a8, q3);
      var m6 = s7;
      while (t8.cmp(one) !== 0) {
        var tmp = t8;
        for (var i8 = 0; tmp.cmp(one) !== 0; i8++) {
          tmp = tmp.redSqr();
        }
        assert2(i8 < m6);
        var b5 = this.pow(c8, new BN(1).iushln(m6 - i8 - 1));
        r9 = r9.redMul(b5);
        c8 = b5.redSqr();
        t8 = t8.redMul(c8);
        m6 = i8;
      }
      return r9;
    };
    Red.prototype.invm = function invm(a8) {
      var inv = a8._invmp((this || _global$d).m);
      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };
    Red.prototype.pow = function pow(a8, num) {
      if (num.isZero())
        return new BN(1).toRed(this || _global$d);
      if (num.cmpn(1) === 0)
        return a8.clone();
      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN(1).toRed(this || _global$d);
      wnd[1] = a8;
      for (var i8 = 2; i8 < wnd.length; i8++) {
        wnd[i8] = this.mul(wnd[i8 - 1], a8);
      }
      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;
      if (start === 0) {
        start = 26;
      }
      for (i8 = num.length - 1; i8 >= 0; i8--) {
        var word = num.words[i8];
        for (var j4 = start - 1; j4 >= 0; j4--) {
          var bit = word >> j4 & 1;
          if (res !== wnd[0]) {
            res = this.sqr(res);
          }
          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }
          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i8 !== 0 || j4 !== 0))
            continue;
          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }
        start = 26;
      }
      return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
      var r9 = num.umod((this || _global$d).m);
      return r9 === num ? r9.clone() : r9;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
      var res = num.clone();
      res.red = null;
      return res;
    };
    BN.mont = function mont(num) {
      return new Mont(num);
    };
    function Mont(m6) {
      Red.call(this || _global$d, m6);
      (this || _global$d).shift = (this || _global$d).m.bitLength();
      if ((this || _global$d).shift % 26 !== 0) {
        (this || _global$d).shift += 26 - (this || _global$d).shift % 26;
      }
      (this || _global$d).r = new BN(1).iushln((this || _global$d).shift);
      (this || _global$d).r2 = this.imod((this || _global$d).r.sqr());
      (this || _global$d).rinv = (this || _global$d).r._invmp((this || _global$d).m);
      (this || _global$d).minv = (this || _global$d).rinv.mul((this || _global$d).r).isubn(1).div((this || _global$d).m);
      (this || _global$d).minv = (this || _global$d).minv.umod((this || _global$d).r);
      (this || _global$d).minv = (this || _global$d).r.sub((this || _global$d).minv);
    }
    inherits4(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
      return this.imod(num.ushln((this || _global$d).shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
      var r9 = this.imod(num.mul((this || _global$d).rinv));
      r9.red = null;
      return r9;
    };
    Mont.prototype.imul = function imul(a8, b5) {
      if (a8.isZero() || b5.isZero()) {
        a8.words[0] = 0;
        a8.length = 1;
        return a8;
      }
      var t8 = a8.imul(b5);
      var c8 = t8.maskn((this || _global$d).shift).mul((this || _global$d).minv).imaskn((this || _global$d).shift).mul((this || _global$d).m);
      var u8 = t8.isub(c8).iushrn((this || _global$d).shift);
      var res = u8;
      if (u8.cmp((this || _global$d).m) >= 0) {
        res = u8.isub((this || _global$d).m);
      } else if (u8.cmpn(0) < 0) {
        res = u8.iadd((this || _global$d).m);
      }
      return res._forceRed(this || _global$d);
    };
    Mont.prototype.mul = function mul(a8, b5) {
      if (a8.isZero() || b5.isZero())
        return new BN(0)._forceRed(this || _global$d);
      var t8 = a8.mul(b5);
      var c8 = t8.maskn((this || _global$d).shift).mul((this || _global$d).minv).imaskn((this || _global$d).shift).mul((this || _global$d).m);
      var u8 = t8.isub(c8).iushrn((this || _global$d).shift);
      var res = u8;
      if (u8.cmp((this || _global$d).m) >= 0) {
        res = u8.isub((this || _global$d).m);
      } else if (u8.cmpn(0) < 0) {
        res = u8.iadd((this || _global$d).m);
      }
      return res._forceRed(this || _global$d);
    };
    Mont.prototype.invm = function invm(a8) {
      var res = this.imod(a8._invmp((this || _global$d).m).mul((this || _global$d).r2));
      return res._forceRed(this || _global$d);
    };
  })(module$6, exports$13);
  return module$6.exports;
}
function dew$11$1() {
  if (_dewExec$11$1)
    return module$5.exports;
  _dewExec$11$1 = true;
  (function(module3, exports11) {
    function assert2(val, msg) {
      if (!val)
        throw new Error(msg || "Assertion failed");
    }
    function inherits4(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function() {
      };
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }
    function BN(number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }
      (this || _global$c).negative = 0;
      (this || _global$c).words = null;
      (this || _global$c).length = 0;
      (this || _global$c).red = null;
      if (number !== null) {
        if (base === "le" || base === "be") {
          endian = base;
          base = 10;
        }
        this._init(number || 0, base || 10, endian || "be");
      }
    }
    if (typeof module3 === "object") {
      module3.exports = BN;
    } else {
      exports11.BN = BN;
    }
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer3;
    try {
      if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
        Buffer3 = window.Buffer;
      } else {
        Buffer3 = e$1$1.Buffer;
      }
    } catch (e11) {
    }
    BN.isBN = function isBN(num) {
      if (num instanceof BN) {
        return true;
      }
      return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
      if (left.cmp(right) > 0)
        return left;
      return right;
    };
    BN.min = function min(left, right) {
      if (left.cmp(right) < 0)
        return left;
      return right;
    };
    BN.prototype._init = function init2(number, base, endian) {
      if (typeof number === "number") {
        return this._initNumber(number, base, endian);
      }
      if (typeof number === "object") {
        return this._initArray(number, base, endian);
      }
      if (base === "hex") {
        base = 16;
      }
      assert2(base === (base | 0) && base >= 2 && base <= 36);
      number = number.toString().replace(/\s+/g, "");
      var start = 0;
      if (number[0] === "-") {
        start++;
        (this || _global$c).negative = 1;
      }
      if (start < number.length) {
        if (base === 16) {
          this._parseHex(number, start, endian);
        } else {
          this._parseBase(number, base, start);
          if (endian === "le") {
            this._initArray(this.toArray(), base, endian);
          }
        }
      }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
      if (number < 0) {
        (this || _global$c).negative = 1;
        number = -number;
      }
      if (number < 67108864) {
        (this || _global$c).words = [number & 67108863];
        (this || _global$c).length = 1;
      } else if (number < 4503599627370496) {
        (this || _global$c).words = [number & 67108863, number / 67108864 & 67108863];
        (this || _global$c).length = 2;
      } else {
        assert2(number < 9007199254740992);
        (this || _global$c).words = [number & 67108863, number / 67108864 & 67108863, 1];
        (this || _global$c).length = 3;
      }
      if (endian !== "le")
        return;
      this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
      assert2(typeof number.length === "number");
      if (number.length <= 0) {
        (this || _global$c).words = [0];
        (this || _global$c).length = 1;
        return this || _global$c;
      }
      (this || _global$c).length = Math.ceil(number.length / 3);
      (this || _global$c).words = new Array((this || _global$c).length);
      for (var i8 = 0; i8 < (this || _global$c).length; i8++) {
        (this || _global$c).words[i8] = 0;
      }
      var j4, w4;
      var off2 = 0;
      if (endian === "be") {
        for (i8 = number.length - 1, j4 = 0; i8 >= 0; i8 -= 3) {
          w4 = number[i8] | number[i8 - 1] << 8 | number[i8 - 2] << 16;
          (this || _global$c).words[j4] |= w4 << off2 & 67108863;
          (this || _global$c).words[j4 + 1] = w4 >>> 26 - off2 & 67108863;
          off2 += 24;
          if (off2 >= 26) {
            off2 -= 26;
            j4++;
          }
        }
      } else if (endian === "le") {
        for (i8 = 0, j4 = 0; i8 < number.length; i8 += 3) {
          w4 = number[i8] | number[i8 + 1] << 8 | number[i8 + 2] << 16;
          (this || _global$c).words[j4] |= w4 << off2 & 67108863;
          (this || _global$c).words[j4 + 1] = w4 >>> 26 - off2 & 67108863;
          off2 += 24;
          if (off2 >= 26) {
            off2 -= 26;
            j4++;
          }
        }
      }
      return this.strip();
    };
    function parseHex4Bits(string, index) {
      var c8 = string.charCodeAt(index);
      if (c8 >= 65 && c8 <= 70) {
        return c8 - 55;
      } else if (c8 >= 97 && c8 <= 102) {
        return c8 - 87;
      } else {
        return c8 - 48 & 15;
      }
    }
    function parseHexByte(string, lowerBound, index) {
      var r9 = parseHex4Bits(string, index);
      if (index - 1 >= lowerBound) {
        r9 |= parseHex4Bits(string, index - 1) << 4;
      }
      return r9;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
      (this || _global$c).length = Math.ceil((number.length - start) / 6);
      (this || _global$c).words = new Array((this || _global$c).length);
      for (var i8 = 0; i8 < (this || _global$c).length; i8++) {
        (this || _global$c).words[i8] = 0;
      }
      var off2 = 0;
      var j4 = 0;
      var w4;
      if (endian === "be") {
        for (i8 = number.length - 1; i8 >= start; i8 -= 2) {
          w4 = parseHexByte(number, start, i8) << off2;
          (this || _global$c).words[j4] |= w4 & 67108863;
          if (off2 >= 18) {
            off2 -= 18;
            j4 += 1;
            (this || _global$c).words[j4] |= w4 >>> 26;
          } else {
            off2 += 8;
          }
        }
      } else {
        var parseLength = number.length - start;
        for (i8 = parseLength % 2 === 0 ? start + 1 : start; i8 < number.length; i8 += 2) {
          w4 = parseHexByte(number, start, i8) << off2;
          (this || _global$c).words[j4] |= w4 & 67108863;
          if (off2 >= 18) {
            off2 -= 18;
            j4 += 1;
            (this || _global$c).words[j4] |= w4 >>> 26;
          } else {
            off2 += 8;
          }
        }
      }
      this.strip();
    };
    function parseBase(str, start, end, mul) {
      var r9 = 0;
      var len = Math.min(str.length, end);
      for (var i8 = start; i8 < len; i8++) {
        var c8 = str.charCodeAt(i8) - 48;
        r9 *= mul;
        if (c8 >= 49) {
          r9 += c8 - 49 + 10;
        } else if (c8 >= 17) {
          r9 += c8 - 17 + 10;
        } else {
          r9 += c8;
        }
      }
      return r9;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
      (this || _global$c).words = [0];
      (this || _global$c).length = 1;
      for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
        limbLen++;
      }
      limbLen--;
      limbPow = limbPow / base | 0;
      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;
      var word = 0;
      for (var i8 = start; i8 < end; i8 += limbLen) {
        word = parseBase(number, i8, i8 + limbLen, base);
        this.imuln(limbPow);
        if ((this || _global$c).words[0] + word < 67108864) {
          (this || _global$c).words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i8, number.length, base);
        for (i8 = 0; i8 < mod; i8++) {
          pow *= base;
        }
        this.imuln(pow);
        if ((this || _global$c).words[0] + word < 67108864) {
          (this || _global$c).words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
      this.strip();
    };
    BN.prototype.copy = function copy(dest) {
      dest.words = new Array((this || _global$c).length);
      for (var i8 = 0; i8 < (this || _global$c).length; i8++) {
        dest.words[i8] = (this || _global$c).words[i8];
      }
      dest.length = (this || _global$c).length;
      dest.negative = (this || _global$c).negative;
      dest.red = (this || _global$c).red;
    };
    BN.prototype.clone = function clone() {
      var r9 = new BN(null);
      this.copy(r9);
      return r9;
    };
    BN.prototype._expand = function _expand(size) {
      while ((this || _global$c).length < size) {
        (this || _global$c).words[(this || _global$c).length++] = 0;
      }
      return this || _global$c;
    };
    BN.prototype.strip = function strip() {
      while ((this || _global$c).length > 1 && (this || _global$c).words[(this || _global$c).length - 1] === 0) {
        (this || _global$c).length--;
      }
      return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
      if ((this || _global$c).length === 1 && (this || _global$c).words[0] === 0) {
        (this || _global$c).negative = 0;
      }
      return this || _global$c;
    };
    BN.prototype.inspect = function inspect3() {
      return ((this || _global$c).red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    var zeros = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"];
    var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
    var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
    BN.prototype.toString = function toString3(base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;
      var out;
      if (base === 16 || base === "hex") {
        out = "";
        var off2 = 0;
        var carry = 0;
        for (var i8 = 0; i8 < (this || _global$c).length; i8++) {
          var w4 = (this || _global$c).words[i8];
          var word = ((w4 << off2 | carry) & 16777215).toString(16);
          carry = w4 >>> 24 - off2 & 16777215;
          if (carry !== 0 || i8 !== (this || _global$c).length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }
          off2 += 2;
          if (off2 >= 26) {
            off2 -= 26;
            i8--;
          }
        }
        if (carry !== 0) {
          out = carry.toString(16) + out;
        }
        while (out.length % padding !== 0) {
          out = "0" + out;
        }
        if ((this || _global$c).negative !== 0) {
          out = "-" + out;
        }
        return out;
      }
      if (base === (base | 0) && base >= 2 && base <= 36) {
        var groupSize = groupSizes[base];
        var groupBase = groupBases[base];
        out = "";
        var c8 = this.clone();
        c8.negative = 0;
        while (!c8.isZero()) {
          var r9 = c8.modn(groupBase).toString(base);
          c8 = c8.idivn(groupBase);
          if (!c8.isZero()) {
            out = zeros[groupSize - r9.length] + r9 + out;
          } else {
            out = r9 + out;
          }
        }
        if (this.isZero()) {
          out = "0" + out;
        }
        while (out.length % padding !== 0) {
          out = "0" + out;
        }
        if ((this || _global$c).negative !== 0) {
          out = "-" + out;
        }
        return out;
      }
      assert2(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
      var ret = (this || _global$c).words[0];
      if ((this || _global$c).length === 2) {
        ret += (this || _global$c).words[1] * 67108864;
      } else if ((this || _global$c).length === 3 && (this || _global$c).words[2] === 1) {
        ret += 4503599627370496 + (this || _global$c).words[1] * 67108864;
      } else if ((this || _global$c).length > 2) {
        assert2(false, "Number can only safely store up to 53 bits");
      }
      return (this || _global$c).negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON2() {
      return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
      assert2(typeof Buffer3 !== "undefined");
      return this.toArrayLike(Buffer3, endian, length);
    };
    BN.prototype.toArray = function toArray2(endian, length) {
      return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert2(byteLength <= reqLength, "byte array longer than desired length");
      assert2(reqLength > 0, "Requested array length <= 0");
      this.strip();
      var littleEndian = endian === "le";
      var res = new ArrayType(reqLength);
      var b5, i8;
      var q3 = this.clone();
      if (!littleEndian) {
        for (i8 = 0; i8 < reqLength - byteLength; i8++) {
          res[i8] = 0;
        }
        for (i8 = 0; !q3.isZero(); i8++) {
          b5 = q3.andln(255);
          q3.iushrn(8);
          res[reqLength - i8 - 1] = b5;
        }
      } else {
        for (i8 = 0; !q3.isZero(); i8++) {
          b5 = q3.andln(255);
          q3.iushrn(8);
          res[i8] = b5;
        }
        for (; i8 < reqLength; i8++) {
          res[i8] = 0;
        }
      }
      return res;
    };
    if (Math.clz32) {
      BN.prototype._countBits = function _countBits(w4) {
        return 32 - Math.clz32(w4);
      };
    } else {
      BN.prototype._countBits = function _countBits(w4) {
        var t8 = w4;
        var r9 = 0;
        if (t8 >= 4096) {
          r9 += 13;
          t8 >>>= 13;
        }
        if (t8 >= 64) {
          r9 += 7;
          t8 >>>= 7;
        }
        if (t8 >= 8) {
          r9 += 4;
          t8 >>>= 4;
        }
        if (t8 >= 2) {
          r9 += 2;
          t8 >>>= 2;
        }
        return r9 + t8;
      };
    }
    BN.prototype._zeroBits = function _zeroBits(w4) {
      if (w4 === 0)
        return 26;
      var t8 = w4;
      var r9 = 0;
      if ((t8 & 8191) === 0) {
        r9 += 13;
        t8 >>>= 13;
      }
      if ((t8 & 127) === 0) {
        r9 += 7;
        t8 >>>= 7;
      }
      if ((t8 & 15) === 0) {
        r9 += 4;
        t8 >>>= 4;
      }
      if ((t8 & 3) === 0) {
        r9 += 2;
        t8 >>>= 2;
      }
      if ((t8 & 1) === 0) {
        r9++;
      }
      return r9;
    };
    BN.prototype.bitLength = function bitLength() {
      var w4 = (this || _global$c).words[(this || _global$c).length - 1];
      var hi = this._countBits(w4);
      return ((this || _global$c).length - 1) * 26 + hi;
    };
    function toBitArray(num) {
      var w4 = new Array(num.bitLength());
      for (var bit = 0; bit < w4.length; bit++) {
        var off2 = bit / 26 | 0;
        var wbit = bit % 26;
        w4[bit] = (num.words[off2] & 1 << wbit) >>> wbit;
      }
      return w4;
    }
    BN.prototype.zeroBits = function zeroBits() {
      if (this.isZero())
        return 0;
      var r9 = 0;
      for (var i8 = 0; i8 < (this || _global$c).length; i8++) {
        var b5 = this._zeroBits((this || _global$c).words[i8]);
        r9 += b5;
        if (b5 !== 26)
          break;
      }
      return r9;
    };
    BN.prototype.byteLength = function byteLength() {
      return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
      if ((this || _global$c).negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }
      return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }
      return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
      return (this || _global$c).negative !== 0;
    };
    BN.prototype.neg = function neg() {
      return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
      if (!this.isZero()) {
        (this || _global$c).negative ^= 1;
      }
      return this || _global$c;
    };
    BN.prototype.iuor = function iuor(num) {
      while ((this || _global$c).length < num.length) {
        (this || _global$c).words[(this || _global$c).length++] = 0;
      }
      for (var i8 = 0; i8 < num.length; i8++) {
        (this || _global$c).words[i8] = (this || _global$c).words[i8] | num.words[i8];
      }
      return this.strip();
    };
    BN.prototype.ior = function ior(num) {
      assert2(((this || _global$c).negative | num.negative) === 0);
      return this.iuor(num);
    };
    BN.prototype.or = function or(num) {
      if ((this || _global$c).length > num.length)
        return this.clone().ior(num);
      return num.clone().ior(this || _global$c);
    };
    BN.prototype.uor = function uor(num) {
      if ((this || _global$c).length > num.length)
        return this.clone().iuor(num);
      return num.clone().iuor(this || _global$c);
    };
    BN.prototype.iuand = function iuand(num) {
      var b5;
      if ((this || _global$c).length > num.length) {
        b5 = num;
      } else {
        b5 = this || _global$c;
      }
      for (var i8 = 0; i8 < b5.length; i8++) {
        (this || _global$c).words[i8] = (this || _global$c).words[i8] & num.words[i8];
      }
      (this || _global$c).length = b5.length;
      return this.strip();
    };
    BN.prototype.iand = function iand(num) {
      assert2(((this || _global$c).negative | num.negative) === 0);
      return this.iuand(num);
    };
    BN.prototype.and = function and(num) {
      if ((this || _global$c).length > num.length)
        return this.clone().iand(num);
      return num.clone().iand(this || _global$c);
    };
    BN.prototype.uand = function uand(num) {
      if ((this || _global$c).length > num.length)
        return this.clone().iuand(num);
      return num.clone().iuand(this || _global$c);
    };
    BN.prototype.iuxor = function iuxor(num) {
      var a8;
      var b5;
      if ((this || _global$c).length > num.length) {
        a8 = this || _global$c;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$c;
      }
      for (var i8 = 0; i8 < b5.length; i8++) {
        (this || _global$c).words[i8] = a8.words[i8] ^ b5.words[i8];
      }
      if ((this || _global$c) !== a8) {
        for (; i8 < a8.length; i8++) {
          (this || _global$c).words[i8] = a8.words[i8];
        }
      }
      (this || _global$c).length = a8.length;
      return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
      assert2(((this || _global$c).negative | num.negative) === 0);
      return this.iuxor(num);
    };
    BN.prototype.xor = function xor(num) {
      if ((this || _global$c).length > num.length)
        return this.clone().ixor(num);
      return num.clone().ixor(this || _global$c);
    };
    BN.prototype.uxor = function uxor(num) {
      if ((this || _global$c).length > num.length)
        return this.clone().iuxor(num);
      return num.clone().iuxor(this || _global$c);
    };
    BN.prototype.inotn = function inotn(width) {
      assert2(typeof width === "number" && width >= 0);
      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;
      this._expand(bytesNeeded);
      if (bitsLeft > 0) {
        bytesNeeded--;
      }
      for (var i8 = 0; i8 < bytesNeeded; i8++) {
        (this || _global$c).words[i8] = ~(this || _global$c).words[i8] & 67108863;
      }
      if (bitsLeft > 0) {
        (this || _global$c).words[i8] = ~(this || _global$c).words[i8] & 67108863 >> 26 - bitsLeft;
      }
      return this.strip();
    };
    BN.prototype.notn = function notn(width) {
      return this.clone().inotn(width);
    };
    BN.prototype.setn = function setn(bit, val) {
      assert2(typeof bit === "number" && bit >= 0);
      var off2 = bit / 26 | 0;
      var wbit = bit % 26;
      this._expand(off2 + 1);
      if (val) {
        (this || _global$c).words[off2] = (this || _global$c).words[off2] | 1 << wbit;
      } else {
        (this || _global$c).words[off2] = (this || _global$c).words[off2] & ~(1 << wbit);
      }
      return this.strip();
    };
    BN.prototype.iadd = function iadd(num) {
      var r9;
      if ((this || _global$c).negative !== 0 && num.negative === 0) {
        (this || _global$c).negative = 0;
        r9 = this.isub(num);
        (this || _global$c).negative ^= 1;
        return this._normSign();
      } else if ((this || _global$c).negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r9 = this.isub(num);
        num.negative = 1;
        return r9._normSign();
      }
      var a8, b5;
      if ((this || _global$c).length > num.length) {
        a8 = this || _global$c;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$c;
      }
      var carry = 0;
      for (var i8 = 0; i8 < b5.length; i8++) {
        r9 = (a8.words[i8] | 0) + (b5.words[i8] | 0) + carry;
        (this || _global$c).words[i8] = r9 & 67108863;
        carry = r9 >>> 26;
      }
      for (; carry !== 0 && i8 < a8.length; i8++) {
        r9 = (a8.words[i8] | 0) + carry;
        (this || _global$c).words[i8] = r9 & 67108863;
        carry = r9 >>> 26;
      }
      (this || _global$c).length = a8.length;
      if (carry !== 0) {
        (this || _global$c).words[(this || _global$c).length] = carry;
        (this || _global$c).length++;
      } else if (a8 !== (this || _global$c)) {
        for (; i8 < a8.length; i8++) {
          (this || _global$c).words[i8] = a8.words[i8];
        }
      }
      return this || _global$c;
    };
    BN.prototype.add = function add(num) {
      var res;
      if (num.negative !== 0 && (this || _global$c).negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && (this || _global$c).negative !== 0) {
        (this || _global$c).negative = 0;
        res = num.sub(this || _global$c);
        (this || _global$c).negative = 1;
        return res;
      }
      if ((this || _global$c).length > num.length)
        return this.clone().iadd(num);
      return num.clone().iadd(this || _global$c);
    };
    BN.prototype.isub = function isub(num) {
      if (num.negative !== 0) {
        num.negative = 0;
        var r9 = this.iadd(num);
        num.negative = 1;
        return r9._normSign();
      } else if ((this || _global$c).negative !== 0) {
        (this || _global$c).negative = 0;
        this.iadd(num);
        (this || _global$c).negative = 1;
        return this._normSign();
      }
      var cmp = this.cmp(num);
      if (cmp === 0) {
        (this || _global$c).negative = 0;
        (this || _global$c).length = 1;
        (this || _global$c).words[0] = 0;
        return this || _global$c;
      }
      var a8, b5;
      if (cmp > 0) {
        a8 = this || _global$c;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$c;
      }
      var carry = 0;
      for (var i8 = 0; i8 < b5.length; i8++) {
        r9 = (a8.words[i8] | 0) - (b5.words[i8] | 0) + carry;
        carry = r9 >> 26;
        (this || _global$c).words[i8] = r9 & 67108863;
      }
      for (; carry !== 0 && i8 < a8.length; i8++) {
        r9 = (a8.words[i8] | 0) + carry;
        carry = r9 >> 26;
        (this || _global$c).words[i8] = r9 & 67108863;
      }
      if (carry === 0 && i8 < a8.length && a8 !== (this || _global$c)) {
        for (; i8 < a8.length; i8++) {
          (this || _global$c).words[i8] = a8.words[i8];
        }
      }
      (this || _global$c).length = Math.max((this || _global$c).length, i8);
      if (a8 !== (this || _global$c)) {
        (this || _global$c).negative = 1;
      }
      return this.strip();
    };
    BN.prototype.sub = function sub(num) {
      return this.clone().isub(num);
    };
    function smallMulTo(self2, num, out) {
      out.negative = num.negative ^ self2.negative;
      var len = self2.length + num.length | 0;
      out.length = len;
      len = len - 1 | 0;
      var a8 = self2.words[0] | 0;
      var b5 = num.words[0] | 0;
      var r9 = a8 * b5;
      var lo = r9 & 67108863;
      var carry = r9 / 67108864 | 0;
      out.words[0] = lo;
      for (var k4 = 1; k4 < len; k4++) {
        var ncarry = carry >>> 26;
        var rword = carry & 67108863;
        var maxJ = Math.min(k4, num.length - 1);
        for (var j4 = Math.max(0, k4 - self2.length + 1); j4 <= maxJ; j4++) {
          var i8 = k4 - j4 | 0;
          a8 = self2.words[i8] | 0;
          b5 = num.words[j4] | 0;
          r9 = a8 * b5 + rword;
          ncarry += r9 / 67108864 | 0;
          rword = r9 & 67108863;
        }
        out.words[k4] = rword | 0;
        carry = ncarry | 0;
      }
      if (carry !== 0) {
        out.words[k4] = carry | 0;
      } else {
        out.length--;
      }
      return out.strip();
    }
    var comb10MulTo = function comb10MulTo2(self2, num, out) {
      var a8 = self2.words;
      var b5 = num.words;
      var o9 = out.words;
      var c8 = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a8[0] | 0;
      var al0 = a0 & 8191;
      var ah0 = a0 >>> 13;
      var a1 = a8[1] | 0;
      var al1 = a1 & 8191;
      var ah1 = a1 >>> 13;
      var a22 = a8[2] | 0;
      var al2 = a22 & 8191;
      var ah2 = a22 >>> 13;
      var a32 = a8[3] | 0;
      var al3 = a32 & 8191;
      var ah3 = a32 >>> 13;
      var a42 = a8[4] | 0;
      var al4 = a42 & 8191;
      var ah4 = a42 >>> 13;
      var a52 = a8[5] | 0;
      var al5 = a52 & 8191;
      var ah5 = a52 >>> 13;
      var a62 = a8[6] | 0;
      var al6 = a62 & 8191;
      var ah6 = a62 >>> 13;
      var a72 = a8[7] | 0;
      var al7 = a72 & 8191;
      var ah7 = a72 >>> 13;
      var a82 = a8[8] | 0;
      var al8 = a82 & 8191;
      var ah8 = a82 >>> 13;
      var a9 = a8[9] | 0;
      var al9 = a9 & 8191;
      var ah9 = a9 >>> 13;
      var b0 = b5[0] | 0;
      var bl0 = b0 & 8191;
      var bh0 = b0 >>> 13;
      var b1 = b5[1] | 0;
      var bl1 = b1 & 8191;
      var bh1 = b1 >>> 13;
      var b22 = b5[2] | 0;
      var bl2 = b22 & 8191;
      var bh2 = b22 >>> 13;
      var b32 = b5[3] | 0;
      var bl3 = b32 & 8191;
      var bh3 = b32 >>> 13;
      var b42 = b5[4] | 0;
      var bl4 = b42 & 8191;
      var bh4 = b42 >>> 13;
      var b52 = b5[5] | 0;
      var bl5 = b52 & 8191;
      var bh5 = b52 >>> 13;
      var b6 = b5[6] | 0;
      var bl6 = b6 & 8191;
      var bh6 = b6 >>> 13;
      var b7 = b5[7] | 0;
      var bl7 = b7 & 8191;
      var bh7 = b7 >>> 13;
      var b8 = b5[8] | 0;
      var bl8 = b8 & 8191;
      var bh8 = b8 >>> 13;
      var b9 = b5[9] | 0;
      var bl9 = b9 & 8191;
      var bh9 = b9 >>> 13;
      out.negative = self2.negative ^ num.negative;
      out.length = 19;
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = mid + Math.imul(ah0, bl0) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
      w0 &= 67108863;
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = mid + Math.imul(ah1, bl0) | 0;
      hi = Math.imul(ah1, bh0);
      lo = lo + Math.imul(al0, bl1) | 0;
      mid = mid + Math.imul(al0, bh1) | 0;
      mid = mid + Math.imul(ah0, bl1) | 0;
      hi = hi + Math.imul(ah0, bh1) | 0;
      var w1 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
      w1 &= 67108863;
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = mid + Math.imul(ah2, bl0) | 0;
      hi = Math.imul(ah2, bh0);
      lo = lo + Math.imul(al1, bl1) | 0;
      mid = mid + Math.imul(al1, bh1) | 0;
      mid = mid + Math.imul(ah1, bl1) | 0;
      hi = hi + Math.imul(ah1, bh1) | 0;
      lo = lo + Math.imul(al0, bl2) | 0;
      mid = mid + Math.imul(al0, bh2) | 0;
      mid = mid + Math.imul(ah0, bl2) | 0;
      hi = hi + Math.imul(ah0, bh2) | 0;
      var w22 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w22 >>> 26) | 0;
      w22 &= 67108863;
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = mid + Math.imul(ah3, bl0) | 0;
      hi = Math.imul(ah3, bh0);
      lo = lo + Math.imul(al2, bl1) | 0;
      mid = mid + Math.imul(al2, bh1) | 0;
      mid = mid + Math.imul(ah2, bl1) | 0;
      hi = hi + Math.imul(ah2, bh1) | 0;
      lo = lo + Math.imul(al1, bl2) | 0;
      mid = mid + Math.imul(al1, bh2) | 0;
      mid = mid + Math.imul(ah1, bl2) | 0;
      hi = hi + Math.imul(ah1, bh2) | 0;
      lo = lo + Math.imul(al0, bl3) | 0;
      mid = mid + Math.imul(al0, bh3) | 0;
      mid = mid + Math.imul(ah0, bl3) | 0;
      hi = hi + Math.imul(ah0, bh3) | 0;
      var w32 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w32 >>> 26) | 0;
      w32 &= 67108863;
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = mid + Math.imul(ah4, bl0) | 0;
      hi = Math.imul(ah4, bh0);
      lo = lo + Math.imul(al3, bl1) | 0;
      mid = mid + Math.imul(al3, bh1) | 0;
      mid = mid + Math.imul(ah3, bl1) | 0;
      hi = hi + Math.imul(ah3, bh1) | 0;
      lo = lo + Math.imul(al2, bl2) | 0;
      mid = mid + Math.imul(al2, bh2) | 0;
      mid = mid + Math.imul(ah2, bl2) | 0;
      hi = hi + Math.imul(ah2, bh2) | 0;
      lo = lo + Math.imul(al1, bl3) | 0;
      mid = mid + Math.imul(al1, bh3) | 0;
      mid = mid + Math.imul(ah1, bl3) | 0;
      hi = hi + Math.imul(ah1, bh3) | 0;
      lo = lo + Math.imul(al0, bl4) | 0;
      mid = mid + Math.imul(al0, bh4) | 0;
      mid = mid + Math.imul(ah0, bl4) | 0;
      hi = hi + Math.imul(ah0, bh4) | 0;
      var w4 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
      w4 &= 67108863;
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = mid + Math.imul(ah5, bl0) | 0;
      hi = Math.imul(ah5, bh0);
      lo = lo + Math.imul(al4, bl1) | 0;
      mid = mid + Math.imul(al4, bh1) | 0;
      mid = mid + Math.imul(ah4, bl1) | 0;
      hi = hi + Math.imul(ah4, bh1) | 0;
      lo = lo + Math.imul(al3, bl2) | 0;
      mid = mid + Math.imul(al3, bh2) | 0;
      mid = mid + Math.imul(ah3, bl2) | 0;
      hi = hi + Math.imul(ah3, bh2) | 0;
      lo = lo + Math.imul(al2, bl3) | 0;
      mid = mid + Math.imul(al2, bh3) | 0;
      mid = mid + Math.imul(ah2, bl3) | 0;
      hi = hi + Math.imul(ah2, bh3) | 0;
      lo = lo + Math.imul(al1, bl4) | 0;
      mid = mid + Math.imul(al1, bh4) | 0;
      mid = mid + Math.imul(ah1, bl4) | 0;
      hi = hi + Math.imul(ah1, bh4) | 0;
      lo = lo + Math.imul(al0, bl5) | 0;
      mid = mid + Math.imul(al0, bh5) | 0;
      mid = mid + Math.imul(ah0, bl5) | 0;
      hi = hi + Math.imul(ah0, bh5) | 0;
      var w5 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
      w5 &= 67108863;
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = mid + Math.imul(ah6, bl0) | 0;
      hi = Math.imul(ah6, bh0);
      lo = lo + Math.imul(al5, bl1) | 0;
      mid = mid + Math.imul(al5, bh1) | 0;
      mid = mid + Math.imul(ah5, bl1) | 0;
      hi = hi + Math.imul(ah5, bh1) | 0;
      lo = lo + Math.imul(al4, bl2) | 0;
      mid = mid + Math.imul(al4, bh2) | 0;
      mid = mid + Math.imul(ah4, bl2) | 0;
      hi = hi + Math.imul(ah4, bh2) | 0;
      lo = lo + Math.imul(al3, bl3) | 0;
      mid = mid + Math.imul(al3, bh3) | 0;
      mid = mid + Math.imul(ah3, bl3) | 0;
      hi = hi + Math.imul(ah3, bh3) | 0;
      lo = lo + Math.imul(al2, bl4) | 0;
      mid = mid + Math.imul(al2, bh4) | 0;
      mid = mid + Math.imul(ah2, bl4) | 0;
      hi = hi + Math.imul(ah2, bh4) | 0;
      lo = lo + Math.imul(al1, bl5) | 0;
      mid = mid + Math.imul(al1, bh5) | 0;
      mid = mid + Math.imul(ah1, bl5) | 0;
      hi = hi + Math.imul(ah1, bh5) | 0;
      lo = lo + Math.imul(al0, bl6) | 0;
      mid = mid + Math.imul(al0, bh6) | 0;
      mid = mid + Math.imul(ah0, bl6) | 0;
      hi = hi + Math.imul(ah0, bh6) | 0;
      var w6 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
      w6 &= 67108863;
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = mid + Math.imul(ah7, bl0) | 0;
      hi = Math.imul(ah7, bh0);
      lo = lo + Math.imul(al6, bl1) | 0;
      mid = mid + Math.imul(al6, bh1) | 0;
      mid = mid + Math.imul(ah6, bl1) | 0;
      hi = hi + Math.imul(ah6, bh1) | 0;
      lo = lo + Math.imul(al5, bl2) | 0;
      mid = mid + Math.imul(al5, bh2) | 0;
      mid = mid + Math.imul(ah5, bl2) | 0;
      hi = hi + Math.imul(ah5, bh2) | 0;
      lo = lo + Math.imul(al4, bl3) | 0;
      mid = mid + Math.imul(al4, bh3) | 0;
      mid = mid + Math.imul(ah4, bl3) | 0;
      hi = hi + Math.imul(ah4, bh3) | 0;
      lo = lo + Math.imul(al3, bl4) | 0;
      mid = mid + Math.imul(al3, bh4) | 0;
      mid = mid + Math.imul(ah3, bl4) | 0;
      hi = hi + Math.imul(ah3, bh4) | 0;
      lo = lo + Math.imul(al2, bl5) | 0;
      mid = mid + Math.imul(al2, bh5) | 0;
      mid = mid + Math.imul(ah2, bl5) | 0;
      hi = hi + Math.imul(ah2, bh5) | 0;
      lo = lo + Math.imul(al1, bl6) | 0;
      mid = mid + Math.imul(al1, bh6) | 0;
      mid = mid + Math.imul(ah1, bl6) | 0;
      hi = hi + Math.imul(ah1, bh6) | 0;
      lo = lo + Math.imul(al0, bl7) | 0;
      mid = mid + Math.imul(al0, bh7) | 0;
      mid = mid + Math.imul(ah0, bl7) | 0;
      hi = hi + Math.imul(ah0, bh7) | 0;
      var w7 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
      w7 &= 67108863;
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = mid + Math.imul(ah8, bl0) | 0;
      hi = Math.imul(ah8, bh0);
      lo = lo + Math.imul(al7, bl1) | 0;
      mid = mid + Math.imul(al7, bh1) | 0;
      mid = mid + Math.imul(ah7, bl1) | 0;
      hi = hi + Math.imul(ah7, bh1) | 0;
      lo = lo + Math.imul(al6, bl2) | 0;
      mid = mid + Math.imul(al6, bh2) | 0;
      mid = mid + Math.imul(ah6, bl2) | 0;
      hi = hi + Math.imul(ah6, bh2) | 0;
      lo = lo + Math.imul(al5, bl3) | 0;
      mid = mid + Math.imul(al5, bh3) | 0;
      mid = mid + Math.imul(ah5, bl3) | 0;
      hi = hi + Math.imul(ah5, bh3) | 0;
      lo = lo + Math.imul(al4, bl4) | 0;
      mid = mid + Math.imul(al4, bh4) | 0;
      mid = mid + Math.imul(ah4, bl4) | 0;
      hi = hi + Math.imul(ah4, bh4) | 0;
      lo = lo + Math.imul(al3, bl5) | 0;
      mid = mid + Math.imul(al3, bh5) | 0;
      mid = mid + Math.imul(ah3, bl5) | 0;
      hi = hi + Math.imul(ah3, bh5) | 0;
      lo = lo + Math.imul(al2, bl6) | 0;
      mid = mid + Math.imul(al2, bh6) | 0;
      mid = mid + Math.imul(ah2, bl6) | 0;
      hi = hi + Math.imul(ah2, bh6) | 0;
      lo = lo + Math.imul(al1, bl7) | 0;
      mid = mid + Math.imul(al1, bh7) | 0;
      mid = mid + Math.imul(ah1, bl7) | 0;
      hi = hi + Math.imul(ah1, bh7) | 0;
      lo = lo + Math.imul(al0, bl8) | 0;
      mid = mid + Math.imul(al0, bh8) | 0;
      mid = mid + Math.imul(ah0, bl8) | 0;
      hi = hi + Math.imul(ah0, bh8) | 0;
      var w8 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
      w8 &= 67108863;
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = mid + Math.imul(ah9, bl0) | 0;
      hi = Math.imul(ah9, bh0);
      lo = lo + Math.imul(al8, bl1) | 0;
      mid = mid + Math.imul(al8, bh1) | 0;
      mid = mid + Math.imul(ah8, bl1) | 0;
      hi = hi + Math.imul(ah8, bh1) | 0;
      lo = lo + Math.imul(al7, bl2) | 0;
      mid = mid + Math.imul(al7, bh2) | 0;
      mid = mid + Math.imul(ah7, bl2) | 0;
      hi = hi + Math.imul(ah7, bh2) | 0;
      lo = lo + Math.imul(al6, bl3) | 0;
      mid = mid + Math.imul(al6, bh3) | 0;
      mid = mid + Math.imul(ah6, bl3) | 0;
      hi = hi + Math.imul(ah6, bh3) | 0;
      lo = lo + Math.imul(al5, bl4) | 0;
      mid = mid + Math.imul(al5, bh4) | 0;
      mid = mid + Math.imul(ah5, bl4) | 0;
      hi = hi + Math.imul(ah5, bh4) | 0;
      lo = lo + Math.imul(al4, bl5) | 0;
      mid = mid + Math.imul(al4, bh5) | 0;
      mid = mid + Math.imul(ah4, bl5) | 0;
      hi = hi + Math.imul(ah4, bh5) | 0;
      lo = lo + Math.imul(al3, bl6) | 0;
      mid = mid + Math.imul(al3, bh6) | 0;
      mid = mid + Math.imul(ah3, bl6) | 0;
      hi = hi + Math.imul(ah3, bh6) | 0;
      lo = lo + Math.imul(al2, bl7) | 0;
      mid = mid + Math.imul(al2, bh7) | 0;
      mid = mid + Math.imul(ah2, bl7) | 0;
      hi = hi + Math.imul(ah2, bh7) | 0;
      lo = lo + Math.imul(al1, bl8) | 0;
      mid = mid + Math.imul(al1, bh8) | 0;
      mid = mid + Math.imul(ah1, bl8) | 0;
      hi = hi + Math.imul(ah1, bh8) | 0;
      lo = lo + Math.imul(al0, bl9) | 0;
      mid = mid + Math.imul(al0, bh9) | 0;
      mid = mid + Math.imul(ah0, bl9) | 0;
      hi = hi + Math.imul(ah0, bh9) | 0;
      var w9 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
      w9 &= 67108863;
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = mid + Math.imul(ah9, bl1) | 0;
      hi = Math.imul(ah9, bh1);
      lo = lo + Math.imul(al8, bl2) | 0;
      mid = mid + Math.imul(al8, bh2) | 0;
      mid = mid + Math.imul(ah8, bl2) | 0;
      hi = hi + Math.imul(ah8, bh2) | 0;
      lo = lo + Math.imul(al7, bl3) | 0;
      mid = mid + Math.imul(al7, bh3) | 0;
      mid = mid + Math.imul(ah7, bl3) | 0;
      hi = hi + Math.imul(ah7, bh3) | 0;
      lo = lo + Math.imul(al6, bl4) | 0;
      mid = mid + Math.imul(al6, bh4) | 0;
      mid = mid + Math.imul(ah6, bl4) | 0;
      hi = hi + Math.imul(ah6, bh4) | 0;
      lo = lo + Math.imul(al5, bl5) | 0;
      mid = mid + Math.imul(al5, bh5) | 0;
      mid = mid + Math.imul(ah5, bl5) | 0;
      hi = hi + Math.imul(ah5, bh5) | 0;
      lo = lo + Math.imul(al4, bl6) | 0;
      mid = mid + Math.imul(al4, bh6) | 0;
      mid = mid + Math.imul(ah4, bl6) | 0;
      hi = hi + Math.imul(ah4, bh6) | 0;
      lo = lo + Math.imul(al3, bl7) | 0;
      mid = mid + Math.imul(al3, bh7) | 0;
      mid = mid + Math.imul(ah3, bl7) | 0;
      hi = hi + Math.imul(ah3, bh7) | 0;
      lo = lo + Math.imul(al2, bl8) | 0;
      mid = mid + Math.imul(al2, bh8) | 0;
      mid = mid + Math.imul(ah2, bl8) | 0;
      hi = hi + Math.imul(ah2, bh8) | 0;
      lo = lo + Math.imul(al1, bl9) | 0;
      mid = mid + Math.imul(al1, bh9) | 0;
      mid = mid + Math.imul(ah1, bl9) | 0;
      hi = hi + Math.imul(ah1, bh9) | 0;
      var w10 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
      w10 &= 67108863;
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = mid + Math.imul(ah9, bl2) | 0;
      hi = Math.imul(ah9, bh2);
      lo = lo + Math.imul(al8, bl3) | 0;
      mid = mid + Math.imul(al8, bh3) | 0;
      mid = mid + Math.imul(ah8, bl3) | 0;
      hi = hi + Math.imul(ah8, bh3) | 0;
      lo = lo + Math.imul(al7, bl4) | 0;
      mid = mid + Math.imul(al7, bh4) | 0;
      mid = mid + Math.imul(ah7, bl4) | 0;
      hi = hi + Math.imul(ah7, bh4) | 0;
      lo = lo + Math.imul(al6, bl5) | 0;
      mid = mid + Math.imul(al6, bh5) | 0;
      mid = mid + Math.imul(ah6, bl5) | 0;
      hi = hi + Math.imul(ah6, bh5) | 0;
      lo = lo + Math.imul(al5, bl6) | 0;
      mid = mid + Math.imul(al5, bh6) | 0;
      mid = mid + Math.imul(ah5, bl6) | 0;
      hi = hi + Math.imul(ah5, bh6) | 0;
      lo = lo + Math.imul(al4, bl7) | 0;
      mid = mid + Math.imul(al4, bh7) | 0;
      mid = mid + Math.imul(ah4, bl7) | 0;
      hi = hi + Math.imul(ah4, bh7) | 0;
      lo = lo + Math.imul(al3, bl8) | 0;
      mid = mid + Math.imul(al3, bh8) | 0;
      mid = mid + Math.imul(ah3, bl8) | 0;
      hi = hi + Math.imul(ah3, bh8) | 0;
      lo = lo + Math.imul(al2, bl9) | 0;
      mid = mid + Math.imul(al2, bh9) | 0;
      mid = mid + Math.imul(ah2, bl9) | 0;
      hi = hi + Math.imul(ah2, bh9) | 0;
      var w11 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
      w11 &= 67108863;
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = mid + Math.imul(ah9, bl3) | 0;
      hi = Math.imul(ah9, bh3);
      lo = lo + Math.imul(al8, bl4) | 0;
      mid = mid + Math.imul(al8, bh4) | 0;
      mid = mid + Math.imul(ah8, bl4) | 0;
      hi = hi + Math.imul(ah8, bh4) | 0;
      lo = lo + Math.imul(al7, bl5) | 0;
      mid = mid + Math.imul(al7, bh5) | 0;
      mid = mid + Math.imul(ah7, bl5) | 0;
      hi = hi + Math.imul(ah7, bh5) | 0;
      lo = lo + Math.imul(al6, bl6) | 0;
      mid = mid + Math.imul(al6, bh6) | 0;
      mid = mid + Math.imul(ah6, bl6) | 0;
      hi = hi + Math.imul(ah6, bh6) | 0;
      lo = lo + Math.imul(al5, bl7) | 0;
      mid = mid + Math.imul(al5, bh7) | 0;
      mid = mid + Math.imul(ah5, bl7) | 0;
      hi = hi + Math.imul(ah5, bh7) | 0;
      lo = lo + Math.imul(al4, bl8) | 0;
      mid = mid + Math.imul(al4, bh8) | 0;
      mid = mid + Math.imul(ah4, bl8) | 0;
      hi = hi + Math.imul(ah4, bh8) | 0;
      lo = lo + Math.imul(al3, bl9) | 0;
      mid = mid + Math.imul(al3, bh9) | 0;
      mid = mid + Math.imul(ah3, bl9) | 0;
      hi = hi + Math.imul(ah3, bh9) | 0;
      var w12 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
      w12 &= 67108863;
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = mid + Math.imul(ah9, bl4) | 0;
      hi = Math.imul(ah9, bh4);
      lo = lo + Math.imul(al8, bl5) | 0;
      mid = mid + Math.imul(al8, bh5) | 0;
      mid = mid + Math.imul(ah8, bl5) | 0;
      hi = hi + Math.imul(ah8, bh5) | 0;
      lo = lo + Math.imul(al7, bl6) | 0;
      mid = mid + Math.imul(al7, bh6) | 0;
      mid = mid + Math.imul(ah7, bl6) | 0;
      hi = hi + Math.imul(ah7, bh6) | 0;
      lo = lo + Math.imul(al6, bl7) | 0;
      mid = mid + Math.imul(al6, bh7) | 0;
      mid = mid + Math.imul(ah6, bl7) | 0;
      hi = hi + Math.imul(ah6, bh7) | 0;
      lo = lo + Math.imul(al5, bl8) | 0;
      mid = mid + Math.imul(al5, bh8) | 0;
      mid = mid + Math.imul(ah5, bl8) | 0;
      hi = hi + Math.imul(ah5, bh8) | 0;
      lo = lo + Math.imul(al4, bl9) | 0;
      mid = mid + Math.imul(al4, bh9) | 0;
      mid = mid + Math.imul(ah4, bl9) | 0;
      hi = hi + Math.imul(ah4, bh9) | 0;
      var w13 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
      w13 &= 67108863;
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = mid + Math.imul(ah9, bl5) | 0;
      hi = Math.imul(ah9, bh5);
      lo = lo + Math.imul(al8, bl6) | 0;
      mid = mid + Math.imul(al8, bh6) | 0;
      mid = mid + Math.imul(ah8, bl6) | 0;
      hi = hi + Math.imul(ah8, bh6) | 0;
      lo = lo + Math.imul(al7, bl7) | 0;
      mid = mid + Math.imul(al7, bh7) | 0;
      mid = mid + Math.imul(ah7, bl7) | 0;
      hi = hi + Math.imul(ah7, bh7) | 0;
      lo = lo + Math.imul(al6, bl8) | 0;
      mid = mid + Math.imul(al6, bh8) | 0;
      mid = mid + Math.imul(ah6, bl8) | 0;
      hi = hi + Math.imul(ah6, bh8) | 0;
      lo = lo + Math.imul(al5, bl9) | 0;
      mid = mid + Math.imul(al5, bh9) | 0;
      mid = mid + Math.imul(ah5, bl9) | 0;
      hi = hi + Math.imul(ah5, bh9) | 0;
      var w14 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
      w14 &= 67108863;
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = mid + Math.imul(ah9, bl6) | 0;
      hi = Math.imul(ah9, bh6);
      lo = lo + Math.imul(al8, bl7) | 0;
      mid = mid + Math.imul(al8, bh7) | 0;
      mid = mid + Math.imul(ah8, bl7) | 0;
      hi = hi + Math.imul(ah8, bh7) | 0;
      lo = lo + Math.imul(al7, bl8) | 0;
      mid = mid + Math.imul(al7, bh8) | 0;
      mid = mid + Math.imul(ah7, bl8) | 0;
      hi = hi + Math.imul(ah7, bh8) | 0;
      lo = lo + Math.imul(al6, bl9) | 0;
      mid = mid + Math.imul(al6, bh9) | 0;
      mid = mid + Math.imul(ah6, bl9) | 0;
      hi = hi + Math.imul(ah6, bh9) | 0;
      var w15 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
      w15 &= 67108863;
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = mid + Math.imul(ah9, bl7) | 0;
      hi = Math.imul(ah9, bh7);
      lo = lo + Math.imul(al8, bl8) | 0;
      mid = mid + Math.imul(al8, bh8) | 0;
      mid = mid + Math.imul(ah8, bl8) | 0;
      hi = hi + Math.imul(ah8, bh8) | 0;
      lo = lo + Math.imul(al7, bl9) | 0;
      mid = mid + Math.imul(al7, bh9) | 0;
      mid = mid + Math.imul(ah7, bl9) | 0;
      hi = hi + Math.imul(ah7, bh9) | 0;
      var w16 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
      w16 &= 67108863;
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = mid + Math.imul(ah9, bl8) | 0;
      hi = Math.imul(ah9, bh8);
      lo = lo + Math.imul(al8, bl9) | 0;
      mid = mid + Math.imul(al8, bh9) | 0;
      mid = mid + Math.imul(ah8, bl9) | 0;
      hi = hi + Math.imul(ah8, bh9) | 0;
      var w17 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
      w17 &= 67108863;
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = mid + Math.imul(ah9, bl9) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
      w18 &= 67108863;
      o9[0] = w0;
      o9[1] = w1;
      o9[2] = w22;
      o9[3] = w32;
      o9[4] = w4;
      o9[5] = w5;
      o9[6] = w6;
      o9[7] = w7;
      o9[8] = w8;
      o9[9] = w9;
      o9[10] = w10;
      o9[11] = w11;
      o9[12] = w12;
      o9[13] = w13;
      o9[14] = w14;
      o9[15] = w15;
      o9[16] = w16;
      o9[17] = w17;
      o9[18] = w18;
      if (c8 !== 0) {
        o9[19] = c8;
        out.length++;
      }
      return out;
    };
    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }
    function bigMulTo(self2, num, out) {
      out.negative = num.negative ^ self2.negative;
      out.length = self2.length + num.length;
      var carry = 0;
      var hncarry = 0;
      for (var k4 = 0; k4 < out.length - 1; k4++) {
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 67108863;
        var maxJ = Math.min(k4, num.length - 1);
        for (var j4 = Math.max(0, k4 - self2.length + 1); j4 <= maxJ; j4++) {
          var i8 = k4 - j4;
          var a8 = self2.words[i8] | 0;
          var b5 = num.words[j4] | 0;
          var r9 = a8 * b5;
          var lo = r9 & 67108863;
          ncarry = ncarry + (r9 / 67108864 | 0) | 0;
          lo = lo + rword | 0;
          rword = lo & 67108863;
          ncarry = ncarry + (lo >>> 26) | 0;
          hncarry += ncarry >>> 26;
          ncarry &= 67108863;
        }
        out.words[k4] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k4] = carry;
      } else {
        out.length--;
      }
      return out.strip();
    }
    function jumboMulTo(self2, num, out) {
      var fftm = new FFTM();
      return fftm.mulp(self2, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
      var res;
      var len = (this || _global$c).length + num.length;
      if ((this || _global$c).length === 10 && num.length === 10) {
        res = comb10MulTo(this || _global$c, num, out);
      } else if (len < 63) {
        res = smallMulTo(this || _global$c, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this || _global$c, num, out);
      } else {
        res = jumboMulTo(this || _global$c, num, out);
      }
      return res;
    };
    function FFTM(x4, y6) {
      (this || _global$c).x = x4;
      (this || _global$c).y = y6;
    }
    FFTM.prototype.makeRBT = function makeRBT(N4) {
      var t8 = new Array(N4);
      var l8 = BN.prototype._countBits(N4) - 1;
      for (var i8 = 0; i8 < N4; i8++) {
        t8[i8] = this.revBin(i8, l8, N4);
      }
      return t8;
    };
    FFTM.prototype.revBin = function revBin(x4, l8, N4) {
      if (x4 === 0 || x4 === N4 - 1)
        return x4;
      var rb = 0;
      for (var i8 = 0; i8 < l8; i8++) {
        rb |= (x4 & 1) << l8 - i8 - 1;
        x4 >>= 1;
      }
      return rb;
    };
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N4) {
      for (var i8 = 0; i8 < N4; i8++) {
        rtws[i8] = rws[rbt[i8]];
        itws[i8] = iws[rbt[i8]];
      }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N4, rbt) {
      this.permute(rbt, rws, iws, rtws, itws, N4);
      for (var s7 = 1; s7 < N4; s7 <<= 1) {
        var l8 = s7 << 1;
        var rtwdf = Math.cos(2 * Math.PI / l8);
        var itwdf = Math.sin(2 * Math.PI / l8);
        for (var p8 = 0; p8 < N4; p8 += l8) {
          var rtwdf_ = rtwdf;
          var itwdf_ = itwdf;
          for (var j4 = 0; j4 < s7; j4++) {
            var re3 = rtws[p8 + j4];
            var ie2 = itws[p8 + j4];
            var ro = rtws[p8 + j4 + s7];
            var io = itws[p8 + j4 + s7];
            var rx = rtwdf_ * ro - itwdf_ * io;
            io = rtwdf_ * io + itwdf_ * ro;
            ro = rx;
            rtws[p8 + j4] = re3 + ro;
            itws[p8 + j4] = ie2 + io;
            rtws[p8 + j4 + s7] = re3 - ro;
            itws[p8 + j4 + s7] = ie2 - io;
            if (j4 !== l8) {
              rx = rtwdf * rtwdf_ - itwdf * itwdf_;
              itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
              rtwdf_ = rx;
            }
          }
        }
      }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n9, m6) {
      var N4 = Math.max(m6, n9) | 1;
      var odd = N4 & 1;
      var i8 = 0;
      for (N4 = N4 / 2 | 0; N4; N4 = N4 >>> 1) {
        i8++;
      }
      return 1 << i8 + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N4) {
      if (N4 <= 1)
        return;
      for (var i8 = 0; i8 < N4 / 2; i8++) {
        var t8 = rws[i8];
        rws[i8] = rws[N4 - i8 - 1];
        rws[N4 - i8 - 1] = t8;
        t8 = iws[i8];
        iws[i8] = -iws[N4 - i8 - 1];
        iws[N4 - i8 - 1] = -t8;
      }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N4) {
      var carry = 0;
      for (var i8 = 0; i8 < N4 / 2; i8++) {
        var w4 = Math.round(ws[2 * i8 + 1] / N4) * 8192 + Math.round(ws[2 * i8] / N4) + carry;
        ws[i8] = w4 & 67108863;
        if (w4 < 67108864) {
          carry = 0;
        } else {
          carry = w4 / 67108864 | 0;
        }
      }
      return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N4) {
      var carry = 0;
      for (var i8 = 0; i8 < len; i8++) {
        carry = carry + (ws[i8] | 0);
        rws[2 * i8] = carry & 8191;
        carry = carry >>> 13;
        rws[2 * i8 + 1] = carry & 8191;
        carry = carry >>> 13;
      }
      for (i8 = 2 * len; i8 < N4; ++i8) {
        rws[i8] = 0;
      }
      assert2(carry === 0);
      assert2((carry & ~8191) === 0);
    };
    FFTM.prototype.stub = function stub(N4) {
      var ph = new Array(N4);
      for (var i8 = 0; i8 < N4; i8++) {
        ph[i8] = 0;
      }
      return ph;
    };
    FFTM.prototype.mulp = function mulp(x4, y6, out) {
      var N4 = 2 * this.guessLen13b(x4.length, y6.length);
      var rbt = this.makeRBT(N4);
      var _4 = this.stub(N4);
      var rws = new Array(N4);
      var rwst = new Array(N4);
      var iwst = new Array(N4);
      var nrws = new Array(N4);
      var nrwst = new Array(N4);
      var niwst = new Array(N4);
      var rmws = out.words;
      rmws.length = N4;
      this.convert13b(x4.words, x4.length, rws, N4);
      this.convert13b(y6.words, y6.length, nrws, N4);
      this.transform(rws, _4, rwst, iwst, N4, rbt);
      this.transform(nrws, _4, nrwst, niwst, N4, rbt);
      for (var i8 = 0; i8 < N4; i8++) {
        var rx = rwst[i8] * nrwst[i8] - iwst[i8] * niwst[i8];
        iwst[i8] = rwst[i8] * niwst[i8] + iwst[i8] * nrwst[i8];
        rwst[i8] = rx;
      }
      this.conjugate(rwst, iwst, N4);
      this.transform(rwst, iwst, rmws, _4, N4, rbt);
      this.conjugate(rmws, _4, N4);
      this.normalize13b(rmws, N4);
      out.negative = x4.negative ^ y6.negative;
      out.length = x4.length + y6.length;
      return out.strip();
    };
    BN.prototype.mul = function mul(num) {
      var out = new BN(null);
      out.words = new Array((this || _global$c).length + num.length);
      return this.mulTo(num, out);
    };
    BN.prototype.mulf = function mulf(num) {
      var out = new BN(null);
      out.words = new Array((this || _global$c).length + num.length);
      return jumboMulTo(this || _global$c, num, out);
    };
    BN.prototype.imul = function imul(num) {
      return this.clone().mulTo(num, this || _global$c);
    };
    BN.prototype.imuln = function imuln(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      var carry = 0;
      for (var i8 = 0; i8 < (this || _global$c).length; i8++) {
        var w4 = ((this || _global$c).words[i8] | 0) * num;
        var lo = (w4 & 67108863) + (carry & 67108863);
        carry >>= 26;
        carry += w4 / 67108864 | 0;
        carry += lo >>> 26;
        (this || _global$c).words[i8] = lo & 67108863;
      }
      if (carry !== 0) {
        (this || _global$c).words[i8] = carry;
        (this || _global$c).length++;
      }
      return this || _global$c;
    };
    BN.prototype.muln = function muln(num) {
      return this.clone().imuln(num);
    };
    BN.prototype.sqr = function sqr() {
      return this.mul(this || _global$c);
    };
    BN.prototype.isqr = function isqr() {
      return this.imul(this.clone());
    };
    BN.prototype.pow = function pow(num) {
      var w4 = toBitArray(num);
      if (w4.length === 0)
        return new BN(1);
      var res = this || _global$c;
      for (var i8 = 0; i8 < w4.length; i8++, res = res.sqr()) {
        if (w4[i8] !== 0)
          break;
      }
      if (++i8 < w4.length) {
        for (var q3 = res.sqr(); i8 < w4.length; i8++, q3 = q3.sqr()) {
          if (w4[i8] === 0)
            continue;
          res = res.mul(q3);
        }
      }
      return res;
    };
    BN.prototype.iushln = function iushln(bits) {
      assert2(typeof bits === "number" && bits >= 0);
      var r9 = bits % 26;
      var s7 = (bits - r9) / 26;
      var carryMask = 67108863 >>> 26 - r9 << 26 - r9;
      var i8;
      if (r9 !== 0) {
        var carry = 0;
        for (i8 = 0; i8 < (this || _global$c).length; i8++) {
          var newCarry = (this || _global$c).words[i8] & carryMask;
          var c8 = ((this || _global$c).words[i8] | 0) - newCarry << r9;
          (this || _global$c).words[i8] = c8 | carry;
          carry = newCarry >>> 26 - r9;
        }
        if (carry) {
          (this || _global$c).words[i8] = carry;
          (this || _global$c).length++;
        }
      }
      if (s7 !== 0) {
        for (i8 = (this || _global$c).length - 1; i8 >= 0; i8--) {
          (this || _global$c).words[i8 + s7] = (this || _global$c).words[i8];
        }
        for (i8 = 0; i8 < s7; i8++) {
          (this || _global$c).words[i8] = 0;
        }
        (this || _global$c).length += s7;
      }
      return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
      assert2((this || _global$c).negative === 0);
      return this.iushln(bits);
    };
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
      assert2(typeof bits === "number" && bits >= 0);
      var h8;
      if (hint) {
        h8 = (hint - hint % 26) / 26;
      } else {
        h8 = 0;
      }
      var r9 = bits % 26;
      var s7 = Math.min((bits - r9) / 26, (this || _global$c).length);
      var mask = 67108863 ^ 67108863 >>> r9 << r9;
      var maskedWords = extended;
      h8 -= s7;
      h8 = Math.max(0, h8);
      if (maskedWords) {
        for (var i8 = 0; i8 < s7; i8++) {
          maskedWords.words[i8] = (this || _global$c).words[i8];
        }
        maskedWords.length = s7;
      }
      if (s7 === 0)
        ;
      else if ((this || _global$c).length > s7) {
        (this || _global$c).length -= s7;
        for (i8 = 0; i8 < (this || _global$c).length; i8++) {
          (this || _global$c).words[i8] = (this || _global$c).words[i8 + s7];
        }
      } else {
        (this || _global$c).words[0] = 0;
        (this || _global$c).length = 1;
      }
      var carry = 0;
      for (i8 = (this || _global$c).length - 1; i8 >= 0 && (carry !== 0 || i8 >= h8); i8--) {
        var word = (this || _global$c).words[i8] | 0;
        (this || _global$c).words[i8] = carry << 26 - r9 | word >>> r9;
        carry = word & mask;
      }
      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }
      if ((this || _global$c).length === 0) {
        (this || _global$c).words[0] = 0;
        (this || _global$c).length = 1;
      }
      return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
      assert2((this || _global$c).negative === 0);
      return this.iushrn(bits, hint, extended);
    };
    BN.prototype.shln = function shln(bits) {
      return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
      return this.clone().iushln(bits);
    };
    BN.prototype.shrn = function shrn(bits) {
      return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
      return this.clone().iushrn(bits);
    };
    BN.prototype.testn = function testn(bit) {
      assert2(typeof bit === "number" && bit >= 0);
      var r9 = bit % 26;
      var s7 = (bit - r9) / 26;
      var q3 = 1 << r9;
      if ((this || _global$c).length <= s7)
        return false;
      var w4 = (this || _global$c).words[s7];
      return !!(w4 & q3);
    };
    BN.prototype.imaskn = function imaskn(bits) {
      assert2(typeof bits === "number" && bits >= 0);
      var r9 = bits % 26;
      var s7 = (bits - r9) / 26;
      assert2((this || _global$c).negative === 0, "imaskn works only with positive numbers");
      if ((this || _global$c).length <= s7) {
        return this || _global$c;
      }
      if (r9 !== 0) {
        s7++;
      }
      (this || _global$c).length = Math.min(s7, (this || _global$c).length);
      if (r9 !== 0) {
        var mask = 67108863 ^ 67108863 >>> r9 << r9;
        (this || _global$c).words[(this || _global$c).length - 1] &= mask;
      }
      return this.strip();
    };
    BN.prototype.maskn = function maskn(bits) {
      return this.clone().imaskn(bits);
    };
    BN.prototype.iaddn = function iaddn(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      if (num < 0)
        return this.isubn(-num);
      if ((this || _global$c).negative !== 0) {
        if ((this || _global$c).length === 1 && ((this || _global$c).words[0] | 0) < num) {
          (this || _global$c).words[0] = num - ((this || _global$c).words[0] | 0);
          (this || _global$c).negative = 0;
          return this || _global$c;
        }
        (this || _global$c).negative = 0;
        this.isubn(num);
        (this || _global$c).negative = 1;
        return this || _global$c;
      }
      return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
      (this || _global$c).words[0] += num;
      for (var i8 = 0; i8 < (this || _global$c).length && (this || _global$c).words[i8] >= 67108864; i8++) {
        (this || _global$c).words[i8] -= 67108864;
        if (i8 === (this || _global$c).length - 1) {
          (this || _global$c).words[i8 + 1] = 1;
        } else {
          (this || _global$c).words[i8 + 1]++;
        }
      }
      (this || _global$c).length = Math.max((this || _global$c).length, i8 + 1);
      return this || _global$c;
    };
    BN.prototype.isubn = function isubn(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      if (num < 0)
        return this.iaddn(-num);
      if ((this || _global$c).negative !== 0) {
        (this || _global$c).negative = 0;
        this.iaddn(num);
        (this || _global$c).negative = 1;
        return this || _global$c;
      }
      (this || _global$c).words[0] -= num;
      if ((this || _global$c).length === 1 && (this || _global$c).words[0] < 0) {
        (this || _global$c).words[0] = -(this || _global$c).words[0];
        (this || _global$c).negative = 1;
      } else {
        for (var i8 = 0; i8 < (this || _global$c).length && (this || _global$c).words[i8] < 0; i8++) {
          (this || _global$c).words[i8] += 67108864;
          (this || _global$c).words[i8 + 1] -= 1;
        }
      }
      return this.strip();
    };
    BN.prototype.addn = function addn(num) {
      return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
      return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
      (this || _global$c).negative = 0;
      return this || _global$c;
    };
    BN.prototype.abs = function abs() {
      return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
      var len = num.length + shift;
      var i8;
      this._expand(len);
      var w4;
      var carry = 0;
      for (i8 = 0; i8 < num.length; i8++) {
        w4 = ((this || _global$c).words[i8 + shift] | 0) + carry;
        var right = (num.words[i8] | 0) * mul;
        w4 -= right & 67108863;
        carry = (w4 >> 26) - (right / 67108864 | 0);
        (this || _global$c).words[i8 + shift] = w4 & 67108863;
      }
      for (; i8 < (this || _global$c).length - shift; i8++) {
        w4 = ((this || _global$c).words[i8 + shift] | 0) + carry;
        carry = w4 >> 26;
        (this || _global$c).words[i8 + shift] = w4 & 67108863;
      }
      if (carry === 0)
        return this.strip();
      assert2(carry === -1);
      carry = 0;
      for (i8 = 0; i8 < (this || _global$c).length; i8++) {
        w4 = -((this || _global$c).words[i8] | 0) + carry;
        carry = w4 >> 26;
        (this || _global$c).words[i8] = w4 & 67108863;
      }
      (this || _global$c).negative = 1;
      return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
      var shift = (this || _global$c).length - num.length;
      var a8 = this.clone();
      var b5 = num;
      var bhi = b5.words[b5.length - 1] | 0;
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b5 = b5.ushln(shift);
        a8.iushln(shift);
        bhi = b5.words[b5.length - 1] | 0;
      }
      var m6 = a8.length - b5.length;
      var q3;
      if (mode !== "mod") {
        q3 = new BN(null);
        q3.length = m6 + 1;
        q3.words = new Array(q3.length);
        for (var i8 = 0; i8 < q3.length; i8++) {
          q3.words[i8] = 0;
        }
      }
      var diff = a8.clone()._ishlnsubmul(b5, 1, m6);
      if (diff.negative === 0) {
        a8 = diff;
        if (q3) {
          q3.words[m6] = 1;
        }
      }
      for (var j4 = m6 - 1; j4 >= 0; j4--) {
        var qj = (a8.words[b5.length + j4] | 0) * 67108864 + (a8.words[b5.length + j4 - 1] | 0);
        qj = Math.min(qj / bhi | 0, 67108863);
        a8._ishlnsubmul(b5, qj, j4);
        while (a8.negative !== 0) {
          qj--;
          a8.negative = 0;
          a8._ishlnsubmul(b5, 1, j4);
          if (!a8.isZero()) {
            a8.negative ^= 1;
          }
        }
        if (q3) {
          q3.words[j4] = qj;
        }
      }
      if (q3) {
        q3.strip();
      }
      a8.strip();
      if (mode !== "div" && shift !== 0) {
        a8.iushrn(shift);
      }
      return {
        div: q3 || null,
        mod: a8
      };
    };
    BN.prototype.divmod = function divmod(num, mode, positive) {
      assert2(!num.isZero());
      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }
      var div, mod, res;
      if ((this || _global$c).negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);
        if (mode !== "mod") {
          div = res.div.neg();
        }
        if (mode !== "div") {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }
        return {
          div,
          mod
        };
      }
      if ((this || _global$c).negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);
        if (mode !== "mod") {
          div = res.div.neg();
        }
        return {
          div,
          mod: res.mod
        };
      }
      if (((this || _global$c).negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);
        if (mode !== "div") {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }
        return {
          div: res.div,
          mod
        };
      }
      if (num.length > (this || _global$c).length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this || _global$c
        };
      }
      if (num.length === 1) {
        if (mode === "div") {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }
        if (mode === "mod") {
          return {
            div: null,
            mod: new BN(this.modn(num.words[0]))
          };
        }
        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modn(num.words[0]))
        };
      }
      return this._wordDiv(num, mode);
    };
    BN.prototype.div = function div(num) {
      return this.divmod(num, "div", false).div;
    };
    BN.prototype.mod = function mod(num) {
      return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
      return this.divmod(num, "mod", true).mod;
    };
    BN.prototype.divRound = function divRound(num) {
      var dm = this.divmod(num);
      if (dm.mod.isZero())
        return dm.div;
      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
      var half = num.ushrn(1);
      var r22 = num.andln(1);
      var cmp = mod.cmp(half);
      if (cmp < 0 || r22 === 1 && cmp === 0)
        return dm.div;
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
      assert2(num <= 67108863);
      var p8 = (1 << 26) % num;
      var acc = 0;
      for (var i8 = (this || _global$c).length - 1; i8 >= 0; i8--) {
        acc = (p8 * acc + ((this || _global$c).words[i8] | 0)) % num;
      }
      return acc;
    };
    BN.prototype.idivn = function idivn(num) {
      assert2(num <= 67108863);
      var carry = 0;
      for (var i8 = (this || _global$c).length - 1; i8 >= 0; i8--) {
        var w4 = ((this || _global$c).words[i8] | 0) + carry * 67108864;
        (this || _global$c).words[i8] = w4 / num | 0;
        carry = w4 % num;
      }
      return this.strip();
    };
    BN.prototype.divn = function divn(num) {
      return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p8) {
      assert2(p8.negative === 0);
      assert2(!p8.isZero());
      var x4 = this || _global$c;
      var y6 = p8.clone();
      if (x4.negative !== 0) {
        x4 = x4.umod(p8);
      } else {
        x4 = x4.clone();
      }
      var A4 = new BN(1);
      var B4 = new BN(0);
      var C4 = new BN(0);
      var D4 = new BN(1);
      var g5 = 0;
      while (x4.isEven() && y6.isEven()) {
        x4.iushrn(1);
        y6.iushrn(1);
        ++g5;
      }
      var yp = y6.clone();
      var xp = x4.clone();
      while (!x4.isZero()) {
        for (var i8 = 0, im = 1; (x4.words[0] & im) === 0 && i8 < 26; ++i8, im <<= 1)
          ;
        if (i8 > 0) {
          x4.iushrn(i8);
          while (i8-- > 0) {
            if (A4.isOdd() || B4.isOdd()) {
              A4.iadd(yp);
              B4.isub(xp);
            }
            A4.iushrn(1);
            B4.iushrn(1);
          }
        }
        for (var j4 = 0, jm = 1; (y6.words[0] & jm) === 0 && j4 < 26; ++j4, jm <<= 1)
          ;
        if (j4 > 0) {
          y6.iushrn(j4);
          while (j4-- > 0) {
            if (C4.isOdd() || D4.isOdd()) {
              C4.iadd(yp);
              D4.isub(xp);
            }
            C4.iushrn(1);
            D4.iushrn(1);
          }
        }
        if (x4.cmp(y6) >= 0) {
          x4.isub(y6);
          A4.isub(C4);
          B4.isub(D4);
        } else {
          y6.isub(x4);
          C4.isub(A4);
          D4.isub(B4);
        }
      }
      return {
        a: C4,
        b: D4,
        gcd: y6.iushln(g5)
      };
    };
    BN.prototype._invmp = function _invmp(p8) {
      assert2(p8.negative === 0);
      assert2(!p8.isZero());
      var a8 = this || _global$c;
      var b5 = p8.clone();
      if (a8.negative !== 0) {
        a8 = a8.umod(p8);
      } else {
        a8 = a8.clone();
      }
      var x1 = new BN(1);
      var x22 = new BN(0);
      var delta = b5.clone();
      while (a8.cmpn(1) > 0 && b5.cmpn(1) > 0) {
        for (var i8 = 0, im = 1; (a8.words[0] & im) === 0 && i8 < 26; ++i8, im <<= 1)
          ;
        if (i8 > 0) {
          a8.iushrn(i8);
          while (i8-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }
            x1.iushrn(1);
          }
        }
        for (var j4 = 0, jm = 1; (b5.words[0] & jm) === 0 && j4 < 26; ++j4, jm <<= 1)
          ;
        if (j4 > 0) {
          b5.iushrn(j4);
          while (j4-- > 0) {
            if (x22.isOdd()) {
              x22.iadd(delta);
            }
            x22.iushrn(1);
          }
        }
        if (a8.cmp(b5) >= 0) {
          a8.isub(b5);
          x1.isub(x22);
        } else {
          b5.isub(a8);
          x22.isub(x1);
        }
      }
      var res;
      if (a8.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x22;
      }
      if (res.cmpn(0) < 0) {
        res.iadd(p8);
      }
      return res;
    };
    BN.prototype.gcd = function gcd(num) {
      if (this.isZero())
        return num.abs();
      if (num.isZero())
        return this.abs();
      var a8 = this.clone();
      var b5 = num.clone();
      a8.negative = 0;
      b5.negative = 0;
      for (var shift = 0; a8.isEven() && b5.isEven(); shift++) {
        a8.iushrn(1);
        b5.iushrn(1);
      }
      do {
        while (a8.isEven()) {
          a8.iushrn(1);
        }
        while (b5.isEven()) {
          b5.iushrn(1);
        }
        var r9 = a8.cmp(b5);
        if (r9 < 0) {
          var t8 = a8;
          a8 = b5;
          b5 = t8;
        } else if (r9 === 0 || b5.cmpn(1) === 0) {
          break;
        }
        a8.isub(b5);
      } while (true);
      return b5.iushln(shift);
    };
    BN.prototype.invm = function invm(num) {
      return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
      return ((this || _global$c).words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
      return ((this || _global$c).words[0] & 1) === 1;
    };
    BN.prototype.andln = function andln(num) {
      return (this || _global$c).words[0] & num;
    };
    BN.prototype.bincn = function bincn(bit) {
      assert2(typeof bit === "number");
      var r9 = bit % 26;
      var s7 = (bit - r9) / 26;
      var q3 = 1 << r9;
      if ((this || _global$c).length <= s7) {
        this._expand(s7 + 1);
        (this || _global$c).words[s7] |= q3;
        return this || _global$c;
      }
      var carry = q3;
      for (var i8 = s7; carry !== 0 && i8 < (this || _global$c).length; i8++) {
        var w4 = (this || _global$c).words[i8] | 0;
        w4 += carry;
        carry = w4 >>> 26;
        w4 &= 67108863;
        (this || _global$c).words[i8] = w4;
      }
      if (carry !== 0) {
        (this || _global$c).words[i8] = carry;
        (this || _global$c).length++;
      }
      return this || _global$c;
    };
    BN.prototype.isZero = function isZero() {
      return (this || _global$c).length === 1 && (this || _global$c).words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
      var negative = num < 0;
      if ((this || _global$c).negative !== 0 && !negative)
        return -1;
      if ((this || _global$c).negative === 0 && negative)
        return 1;
      this.strip();
      var res;
      if ((this || _global$c).length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }
        assert2(num <= 67108863, "Number is too big");
        var w4 = (this || _global$c).words[0] | 0;
        res = w4 === num ? 0 : w4 < num ? -1 : 1;
      }
      if ((this || _global$c).negative !== 0)
        return -res | 0;
      return res;
    };
    BN.prototype.cmp = function cmp(num) {
      if ((this || _global$c).negative !== 0 && num.negative === 0)
        return -1;
      if ((this || _global$c).negative === 0 && num.negative !== 0)
        return 1;
      var res = this.ucmp(num);
      if ((this || _global$c).negative !== 0)
        return -res | 0;
      return res;
    };
    BN.prototype.ucmp = function ucmp(num) {
      if ((this || _global$c).length > num.length)
        return 1;
      if ((this || _global$c).length < num.length)
        return -1;
      var res = 0;
      for (var i8 = (this || _global$c).length - 1; i8 >= 0; i8--) {
        var a8 = (this || _global$c).words[i8] | 0;
        var b5 = num.words[i8] | 0;
        if (a8 === b5)
          continue;
        if (a8 < b5) {
          res = -1;
        } else if (a8 > b5) {
          res = 1;
        }
        break;
      }
      return res;
    };
    BN.prototype.gtn = function gtn(num) {
      return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
      return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
      return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
      return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
      return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
      return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
      return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
      return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
      return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
      return this.cmp(num) === 0;
    };
    BN.red = function red(num) {
      return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
      assert2(!(this || _global$c).red, "Already a number in reduction context");
      assert2((this || _global$c).negative === 0, "red works only with positives");
      return ctx.convertTo(this || _global$c)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
      assert2((this || _global$c).red, "fromRed works only with numbers in reduction context");
      return (this || _global$c).red.convertFrom(this || _global$c);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
      (this || _global$c).red = ctx;
      return this || _global$c;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
      assert2(!(this || _global$c).red, "Already a number in reduction context");
      return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
      assert2((this || _global$c).red, "redAdd works only with red numbers");
      return (this || _global$c).red.add(this || _global$c, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
      assert2((this || _global$c).red, "redIAdd works only with red numbers");
      return (this || _global$c).red.iadd(this || _global$c, num);
    };
    BN.prototype.redSub = function redSub(num) {
      assert2((this || _global$c).red, "redSub works only with red numbers");
      return (this || _global$c).red.sub(this || _global$c, num);
    };
    BN.prototype.redISub = function redISub(num) {
      assert2((this || _global$c).red, "redISub works only with red numbers");
      return (this || _global$c).red.isub(this || _global$c, num);
    };
    BN.prototype.redShl = function redShl(num) {
      assert2((this || _global$c).red, "redShl works only with red numbers");
      return (this || _global$c).red.shl(this || _global$c, num);
    };
    BN.prototype.redMul = function redMul(num) {
      assert2((this || _global$c).red, "redMul works only with red numbers");
      (this || _global$c).red._verify2(this || _global$c, num);
      return (this || _global$c).red.mul(this || _global$c, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
      assert2((this || _global$c).red, "redMul works only with red numbers");
      (this || _global$c).red._verify2(this || _global$c, num);
      return (this || _global$c).red.imul(this || _global$c, num);
    };
    BN.prototype.redSqr = function redSqr() {
      assert2((this || _global$c).red, "redSqr works only with red numbers");
      (this || _global$c).red._verify1(this || _global$c);
      return (this || _global$c).red.sqr(this || _global$c);
    };
    BN.prototype.redISqr = function redISqr() {
      assert2((this || _global$c).red, "redISqr works only with red numbers");
      (this || _global$c).red._verify1(this || _global$c);
      return (this || _global$c).red.isqr(this || _global$c);
    };
    BN.prototype.redSqrt = function redSqrt() {
      assert2((this || _global$c).red, "redSqrt works only with red numbers");
      (this || _global$c).red._verify1(this || _global$c);
      return (this || _global$c).red.sqrt(this || _global$c);
    };
    BN.prototype.redInvm = function redInvm() {
      assert2((this || _global$c).red, "redInvm works only with red numbers");
      (this || _global$c).red._verify1(this || _global$c);
      return (this || _global$c).red.invm(this || _global$c);
    };
    BN.prototype.redNeg = function redNeg() {
      assert2((this || _global$c).red, "redNeg works only with red numbers");
      (this || _global$c).red._verify1(this || _global$c);
      return (this || _global$c).red.neg(this || _global$c);
    };
    BN.prototype.redPow = function redPow(num) {
      assert2((this || _global$c).red && !num.red, "redPow(normalNum)");
      (this || _global$c).red._verify1(this || _global$c);
      return (this || _global$c).red.pow(this || _global$c, num);
    };
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };
    function MPrime(name2, p8) {
      (this || _global$c).name = name2;
      (this || _global$c).p = new BN(p8, 16);
      (this || _global$c).n = (this || _global$c).p.bitLength();
      (this || _global$c).k = new BN(1).iushln((this || _global$c).n).isub((this || _global$c).p);
      (this || _global$c).tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil((this || _global$c).n / 13));
      return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
      var r9 = num;
      var rlen;
      do {
        this.split(r9, (this || _global$c).tmp);
        r9 = this.imulK(r9);
        r9 = r9.iadd((this || _global$c).tmp);
        rlen = r9.bitLength();
      } while (rlen > (this || _global$c).n);
      var cmp = rlen < (this || _global$c).n ? -1 : r9.ucmp((this || _global$c).p);
      if (cmp === 0) {
        r9.words[0] = 0;
        r9.length = 1;
      } else if (cmp > 0) {
        r9.isub((this || _global$c).p);
      } else {
        if (r9.strip !== void 0) {
          r9.strip();
        } else {
          r9._strip();
        }
      }
      return r9;
    };
    MPrime.prototype.split = function split(input, out) {
      input.iushrn((this || _global$c).n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
      return num.imul((this || _global$c).k);
    };
    function K256() {
      MPrime.call(this || _global$c, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits4(K256, MPrime);
    K256.prototype.split = function split(input, output) {
      var mask = 4194303;
      var outLen = Math.min(input.length, 9);
      for (var i8 = 0; i8 < outLen; i8++) {
        output.words[i8] = input.words[i8];
      }
      output.length = outLen;
      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }
      var prev = input.words[9];
      output.words[output.length++] = prev & mask;
      for (i8 = 10; i8 < input.length; i8++) {
        var next = input.words[i8] | 0;
        input.words[i8 - 10] = (next & mask) << 4 | prev >>> 22;
        prev = next;
      }
      prev >>>= 22;
      input.words[i8 - 10] = prev;
      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };
    K256.prototype.imulK = function imulK(num) {
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;
      var lo = 0;
      for (var i8 = 0; i8 < num.length; i8++) {
        var w4 = num.words[i8] | 0;
        lo += w4 * 977;
        num.words[i8] = lo & 67108863;
        lo = w4 * 64 + (lo / 67108864 | 0);
      }
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }
      return num;
    };
    function P224() {
      MPrime.call(this || _global$c, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits4(P224, MPrime);
    function P192() {
      MPrime.call(this || _global$c, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits4(P192, MPrime);
    function P25519() {
      MPrime.call(this || _global$c, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits4(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
      var carry = 0;
      for (var i8 = 0; i8 < num.length; i8++) {
        var hi = (num.words[i8] | 0) * 19 + carry;
        var lo = hi & 67108863;
        hi >>>= 26;
        num.words[i8] = lo;
        carry = hi;
      }
      if (carry !== 0) {
        num.words[num.length++] = carry;
      }
      return num;
    };
    BN._prime = function prime(name2) {
      if (primes[name2])
        return primes[name2];
      var prime2;
      if (name2 === "k256") {
        prime2 = new K256();
      } else if (name2 === "p224") {
        prime2 = new P224();
      } else if (name2 === "p192") {
        prime2 = new P192();
      } else if (name2 === "p25519") {
        prime2 = new P25519();
      } else {
        throw new Error("Unknown prime " + name2);
      }
      primes[name2] = prime2;
      return prime2;
    };
    function Red(m6) {
      if (typeof m6 === "string") {
        var prime = BN._prime(m6);
        (this || _global$c).m = prime.p;
        (this || _global$c).prime = prime;
      } else {
        assert2(m6.gtn(1), "modulus must be greater than 1");
        (this || _global$c).m = m6;
        (this || _global$c).prime = null;
      }
    }
    Red.prototype._verify1 = function _verify1(a8) {
      assert2(a8.negative === 0, "red works only with positives");
      assert2(a8.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a8, b5) {
      assert2((a8.negative | b5.negative) === 0, "red works only with positives");
      assert2(a8.red && a8.red === b5.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a8) {
      if ((this || _global$c).prime)
        return (this || _global$c).prime.ireduce(a8)._forceRed(this || _global$c);
      return a8.umod((this || _global$c).m)._forceRed(this || _global$c);
    };
    Red.prototype.neg = function neg(a8) {
      if (a8.isZero()) {
        return a8.clone();
      }
      return (this || _global$c).m.sub(a8)._forceRed(this || _global$c);
    };
    Red.prototype.add = function add(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.add(b5);
      if (res.cmp((this || _global$c).m) >= 0) {
        res.isub((this || _global$c).m);
      }
      return res._forceRed(this || _global$c);
    };
    Red.prototype.iadd = function iadd(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.iadd(b5);
      if (res.cmp((this || _global$c).m) >= 0) {
        res.isub((this || _global$c).m);
      }
      return res;
    };
    Red.prototype.sub = function sub(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.sub(b5);
      if (res.cmpn(0) < 0) {
        res.iadd((this || _global$c).m);
      }
      return res._forceRed(this || _global$c);
    };
    Red.prototype.isub = function isub(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.isub(b5);
      if (res.cmpn(0) < 0) {
        res.iadd((this || _global$c).m);
      }
      return res;
    };
    Red.prototype.shl = function shl(a8, num) {
      this._verify1(a8);
      return this.imod(a8.ushln(num));
    };
    Red.prototype.imul = function imul(a8, b5) {
      this._verify2(a8, b5);
      return this.imod(a8.imul(b5));
    };
    Red.prototype.mul = function mul(a8, b5) {
      this._verify2(a8, b5);
      return this.imod(a8.mul(b5));
    };
    Red.prototype.isqr = function isqr(a8) {
      return this.imul(a8, a8.clone());
    };
    Red.prototype.sqr = function sqr(a8) {
      return this.mul(a8, a8);
    };
    Red.prototype.sqrt = function sqrt(a8) {
      if (a8.isZero())
        return a8.clone();
      var mod3 = (this || _global$c).m.andln(3);
      assert2(mod3 % 2 === 1);
      if (mod3 === 3) {
        var pow = (this || _global$c).m.add(new BN(1)).iushrn(2);
        return this.pow(a8, pow);
      }
      var q3 = (this || _global$c).m.subn(1);
      var s7 = 0;
      while (!q3.isZero() && q3.andln(1) === 0) {
        s7++;
        q3.iushrn(1);
      }
      assert2(!q3.isZero());
      var one = new BN(1).toRed(this || _global$c);
      var nOne = one.redNeg();
      var lpow = (this || _global$c).m.subn(1).iushrn(1);
      var z5 = (this || _global$c).m.bitLength();
      z5 = new BN(2 * z5 * z5).toRed(this || _global$c);
      while (this.pow(z5, lpow).cmp(nOne) !== 0) {
        z5.redIAdd(nOne);
      }
      var c8 = this.pow(z5, q3);
      var r9 = this.pow(a8, q3.addn(1).iushrn(1));
      var t8 = this.pow(a8, q3);
      var m6 = s7;
      while (t8.cmp(one) !== 0) {
        var tmp = t8;
        for (var i8 = 0; tmp.cmp(one) !== 0; i8++) {
          tmp = tmp.redSqr();
        }
        assert2(i8 < m6);
        var b5 = this.pow(c8, new BN(1).iushln(m6 - i8 - 1));
        r9 = r9.redMul(b5);
        c8 = b5.redSqr();
        t8 = t8.redMul(c8);
        m6 = i8;
      }
      return r9;
    };
    Red.prototype.invm = function invm(a8) {
      var inv = a8._invmp((this || _global$c).m);
      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };
    Red.prototype.pow = function pow(a8, num) {
      if (num.isZero())
        return new BN(1).toRed(this || _global$c);
      if (num.cmpn(1) === 0)
        return a8.clone();
      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN(1).toRed(this || _global$c);
      wnd[1] = a8;
      for (var i8 = 2; i8 < wnd.length; i8++) {
        wnd[i8] = this.mul(wnd[i8 - 1], a8);
      }
      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;
      if (start === 0) {
        start = 26;
      }
      for (i8 = num.length - 1; i8 >= 0; i8--) {
        var word = num.words[i8];
        for (var j4 = start - 1; j4 >= 0; j4--) {
          var bit = word >> j4 & 1;
          if (res !== wnd[0]) {
            res = this.sqr(res);
          }
          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }
          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i8 !== 0 || j4 !== 0))
            continue;
          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }
        start = 26;
      }
      return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
      var r9 = num.umod((this || _global$c).m);
      return r9 === num ? r9.clone() : r9;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
      var res = num.clone();
      res.red = null;
      return res;
    };
    BN.mont = function mont(num) {
      return new Mont(num);
    };
    function Mont(m6) {
      Red.call(this || _global$c, m6);
      (this || _global$c).shift = (this || _global$c).m.bitLength();
      if ((this || _global$c).shift % 26 !== 0) {
        (this || _global$c).shift += 26 - (this || _global$c).shift % 26;
      }
      (this || _global$c).r = new BN(1).iushln((this || _global$c).shift);
      (this || _global$c).r2 = this.imod((this || _global$c).r.sqr());
      (this || _global$c).rinv = (this || _global$c).r._invmp((this || _global$c).m);
      (this || _global$c).minv = (this || _global$c).rinv.mul((this || _global$c).r).isubn(1).div((this || _global$c).m);
      (this || _global$c).minv = (this || _global$c).minv.umod((this || _global$c).r);
      (this || _global$c).minv = (this || _global$c).r.sub((this || _global$c).minv);
    }
    inherits4(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
      return this.imod(num.ushln((this || _global$c).shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
      var r9 = this.imod(num.mul((this || _global$c).rinv));
      r9.red = null;
      return r9;
    };
    Mont.prototype.imul = function imul(a8, b5) {
      if (a8.isZero() || b5.isZero()) {
        a8.words[0] = 0;
        a8.length = 1;
        return a8;
      }
      var t8 = a8.imul(b5);
      var c8 = t8.maskn((this || _global$c).shift).mul((this || _global$c).minv).imaskn((this || _global$c).shift).mul((this || _global$c).m);
      var u8 = t8.isub(c8).iushrn((this || _global$c).shift);
      var res = u8;
      if (u8.cmp((this || _global$c).m) >= 0) {
        res = u8.isub((this || _global$c).m);
      } else if (u8.cmpn(0) < 0) {
        res = u8.iadd((this || _global$c).m);
      }
      return res._forceRed(this || _global$c);
    };
    Mont.prototype.mul = function mul(a8, b5) {
      if (a8.isZero() || b5.isZero())
        return new BN(0)._forceRed(this || _global$c);
      var t8 = a8.mul(b5);
      var c8 = t8.maskn((this || _global$c).shift).mul((this || _global$c).minv).imaskn((this || _global$c).shift).mul((this || _global$c).m);
      var u8 = t8.isub(c8).iushrn((this || _global$c).shift);
      var res = u8;
      if (u8.cmp((this || _global$c).m) >= 0) {
        res = u8.isub((this || _global$c).m);
      } else if (u8.cmpn(0) < 0) {
        res = u8.iadd((this || _global$c).m);
      }
      return res._forceRed(this || _global$c);
    };
    Mont.prototype.invm = function invm(a8) {
      var res = this.imod(a8._invmp((this || _global$c).m).mul((this || _global$c).r2));
      return res._forceRed(this || _global$c);
    };
  })(module$5, exports$12$1);
  return module$5.exports;
}
function Context() {
}
function s5(t8) {
  o$13.call(this), this._block = e7.allocUnsafe(t8), this._blockSize = t8, this._blockOffset = 0, this._length = [0, 0, 0, 0], this._finalized = false;
}
function n$13() {
  r5.call(this, 64), this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878;
}
function o$22(t8, i8) {
  return t8 << i8 | t8 >>> 32 - i8;
}
function f$22(t8, i8, s7, h8, r9, _4, e11) {
  return o$22(t8 + (i8 & s7 | ~i8 & h8) + r9 + _4 | 0, e11) + i8 | 0;
}
function c5(t8, i8, s7, h8, r9, _4, e11) {
  return o$22(t8 + (i8 & h8 | s7 & ~h8) + r9 + _4 | 0, e11) + i8 | 0;
}
function a$1(t8, i8, s7, h8, r9, _4, e11) {
  return o$22(t8 + (i8 ^ s7 ^ h8) + r9 + _4 | 0, e11) + i8 | 0;
}
function l5(t8, i8, s7, h8, r9, _4, e11) {
  return o$22(t8 + (s7 ^ (i8 | ~h8)) + r9 + _4 | 0, e11) + i8 | 0;
}
function u$13() {
  r$12.call(this, 64), this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520;
}
function b3(t8, i8) {
  return t8 << i8 | t8 >>> 32 - i8;
}
function d4(t8, i8, s7, h8, _4, r9, e11, n9) {
  return b3(t8 + (i8 ^ s7 ^ h8) + r9 + e11 | 0, n9) + _4 | 0;
}
function k3(t8, i8, s7, h8, _4, r9, e11, n9) {
  return b3(t8 + (i8 & s7 | ~i8 & h8) + r9 + e11 | 0, n9) + _4 | 0;
}
function p5(t8, i8, s7, h8, _4, r9, e11, n9) {
  return b3(t8 + ((i8 | ~s7) ^ h8) + r9 + e11 | 0, n9) + _4 | 0;
}
function w3(t8, i8, s7, h8, _4, r9, e11, n9) {
  return b3(t8 + (i8 & h8 | s7 & ~h8) + r9 + e11 | 0, n9) + _4 | 0;
}
function E3(t8, i8, s7, h8, _4, r9, e11, n9) {
  return b3(t8 + (i8 ^ (s7 | ~h8)) + r9 + e11 | 0, n9) + _4 | 0;
}
function e$3(t8, i8) {
  (this || s$12)._block = h$2.alloc(t8), (this || s$12)._finalSize = i8, (this || s$12)._blockSize = t8, (this || s$12)._len = 0;
}
function u$22() {
  this.init(), (this || n$3)._w = a$3, o$4.call(this || n$3, 64, 56);
}
function c$2(t8, i8, s7) {
  return s7 ^ t8 & (i8 ^ s7);
}
function b$1(t8, i8, s7) {
  return t8 & i8 | s7 & (t8 | i8);
}
function p$1(t8) {
  return (t8 >>> 2 | t8 << 30) ^ (t8 >>> 13 | t8 << 19) ^ (t8 >>> 22 | t8 << 10);
}
function d$1(t8) {
  return (t8 >>> 6 | t8 << 26) ^ (t8 >>> 11 | t8 << 21) ^ (t8 >>> 25 | t8 << 7);
}
function k$1(t8) {
  return (t8 >>> 7 | t8 << 25) ^ (t8 >>> 18 | t8 << 14) ^ t8 >>> 3;
}
function f$5() {
  this.init(), (this || _$3)._w = o$5, n$4.call(this || _$3, 64, 56);
}
function a$4(t8) {
  return t8 << 30 | t8 >>> 2;
}
function u$3(t8, i8, h8, s7) {
  return 0 === t8 ? i8 & h8 | ~i8 & s7 : 2 === t8 ? i8 & h8 | i8 & s7 | h8 & s7 : i8 ^ h8 ^ s7;
}
function y4() {
  this.init(), (this || d$2)._w = B3, b$2.call(this || d$2, 64, 56);
}
function E$1(t8) {
  return t8 << 5 | t8 >>> 27;
}
function I$1(t8) {
  return t8 << 30 | t8 >>> 2;
}
function v4(t8, i8, h8, s7) {
  return 0 === t8 ? i8 & h8 | ~i8 & s7 : 2 === t8 ? i8 & h8 | i8 & s7 | h8 & s7 : i8 ^ h8 ^ s7;
}
function C3() {
  this.init(), (this || m4)._w = q2, x3.call(this || m4, 64, 56);
}
function J2() {
  this.init(), (this || k$2)._w = H2, D3.call(this || k$2, 128, 112);
}
function K2(t8, i8, h8) {
  return h8 ^ t8 & (i8 ^ h8);
}
function M3(t8, i8, h8) {
  return t8 & i8 | h8 & (t8 | i8);
}
function N3(t8, i8) {
  return (t8 >>> 28 | i8 << 4) ^ (i8 >>> 2 | t8 << 30) ^ (i8 >>> 7 | t8 << 25);
}
function O3(t8, i8) {
  return (t8 >>> 14 | i8 << 18) ^ (t8 >>> 18 | i8 << 14) ^ (i8 >>> 9 | t8 << 23);
}
function P3(t8, i8) {
  return (t8 >>> 1 | i8 << 31) ^ (t8 >>> 8 | i8 << 24) ^ t8 >>> 7;
}
function Q2(t8, i8) {
  return (t8 >>> 1 | i8 << 31) ^ (t8 >>> 8 | i8 << 24) ^ (t8 >>> 7 | i8 << 25);
}
function R3(t8, i8) {
  return (t8 >>> 19 | i8 << 13) ^ (i8 >>> 29 | t8 << 3) ^ t8 >>> 6;
}
function S3(t8, i8) {
  return (t8 >>> 19 | i8 << 13) ^ (i8 >>> 29 | t8 << 3) ^ (t8 >>> 6 | i8 << 26);
}
function V2(t8, i8) {
  return t8 >>> 0 < i8 >>> 0 ? 1 : 0;
}
function ht() {
  this.init(), (this || X2)._w = it, $2.call(this || X2, 128, 112);
}
function a$5(t8) {
  s$2.call(this || e$5), (this || e$5).hashMode = "string" == typeof t8, (this || e$5).hashMode ? (this || e$5)[t8] = (this || e$5)._finalOrDigest : (this || e$5).final = (this || e$5)._finalOrDigest, (this || e$5)._final && ((this || e$5).__final = (this || e$5)._final, (this || e$5)._final = null), (this || e$5)._decoder = null, (this || e$5)._encoding = null;
}
function a$6(t8) {
  s$3.call(this, "digest"), this._hash = t8;
}
function f$7(t8, a8) {
  n$7.call(this, "digest"), "string" == typeof a8 && (a8 = h$5.from(a8)), this._alg = t8, this._key = a8, a8.length > 64 ? a8 = t8(a8) : a8.length < 64 && (a8 = h$5.concat([a8, p$4], 64));
  for (var e11 = this._ipad = h$5.allocUnsafe(64), i8 = this._opad = h$5.allocUnsafe(64), r9 = 0; r9 < 64; r9++)
    e11[r9] = 54 ^ a8[r9], i8[r9] = 92 ^ a8[r9];
  this._hash = [e11];
}
function y$1(t8, a8) {
  c$4.call(this, "digest"), "string" == typeof a8 && (a8 = _$4.from(a8));
  var e11 = "sha512" === t8 || "sha384" === t8 ? 128 : 64;
  (this._alg = t8, this._key = a8, a8.length > e11) ? a8 = ("rmd160" === t8 ? new u$4() : g$1(t8)).update(a8).digest() : a8.length < e11 && (a8 = _$4.concat([a8, v$1], e11));
  for (var i8 = this._ipad = _$4.allocUnsafe(e11), r9 = this._opad = _$4.allocUnsafe(e11), s7 = 0; s7 < e11; s7++)
    i8[s7] = 54 ^ a8[s7], r9[s7] = 92 ^ a8[s7];
  this._hash = "rmd160" === t8 ? new u$4() : g$1(t8), this._hash.update(i8);
}
function s$5(r9, e11) {
  if ("string" != typeof r9 && !f$8.isBuffer(r9))
    throw new TypeError(e11 + " must be a buffer or string");
}
function T$1(r9, e11, t8) {
  var n9 = function(r10) {
    function e12(e13) {
      return y$2(r10).update(e13).digest();
    }
    return "rmd160" === r10 || "ripemd160" === r10 ? function(r11) {
      return new m$3().update(r11).digest();
    } : "md5" === r10 ? d$4 : e12;
  }(r9), o9 = "sha512" === r9 || "sha384" === r9 ? 128 : 64;
  e11.length > o9 ? e11 = n9(e11) : e11.length < o9 && (e11 = w$4.concat([e11, g$2], o9));
  for (var i8 = w$4.allocUnsafe(o9 + B$1[r9]), f9 = w$4.allocUnsafe(o9 + B$1[r9]), a8 = 0; a8 < o9; a8++)
    i8[a8] = 54 ^ e11[a8], f9[a8] = 92 ^ e11[a8];
  var s7 = w$4.allocUnsafe(o9 + t8 + 4);
  i8.copy(s7, 0, 0, o9), (this || p$5).ipad1 = s7, (this || p$5).ipad2 = i8, (this || p$5).opad = f9, (this || p$5).alg = r9, (this || p$5).blocksize = o9, (this || p$5).hash = n9, (this || p$5).size = B$1[r9];
}
function D$1(r9, e11, t8, n9, o9) {
  return x$1.importKey("raw", r9, { name: "PBKDF2" }, false, ["deriveBits"]).then(function(r10) {
    return x$1.deriveBits({ name: "PBKDF2", salt: e11, iterations: t8, hash: { name: o9 } }, r10, n9 << 3);
  }).then(function(r10) {
    return K$1.from(r10);
  });
}
function e$7(r9, e11) {
  if (!r9)
    throw new Error(e11 || "Assertion failed");
}
function u$6(t8) {
  this.options = t8, this.type = this.options.type, this.blockSize = 8, this._init(), this.buffer = new Array(this.blockSize), this.bufferOff = 0;
}
function y$3() {
  this.tmp = new Array(2), this.keys = null;
}
function v$3(t8) {
  l$6.call(this, t8);
  var e11 = new y$3();
  this._desState = e11, this.deriveKeys(e11, t8.key);
}
function S$2(t8) {
  k$4.equal(t8.length, 8, "Invalid IV length"), this.iv = new Array(8);
  for (var e11 = 0; e11 < this.iv.length; e11++)
    this.iv[e11] = t8[e11];
}
function O$1(t8, e11) {
  w$5.equal(e11.length, 24, "Invalid key length");
  var r9 = e11.slice(0, 8), i8 = e11.slice(8, 16), n9 = e11.slice(16, 24);
  this.ciphers = "encrypt" === t8 ? [I$3.create({ type: "encrypt", key: r9 }), I$3.create({ type: "decrypt", key: i8 }), I$3.create({ type: "encrypt", key: n9 })] : [I$3.create({ type: "decrypt", key: n9 }), I$3.create({ type: "encrypt", key: i8 }), I$3.create({ type: "decrypt", key: r9 })];
}
function B$2(t8) {
  E$3.call(this, t8);
  var e11 = new O$1(this.type, this.options.key);
  this._edeState = e11;
}
function p$7(e11) {
  f$a.call(this || i$13);
  var t8, r9 = e11.mode.toLowerCase(), s7 = n$9[r9];
  t8 = e11.decrypt ? "decrypt" : "encrypt";
  var d6 = e11.key;
  c$7.isBuffer(d6) || (d6 = c$7.from(d6)), "des-ede" !== r9 && "des-ede-cbc" !== r9 || (d6 = c$7.concat([d6, d6.slice(0, 8)]));
  var o9 = e11.iv;
  c$7.isBuffer(o9) || (o9 = c$7.from(o9)), (this || i$13)._des = s7.create({ key: d6, iv: o9, type: t8 });
}
function v$4(e11, c8, r9) {
  var t8 = c8.length, a8 = h$8(c8, e11._cache);
  return e11._cache = e11._cache.slice(t8), e11._prev = o$a.concat([e11._prev, r9 ? c8 : a8]), a8;
}
function s$7(e11, c8, r9) {
  var t8 = e11._cipher.encryptBlock(e11._prev)[0] ^ c8;
  return e11._prev = f$c.concat([e11._prev.slice(1), f$c.from([r9 ? c8 : t8])]), t8;
}
function _$6(e11, c8, r9) {
  for (var t8, a8, p8 = -1, n9 = 0; ++p8 < 8; )
    t8 = c8 & 1 << 7 - p8 ? 128 : 0, n9 += (128 & (a8 = e11._cipher.encryptBlock(e11._prev)[0] ^ t8)) >> p8 % 8, e11._prev = k$5(e11._prev, r9 ? t8 : a8);
  return n9;
}
function k$5(e11, c8) {
  var r9 = e11.length, t8 = -1, a8 = m$5.allocUnsafe(e11.length);
  for (e11 = m$5.concat([e11, m$5.from([c8])]); ++t8 < r9; )
    a8[t8] = e11[t8] << 1 | e11[t8 + 1] >> 7;
  return a8;
}
function E$4(e11) {
  return e11._prev = e11._cipher.encryptBlock(e11._prev), e11._prev;
}
function g$4(e11) {
  var c8 = e11._cipher.encryptBlockRaw(e11._prev);
  return S$3(e11._prev), c8;
}
function s$8(t8) {
  o$b.isBuffer(t8) || (t8 = o$b.from(t8));
  for (var e11 = t8.length / 4 | 0, i8 = new Array(e11), r9 = 0; r9 < e11; r9++)
    i8[r9] = t8.readUInt32BE(4 * r9);
  return i8;
}
function c$8(t8) {
  for (; 0 < t8.length; t8++)
    t8[0] = 0;
}
function l$9(t8, e11, i8, r9, n9) {
  for (var a8, h8, o9, s7, c8 = i8[0], l8 = i8[1], f9 = i8[2], u8 = i8[3], p8 = t8[0] ^ e11[0], _4 = t8[1] ^ e11[1], d6 = t8[2] ^ e11[2], y6 = t8[3] ^ e11[3], B4 = 4, g5 = 1; g5 < n9; g5++)
    a8 = c8[p8 >>> 24] ^ l8[_4 >>> 16 & 255] ^ f9[d6 >>> 8 & 255] ^ u8[255 & y6] ^ e11[B4++], h8 = c8[_4 >>> 24] ^ l8[d6 >>> 16 & 255] ^ f9[y6 >>> 8 & 255] ^ u8[255 & p8] ^ e11[B4++], o9 = c8[d6 >>> 24] ^ l8[y6 >>> 16 & 255] ^ f9[p8 >>> 8 & 255] ^ u8[255 & _4] ^ e11[B4++], s7 = c8[y6 >>> 24] ^ l8[p8 >>> 16 & 255] ^ f9[_4 >>> 8 & 255] ^ u8[255 & d6] ^ e11[B4++], p8 = a8, _4 = h8, d6 = o9, y6 = s7;
  return a8 = (r9[p8 >>> 24] << 24 | r9[_4 >>> 16 & 255] << 16 | r9[d6 >>> 8 & 255] << 8 | r9[255 & y6]) ^ e11[B4++], h8 = (r9[_4 >>> 24] << 24 | r9[d6 >>> 16 & 255] << 16 | r9[y6 >>> 8 & 255] << 8 | r9[255 & p8]) ^ e11[B4++], o9 = (r9[d6 >>> 24] << 24 | r9[y6 >>> 16 & 255] << 16 | r9[p8 >>> 8 & 255] << 8 | r9[255 & _4]) ^ e11[B4++], s7 = (r9[y6 >>> 24] << 24 | r9[p8 >>> 16 & 255] << 16 | r9[_4 >>> 8 & 255] << 8 | r9[255 & d6]) ^ e11[B4++], [a8 >>>= 0, h8 >>>= 0, o9 >>>= 0, s7 >>>= 0];
}
function p$9(t8) {
  (this || a$b)._key = s$8(t8), this._reset();
}
function B$4(t8) {
  var e11 = d$8.allocUnsafe(16);
  return e11.writeUInt32BE(t8[0] >>> 0, 0), e11.writeUInt32BE(t8[1] >>> 0, 4), e11.writeUInt32BE(t8[2] >>> 0, 8), e11.writeUInt32BE(t8[3] >>> 0, 12), e11;
}
function g$5(t8) {
  (this || _$7).h = t8, (this || _$7).state = d$8.alloc(16, 0), (this || _$7).cache = d$8.allocUnsafe(0);
}
function X$1(t8, e11, i8, r9) {
  w$7.call(this || v$5);
  var n9 = U$4.alloc(4, 0);
  (this || v$5)._cipher = new I$5.AES(e11);
  var a8 = (this || v$5)._cipher.encryptBlock(n9);
  (this || v$5)._ghash = new m$6(a8), i8 = function(t9, e12, i9) {
    if (12 === e12.length)
      return t9._finID = U$4.concat([e12, U$4.from([0, 0, 0, 1])]), U$4.concat([e12, U$4.from([0, 0, 0, 2])]);
    var r10 = new m$6(i9), n10 = e12.length, a9 = n10 % 16;
    r10.update(e12), a9 && (a9 = 16 - a9, r10.update(U$4.alloc(a9, 0))), r10.update(U$4.alloc(8, 0));
    var h8 = 8 * n10, o9 = U$4.alloc(8);
    o9.writeUIntBE(h8, 0, 8), r10.update(o9), t9._finID = r10.state;
    var s7 = U$4.from(t9._finID);
    return b$6(s7), s7;
  }(this || v$5, i8, a8), (this || v$5)._prev = U$4.from(i8), (this || v$5)._cache = U$4.allocUnsafe(0), (this || v$5)._secCache = U$4.allocUnsafe(0), (this || v$5)._decrypt = r9, (this || v$5)._alen = 0, (this || v$5)._len = 0, (this || v$5)._mode = t8, (this || v$5)._authTag = null, (this || v$5)._called = false;
}
function N$1(t8, e11, i8, r9) {
  M$3.call(this || T$2), (this || T$2)._cipher = new O$2.AES(e11), (this || T$2)._prev = A$4.from(i8), (this || T$2)._cache = A$4.allocUnsafe(0), (this || T$2)._secCache = A$4.allocUnsafe(0), (this || T$2)._decrypt = r9, (this || T$2)._mode = t8;
}
function g$6(t8, e11, r9) {
  d$9.call(this || c$9), (this || c$9)._cache = new v$6(), (this || c$9)._last = void 0, (this || c$9)._cipher = new y$6.AES(e11), (this || c$9)._prev = p$a.from(r9), (this || c$9)._mode = t8, (this || c$9)._autopadding = true;
}
function v$6() {
  (this || c$9).cache = p$a.allocUnsafe(0);
}
function w$8(t8, e11, r9) {
  var i8 = u$9[t8.toLowerCase()];
  if (!i8)
    throw new TypeError("invalid suite type");
  if ("string" == typeof r9 && (r9 = p$a.from(r9)), "GCM" !== i8.mode && r9.length !== i8.iv)
    throw new TypeError("invalid iv length " + r9.length);
  if ("string" == typeof e11 && (e11 = p$a.from(e11)), e11.length !== i8.key / 8)
    throw new TypeError("invalid key length " + e11.length);
  return "stream" === i8.type ? new l$a(i8.module, e11, r9, true) : "auth" === i8.type ? new f$f(i8.module, e11, r9, true) : new g$6(i8.module, e11, r9);
}
function v$7(t8, e11, r9) {
  d$a.call(this || c$a), (this || c$a)._cache = new g$7(), (this || c$a)._cipher = new m$8.AES(e11), (this || c$a)._prev = l$b.from(r9), (this || c$a)._mode = t8, (this || c$a)._autopadding = true;
}
function g$7() {
  (this || c$a).cache = l$b.allocUnsafe(0);
}
function w$9(t8, e11, r9) {
  var i8 = f$g[t8.toLowerCase()];
  if (!i8)
    throw new TypeError("invalid suite type");
  if ("string" == typeof e11 && (e11 = l$b.from(e11)), e11.length !== i8.key / 8)
    throw new TypeError("invalid key length " + e11.length);
  if ("string" == typeof r9 && (r9 = l$b.from(r9)), "GCM" !== i8.mode && r9.length !== i8.iv)
    throw new TypeError("invalid iv length " + r9.length);
  return "stream" === i8.type ? new u$a(i8.module, e11, r9) : "auth" === i8.type ? new p$b(i8.module, e11, r9) : new v$7(i8.module, e11, r9);
}
function f$h(e11, r9, i8) {
  if (e11 = e11.toLowerCase(), v$8[e11])
    return s$b.createCipheriv(e11, r9, i8);
  if (y$8[e11])
    return new n$b({ key: r9, iv: i8, mode: e11 });
  throw new TypeError("invalid suite type");
}
function c$c(e11, r9, i8) {
  if (e11 = e11.toLowerCase(), v$8[e11])
    return s$b.createDecipheriv(e11, r9, i8);
  if (y$8[e11])
    return new n$b({ key: r9, iv: i8, mode: e11, decrypt: true });
  throw new TypeError("invalid suite type");
}
function o$d(t8) {
  (this || n$d).rand = t8;
}
function d$b(r9) {
  (this || t$6).rand = r9 || new a$f.Rand();
}
function l$c() {
  if (null !== w$a)
    return w$a;
  var f9 = [];
  f9[0] = 2;
  for (var e11 = 1, c8 = 3; c8 < 1048576; c8 += 2) {
    for (var a8 = Math.ceil(Math.sqrt(c8)), b5 = 0; b5 < e11 && f9[b5] <= a8 && c8 % f9[b5] != 0; b5++)
      ;
    e11 !== b5 && f9[b5] <= a8 || (f9[e11++] = c8);
  }
  return w$a = f9, f9;
}
function _$9(f9) {
  for (var e11 = l$c(), c8 = 0; c8 < e11.length; c8++)
    if (0 === f9.modn(e11[c8]))
      return 0 === f9.cmpn(e11[c8]);
  return true;
}
function g$8(f9) {
  var e11 = r$9.mont(f9);
  return 0 === o$f.toRed(e11).redPow(f9.subn(1)).fromRed().cmpn(1);
}
function v$9(f9, e11) {
  if (f9 < 16)
    return new r$9(2 === e11 || 5 === e11 ? [140, 123] : [140, 39]);
  var c8, a8;
  for (e11 = new r$9(e11); ; ) {
    for (c8 = new r$9(d$c(Math.ceil(f9 / 8))); c8.bitLength() > f9; )
      c8.ishrn(1);
    if (c8.isEven() && c8.iadd(i$5), c8.testn(1) || c8.iadd(o$f), e11.cmp(o$f)) {
      if (!e11.cmp(p$e))
        for (; c8.mod(s$c).cmp(m$9); )
          c8.iadd(h$b);
    } else
      for (; c8.mod(t$7).cmp(u$b); )
        c8.iadd(h$b);
    if (_$9(a8 = c8.shrn(1)) && _$9(c8) && g$8(a8) && g$8(c8) && n$f.test(a8) && n$f.test(c8))
      return c8;
  }
}
function E$6(f9, e11) {
  return e11 = e11 || "utf8", K$2.isBuffer(f9) || (f9 = new K$2(f9, e11)), (this || B$5)._pub = new R$1(f9), this || B$5;
}
function L$1(f9, e11) {
  return e11 = e11 || "utf8", K$2.isBuffer(f9) || (f9 = new K$2(f9, e11)), (this || B$5)._priv = new R$1(f9), this || B$5;
}
function k$7(f9, e11, c8) {
  this.setGenerator(e11), (this || B$5).__prime = new R$1(f9), (this || B$5)._prime = R$1.mont((this || B$5).__prime), (this || B$5)._primeLen = f9.length, (this || B$5)._pub = void 0, (this || B$5)._priv = void 0, (this || B$5)._primeCode = void 0, c8 ? ((this || B$5).setPublicKey = E$6, (this || B$5).setPrivateKey = L$1) : (this || B$5)._primeCode = 8;
}
function A$5(f9, e11) {
  var c8 = new K$2(f9.toArray());
  return e11 ? c8.toString(e11) : c8;
}
function t$8(e11, o9) {
  var r9 = function(e12) {
    var o10 = i$6(e12);
    return { blinder: o10.toRed(n$g.mont(e12.modulus)).redPow(new n$g(e12.publicExponent)).fromRed(), unblinder: o10.invm(e12.modulus) };
  }(o9), m6 = o9.modulus.byteLength(), d6 = (n$g.mont(o9.modulus), new n$g(e11).mul(r9.blinder).umod(o9.modulus)), t8 = d6.toRed(n$g.mont(o9.prime1)), l8 = d6.toRed(n$g.mont(o9.prime2)), f9 = o9.coefficient, p8 = o9.prime1, b5 = o9.prime2, s7 = t8.redPow(o9.exponent1), a8 = l8.redPow(o9.exponent2);
  s7 = s7.fromRed(), a8 = a8.fromRed();
  var w4 = s7.isub(a8).imul(f9).umod(p8);
  return w4.imul(b5), a8.iadd(w4), new u$c(a8.imul(r9.unblinder).umod(o9.modulus).toArray(false, m6));
}
function i$6(e11) {
  for (var o9 = e11.modulus.byteLength(), r9 = new n$g(d$d(o9)); r9.cmp(e11.modulus) >= 0 || !r9.umod(e11.prime1) || !r9.umod(e11.prime2); )
    r9 = new n$g(d$d(o9));
  return r9;
}
function t$9(r9) {
  return 1 === r9.length ? "0" + r9 : r9;
}
function n$h(r9) {
  for (var e11 = "", n9 = 0; n9 < r9.length; n9++)
    e11 += t$9(r9[n9].toString(16));
  return e11;
}
function p$f(r9, t8) {
  if (r9 instanceof p$f)
    return r9;
  this._importDER(r9, t8) || (h$c(r9.r && r9.s, "Signature without r or s"), this.r = new l$e(r9.r, 16), this.s = new l$e(r9.s, 16), void 0 === r9.recoveryParam ? this.recoveryParam = null : this.recoveryParam = r9.recoveryParam);
}
function f$j() {
  this.place = 0;
}
function v$a(r9, t8) {
  var e11 = r9[t8.place++];
  if (!(128 & e11))
    return e11;
  for (var n9 = 15 & e11, a8 = 0, i8 = 0, o9 = t8.place; i8 < n9; i8++, o9++)
    a8 <<= 8, a8 |= r9[o9];
  return t8.place = o9, a8;
}
function m$b(r9) {
  for (var t8 = 0, e11 = r9.length - 1; !r9[t8] && !(128 & r9[t8 + 1]) && t8 < e11; )
    t8++;
  return 0 === t8 ? r9 : r9.slice(t8);
}
function y$a(r9, t8) {
  if (t8 < 128)
    return r9.push(t8), void 0;
  var e11 = 1 + (Math.log(t8) / Math.LN2 >>> 3);
  for (r9.push(128 | e11); --e11; )
    r9.push(t8 >>> (e11 << 3) & 255);
  r9.push(t8);
}
function h$d(t8, n9) {
  return 55296 == (64512 & t8.charCodeAt(n9)) && (!(n9 < 0 || n9 + 1 >= t8.length) && 56320 == (64512 & t8.charCodeAt(n9 + 1)));
}
function o$h(t8) {
  return (t8 >>> 24 | t8 >>> 8 & 65280 | t8 << 8 & 16711680 | (255 & t8) << 24) >>> 0;
}
function u$e(t8) {
  return 1 === t8.length ? "0" + t8 : t8;
}
function s$e(t8) {
  return 7 === t8.length ? "0" + t8 : 6 === t8.length ? "00" + t8 : 5 === t8.length ? "000" + t8 : 4 === t8.length ? "0000" + t8 : 3 === t8.length ? "00000" + t8 : 2 === t8.length ? "000000" + t8 : 1 === t8.length ? "0000000" + t8 : t8;
}
function c$e() {
  this.pending = null, this.pendingTotal = 0, this.blockSize = this.constructor.blockSize, this.outSize = this.constructor.outSize, this.hmacStrength = this.constructor.hmacStrength, this.padLength = this.constructor.padLength / 8, this.endian = "big", this._delta8 = this.blockSize / 8, this._delta32 = this.blockSize / 32;
}
function y$b() {
  if (!(this instanceof y$b))
    return new y$b();
  k$8.call(this), this.h = [1779033703, 4089235720, 3144134277, 2227873595, 1013904242, 4271175723, 2773480762, 1595750129, 1359893119, 2917565137, 2600822924, 725511199, 528734635, 4215389547, 1541459225, 327033209], this.k = d$f, this.W = new Array(160);
}
function b$8(t8, h8, i8, r9, n9) {
  var s7 = t8 & i8 ^ ~t8 & n9;
  return s7 < 0 && (s7 += 4294967296), s7;
}
function x$3(t8, h8, i8, r9, n9, s7) {
  var o9 = h8 & r9 ^ ~h8 & s7;
  return o9 < 0 && (o9 += 4294967296), o9;
}
function B$6(t8, h8, i8, r9, n9) {
  var s7 = t8 & i8 ^ t8 & n9 ^ i8 & n9;
  return s7 < 0 && (s7 += 4294967296), s7;
}
function S$6(t8, h8, i8, r9, n9, s7) {
  var o9 = h8 & r9 ^ h8 & s7 ^ r9 & s7;
  return o9 < 0 && (o9 += 4294967296), o9;
}
function W$1(t8, h8) {
  var i8 = e$d(t8, h8, 28) ^ e$d(h8, t8, 2) ^ e$d(h8, t8, 7);
  return i8 < 0 && (i8 += 4294967296), i8;
}
function w$b(t8, h8) {
  var i8 = u$f(t8, h8, 28) ^ u$f(h8, t8, 2) ^ u$f(h8, t8, 7);
  return i8 < 0 && (i8 += 4294967296), i8;
}
function z$4(t8, h8) {
  var i8 = e$d(t8, h8, 14) ^ e$d(t8, h8, 18) ^ e$d(h8, t8, 9);
  return i8 < 0 && (i8 += 4294967296), i8;
}
function H$3(t8, h8) {
  var i8 = u$f(t8, h8, 14) ^ u$f(t8, h8, 18) ^ u$f(h8, t8, 9);
  return i8 < 0 && (i8 += 4294967296), i8;
}
function j$2(t8, h8) {
  var i8 = e$d(t8, h8, 1) ^ e$d(t8, h8, 8) ^ a$i(t8, h8, 7);
  return i8 < 0 && (i8 += 4294967296), i8;
}
function A$6(t8, h8) {
  var i8 = u$f(t8, h8, 1) ^ u$f(t8, h8, 8) ^ c$f(t8, h8, 7);
  return i8 < 0 && (i8 += 4294967296), i8;
}
function L$2(t8, h8) {
  var i8 = e$d(t8, h8, 19) ^ e$d(h8, t8, 29) ^ a$i(t8, h8, 6);
  return i8 < 0 && (i8 += 4294967296), i8;
}
function q$2(t8, h8) {
  var i8 = u$f(t8, h8, 19) ^ u$f(h8, t8, 29) ^ c$f(t8, h8, 6);
  return i8 < 0 && (i8 += 4294967296), i8;
}
function r$d(t8, h8, i8) {
  return t8 & h8 ^ ~t8 & i8;
}
function e$e(t8, h8, i8) {
  return t8 & h8 ^ t8 & i8 ^ h8 & i8;
}
function o$j(t8, h8, i8) {
  return t8 ^ h8 ^ i8;
}
function S$7() {
  if (!(this instanceof S$7))
    return new S$7();
  x$4.call(this), this.h = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225], this.k = y$c, this.W = new Array(64);
}
function m$e() {
  if (!(this instanceof m$e))
    return new m$e();
  g$c.call(this), this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520], this.W = new Array(80);
}
function v$d() {
  if (!(this instanceof v$d))
    return new v$d();
  z$5.call(this), this.h = [3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428];
}
function x$5() {
  if (!(this instanceof x$5))
    return new x$5();
  w$d.call(this), this.h = [3418070365, 3238371032, 1654270250, 914150663, 2438529370, 812702999, 355462360, 4144912697, 1731405415, 4290775857, 2394180231, 1750603025, 3675008525, 1694076839, 1203062813, 3204075428];
}
function G$2() {
  if (!(this instanceof G$2))
    return new G$2();
  F$4.call(this), this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520], this.endian = "little";
}
function I$7(t8, h8, i8, s7) {
  return t8 <= 15 ? h8 ^ i8 ^ s7 : t8 <= 31 ? h8 & i8 | ~h8 & s7 : t8 <= 47 ? (h8 | ~i8) ^ s7 : t8 <= 63 ? h8 & s7 | i8 & ~s7 : h8 ^ (i8 | ~s7);
}
function J$2(t8) {
  return t8 <= 15 ? 0 : t8 <= 31 ? 1518500249 : t8 <= 47 ? 1859775393 : t8 <= 63 ? 2400959708 : 2840853838;
}
function K$3(t8) {
  return t8 <= 15 ? 1352829926 : t8 <= 31 ? 1548603684 : t8 <= 47 ? 1836072691 : t8 <= 63 ? 2053994217 : 0;
}
function U$5(t8, h8, i8) {
  if (!(this instanceof U$5))
    return new U$5(t8, h8, i8);
  this.Hash = t8, this.blockSize = t8.blockSize / 8, this.outSize = t8.outSize / 8, this.inner = null, this.outer = null, this._init(R$2.toArray(h8, i8));
}
function o$l(t8) {
  if (!(this instanceof o$l))
    return new o$l(t8);
  this.hash = t8.hash, this.predResist = !!t8.predResist, this.outLen = this.hash.outSize, this.minEntropy = t8.minEntropy || this.hash.hmacStrength, this._reseed = null, this.reseedInterval = null, this.K = null, this.V = null;
  var e11 = r$f.toArray(t8.entropy, t8.entropyEnc || "hex"), i8 = r$f.toArray(t8.nonce, t8.nonceEnc || "hex"), s7 = r$f.toArray(t8.pers, t8.persEnc || "hex");
  n$l(e11.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._init(e11, i8, s7);
}
function h$f(e11, f9) {
  this.type = e11, this.p = new i$9(f9.p, 16), this.red = f9.prime ? i$9.red(f9.prime) : i$9.mont(this.p), this.zero = new i$9(0).toRed(this.red), this.one = new i$9(1).toRed(this.red), this.two = new i$9(2).toRed(this.red), this.n = f9.n && new i$9(f9.n, 16), this.g = f9.g && this.pointFromJSON(f9.g, f9.gRed), this._wnafT1 = new Array(4), this._wnafT2 = new Array(4), this._wnafT3 = new Array(4), this._wnafT4 = new Array(4), this._bitLength = this.n ? this.n.bitLength() : 0;
  var d6 = this.n && this.p.div(this.n);
  !d6 || d6.cmpn(100) > 0 ? this.redN = null : (this._maxwellTrick = true, this.redN = this.n.toRed(this.red));
}
function p$j(e11, f9) {
  this.curve = e11, this.type = f9, this.precomputed = null;
}
function A$8(e11) {
  S$9.call(this, "short", e11), this.a = new y$e(e11.a, 16).toRed(this.red), this.b = new y$e(e11.b, 16).toRed(this.red), this.tinv = this.two.redInvm(), this.zeroA = 0 === this.a.fromRed().cmpn(0), this.threeA = 0 === this.a.fromRed().sub(this.p).cmpn(-3), this.endo = this._getEndomorphism(e11), this._endoWnafT1 = new Array(4), this._endoWnafT2 = new Array(4);
}
function I$8(e11, f9, d6, c8) {
  S$9.BasePoint.call(this, e11, "affine"), null === f9 && null === d6 ? (this.x = null, this.y = null, this.inf = true) : (this.x = new y$e(f9, 16), this.y = new y$e(d6, 16), c8 && (this.x.forceRed(this.curve.red), this.y.forceRed(this.curve.red)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.inf = false);
}
function w$e(e11, f9, d6, c8) {
  S$9.BasePoint.call(this, e11, "jacobian"), null === f9 && null === d6 && null === c8 ? (this.x = this.curve.one, this.y = this.curve.one, this.z = new y$e(0)) : (this.x = new y$e(f9, 16), this.y = new y$e(d6, 16), this.z = new y$e(c8, 16)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.zOne = this.z === this.curve.one;
}
function P$4(e11) {
  q$4.call(this, "mont", e11), this.a = new _$d(e11.a, 16).toRed(this.red), this.b = new _$d(e11.b, 16).toRed(this.red), this.i4 = new _$d(4).toRed(this.red).redInvm(), this.two = new _$d(2).toRed(this.red), this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
function j$5(e11, f9, d6) {
  q$4.BasePoint.call(this, e11, "projective"), null === f9 && null === d6 ? (this.x = this.curve.one, this.z = this.curve.zero) : (this.x = new _$d(f9, 16), this.z = new _$d(d6, 16), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)));
}
function F$5(e11) {
  this.twisted = 1 != (0 | e11.a), this.mOneA = this.twisted && -1 == (0 | e11.a), this.extended = this.mOneA, L$4.call(this, "edwards", e11), this.a = new k$b(e11.a, 16).umod(this.red.m), this.a = this.a.toRed(this.red), this.c = new k$b(e11.c, 16).toRed(this.red), this.c2 = this.c.redSqr(), this.d = new k$b(e11.d, 16).toRed(this.red), this.dd = this.d.redAdd(this.d), B$8(!this.twisted || 0 === this.c.fromRed().cmpn(1)), this.oneC = 1 == (0 | e11.c);
}
function C$5(e11, f9, d6, c8, t8) {
  L$4.BasePoint.call(this, e11, "projective"), null === f9 && null === d6 && null === c8 ? (this.x = this.curve.zero, this.y = this.curve.one, this.z = this.curve.one, this.t = this.curve.zero, this.zOne = true) : (this.x = new k$b(f9, 16), this.y = new k$b(d6, 16), this.z = c8 ? new k$b(c8, 16) : this.curve.one, this.t = t8 && new k$b(t8, 16), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.t && !this.t.red && (this.t = this.t.toRed(this.curve.red)), this.zOne = this.z === this.curve.one, this.curve.extended && !this.t && (this.t = this.x.redMul(this.y), this.zOne || (this.t = this.t.redMul(this.z.redInvm()))));
}
function Q$2(e11) {
  "short" === e11.type ? this.curve = new G$3.short(e11) : "edwards" === e11.type ? this.curve = new G$3.edwards(e11) : this.curve = new G$3.mont(e11), this.g = this.curve.g, this.n = this.curve.n, this.hash = e11.hash, H$5(this.g.validate(), "Invalid curve"), H$5(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
}
function V$3(e11, f9) {
  Object.defineProperty(K$4, e11, { configurable: true, enumerable: true, get: function() {
    var d6 = new Q$2(f9);
    return Object.defineProperty(K$4, e11, { configurable: true, enumerable: true, value: d6 }), d6;
  } });
}
function fe2(e11, f9) {
  this.ec = e11, this.priv = null, this.pub = null, f9.priv && this._importPrivate(f9.priv, f9.privEnc), f9.pub && this._importPublic(f9.pub, f9.pubEnc);
}
function oe2(e11) {
  if (!(this instanceof oe2))
    return new oe2(e11);
  "string" == typeof e11 && (ie(re2.hasOwnProperty(e11), "Unknown curve " + e11), e11 = re2[e11]), e11 instanceof re2.PresetCurve && (e11 = { curve: e11 }), this.curve = e11.curve.curve, this.n = this.curve.n, this.nh = this.n.ushrn(1), this.g = this.curve.g, this.g = e11.curve.g, this.g.precompute(e11.curve.n.bitLength() + 1), this.hash = e11.hash || e11.curve.hash;
}
function ye2(e11, f9) {
  this.eddsa = e11, this._secret = le2(f9.secret), e11.isPoint(f9.pub) ? this._pub = f9.pub : this._pubBytes = le2(f9.pub);
}
function Me(e11, f9) {
  this.eddsa = e11, "object" != typeof f9 && (f9 = we2(f9)), Array.isArray(f9) && (f9 = { R: f9.slice(0, e11.encodingLength), S: f9.slice(e11.encodingLength) }), Ae2(f9.R && f9.S, "Signature without R or S"), e11.isPoint(f9.R) && (this._R = f9.R), f9.S instanceof Se2 && (this._S = f9.S), this._Rencoded = Array.isArray(f9.R) ? f9.R : f9.Rencoded, this._Sencoded = Array.isArray(f9.S) ? f9.S : f9.Sencoded;
}
function ke2(e11) {
  if (Pe("ed25519" === e11, "only tested with ed25519 so far"), !(this instanceof ke2))
    return new ke2(e11);
  e11 = qe[e11].curve;
  this.curve = e11, this.g = e11.g, this.g.precompute(e11.n.bitLength() + 1), this.pointClass = e11.point().constructor, this.encodingLength = Math.ceil(e11.n.bitLength() / 8), this.hash = ze.sha512;
}
function l$k(e11) {
  (this || u$j)._reporterState = { obj: null, path: [], options: e11 || {}, errors: [] };
}
function h$g(e11, t8) {
  (this || u$j).path = e11, this.rethrow(t8);
}
function y$f() {
  if (d$i)
    return p$k;
  d$i = true;
  var e11 = t$2, r9 = E$9().Reporter, i8 = e$1$1.Buffer;
  function o9(e12, t8) {
    if (r9.call(this || g$e, t8), !i8.isBuffer(e12))
      return this.error("Input not Buffer"), void 0;
    (this || g$e).base = e12, (this || g$e).offset = 0, (this || g$e).length = e12.length;
  }
  function s7(e12, t8) {
    if (Array.isArray(e12))
      (this || g$e).length = 0, (this || g$e).value = e12.map(function(e13) {
        return e13 instanceof s7 || (e13 = new s7(e13, t8)), (this || g$e).length += e13.length, e13;
      }, this || g$e);
    else if ("number" == typeof e12) {
      if (!(0 <= e12 && e12 <= 255))
        return t8.error("non-byte EncoderBuffer value");
      (this || g$e).value = e12, (this || g$e).length = 1;
    } else if ("string" == typeof e12)
      (this || g$e).value = e12, (this || g$e).length = i8.byteLength(e12);
    else {
      if (!i8.isBuffer(e12))
        return t8.error("Unsupported type: " + typeof e12);
      (this || g$e).value = e12, (this || g$e).length = e12.length;
    }
  }
  return e11(o9, r9), p$k.DecoderBuffer = o9, o9.prototype.save = function() {
    return { offset: (this || g$e).offset, reporter: r9.prototype.save.call(this || g$e) };
  }, o9.prototype.restore = function(e12) {
    var t8 = new o9((this || g$e).base);
    return t8.offset = e12.offset, t8.length = (this || g$e).offset, (this || g$e).offset = e12.offset, r9.prototype.restore.call(this || g$e, e12.reporter), t8;
  }, o9.prototype.isEmpty = function() {
    return (this || g$e).offset === (this || g$e).length;
  }, o9.prototype.readUInt8 = function(e12) {
    return (this || g$e).offset + 1 <= (this || g$e).length ? (this || g$e).base.readUInt8((this || g$e).offset++, true) : this.error(e12 || "DecoderBuffer overrun");
  }, o9.prototype.skip = function(e12, t8) {
    if (!((this || g$e).offset + e12 <= (this || g$e).length))
      return this.error(t8 || "DecoderBuffer overrun");
    var r10 = new o9((this || g$e).base);
    return r10._reporterState = (this || g$e)._reporterState, r10.offset = (this || g$e).offset, r10.length = (this || g$e).offset + e12, (this || g$e).offset += e12, r10;
  }, o9.prototype.raw = function(e12) {
    return (this || g$e).base.slice(e12 ? e12.offset : (this || g$e).offset, (this || g$e).length);
  }, p$k.EncoderBuffer = s7, s7.prototype.join = function(e12, t8) {
    return e12 || (e12 = new i8((this || g$e).length)), t8 || (t8 = 0), 0 === (this || g$e).length || (Array.isArray((this || g$e).value) ? (this || g$e).value.forEach(function(r10) {
      r10.join(e12, t8), t8 += r10.length;
    }) : ("number" == typeof (this || g$e).value ? e12[t8] = (this || g$e).value : "string" == typeof (this || g$e).value ? e12.write((this || g$e).value, t8) : i8.isBuffer((this || g$e).value) && (this || g$e).value.copy(e12, t8), t8 += (this || g$e).length)), e12;
  }, p$k;
}
function E$9() {
  if (S$a)
    return m$g;
  S$a = true;
  var e11 = m$g;
  return e11.Reporter = c$i.Reporter, e11.DecoderBuffer = y$f().DecoderBuffer, e11.EncoderBuffer = y$f().EncoderBuffer, e11.Node = function() {
    if (v$f)
      return _$e;
    v$f = true;
    var e12 = E$9().Reporter, t8 = E$9().EncoderBuffer, r9 = E$9().DecoderBuffer, n9 = o$7, o9 = ["seq", "seqof", "set", "setof", "objid", "bool", "gentime", "utctime", "null_", "enum", "int", "objDesc", "bitstr", "bmpstr", "charstr", "genstr", "graphstr", "ia5str", "iso646str", "numstr", "octstr", "printstr", "t61str", "unistr", "utf8str", "videostr"], s7 = ["key", "obj", "use", "optional", "explicit", "implicit", "def", "choice", "any", "contains"].concat(o9);
    function a8(e13, t9) {
      var r10 = {};
      (this || b$c)._baseState = r10, r10.enc = e13, r10.parent = t9 || null, r10.children = null, r10.tag = null, r10.args = null, r10.reverseArgs = null, r10.choice = null, r10.optional = false, r10.any = false, r10.obj = false, r10.use = null, r10.useDecoder = null, r10.key = null, r10.default = null, r10.explicit = null, r10.implicit = null, r10.contains = null, r10.parent || (r10.children = [], this._wrap());
    }
    _$e = a8;
    var u8 = ["enc", "parent", "children", "tag", "args", "reverseArgs", "choice", "optional", "any", "obj", "use", "alteredUse", "key", "default", "explicit", "implicit", "contains"];
    return a8.prototype.clone = function() {
      var e13 = (this || b$c)._baseState, t9 = {};
      u8.forEach(function(r11) {
        t9[r11] = e13[r11];
      });
      var r10 = new (this || b$c).constructor(t9.parent);
      return r10._baseState = t9, r10;
    }, a8.prototype._wrap = function() {
      var e13 = (this || b$c)._baseState;
      s7.forEach(function(t9) {
        (this || b$c)[t9] = function() {
          var r10 = new (this || b$c).constructor(this || b$c);
          return e13.children.push(r10), r10[t9].apply(r10, arguments);
        };
      }, this || b$c);
    }, a8.prototype._init = function(e13) {
      var t9 = (this || b$c)._baseState;
      n9(null === t9.parent), e13.call(this || b$c), t9.children = t9.children.filter(function(e14) {
        return e14._baseState.parent === (this || b$c);
      }, this || b$c), n9.equal(t9.children.length, 1, "Root node can have only one child");
    }, a8.prototype._useArgs = function(e13) {
      var t9 = (this || b$c)._baseState, r10 = e13.filter(function(e14) {
        return e14 instanceof (this || b$c).constructor;
      }, this || b$c);
      e13 = e13.filter(function(e14) {
        return !(e14 instanceof (this || b$c).constructor);
      }, this || b$c), 0 !== r10.length && (n9(null === t9.children), t9.children = r10, r10.forEach(function(e14) {
        e14._baseState.parent = this || b$c;
      }, this || b$c)), 0 !== e13.length && (n9(null === t9.args), t9.args = e13, t9.reverseArgs = e13.map(function(e14) {
        if ("object" != typeof e14 || e14.constructor !== Object)
          return e14;
        var t10 = {};
        return Object.keys(e14).forEach(function(r11) {
          r11 == (0 | r11) && (r11 |= 0);
          var n10 = e14[r11];
          t10[n10] = r11;
        }), t10;
      }));
    }, ["_peekTag", "_decodeTag", "_use", "_decodeStr", "_decodeObjid", "_decodeTime", "_decodeNull", "_decodeInt", "_decodeBool", "_decodeList", "_encodeComposite", "_encodeStr", "_encodeObjid", "_encodeTime", "_encodeNull", "_encodeInt", "_encodeBool"].forEach(function(e13) {
      a8.prototype[e13] = function() {
        var t9 = (this || b$c)._baseState;
        throw new Error(e13 + " not implemented for encoding: " + t9.enc);
      };
    }), o9.forEach(function(e13) {
      a8.prototype[e13] = function() {
        var t9 = (this || b$c)._baseState, r10 = Array.prototype.slice.call(arguments);
        return n9(null === t9.tag), t9.tag = e13, this._useArgs(r10), this || b$c;
      };
    }), a8.prototype.use = function(e13) {
      n9(e13);
      var t9 = (this || b$c)._baseState;
      return n9(null === t9.use), t9.use = e13, this || b$c;
    }, a8.prototype.optional = function() {
      return (this || b$c)._baseState.optional = true, this || b$c;
    }, a8.prototype.def = function(e13) {
      var t9 = (this || b$c)._baseState;
      return n9(null === t9.default), t9.default = e13, t9.optional = true, this || b$c;
    }, a8.prototype.explicit = function(e13) {
      var t9 = (this || b$c)._baseState;
      return n9(null === t9.explicit && null === t9.implicit), t9.explicit = e13, this || b$c;
    }, a8.prototype.implicit = function(e13) {
      var t9 = (this || b$c)._baseState;
      return n9(null === t9.explicit && null === t9.implicit), t9.implicit = e13, this || b$c;
    }, a8.prototype.obj = function() {
      var e13 = (this || b$c)._baseState, t9 = Array.prototype.slice.call(arguments);
      return e13.obj = true, 0 !== t9.length && this._useArgs(t9), this || b$c;
    }, a8.prototype.key = function(e13) {
      var t9 = (this || b$c)._baseState;
      return n9(null === t9.key), t9.key = e13, this || b$c;
    }, a8.prototype.any = function() {
      return (this || b$c)._baseState.any = true, this || b$c;
    }, a8.prototype.choice = function(e13) {
      var t9 = (this || b$c)._baseState;
      return n9(null === t9.choice), t9.choice = e13, this._useArgs(Object.keys(e13).map(function(t10) {
        return e13[t10];
      })), this || b$c;
    }, a8.prototype.contains = function(e13) {
      var t9 = (this || b$c)._baseState;
      return n9(null === t9.use), t9.contains = e13, this || b$c;
    }, a8.prototype._decode = function(e13, t9) {
      var n10 = (this || b$c)._baseState;
      if (null === n10.parent)
        return e13.wrapResult(n10.children[0]._decode(e13, t9));
      var i8, o10 = n10.default, s8 = true, a9 = null;
      if (null !== n10.key && (a9 = e13.enterKey(n10.key)), n10.optional) {
        var u9 = null;
        if (null !== n10.explicit ? u9 = n10.explicit : null !== n10.implicit ? u9 = n10.implicit : null !== n10.tag && (u9 = n10.tag), null !== u9 || n10.any) {
          if (s8 = this._peekTag(e13, u9, n10.any), e13.isError(s8))
            return s8;
        } else {
          var c8 = e13.save();
          try {
            null === n10.choice ? this._decodeGeneric(n10.tag, e13, t9) : this._decodeChoice(e13, t9), s8 = true;
          } catch (e14) {
            s8 = false;
          }
          e13.restore(c8);
        }
      }
      if (n10.obj && s8 && (i8 = e13.enterObject()), s8) {
        if (null !== n10.explicit) {
          var f9 = this._decodeTag(e13, n10.explicit);
          if (e13.isError(f9))
            return f9;
          e13 = f9;
        }
        var l8 = e13.offset;
        if (null === n10.use && null === n10.choice) {
          if (n10.any)
            c8 = e13.save();
          var h8 = this._decodeTag(e13, null !== n10.implicit ? n10.implicit : n10.tag, n10.any);
          if (e13.isError(h8))
            return h8;
          n10.any ? o10 = e13.raw(c8) : e13 = h8;
        }
        if (t9 && t9.track && null !== n10.tag && t9.track(e13.path(), l8, e13.length, "tagged"), t9 && t9.track && null !== n10.tag && t9.track(e13.path(), e13.offset, e13.length, "content"), o10 = n10.any ? o10 : null === n10.choice ? this._decodeGeneric(n10.tag, e13, t9) : this._decodeChoice(e13, t9), e13.isError(o10))
          return o10;
        if (n10.any || null !== n10.choice || null === n10.children || n10.children.forEach(function(r10) {
          r10._decode(e13, t9);
        }), n10.contains && ("octstr" === n10.tag || "bitstr" === n10.tag)) {
          var p8 = new r9(o10);
          o10 = this._getUse(n10.contains, e13._reporterState.obj)._decode(p8, t9);
        }
      }
      return n10.obj && s8 && (o10 = e13.leaveObject(i8)), null === n10.key || null === o10 && true !== s8 ? null !== a9 && e13.exitKey(a9) : e13.leaveKey(a9, n10.key, o10), o10;
    }, a8.prototype._decodeGeneric = function(e13, t9, r10) {
      var n10 = (this || b$c)._baseState;
      return "seq" === e13 || "set" === e13 ? null : "seqof" === e13 || "setof" === e13 ? this._decodeList(t9, e13, n10.args[0], r10) : /str$/.test(e13) ? this._decodeStr(t9, e13, r10) : "objid" === e13 && n10.args ? this._decodeObjid(t9, n10.args[0], n10.args[1], r10) : "objid" === e13 ? this._decodeObjid(t9, null, null, r10) : "gentime" === e13 || "utctime" === e13 ? this._decodeTime(t9, e13, r10) : "null_" === e13 ? this._decodeNull(t9, r10) : "bool" === e13 ? this._decodeBool(t9, r10) : "objDesc" === e13 ? this._decodeStr(t9, e13, r10) : "int" === e13 || "enum" === e13 ? this._decodeInt(t9, n10.args && n10.args[0], r10) : null !== n10.use ? this._getUse(n10.use, t9._reporterState.obj)._decode(t9, r10) : t9.error("unknown tag: " + e13);
    }, a8.prototype._getUse = function(e13, t9) {
      var r10 = (this || b$c)._baseState;
      return r10.useDecoder = this._use(e13, t9), n9(null === r10.useDecoder._baseState.parent), r10.useDecoder = r10.useDecoder._baseState.children[0], r10.implicit !== r10.useDecoder._baseState.implicit && (r10.useDecoder = r10.useDecoder.clone(), r10.useDecoder._baseState.implicit = r10.implicit), r10.useDecoder;
    }, a8.prototype._decodeChoice = function(e13, t9) {
      var r10 = (this || b$c)._baseState, n10 = null, i8 = false;
      return Object.keys(r10.choice).some(function(o10) {
        var s8 = e13.save(), a9 = r10.choice[o10];
        try {
          var u9 = a9._decode(e13, t9);
          if (e13.isError(u9))
            return false;
          n10 = { type: o10, value: u9 }, i8 = true;
        } catch (t10) {
          return e13.restore(s8), false;
        }
        return true;
      }, this || b$c), i8 ? n10 : e13.error("Choice not matched");
    }, a8.prototype._createEncoderBuffer = function(e13) {
      return new t8(e13, (this || b$c).reporter);
    }, a8.prototype._encode = function(e13, t9, r10) {
      var n10 = (this || b$c)._baseState;
      if (null === n10.default || n10.default !== e13) {
        var i8 = this._encodeValue(e13, t9, r10);
        if (void 0 !== i8 && !this._skipDefault(i8, t9, r10))
          return i8;
      }
    }, a8.prototype._encodeValue = function(t9, r10, n10) {
      var i8 = (this || b$c)._baseState;
      if (null === i8.parent)
        return i8.children[0]._encode(t9, r10 || new e12());
      var o10 = null;
      if ((this || b$c).reporter = r10, i8.optional && void 0 === t9) {
        if (null === i8.default)
          return;
        t9 = i8.default;
      }
      var s8 = null, a9 = false;
      if (i8.any)
        o10 = this._createEncoderBuffer(t9);
      else if (i8.choice)
        o10 = this._encodeChoice(t9, r10);
      else if (i8.contains)
        s8 = this._getUse(i8.contains, n10)._encode(t9, r10), a9 = true;
      else if (i8.children)
        s8 = i8.children.map(function(e13) {
          if ("null_" === e13._baseState.tag)
            return e13._encode(null, r10, t9);
          if (null === e13._baseState.key)
            return r10.error("Child should have a key");
          var n11 = r10.enterKey(e13._baseState.key);
          if ("object" != typeof t9)
            return r10.error("Child expected, but input is not object");
          var i9 = e13._encode(t9[e13._baseState.key], r10, t9);
          return r10.leaveKey(n11), i9;
        }, this || b$c).filter(function(e13) {
          return e13;
        }), s8 = this._createEncoderBuffer(s8);
      else if ("seqof" === i8.tag || "setof" === i8.tag) {
        if (!i8.args || 1 !== i8.args.length)
          return r10.error("Too many args for : " + i8.tag);
        if (!Array.isArray(t9))
          return r10.error("seqof/setof, but data is not Array");
        var u9 = this.clone();
        u9._baseState.implicit = null, s8 = this._createEncoderBuffer(t9.map(function(e13) {
          var n11 = (this || b$c)._baseState;
          return this._getUse(n11.args[0], t9)._encode(e13, r10);
        }, u9));
      } else
        null !== i8.use ? o10 = this._getUse(i8.use, n10)._encode(t9, r10) : (s8 = this._encodePrimitive(i8.tag, t9), a9 = true);
      if (!i8.any && null === i8.choice) {
        var c8 = null !== i8.implicit ? i8.implicit : i8.tag, f9 = null === i8.implicit ? "universal" : "context";
        null === c8 ? null === i8.use && r10.error("Tag could be omitted only for .use()") : null === i8.use && (o10 = this._encodeComposite(c8, a9, f9, s8));
      }
      return null !== i8.explicit && (o10 = this._encodeComposite(i8.explicit, false, "context", o10)), o10;
    }, a8.prototype._encodeChoice = function(e13, t9) {
      var r10 = (this || b$c)._baseState, i8 = r10.choice[e13.type];
      return i8 || n9(false, e13.type + " not found in " + JSON.stringify(Object.keys(r10.choice))), i8._encode(e13.value, t9);
    }, a8.prototype._encodePrimitive = function(e13, t9) {
      var r10 = (this || b$c)._baseState;
      if (/str$/.test(e13))
        return this._encodeStr(t9, e13);
      if ("objid" === e13 && r10.args)
        return this._encodeObjid(t9, r10.reverseArgs[0], r10.args[1]);
      if ("objid" === e13)
        return this._encodeObjid(t9, null, null);
      if ("gentime" === e13 || "utctime" === e13)
        return this._encodeTime(t9, e13);
      if ("null_" === e13)
        return this._encodeNull();
      if ("int" === e13 || "enum" === e13)
        return this._encodeInt(t9, r10.args && r10.reverseArgs[0]);
      if ("bool" === e13)
        return this._encodeBool(t9);
      if ("objDesc" === e13)
        return this._encodeStr(t9, e13);
      throw new Error("Unsupported tag: " + e13);
    }, a8.prototype._isNumstr = function(e13) {
      return /^[0-9 ]*$/.test(e13);
    }, a8.prototype._isPrintstr = function(e13) {
      return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(e13);
    }, _$e;
  }(), m$g;
}
function T$6() {
  if (k$c)
    return B$9;
  k$c = true;
  var e11 = B$9;
  return e11._reverse = function(e12) {
    var t8 = {};
    return Object.keys(e12).forEach(function(r9) {
      (0 | r9) == r9 && (r9 |= 0);
      var n9 = e12[r9];
      t8[n9] = r9;
    }), t8;
  }, e11.der = function() {
    if (w$f)
      return j$6;
    w$f = true;
    var e12 = T$6();
    return j$6.tagClass = { 0: "universal", 1: "application", 2: "context", 3: "private" }, j$6.tagClassByName = e12._reverse(j$6.tagClass), j$6.tag = { 0: "end", 1: "bool", 2: "int", 3: "bitstr", 4: "octstr", 5: "null_", 6: "objid", 7: "objDesc", 8: "external", 9: "real", 10: "enum", 11: "embed", 12: "utf8str", 13: "relativeOid", 16: "seq", 17: "set", 18: "numstr", 19: "printstr", 20: "t61str", 21: "videostr", 22: "ia5str", 23: "utctime", 24: "gentime", 25: "graphstr", 26: "iso646str", 27: "genstr", 28: "unistr", 29: "charstr", 30: "bmpstr" }, j$6.tagByName = e12._reverse(j$6.tag), j$6;
  }(), B$9;
}
function C$6() {
  if (U$7)
    return D$5;
  U$7 = true;
  var e11 = t$2, r9 = Y$3(), n9 = r9.base, i8 = r9.bignum, o9 = r9.constants.der;
  function s7(e12) {
    (this || N$5).enc = "der", (this || N$5).name = e12.name, (this || N$5).entity = e12, (this || N$5).tree = new a8(), (this || N$5).tree._init(e12.body);
  }
  function a8(e12) {
    n9.Node.call(this || N$5, "der", e12);
  }
  function u8(e12, t8) {
    var r10 = e12.readUInt8(t8);
    if (e12.isError(r10))
      return r10;
    var n10 = o9.tagClass[r10 >> 6], i9 = 0 == (32 & r10);
    if (31 == (31 & r10)) {
      var s8 = r10;
      for (r10 = 0; 128 == (128 & s8); ) {
        if (s8 = e12.readUInt8(t8), e12.isError(s8))
          return s8;
        r10 <<= 7, r10 |= 127 & s8;
      }
    } else
      r10 &= 31;
    return { cls: n10, primitive: i9, tag: r10, tagStr: o9.tag[r10] };
  }
  function c8(e12, t8, r10) {
    var n10 = e12.readUInt8(r10);
    if (e12.isError(n10))
      return n10;
    if (!t8 && 128 === n10)
      return null;
    if (0 == (128 & n10))
      return n10;
    var i9 = 127 & n10;
    if (i9 > 4)
      return e12.error("length octect is too long");
    n10 = 0;
    for (var o10 = 0; o10 < i9; o10++) {
      n10 <<= 8;
      var s8 = e12.readUInt8(r10);
      if (e12.isError(s8))
        return s8;
      n10 |= s8;
    }
    return n10;
  }
  return D$5 = s7, s7.prototype.decode = function(e12, t8) {
    return e12 instanceof n9.DecoderBuffer || (e12 = new n9.DecoderBuffer(e12, t8)), (this || N$5).tree._decode(e12, t8);
  }, e11(a8, n9.Node), a8.prototype._peekTag = function(e12, t8, r10) {
    if (e12.isEmpty())
      return false;
    var n10 = e12.save(), i9 = u8(e12, 'Failed to peek tag: "' + t8 + '"');
    return e12.isError(i9) ? i9 : (e12.restore(n10), i9.tag === t8 || i9.tagStr === t8 || i9.tagStr + "of" === t8 || r10);
  }, a8.prototype._decodeTag = function(e12, t8, r10) {
    var n10 = u8(e12, 'Failed to decode tag of "' + t8 + '"');
    if (e12.isError(n10))
      return n10;
    var i9 = c8(e12, n10.primitive, 'Failed to get length of "' + t8 + '"');
    if (e12.isError(i9))
      return i9;
    if (!r10 && n10.tag !== t8 && n10.tagStr !== t8 && n10.tagStr + "of" !== t8)
      return e12.error('Failed to match tag: "' + t8 + '"');
    if (n10.primitive || null !== i9)
      return e12.skip(i9, 'Failed to match body of: "' + t8 + '"');
    var o10 = e12.save(), s8 = this._skipUntilEnd(e12, 'Failed to skip indefinite length body: "' + (this || N$5).tag + '"');
    return e12.isError(s8) ? s8 : (i9 = e12.offset - o10.offset, e12.restore(o10), e12.skip(i9, 'Failed to match body of: "' + t8 + '"'));
  }, a8.prototype._skipUntilEnd = function(e12, t8) {
    for (; ; ) {
      var r10 = u8(e12, t8);
      if (e12.isError(r10))
        return r10;
      var n10, i9 = c8(e12, r10.primitive, t8);
      if (e12.isError(i9))
        return i9;
      if (n10 = r10.primitive || null !== i9 ? e12.skip(i9) : this._skipUntilEnd(e12, t8), e12.isError(n10))
        return n10;
      if ("end" === r10.tagStr)
        break;
    }
  }, a8.prototype._decodeList = function(e12, t8, r10, n10) {
    for (var i9 = []; !e12.isEmpty(); ) {
      var o10 = this._peekTag(e12, "end");
      if (e12.isError(o10))
        return o10;
      var s8 = r10.decode(e12, "der", n10);
      if (e12.isError(s8) && o10)
        break;
      i9.push(s8);
    }
    return i9;
  }, a8.prototype._decodeStr = function(e12, t8) {
    if ("bitstr" === t8) {
      var r10 = e12.readUInt8();
      return e12.isError(r10) ? r10 : { unused: r10, data: e12.raw() };
    }
    if ("bmpstr" === t8) {
      var n10 = e12.raw();
      if (n10.length % 2 == 1)
        return e12.error("Decoding of string type: bmpstr length mismatch");
      for (var i9 = "", o10 = 0; o10 < n10.length / 2; o10++)
        i9 += String.fromCharCode(n10.readUInt16BE(2 * o10));
      return i9;
    }
    if ("numstr" === t8) {
      var s8 = e12.raw().toString("ascii");
      return this._isNumstr(s8) ? s8 : e12.error("Decoding of string type: numstr unsupported characters");
    }
    if ("octstr" === t8)
      return e12.raw();
    if ("objDesc" === t8)
      return e12.raw();
    if ("printstr" === t8) {
      var a9 = e12.raw().toString("ascii");
      return this._isPrintstr(a9) ? a9 : e12.error("Decoding of string type: printstr unsupported characters");
    }
    return /str$/.test(t8) ? e12.raw().toString() : e12.error("Decoding of string type: " + t8 + " unsupported");
  }, a8.prototype._decodeObjid = function(e12, t8, r10) {
    for (var n10, i9 = [], o10 = 0; !e12.isEmpty(); ) {
      var s8 = e12.readUInt8();
      o10 <<= 7, o10 |= 127 & s8, 0 == (128 & s8) && (i9.push(o10), o10 = 0);
    }
    128 & s8 && i9.push(o10);
    var a9 = i9[0] / 40 | 0, u9 = i9[0] % 40;
    if (n10 = r10 ? i9 : [a9, u9].concat(i9.slice(1)), t8) {
      var c9 = t8[n10.join(" ")];
      void 0 === c9 && (c9 = t8[n10.join(".")]), void 0 !== c9 && (n10 = c9);
    }
    return n10;
  }, a8.prototype._decodeTime = function(e12, t8) {
    var r10 = e12.raw().toString();
    if ("gentime" === t8)
      var n10 = 0 | r10.slice(0, 4), i9 = 0 | r10.slice(4, 6), o10 = 0 | r10.slice(6, 8), s8 = 0 | r10.slice(8, 10), a9 = 0 | r10.slice(10, 12), u9 = 0 | r10.slice(12, 14);
    else {
      if ("utctime" !== t8)
        return e12.error("Decoding " + t8 + " time is not supported yet");
      n10 = 0 | r10.slice(0, 2), i9 = 0 | r10.slice(2, 4), o10 = 0 | r10.slice(4, 6), s8 = 0 | r10.slice(6, 8), a9 = 0 | r10.slice(8, 10), u9 = 0 | r10.slice(10, 12);
      n10 = n10 < 70 ? 2e3 + n10 : 1900 + n10;
    }
    return Date.UTC(n10, i9 - 1, o10, s8, a9, u9, 0);
  }, a8.prototype._decodeNull = function(e12) {
    return null;
  }, a8.prototype._decodeBool = function(e12) {
    var t8 = e12.readUInt8();
    return e12.isError(t8) ? t8 : 0 !== t8;
  }, a8.prototype._decodeInt = function(e12, t8) {
    var r10 = e12.raw(), n10 = new i8(r10);
    return t8 && (n10 = t8[n10.toString(10)] || n10), n10;
  }, a8.prototype._use = function(e12, t8) {
    return "function" == typeof e12 && (e12 = e12(t8)), e12._getDecoder("der").tree;
  }, D$5;
}
function P$5() {
  if (q$5)
    return I$9;
  q$5 = true;
  var e11 = I$9;
  return e11.der = C$6(), e11.pem = function() {
    if (A$9)
      return O$6;
    A$9 = true;
    var e12 = t$2, r9 = e$1$1.Buffer, i8 = C$6();
    function o9(e13) {
      i8.call(this || x$7, e13), (this || x$7).enc = "pem";
    }
    return e12(o9, i8), O$6 = o9, o9.prototype.decode = function(e13, t8) {
      for (var n9 = e13.toString().split(/[\r\n]+/g), o10 = t8.label.toUpperCase(), s7 = /^-----(BEGIN|END) ([^-]+)-----$/, a8 = -1, u8 = -1, c8 = 0; c8 < n9.length; c8++) {
        var f9 = n9[c8].match(s7);
        if (null !== f9 && f9[2] === o10) {
          if (-1 !== a8) {
            if ("END" !== f9[1])
              break;
            u8 = c8;
            break;
          }
          if ("BEGIN" !== f9[1])
            break;
          a8 = c8;
        }
      }
      if (-1 === a8 || -1 === u8)
        throw new Error("PEM section not found for: " + o10);
      var l8 = n9.slice(a8 + 1, u8).join("");
      l8.replace(/[^a-z0-9\+\/=]+/gi, "");
      var h8 = new r9(l8, "base64");
      return i8.prototype.decode.call(this || x$7, h8, t8);
    }, O$6;
  }(), I$9;
}
function $$2() {
  if (K$5)
    return F$6;
  K$5 = true;
  var e11 = t$2, r9 = e$1$1.Buffer, i8 = Y$3(), o9 = i8.base, s7 = i8.constants.der;
  function a8(e12) {
    (this || R$4).enc = "der", (this || R$4).name = e12.name, (this || R$4).entity = e12, (this || R$4).tree = new u8(), (this || R$4).tree._init(e12.body);
  }
  function u8(e12) {
    o9.Node.call(this || R$4, "der", e12);
  }
  function c8(e12) {
    return e12 < 10 ? "0" + e12 : e12;
  }
  return F$6 = a8, a8.prototype.encode = function(e12, t8) {
    return (this || R$4).tree._encode(e12, t8).join();
  }, e11(u8, o9.Node), u8.prototype._encodeComposite = function(e12, t8, n9, i9) {
    var o10, a9 = function(e13, t9, r10, n10) {
      var i10;
      "seqof" === e13 ? e13 = "seq" : "setof" === e13 && (e13 = "set");
      if (s7.tagByName.hasOwnProperty(e13))
        i10 = s7.tagByName[e13];
      else {
        if ("number" != typeof e13 || (0 | e13) !== e13)
          return n10.error("Unknown tag: " + e13);
        i10 = e13;
      }
      if (i10 >= 31)
        return n10.error("Multi-octet tag encoding unsupported");
      t9 || (i10 |= 32);
      return i10 |= s7.tagClassByName[r10 || "universal"] << 6;
    }(e12, t8, n9, (this || R$4).reporter);
    if (i9.length < 128)
      return (o10 = new r9(2))[0] = a9, o10[1] = i9.length, this._createEncoderBuffer([o10, i9]);
    for (var u9 = 1, c9 = i9.length; c9 >= 256; c9 >>= 8)
      u9++;
    (o10 = new r9(2 + u9))[0] = a9, o10[1] = 128 | u9;
    c9 = 1 + u9;
    for (var f9 = i9.length; f9 > 0; c9--, f9 >>= 8)
      o10[c9] = 255 & f9;
    return this._createEncoderBuffer([o10, i9]);
  }, u8.prototype._encodeStr = function(e12, t8) {
    if ("bitstr" === t8)
      return this._createEncoderBuffer([0 | e12.unused, e12.data]);
    if ("bmpstr" === t8) {
      for (var n9 = new r9(2 * e12.length), i9 = 0; i9 < e12.length; i9++)
        n9.writeUInt16BE(e12.charCodeAt(i9), 2 * i9);
      return this._createEncoderBuffer(n9);
    }
    return "numstr" === t8 ? this._isNumstr(e12) ? this._createEncoderBuffer(e12) : (this || R$4).reporter.error("Encoding of string type: numstr supports only digits and space") : "printstr" === t8 ? this._isPrintstr(e12) ? this._createEncoderBuffer(e12) : (this || R$4).reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark") : /str$/.test(t8) || "objDesc" === t8 ? this._createEncoderBuffer(e12) : (this || R$4).reporter.error("Encoding of string type: " + t8 + " unsupported");
  }, u8.prototype._encodeObjid = function(e12, t8, n9) {
    if ("string" == typeof e12) {
      if (!t8)
        return (this || R$4).reporter.error("string objid given, but no values map found");
      if (!t8.hasOwnProperty(e12))
        return (this || R$4).reporter.error("objid not found in values map");
      e12 = t8[e12].split(/[\s\.]+/g);
      for (var i9 = 0; i9 < e12.length; i9++)
        e12[i9] |= 0;
    } else if (Array.isArray(e12)) {
      e12 = e12.slice();
      for (i9 = 0; i9 < e12.length; i9++)
        e12[i9] |= 0;
    }
    if (!Array.isArray(e12))
      return (this || R$4).reporter.error("objid() should be either array or string, got: " + JSON.stringify(e12));
    if (!n9) {
      if (e12[1] >= 40)
        return (this || R$4).reporter.error("Second objid identifier OOB");
      e12.splice(0, 2, 40 * e12[0] + e12[1]);
    }
    var o10 = 0;
    for (i9 = 0; i9 < e12.length; i9++) {
      var s8 = e12[i9];
      for (o10++; s8 >= 128; s8 >>= 7)
        o10++;
    }
    var a9 = new r9(o10), u9 = a9.length - 1;
    for (i9 = e12.length - 1; i9 >= 0; i9--) {
      s8 = e12[i9];
      for (a9[u9--] = 127 & s8; (s8 >>= 7) > 0; )
        a9[u9--] = 128 | 127 & s8;
    }
    return this._createEncoderBuffer(a9);
  }, u8.prototype._encodeTime = function(e12, t8) {
    var r10, n9 = new Date(e12);
    return "gentime" === t8 ? r10 = [c8(n9.getFullYear()), c8(n9.getUTCMonth() + 1), c8(n9.getUTCDate()), c8(n9.getUTCHours()), c8(n9.getUTCMinutes()), c8(n9.getUTCSeconds()), "Z"].join("") : "utctime" === t8 ? r10 = [c8(n9.getFullYear() % 100), c8(n9.getUTCMonth() + 1), c8(n9.getUTCDate()), c8(n9.getUTCHours()), c8(n9.getUTCMinutes()), c8(n9.getUTCSeconds()), "Z"].join("") : (this || R$4).reporter.error("Encoding " + t8 + " time is not supported yet"), this._encodeStr(r10, "octstr");
  }, u8.prototype._encodeNull = function() {
    return this._createEncoderBuffer("");
  }, u8.prototype._encodeInt = function(e12, t8) {
    if ("string" == typeof e12) {
      if (!t8)
        return (this || R$4).reporter.error("String int or enum given, but no values map");
      if (!t8.hasOwnProperty(e12))
        return (this || R$4).reporter.error("Values map doesn't contain: " + JSON.stringify(e12));
      e12 = t8[e12];
    }
    if ("number" != typeof e12 && !r9.isBuffer(e12)) {
      var n9 = e12.toArray();
      !e12.sign && 128 & n9[0] && n9.unshift(0), e12 = new r9(n9);
    }
    if (r9.isBuffer(e12)) {
      var i9 = e12.length;
      0 === e12.length && i9++;
      var o10 = new r9(i9);
      return e12.copy(o10), 0 === e12.length && (o10[0] = 0), this._createEncoderBuffer(o10);
    }
    if (e12 < 128)
      return this._createEncoderBuffer(e12);
    if (e12 < 256)
      return this._createEncoderBuffer([0, e12]);
    i9 = 1;
    for (var s8 = e12; s8 >= 256; s8 >>= 8)
      i9++;
    for (s8 = (o10 = new Array(i9)).length - 1; s8 >= 0; s8--)
      o10[s8] = 255 & e12, e12 >>= 8;
    return 128 & o10[0] && o10.unshift(0), this._createEncoderBuffer(new r9(o10));
  }, u8.prototype._encodeBool = function(e12) {
    return this._createEncoderBuffer(e12 ? 255 : 0);
  }, u8.prototype._use = function(e12, t8) {
    return "function" == typeof e12 && (e12 = e12(t8)), e12._getEncoder("der").tree;
  }, u8.prototype._skipDefault = function(e12, t8, r10) {
    var n9, i9 = (this || R$4)._baseState;
    if (null === i9.default)
      return false;
    var o10 = e12.join();
    if (void 0 === i9.defaultBuffer && (i9.defaultBuffer = this._encodeValue(i9.default, t8, r10).join()), o10.length !== i9.defaultBuffer.length)
      return false;
    for (n9 = 0; n9 < o10.length; n9++)
      if (o10[n9] !== i9.defaultBuffer[n9])
        return false;
    return true;
  }, F$6;
}
function Z$2() {
  if (V$4)
    return J$4;
  V$4 = true;
  var e11 = J$4;
  return e11.der = $$2(), e11.pem = function() {
    if (L$5)
      return G$4;
    L$5 = true;
    var e12 = t$2, r9 = $$2();
    function n9(e13) {
      r9.call(this || M$7, e13), (this || M$7).enc = "pem";
    }
    return e12(n9, r9), G$4 = n9, n9.prototype.encode = function(e13, t8) {
      for (var n10 = r9.prototype.encode.call(this || M$7, e13).toString("base64"), i8 = ["-----BEGIN " + t8.label + "-----"], o9 = 0; o9 < n10.length; o9 += 64)
        i8.push(n10.slice(o9, o9 + 64));
      return i8.push("-----END " + t8.label + "-----"), i8.join("\n");
    }, G$4;
  }(), J$4;
}
function Y$3() {
  if (H$6)
    return z$7;
  H$6 = true;
  var n9 = z$7;
  return n9.bignum = n$c, n9.define = function() {
    if (s$j)
      return o$n;
    s$j = true;
    var e11 = Y$3(), n10 = t$2;
    function i8(e12, t8) {
      (this || a$m).name = e12, (this || a$m).body = t8, (this || a$m).decoders = {}, (this || a$m).encoders = {};
    }
    return o$n.define = function(e12, t8) {
      return new i8(e12, t8);
    }, i8.prototype._createNamed = function(e12) {
      var t8;
      try {
        t8 = exports$11$1.runInThisContext("(function " + (this || a$m).name + "(entity) {\n  this._initNamed(entity);\n})");
      } catch (e13) {
        t8 = function(e14) {
          this._initNamed(e14);
        };
      }
      return n10(t8, e12), t8.prototype._initNamed = function(t9) {
        e12.call(this || a$m, t9);
      }, new t8(this || a$m);
    }, i8.prototype._getDecoder = function(t8) {
      return t8 = t8 || "der", (this || a$m).decoders.hasOwnProperty(t8) || ((this || a$m).decoders[t8] = this._createNamed(e11.decoders[t8])), (this || a$m).decoders[t8];
    }, i8.prototype.decode = function(e12, t8, r9) {
      return this._getDecoder(t8).decode(e12, r9);
    }, i8.prototype._getEncoder = function(t8) {
      return t8 = t8 || "der", (this || a$m).encoders.hasOwnProperty(t8) || ((this || a$m).encoders[t8] = this._createNamed(e11.encoders[t8])), (this || a$m).encoders[t8];
    }, i8.prototype.encode = function(e12, t8, r9) {
      return this._getEncoder(t8).encode(e12, r9);
    }, o$n;
  }().define, n9.base = E$9(), n9.constants = T$6(), n9.decoders = P$5(), n9.encoders = Z$2(), z$7;
}
function l$m(e11) {
  var r9;
  "object" != typeof e11 || h$i.isBuffer(e11) || (r9 = e11.passphrase, e11 = e11.key), "string" == typeof e11 && (e11 = h$i.from(e11));
  var a8, t8, c8 = f$p(e11, r9), s7 = c8.tag, i8 = c8.data;
  switch (s7) {
    case "CERTIFICATE":
      t8 = y$h.certificate.decode(i8, "der").tbsCertificate.subjectPublicKeyInfo;
    case "PUBLIC KEY":
      switch (t8 || (t8 = y$h.PublicKey.decode(i8, "der")), a8 = t8.algorithm.algorithm.join(".")) {
        case "1.2.840.113549.1.1.1":
          return y$h.RSAPublicKey.decode(t8.subjectPublicKey.data, "der");
        case "1.2.840.10045.2.1":
          return t8.subjectPrivateKey = t8.subjectPublicKey, { type: "ec", data: t8 };
        case "1.2.840.10040.4.1":
          return t8.algorithm.params.pub_key = y$h.DSAparam.decode(t8.subjectPublicKey.data, "der"), { type: "dsa", data: t8.algorithm.params };
        default:
          throw new Error("unknown key id " + a8);
      }
    case "ENCRYPTED PRIVATE KEY":
      i8 = function(e12, r10) {
        var a9 = e12.algorithm.decrypt.kde.kdeparams.salt, t9 = parseInt(e12.algorithm.decrypt.kde.kdeparams.iters.toString(), 10), c9 = m$i[e12.algorithm.decrypt.cipher.algo.join(".")], s8 = e12.algorithm.decrypt.cipher.iv, i9 = e12.subjectPrivateKey, o9 = parseInt(c9.split("-")[1], 10) / 8, d6 = E$a.pbkdf2Sync(r10, a9, t9, o9, "sha1"), n9 = b$e.createDecipheriv(c9, d6, s8), p8 = [];
        return p8.push(n9.update(i9)), p8.push(n9.final()), h$i.concat(p8);
      }(i8 = y$h.EncryptedPrivateKey.decode(i8, "der"), r9);
    case "PRIVATE KEY":
      switch (a8 = (t8 = y$h.PrivateKey.decode(i8, "der")).algorithm.algorithm.join(".")) {
        case "1.2.840.113549.1.1.1":
          return y$h.RSAPrivateKey.decode(t8.subjectPrivateKey, "der");
        case "1.2.840.10045.2.1":
          return { curve: t8.algorithm.curve, privateKey: y$h.ECPrivateKey.decode(t8.subjectPrivateKey, "der").privateKey };
        case "1.2.840.10040.4.1":
          return t8.algorithm.params.priv_key = y$h.DSAparam.decode(t8.subjectPrivateKey, "der"), { type: "dsa", params: t8.algorithm.params };
        default:
          throw new Error("unknown key id " + a8);
      }
    case "RSA PUBLIC KEY":
      return y$h.RSAPublicKey.decode(i8, "der");
    case "RSA PRIVATE KEY":
      return y$h.RSAPrivateKey.decode(i8, "der");
    case "DSA PRIVATE KEY":
      return { type: "dsa", params: y$h.DSAPrivateKey.decode(i8, "der") };
    case "EC PRIVATE KEY":
      return { curve: (i8 = y$h.ECPrivateKey.decode(i8, "der")).parameters.value, privateKey: i8.privateKey };
    default:
      throw new Error("unknown key type " + s7);
  }
}
function y$i(e11, t8, r9, n9) {
  if ((e11 = new f$q(e11.toArray())).length < t8.byteLength()) {
    var a8 = new f$q(t8.byteLength() - e11.length);
    a8.fill(0), e11 = f$q.concat([a8, e11]);
  }
  var o9 = r9.length, i8 = function(e12, t9) {
    e12 = (e12 = b$f(e12, t9)).mod(t9);
    var r10 = new f$q(e12.toArray());
    if (r10.length < t9.byteLength()) {
      var n10 = new f$q(t9.byteLength() - r10.length);
      n10.fill(0), r10 = f$q.concat([n10, r10]);
    }
    return r10;
  }(r9, t8), s7 = new f$q(o9);
  s7.fill(1);
  var h8 = new f$q(o9);
  return h8.fill(0), h8 = c$k(n9, h8).update(s7).update(new f$q([0])).update(e11).update(i8).digest(), s7 = c$k(n9, h8).update(s7).digest(), { k: h8 = c$k(n9, h8).update(s7).update(new f$q([1])).update(e11).update(i8).digest(), v: s7 = c$k(n9, h8).update(s7).digest() };
}
function b$f(e11, t8) {
  var r9 = new l$n(e11), n9 = (e11.length << 3) - t8.bitLength();
  return n9 > 0 && r9.ishrn(n9), r9;
}
function _$f(e11, t8, r9) {
  var n9, a8;
  do {
    for (n9 = new f$q(0); 8 * n9.length < e11.bitLength(); )
      t8.v = c$k(r9, t8.k).update(t8.v).digest(), n9 = f$q.concat([n9, t8.v]);
    a8 = b$f(n9, e11), t8.k = c$k(r9, t8.k).update(t8.v).update(new f$q([0])).digest(), t8.v = c$k(r9, t8.k).update(t8.v).digest();
  } while (-1 !== a8.cmp(e11));
  return a8;
}
function k$e(e11, t8, r9, n9) {
  return e11.toRed(l$n.mont(r9)).redPow(t8).fromRed().mod(n9);
}
function A$a(e11, t8) {
  if (e11.cmpn(0) <= 0)
    throw new Error("invalid sig");
  if (e11.cmp(t8) >= t8)
    throw new Error("invalid sig");
}
function D$6(e11) {
  S$b.Writable.call(this || W$4);
  var t8 = C$7[e11];
  if (!t8)
    throw new Error("Unknown message digest");
  (this || W$4)._hashType = t8.hash, (this || W$4)._hash = B$a(t8.hash), (this || W$4)._tag = t8.id, (this || W$4)._signType = t8.sign;
}
function F$7(e11) {
  S$b.Writable.call(this || W$4);
  var t8 = C$7[e11];
  if (!t8)
    throw new Error("Unknown message digest");
  (this || W$4)._hash = B$a(t8.hash), (this || W$4)._tag = t8.id, (this || W$4)._signType = t8.sign;
}
function M$8(e11) {
  return new D$6(e11);
}
function O$7(e11) {
  return new F$7(e11);
}
function c$l(e11) {
  (this || n$p).curveType = o$q[e11], (this || n$p).curveType || ((this || n$p).curveType = { name: e11 }), (this || n$p).curve = new s$m.ec((this || n$p).curveType.name), (this || n$p).keys = void 0;
}
function y$j(e11, t8, r9) {
  Array.isArray(e11) || (e11 = e11.toArray());
  var i8 = new p$o(e11);
  if (r9 && i8.length < r9) {
    var n9 = new p$o(r9 - i8.length);
    n9.fill(0), i8 = p$o.concat([n9, i8]);
  }
  return t8 ? i8.toString(t8) : i8;
}
function f$s(r9) {
  var n9 = l$o.allocUnsafe(4);
  return n9.writeUInt32BE(r9, 0), n9;
}
function i$d() {
  throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11");
}
function y$l(r9, e11) {
  if ("number" != typeof r9 || r9 != r9)
    throw new TypeError("offset must be a number");
  if (r9 > p$q || r9 < 0)
    throw new TypeError("offset must be a uint32");
  if (r9 > l$p || r9 > e11)
    throw new RangeError("offset out of range");
}
function b$h(r9, e11, n9) {
  if ("number" != typeof r9 || r9 != r9)
    throw new TypeError("size must be a number");
  if (r9 > p$q || r9 < 0)
    throw new TypeError("size must be a uint32");
  if (r9 + e11 > n9 || r9 > l$p)
    throw new RangeError("buffer too small");
}
function w$i(r9, e11, n9, o9) {
  if (f$t.browser) {
    var t8 = r9.buffer, i8 = new Uint8Array(t8, e11, n9);
    return m$l.getRandomValues(i8), o9 ? (f$t.nextTick(function() {
      o9(null, r9);
    }), void 0) : r9;
  }
  return o9 ? (a$o(n9, function(n10, t9) {
    if (n10)
      return o9(n10);
    t9.copy(r9, e11), o9(null, r9);
  }), void 0) : (a$o(n9).copy(r9, e11), r9);
}
function dew$10$1() {
  if (_dewExec$10$1)
    return exports$10$1;
  _dewExec$10$1 = true;
  var r9;
  exports$10$1 = function rand(len) {
    if (!r9)
      r9 = new Rand(null);
    return r9.generate(len);
  };
  function Rand(rand) {
    (this || _global$a$1).rand = rand;
  }
  exports$10$1.Rand = Rand;
  Rand.prototype.generate = function generate(len) {
    return this._rand(len);
  };
  Rand.prototype._rand = function _rand(n9) {
    if ((this || _global$a$1).rand.getBytes)
      return (this || _global$a$1).rand.getBytes(n9);
    var res = new Uint8Array(n9);
    for (var i8 = 0; i8 < res.length; i8++)
      res[i8] = (this || _global$a$1).rand.getByte();
    return res;
  };
  if (typeof self === "object") {
    if (self.crypto && self.crypto.getRandomValues) {
      Rand.prototype._rand = function _rand(n9) {
        var arr = new Uint8Array(n9);
        self.crypto.getRandomValues(arr);
        return arr;
      };
    } else if (self.msCrypto && self.msCrypto.getRandomValues) {
      Rand.prototype._rand = function _rand(n9) {
        var arr = new Uint8Array(n9);
        self.msCrypto.getRandomValues(arr);
        return arr;
      };
    } else if (typeof window === "object") {
      Rand.prototype._rand = function() {
        throw new Error("Not implemented yet");
      };
    }
  } else {
    try {
      var crypto2 = l$q;
      if (typeof crypto2.randomBytes !== "function")
        throw new Error("Not supported");
      Rand.prototype._rand = function _rand(n9) {
        return crypto2.randomBytes(n9);
      };
    } catch (e11) {
    }
  }
  return exports$10$1;
}
function dew$$$1() {
  if (_dewExec$$$1)
    return exports$$$1;
  _dewExec$$$1 = true;
  var bn = dew$11$1();
  var brorand = dew$10$1();
  function MillerRabin(rand) {
    (this || _global$9$1).rand = rand || new brorand.Rand();
  }
  exports$$$1 = MillerRabin;
  MillerRabin.create = function create(rand) {
    return new MillerRabin(rand);
  };
  MillerRabin.prototype._randbelow = function _randbelow(n9) {
    var len = n9.bitLength();
    var min_bytes = Math.ceil(len / 8);
    do
      var a8 = new bn((this || _global$9$1).rand.generate(min_bytes));
    while (a8.cmp(n9) >= 0);
    return a8;
  };
  MillerRabin.prototype._randrange = function _randrange(start, stop) {
    var size = stop.sub(start);
    return start.add(this._randbelow(size));
  };
  MillerRabin.prototype.test = function test(n9, k4, cb) {
    var len = n9.bitLength();
    var red = bn.mont(n9);
    var rone = new bn(1).toRed(red);
    if (!k4)
      k4 = Math.max(1, len / 48 | 0);
    var n1 = n9.subn(1);
    for (var s7 = 0; !n1.testn(s7); s7++) {
    }
    var d6 = n9.shrn(s7);
    var rn1 = n1.toRed(red);
    var prime = true;
    for (; k4 > 0; k4--) {
      var a8 = this._randrange(new bn(2), n1);
      if (cb)
        cb(a8);
      var x4 = a8.toRed(red).redPow(d6);
      if (x4.cmp(rone) === 0 || x4.cmp(rn1) === 0)
        continue;
      for (var i8 = 1; i8 < s7; i8++) {
        x4 = x4.redSqr();
        if (x4.cmp(rone) === 0)
          return false;
        if (x4.cmp(rn1) === 0)
          break;
      }
      if (i8 === s7)
        return false;
    }
    return prime;
  };
  MillerRabin.prototype.getDivisor = function getDivisor(n9, k4) {
    var len = n9.bitLength();
    var red = bn.mont(n9);
    var rone = new bn(1).toRed(red);
    if (!k4)
      k4 = Math.max(1, len / 48 | 0);
    var n1 = n9.subn(1);
    for (var s7 = 0; !n1.testn(s7); s7++) {
    }
    var d6 = n9.shrn(s7);
    var rn1 = n1.toRed(red);
    for (; k4 > 0; k4--) {
      var a8 = this._randrange(new bn(2), n1);
      var g5 = n9.gcd(a8);
      if (g5.cmpn(1) !== 0)
        return g5;
      var x4 = a8.toRed(red).redPow(d6);
      if (x4.cmp(rone) === 0 || x4.cmp(rn1) === 0)
        continue;
      for (var i8 = 1; i8 < s7; i8++) {
        x4 = x4.redSqr();
        if (x4.cmp(rone) === 0)
          return x4.fromRed().subn(1).gcd(n9);
        if (x4.cmp(rn1) === 0)
          break;
      }
      if (i8 === s7) {
        x4 = x4.redSqr();
        return x4.fromRed().subn(1).gcd(n9);
      }
    }
    return false;
  };
  return exports$$$1;
}
function dew$_$1() {
  if (_dewExec$_$1)
    return exports$_$1;
  _dewExec$_$1 = true;
  var randomBytes2 = dew$1S();
  exports$_$1 = findPrime;
  findPrime.simpleSieve = simpleSieve;
  findPrime.fermatTest = fermatTest;
  var BN = dew$122();
  var TWENTYFOUR = new BN(24);
  var MillerRabin = dew$$$1();
  var millerRabin = new MillerRabin();
  var ONE = new BN(1);
  var TWO = new BN(2);
  var FIVE = new BN(5);
  new BN(16);
  new BN(8);
  var TEN = new BN(10);
  var THREE = new BN(3);
  new BN(7);
  var ELEVEN = new BN(11);
  var FOUR = new BN(4);
  new BN(12);
  var primes = null;
  function _getPrimes() {
    if (primes !== null)
      return primes;
    var limit = 1048576;
    var res = [];
    res[0] = 2;
    for (var i8 = 1, k4 = 3; k4 < limit; k4 += 2) {
      var sqrt = Math.ceil(Math.sqrt(k4));
      for (var j4 = 0; j4 < i8 && res[j4] <= sqrt; j4++)
        if (k4 % res[j4] === 0)
          break;
      if (i8 !== j4 && res[j4] <= sqrt)
        continue;
      res[i8++] = k4;
    }
    primes = res;
    return res;
  }
  function simpleSieve(p8) {
    var primes2 = _getPrimes();
    for (var i8 = 0; i8 < primes2.length; i8++)
      if (p8.modn(primes2[i8]) === 0) {
        if (p8.cmpn(primes2[i8]) === 0) {
          return true;
        } else {
          return false;
        }
      }
    return true;
  }
  function fermatTest(p8) {
    var red = BN.mont(p8);
    return TWO.toRed(red).redPow(p8.subn(1)).fromRed().cmpn(1) === 0;
  }
  function findPrime(bits, gen) {
    if (bits < 16) {
      if (gen === 2 || gen === 5) {
        return new BN([140, 123]);
      } else {
        return new BN([140, 39]);
      }
    }
    gen = new BN(gen);
    var num, n22;
    while (true) {
      num = new BN(randomBytes2(Math.ceil(bits / 8)));
      while (num.bitLength() > bits) {
        num.ishrn(1);
      }
      if (num.isEven()) {
        num.iadd(ONE);
      }
      if (!num.testn(1)) {
        num.iadd(TWO);
      }
      if (!gen.cmp(TWO)) {
        while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
          num.iadd(FOUR);
        }
      } else if (!gen.cmp(FIVE)) {
        while (num.mod(TEN).cmp(THREE)) {
          num.iadd(FOUR);
        }
      }
      n22 = num.shrn(1);
      if (simpleSieve(n22) && simpleSieve(num) && fermatTest(n22) && fermatTest(num) && millerRabin.test(n22) && millerRabin.test(num)) {
        return num;
      }
    }
  }
  return exports$_$1;
}
function dew$Z$1() {
  if (_dewExec$Z$1)
    return exports$Z$1;
  _dewExec$Z$1 = true;
  var Buffer3 = e$1$1.Buffer;
  var BN = dew$122();
  var MillerRabin = dew$$$1();
  var millerRabin = new MillerRabin();
  var TWENTYFOUR = new BN(24);
  var ELEVEN = new BN(11);
  var TEN = new BN(10);
  var THREE = new BN(3);
  var SEVEN = new BN(7);
  var primes = dew$_$1();
  var randomBytes2 = dew$1S();
  exports$Z$1 = DH;
  function setPublicKey(pub, enc) {
    enc = enc || "utf8";
    if (!Buffer3.isBuffer(pub)) {
      pub = new Buffer3(pub, enc);
    }
    (this || _global$8$1)._pub = new BN(pub);
    return this || _global$8$1;
  }
  function setPrivateKey(priv, enc) {
    enc = enc || "utf8";
    if (!Buffer3.isBuffer(priv)) {
      priv = new Buffer3(priv, enc);
    }
    (this || _global$8$1)._priv = new BN(priv);
    return this || _global$8$1;
  }
  var primeCache = {};
  function checkPrime(prime, generator) {
    var gen = generator.toString("hex");
    var hex = [gen, prime.toString(16)].join("_");
    if (hex in primeCache) {
      return primeCache[hex];
    }
    var error = 0;
    if (prime.isEven() || !primes.simpleSieve || !primes.fermatTest(prime) || !millerRabin.test(prime)) {
      error += 1;
      if (gen === "02" || gen === "05") {
        error += 8;
      } else {
        error += 4;
      }
      primeCache[hex] = error;
      return error;
    }
    if (!millerRabin.test(prime.shrn(1))) {
      error += 2;
    }
    var rem;
    switch (gen) {
      case "02":
        if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
          error += 8;
        }
        break;
      case "05":
        rem = prime.mod(TEN);
        if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
          error += 8;
        }
        break;
      default:
        error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  function DH(prime, generator, malleable) {
    this.setGenerator(generator);
    (this || _global$8$1).__prime = new BN(prime);
    (this || _global$8$1)._prime = BN.mont((this || _global$8$1).__prime);
    (this || _global$8$1)._primeLen = prime.length;
    (this || _global$8$1)._pub = void 0;
    (this || _global$8$1)._priv = void 0;
    (this || _global$8$1)._primeCode = void 0;
    if (malleable) {
      (this || _global$8$1).setPublicKey = setPublicKey;
      (this || _global$8$1).setPrivateKey = setPrivateKey;
    } else {
      (this || _global$8$1)._primeCode = 8;
    }
  }
  Object.defineProperty(DH.prototype, "verifyError", {
    enumerable: true,
    get: function() {
      if (typeof (this || _global$8$1)._primeCode !== "number") {
        (this || _global$8$1)._primeCode = checkPrime((this || _global$8$1).__prime, (this || _global$8$1).__gen);
      }
      return (this || _global$8$1)._primeCode;
    }
  });
  DH.prototype.generateKeys = function() {
    if (!(this || _global$8$1)._priv) {
      (this || _global$8$1)._priv = new BN(randomBytes2((this || _global$8$1)._primeLen));
    }
    (this || _global$8$1)._pub = (this || _global$8$1)._gen.toRed((this || _global$8$1)._prime).redPow((this || _global$8$1)._priv).fromRed();
    return this.getPublicKey();
  };
  DH.prototype.computeSecret = function(other) {
    other = new BN(other);
    other = other.toRed((this || _global$8$1)._prime);
    var secret = other.redPow((this || _global$8$1)._priv).fromRed();
    var out = new Buffer3(secret.toArray());
    var prime = this.getPrime();
    if (out.length < prime.length) {
      var front = new Buffer3(prime.length - out.length);
      front.fill(0);
      out = Buffer3.concat([front, out]);
    }
    return out;
  };
  DH.prototype.getPublicKey = function getPublicKey(enc) {
    return formatReturnValue((this || _global$8$1)._pub, enc);
  };
  DH.prototype.getPrivateKey = function getPrivateKey(enc) {
    return formatReturnValue((this || _global$8$1)._priv, enc);
  };
  DH.prototype.getPrime = function(enc) {
    return formatReturnValue((this || _global$8$1).__prime, enc);
  };
  DH.prototype.getGenerator = function(enc) {
    return formatReturnValue((this || _global$8$1)._gen, enc);
  };
  DH.prototype.setGenerator = function(gen, enc) {
    enc = enc || "utf8";
    if (!Buffer3.isBuffer(gen)) {
      gen = new Buffer3(gen, enc);
    }
    (this || _global$8$1).__gen = gen;
    (this || _global$8$1)._gen = new BN(gen);
    return this || _global$8$1;
  };
  function formatReturnValue(bn, enc) {
    var buf = new Buffer3(bn.toArray());
    if (!enc) {
      return buf;
    } else {
      return buf.toString(enc);
    }
  }
  return exports$Z$1;
}
function dew$Y$1() {
  if (_dewExec$Y$1)
    return exports$Y$1;
  _dewExec$Y$1 = true;
  var Buffer3 = e$1$1.Buffer;
  var generatePrime = dew$_$1();
  var primes = _primes$1;
  var DH = dew$Z$1();
  function getDiffieHellman2(mod) {
    var prime = new Buffer3(primes[mod].prime, "hex");
    var gen = new Buffer3(primes[mod].gen, "hex");
    return new DH(prime, gen);
  }
  var ENCODINGS = {
    "binary": true,
    "hex": true,
    "base64": true
  };
  function createDiffieHellman2(prime, enc, generator, genc) {
    if (Buffer3.isBuffer(enc) || ENCODINGS[enc] === void 0) {
      return createDiffieHellman2(prime, "binary", enc, generator);
    }
    enc = enc || "binary";
    genc = genc || "binary";
    generator = generator || new Buffer3([2]);
    if (!Buffer3.isBuffer(generator)) {
      generator = new Buffer3(generator, genc);
    }
    if (typeof prime === "number") {
      return new DH(generatePrime(prime, generator), generator, true);
    }
    if (!Buffer3.isBuffer(prime)) {
      prime = new Buffer3(prime, enc);
    }
    return new DH(prime, generator, true);
  }
  exports$Y$1.DiffieHellmanGroup = exports$Y$1.createDiffieHellmanGroup = exports$Y$1.getDiffieHellman = getDiffieHellman2;
  exports$Y$1.createDiffieHellman = exports$Y$1.DiffieHellman = createDiffieHellman2;
  return exports$Y$1;
}
function dew$X$1() {
  if (_dewExec$X$1)
    return module$4$1.exports;
  _dewExec$X$1 = true;
  (function(module3, exports11) {
    function assert2(val, msg) {
      if (!val)
        throw new Error(msg || "Assertion failed");
    }
    function inherits4(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function() {
      };
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }
    function BN(number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }
      (this || _global$7$1).negative = 0;
      (this || _global$7$1).words = null;
      (this || _global$7$1).length = 0;
      (this || _global$7$1).red = null;
      if (number !== null) {
        if (base === "le" || base === "be") {
          endian = base;
          base = 10;
        }
        this._init(number || 0, base || 10, endian || "be");
      }
    }
    if (typeof module3 === "object") {
      module3.exports = BN;
    } else {
      exports11.BN = BN;
    }
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer3;
    try {
      if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
        Buffer3 = window.Buffer;
      } else {
        Buffer3 = e$1$1.Buffer;
      }
    } catch (e11) {
    }
    BN.isBN = function isBN(num) {
      if (num instanceof BN) {
        return true;
      }
      return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
      if (left.cmp(right) > 0)
        return left;
      return right;
    };
    BN.min = function min(left, right) {
      if (left.cmp(right) < 0)
        return left;
      return right;
    };
    BN.prototype._init = function init2(number, base, endian) {
      if (typeof number === "number") {
        return this._initNumber(number, base, endian);
      }
      if (typeof number === "object") {
        return this._initArray(number, base, endian);
      }
      if (base === "hex") {
        base = 16;
      }
      assert2(base === (base | 0) && base >= 2 && base <= 36);
      number = number.toString().replace(/\s+/g, "");
      var start = 0;
      if (number[0] === "-") {
        start++;
        (this || _global$7$1).negative = 1;
      }
      if (start < number.length) {
        if (base === 16) {
          this._parseHex(number, start, endian);
        } else {
          this._parseBase(number, base, start);
          if (endian === "le") {
            this._initArray(this.toArray(), base, endian);
          }
        }
      }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
      if (number < 0) {
        (this || _global$7$1).negative = 1;
        number = -number;
      }
      if (number < 67108864) {
        (this || _global$7$1).words = [number & 67108863];
        (this || _global$7$1).length = 1;
      } else if (number < 4503599627370496) {
        (this || _global$7$1).words = [number & 67108863, number / 67108864 & 67108863];
        (this || _global$7$1).length = 2;
      } else {
        assert2(number < 9007199254740992);
        (this || _global$7$1).words = [number & 67108863, number / 67108864 & 67108863, 1];
        (this || _global$7$1).length = 3;
      }
      if (endian !== "le")
        return;
      this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
      assert2(typeof number.length === "number");
      if (number.length <= 0) {
        (this || _global$7$1).words = [0];
        (this || _global$7$1).length = 1;
        return this || _global$7$1;
      }
      (this || _global$7$1).length = Math.ceil(number.length / 3);
      (this || _global$7$1).words = new Array((this || _global$7$1).length);
      for (var i8 = 0; i8 < (this || _global$7$1).length; i8++) {
        (this || _global$7$1).words[i8] = 0;
      }
      var j4, w4;
      var off2 = 0;
      if (endian === "be") {
        for (i8 = number.length - 1, j4 = 0; i8 >= 0; i8 -= 3) {
          w4 = number[i8] | number[i8 - 1] << 8 | number[i8 - 2] << 16;
          (this || _global$7$1).words[j4] |= w4 << off2 & 67108863;
          (this || _global$7$1).words[j4 + 1] = w4 >>> 26 - off2 & 67108863;
          off2 += 24;
          if (off2 >= 26) {
            off2 -= 26;
            j4++;
          }
        }
      } else if (endian === "le") {
        for (i8 = 0, j4 = 0; i8 < number.length; i8 += 3) {
          w4 = number[i8] | number[i8 + 1] << 8 | number[i8 + 2] << 16;
          (this || _global$7$1).words[j4] |= w4 << off2 & 67108863;
          (this || _global$7$1).words[j4 + 1] = w4 >>> 26 - off2 & 67108863;
          off2 += 24;
          if (off2 >= 26) {
            off2 -= 26;
            j4++;
          }
        }
      }
      return this._strip();
    };
    function parseHex4Bits(string, index) {
      var c8 = string.charCodeAt(index);
      if (c8 >= 48 && c8 <= 57) {
        return c8 - 48;
      } else if (c8 >= 65 && c8 <= 70) {
        return c8 - 55;
      } else if (c8 >= 97 && c8 <= 102) {
        return c8 - 87;
      } else {
        assert2(false, "Invalid character in " + string);
      }
    }
    function parseHexByte(string, lowerBound, index) {
      var r9 = parseHex4Bits(string, index);
      if (index - 1 >= lowerBound) {
        r9 |= parseHex4Bits(string, index - 1) << 4;
      }
      return r9;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
      (this || _global$7$1).length = Math.ceil((number.length - start) / 6);
      (this || _global$7$1).words = new Array((this || _global$7$1).length);
      for (var i8 = 0; i8 < (this || _global$7$1).length; i8++) {
        (this || _global$7$1).words[i8] = 0;
      }
      var off2 = 0;
      var j4 = 0;
      var w4;
      if (endian === "be") {
        for (i8 = number.length - 1; i8 >= start; i8 -= 2) {
          w4 = parseHexByte(number, start, i8) << off2;
          (this || _global$7$1).words[j4] |= w4 & 67108863;
          if (off2 >= 18) {
            off2 -= 18;
            j4 += 1;
            (this || _global$7$1).words[j4] |= w4 >>> 26;
          } else {
            off2 += 8;
          }
        }
      } else {
        var parseLength = number.length - start;
        for (i8 = parseLength % 2 === 0 ? start + 1 : start; i8 < number.length; i8 += 2) {
          w4 = parseHexByte(number, start, i8) << off2;
          (this || _global$7$1).words[j4] |= w4 & 67108863;
          if (off2 >= 18) {
            off2 -= 18;
            j4 += 1;
            (this || _global$7$1).words[j4] |= w4 >>> 26;
          } else {
            off2 += 8;
          }
        }
      }
      this._strip();
    };
    function parseBase(str, start, end, mul) {
      var r9 = 0;
      var b5 = 0;
      var len = Math.min(str.length, end);
      for (var i8 = start; i8 < len; i8++) {
        var c8 = str.charCodeAt(i8) - 48;
        r9 *= mul;
        if (c8 >= 49) {
          b5 = c8 - 49 + 10;
        } else if (c8 >= 17) {
          b5 = c8 - 17 + 10;
        } else {
          b5 = c8;
        }
        assert2(c8 >= 0 && b5 < mul, "Invalid character");
        r9 += b5;
      }
      return r9;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
      (this || _global$7$1).words = [0];
      (this || _global$7$1).length = 1;
      for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
        limbLen++;
      }
      limbLen--;
      limbPow = limbPow / base | 0;
      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;
      var word = 0;
      for (var i8 = start; i8 < end; i8 += limbLen) {
        word = parseBase(number, i8, i8 + limbLen, base);
        this.imuln(limbPow);
        if ((this || _global$7$1).words[0] + word < 67108864) {
          (this || _global$7$1).words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i8, number.length, base);
        for (i8 = 0; i8 < mod; i8++) {
          pow *= base;
        }
        this.imuln(pow);
        if ((this || _global$7$1).words[0] + word < 67108864) {
          (this || _global$7$1).words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
      this._strip();
    };
    BN.prototype.copy = function copy(dest) {
      dest.words = new Array((this || _global$7$1).length);
      for (var i8 = 0; i8 < (this || _global$7$1).length; i8++) {
        dest.words[i8] = (this || _global$7$1).words[i8];
      }
      dest.length = (this || _global$7$1).length;
      dest.negative = (this || _global$7$1).negative;
      dest.red = (this || _global$7$1).red;
    };
    function move(dest, src) {
      dest.words = src.words;
      dest.length = src.length;
      dest.negative = src.negative;
      dest.red = src.red;
    }
    BN.prototype._move = function _move(dest) {
      move(dest, this || _global$7$1);
    };
    BN.prototype.clone = function clone() {
      var r9 = new BN(null);
      this.copy(r9);
      return r9;
    };
    BN.prototype._expand = function _expand(size) {
      while ((this || _global$7$1).length < size) {
        (this || _global$7$1).words[(this || _global$7$1).length++] = 0;
      }
      return this || _global$7$1;
    };
    BN.prototype._strip = function strip() {
      while ((this || _global$7$1).length > 1 && (this || _global$7$1).words[(this || _global$7$1).length - 1] === 0) {
        (this || _global$7$1).length--;
      }
      return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
      if ((this || _global$7$1).length === 1 && (this || _global$7$1).words[0] === 0) {
        (this || _global$7$1).negative = 0;
      }
      return this || _global$7$1;
    };
    if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
      try {
        BN.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect3;
      } catch (e11) {
        BN.prototype.inspect = inspect3;
      }
    } else {
      BN.prototype.inspect = inspect3;
    }
    function inspect3() {
      return ((this || _global$7$1).red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    }
    var zeros = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"];
    var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
    var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
    BN.prototype.toString = function toString3(base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;
      var out;
      if (base === 16 || base === "hex") {
        out = "";
        var off2 = 0;
        var carry = 0;
        for (var i8 = 0; i8 < (this || _global$7$1).length; i8++) {
          var w4 = (this || _global$7$1).words[i8];
          var word = ((w4 << off2 | carry) & 16777215).toString(16);
          carry = w4 >>> 24 - off2 & 16777215;
          if (carry !== 0 || i8 !== (this || _global$7$1).length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }
          off2 += 2;
          if (off2 >= 26) {
            off2 -= 26;
            i8--;
          }
        }
        if (carry !== 0) {
          out = carry.toString(16) + out;
        }
        while (out.length % padding !== 0) {
          out = "0" + out;
        }
        if ((this || _global$7$1).negative !== 0) {
          out = "-" + out;
        }
        return out;
      }
      if (base === (base | 0) && base >= 2 && base <= 36) {
        var groupSize = groupSizes[base];
        var groupBase = groupBases[base];
        out = "";
        var c8 = this.clone();
        c8.negative = 0;
        while (!c8.isZero()) {
          var r9 = c8.modrn(groupBase).toString(base);
          c8 = c8.idivn(groupBase);
          if (!c8.isZero()) {
            out = zeros[groupSize - r9.length] + r9 + out;
          } else {
            out = r9 + out;
          }
        }
        if (this.isZero()) {
          out = "0" + out;
        }
        while (out.length % padding !== 0) {
          out = "0" + out;
        }
        if ((this || _global$7$1).negative !== 0) {
          out = "-" + out;
        }
        return out;
      }
      assert2(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
      var ret = (this || _global$7$1).words[0];
      if ((this || _global$7$1).length === 2) {
        ret += (this || _global$7$1).words[1] * 67108864;
      } else if ((this || _global$7$1).length === 3 && (this || _global$7$1).words[2] === 1) {
        ret += 4503599627370496 + (this || _global$7$1).words[1] * 67108864;
      } else if ((this || _global$7$1).length > 2) {
        assert2(false, "Number can only safely store up to 53 bits");
      }
      return (this || _global$7$1).negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON2() {
      return this.toString(16, 2);
    };
    if (Buffer3) {
      BN.prototype.toBuffer = function toBuffer(endian, length) {
        return this.toArrayLike(Buffer3, endian, length);
      };
    }
    BN.prototype.toArray = function toArray2(endian, length) {
      return this.toArrayLike(Array, endian, length);
    };
    var allocate = function allocate2(ArrayType, size) {
      if (ArrayType.allocUnsafe) {
        return ArrayType.allocUnsafe(size);
      }
      return new ArrayType(size);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
      this._strip();
      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert2(byteLength <= reqLength, "byte array longer than desired length");
      assert2(reqLength > 0, "Requested array length <= 0");
      var res = allocate(ArrayType, reqLength);
      var postfix = endian === "le" ? "LE" : "BE";
      this["_toArrayLike" + postfix](res, byteLength);
      return res;
    };
    BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
      var position = 0;
      var carry = 0;
      for (var i8 = 0, shift = 0; i8 < (this || _global$7$1).length; i8++) {
        var word = (this || _global$7$1).words[i8] << shift | carry;
        res[position++] = word & 255;
        if (position < res.length) {
          res[position++] = word >> 8 & 255;
        }
        if (position < res.length) {
          res[position++] = word >> 16 & 255;
        }
        if (shift === 6) {
          if (position < res.length) {
            res[position++] = word >> 24 & 255;
          }
          carry = 0;
          shift = 0;
        } else {
          carry = word >>> 24;
          shift += 2;
        }
      }
      if (position < res.length) {
        res[position++] = carry;
        while (position < res.length) {
          res[position++] = 0;
        }
      }
    };
    BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
      var position = res.length - 1;
      var carry = 0;
      for (var i8 = 0, shift = 0; i8 < (this || _global$7$1).length; i8++) {
        var word = (this || _global$7$1).words[i8] << shift | carry;
        res[position--] = word & 255;
        if (position >= 0) {
          res[position--] = word >> 8 & 255;
        }
        if (position >= 0) {
          res[position--] = word >> 16 & 255;
        }
        if (shift === 6) {
          if (position >= 0) {
            res[position--] = word >> 24 & 255;
          }
          carry = 0;
          shift = 0;
        } else {
          carry = word >>> 24;
          shift += 2;
        }
      }
      if (position >= 0) {
        res[position--] = carry;
        while (position >= 0) {
          res[position--] = 0;
        }
      }
    };
    if (Math.clz32) {
      BN.prototype._countBits = function _countBits(w4) {
        return 32 - Math.clz32(w4);
      };
    } else {
      BN.prototype._countBits = function _countBits(w4) {
        var t8 = w4;
        var r9 = 0;
        if (t8 >= 4096) {
          r9 += 13;
          t8 >>>= 13;
        }
        if (t8 >= 64) {
          r9 += 7;
          t8 >>>= 7;
        }
        if (t8 >= 8) {
          r9 += 4;
          t8 >>>= 4;
        }
        if (t8 >= 2) {
          r9 += 2;
          t8 >>>= 2;
        }
        return r9 + t8;
      };
    }
    BN.prototype._zeroBits = function _zeroBits(w4) {
      if (w4 === 0)
        return 26;
      var t8 = w4;
      var r9 = 0;
      if ((t8 & 8191) === 0) {
        r9 += 13;
        t8 >>>= 13;
      }
      if ((t8 & 127) === 0) {
        r9 += 7;
        t8 >>>= 7;
      }
      if ((t8 & 15) === 0) {
        r9 += 4;
        t8 >>>= 4;
      }
      if ((t8 & 3) === 0) {
        r9 += 2;
        t8 >>>= 2;
      }
      if ((t8 & 1) === 0) {
        r9++;
      }
      return r9;
    };
    BN.prototype.bitLength = function bitLength() {
      var w4 = (this || _global$7$1).words[(this || _global$7$1).length - 1];
      var hi = this._countBits(w4);
      return ((this || _global$7$1).length - 1) * 26 + hi;
    };
    function toBitArray(num) {
      var w4 = new Array(num.bitLength());
      for (var bit = 0; bit < w4.length; bit++) {
        var off2 = bit / 26 | 0;
        var wbit = bit % 26;
        w4[bit] = num.words[off2] >>> wbit & 1;
      }
      return w4;
    }
    BN.prototype.zeroBits = function zeroBits() {
      if (this.isZero())
        return 0;
      var r9 = 0;
      for (var i8 = 0; i8 < (this || _global$7$1).length; i8++) {
        var b5 = this._zeroBits((this || _global$7$1).words[i8]);
        r9 += b5;
        if (b5 !== 26)
          break;
      }
      return r9;
    };
    BN.prototype.byteLength = function byteLength() {
      return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
      if ((this || _global$7$1).negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }
      return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }
      return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
      return (this || _global$7$1).negative !== 0;
    };
    BN.prototype.neg = function neg() {
      return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
      if (!this.isZero()) {
        (this || _global$7$1).negative ^= 1;
      }
      return this || _global$7$1;
    };
    BN.prototype.iuor = function iuor(num) {
      while ((this || _global$7$1).length < num.length) {
        (this || _global$7$1).words[(this || _global$7$1).length++] = 0;
      }
      for (var i8 = 0; i8 < num.length; i8++) {
        (this || _global$7$1).words[i8] = (this || _global$7$1).words[i8] | num.words[i8];
      }
      return this._strip();
    };
    BN.prototype.ior = function ior(num) {
      assert2(((this || _global$7$1).negative | num.negative) === 0);
      return this.iuor(num);
    };
    BN.prototype.or = function or(num) {
      if ((this || _global$7$1).length > num.length)
        return this.clone().ior(num);
      return num.clone().ior(this || _global$7$1);
    };
    BN.prototype.uor = function uor(num) {
      if ((this || _global$7$1).length > num.length)
        return this.clone().iuor(num);
      return num.clone().iuor(this || _global$7$1);
    };
    BN.prototype.iuand = function iuand(num) {
      var b5;
      if ((this || _global$7$1).length > num.length) {
        b5 = num;
      } else {
        b5 = this || _global$7$1;
      }
      for (var i8 = 0; i8 < b5.length; i8++) {
        (this || _global$7$1).words[i8] = (this || _global$7$1).words[i8] & num.words[i8];
      }
      (this || _global$7$1).length = b5.length;
      return this._strip();
    };
    BN.prototype.iand = function iand(num) {
      assert2(((this || _global$7$1).negative | num.negative) === 0);
      return this.iuand(num);
    };
    BN.prototype.and = function and(num) {
      if ((this || _global$7$1).length > num.length)
        return this.clone().iand(num);
      return num.clone().iand(this || _global$7$1);
    };
    BN.prototype.uand = function uand(num) {
      if ((this || _global$7$1).length > num.length)
        return this.clone().iuand(num);
      return num.clone().iuand(this || _global$7$1);
    };
    BN.prototype.iuxor = function iuxor(num) {
      var a8;
      var b5;
      if ((this || _global$7$1).length > num.length) {
        a8 = this || _global$7$1;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$7$1;
      }
      for (var i8 = 0; i8 < b5.length; i8++) {
        (this || _global$7$1).words[i8] = a8.words[i8] ^ b5.words[i8];
      }
      if ((this || _global$7$1) !== a8) {
        for (; i8 < a8.length; i8++) {
          (this || _global$7$1).words[i8] = a8.words[i8];
        }
      }
      (this || _global$7$1).length = a8.length;
      return this._strip();
    };
    BN.prototype.ixor = function ixor(num) {
      assert2(((this || _global$7$1).negative | num.negative) === 0);
      return this.iuxor(num);
    };
    BN.prototype.xor = function xor(num) {
      if ((this || _global$7$1).length > num.length)
        return this.clone().ixor(num);
      return num.clone().ixor(this || _global$7$1);
    };
    BN.prototype.uxor = function uxor(num) {
      if ((this || _global$7$1).length > num.length)
        return this.clone().iuxor(num);
      return num.clone().iuxor(this || _global$7$1);
    };
    BN.prototype.inotn = function inotn(width) {
      assert2(typeof width === "number" && width >= 0);
      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;
      this._expand(bytesNeeded);
      if (bitsLeft > 0) {
        bytesNeeded--;
      }
      for (var i8 = 0; i8 < bytesNeeded; i8++) {
        (this || _global$7$1).words[i8] = ~(this || _global$7$1).words[i8] & 67108863;
      }
      if (bitsLeft > 0) {
        (this || _global$7$1).words[i8] = ~(this || _global$7$1).words[i8] & 67108863 >> 26 - bitsLeft;
      }
      return this._strip();
    };
    BN.prototype.notn = function notn(width) {
      return this.clone().inotn(width);
    };
    BN.prototype.setn = function setn(bit, val) {
      assert2(typeof bit === "number" && bit >= 0);
      var off2 = bit / 26 | 0;
      var wbit = bit % 26;
      this._expand(off2 + 1);
      if (val) {
        (this || _global$7$1).words[off2] = (this || _global$7$1).words[off2] | 1 << wbit;
      } else {
        (this || _global$7$1).words[off2] = (this || _global$7$1).words[off2] & ~(1 << wbit);
      }
      return this._strip();
    };
    BN.prototype.iadd = function iadd(num) {
      var r9;
      if ((this || _global$7$1).negative !== 0 && num.negative === 0) {
        (this || _global$7$1).negative = 0;
        r9 = this.isub(num);
        (this || _global$7$1).negative ^= 1;
        return this._normSign();
      } else if ((this || _global$7$1).negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r9 = this.isub(num);
        num.negative = 1;
        return r9._normSign();
      }
      var a8, b5;
      if ((this || _global$7$1).length > num.length) {
        a8 = this || _global$7$1;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$7$1;
      }
      var carry = 0;
      for (var i8 = 0; i8 < b5.length; i8++) {
        r9 = (a8.words[i8] | 0) + (b5.words[i8] | 0) + carry;
        (this || _global$7$1).words[i8] = r9 & 67108863;
        carry = r9 >>> 26;
      }
      for (; carry !== 0 && i8 < a8.length; i8++) {
        r9 = (a8.words[i8] | 0) + carry;
        (this || _global$7$1).words[i8] = r9 & 67108863;
        carry = r9 >>> 26;
      }
      (this || _global$7$1).length = a8.length;
      if (carry !== 0) {
        (this || _global$7$1).words[(this || _global$7$1).length] = carry;
        (this || _global$7$1).length++;
      } else if (a8 !== (this || _global$7$1)) {
        for (; i8 < a8.length; i8++) {
          (this || _global$7$1).words[i8] = a8.words[i8];
        }
      }
      return this || _global$7$1;
    };
    BN.prototype.add = function add(num) {
      var res;
      if (num.negative !== 0 && (this || _global$7$1).negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && (this || _global$7$1).negative !== 0) {
        (this || _global$7$1).negative = 0;
        res = num.sub(this || _global$7$1);
        (this || _global$7$1).negative = 1;
        return res;
      }
      if ((this || _global$7$1).length > num.length)
        return this.clone().iadd(num);
      return num.clone().iadd(this || _global$7$1);
    };
    BN.prototype.isub = function isub(num) {
      if (num.negative !== 0) {
        num.negative = 0;
        var r9 = this.iadd(num);
        num.negative = 1;
        return r9._normSign();
      } else if ((this || _global$7$1).negative !== 0) {
        (this || _global$7$1).negative = 0;
        this.iadd(num);
        (this || _global$7$1).negative = 1;
        return this._normSign();
      }
      var cmp = this.cmp(num);
      if (cmp === 0) {
        (this || _global$7$1).negative = 0;
        (this || _global$7$1).length = 1;
        (this || _global$7$1).words[0] = 0;
        return this || _global$7$1;
      }
      var a8, b5;
      if (cmp > 0) {
        a8 = this || _global$7$1;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$7$1;
      }
      var carry = 0;
      for (var i8 = 0; i8 < b5.length; i8++) {
        r9 = (a8.words[i8] | 0) - (b5.words[i8] | 0) + carry;
        carry = r9 >> 26;
        (this || _global$7$1).words[i8] = r9 & 67108863;
      }
      for (; carry !== 0 && i8 < a8.length; i8++) {
        r9 = (a8.words[i8] | 0) + carry;
        carry = r9 >> 26;
        (this || _global$7$1).words[i8] = r9 & 67108863;
      }
      if (carry === 0 && i8 < a8.length && a8 !== (this || _global$7$1)) {
        for (; i8 < a8.length; i8++) {
          (this || _global$7$1).words[i8] = a8.words[i8];
        }
      }
      (this || _global$7$1).length = Math.max((this || _global$7$1).length, i8);
      if (a8 !== (this || _global$7$1)) {
        (this || _global$7$1).negative = 1;
      }
      return this._strip();
    };
    BN.prototype.sub = function sub(num) {
      return this.clone().isub(num);
    };
    function smallMulTo(self2, num, out) {
      out.negative = num.negative ^ self2.negative;
      var len = self2.length + num.length | 0;
      out.length = len;
      len = len - 1 | 0;
      var a8 = self2.words[0] | 0;
      var b5 = num.words[0] | 0;
      var r9 = a8 * b5;
      var lo = r9 & 67108863;
      var carry = r9 / 67108864 | 0;
      out.words[0] = lo;
      for (var k4 = 1; k4 < len; k4++) {
        var ncarry = carry >>> 26;
        var rword = carry & 67108863;
        var maxJ = Math.min(k4, num.length - 1);
        for (var j4 = Math.max(0, k4 - self2.length + 1); j4 <= maxJ; j4++) {
          var i8 = k4 - j4 | 0;
          a8 = self2.words[i8] | 0;
          b5 = num.words[j4] | 0;
          r9 = a8 * b5 + rword;
          ncarry += r9 / 67108864 | 0;
          rword = r9 & 67108863;
        }
        out.words[k4] = rword | 0;
        carry = ncarry | 0;
      }
      if (carry !== 0) {
        out.words[k4] = carry | 0;
      } else {
        out.length--;
      }
      return out._strip();
    }
    var comb10MulTo = function comb10MulTo2(self2, num, out) {
      var a8 = self2.words;
      var b5 = num.words;
      var o9 = out.words;
      var c8 = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a8[0] | 0;
      var al0 = a0 & 8191;
      var ah0 = a0 >>> 13;
      var a1 = a8[1] | 0;
      var al1 = a1 & 8191;
      var ah1 = a1 >>> 13;
      var a22 = a8[2] | 0;
      var al2 = a22 & 8191;
      var ah2 = a22 >>> 13;
      var a32 = a8[3] | 0;
      var al3 = a32 & 8191;
      var ah3 = a32 >>> 13;
      var a42 = a8[4] | 0;
      var al4 = a42 & 8191;
      var ah4 = a42 >>> 13;
      var a52 = a8[5] | 0;
      var al5 = a52 & 8191;
      var ah5 = a52 >>> 13;
      var a62 = a8[6] | 0;
      var al6 = a62 & 8191;
      var ah6 = a62 >>> 13;
      var a72 = a8[7] | 0;
      var al7 = a72 & 8191;
      var ah7 = a72 >>> 13;
      var a82 = a8[8] | 0;
      var al8 = a82 & 8191;
      var ah8 = a82 >>> 13;
      var a9 = a8[9] | 0;
      var al9 = a9 & 8191;
      var ah9 = a9 >>> 13;
      var b0 = b5[0] | 0;
      var bl0 = b0 & 8191;
      var bh0 = b0 >>> 13;
      var b1 = b5[1] | 0;
      var bl1 = b1 & 8191;
      var bh1 = b1 >>> 13;
      var b22 = b5[2] | 0;
      var bl2 = b22 & 8191;
      var bh2 = b22 >>> 13;
      var b32 = b5[3] | 0;
      var bl3 = b32 & 8191;
      var bh3 = b32 >>> 13;
      var b42 = b5[4] | 0;
      var bl4 = b42 & 8191;
      var bh4 = b42 >>> 13;
      var b52 = b5[5] | 0;
      var bl5 = b52 & 8191;
      var bh5 = b52 >>> 13;
      var b6 = b5[6] | 0;
      var bl6 = b6 & 8191;
      var bh6 = b6 >>> 13;
      var b7 = b5[7] | 0;
      var bl7 = b7 & 8191;
      var bh7 = b7 >>> 13;
      var b8 = b5[8] | 0;
      var bl8 = b8 & 8191;
      var bh8 = b8 >>> 13;
      var b9 = b5[9] | 0;
      var bl9 = b9 & 8191;
      var bh9 = b9 >>> 13;
      out.negative = self2.negative ^ num.negative;
      out.length = 19;
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = mid + Math.imul(ah0, bl0) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
      w0 &= 67108863;
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = mid + Math.imul(ah1, bl0) | 0;
      hi = Math.imul(ah1, bh0);
      lo = lo + Math.imul(al0, bl1) | 0;
      mid = mid + Math.imul(al0, bh1) | 0;
      mid = mid + Math.imul(ah0, bl1) | 0;
      hi = hi + Math.imul(ah0, bh1) | 0;
      var w1 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
      w1 &= 67108863;
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = mid + Math.imul(ah2, bl0) | 0;
      hi = Math.imul(ah2, bh0);
      lo = lo + Math.imul(al1, bl1) | 0;
      mid = mid + Math.imul(al1, bh1) | 0;
      mid = mid + Math.imul(ah1, bl1) | 0;
      hi = hi + Math.imul(ah1, bh1) | 0;
      lo = lo + Math.imul(al0, bl2) | 0;
      mid = mid + Math.imul(al0, bh2) | 0;
      mid = mid + Math.imul(ah0, bl2) | 0;
      hi = hi + Math.imul(ah0, bh2) | 0;
      var w22 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w22 >>> 26) | 0;
      w22 &= 67108863;
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = mid + Math.imul(ah3, bl0) | 0;
      hi = Math.imul(ah3, bh0);
      lo = lo + Math.imul(al2, bl1) | 0;
      mid = mid + Math.imul(al2, bh1) | 0;
      mid = mid + Math.imul(ah2, bl1) | 0;
      hi = hi + Math.imul(ah2, bh1) | 0;
      lo = lo + Math.imul(al1, bl2) | 0;
      mid = mid + Math.imul(al1, bh2) | 0;
      mid = mid + Math.imul(ah1, bl2) | 0;
      hi = hi + Math.imul(ah1, bh2) | 0;
      lo = lo + Math.imul(al0, bl3) | 0;
      mid = mid + Math.imul(al0, bh3) | 0;
      mid = mid + Math.imul(ah0, bl3) | 0;
      hi = hi + Math.imul(ah0, bh3) | 0;
      var w32 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w32 >>> 26) | 0;
      w32 &= 67108863;
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = mid + Math.imul(ah4, bl0) | 0;
      hi = Math.imul(ah4, bh0);
      lo = lo + Math.imul(al3, bl1) | 0;
      mid = mid + Math.imul(al3, bh1) | 0;
      mid = mid + Math.imul(ah3, bl1) | 0;
      hi = hi + Math.imul(ah3, bh1) | 0;
      lo = lo + Math.imul(al2, bl2) | 0;
      mid = mid + Math.imul(al2, bh2) | 0;
      mid = mid + Math.imul(ah2, bl2) | 0;
      hi = hi + Math.imul(ah2, bh2) | 0;
      lo = lo + Math.imul(al1, bl3) | 0;
      mid = mid + Math.imul(al1, bh3) | 0;
      mid = mid + Math.imul(ah1, bl3) | 0;
      hi = hi + Math.imul(ah1, bh3) | 0;
      lo = lo + Math.imul(al0, bl4) | 0;
      mid = mid + Math.imul(al0, bh4) | 0;
      mid = mid + Math.imul(ah0, bl4) | 0;
      hi = hi + Math.imul(ah0, bh4) | 0;
      var w4 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
      w4 &= 67108863;
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = mid + Math.imul(ah5, bl0) | 0;
      hi = Math.imul(ah5, bh0);
      lo = lo + Math.imul(al4, bl1) | 0;
      mid = mid + Math.imul(al4, bh1) | 0;
      mid = mid + Math.imul(ah4, bl1) | 0;
      hi = hi + Math.imul(ah4, bh1) | 0;
      lo = lo + Math.imul(al3, bl2) | 0;
      mid = mid + Math.imul(al3, bh2) | 0;
      mid = mid + Math.imul(ah3, bl2) | 0;
      hi = hi + Math.imul(ah3, bh2) | 0;
      lo = lo + Math.imul(al2, bl3) | 0;
      mid = mid + Math.imul(al2, bh3) | 0;
      mid = mid + Math.imul(ah2, bl3) | 0;
      hi = hi + Math.imul(ah2, bh3) | 0;
      lo = lo + Math.imul(al1, bl4) | 0;
      mid = mid + Math.imul(al1, bh4) | 0;
      mid = mid + Math.imul(ah1, bl4) | 0;
      hi = hi + Math.imul(ah1, bh4) | 0;
      lo = lo + Math.imul(al0, bl5) | 0;
      mid = mid + Math.imul(al0, bh5) | 0;
      mid = mid + Math.imul(ah0, bl5) | 0;
      hi = hi + Math.imul(ah0, bh5) | 0;
      var w5 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
      w5 &= 67108863;
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = mid + Math.imul(ah6, bl0) | 0;
      hi = Math.imul(ah6, bh0);
      lo = lo + Math.imul(al5, bl1) | 0;
      mid = mid + Math.imul(al5, bh1) | 0;
      mid = mid + Math.imul(ah5, bl1) | 0;
      hi = hi + Math.imul(ah5, bh1) | 0;
      lo = lo + Math.imul(al4, bl2) | 0;
      mid = mid + Math.imul(al4, bh2) | 0;
      mid = mid + Math.imul(ah4, bl2) | 0;
      hi = hi + Math.imul(ah4, bh2) | 0;
      lo = lo + Math.imul(al3, bl3) | 0;
      mid = mid + Math.imul(al3, bh3) | 0;
      mid = mid + Math.imul(ah3, bl3) | 0;
      hi = hi + Math.imul(ah3, bh3) | 0;
      lo = lo + Math.imul(al2, bl4) | 0;
      mid = mid + Math.imul(al2, bh4) | 0;
      mid = mid + Math.imul(ah2, bl4) | 0;
      hi = hi + Math.imul(ah2, bh4) | 0;
      lo = lo + Math.imul(al1, bl5) | 0;
      mid = mid + Math.imul(al1, bh5) | 0;
      mid = mid + Math.imul(ah1, bl5) | 0;
      hi = hi + Math.imul(ah1, bh5) | 0;
      lo = lo + Math.imul(al0, bl6) | 0;
      mid = mid + Math.imul(al0, bh6) | 0;
      mid = mid + Math.imul(ah0, bl6) | 0;
      hi = hi + Math.imul(ah0, bh6) | 0;
      var w6 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
      w6 &= 67108863;
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = mid + Math.imul(ah7, bl0) | 0;
      hi = Math.imul(ah7, bh0);
      lo = lo + Math.imul(al6, bl1) | 0;
      mid = mid + Math.imul(al6, bh1) | 0;
      mid = mid + Math.imul(ah6, bl1) | 0;
      hi = hi + Math.imul(ah6, bh1) | 0;
      lo = lo + Math.imul(al5, bl2) | 0;
      mid = mid + Math.imul(al5, bh2) | 0;
      mid = mid + Math.imul(ah5, bl2) | 0;
      hi = hi + Math.imul(ah5, bh2) | 0;
      lo = lo + Math.imul(al4, bl3) | 0;
      mid = mid + Math.imul(al4, bh3) | 0;
      mid = mid + Math.imul(ah4, bl3) | 0;
      hi = hi + Math.imul(ah4, bh3) | 0;
      lo = lo + Math.imul(al3, bl4) | 0;
      mid = mid + Math.imul(al3, bh4) | 0;
      mid = mid + Math.imul(ah3, bl4) | 0;
      hi = hi + Math.imul(ah3, bh4) | 0;
      lo = lo + Math.imul(al2, bl5) | 0;
      mid = mid + Math.imul(al2, bh5) | 0;
      mid = mid + Math.imul(ah2, bl5) | 0;
      hi = hi + Math.imul(ah2, bh5) | 0;
      lo = lo + Math.imul(al1, bl6) | 0;
      mid = mid + Math.imul(al1, bh6) | 0;
      mid = mid + Math.imul(ah1, bl6) | 0;
      hi = hi + Math.imul(ah1, bh6) | 0;
      lo = lo + Math.imul(al0, bl7) | 0;
      mid = mid + Math.imul(al0, bh7) | 0;
      mid = mid + Math.imul(ah0, bl7) | 0;
      hi = hi + Math.imul(ah0, bh7) | 0;
      var w7 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
      w7 &= 67108863;
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = mid + Math.imul(ah8, bl0) | 0;
      hi = Math.imul(ah8, bh0);
      lo = lo + Math.imul(al7, bl1) | 0;
      mid = mid + Math.imul(al7, bh1) | 0;
      mid = mid + Math.imul(ah7, bl1) | 0;
      hi = hi + Math.imul(ah7, bh1) | 0;
      lo = lo + Math.imul(al6, bl2) | 0;
      mid = mid + Math.imul(al6, bh2) | 0;
      mid = mid + Math.imul(ah6, bl2) | 0;
      hi = hi + Math.imul(ah6, bh2) | 0;
      lo = lo + Math.imul(al5, bl3) | 0;
      mid = mid + Math.imul(al5, bh3) | 0;
      mid = mid + Math.imul(ah5, bl3) | 0;
      hi = hi + Math.imul(ah5, bh3) | 0;
      lo = lo + Math.imul(al4, bl4) | 0;
      mid = mid + Math.imul(al4, bh4) | 0;
      mid = mid + Math.imul(ah4, bl4) | 0;
      hi = hi + Math.imul(ah4, bh4) | 0;
      lo = lo + Math.imul(al3, bl5) | 0;
      mid = mid + Math.imul(al3, bh5) | 0;
      mid = mid + Math.imul(ah3, bl5) | 0;
      hi = hi + Math.imul(ah3, bh5) | 0;
      lo = lo + Math.imul(al2, bl6) | 0;
      mid = mid + Math.imul(al2, bh6) | 0;
      mid = mid + Math.imul(ah2, bl6) | 0;
      hi = hi + Math.imul(ah2, bh6) | 0;
      lo = lo + Math.imul(al1, bl7) | 0;
      mid = mid + Math.imul(al1, bh7) | 0;
      mid = mid + Math.imul(ah1, bl7) | 0;
      hi = hi + Math.imul(ah1, bh7) | 0;
      lo = lo + Math.imul(al0, bl8) | 0;
      mid = mid + Math.imul(al0, bh8) | 0;
      mid = mid + Math.imul(ah0, bl8) | 0;
      hi = hi + Math.imul(ah0, bh8) | 0;
      var w8 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
      w8 &= 67108863;
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = mid + Math.imul(ah9, bl0) | 0;
      hi = Math.imul(ah9, bh0);
      lo = lo + Math.imul(al8, bl1) | 0;
      mid = mid + Math.imul(al8, bh1) | 0;
      mid = mid + Math.imul(ah8, bl1) | 0;
      hi = hi + Math.imul(ah8, bh1) | 0;
      lo = lo + Math.imul(al7, bl2) | 0;
      mid = mid + Math.imul(al7, bh2) | 0;
      mid = mid + Math.imul(ah7, bl2) | 0;
      hi = hi + Math.imul(ah7, bh2) | 0;
      lo = lo + Math.imul(al6, bl3) | 0;
      mid = mid + Math.imul(al6, bh3) | 0;
      mid = mid + Math.imul(ah6, bl3) | 0;
      hi = hi + Math.imul(ah6, bh3) | 0;
      lo = lo + Math.imul(al5, bl4) | 0;
      mid = mid + Math.imul(al5, bh4) | 0;
      mid = mid + Math.imul(ah5, bl4) | 0;
      hi = hi + Math.imul(ah5, bh4) | 0;
      lo = lo + Math.imul(al4, bl5) | 0;
      mid = mid + Math.imul(al4, bh5) | 0;
      mid = mid + Math.imul(ah4, bl5) | 0;
      hi = hi + Math.imul(ah4, bh5) | 0;
      lo = lo + Math.imul(al3, bl6) | 0;
      mid = mid + Math.imul(al3, bh6) | 0;
      mid = mid + Math.imul(ah3, bl6) | 0;
      hi = hi + Math.imul(ah3, bh6) | 0;
      lo = lo + Math.imul(al2, bl7) | 0;
      mid = mid + Math.imul(al2, bh7) | 0;
      mid = mid + Math.imul(ah2, bl7) | 0;
      hi = hi + Math.imul(ah2, bh7) | 0;
      lo = lo + Math.imul(al1, bl8) | 0;
      mid = mid + Math.imul(al1, bh8) | 0;
      mid = mid + Math.imul(ah1, bl8) | 0;
      hi = hi + Math.imul(ah1, bh8) | 0;
      lo = lo + Math.imul(al0, bl9) | 0;
      mid = mid + Math.imul(al0, bh9) | 0;
      mid = mid + Math.imul(ah0, bl9) | 0;
      hi = hi + Math.imul(ah0, bh9) | 0;
      var w9 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
      w9 &= 67108863;
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = mid + Math.imul(ah9, bl1) | 0;
      hi = Math.imul(ah9, bh1);
      lo = lo + Math.imul(al8, bl2) | 0;
      mid = mid + Math.imul(al8, bh2) | 0;
      mid = mid + Math.imul(ah8, bl2) | 0;
      hi = hi + Math.imul(ah8, bh2) | 0;
      lo = lo + Math.imul(al7, bl3) | 0;
      mid = mid + Math.imul(al7, bh3) | 0;
      mid = mid + Math.imul(ah7, bl3) | 0;
      hi = hi + Math.imul(ah7, bh3) | 0;
      lo = lo + Math.imul(al6, bl4) | 0;
      mid = mid + Math.imul(al6, bh4) | 0;
      mid = mid + Math.imul(ah6, bl4) | 0;
      hi = hi + Math.imul(ah6, bh4) | 0;
      lo = lo + Math.imul(al5, bl5) | 0;
      mid = mid + Math.imul(al5, bh5) | 0;
      mid = mid + Math.imul(ah5, bl5) | 0;
      hi = hi + Math.imul(ah5, bh5) | 0;
      lo = lo + Math.imul(al4, bl6) | 0;
      mid = mid + Math.imul(al4, bh6) | 0;
      mid = mid + Math.imul(ah4, bl6) | 0;
      hi = hi + Math.imul(ah4, bh6) | 0;
      lo = lo + Math.imul(al3, bl7) | 0;
      mid = mid + Math.imul(al3, bh7) | 0;
      mid = mid + Math.imul(ah3, bl7) | 0;
      hi = hi + Math.imul(ah3, bh7) | 0;
      lo = lo + Math.imul(al2, bl8) | 0;
      mid = mid + Math.imul(al2, bh8) | 0;
      mid = mid + Math.imul(ah2, bl8) | 0;
      hi = hi + Math.imul(ah2, bh8) | 0;
      lo = lo + Math.imul(al1, bl9) | 0;
      mid = mid + Math.imul(al1, bh9) | 0;
      mid = mid + Math.imul(ah1, bl9) | 0;
      hi = hi + Math.imul(ah1, bh9) | 0;
      var w10 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
      w10 &= 67108863;
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = mid + Math.imul(ah9, bl2) | 0;
      hi = Math.imul(ah9, bh2);
      lo = lo + Math.imul(al8, bl3) | 0;
      mid = mid + Math.imul(al8, bh3) | 0;
      mid = mid + Math.imul(ah8, bl3) | 0;
      hi = hi + Math.imul(ah8, bh3) | 0;
      lo = lo + Math.imul(al7, bl4) | 0;
      mid = mid + Math.imul(al7, bh4) | 0;
      mid = mid + Math.imul(ah7, bl4) | 0;
      hi = hi + Math.imul(ah7, bh4) | 0;
      lo = lo + Math.imul(al6, bl5) | 0;
      mid = mid + Math.imul(al6, bh5) | 0;
      mid = mid + Math.imul(ah6, bl5) | 0;
      hi = hi + Math.imul(ah6, bh5) | 0;
      lo = lo + Math.imul(al5, bl6) | 0;
      mid = mid + Math.imul(al5, bh6) | 0;
      mid = mid + Math.imul(ah5, bl6) | 0;
      hi = hi + Math.imul(ah5, bh6) | 0;
      lo = lo + Math.imul(al4, bl7) | 0;
      mid = mid + Math.imul(al4, bh7) | 0;
      mid = mid + Math.imul(ah4, bl7) | 0;
      hi = hi + Math.imul(ah4, bh7) | 0;
      lo = lo + Math.imul(al3, bl8) | 0;
      mid = mid + Math.imul(al3, bh8) | 0;
      mid = mid + Math.imul(ah3, bl8) | 0;
      hi = hi + Math.imul(ah3, bh8) | 0;
      lo = lo + Math.imul(al2, bl9) | 0;
      mid = mid + Math.imul(al2, bh9) | 0;
      mid = mid + Math.imul(ah2, bl9) | 0;
      hi = hi + Math.imul(ah2, bh9) | 0;
      var w11 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
      w11 &= 67108863;
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = mid + Math.imul(ah9, bl3) | 0;
      hi = Math.imul(ah9, bh3);
      lo = lo + Math.imul(al8, bl4) | 0;
      mid = mid + Math.imul(al8, bh4) | 0;
      mid = mid + Math.imul(ah8, bl4) | 0;
      hi = hi + Math.imul(ah8, bh4) | 0;
      lo = lo + Math.imul(al7, bl5) | 0;
      mid = mid + Math.imul(al7, bh5) | 0;
      mid = mid + Math.imul(ah7, bl5) | 0;
      hi = hi + Math.imul(ah7, bh5) | 0;
      lo = lo + Math.imul(al6, bl6) | 0;
      mid = mid + Math.imul(al6, bh6) | 0;
      mid = mid + Math.imul(ah6, bl6) | 0;
      hi = hi + Math.imul(ah6, bh6) | 0;
      lo = lo + Math.imul(al5, bl7) | 0;
      mid = mid + Math.imul(al5, bh7) | 0;
      mid = mid + Math.imul(ah5, bl7) | 0;
      hi = hi + Math.imul(ah5, bh7) | 0;
      lo = lo + Math.imul(al4, bl8) | 0;
      mid = mid + Math.imul(al4, bh8) | 0;
      mid = mid + Math.imul(ah4, bl8) | 0;
      hi = hi + Math.imul(ah4, bh8) | 0;
      lo = lo + Math.imul(al3, bl9) | 0;
      mid = mid + Math.imul(al3, bh9) | 0;
      mid = mid + Math.imul(ah3, bl9) | 0;
      hi = hi + Math.imul(ah3, bh9) | 0;
      var w12 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
      w12 &= 67108863;
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = mid + Math.imul(ah9, bl4) | 0;
      hi = Math.imul(ah9, bh4);
      lo = lo + Math.imul(al8, bl5) | 0;
      mid = mid + Math.imul(al8, bh5) | 0;
      mid = mid + Math.imul(ah8, bl5) | 0;
      hi = hi + Math.imul(ah8, bh5) | 0;
      lo = lo + Math.imul(al7, bl6) | 0;
      mid = mid + Math.imul(al7, bh6) | 0;
      mid = mid + Math.imul(ah7, bl6) | 0;
      hi = hi + Math.imul(ah7, bh6) | 0;
      lo = lo + Math.imul(al6, bl7) | 0;
      mid = mid + Math.imul(al6, bh7) | 0;
      mid = mid + Math.imul(ah6, bl7) | 0;
      hi = hi + Math.imul(ah6, bh7) | 0;
      lo = lo + Math.imul(al5, bl8) | 0;
      mid = mid + Math.imul(al5, bh8) | 0;
      mid = mid + Math.imul(ah5, bl8) | 0;
      hi = hi + Math.imul(ah5, bh8) | 0;
      lo = lo + Math.imul(al4, bl9) | 0;
      mid = mid + Math.imul(al4, bh9) | 0;
      mid = mid + Math.imul(ah4, bl9) | 0;
      hi = hi + Math.imul(ah4, bh9) | 0;
      var w13 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
      w13 &= 67108863;
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = mid + Math.imul(ah9, bl5) | 0;
      hi = Math.imul(ah9, bh5);
      lo = lo + Math.imul(al8, bl6) | 0;
      mid = mid + Math.imul(al8, bh6) | 0;
      mid = mid + Math.imul(ah8, bl6) | 0;
      hi = hi + Math.imul(ah8, bh6) | 0;
      lo = lo + Math.imul(al7, bl7) | 0;
      mid = mid + Math.imul(al7, bh7) | 0;
      mid = mid + Math.imul(ah7, bl7) | 0;
      hi = hi + Math.imul(ah7, bh7) | 0;
      lo = lo + Math.imul(al6, bl8) | 0;
      mid = mid + Math.imul(al6, bh8) | 0;
      mid = mid + Math.imul(ah6, bl8) | 0;
      hi = hi + Math.imul(ah6, bh8) | 0;
      lo = lo + Math.imul(al5, bl9) | 0;
      mid = mid + Math.imul(al5, bh9) | 0;
      mid = mid + Math.imul(ah5, bl9) | 0;
      hi = hi + Math.imul(ah5, bh9) | 0;
      var w14 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
      w14 &= 67108863;
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = mid + Math.imul(ah9, bl6) | 0;
      hi = Math.imul(ah9, bh6);
      lo = lo + Math.imul(al8, bl7) | 0;
      mid = mid + Math.imul(al8, bh7) | 0;
      mid = mid + Math.imul(ah8, bl7) | 0;
      hi = hi + Math.imul(ah8, bh7) | 0;
      lo = lo + Math.imul(al7, bl8) | 0;
      mid = mid + Math.imul(al7, bh8) | 0;
      mid = mid + Math.imul(ah7, bl8) | 0;
      hi = hi + Math.imul(ah7, bh8) | 0;
      lo = lo + Math.imul(al6, bl9) | 0;
      mid = mid + Math.imul(al6, bh9) | 0;
      mid = mid + Math.imul(ah6, bl9) | 0;
      hi = hi + Math.imul(ah6, bh9) | 0;
      var w15 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
      w15 &= 67108863;
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = mid + Math.imul(ah9, bl7) | 0;
      hi = Math.imul(ah9, bh7);
      lo = lo + Math.imul(al8, bl8) | 0;
      mid = mid + Math.imul(al8, bh8) | 0;
      mid = mid + Math.imul(ah8, bl8) | 0;
      hi = hi + Math.imul(ah8, bh8) | 0;
      lo = lo + Math.imul(al7, bl9) | 0;
      mid = mid + Math.imul(al7, bh9) | 0;
      mid = mid + Math.imul(ah7, bl9) | 0;
      hi = hi + Math.imul(ah7, bh9) | 0;
      var w16 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
      w16 &= 67108863;
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = mid + Math.imul(ah9, bl8) | 0;
      hi = Math.imul(ah9, bh8);
      lo = lo + Math.imul(al8, bl9) | 0;
      mid = mid + Math.imul(al8, bh9) | 0;
      mid = mid + Math.imul(ah8, bl9) | 0;
      hi = hi + Math.imul(ah8, bh9) | 0;
      var w17 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
      w17 &= 67108863;
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = mid + Math.imul(ah9, bl9) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
      w18 &= 67108863;
      o9[0] = w0;
      o9[1] = w1;
      o9[2] = w22;
      o9[3] = w32;
      o9[4] = w4;
      o9[5] = w5;
      o9[6] = w6;
      o9[7] = w7;
      o9[8] = w8;
      o9[9] = w9;
      o9[10] = w10;
      o9[11] = w11;
      o9[12] = w12;
      o9[13] = w13;
      o9[14] = w14;
      o9[15] = w15;
      o9[16] = w16;
      o9[17] = w17;
      o9[18] = w18;
      if (c8 !== 0) {
        o9[19] = c8;
        out.length++;
      }
      return out;
    };
    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }
    function bigMulTo(self2, num, out) {
      out.negative = num.negative ^ self2.negative;
      out.length = self2.length + num.length;
      var carry = 0;
      var hncarry = 0;
      for (var k4 = 0; k4 < out.length - 1; k4++) {
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 67108863;
        var maxJ = Math.min(k4, num.length - 1);
        for (var j4 = Math.max(0, k4 - self2.length + 1); j4 <= maxJ; j4++) {
          var i8 = k4 - j4;
          var a8 = self2.words[i8] | 0;
          var b5 = num.words[j4] | 0;
          var r9 = a8 * b5;
          var lo = r9 & 67108863;
          ncarry = ncarry + (r9 / 67108864 | 0) | 0;
          lo = lo + rword | 0;
          rword = lo & 67108863;
          ncarry = ncarry + (lo >>> 26) | 0;
          hncarry += ncarry >>> 26;
          ncarry &= 67108863;
        }
        out.words[k4] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k4] = carry;
      } else {
        out.length--;
      }
      return out._strip();
    }
    function jumboMulTo(self2, num, out) {
      return bigMulTo(self2, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
      var res;
      var len = (this || _global$7$1).length + num.length;
      if ((this || _global$7$1).length === 10 && num.length === 10) {
        res = comb10MulTo(this || _global$7$1, num, out);
      } else if (len < 63) {
        res = smallMulTo(this || _global$7$1, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this || _global$7$1, num, out);
      } else {
        res = jumboMulTo(this || _global$7$1, num, out);
      }
      return res;
    };
    BN.prototype.mul = function mul(num) {
      var out = new BN(null);
      out.words = new Array((this || _global$7$1).length + num.length);
      return this.mulTo(num, out);
    };
    BN.prototype.mulf = function mulf(num) {
      var out = new BN(null);
      out.words = new Array((this || _global$7$1).length + num.length);
      return jumboMulTo(this || _global$7$1, num, out);
    };
    BN.prototype.imul = function imul(num) {
      return this.clone().mulTo(num, this || _global$7$1);
    };
    BN.prototype.imuln = function imuln(num) {
      var isNegNum = num < 0;
      if (isNegNum)
        num = -num;
      assert2(typeof num === "number");
      assert2(num < 67108864);
      var carry = 0;
      for (var i8 = 0; i8 < (this || _global$7$1).length; i8++) {
        var w4 = ((this || _global$7$1).words[i8] | 0) * num;
        var lo = (w4 & 67108863) + (carry & 67108863);
        carry >>= 26;
        carry += w4 / 67108864 | 0;
        carry += lo >>> 26;
        (this || _global$7$1).words[i8] = lo & 67108863;
      }
      if (carry !== 0) {
        (this || _global$7$1).words[i8] = carry;
        (this || _global$7$1).length++;
      }
      return isNegNum ? this.ineg() : this || _global$7$1;
    };
    BN.prototype.muln = function muln(num) {
      return this.clone().imuln(num);
    };
    BN.prototype.sqr = function sqr() {
      return this.mul(this || _global$7$1);
    };
    BN.prototype.isqr = function isqr() {
      return this.imul(this.clone());
    };
    BN.prototype.pow = function pow(num) {
      var w4 = toBitArray(num);
      if (w4.length === 0)
        return new BN(1);
      var res = this || _global$7$1;
      for (var i8 = 0; i8 < w4.length; i8++, res = res.sqr()) {
        if (w4[i8] !== 0)
          break;
      }
      if (++i8 < w4.length) {
        for (var q3 = res.sqr(); i8 < w4.length; i8++, q3 = q3.sqr()) {
          if (w4[i8] === 0)
            continue;
          res = res.mul(q3);
        }
      }
      return res;
    };
    BN.prototype.iushln = function iushln(bits) {
      assert2(typeof bits === "number" && bits >= 0);
      var r9 = bits % 26;
      var s7 = (bits - r9) / 26;
      var carryMask = 67108863 >>> 26 - r9 << 26 - r9;
      var i8;
      if (r9 !== 0) {
        var carry = 0;
        for (i8 = 0; i8 < (this || _global$7$1).length; i8++) {
          var newCarry = (this || _global$7$1).words[i8] & carryMask;
          var c8 = ((this || _global$7$1).words[i8] | 0) - newCarry << r9;
          (this || _global$7$1).words[i8] = c8 | carry;
          carry = newCarry >>> 26 - r9;
        }
        if (carry) {
          (this || _global$7$1).words[i8] = carry;
          (this || _global$7$1).length++;
        }
      }
      if (s7 !== 0) {
        for (i8 = (this || _global$7$1).length - 1; i8 >= 0; i8--) {
          (this || _global$7$1).words[i8 + s7] = (this || _global$7$1).words[i8];
        }
        for (i8 = 0; i8 < s7; i8++) {
          (this || _global$7$1).words[i8] = 0;
        }
        (this || _global$7$1).length += s7;
      }
      return this._strip();
    };
    BN.prototype.ishln = function ishln(bits) {
      assert2((this || _global$7$1).negative === 0);
      return this.iushln(bits);
    };
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
      assert2(typeof bits === "number" && bits >= 0);
      var h8;
      if (hint) {
        h8 = (hint - hint % 26) / 26;
      } else {
        h8 = 0;
      }
      var r9 = bits % 26;
      var s7 = Math.min((bits - r9) / 26, (this || _global$7$1).length);
      var mask = 67108863 ^ 67108863 >>> r9 << r9;
      var maskedWords = extended;
      h8 -= s7;
      h8 = Math.max(0, h8);
      if (maskedWords) {
        for (var i8 = 0; i8 < s7; i8++) {
          maskedWords.words[i8] = (this || _global$7$1).words[i8];
        }
        maskedWords.length = s7;
      }
      if (s7 === 0)
        ;
      else if ((this || _global$7$1).length > s7) {
        (this || _global$7$1).length -= s7;
        for (i8 = 0; i8 < (this || _global$7$1).length; i8++) {
          (this || _global$7$1).words[i8] = (this || _global$7$1).words[i8 + s7];
        }
      } else {
        (this || _global$7$1).words[0] = 0;
        (this || _global$7$1).length = 1;
      }
      var carry = 0;
      for (i8 = (this || _global$7$1).length - 1; i8 >= 0 && (carry !== 0 || i8 >= h8); i8--) {
        var word = (this || _global$7$1).words[i8] | 0;
        (this || _global$7$1).words[i8] = carry << 26 - r9 | word >>> r9;
        carry = word & mask;
      }
      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }
      if ((this || _global$7$1).length === 0) {
        (this || _global$7$1).words[0] = 0;
        (this || _global$7$1).length = 1;
      }
      return this._strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
      assert2((this || _global$7$1).negative === 0);
      return this.iushrn(bits, hint, extended);
    };
    BN.prototype.shln = function shln(bits) {
      return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
      return this.clone().iushln(bits);
    };
    BN.prototype.shrn = function shrn(bits) {
      return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
      return this.clone().iushrn(bits);
    };
    BN.prototype.testn = function testn(bit) {
      assert2(typeof bit === "number" && bit >= 0);
      var r9 = bit % 26;
      var s7 = (bit - r9) / 26;
      var q3 = 1 << r9;
      if ((this || _global$7$1).length <= s7)
        return false;
      var w4 = (this || _global$7$1).words[s7];
      return !!(w4 & q3);
    };
    BN.prototype.imaskn = function imaskn(bits) {
      assert2(typeof bits === "number" && bits >= 0);
      var r9 = bits % 26;
      var s7 = (bits - r9) / 26;
      assert2((this || _global$7$1).negative === 0, "imaskn works only with positive numbers");
      if ((this || _global$7$1).length <= s7) {
        return this || _global$7$1;
      }
      if (r9 !== 0) {
        s7++;
      }
      (this || _global$7$1).length = Math.min(s7, (this || _global$7$1).length);
      if (r9 !== 0) {
        var mask = 67108863 ^ 67108863 >>> r9 << r9;
        (this || _global$7$1).words[(this || _global$7$1).length - 1] &= mask;
      }
      return this._strip();
    };
    BN.prototype.maskn = function maskn(bits) {
      return this.clone().imaskn(bits);
    };
    BN.prototype.iaddn = function iaddn(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      if (num < 0)
        return this.isubn(-num);
      if ((this || _global$7$1).negative !== 0) {
        if ((this || _global$7$1).length === 1 && ((this || _global$7$1).words[0] | 0) <= num) {
          (this || _global$7$1).words[0] = num - ((this || _global$7$1).words[0] | 0);
          (this || _global$7$1).negative = 0;
          return this || _global$7$1;
        }
        (this || _global$7$1).negative = 0;
        this.isubn(num);
        (this || _global$7$1).negative = 1;
        return this || _global$7$1;
      }
      return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
      (this || _global$7$1).words[0] += num;
      for (var i8 = 0; i8 < (this || _global$7$1).length && (this || _global$7$1).words[i8] >= 67108864; i8++) {
        (this || _global$7$1).words[i8] -= 67108864;
        if (i8 === (this || _global$7$1).length - 1) {
          (this || _global$7$1).words[i8 + 1] = 1;
        } else {
          (this || _global$7$1).words[i8 + 1]++;
        }
      }
      (this || _global$7$1).length = Math.max((this || _global$7$1).length, i8 + 1);
      return this || _global$7$1;
    };
    BN.prototype.isubn = function isubn(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      if (num < 0)
        return this.iaddn(-num);
      if ((this || _global$7$1).negative !== 0) {
        (this || _global$7$1).negative = 0;
        this.iaddn(num);
        (this || _global$7$1).negative = 1;
        return this || _global$7$1;
      }
      (this || _global$7$1).words[0] -= num;
      if ((this || _global$7$1).length === 1 && (this || _global$7$1).words[0] < 0) {
        (this || _global$7$1).words[0] = -(this || _global$7$1).words[0];
        (this || _global$7$1).negative = 1;
      } else {
        for (var i8 = 0; i8 < (this || _global$7$1).length && (this || _global$7$1).words[i8] < 0; i8++) {
          (this || _global$7$1).words[i8] += 67108864;
          (this || _global$7$1).words[i8 + 1] -= 1;
        }
      }
      return this._strip();
    };
    BN.prototype.addn = function addn(num) {
      return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
      return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
      (this || _global$7$1).negative = 0;
      return this || _global$7$1;
    };
    BN.prototype.abs = function abs() {
      return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
      var len = num.length + shift;
      var i8;
      this._expand(len);
      var w4;
      var carry = 0;
      for (i8 = 0; i8 < num.length; i8++) {
        w4 = ((this || _global$7$1).words[i8 + shift] | 0) + carry;
        var right = (num.words[i8] | 0) * mul;
        w4 -= right & 67108863;
        carry = (w4 >> 26) - (right / 67108864 | 0);
        (this || _global$7$1).words[i8 + shift] = w4 & 67108863;
      }
      for (; i8 < (this || _global$7$1).length - shift; i8++) {
        w4 = ((this || _global$7$1).words[i8 + shift] | 0) + carry;
        carry = w4 >> 26;
        (this || _global$7$1).words[i8 + shift] = w4 & 67108863;
      }
      if (carry === 0)
        return this._strip();
      assert2(carry === -1);
      carry = 0;
      for (i8 = 0; i8 < (this || _global$7$1).length; i8++) {
        w4 = -((this || _global$7$1).words[i8] | 0) + carry;
        carry = w4 >> 26;
        (this || _global$7$1).words[i8] = w4 & 67108863;
      }
      (this || _global$7$1).negative = 1;
      return this._strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
      var shift = (this || _global$7$1).length - num.length;
      var a8 = this.clone();
      var b5 = num;
      var bhi = b5.words[b5.length - 1] | 0;
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b5 = b5.ushln(shift);
        a8.iushln(shift);
        bhi = b5.words[b5.length - 1] | 0;
      }
      var m6 = a8.length - b5.length;
      var q3;
      if (mode !== "mod") {
        q3 = new BN(null);
        q3.length = m6 + 1;
        q3.words = new Array(q3.length);
        for (var i8 = 0; i8 < q3.length; i8++) {
          q3.words[i8] = 0;
        }
      }
      var diff = a8.clone()._ishlnsubmul(b5, 1, m6);
      if (diff.negative === 0) {
        a8 = diff;
        if (q3) {
          q3.words[m6] = 1;
        }
      }
      for (var j4 = m6 - 1; j4 >= 0; j4--) {
        var qj = (a8.words[b5.length + j4] | 0) * 67108864 + (a8.words[b5.length + j4 - 1] | 0);
        qj = Math.min(qj / bhi | 0, 67108863);
        a8._ishlnsubmul(b5, qj, j4);
        while (a8.negative !== 0) {
          qj--;
          a8.negative = 0;
          a8._ishlnsubmul(b5, 1, j4);
          if (!a8.isZero()) {
            a8.negative ^= 1;
          }
        }
        if (q3) {
          q3.words[j4] = qj;
        }
      }
      if (q3) {
        q3._strip();
      }
      a8._strip();
      if (mode !== "div" && shift !== 0) {
        a8.iushrn(shift);
      }
      return {
        div: q3 || null,
        mod: a8
      };
    };
    BN.prototype.divmod = function divmod(num, mode, positive) {
      assert2(!num.isZero());
      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }
      var div, mod, res;
      if ((this || _global$7$1).negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);
        if (mode !== "mod") {
          div = res.div.neg();
        }
        if (mode !== "div") {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }
        return {
          div,
          mod
        };
      }
      if ((this || _global$7$1).negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);
        if (mode !== "mod") {
          div = res.div.neg();
        }
        return {
          div,
          mod: res.mod
        };
      }
      if (((this || _global$7$1).negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);
        if (mode !== "div") {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }
        return {
          div: res.div,
          mod
        };
      }
      if (num.length > (this || _global$7$1).length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this || _global$7$1
        };
      }
      if (num.length === 1) {
        if (mode === "div") {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }
        if (mode === "mod") {
          return {
            div: null,
            mod: new BN(this.modrn(num.words[0]))
          };
        }
        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modrn(num.words[0]))
        };
      }
      return this._wordDiv(num, mode);
    };
    BN.prototype.div = function div(num) {
      return this.divmod(num, "div", false).div;
    };
    BN.prototype.mod = function mod(num) {
      return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
      return this.divmod(num, "mod", true).mod;
    };
    BN.prototype.divRound = function divRound(num) {
      var dm = this.divmod(num);
      if (dm.mod.isZero())
        return dm.div;
      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
      var half = num.ushrn(1);
      var r22 = num.andln(1);
      var cmp = mod.cmp(half);
      if (cmp < 0 || r22 === 1 && cmp === 0)
        return dm.div;
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modrn = function modrn(num) {
      var isNegNum = num < 0;
      if (isNegNum)
        num = -num;
      assert2(num <= 67108863);
      var p8 = (1 << 26) % num;
      var acc = 0;
      for (var i8 = (this || _global$7$1).length - 1; i8 >= 0; i8--) {
        acc = (p8 * acc + ((this || _global$7$1).words[i8] | 0)) % num;
      }
      return isNegNum ? -acc : acc;
    };
    BN.prototype.modn = function modn(num) {
      return this.modrn(num);
    };
    BN.prototype.idivn = function idivn(num) {
      var isNegNum = num < 0;
      if (isNegNum)
        num = -num;
      assert2(num <= 67108863);
      var carry = 0;
      for (var i8 = (this || _global$7$1).length - 1; i8 >= 0; i8--) {
        var w4 = ((this || _global$7$1).words[i8] | 0) + carry * 67108864;
        (this || _global$7$1).words[i8] = w4 / num | 0;
        carry = w4 % num;
      }
      this._strip();
      return isNegNum ? this.ineg() : this || _global$7$1;
    };
    BN.prototype.divn = function divn(num) {
      return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p8) {
      assert2(p8.negative === 0);
      assert2(!p8.isZero());
      var x4 = this || _global$7$1;
      var y6 = p8.clone();
      if (x4.negative !== 0) {
        x4 = x4.umod(p8);
      } else {
        x4 = x4.clone();
      }
      var A4 = new BN(1);
      var B4 = new BN(0);
      var C4 = new BN(0);
      var D4 = new BN(1);
      var g5 = 0;
      while (x4.isEven() && y6.isEven()) {
        x4.iushrn(1);
        y6.iushrn(1);
        ++g5;
      }
      var yp = y6.clone();
      var xp = x4.clone();
      while (!x4.isZero()) {
        for (var i8 = 0, im = 1; (x4.words[0] & im) === 0 && i8 < 26; ++i8, im <<= 1)
          ;
        if (i8 > 0) {
          x4.iushrn(i8);
          while (i8-- > 0) {
            if (A4.isOdd() || B4.isOdd()) {
              A4.iadd(yp);
              B4.isub(xp);
            }
            A4.iushrn(1);
            B4.iushrn(1);
          }
        }
        for (var j4 = 0, jm = 1; (y6.words[0] & jm) === 0 && j4 < 26; ++j4, jm <<= 1)
          ;
        if (j4 > 0) {
          y6.iushrn(j4);
          while (j4-- > 0) {
            if (C4.isOdd() || D4.isOdd()) {
              C4.iadd(yp);
              D4.isub(xp);
            }
            C4.iushrn(1);
            D4.iushrn(1);
          }
        }
        if (x4.cmp(y6) >= 0) {
          x4.isub(y6);
          A4.isub(C4);
          B4.isub(D4);
        } else {
          y6.isub(x4);
          C4.isub(A4);
          D4.isub(B4);
        }
      }
      return {
        a: C4,
        b: D4,
        gcd: y6.iushln(g5)
      };
    };
    BN.prototype._invmp = function _invmp(p8) {
      assert2(p8.negative === 0);
      assert2(!p8.isZero());
      var a8 = this || _global$7$1;
      var b5 = p8.clone();
      if (a8.negative !== 0) {
        a8 = a8.umod(p8);
      } else {
        a8 = a8.clone();
      }
      var x1 = new BN(1);
      var x22 = new BN(0);
      var delta = b5.clone();
      while (a8.cmpn(1) > 0 && b5.cmpn(1) > 0) {
        for (var i8 = 0, im = 1; (a8.words[0] & im) === 0 && i8 < 26; ++i8, im <<= 1)
          ;
        if (i8 > 0) {
          a8.iushrn(i8);
          while (i8-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }
            x1.iushrn(1);
          }
        }
        for (var j4 = 0, jm = 1; (b5.words[0] & jm) === 0 && j4 < 26; ++j4, jm <<= 1)
          ;
        if (j4 > 0) {
          b5.iushrn(j4);
          while (j4-- > 0) {
            if (x22.isOdd()) {
              x22.iadd(delta);
            }
            x22.iushrn(1);
          }
        }
        if (a8.cmp(b5) >= 0) {
          a8.isub(b5);
          x1.isub(x22);
        } else {
          b5.isub(a8);
          x22.isub(x1);
        }
      }
      var res;
      if (a8.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x22;
      }
      if (res.cmpn(0) < 0) {
        res.iadd(p8);
      }
      return res;
    };
    BN.prototype.gcd = function gcd(num) {
      if (this.isZero())
        return num.abs();
      if (num.isZero())
        return this.abs();
      var a8 = this.clone();
      var b5 = num.clone();
      a8.negative = 0;
      b5.negative = 0;
      for (var shift = 0; a8.isEven() && b5.isEven(); shift++) {
        a8.iushrn(1);
        b5.iushrn(1);
      }
      do {
        while (a8.isEven()) {
          a8.iushrn(1);
        }
        while (b5.isEven()) {
          b5.iushrn(1);
        }
        var r9 = a8.cmp(b5);
        if (r9 < 0) {
          var t8 = a8;
          a8 = b5;
          b5 = t8;
        } else if (r9 === 0 || b5.cmpn(1) === 0) {
          break;
        }
        a8.isub(b5);
      } while (true);
      return b5.iushln(shift);
    };
    BN.prototype.invm = function invm(num) {
      return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
      return ((this || _global$7$1).words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
      return ((this || _global$7$1).words[0] & 1) === 1;
    };
    BN.prototype.andln = function andln(num) {
      return (this || _global$7$1).words[0] & num;
    };
    BN.prototype.bincn = function bincn(bit) {
      assert2(typeof bit === "number");
      var r9 = bit % 26;
      var s7 = (bit - r9) / 26;
      var q3 = 1 << r9;
      if ((this || _global$7$1).length <= s7) {
        this._expand(s7 + 1);
        (this || _global$7$1).words[s7] |= q3;
        return this || _global$7$1;
      }
      var carry = q3;
      for (var i8 = s7; carry !== 0 && i8 < (this || _global$7$1).length; i8++) {
        var w4 = (this || _global$7$1).words[i8] | 0;
        w4 += carry;
        carry = w4 >>> 26;
        w4 &= 67108863;
        (this || _global$7$1).words[i8] = w4;
      }
      if (carry !== 0) {
        (this || _global$7$1).words[i8] = carry;
        (this || _global$7$1).length++;
      }
      return this || _global$7$1;
    };
    BN.prototype.isZero = function isZero() {
      return (this || _global$7$1).length === 1 && (this || _global$7$1).words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
      var negative = num < 0;
      if ((this || _global$7$1).negative !== 0 && !negative)
        return -1;
      if ((this || _global$7$1).negative === 0 && negative)
        return 1;
      this._strip();
      var res;
      if ((this || _global$7$1).length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }
        assert2(num <= 67108863, "Number is too big");
        var w4 = (this || _global$7$1).words[0] | 0;
        res = w4 === num ? 0 : w4 < num ? -1 : 1;
      }
      if ((this || _global$7$1).negative !== 0)
        return -res | 0;
      return res;
    };
    BN.prototype.cmp = function cmp(num) {
      if ((this || _global$7$1).negative !== 0 && num.negative === 0)
        return -1;
      if ((this || _global$7$1).negative === 0 && num.negative !== 0)
        return 1;
      var res = this.ucmp(num);
      if ((this || _global$7$1).negative !== 0)
        return -res | 0;
      return res;
    };
    BN.prototype.ucmp = function ucmp(num) {
      if ((this || _global$7$1).length > num.length)
        return 1;
      if ((this || _global$7$1).length < num.length)
        return -1;
      var res = 0;
      for (var i8 = (this || _global$7$1).length - 1; i8 >= 0; i8--) {
        var a8 = (this || _global$7$1).words[i8] | 0;
        var b5 = num.words[i8] | 0;
        if (a8 === b5)
          continue;
        if (a8 < b5) {
          res = -1;
        } else if (a8 > b5) {
          res = 1;
        }
        break;
      }
      return res;
    };
    BN.prototype.gtn = function gtn(num) {
      return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
      return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
      return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
      return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
      return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
      return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
      return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
      return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
      return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
      return this.cmp(num) === 0;
    };
    BN.red = function red(num) {
      return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
      assert2(!(this || _global$7$1).red, "Already a number in reduction context");
      assert2((this || _global$7$1).negative === 0, "red works only with positives");
      return ctx.convertTo(this || _global$7$1)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
      assert2((this || _global$7$1).red, "fromRed works only with numbers in reduction context");
      return (this || _global$7$1).red.convertFrom(this || _global$7$1);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
      (this || _global$7$1).red = ctx;
      return this || _global$7$1;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
      assert2(!(this || _global$7$1).red, "Already a number in reduction context");
      return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
      assert2((this || _global$7$1).red, "redAdd works only with red numbers");
      return (this || _global$7$1).red.add(this || _global$7$1, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
      assert2((this || _global$7$1).red, "redIAdd works only with red numbers");
      return (this || _global$7$1).red.iadd(this || _global$7$1, num);
    };
    BN.prototype.redSub = function redSub(num) {
      assert2((this || _global$7$1).red, "redSub works only with red numbers");
      return (this || _global$7$1).red.sub(this || _global$7$1, num);
    };
    BN.prototype.redISub = function redISub(num) {
      assert2((this || _global$7$1).red, "redISub works only with red numbers");
      return (this || _global$7$1).red.isub(this || _global$7$1, num);
    };
    BN.prototype.redShl = function redShl(num) {
      assert2((this || _global$7$1).red, "redShl works only with red numbers");
      return (this || _global$7$1).red.shl(this || _global$7$1, num);
    };
    BN.prototype.redMul = function redMul(num) {
      assert2((this || _global$7$1).red, "redMul works only with red numbers");
      (this || _global$7$1).red._verify2(this || _global$7$1, num);
      return (this || _global$7$1).red.mul(this || _global$7$1, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
      assert2((this || _global$7$1).red, "redMul works only with red numbers");
      (this || _global$7$1).red._verify2(this || _global$7$1, num);
      return (this || _global$7$1).red.imul(this || _global$7$1, num);
    };
    BN.prototype.redSqr = function redSqr() {
      assert2((this || _global$7$1).red, "redSqr works only with red numbers");
      (this || _global$7$1).red._verify1(this || _global$7$1);
      return (this || _global$7$1).red.sqr(this || _global$7$1);
    };
    BN.prototype.redISqr = function redISqr() {
      assert2((this || _global$7$1).red, "redISqr works only with red numbers");
      (this || _global$7$1).red._verify1(this || _global$7$1);
      return (this || _global$7$1).red.isqr(this || _global$7$1);
    };
    BN.prototype.redSqrt = function redSqrt() {
      assert2((this || _global$7$1).red, "redSqrt works only with red numbers");
      (this || _global$7$1).red._verify1(this || _global$7$1);
      return (this || _global$7$1).red.sqrt(this || _global$7$1);
    };
    BN.prototype.redInvm = function redInvm() {
      assert2((this || _global$7$1).red, "redInvm works only with red numbers");
      (this || _global$7$1).red._verify1(this || _global$7$1);
      return (this || _global$7$1).red.invm(this || _global$7$1);
    };
    BN.prototype.redNeg = function redNeg() {
      assert2((this || _global$7$1).red, "redNeg works only with red numbers");
      (this || _global$7$1).red._verify1(this || _global$7$1);
      return (this || _global$7$1).red.neg(this || _global$7$1);
    };
    BN.prototype.redPow = function redPow(num) {
      assert2((this || _global$7$1).red && !num.red, "redPow(normalNum)");
      (this || _global$7$1).red._verify1(this || _global$7$1);
      return (this || _global$7$1).red.pow(this || _global$7$1, num);
    };
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };
    function MPrime(name2, p8) {
      (this || _global$7$1).name = name2;
      (this || _global$7$1).p = new BN(p8, 16);
      (this || _global$7$1).n = (this || _global$7$1).p.bitLength();
      (this || _global$7$1).k = new BN(1).iushln((this || _global$7$1).n).isub((this || _global$7$1).p);
      (this || _global$7$1).tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil((this || _global$7$1).n / 13));
      return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
      var r9 = num;
      var rlen;
      do {
        this.split(r9, (this || _global$7$1).tmp);
        r9 = this.imulK(r9);
        r9 = r9.iadd((this || _global$7$1).tmp);
        rlen = r9.bitLength();
      } while (rlen > (this || _global$7$1).n);
      var cmp = rlen < (this || _global$7$1).n ? -1 : r9.ucmp((this || _global$7$1).p);
      if (cmp === 0) {
        r9.words[0] = 0;
        r9.length = 1;
      } else if (cmp > 0) {
        r9.isub((this || _global$7$1).p);
      } else {
        if (r9.strip !== void 0) {
          r9.strip();
        } else {
          r9._strip();
        }
      }
      return r9;
    };
    MPrime.prototype.split = function split(input, out) {
      input.iushrn((this || _global$7$1).n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
      return num.imul((this || _global$7$1).k);
    };
    function K256() {
      MPrime.call(this || _global$7$1, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits4(K256, MPrime);
    K256.prototype.split = function split(input, output) {
      var mask = 4194303;
      var outLen = Math.min(input.length, 9);
      for (var i8 = 0; i8 < outLen; i8++) {
        output.words[i8] = input.words[i8];
      }
      output.length = outLen;
      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }
      var prev = input.words[9];
      output.words[output.length++] = prev & mask;
      for (i8 = 10; i8 < input.length; i8++) {
        var next = input.words[i8] | 0;
        input.words[i8 - 10] = (next & mask) << 4 | prev >>> 22;
        prev = next;
      }
      prev >>>= 22;
      input.words[i8 - 10] = prev;
      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };
    K256.prototype.imulK = function imulK(num) {
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;
      var lo = 0;
      for (var i8 = 0; i8 < num.length; i8++) {
        var w4 = num.words[i8] | 0;
        lo += w4 * 977;
        num.words[i8] = lo & 67108863;
        lo = w4 * 64 + (lo / 67108864 | 0);
      }
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }
      return num;
    };
    function P224() {
      MPrime.call(this || _global$7$1, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits4(P224, MPrime);
    function P192() {
      MPrime.call(this || _global$7$1, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits4(P192, MPrime);
    function P25519() {
      MPrime.call(this || _global$7$1, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits4(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
      var carry = 0;
      for (var i8 = 0; i8 < num.length; i8++) {
        var hi = (num.words[i8] | 0) * 19 + carry;
        var lo = hi & 67108863;
        hi >>>= 26;
        num.words[i8] = lo;
        carry = hi;
      }
      if (carry !== 0) {
        num.words[num.length++] = carry;
      }
      return num;
    };
    BN._prime = function prime(name2) {
      if (primes[name2])
        return primes[name2];
      var prime2;
      if (name2 === "k256") {
        prime2 = new K256();
      } else if (name2 === "p224") {
        prime2 = new P224();
      } else if (name2 === "p192") {
        prime2 = new P192();
      } else if (name2 === "p25519") {
        prime2 = new P25519();
      } else {
        throw new Error("Unknown prime " + name2);
      }
      primes[name2] = prime2;
      return prime2;
    };
    function Red(m6) {
      if (typeof m6 === "string") {
        var prime = BN._prime(m6);
        (this || _global$7$1).m = prime.p;
        (this || _global$7$1).prime = prime;
      } else {
        assert2(m6.gtn(1), "modulus must be greater than 1");
        (this || _global$7$1).m = m6;
        (this || _global$7$1).prime = null;
      }
    }
    Red.prototype._verify1 = function _verify1(a8) {
      assert2(a8.negative === 0, "red works only with positives");
      assert2(a8.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a8, b5) {
      assert2((a8.negative | b5.negative) === 0, "red works only with positives");
      assert2(a8.red && a8.red === b5.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a8) {
      if ((this || _global$7$1).prime)
        return (this || _global$7$1).prime.ireduce(a8)._forceRed(this || _global$7$1);
      move(a8, a8.umod((this || _global$7$1).m)._forceRed(this || _global$7$1));
      return a8;
    };
    Red.prototype.neg = function neg(a8) {
      if (a8.isZero()) {
        return a8.clone();
      }
      return (this || _global$7$1).m.sub(a8)._forceRed(this || _global$7$1);
    };
    Red.prototype.add = function add(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.add(b5);
      if (res.cmp((this || _global$7$1).m) >= 0) {
        res.isub((this || _global$7$1).m);
      }
      return res._forceRed(this || _global$7$1);
    };
    Red.prototype.iadd = function iadd(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.iadd(b5);
      if (res.cmp((this || _global$7$1).m) >= 0) {
        res.isub((this || _global$7$1).m);
      }
      return res;
    };
    Red.prototype.sub = function sub(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.sub(b5);
      if (res.cmpn(0) < 0) {
        res.iadd((this || _global$7$1).m);
      }
      return res._forceRed(this || _global$7$1);
    };
    Red.prototype.isub = function isub(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.isub(b5);
      if (res.cmpn(0) < 0) {
        res.iadd((this || _global$7$1).m);
      }
      return res;
    };
    Red.prototype.shl = function shl(a8, num) {
      this._verify1(a8);
      return this.imod(a8.ushln(num));
    };
    Red.prototype.imul = function imul(a8, b5) {
      this._verify2(a8, b5);
      return this.imod(a8.imul(b5));
    };
    Red.prototype.mul = function mul(a8, b5) {
      this._verify2(a8, b5);
      return this.imod(a8.mul(b5));
    };
    Red.prototype.isqr = function isqr(a8) {
      return this.imul(a8, a8.clone());
    };
    Red.prototype.sqr = function sqr(a8) {
      return this.mul(a8, a8);
    };
    Red.prototype.sqrt = function sqrt(a8) {
      if (a8.isZero())
        return a8.clone();
      var mod3 = (this || _global$7$1).m.andln(3);
      assert2(mod3 % 2 === 1);
      if (mod3 === 3) {
        var pow = (this || _global$7$1).m.add(new BN(1)).iushrn(2);
        return this.pow(a8, pow);
      }
      var q3 = (this || _global$7$1).m.subn(1);
      var s7 = 0;
      while (!q3.isZero() && q3.andln(1) === 0) {
        s7++;
        q3.iushrn(1);
      }
      assert2(!q3.isZero());
      var one = new BN(1).toRed(this || _global$7$1);
      var nOne = one.redNeg();
      var lpow = (this || _global$7$1).m.subn(1).iushrn(1);
      var z5 = (this || _global$7$1).m.bitLength();
      z5 = new BN(2 * z5 * z5).toRed(this || _global$7$1);
      while (this.pow(z5, lpow).cmp(nOne) !== 0) {
        z5.redIAdd(nOne);
      }
      var c8 = this.pow(z5, q3);
      var r9 = this.pow(a8, q3.addn(1).iushrn(1));
      var t8 = this.pow(a8, q3);
      var m6 = s7;
      while (t8.cmp(one) !== 0) {
        var tmp = t8;
        for (var i8 = 0; tmp.cmp(one) !== 0; i8++) {
          tmp = tmp.redSqr();
        }
        assert2(i8 < m6);
        var b5 = this.pow(c8, new BN(1).iushln(m6 - i8 - 1));
        r9 = r9.redMul(b5);
        c8 = b5.redSqr();
        t8 = t8.redMul(c8);
        m6 = i8;
      }
      return r9;
    };
    Red.prototype.invm = function invm(a8) {
      var inv = a8._invmp((this || _global$7$1).m);
      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };
    Red.prototype.pow = function pow(a8, num) {
      if (num.isZero())
        return new BN(1).toRed(this || _global$7$1);
      if (num.cmpn(1) === 0)
        return a8.clone();
      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN(1).toRed(this || _global$7$1);
      wnd[1] = a8;
      for (var i8 = 2; i8 < wnd.length; i8++) {
        wnd[i8] = this.mul(wnd[i8 - 1], a8);
      }
      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;
      if (start === 0) {
        start = 26;
      }
      for (i8 = num.length - 1; i8 >= 0; i8--) {
        var word = num.words[i8];
        for (var j4 = start - 1; j4 >= 0; j4--) {
          var bit = word >> j4 & 1;
          if (res !== wnd[0]) {
            res = this.sqr(res);
          }
          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }
          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i8 !== 0 || j4 !== 0))
            continue;
          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }
        start = 26;
      }
      return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
      var r9 = num.umod((this || _global$7$1).m);
      return r9 === num ? r9.clone() : r9;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
      var res = num.clone();
      res.red = null;
      return res;
    };
    BN.mont = function mont(num) {
      return new Mont(num);
    };
    function Mont(m6) {
      Red.call(this || _global$7$1, m6);
      (this || _global$7$1).shift = (this || _global$7$1).m.bitLength();
      if ((this || _global$7$1).shift % 26 !== 0) {
        (this || _global$7$1).shift += 26 - (this || _global$7$1).shift % 26;
      }
      (this || _global$7$1).r = new BN(1).iushln((this || _global$7$1).shift);
      (this || _global$7$1).r2 = this.imod((this || _global$7$1).r.sqr());
      (this || _global$7$1).rinv = (this || _global$7$1).r._invmp((this || _global$7$1).m);
      (this || _global$7$1).minv = (this || _global$7$1).rinv.mul((this || _global$7$1).r).isubn(1).div((this || _global$7$1).m);
      (this || _global$7$1).minv = (this || _global$7$1).minv.umod((this || _global$7$1).r);
      (this || _global$7$1).minv = (this || _global$7$1).r.sub((this || _global$7$1).minv);
    }
    inherits4(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
      return this.imod(num.ushln((this || _global$7$1).shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
      var r9 = this.imod(num.mul((this || _global$7$1).rinv));
      r9.red = null;
      return r9;
    };
    Mont.prototype.imul = function imul(a8, b5) {
      if (a8.isZero() || b5.isZero()) {
        a8.words[0] = 0;
        a8.length = 1;
        return a8;
      }
      var t8 = a8.imul(b5);
      var c8 = t8.maskn((this || _global$7$1).shift).mul((this || _global$7$1).minv).imaskn((this || _global$7$1).shift).mul((this || _global$7$1).m);
      var u8 = t8.isub(c8).iushrn((this || _global$7$1).shift);
      var res = u8;
      if (u8.cmp((this || _global$7$1).m) >= 0) {
        res = u8.isub((this || _global$7$1).m);
      } else if (u8.cmpn(0) < 0) {
        res = u8.iadd((this || _global$7$1).m);
      }
      return res._forceRed(this || _global$7$1);
    };
    Mont.prototype.mul = function mul(a8, b5) {
      if (a8.isZero() || b5.isZero())
        return new BN(0)._forceRed(this || _global$7$1);
      var t8 = a8.mul(b5);
      var c8 = t8.maskn((this || _global$7$1).shift).mul((this || _global$7$1).minv).imaskn((this || _global$7$1).shift).mul((this || _global$7$1).m);
      var u8 = t8.isub(c8).iushrn((this || _global$7$1).shift);
      var res = u8;
      if (u8.cmp((this || _global$7$1).m) >= 0) {
        res = u8.isub((this || _global$7$1).m);
      } else if (u8.cmpn(0) < 0) {
        res = u8.iadd((this || _global$7$1).m);
      }
      return res._forceRed(this || _global$7$1);
    };
    Mont.prototype.invm = function invm(a8) {
      var res = this.imod(a8._invmp((this || _global$7$1).m).mul((this || _global$7$1).r2));
      return res._forceRed(this || _global$7$1);
    };
  })(module$4$1, exports$X$1);
  return module$4$1.exports;
}
function dew$W$1() {
  if (_dewExec$W$1)
    return exports$W$1;
  _dewExec$W$1 = true;
  var Buffer3 = e$1$1.Buffer;
  var BN = dew$X$1();
  var randomBytes2 = dew$1S();
  function blind(priv) {
    var r9 = getr(priv);
    var blinder = r9.toRed(BN.mont(priv.modulus)).redPow(new BN(priv.publicExponent)).fromRed();
    return {
      blinder,
      unblinder: r9.invm(priv.modulus)
    };
  }
  function getr(priv) {
    var len = priv.modulus.byteLength();
    var r9;
    do {
      r9 = new BN(randomBytes2(len));
    } while (r9.cmp(priv.modulus) >= 0 || !r9.umod(priv.prime1) || !r9.umod(priv.prime2));
    return r9;
  }
  function crt(msg, priv) {
    var blinds = blind(priv);
    var len = priv.modulus.byteLength();
    var blinded = new BN(msg).mul(blinds.blinder).umod(priv.modulus);
    var c1 = blinded.toRed(BN.mont(priv.prime1));
    var c22 = blinded.toRed(BN.mont(priv.prime2));
    var qinv = priv.coefficient;
    var p8 = priv.prime1;
    var q3 = priv.prime2;
    var m1 = c1.redPow(priv.exponent1).fromRed();
    var m22 = c22.redPow(priv.exponent2).fromRed();
    var h8 = m1.isub(m22).imul(qinv).umod(p8).imul(q3);
    return m22.iadd(h8).imul(blinds.unblinder).umod(priv.modulus).toArrayLike(Buffer3, "be", len);
  }
  crt.getr = getr;
  exports$W$1 = crt;
  return exports$W$1;
}
function dew$V$1() {
  if (_dewExec$V$1)
    return module$3$1.exports;
  _dewExec$V$1 = true;
  (function(module3, exports11) {
    function assert2(val, msg) {
      if (!val)
        throw new Error(msg || "Assertion failed");
    }
    function inherits4(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function() {
      };
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }
    function BN(number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }
      (this || _global$6$1).negative = 0;
      (this || _global$6$1).words = null;
      (this || _global$6$1).length = 0;
      (this || _global$6$1).red = null;
      if (number !== null) {
        if (base === "le" || base === "be") {
          endian = base;
          base = 10;
        }
        this._init(number || 0, base || 10, endian || "be");
      }
    }
    if (typeof module3 === "object") {
      module3.exports = BN;
    } else {
      exports11.BN = BN;
    }
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer3;
    try {
      if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
        Buffer3 = window.Buffer;
      } else {
        Buffer3 = e$1$1.Buffer;
      }
    } catch (e11) {
    }
    BN.isBN = function isBN(num) {
      if (num instanceof BN) {
        return true;
      }
      return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
      if (left.cmp(right) > 0)
        return left;
      return right;
    };
    BN.min = function min(left, right) {
      if (left.cmp(right) < 0)
        return left;
      return right;
    };
    BN.prototype._init = function init2(number, base, endian) {
      if (typeof number === "number") {
        return this._initNumber(number, base, endian);
      }
      if (typeof number === "object") {
        return this._initArray(number, base, endian);
      }
      if (base === "hex") {
        base = 16;
      }
      assert2(base === (base | 0) && base >= 2 && base <= 36);
      number = number.toString().replace(/\s+/g, "");
      var start = 0;
      if (number[0] === "-") {
        start++;
        (this || _global$6$1).negative = 1;
      }
      if (start < number.length) {
        if (base === 16) {
          this._parseHex(number, start, endian);
        } else {
          this._parseBase(number, base, start);
          if (endian === "le") {
            this._initArray(this.toArray(), base, endian);
          }
        }
      }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
      if (number < 0) {
        (this || _global$6$1).negative = 1;
        number = -number;
      }
      if (number < 67108864) {
        (this || _global$6$1).words = [number & 67108863];
        (this || _global$6$1).length = 1;
      } else if (number < 4503599627370496) {
        (this || _global$6$1).words = [number & 67108863, number / 67108864 & 67108863];
        (this || _global$6$1).length = 2;
      } else {
        assert2(number < 9007199254740992);
        (this || _global$6$1).words = [number & 67108863, number / 67108864 & 67108863, 1];
        (this || _global$6$1).length = 3;
      }
      if (endian !== "le")
        return;
      this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
      assert2(typeof number.length === "number");
      if (number.length <= 0) {
        (this || _global$6$1).words = [0];
        (this || _global$6$1).length = 1;
        return this || _global$6$1;
      }
      (this || _global$6$1).length = Math.ceil(number.length / 3);
      (this || _global$6$1).words = new Array((this || _global$6$1).length);
      for (var i8 = 0; i8 < (this || _global$6$1).length; i8++) {
        (this || _global$6$1).words[i8] = 0;
      }
      var j4, w4;
      var off2 = 0;
      if (endian === "be") {
        for (i8 = number.length - 1, j4 = 0; i8 >= 0; i8 -= 3) {
          w4 = number[i8] | number[i8 - 1] << 8 | number[i8 - 2] << 16;
          (this || _global$6$1).words[j4] |= w4 << off2 & 67108863;
          (this || _global$6$1).words[j4 + 1] = w4 >>> 26 - off2 & 67108863;
          off2 += 24;
          if (off2 >= 26) {
            off2 -= 26;
            j4++;
          }
        }
      } else if (endian === "le") {
        for (i8 = 0, j4 = 0; i8 < number.length; i8 += 3) {
          w4 = number[i8] | number[i8 + 1] << 8 | number[i8 + 2] << 16;
          (this || _global$6$1).words[j4] |= w4 << off2 & 67108863;
          (this || _global$6$1).words[j4 + 1] = w4 >>> 26 - off2 & 67108863;
          off2 += 24;
          if (off2 >= 26) {
            off2 -= 26;
            j4++;
          }
        }
      }
      return this.strip();
    };
    function parseHex4Bits(string, index) {
      var c8 = string.charCodeAt(index);
      if (c8 >= 65 && c8 <= 70) {
        return c8 - 55;
      } else if (c8 >= 97 && c8 <= 102) {
        return c8 - 87;
      } else {
        return c8 - 48 & 15;
      }
    }
    function parseHexByte(string, lowerBound, index) {
      var r9 = parseHex4Bits(string, index);
      if (index - 1 >= lowerBound) {
        r9 |= parseHex4Bits(string, index - 1) << 4;
      }
      return r9;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
      (this || _global$6$1).length = Math.ceil((number.length - start) / 6);
      (this || _global$6$1).words = new Array((this || _global$6$1).length);
      for (var i8 = 0; i8 < (this || _global$6$1).length; i8++) {
        (this || _global$6$1).words[i8] = 0;
      }
      var off2 = 0;
      var j4 = 0;
      var w4;
      if (endian === "be") {
        for (i8 = number.length - 1; i8 >= start; i8 -= 2) {
          w4 = parseHexByte(number, start, i8) << off2;
          (this || _global$6$1).words[j4] |= w4 & 67108863;
          if (off2 >= 18) {
            off2 -= 18;
            j4 += 1;
            (this || _global$6$1).words[j4] |= w4 >>> 26;
          } else {
            off2 += 8;
          }
        }
      } else {
        var parseLength = number.length - start;
        for (i8 = parseLength % 2 === 0 ? start + 1 : start; i8 < number.length; i8 += 2) {
          w4 = parseHexByte(number, start, i8) << off2;
          (this || _global$6$1).words[j4] |= w4 & 67108863;
          if (off2 >= 18) {
            off2 -= 18;
            j4 += 1;
            (this || _global$6$1).words[j4] |= w4 >>> 26;
          } else {
            off2 += 8;
          }
        }
      }
      this.strip();
    };
    function parseBase(str, start, end, mul) {
      var r9 = 0;
      var len = Math.min(str.length, end);
      for (var i8 = start; i8 < len; i8++) {
        var c8 = str.charCodeAt(i8) - 48;
        r9 *= mul;
        if (c8 >= 49) {
          r9 += c8 - 49 + 10;
        } else if (c8 >= 17) {
          r9 += c8 - 17 + 10;
        } else {
          r9 += c8;
        }
      }
      return r9;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
      (this || _global$6$1).words = [0];
      (this || _global$6$1).length = 1;
      for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
        limbLen++;
      }
      limbLen--;
      limbPow = limbPow / base | 0;
      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;
      var word = 0;
      for (var i8 = start; i8 < end; i8 += limbLen) {
        word = parseBase(number, i8, i8 + limbLen, base);
        this.imuln(limbPow);
        if ((this || _global$6$1).words[0] + word < 67108864) {
          (this || _global$6$1).words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i8, number.length, base);
        for (i8 = 0; i8 < mod; i8++) {
          pow *= base;
        }
        this.imuln(pow);
        if ((this || _global$6$1).words[0] + word < 67108864) {
          (this || _global$6$1).words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
      this.strip();
    };
    BN.prototype.copy = function copy(dest) {
      dest.words = new Array((this || _global$6$1).length);
      for (var i8 = 0; i8 < (this || _global$6$1).length; i8++) {
        dest.words[i8] = (this || _global$6$1).words[i8];
      }
      dest.length = (this || _global$6$1).length;
      dest.negative = (this || _global$6$1).negative;
      dest.red = (this || _global$6$1).red;
    };
    BN.prototype.clone = function clone() {
      var r9 = new BN(null);
      this.copy(r9);
      return r9;
    };
    BN.prototype._expand = function _expand(size) {
      while ((this || _global$6$1).length < size) {
        (this || _global$6$1).words[(this || _global$6$1).length++] = 0;
      }
      return this || _global$6$1;
    };
    BN.prototype.strip = function strip() {
      while ((this || _global$6$1).length > 1 && (this || _global$6$1).words[(this || _global$6$1).length - 1] === 0) {
        (this || _global$6$1).length--;
      }
      return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
      if ((this || _global$6$1).length === 1 && (this || _global$6$1).words[0] === 0) {
        (this || _global$6$1).negative = 0;
      }
      return this || _global$6$1;
    };
    BN.prototype.inspect = function inspect3() {
      return ((this || _global$6$1).red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    var zeros = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"];
    var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
    var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
    BN.prototype.toString = function toString3(base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;
      var out;
      if (base === 16 || base === "hex") {
        out = "";
        var off2 = 0;
        var carry = 0;
        for (var i8 = 0; i8 < (this || _global$6$1).length; i8++) {
          var w4 = (this || _global$6$1).words[i8];
          var word = ((w4 << off2 | carry) & 16777215).toString(16);
          carry = w4 >>> 24 - off2 & 16777215;
          if (carry !== 0 || i8 !== (this || _global$6$1).length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }
          off2 += 2;
          if (off2 >= 26) {
            off2 -= 26;
            i8--;
          }
        }
        if (carry !== 0) {
          out = carry.toString(16) + out;
        }
        while (out.length % padding !== 0) {
          out = "0" + out;
        }
        if ((this || _global$6$1).negative !== 0) {
          out = "-" + out;
        }
        return out;
      }
      if (base === (base | 0) && base >= 2 && base <= 36) {
        var groupSize = groupSizes[base];
        var groupBase = groupBases[base];
        out = "";
        var c8 = this.clone();
        c8.negative = 0;
        while (!c8.isZero()) {
          var r9 = c8.modn(groupBase).toString(base);
          c8 = c8.idivn(groupBase);
          if (!c8.isZero()) {
            out = zeros[groupSize - r9.length] + r9 + out;
          } else {
            out = r9 + out;
          }
        }
        if (this.isZero()) {
          out = "0" + out;
        }
        while (out.length % padding !== 0) {
          out = "0" + out;
        }
        if ((this || _global$6$1).negative !== 0) {
          out = "-" + out;
        }
        return out;
      }
      assert2(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
      var ret = (this || _global$6$1).words[0];
      if ((this || _global$6$1).length === 2) {
        ret += (this || _global$6$1).words[1] * 67108864;
      } else if ((this || _global$6$1).length === 3 && (this || _global$6$1).words[2] === 1) {
        ret += 4503599627370496 + (this || _global$6$1).words[1] * 67108864;
      } else if ((this || _global$6$1).length > 2) {
        assert2(false, "Number can only safely store up to 53 bits");
      }
      return (this || _global$6$1).negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON2() {
      return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
      assert2(typeof Buffer3 !== "undefined");
      return this.toArrayLike(Buffer3, endian, length);
    };
    BN.prototype.toArray = function toArray2(endian, length) {
      return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert2(byteLength <= reqLength, "byte array longer than desired length");
      assert2(reqLength > 0, "Requested array length <= 0");
      this.strip();
      var littleEndian = endian === "le";
      var res = new ArrayType(reqLength);
      var b5, i8;
      var q3 = this.clone();
      if (!littleEndian) {
        for (i8 = 0; i8 < reqLength - byteLength; i8++) {
          res[i8] = 0;
        }
        for (i8 = 0; !q3.isZero(); i8++) {
          b5 = q3.andln(255);
          q3.iushrn(8);
          res[reqLength - i8 - 1] = b5;
        }
      } else {
        for (i8 = 0; !q3.isZero(); i8++) {
          b5 = q3.andln(255);
          q3.iushrn(8);
          res[i8] = b5;
        }
        for (; i8 < reqLength; i8++) {
          res[i8] = 0;
        }
      }
      return res;
    };
    if (Math.clz32) {
      BN.prototype._countBits = function _countBits(w4) {
        return 32 - Math.clz32(w4);
      };
    } else {
      BN.prototype._countBits = function _countBits(w4) {
        var t8 = w4;
        var r9 = 0;
        if (t8 >= 4096) {
          r9 += 13;
          t8 >>>= 13;
        }
        if (t8 >= 64) {
          r9 += 7;
          t8 >>>= 7;
        }
        if (t8 >= 8) {
          r9 += 4;
          t8 >>>= 4;
        }
        if (t8 >= 2) {
          r9 += 2;
          t8 >>>= 2;
        }
        return r9 + t8;
      };
    }
    BN.prototype._zeroBits = function _zeroBits(w4) {
      if (w4 === 0)
        return 26;
      var t8 = w4;
      var r9 = 0;
      if ((t8 & 8191) === 0) {
        r9 += 13;
        t8 >>>= 13;
      }
      if ((t8 & 127) === 0) {
        r9 += 7;
        t8 >>>= 7;
      }
      if ((t8 & 15) === 0) {
        r9 += 4;
        t8 >>>= 4;
      }
      if ((t8 & 3) === 0) {
        r9 += 2;
        t8 >>>= 2;
      }
      if ((t8 & 1) === 0) {
        r9++;
      }
      return r9;
    };
    BN.prototype.bitLength = function bitLength() {
      var w4 = (this || _global$6$1).words[(this || _global$6$1).length - 1];
      var hi = this._countBits(w4);
      return ((this || _global$6$1).length - 1) * 26 + hi;
    };
    function toBitArray(num) {
      var w4 = new Array(num.bitLength());
      for (var bit = 0; bit < w4.length; bit++) {
        var off2 = bit / 26 | 0;
        var wbit = bit % 26;
        w4[bit] = (num.words[off2] & 1 << wbit) >>> wbit;
      }
      return w4;
    }
    BN.prototype.zeroBits = function zeroBits() {
      if (this.isZero())
        return 0;
      var r9 = 0;
      for (var i8 = 0; i8 < (this || _global$6$1).length; i8++) {
        var b5 = this._zeroBits((this || _global$6$1).words[i8]);
        r9 += b5;
        if (b5 !== 26)
          break;
      }
      return r9;
    };
    BN.prototype.byteLength = function byteLength() {
      return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
      if ((this || _global$6$1).negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }
      return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }
      return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
      return (this || _global$6$1).negative !== 0;
    };
    BN.prototype.neg = function neg() {
      return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
      if (!this.isZero()) {
        (this || _global$6$1).negative ^= 1;
      }
      return this || _global$6$1;
    };
    BN.prototype.iuor = function iuor(num) {
      while ((this || _global$6$1).length < num.length) {
        (this || _global$6$1).words[(this || _global$6$1).length++] = 0;
      }
      for (var i8 = 0; i8 < num.length; i8++) {
        (this || _global$6$1).words[i8] = (this || _global$6$1).words[i8] | num.words[i8];
      }
      return this.strip();
    };
    BN.prototype.ior = function ior(num) {
      assert2(((this || _global$6$1).negative | num.negative) === 0);
      return this.iuor(num);
    };
    BN.prototype.or = function or(num) {
      if ((this || _global$6$1).length > num.length)
        return this.clone().ior(num);
      return num.clone().ior(this || _global$6$1);
    };
    BN.prototype.uor = function uor(num) {
      if ((this || _global$6$1).length > num.length)
        return this.clone().iuor(num);
      return num.clone().iuor(this || _global$6$1);
    };
    BN.prototype.iuand = function iuand(num) {
      var b5;
      if ((this || _global$6$1).length > num.length) {
        b5 = num;
      } else {
        b5 = this || _global$6$1;
      }
      for (var i8 = 0; i8 < b5.length; i8++) {
        (this || _global$6$1).words[i8] = (this || _global$6$1).words[i8] & num.words[i8];
      }
      (this || _global$6$1).length = b5.length;
      return this.strip();
    };
    BN.prototype.iand = function iand(num) {
      assert2(((this || _global$6$1).negative | num.negative) === 0);
      return this.iuand(num);
    };
    BN.prototype.and = function and(num) {
      if ((this || _global$6$1).length > num.length)
        return this.clone().iand(num);
      return num.clone().iand(this || _global$6$1);
    };
    BN.prototype.uand = function uand(num) {
      if ((this || _global$6$1).length > num.length)
        return this.clone().iuand(num);
      return num.clone().iuand(this || _global$6$1);
    };
    BN.prototype.iuxor = function iuxor(num) {
      var a8;
      var b5;
      if ((this || _global$6$1).length > num.length) {
        a8 = this || _global$6$1;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$6$1;
      }
      for (var i8 = 0; i8 < b5.length; i8++) {
        (this || _global$6$1).words[i8] = a8.words[i8] ^ b5.words[i8];
      }
      if ((this || _global$6$1) !== a8) {
        for (; i8 < a8.length; i8++) {
          (this || _global$6$1).words[i8] = a8.words[i8];
        }
      }
      (this || _global$6$1).length = a8.length;
      return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
      assert2(((this || _global$6$1).negative | num.negative) === 0);
      return this.iuxor(num);
    };
    BN.prototype.xor = function xor(num) {
      if ((this || _global$6$1).length > num.length)
        return this.clone().ixor(num);
      return num.clone().ixor(this || _global$6$1);
    };
    BN.prototype.uxor = function uxor(num) {
      if ((this || _global$6$1).length > num.length)
        return this.clone().iuxor(num);
      return num.clone().iuxor(this || _global$6$1);
    };
    BN.prototype.inotn = function inotn(width) {
      assert2(typeof width === "number" && width >= 0);
      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;
      this._expand(bytesNeeded);
      if (bitsLeft > 0) {
        bytesNeeded--;
      }
      for (var i8 = 0; i8 < bytesNeeded; i8++) {
        (this || _global$6$1).words[i8] = ~(this || _global$6$1).words[i8] & 67108863;
      }
      if (bitsLeft > 0) {
        (this || _global$6$1).words[i8] = ~(this || _global$6$1).words[i8] & 67108863 >> 26 - bitsLeft;
      }
      return this.strip();
    };
    BN.prototype.notn = function notn(width) {
      return this.clone().inotn(width);
    };
    BN.prototype.setn = function setn(bit, val) {
      assert2(typeof bit === "number" && bit >= 0);
      var off2 = bit / 26 | 0;
      var wbit = bit % 26;
      this._expand(off2 + 1);
      if (val) {
        (this || _global$6$1).words[off2] = (this || _global$6$1).words[off2] | 1 << wbit;
      } else {
        (this || _global$6$1).words[off2] = (this || _global$6$1).words[off2] & ~(1 << wbit);
      }
      return this.strip();
    };
    BN.prototype.iadd = function iadd(num) {
      var r9;
      if ((this || _global$6$1).negative !== 0 && num.negative === 0) {
        (this || _global$6$1).negative = 0;
        r9 = this.isub(num);
        (this || _global$6$1).negative ^= 1;
        return this._normSign();
      } else if ((this || _global$6$1).negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r9 = this.isub(num);
        num.negative = 1;
        return r9._normSign();
      }
      var a8, b5;
      if ((this || _global$6$1).length > num.length) {
        a8 = this || _global$6$1;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$6$1;
      }
      var carry = 0;
      for (var i8 = 0; i8 < b5.length; i8++) {
        r9 = (a8.words[i8] | 0) + (b5.words[i8] | 0) + carry;
        (this || _global$6$1).words[i8] = r9 & 67108863;
        carry = r9 >>> 26;
      }
      for (; carry !== 0 && i8 < a8.length; i8++) {
        r9 = (a8.words[i8] | 0) + carry;
        (this || _global$6$1).words[i8] = r9 & 67108863;
        carry = r9 >>> 26;
      }
      (this || _global$6$1).length = a8.length;
      if (carry !== 0) {
        (this || _global$6$1).words[(this || _global$6$1).length] = carry;
        (this || _global$6$1).length++;
      } else if (a8 !== (this || _global$6$1)) {
        for (; i8 < a8.length; i8++) {
          (this || _global$6$1).words[i8] = a8.words[i8];
        }
      }
      return this || _global$6$1;
    };
    BN.prototype.add = function add(num) {
      var res;
      if (num.negative !== 0 && (this || _global$6$1).negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && (this || _global$6$1).negative !== 0) {
        (this || _global$6$1).negative = 0;
        res = num.sub(this || _global$6$1);
        (this || _global$6$1).negative = 1;
        return res;
      }
      if ((this || _global$6$1).length > num.length)
        return this.clone().iadd(num);
      return num.clone().iadd(this || _global$6$1);
    };
    BN.prototype.isub = function isub(num) {
      if (num.negative !== 0) {
        num.negative = 0;
        var r9 = this.iadd(num);
        num.negative = 1;
        return r9._normSign();
      } else if ((this || _global$6$1).negative !== 0) {
        (this || _global$6$1).negative = 0;
        this.iadd(num);
        (this || _global$6$1).negative = 1;
        return this._normSign();
      }
      var cmp = this.cmp(num);
      if (cmp === 0) {
        (this || _global$6$1).negative = 0;
        (this || _global$6$1).length = 1;
        (this || _global$6$1).words[0] = 0;
        return this || _global$6$1;
      }
      var a8, b5;
      if (cmp > 0) {
        a8 = this || _global$6$1;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$6$1;
      }
      var carry = 0;
      for (var i8 = 0; i8 < b5.length; i8++) {
        r9 = (a8.words[i8] | 0) - (b5.words[i8] | 0) + carry;
        carry = r9 >> 26;
        (this || _global$6$1).words[i8] = r9 & 67108863;
      }
      for (; carry !== 0 && i8 < a8.length; i8++) {
        r9 = (a8.words[i8] | 0) + carry;
        carry = r9 >> 26;
        (this || _global$6$1).words[i8] = r9 & 67108863;
      }
      if (carry === 0 && i8 < a8.length && a8 !== (this || _global$6$1)) {
        for (; i8 < a8.length; i8++) {
          (this || _global$6$1).words[i8] = a8.words[i8];
        }
      }
      (this || _global$6$1).length = Math.max((this || _global$6$1).length, i8);
      if (a8 !== (this || _global$6$1)) {
        (this || _global$6$1).negative = 1;
      }
      return this.strip();
    };
    BN.prototype.sub = function sub(num) {
      return this.clone().isub(num);
    };
    function smallMulTo(self2, num, out) {
      out.negative = num.negative ^ self2.negative;
      var len = self2.length + num.length | 0;
      out.length = len;
      len = len - 1 | 0;
      var a8 = self2.words[0] | 0;
      var b5 = num.words[0] | 0;
      var r9 = a8 * b5;
      var lo = r9 & 67108863;
      var carry = r9 / 67108864 | 0;
      out.words[0] = lo;
      for (var k4 = 1; k4 < len; k4++) {
        var ncarry = carry >>> 26;
        var rword = carry & 67108863;
        var maxJ = Math.min(k4, num.length - 1);
        for (var j4 = Math.max(0, k4 - self2.length + 1); j4 <= maxJ; j4++) {
          var i8 = k4 - j4 | 0;
          a8 = self2.words[i8] | 0;
          b5 = num.words[j4] | 0;
          r9 = a8 * b5 + rword;
          ncarry += r9 / 67108864 | 0;
          rword = r9 & 67108863;
        }
        out.words[k4] = rword | 0;
        carry = ncarry | 0;
      }
      if (carry !== 0) {
        out.words[k4] = carry | 0;
      } else {
        out.length--;
      }
      return out.strip();
    }
    var comb10MulTo = function comb10MulTo2(self2, num, out) {
      var a8 = self2.words;
      var b5 = num.words;
      var o9 = out.words;
      var c8 = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a8[0] | 0;
      var al0 = a0 & 8191;
      var ah0 = a0 >>> 13;
      var a1 = a8[1] | 0;
      var al1 = a1 & 8191;
      var ah1 = a1 >>> 13;
      var a22 = a8[2] | 0;
      var al2 = a22 & 8191;
      var ah2 = a22 >>> 13;
      var a32 = a8[3] | 0;
      var al3 = a32 & 8191;
      var ah3 = a32 >>> 13;
      var a42 = a8[4] | 0;
      var al4 = a42 & 8191;
      var ah4 = a42 >>> 13;
      var a52 = a8[5] | 0;
      var al5 = a52 & 8191;
      var ah5 = a52 >>> 13;
      var a62 = a8[6] | 0;
      var al6 = a62 & 8191;
      var ah6 = a62 >>> 13;
      var a72 = a8[7] | 0;
      var al7 = a72 & 8191;
      var ah7 = a72 >>> 13;
      var a82 = a8[8] | 0;
      var al8 = a82 & 8191;
      var ah8 = a82 >>> 13;
      var a9 = a8[9] | 0;
      var al9 = a9 & 8191;
      var ah9 = a9 >>> 13;
      var b0 = b5[0] | 0;
      var bl0 = b0 & 8191;
      var bh0 = b0 >>> 13;
      var b1 = b5[1] | 0;
      var bl1 = b1 & 8191;
      var bh1 = b1 >>> 13;
      var b22 = b5[2] | 0;
      var bl2 = b22 & 8191;
      var bh2 = b22 >>> 13;
      var b32 = b5[3] | 0;
      var bl3 = b32 & 8191;
      var bh3 = b32 >>> 13;
      var b42 = b5[4] | 0;
      var bl4 = b42 & 8191;
      var bh4 = b42 >>> 13;
      var b52 = b5[5] | 0;
      var bl5 = b52 & 8191;
      var bh5 = b52 >>> 13;
      var b6 = b5[6] | 0;
      var bl6 = b6 & 8191;
      var bh6 = b6 >>> 13;
      var b7 = b5[7] | 0;
      var bl7 = b7 & 8191;
      var bh7 = b7 >>> 13;
      var b8 = b5[8] | 0;
      var bl8 = b8 & 8191;
      var bh8 = b8 >>> 13;
      var b9 = b5[9] | 0;
      var bl9 = b9 & 8191;
      var bh9 = b9 >>> 13;
      out.negative = self2.negative ^ num.negative;
      out.length = 19;
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = mid + Math.imul(ah0, bl0) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
      w0 &= 67108863;
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = mid + Math.imul(ah1, bl0) | 0;
      hi = Math.imul(ah1, bh0);
      lo = lo + Math.imul(al0, bl1) | 0;
      mid = mid + Math.imul(al0, bh1) | 0;
      mid = mid + Math.imul(ah0, bl1) | 0;
      hi = hi + Math.imul(ah0, bh1) | 0;
      var w1 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
      w1 &= 67108863;
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = mid + Math.imul(ah2, bl0) | 0;
      hi = Math.imul(ah2, bh0);
      lo = lo + Math.imul(al1, bl1) | 0;
      mid = mid + Math.imul(al1, bh1) | 0;
      mid = mid + Math.imul(ah1, bl1) | 0;
      hi = hi + Math.imul(ah1, bh1) | 0;
      lo = lo + Math.imul(al0, bl2) | 0;
      mid = mid + Math.imul(al0, bh2) | 0;
      mid = mid + Math.imul(ah0, bl2) | 0;
      hi = hi + Math.imul(ah0, bh2) | 0;
      var w22 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w22 >>> 26) | 0;
      w22 &= 67108863;
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = mid + Math.imul(ah3, bl0) | 0;
      hi = Math.imul(ah3, bh0);
      lo = lo + Math.imul(al2, bl1) | 0;
      mid = mid + Math.imul(al2, bh1) | 0;
      mid = mid + Math.imul(ah2, bl1) | 0;
      hi = hi + Math.imul(ah2, bh1) | 0;
      lo = lo + Math.imul(al1, bl2) | 0;
      mid = mid + Math.imul(al1, bh2) | 0;
      mid = mid + Math.imul(ah1, bl2) | 0;
      hi = hi + Math.imul(ah1, bh2) | 0;
      lo = lo + Math.imul(al0, bl3) | 0;
      mid = mid + Math.imul(al0, bh3) | 0;
      mid = mid + Math.imul(ah0, bl3) | 0;
      hi = hi + Math.imul(ah0, bh3) | 0;
      var w32 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w32 >>> 26) | 0;
      w32 &= 67108863;
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = mid + Math.imul(ah4, bl0) | 0;
      hi = Math.imul(ah4, bh0);
      lo = lo + Math.imul(al3, bl1) | 0;
      mid = mid + Math.imul(al3, bh1) | 0;
      mid = mid + Math.imul(ah3, bl1) | 0;
      hi = hi + Math.imul(ah3, bh1) | 0;
      lo = lo + Math.imul(al2, bl2) | 0;
      mid = mid + Math.imul(al2, bh2) | 0;
      mid = mid + Math.imul(ah2, bl2) | 0;
      hi = hi + Math.imul(ah2, bh2) | 0;
      lo = lo + Math.imul(al1, bl3) | 0;
      mid = mid + Math.imul(al1, bh3) | 0;
      mid = mid + Math.imul(ah1, bl3) | 0;
      hi = hi + Math.imul(ah1, bh3) | 0;
      lo = lo + Math.imul(al0, bl4) | 0;
      mid = mid + Math.imul(al0, bh4) | 0;
      mid = mid + Math.imul(ah0, bl4) | 0;
      hi = hi + Math.imul(ah0, bh4) | 0;
      var w4 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
      w4 &= 67108863;
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = mid + Math.imul(ah5, bl0) | 0;
      hi = Math.imul(ah5, bh0);
      lo = lo + Math.imul(al4, bl1) | 0;
      mid = mid + Math.imul(al4, bh1) | 0;
      mid = mid + Math.imul(ah4, bl1) | 0;
      hi = hi + Math.imul(ah4, bh1) | 0;
      lo = lo + Math.imul(al3, bl2) | 0;
      mid = mid + Math.imul(al3, bh2) | 0;
      mid = mid + Math.imul(ah3, bl2) | 0;
      hi = hi + Math.imul(ah3, bh2) | 0;
      lo = lo + Math.imul(al2, bl3) | 0;
      mid = mid + Math.imul(al2, bh3) | 0;
      mid = mid + Math.imul(ah2, bl3) | 0;
      hi = hi + Math.imul(ah2, bh3) | 0;
      lo = lo + Math.imul(al1, bl4) | 0;
      mid = mid + Math.imul(al1, bh4) | 0;
      mid = mid + Math.imul(ah1, bl4) | 0;
      hi = hi + Math.imul(ah1, bh4) | 0;
      lo = lo + Math.imul(al0, bl5) | 0;
      mid = mid + Math.imul(al0, bh5) | 0;
      mid = mid + Math.imul(ah0, bl5) | 0;
      hi = hi + Math.imul(ah0, bh5) | 0;
      var w5 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
      w5 &= 67108863;
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = mid + Math.imul(ah6, bl0) | 0;
      hi = Math.imul(ah6, bh0);
      lo = lo + Math.imul(al5, bl1) | 0;
      mid = mid + Math.imul(al5, bh1) | 0;
      mid = mid + Math.imul(ah5, bl1) | 0;
      hi = hi + Math.imul(ah5, bh1) | 0;
      lo = lo + Math.imul(al4, bl2) | 0;
      mid = mid + Math.imul(al4, bh2) | 0;
      mid = mid + Math.imul(ah4, bl2) | 0;
      hi = hi + Math.imul(ah4, bh2) | 0;
      lo = lo + Math.imul(al3, bl3) | 0;
      mid = mid + Math.imul(al3, bh3) | 0;
      mid = mid + Math.imul(ah3, bl3) | 0;
      hi = hi + Math.imul(ah3, bh3) | 0;
      lo = lo + Math.imul(al2, bl4) | 0;
      mid = mid + Math.imul(al2, bh4) | 0;
      mid = mid + Math.imul(ah2, bl4) | 0;
      hi = hi + Math.imul(ah2, bh4) | 0;
      lo = lo + Math.imul(al1, bl5) | 0;
      mid = mid + Math.imul(al1, bh5) | 0;
      mid = mid + Math.imul(ah1, bl5) | 0;
      hi = hi + Math.imul(ah1, bh5) | 0;
      lo = lo + Math.imul(al0, bl6) | 0;
      mid = mid + Math.imul(al0, bh6) | 0;
      mid = mid + Math.imul(ah0, bl6) | 0;
      hi = hi + Math.imul(ah0, bh6) | 0;
      var w6 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
      w6 &= 67108863;
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = mid + Math.imul(ah7, bl0) | 0;
      hi = Math.imul(ah7, bh0);
      lo = lo + Math.imul(al6, bl1) | 0;
      mid = mid + Math.imul(al6, bh1) | 0;
      mid = mid + Math.imul(ah6, bl1) | 0;
      hi = hi + Math.imul(ah6, bh1) | 0;
      lo = lo + Math.imul(al5, bl2) | 0;
      mid = mid + Math.imul(al5, bh2) | 0;
      mid = mid + Math.imul(ah5, bl2) | 0;
      hi = hi + Math.imul(ah5, bh2) | 0;
      lo = lo + Math.imul(al4, bl3) | 0;
      mid = mid + Math.imul(al4, bh3) | 0;
      mid = mid + Math.imul(ah4, bl3) | 0;
      hi = hi + Math.imul(ah4, bh3) | 0;
      lo = lo + Math.imul(al3, bl4) | 0;
      mid = mid + Math.imul(al3, bh4) | 0;
      mid = mid + Math.imul(ah3, bl4) | 0;
      hi = hi + Math.imul(ah3, bh4) | 0;
      lo = lo + Math.imul(al2, bl5) | 0;
      mid = mid + Math.imul(al2, bh5) | 0;
      mid = mid + Math.imul(ah2, bl5) | 0;
      hi = hi + Math.imul(ah2, bh5) | 0;
      lo = lo + Math.imul(al1, bl6) | 0;
      mid = mid + Math.imul(al1, bh6) | 0;
      mid = mid + Math.imul(ah1, bl6) | 0;
      hi = hi + Math.imul(ah1, bh6) | 0;
      lo = lo + Math.imul(al0, bl7) | 0;
      mid = mid + Math.imul(al0, bh7) | 0;
      mid = mid + Math.imul(ah0, bl7) | 0;
      hi = hi + Math.imul(ah0, bh7) | 0;
      var w7 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
      w7 &= 67108863;
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = mid + Math.imul(ah8, bl0) | 0;
      hi = Math.imul(ah8, bh0);
      lo = lo + Math.imul(al7, bl1) | 0;
      mid = mid + Math.imul(al7, bh1) | 0;
      mid = mid + Math.imul(ah7, bl1) | 0;
      hi = hi + Math.imul(ah7, bh1) | 0;
      lo = lo + Math.imul(al6, bl2) | 0;
      mid = mid + Math.imul(al6, bh2) | 0;
      mid = mid + Math.imul(ah6, bl2) | 0;
      hi = hi + Math.imul(ah6, bh2) | 0;
      lo = lo + Math.imul(al5, bl3) | 0;
      mid = mid + Math.imul(al5, bh3) | 0;
      mid = mid + Math.imul(ah5, bl3) | 0;
      hi = hi + Math.imul(ah5, bh3) | 0;
      lo = lo + Math.imul(al4, bl4) | 0;
      mid = mid + Math.imul(al4, bh4) | 0;
      mid = mid + Math.imul(ah4, bl4) | 0;
      hi = hi + Math.imul(ah4, bh4) | 0;
      lo = lo + Math.imul(al3, bl5) | 0;
      mid = mid + Math.imul(al3, bh5) | 0;
      mid = mid + Math.imul(ah3, bl5) | 0;
      hi = hi + Math.imul(ah3, bh5) | 0;
      lo = lo + Math.imul(al2, bl6) | 0;
      mid = mid + Math.imul(al2, bh6) | 0;
      mid = mid + Math.imul(ah2, bl6) | 0;
      hi = hi + Math.imul(ah2, bh6) | 0;
      lo = lo + Math.imul(al1, bl7) | 0;
      mid = mid + Math.imul(al1, bh7) | 0;
      mid = mid + Math.imul(ah1, bl7) | 0;
      hi = hi + Math.imul(ah1, bh7) | 0;
      lo = lo + Math.imul(al0, bl8) | 0;
      mid = mid + Math.imul(al0, bh8) | 0;
      mid = mid + Math.imul(ah0, bl8) | 0;
      hi = hi + Math.imul(ah0, bh8) | 0;
      var w8 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
      w8 &= 67108863;
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = mid + Math.imul(ah9, bl0) | 0;
      hi = Math.imul(ah9, bh0);
      lo = lo + Math.imul(al8, bl1) | 0;
      mid = mid + Math.imul(al8, bh1) | 0;
      mid = mid + Math.imul(ah8, bl1) | 0;
      hi = hi + Math.imul(ah8, bh1) | 0;
      lo = lo + Math.imul(al7, bl2) | 0;
      mid = mid + Math.imul(al7, bh2) | 0;
      mid = mid + Math.imul(ah7, bl2) | 0;
      hi = hi + Math.imul(ah7, bh2) | 0;
      lo = lo + Math.imul(al6, bl3) | 0;
      mid = mid + Math.imul(al6, bh3) | 0;
      mid = mid + Math.imul(ah6, bl3) | 0;
      hi = hi + Math.imul(ah6, bh3) | 0;
      lo = lo + Math.imul(al5, bl4) | 0;
      mid = mid + Math.imul(al5, bh4) | 0;
      mid = mid + Math.imul(ah5, bl4) | 0;
      hi = hi + Math.imul(ah5, bh4) | 0;
      lo = lo + Math.imul(al4, bl5) | 0;
      mid = mid + Math.imul(al4, bh5) | 0;
      mid = mid + Math.imul(ah4, bl5) | 0;
      hi = hi + Math.imul(ah4, bh5) | 0;
      lo = lo + Math.imul(al3, bl6) | 0;
      mid = mid + Math.imul(al3, bh6) | 0;
      mid = mid + Math.imul(ah3, bl6) | 0;
      hi = hi + Math.imul(ah3, bh6) | 0;
      lo = lo + Math.imul(al2, bl7) | 0;
      mid = mid + Math.imul(al2, bh7) | 0;
      mid = mid + Math.imul(ah2, bl7) | 0;
      hi = hi + Math.imul(ah2, bh7) | 0;
      lo = lo + Math.imul(al1, bl8) | 0;
      mid = mid + Math.imul(al1, bh8) | 0;
      mid = mid + Math.imul(ah1, bl8) | 0;
      hi = hi + Math.imul(ah1, bh8) | 0;
      lo = lo + Math.imul(al0, bl9) | 0;
      mid = mid + Math.imul(al0, bh9) | 0;
      mid = mid + Math.imul(ah0, bl9) | 0;
      hi = hi + Math.imul(ah0, bh9) | 0;
      var w9 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
      w9 &= 67108863;
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = mid + Math.imul(ah9, bl1) | 0;
      hi = Math.imul(ah9, bh1);
      lo = lo + Math.imul(al8, bl2) | 0;
      mid = mid + Math.imul(al8, bh2) | 0;
      mid = mid + Math.imul(ah8, bl2) | 0;
      hi = hi + Math.imul(ah8, bh2) | 0;
      lo = lo + Math.imul(al7, bl3) | 0;
      mid = mid + Math.imul(al7, bh3) | 0;
      mid = mid + Math.imul(ah7, bl3) | 0;
      hi = hi + Math.imul(ah7, bh3) | 0;
      lo = lo + Math.imul(al6, bl4) | 0;
      mid = mid + Math.imul(al6, bh4) | 0;
      mid = mid + Math.imul(ah6, bl4) | 0;
      hi = hi + Math.imul(ah6, bh4) | 0;
      lo = lo + Math.imul(al5, bl5) | 0;
      mid = mid + Math.imul(al5, bh5) | 0;
      mid = mid + Math.imul(ah5, bl5) | 0;
      hi = hi + Math.imul(ah5, bh5) | 0;
      lo = lo + Math.imul(al4, bl6) | 0;
      mid = mid + Math.imul(al4, bh6) | 0;
      mid = mid + Math.imul(ah4, bl6) | 0;
      hi = hi + Math.imul(ah4, bh6) | 0;
      lo = lo + Math.imul(al3, bl7) | 0;
      mid = mid + Math.imul(al3, bh7) | 0;
      mid = mid + Math.imul(ah3, bl7) | 0;
      hi = hi + Math.imul(ah3, bh7) | 0;
      lo = lo + Math.imul(al2, bl8) | 0;
      mid = mid + Math.imul(al2, bh8) | 0;
      mid = mid + Math.imul(ah2, bl8) | 0;
      hi = hi + Math.imul(ah2, bh8) | 0;
      lo = lo + Math.imul(al1, bl9) | 0;
      mid = mid + Math.imul(al1, bh9) | 0;
      mid = mid + Math.imul(ah1, bl9) | 0;
      hi = hi + Math.imul(ah1, bh9) | 0;
      var w10 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
      w10 &= 67108863;
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = mid + Math.imul(ah9, bl2) | 0;
      hi = Math.imul(ah9, bh2);
      lo = lo + Math.imul(al8, bl3) | 0;
      mid = mid + Math.imul(al8, bh3) | 0;
      mid = mid + Math.imul(ah8, bl3) | 0;
      hi = hi + Math.imul(ah8, bh3) | 0;
      lo = lo + Math.imul(al7, bl4) | 0;
      mid = mid + Math.imul(al7, bh4) | 0;
      mid = mid + Math.imul(ah7, bl4) | 0;
      hi = hi + Math.imul(ah7, bh4) | 0;
      lo = lo + Math.imul(al6, bl5) | 0;
      mid = mid + Math.imul(al6, bh5) | 0;
      mid = mid + Math.imul(ah6, bl5) | 0;
      hi = hi + Math.imul(ah6, bh5) | 0;
      lo = lo + Math.imul(al5, bl6) | 0;
      mid = mid + Math.imul(al5, bh6) | 0;
      mid = mid + Math.imul(ah5, bl6) | 0;
      hi = hi + Math.imul(ah5, bh6) | 0;
      lo = lo + Math.imul(al4, bl7) | 0;
      mid = mid + Math.imul(al4, bh7) | 0;
      mid = mid + Math.imul(ah4, bl7) | 0;
      hi = hi + Math.imul(ah4, bh7) | 0;
      lo = lo + Math.imul(al3, bl8) | 0;
      mid = mid + Math.imul(al3, bh8) | 0;
      mid = mid + Math.imul(ah3, bl8) | 0;
      hi = hi + Math.imul(ah3, bh8) | 0;
      lo = lo + Math.imul(al2, bl9) | 0;
      mid = mid + Math.imul(al2, bh9) | 0;
      mid = mid + Math.imul(ah2, bl9) | 0;
      hi = hi + Math.imul(ah2, bh9) | 0;
      var w11 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
      w11 &= 67108863;
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = mid + Math.imul(ah9, bl3) | 0;
      hi = Math.imul(ah9, bh3);
      lo = lo + Math.imul(al8, bl4) | 0;
      mid = mid + Math.imul(al8, bh4) | 0;
      mid = mid + Math.imul(ah8, bl4) | 0;
      hi = hi + Math.imul(ah8, bh4) | 0;
      lo = lo + Math.imul(al7, bl5) | 0;
      mid = mid + Math.imul(al7, bh5) | 0;
      mid = mid + Math.imul(ah7, bl5) | 0;
      hi = hi + Math.imul(ah7, bh5) | 0;
      lo = lo + Math.imul(al6, bl6) | 0;
      mid = mid + Math.imul(al6, bh6) | 0;
      mid = mid + Math.imul(ah6, bl6) | 0;
      hi = hi + Math.imul(ah6, bh6) | 0;
      lo = lo + Math.imul(al5, bl7) | 0;
      mid = mid + Math.imul(al5, bh7) | 0;
      mid = mid + Math.imul(ah5, bl7) | 0;
      hi = hi + Math.imul(ah5, bh7) | 0;
      lo = lo + Math.imul(al4, bl8) | 0;
      mid = mid + Math.imul(al4, bh8) | 0;
      mid = mid + Math.imul(ah4, bl8) | 0;
      hi = hi + Math.imul(ah4, bh8) | 0;
      lo = lo + Math.imul(al3, bl9) | 0;
      mid = mid + Math.imul(al3, bh9) | 0;
      mid = mid + Math.imul(ah3, bl9) | 0;
      hi = hi + Math.imul(ah3, bh9) | 0;
      var w12 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
      w12 &= 67108863;
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = mid + Math.imul(ah9, bl4) | 0;
      hi = Math.imul(ah9, bh4);
      lo = lo + Math.imul(al8, bl5) | 0;
      mid = mid + Math.imul(al8, bh5) | 0;
      mid = mid + Math.imul(ah8, bl5) | 0;
      hi = hi + Math.imul(ah8, bh5) | 0;
      lo = lo + Math.imul(al7, bl6) | 0;
      mid = mid + Math.imul(al7, bh6) | 0;
      mid = mid + Math.imul(ah7, bl6) | 0;
      hi = hi + Math.imul(ah7, bh6) | 0;
      lo = lo + Math.imul(al6, bl7) | 0;
      mid = mid + Math.imul(al6, bh7) | 0;
      mid = mid + Math.imul(ah6, bl7) | 0;
      hi = hi + Math.imul(ah6, bh7) | 0;
      lo = lo + Math.imul(al5, bl8) | 0;
      mid = mid + Math.imul(al5, bh8) | 0;
      mid = mid + Math.imul(ah5, bl8) | 0;
      hi = hi + Math.imul(ah5, bh8) | 0;
      lo = lo + Math.imul(al4, bl9) | 0;
      mid = mid + Math.imul(al4, bh9) | 0;
      mid = mid + Math.imul(ah4, bl9) | 0;
      hi = hi + Math.imul(ah4, bh9) | 0;
      var w13 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
      w13 &= 67108863;
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = mid + Math.imul(ah9, bl5) | 0;
      hi = Math.imul(ah9, bh5);
      lo = lo + Math.imul(al8, bl6) | 0;
      mid = mid + Math.imul(al8, bh6) | 0;
      mid = mid + Math.imul(ah8, bl6) | 0;
      hi = hi + Math.imul(ah8, bh6) | 0;
      lo = lo + Math.imul(al7, bl7) | 0;
      mid = mid + Math.imul(al7, bh7) | 0;
      mid = mid + Math.imul(ah7, bl7) | 0;
      hi = hi + Math.imul(ah7, bh7) | 0;
      lo = lo + Math.imul(al6, bl8) | 0;
      mid = mid + Math.imul(al6, bh8) | 0;
      mid = mid + Math.imul(ah6, bl8) | 0;
      hi = hi + Math.imul(ah6, bh8) | 0;
      lo = lo + Math.imul(al5, bl9) | 0;
      mid = mid + Math.imul(al5, bh9) | 0;
      mid = mid + Math.imul(ah5, bl9) | 0;
      hi = hi + Math.imul(ah5, bh9) | 0;
      var w14 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
      w14 &= 67108863;
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = mid + Math.imul(ah9, bl6) | 0;
      hi = Math.imul(ah9, bh6);
      lo = lo + Math.imul(al8, bl7) | 0;
      mid = mid + Math.imul(al8, bh7) | 0;
      mid = mid + Math.imul(ah8, bl7) | 0;
      hi = hi + Math.imul(ah8, bh7) | 0;
      lo = lo + Math.imul(al7, bl8) | 0;
      mid = mid + Math.imul(al7, bh8) | 0;
      mid = mid + Math.imul(ah7, bl8) | 0;
      hi = hi + Math.imul(ah7, bh8) | 0;
      lo = lo + Math.imul(al6, bl9) | 0;
      mid = mid + Math.imul(al6, bh9) | 0;
      mid = mid + Math.imul(ah6, bl9) | 0;
      hi = hi + Math.imul(ah6, bh9) | 0;
      var w15 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
      w15 &= 67108863;
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = mid + Math.imul(ah9, bl7) | 0;
      hi = Math.imul(ah9, bh7);
      lo = lo + Math.imul(al8, bl8) | 0;
      mid = mid + Math.imul(al8, bh8) | 0;
      mid = mid + Math.imul(ah8, bl8) | 0;
      hi = hi + Math.imul(ah8, bh8) | 0;
      lo = lo + Math.imul(al7, bl9) | 0;
      mid = mid + Math.imul(al7, bh9) | 0;
      mid = mid + Math.imul(ah7, bl9) | 0;
      hi = hi + Math.imul(ah7, bh9) | 0;
      var w16 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
      w16 &= 67108863;
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = mid + Math.imul(ah9, bl8) | 0;
      hi = Math.imul(ah9, bh8);
      lo = lo + Math.imul(al8, bl9) | 0;
      mid = mid + Math.imul(al8, bh9) | 0;
      mid = mid + Math.imul(ah8, bl9) | 0;
      hi = hi + Math.imul(ah8, bh9) | 0;
      var w17 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
      w17 &= 67108863;
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = mid + Math.imul(ah9, bl9) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
      w18 &= 67108863;
      o9[0] = w0;
      o9[1] = w1;
      o9[2] = w22;
      o9[3] = w32;
      o9[4] = w4;
      o9[5] = w5;
      o9[6] = w6;
      o9[7] = w7;
      o9[8] = w8;
      o9[9] = w9;
      o9[10] = w10;
      o9[11] = w11;
      o9[12] = w12;
      o9[13] = w13;
      o9[14] = w14;
      o9[15] = w15;
      o9[16] = w16;
      o9[17] = w17;
      o9[18] = w18;
      if (c8 !== 0) {
        o9[19] = c8;
        out.length++;
      }
      return out;
    };
    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }
    function bigMulTo(self2, num, out) {
      out.negative = num.negative ^ self2.negative;
      out.length = self2.length + num.length;
      var carry = 0;
      var hncarry = 0;
      for (var k4 = 0; k4 < out.length - 1; k4++) {
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 67108863;
        var maxJ = Math.min(k4, num.length - 1);
        for (var j4 = Math.max(0, k4 - self2.length + 1); j4 <= maxJ; j4++) {
          var i8 = k4 - j4;
          var a8 = self2.words[i8] | 0;
          var b5 = num.words[j4] | 0;
          var r9 = a8 * b5;
          var lo = r9 & 67108863;
          ncarry = ncarry + (r9 / 67108864 | 0) | 0;
          lo = lo + rword | 0;
          rword = lo & 67108863;
          ncarry = ncarry + (lo >>> 26) | 0;
          hncarry += ncarry >>> 26;
          ncarry &= 67108863;
        }
        out.words[k4] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k4] = carry;
      } else {
        out.length--;
      }
      return out.strip();
    }
    function jumboMulTo(self2, num, out) {
      var fftm = new FFTM();
      return fftm.mulp(self2, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
      var res;
      var len = (this || _global$6$1).length + num.length;
      if ((this || _global$6$1).length === 10 && num.length === 10) {
        res = comb10MulTo(this || _global$6$1, num, out);
      } else if (len < 63) {
        res = smallMulTo(this || _global$6$1, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this || _global$6$1, num, out);
      } else {
        res = jumboMulTo(this || _global$6$1, num, out);
      }
      return res;
    };
    function FFTM(x4, y6) {
      (this || _global$6$1).x = x4;
      (this || _global$6$1).y = y6;
    }
    FFTM.prototype.makeRBT = function makeRBT(N4) {
      var t8 = new Array(N4);
      var l8 = BN.prototype._countBits(N4) - 1;
      for (var i8 = 0; i8 < N4; i8++) {
        t8[i8] = this.revBin(i8, l8, N4);
      }
      return t8;
    };
    FFTM.prototype.revBin = function revBin(x4, l8, N4) {
      if (x4 === 0 || x4 === N4 - 1)
        return x4;
      var rb = 0;
      for (var i8 = 0; i8 < l8; i8++) {
        rb |= (x4 & 1) << l8 - i8 - 1;
        x4 >>= 1;
      }
      return rb;
    };
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N4) {
      for (var i8 = 0; i8 < N4; i8++) {
        rtws[i8] = rws[rbt[i8]];
        itws[i8] = iws[rbt[i8]];
      }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N4, rbt) {
      this.permute(rbt, rws, iws, rtws, itws, N4);
      for (var s7 = 1; s7 < N4; s7 <<= 1) {
        var l8 = s7 << 1;
        var rtwdf = Math.cos(2 * Math.PI / l8);
        var itwdf = Math.sin(2 * Math.PI / l8);
        for (var p8 = 0; p8 < N4; p8 += l8) {
          var rtwdf_ = rtwdf;
          var itwdf_ = itwdf;
          for (var j4 = 0; j4 < s7; j4++) {
            var re3 = rtws[p8 + j4];
            var ie2 = itws[p8 + j4];
            var ro = rtws[p8 + j4 + s7];
            var io = itws[p8 + j4 + s7];
            var rx = rtwdf_ * ro - itwdf_ * io;
            io = rtwdf_ * io + itwdf_ * ro;
            ro = rx;
            rtws[p8 + j4] = re3 + ro;
            itws[p8 + j4] = ie2 + io;
            rtws[p8 + j4 + s7] = re3 - ro;
            itws[p8 + j4 + s7] = ie2 - io;
            if (j4 !== l8) {
              rx = rtwdf * rtwdf_ - itwdf * itwdf_;
              itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
              rtwdf_ = rx;
            }
          }
        }
      }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n9, m6) {
      var N4 = Math.max(m6, n9) | 1;
      var odd = N4 & 1;
      var i8 = 0;
      for (N4 = N4 / 2 | 0; N4; N4 = N4 >>> 1) {
        i8++;
      }
      return 1 << i8 + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N4) {
      if (N4 <= 1)
        return;
      for (var i8 = 0; i8 < N4 / 2; i8++) {
        var t8 = rws[i8];
        rws[i8] = rws[N4 - i8 - 1];
        rws[N4 - i8 - 1] = t8;
        t8 = iws[i8];
        iws[i8] = -iws[N4 - i8 - 1];
        iws[N4 - i8 - 1] = -t8;
      }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N4) {
      var carry = 0;
      for (var i8 = 0; i8 < N4 / 2; i8++) {
        var w4 = Math.round(ws[2 * i8 + 1] / N4) * 8192 + Math.round(ws[2 * i8] / N4) + carry;
        ws[i8] = w4 & 67108863;
        if (w4 < 67108864) {
          carry = 0;
        } else {
          carry = w4 / 67108864 | 0;
        }
      }
      return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N4) {
      var carry = 0;
      for (var i8 = 0; i8 < len; i8++) {
        carry = carry + (ws[i8] | 0);
        rws[2 * i8] = carry & 8191;
        carry = carry >>> 13;
        rws[2 * i8 + 1] = carry & 8191;
        carry = carry >>> 13;
      }
      for (i8 = 2 * len; i8 < N4; ++i8) {
        rws[i8] = 0;
      }
      assert2(carry === 0);
      assert2((carry & ~8191) === 0);
    };
    FFTM.prototype.stub = function stub(N4) {
      var ph = new Array(N4);
      for (var i8 = 0; i8 < N4; i8++) {
        ph[i8] = 0;
      }
      return ph;
    };
    FFTM.prototype.mulp = function mulp(x4, y6, out) {
      var N4 = 2 * this.guessLen13b(x4.length, y6.length);
      var rbt = this.makeRBT(N4);
      var _4 = this.stub(N4);
      var rws = new Array(N4);
      var rwst = new Array(N4);
      var iwst = new Array(N4);
      var nrws = new Array(N4);
      var nrwst = new Array(N4);
      var niwst = new Array(N4);
      var rmws = out.words;
      rmws.length = N4;
      this.convert13b(x4.words, x4.length, rws, N4);
      this.convert13b(y6.words, y6.length, nrws, N4);
      this.transform(rws, _4, rwst, iwst, N4, rbt);
      this.transform(nrws, _4, nrwst, niwst, N4, rbt);
      for (var i8 = 0; i8 < N4; i8++) {
        var rx = rwst[i8] * nrwst[i8] - iwst[i8] * niwst[i8];
        iwst[i8] = rwst[i8] * niwst[i8] + iwst[i8] * nrwst[i8];
        rwst[i8] = rx;
      }
      this.conjugate(rwst, iwst, N4);
      this.transform(rwst, iwst, rmws, _4, N4, rbt);
      this.conjugate(rmws, _4, N4);
      this.normalize13b(rmws, N4);
      out.negative = x4.negative ^ y6.negative;
      out.length = x4.length + y6.length;
      return out.strip();
    };
    BN.prototype.mul = function mul(num) {
      var out = new BN(null);
      out.words = new Array((this || _global$6$1).length + num.length);
      return this.mulTo(num, out);
    };
    BN.prototype.mulf = function mulf(num) {
      var out = new BN(null);
      out.words = new Array((this || _global$6$1).length + num.length);
      return jumboMulTo(this || _global$6$1, num, out);
    };
    BN.prototype.imul = function imul(num) {
      return this.clone().mulTo(num, this || _global$6$1);
    };
    BN.prototype.imuln = function imuln(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      var carry = 0;
      for (var i8 = 0; i8 < (this || _global$6$1).length; i8++) {
        var w4 = ((this || _global$6$1).words[i8] | 0) * num;
        var lo = (w4 & 67108863) + (carry & 67108863);
        carry >>= 26;
        carry += w4 / 67108864 | 0;
        carry += lo >>> 26;
        (this || _global$6$1).words[i8] = lo & 67108863;
      }
      if (carry !== 0) {
        (this || _global$6$1).words[i8] = carry;
        (this || _global$6$1).length++;
      }
      return this || _global$6$1;
    };
    BN.prototype.muln = function muln(num) {
      return this.clone().imuln(num);
    };
    BN.prototype.sqr = function sqr() {
      return this.mul(this || _global$6$1);
    };
    BN.prototype.isqr = function isqr() {
      return this.imul(this.clone());
    };
    BN.prototype.pow = function pow(num) {
      var w4 = toBitArray(num);
      if (w4.length === 0)
        return new BN(1);
      var res = this || _global$6$1;
      for (var i8 = 0; i8 < w4.length; i8++, res = res.sqr()) {
        if (w4[i8] !== 0)
          break;
      }
      if (++i8 < w4.length) {
        for (var q3 = res.sqr(); i8 < w4.length; i8++, q3 = q3.sqr()) {
          if (w4[i8] === 0)
            continue;
          res = res.mul(q3);
        }
      }
      return res;
    };
    BN.prototype.iushln = function iushln(bits) {
      assert2(typeof bits === "number" && bits >= 0);
      var r9 = bits % 26;
      var s7 = (bits - r9) / 26;
      var carryMask = 67108863 >>> 26 - r9 << 26 - r9;
      var i8;
      if (r9 !== 0) {
        var carry = 0;
        for (i8 = 0; i8 < (this || _global$6$1).length; i8++) {
          var newCarry = (this || _global$6$1).words[i8] & carryMask;
          var c8 = ((this || _global$6$1).words[i8] | 0) - newCarry << r9;
          (this || _global$6$1).words[i8] = c8 | carry;
          carry = newCarry >>> 26 - r9;
        }
        if (carry) {
          (this || _global$6$1).words[i8] = carry;
          (this || _global$6$1).length++;
        }
      }
      if (s7 !== 0) {
        for (i8 = (this || _global$6$1).length - 1; i8 >= 0; i8--) {
          (this || _global$6$1).words[i8 + s7] = (this || _global$6$1).words[i8];
        }
        for (i8 = 0; i8 < s7; i8++) {
          (this || _global$6$1).words[i8] = 0;
        }
        (this || _global$6$1).length += s7;
      }
      return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
      assert2((this || _global$6$1).negative === 0);
      return this.iushln(bits);
    };
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
      assert2(typeof bits === "number" && bits >= 0);
      var h8;
      if (hint) {
        h8 = (hint - hint % 26) / 26;
      } else {
        h8 = 0;
      }
      var r9 = bits % 26;
      var s7 = Math.min((bits - r9) / 26, (this || _global$6$1).length);
      var mask = 67108863 ^ 67108863 >>> r9 << r9;
      var maskedWords = extended;
      h8 -= s7;
      h8 = Math.max(0, h8);
      if (maskedWords) {
        for (var i8 = 0; i8 < s7; i8++) {
          maskedWords.words[i8] = (this || _global$6$1).words[i8];
        }
        maskedWords.length = s7;
      }
      if (s7 === 0)
        ;
      else if ((this || _global$6$1).length > s7) {
        (this || _global$6$1).length -= s7;
        for (i8 = 0; i8 < (this || _global$6$1).length; i8++) {
          (this || _global$6$1).words[i8] = (this || _global$6$1).words[i8 + s7];
        }
      } else {
        (this || _global$6$1).words[0] = 0;
        (this || _global$6$1).length = 1;
      }
      var carry = 0;
      for (i8 = (this || _global$6$1).length - 1; i8 >= 0 && (carry !== 0 || i8 >= h8); i8--) {
        var word = (this || _global$6$1).words[i8] | 0;
        (this || _global$6$1).words[i8] = carry << 26 - r9 | word >>> r9;
        carry = word & mask;
      }
      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }
      if ((this || _global$6$1).length === 0) {
        (this || _global$6$1).words[0] = 0;
        (this || _global$6$1).length = 1;
      }
      return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
      assert2((this || _global$6$1).negative === 0);
      return this.iushrn(bits, hint, extended);
    };
    BN.prototype.shln = function shln(bits) {
      return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
      return this.clone().iushln(bits);
    };
    BN.prototype.shrn = function shrn(bits) {
      return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
      return this.clone().iushrn(bits);
    };
    BN.prototype.testn = function testn(bit) {
      assert2(typeof bit === "number" && bit >= 0);
      var r9 = bit % 26;
      var s7 = (bit - r9) / 26;
      var q3 = 1 << r9;
      if ((this || _global$6$1).length <= s7)
        return false;
      var w4 = (this || _global$6$1).words[s7];
      return !!(w4 & q3);
    };
    BN.prototype.imaskn = function imaskn(bits) {
      assert2(typeof bits === "number" && bits >= 0);
      var r9 = bits % 26;
      var s7 = (bits - r9) / 26;
      assert2((this || _global$6$1).negative === 0, "imaskn works only with positive numbers");
      if ((this || _global$6$1).length <= s7) {
        return this || _global$6$1;
      }
      if (r9 !== 0) {
        s7++;
      }
      (this || _global$6$1).length = Math.min(s7, (this || _global$6$1).length);
      if (r9 !== 0) {
        var mask = 67108863 ^ 67108863 >>> r9 << r9;
        (this || _global$6$1).words[(this || _global$6$1).length - 1] &= mask;
      }
      return this.strip();
    };
    BN.prototype.maskn = function maskn(bits) {
      return this.clone().imaskn(bits);
    };
    BN.prototype.iaddn = function iaddn(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      if (num < 0)
        return this.isubn(-num);
      if ((this || _global$6$1).negative !== 0) {
        if ((this || _global$6$1).length === 1 && ((this || _global$6$1).words[0] | 0) < num) {
          (this || _global$6$1).words[0] = num - ((this || _global$6$1).words[0] | 0);
          (this || _global$6$1).negative = 0;
          return this || _global$6$1;
        }
        (this || _global$6$1).negative = 0;
        this.isubn(num);
        (this || _global$6$1).negative = 1;
        return this || _global$6$1;
      }
      return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
      (this || _global$6$1).words[0] += num;
      for (var i8 = 0; i8 < (this || _global$6$1).length && (this || _global$6$1).words[i8] >= 67108864; i8++) {
        (this || _global$6$1).words[i8] -= 67108864;
        if (i8 === (this || _global$6$1).length - 1) {
          (this || _global$6$1).words[i8 + 1] = 1;
        } else {
          (this || _global$6$1).words[i8 + 1]++;
        }
      }
      (this || _global$6$1).length = Math.max((this || _global$6$1).length, i8 + 1);
      return this || _global$6$1;
    };
    BN.prototype.isubn = function isubn(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      if (num < 0)
        return this.iaddn(-num);
      if ((this || _global$6$1).negative !== 0) {
        (this || _global$6$1).negative = 0;
        this.iaddn(num);
        (this || _global$6$1).negative = 1;
        return this || _global$6$1;
      }
      (this || _global$6$1).words[0] -= num;
      if ((this || _global$6$1).length === 1 && (this || _global$6$1).words[0] < 0) {
        (this || _global$6$1).words[0] = -(this || _global$6$1).words[0];
        (this || _global$6$1).negative = 1;
      } else {
        for (var i8 = 0; i8 < (this || _global$6$1).length && (this || _global$6$1).words[i8] < 0; i8++) {
          (this || _global$6$1).words[i8] += 67108864;
          (this || _global$6$1).words[i8 + 1] -= 1;
        }
      }
      return this.strip();
    };
    BN.prototype.addn = function addn(num) {
      return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
      return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
      (this || _global$6$1).negative = 0;
      return this || _global$6$1;
    };
    BN.prototype.abs = function abs() {
      return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
      var len = num.length + shift;
      var i8;
      this._expand(len);
      var w4;
      var carry = 0;
      for (i8 = 0; i8 < num.length; i8++) {
        w4 = ((this || _global$6$1).words[i8 + shift] | 0) + carry;
        var right = (num.words[i8] | 0) * mul;
        w4 -= right & 67108863;
        carry = (w4 >> 26) - (right / 67108864 | 0);
        (this || _global$6$1).words[i8 + shift] = w4 & 67108863;
      }
      for (; i8 < (this || _global$6$1).length - shift; i8++) {
        w4 = ((this || _global$6$1).words[i8 + shift] | 0) + carry;
        carry = w4 >> 26;
        (this || _global$6$1).words[i8 + shift] = w4 & 67108863;
      }
      if (carry === 0)
        return this.strip();
      assert2(carry === -1);
      carry = 0;
      for (i8 = 0; i8 < (this || _global$6$1).length; i8++) {
        w4 = -((this || _global$6$1).words[i8] | 0) + carry;
        carry = w4 >> 26;
        (this || _global$6$1).words[i8] = w4 & 67108863;
      }
      (this || _global$6$1).negative = 1;
      return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
      var shift = (this || _global$6$1).length - num.length;
      var a8 = this.clone();
      var b5 = num;
      var bhi = b5.words[b5.length - 1] | 0;
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b5 = b5.ushln(shift);
        a8.iushln(shift);
        bhi = b5.words[b5.length - 1] | 0;
      }
      var m6 = a8.length - b5.length;
      var q3;
      if (mode !== "mod") {
        q3 = new BN(null);
        q3.length = m6 + 1;
        q3.words = new Array(q3.length);
        for (var i8 = 0; i8 < q3.length; i8++) {
          q3.words[i8] = 0;
        }
      }
      var diff = a8.clone()._ishlnsubmul(b5, 1, m6);
      if (diff.negative === 0) {
        a8 = diff;
        if (q3) {
          q3.words[m6] = 1;
        }
      }
      for (var j4 = m6 - 1; j4 >= 0; j4--) {
        var qj = (a8.words[b5.length + j4] | 0) * 67108864 + (a8.words[b5.length + j4 - 1] | 0);
        qj = Math.min(qj / bhi | 0, 67108863);
        a8._ishlnsubmul(b5, qj, j4);
        while (a8.negative !== 0) {
          qj--;
          a8.negative = 0;
          a8._ishlnsubmul(b5, 1, j4);
          if (!a8.isZero()) {
            a8.negative ^= 1;
          }
        }
        if (q3) {
          q3.words[j4] = qj;
        }
      }
      if (q3) {
        q3.strip();
      }
      a8.strip();
      if (mode !== "div" && shift !== 0) {
        a8.iushrn(shift);
      }
      return {
        div: q3 || null,
        mod: a8
      };
    };
    BN.prototype.divmod = function divmod(num, mode, positive) {
      assert2(!num.isZero());
      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }
      var div, mod, res;
      if ((this || _global$6$1).negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);
        if (mode !== "mod") {
          div = res.div.neg();
        }
        if (mode !== "div") {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }
        return {
          div,
          mod
        };
      }
      if ((this || _global$6$1).negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);
        if (mode !== "mod") {
          div = res.div.neg();
        }
        return {
          div,
          mod: res.mod
        };
      }
      if (((this || _global$6$1).negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);
        if (mode !== "div") {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }
        return {
          div: res.div,
          mod
        };
      }
      if (num.length > (this || _global$6$1).length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this || _global$6$1
        };
      }
      if (num.length === 1) {
        if (mode === "div") {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }
        if (mode === "mod") {
          return {
            div: null,
            mod: new BN(this.modn(num.words[0]))
          };
        }
        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modn(num.words[0]))
        };
      }
      return this._wordDiv(num, mode);
    };
    BN.prototype.div = function div(num) {
      return this.divmod(num, "div", false).div;
    };
    BN.prototype.mod = function mod(num) {
      return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
      return this.divmod(num, "mod", true).mod;
    };
    BN.prototype.divRound = function divRound(num) {
      var dm = this.divmod(num);
      if (dm.mod.isZero())
        return dm.div;
      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
      var half = num.ushrn(1);
      var r22 = num.andln(1);
      var cmp = mod.cmp(half);
      if (cmp < 0 || r22 === 1 && cmp === 0)
        return dm.div;
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
      assert2(num <= 67108863);
      var p8 = (1 << 26) % num;
      var acc = 0;
      for (var i8 = (this || _global$6$1).length - 1; i8 >= 0; i8--) {
        acc = (p8 * acc + ((this || _global$6$1).words[i8] | 0)) % num;
      }
      return acc;
    };
    BN.prototype.idivn = function idivn(num) {
      assert2(num <= 67108863);
      var carry = 0;
      for (var i8 = (this || _global$6$1).length - 1; i8 >= 0; i8--) {
        var w4 = ((this || _global$6$1).words[i8] | 0) + carry * 67108864;
        (this || _global$6$1).words[i8] = w4 / num | 0;
        carry = w4 % num;
      }
      return this.strip();
    };
    BN.prototype.divn = function divn(num) {
      return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p8) {
      assert2(p8.negative === 0);
      assert2(!p8.isZero());
      var x4 = this || _global$6$1;
      var y6 = p8.clone();
      if (x4.negative !== 0) {
        x4 = x4.umod(p8);
      } else {
        x4 = x4.clone();
      }
      var A4 = new BN(1);
      var B4 = new BN(0);
      var C4 = new BN(0);
      var D4 = new BN(1);
      var g5 = 0;
      while (x4.isEven() && y6.isEven()) {
        x4.iushrn(1);
        y6.iushrn(1);
        ++g5;
      }
      var yp = y6.clone();
      var xp = x4.clone();
      while (!x4.isZero()) {
        for (var i8 = 0, im = 1; (x4.words[0] & im) === 0 && i8 < 26; ++i8, im <<= 1)
          ;
        if (i8 > 0) {
          x4.iushrn(i8);
          while (i8-- > 0) {
            if (A4.isOdd() || B4.isOdd()) {
              A4.iadd(yp);
              B4.isub(xp);
            }
            A4.iushrn(1);
            B4.iushrn(1);
          }
        }
        for (var j4 = 0, jm = 1; (y6.words[0] & jm) === 0 && j4 < 26; ++j4, jm <<= 1)
          ;
        if (j4 > 0) {
          y6.iushrn(j4);
          while (j4-- > 0) {
            if (C4.isOdd() || D4.isOdd()) {
              C4.iadd(yp);
              D4.isub(xp);
            }
            C4.iushrn(1);
            D4.iushrn(1);
          }
        }
        if (x4.cmp(y6) >= 0) {
          x4.isub(y6);
          A4.isub(C4);
          B4.isub(D4);
        } else {
          y6.isub(x4);
          C4.isub(A4);
          D4.isub(B4);
        }
      }
      return {
        a: C4,
        b: D4,
        gcd: y6.iushln(g5)
      };
    };
    BN.prototype._invmp = function _invmp(p8) {
      assert2(p8.negative === 0);
      assert2(!p8.isZero());
      var a8 = this || _global$6$1;
      var b5 = p8.clone();
      if (a8.negative !== 0) {
        a8 = a8.umod(p8);
      } else {
        a8 = a8.clone();
      }
      var x1 = new BN(1);
      var x22 = new BN(0);
      var delta = b5.clone();
      while (a8.cmpn(1) > 0 && b5.cmpn(1) > 0) {
        for (var i8 = 0, im = 1; (a8.words[0] & im) === 0 && i8 < 26; ++i8, im <<= 1)
          ;
        if (i8 > 0) {
          a8.iushrn(i8);
          while (i8-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }
            x1.iushrn(1);
          }
        }
        for (var j4 = 0, jm = 1; (b5.words[0] & jm) === 0 && j4 < 26; ++j4, jm <<= 1)
          ;
        if (j4 > 0) {
          b5.iushrn(j4);
          while (j4-- > 0) {
            if (x22.isOdd()) {
              x22.iadd(delta);
            }
            x22.iushrn(1);
          }
        }
        if (a8.cmp(b5) >= 0) {
          a8.isub(b5);
          x1.isub(x22);
        } else {
          b5.isub(a8);
          x22.isub(x1);
        }
      }
      var res;
      if (a8.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x22;
      }
      if (res.cmpn(0) < 0) {
        res.iadd(p8);
      }
      return res;
    };
    BN.prototype.gcd = function gcd(num) {
      if (this.isZero())
        return num.abs();
      if (num.isZero())
        return this.abs();
      var a8 = this.clone();
      var b5 = num.clone();
      a8.negative = 0;
      b5.negative = 0;
      for (var shift = 0; a8.isEven() && b5.isEven(); shift++) {
        a8.iushrn(1);
        b5.iushrn(1);
      }
      do {
        while (a8.isEven()) {
          a8.iushrn(1);
        }
        while (b5.isEven()) {
          b5.iushrn(1);
        }
        var r9 = a8.cmp(b5);
        if (r9 < 0) {
          var t8 = a8;
          a8 = b5;
          b5 = t8;
        } else if (r9 === 0 || b5.cmpn(1) === 0) {
          break;
        }
        a8.isub(b5);
      } while (true);
      return b5.iushln(shift);
    };
    BN.prototype.invm = function invm(num) {
      return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
      return ((this || _global$6$1).words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
      return ((this || _global$6$1).words[0] & 1) === 1;
    };
    BN.prototype.andln = function andln(num) {
      return (this || _global$6$1).words[0] & num;
    };
    BN.prototype.bincn = function bincn(bit) {
      assert2(typeof bit === "number");
      var r9 = bit % 26;
      var s7 = (bit - r9) / 26;
      var q3 = 1 << r9;
      if ((this || _global$6$1).length <= s7) {
        this._expand(s7 + 1);
        (this || _global$6$1).words[s7] |= q3;
        return this || _global$6$1;
      }
      var carry = q3;
      for (var i8 = s7; carry !== 0 && i8 < (this || _global$6$1).length; i8++) {
        var w4 = (this || _global$6$1).words[i8] | 0;
        w4 += carry;
        carry = w4 >>> 26;
        w4 &= 67108863;
        (this || _global$6$1).words[i8] = w4;
      }
      if (carry !== 0) {
        (this || _global$6$1).words[i8] = carry;
        (this || _global$6$1).length++;
      }
      return this || _global$6$1;
    };
    BN.prototype.isZero = function isZero() {
      return (this || _global$6$1).length === 1 && (this || _global$6$1).words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
      var negative = num < 0;
      if ((this || _global$6$1).negative !== 0 && !negative)
        return -1;
      if ((this || _global$6$1).negative === 0 && negative)
        return 1;
      this.strip();
      var res;
      if ((this || _global$6$1).length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }
        assert2(num <= 67108863, "Number is too big");
        var w4 = (this || _global$6$1).words[0] | 0;
        res = w4 === num ? 0 : w4 < num ? -1 : 1;
      }
      if ((this || _global$6$1).negative !== 0)
        return -res | 0;
      return res;
    };
    BN.prototype.cmp = function cmp(num) {
      if ((this || _global$6$1).negative !== 0 && num.negative === 0)
        return -1;
      if ((this || _global$6$1).negative === 0 && num.negative !== 0)
        return 1;
      var res = this.ucmp(num);
      if ((this || _global$6$1).negative !== 0)
        return -res | 0;
      return res;
    };
    BN.prototype.ucmp = function ucmp(num) {
      if ((this || _global$6$1).length > num.length)
        return 1;
      if ((this || _global$6$1).length < num.length)
        return -1;
      var res = 0;
      for (var i8 = (this || _global$6$1).length - 1; i8 >= 0; i8--) {
        var a8 = (this || _global$6$1).words[i8] | 0;
        var b5 = num.words[i8] | 0;
        if (a8 === b5)
          continue;
        if (a8 < b5) {
          res = -1;
        } else if (a8 > b5) {
          res = 1;
        }
        break;
      }
      return res;
    };
    BN.prototype.gtn = function gtn(num) {
      return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
      return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
      return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
      return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
      return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
      return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
      return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
      return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
      return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
      return this.cmp(num) === 0;
    };
    BN.red = function red(num) {
      return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
      assert2(!(this || _global$6$1).red, "Already a number in reduction context");
      assert2((this || _global$6$1).negative === 0, "red works only with positives");
      return ctx.convertTo(this || _global$6$1)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
      assert2((this || _global$6$1).red, "fromRed works only with numbers in reduction context");
      return (this || _global$6$1).red.convertFrom(this || _global$6$1);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
      (this || _global$6$1).red = ctx;
      return this || _global$6$1;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
      assert2(!(this || _global$6$1).red, "Already a number in reduction context");
      return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
      assert2((this || _global$6$1).red, "redAdd works only with red numbers");
      return (this || _global$6$1).red.add(this || _global$6$1, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
      assert2((this || _global$6$1).red, "redIAdd works only with red numbers");
      return (this || _global$6$1).red.iadd(this || _global$6$1, num);
    };
    BN.prototype.redSub = function redSub(num) {
      assert2((this || _global$6$1).red, "redSub works only with red numbers");
      return (this || _global$6$1).red.sub(this || _global$6$1, num);
    };
    BN.prototype.redISub = function redISub(num) {
      assert2((this || _global$6$1).red, "redISub works only with red numbers");
      return (this || _global$6$1).red.isub(this || _global$6$1, num);
    };
    BN.prototype.redShl = function redShl(num) {
      assert2((this || _global$6$1).red, "redShl works only with red numbers");
      return (this || _global$6$1).red.shl(this || _global$6$1, num);
    };
    BN.prototype.redMul = function redMul(num) {
      assert2((this || _global$6$1).red, "redMul works only with red numbers");
      (this || _global$6$1).red._verify2(this || _global$6$1, num);
      return (this || _global$6$1).red.mul(this || _global$6$1, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
      assert2((this || _global$6$1).red, "redMul works only with red numbers");
      (this || _global$6$1).red._verify2(this || _global$6$1, num);
      return (this || _global$6$1).red.imul(this || _global$6$1, num);
    };
    BN.prototype.redSqr = function redSqr() {
      assert2((this || _global$6$1).red, "redSqr works only with red numbers");
      (this || _global$6$1).red._verify1(this || _global$6$1);
      return (this || _global$6$1).red.sqr(this || _global$6$1);
    };
    BN.prototype.redISqr = function redISqr() {
      assert2((this || _global$6$1).red, "redISqr works only with red numbers");
      (this || _global$6$1).red._verify1(this || _global$6$1);
      return (this || _global$6$1).red.isqr(this || _global$6$1);
    };
    BN.prototype.redSqrt = function redSqrt() {
      assert2((this || _global$6$1).red, "redSqrt works only with red numbers");
      (this || _global$6$1).red._verify1(this || _global$6$1);
      return (this || _global$6$1).red.sqrt(this || _global$6$1);
    };
    BN.prototype.redInvm = function redInvm() {
      assert2((this || _global$6$1).red, "redInvm works only with red numbers");
      (this || _global$6$1).red._verify1(this || _global$6$1);
      return (this || _global$6$1).red.invm(this || _global$6$1);
    };
    BN.prototype.redNeg = function redNeg() {
      assert2((this || _global$6$1).red, "redNeg works only with red numbers");
      (this || _global$6$1).red._verify1(this || _global$6$1);
      return (this || _global$6$1).red.neg(this || _global$6$1);
    };
    BN.prototype.redPow = function redPow(num) {
      assert2((this || _global$6$1).red && !num.red, "redPow(normalNum)");
      (this || _global$6$1).red._verify1(this || _global$6$1);
      return (this || _global$6$1).red.pow(this || _global$6$1, num);
    };
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };
    function MPrime(name2, p8) {
      (this || _global$6$1).name = name2;
      (this || _global$6$1).p = new BN(p8, 16);
      (this || _global$6$1).n = (this || _global$6$1).p.bitLength();
      (this || _global$6$1).k = new BN(1).iushln((this || _global$6$1).n).isub((this || _global$6$1).p);
      (this || _global$6$1).tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil((this || _global$6$1).n / 13));
      return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
      var r9 = num;
      var rlen;
      do {
        this.split(r9, (this || _global$6$1).tmp);
        r9 = this.imulK(r9);
        r9 = r9.iadd((this || _global$6$1).tmp);
        rlen = r9.bitLength();
      } while (rlen > (this || _global$6$1).n);
      var cmp = rlen < (this || _global$6$1).n ? -1 : r9.ucmp((this || _global$6$1).p);
      if (cmp === 0) {
        r9.words[0] = 0;
        r9.length = 1;
      } else if (cmp > 0) {
        r9.isub((this || _global$6$1).p);
      } else {
        if (r9.strip !== void 0) {
          r9.strip();
        } else {
          r9._strip();
        }
      }
      return r9;
    };
    MPrime.prototype.split = function split(input, out) {
      input.iushrn((this || _global$6$1).n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
      return num.imul((this || _global$6$1).k);
    };
    function K256() {
      MPrime.call(this || _global$6$1, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits4(K256, MPrime);
    K256.prototype.split = function split(input, output) {
      var mask = 4194303;
      var outLen = Math.min(input.length, 9);
      for (var i8 = 0; i8 < outLen; i8++) {
        output.words[i8] = input.words[i8];
      }
      output.length = outLen;
      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }
      var prev = input.words[9];
      output.words[output.length++] = prev & mask;
      for (i8 = 10; i8 < input.length; i8++) {
        var next = input.words[i8] | 0;
        input.words[i8 - 10] = (next & mask) << 4 | prev >>> 22;
        prev = next;
      }
      prev >>>= 22;
      input.words[i8 - 10] = prev;
      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };
    K256.prototype.imulK = function imulK(num) {
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;
      var lo = 0;
      for (var i8 = 0; i8 < num.length; i8++) {
        var w4 = num.words[i8] | 0;
        lo += w4 * 977;
        num.words[i8] = lo & 67108863;
        lo = w4 * 64 + (lo / 67108864 | 0);
      }
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }
      return num;
    };
    function P224() {
      MPrime.call(this || _global$6$1, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits4(P224, MPrime);
    function P192() {
      MPrime.call(this || _global$6$1, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits4(P192, MPrime);
    function P25519() {
      MPrime.call(this || _global$6$1, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits4(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
      var carry = 0;
      for (var i8 = 0; i8 < num.length; i8++) {
        var hi = (num.words[i8] | 0) * 19 + carry;
        var lo = hi & 67108863;
        hi >>>= 26;
        num.words[i8] = lo;
        carry = hi;
      }
      if (carry !== 0) {
        num.words[num.length++] = carry;
      }
      return num;
    };
    BN._prime = function prime(name2) {
      if (primes[name2])
        return primes[name2];
      var prime2;
      if (name2 === "k256") {
        prime2 = new K256();
      } else if (name2 === "p224") {
        prime2 = new P224();
      } else if (name2 === "p192") {
        prime2 = new P192();
      } else if (name2 === "p25519") {
        prime2 = new P25519();
      } else {
        throw new Error("Unknown prime " + name2);
      }
      primes[name2] = prime2;
      return prime2;
    };
    function Red(m6) {
      if (typeof m6 === "string") {
        var prime = BN._prime(m6);
        (this || _global$6$1).m = prime.p;
        (this || _global$6$1).prime = prime;
      } else {
        assert2(m6.gtn(1), "modulus must be greater than 1");
        (this || _global$6$1).m = m6;
        (this || _global$6$1).prime = null;
      }
    }
    Red.prototype._verify1 = function _verify1(a8) {
      assert2(a8.negative === 0, "red works only with positives");
      assert2(a8.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a8, b5) {
      assert2((a8.negative | b5.negative) === 0, "red works only with positives");
      assert2(a8.red && a8.red === b5.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a8) {
      if ((this || _global$6$1).prime)
        return (this || _global$6$1).prime.ireduce(a8)._forceRed(this || _global$6$1);
      return a8.umod((this || _global$6$1).m)._forceRed(this || _global$6$1);
    };
    Red.prototype.neg = function neg(a8) {
      if (a8.isZero()) {
        return a8.clone();
      }
      return (this || _global$6$1).m.sub(a8)._forceRed(this || _global$6$1);
    };
    Red.prototype.add = function add(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.add(b5);
      if (res.cmp((this || _global$6$1).m) >= 0) {
        res.isub((this || _global$6$1).m);
      }
      return res._forceRed(this || _global$6$1);
    };
    Red.prototype.iadd = function iadd(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.iadd(b5);
      if (res.cmp((this || _global$6$1).m) >= 0) {
        res.isub((this || _global$6$1).m);
      }
      return res;
    };
    Red.prototype.sub = function sub(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.sub(b5);
      if (res.cmpn(0) < 0) {
        res.iadd((this || _global$6$1).m);
      }
      return res._forceRed(this || _global$6$1);
    };
    Red.prototype.isub = function isub(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.isub(b5);
      if (res.cmpn(0) < 0) {
        res.iadd((this || _global$6$1).m);
      }
      return res;
    };
    Red.prototype.shl = function shl(a8, num) {
      this._verify1(a8);
      return this.imod(a8.ushln(num));
    };
    Red.prototype.imul = function imul(a8, b5) {
      this._verify2(a8, b5);
      return this.imod(a8.imul(b5));
    };
    Red.prototype.mul = function mul(a8, b5) {
      this._verify2(a8, b5);
      return this.imod(a8.mul(b5));
    };
    Red.prototype.isqr = function isqr(a8) {
      return this.imul(a8, a8.clone());
    };
    Red.prototype.sqr = function sqr(a8) {
      return this.mul(a8, a8);
    };
    Red.prototype.sqrt = function sqrt(a8) {
      if (a8.isZero())
        return a8.clone();
      var mod3 = (this || _global$6$1).m.andln(3);
      assert2(mod3 % 2 === 1);
      if (mod3 === 3) {
        var pow = (this || _global$6$1).m.add(new BN(1)).iushrn(2);
        return this.pow(a8, pow);
      }
      var q3 = (this || _global$6$1).m.subn(1);
      var s7 = 0;
      while (!q3.isZero() && q3.andln(1) === 0) {
        s7++;
        q3.iushrn(1);
      }
      assert2(!q3.isZero());
      var one = new BN(1).toRed(this || _global$6$1);
      var nOne = one.redNeg();
      var lpow = (this || _global$6$1).m.subn(1).iushrn(1);
      var z5 = (this || _global$6$1).m.bitLength();
      z5 = new BN(2 * z5 * z5).toRed(this || _global$6$1);
      while (this.pow(z5, lpow).cmp(nOne) !== 0) {
        z5.redIAdd(nOne);
      }
      var c8 = this.pow(z5, q3);
      var r9 = this.pow(a8, q3.addn(1).iushrn(1));
      var t8 = this.pow(a8, q3);
      var m6 = s7;
      while (t8.cmp(one) !== 0) {
        var tmp = t8;
        for (var i8 = 0; tmp.cmp(one) !== 0; i8++) {
          tmp = tmp.redSqr();
        }
        assert2(i8 < m6);
        var b5 = this.pow(c8, new BN(1).iushln(m6 - i8 - 1));
        r9 = r9.redMul(b5);
        c8 = b5.redSqr();
        t8 = t8.redMul(c8);
        m6 = i8;
      }
      return r9;
    };
    Red.prototype.invm = function invm(a8) {
      var inv = a8._invmp((this || _global$6$1).m);
      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };
    Red.prototype.pow = function pow(a8, num) {
      if (num.isZero())
        return new BN(1).toRed(this || _global$6$1);
      if (num.cmpn(1) === 0)
        return a8.clone();
      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN(1).toRed(this || _global$6$1);
      wnd[1] = a8;
      for (var i8 = 2; i8 < wnd.length; i8++) {
        wnd[i8] = this.mul(wnd[i8 - 1], a8);
      }
      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;
      if (start === 0) {
        start = 26;
      }
      for (i8 = num.length - 1; i8 >= 0; i8--) {
        var word = num.words[i8];
        for (var j4 = start - 1; j4 >= 0; j4--) {
          var bit = word >> j4 & 1;
          if (res !== wnd[0]) {
            res = this.sqr(res);
          }
          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }
          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i8 !== 0 || j4 !== 0))
            continue;
          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }
        start = 26;
      }
      return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
      var r9 = num.umod((this || _global$6$1).m);
      return r9 === num ? r9.clone() : r9;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
      var res = num.clone();
      res.red = null;
      return res;
    };
    BN.mont = function mont(num) {
      return new Mont(num);
    };
    function Mont(m6) {
      Red.call(this || _global$6$1, m6);
      (this || _global$6$1).shift = (this || _global$6$1).m.bitLength();
      if ((this || _global$6$1).shift % 26 !== 0) {
        (this || _global$6$1).shift += 26 - (this || _global$6$1).shift % 26;
      }
      (this || _global$6$1).r = new BN(1).iushln((this || _global$6$1).shift);
      (this || _global$6$1).r2 = this.imod((this || _global$6$1).r.sqr());
      (this || _global$6$1).rinv = (this || _global$6$1).r._invmp((this || _global$6$1).m);
      (this || _global$6$1).minv = (this || _global$6$1).rinv.mul((this || _global$6$1).r).isubn(1).div((this || _global$6$1).m);
      (this || _global$6$1).minv = (this || _global$6$1).minv.umod((this || _global$6$1).r);
      (this || _global$6$1).minv = (this || _global$6$1).r.sub((this || _global$6$1).minv);
    }
    inherits4(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
      return this.imod(num.ushln((this || _global$6$1).shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
      var r9 = this.imod(num.mul((this || _global$6$1).rinv));
      r9.red = null;
      return r9;
    };
    Mont.prototype.imul = function imul(a8, b5) {
      if (a8.isZero() || b5.isZero()) {
        a8.words[0] = 0;
        a8.length = 1;
        return a8;
      }
      var t8 = a8.imul(b5);
      var c8 = t8.maskn((this || _global$6$1).shift).mul((this || _global$6$1).minv).imaskn((this || _global$6$1).shift).mul((this || _global$6$1).m);
      var u8 = t8.isub(c8).iushrn((this || _global$6$1).shift);
      var res = u8;
      if (u8.cmp((this || _global$6$1).m) >= 0) {
        res = u8.isub((this || _global$6$1).m);
      } else if (u8.cmpn(0) < 0) {
        res = u8.iadd((this || _global$6$1).m);
      }
      return res._forceRed(this || _global$6$1);
    };
    Mont.prototype.mul = function mul(a8, b5) {
      if (a8.isZero() || b5.isZero())
        return new BN(0)._forceRed(this || _global$6$1);
      var t8 = a8.mul(b5);
      var c8 = t8.maskn((this || _global$6$1).shift).mul((this || _global$6$1).minv).imaskn((this || _global$6$1).shift).mul((this || _global$6$1).m);
      var u8 = t8.isub(c8).iushrn((this || _global$6$1).shift);
      var res = u8;
      if (u8.cmp((this || _global$6$1).m) >= 0) {
        res = u8.isub((this || _global$6$1).m);
      } else if (u8.cmpn(0) < 0) {
        res = u8.iadd((this || _global$6$1).m);
      }
      return res._forceRed(this || _global$6$1);
    };
    Mont.prototype.invm = function invm(a8) {
      var res = this.imod(a8._invmp((this || _global$6$1).m).mul((this || _global$6$1).r2));
      return res._forceRed(this || _global$6$1);
    };
  })(module$3$1, exports$V$1);
  return module$3$1.exports;
}
function dew$U$1() {
  if (_dewExec$U$1)
    return exports$U$1;
  _dewExec$U$1 = true;
  var utils = exports$U$1;
  function toArray2(msg, enc) {
    if (Array.isArray(msg))
      return msg.slice();
    if (!msg)
      return [];
    var res = [];
    if (typeof msg !== "string") {
      for (var i8 = 0; i8 < msg.length; i8++)
        res[i8] = msg[i8] | 0;
      return res;
    }
    if (enc === "hex") {
      msg = msg.replace(/[^a-z0-9]+/ig, "");
      if (msg.length % 2 !== 0)
        msg = "0" + msg;
      for (var i8 = 0; i8 < msg.length; i8 += 2)
        res.push(parseInt(msg[i8] + msg[i8 + 1], 16));
    } else {
      for (var i8 = 0; i8 < msg.length; i8++) {
        var c8 = msg.charCodeAt(i8);
        var hi = c8 >> 8;
        var lo = c8 & 255;
        if (hi)
          res.push(hi, lo);
        else
          res.push(lo);
      }
    }
    return res;
  }
  utils.toArray = toArray2;
  function zero2(word) {
    if (word.length === 1)
      return "0" + word;
    else
      return word;
  }
  utils.zero2 = zero2;
  function toHex(msg) {
    var res = "";
    for (var i8 = 0; i8 < msg.length; i8++)
      res += zero2(msg[i8].toString(16));
    return res;
  }
  utils.toHex = toHex;
  utils.encode = function encode3(arr, enc) {
    if (enc === "hex")
      return toHex(arr);
    else
      return arr;
  };
  return exports$U$1;
}
function dew$T$1() {
  if (_dewExec$T$1)
    return exports$T$1;
  _dewExec$T$1 = true;
  var utils = exports$T$1;
  var BN = dew$V$1();
  var minAssert = dew$1t();
  var minUtils = dew$U$1();
  utils.assert = minAssert;
  utils.toArray = minUtils.toArray;
  utils.zero2 = minUtils.zero2;
  utils.toHex = minUtils.toHex;
  utils.encode = minUtils.encode;
  function getNAF(num, w4, bits) {
    var naf = new Array(Math.max(num.bitLength(), bits) + 1);
    naf.fill(0);
    var ws = 1 << w4 + 1;
    var k4 = num.clone();
    for (var i8 = 0; i8 < naf.length; i8++) {
      var z5;
      var mod = k4.andln(ws - 1);
      if (k4.isOdd()) {
        if (mod > (ws >> 1) - 1)
          z5 = (ws >> 1) - mod;
        else
          z5 = mod;
        k4.isubn(z5);
      } else {
        z5 = 0;
      }
      naf[i8] = z5;
      k4.iushrn(1);
    }
    return naf;
  }
  utils.getNAF = getNAF;
  function getJSF(k1, k22) {
    var jsf = [[], []];
    k1 = k1.clone();
    k22 = k22.clone();
    var d1 = 0;
    var d22 = 0;
    var m8;
    while (k1.cmpn(-d1) > 0 || k22.cmpn(-d22) > 0) {
      var m14 = k1.andln(3) + d1 & 3;
      var m24 = k22.andln(3) + d22 & 3;
      if (m14 === 3)
        m14 = -1;
      if (m24 === 3)
        m24 = -1;
      var u1;
      if ((m14 & 1) === 0) {
        u1 = 0;
      } else {
        m8 = k1.andln(7) + d1 & 7;
        if ((m8 === 3 || m8 === 5) && m24 === 2)
          u1 = -m14;
        else
          u1 = m14;
      }
      jsf[0].push(u1);
      var u22;
      if ((m24 & 1) === 0) {
        u22 = 0;
      } else {
        m8 = k22.andln(7) + d22 & 7;
        if ((m8 === 3 || m8 === 5) && m14 === 2)
          u22 = -m24;
        else
          u22 = m24;
      }
      jsf[1].push(u22);
      if (2 * d1 === u1 + 1)
        d1 = 1 - d1;
      if (2 * d22 === u22 + 1)
        d22 = 1 - d22;
      k1.iushrn(1);
      k22.iushrn(1);
    }
    return jsf;
  }
  utils.getJSF = getJSF;
  function cachedProperty(obj, name2, computer) {
    var key = "_" + name2;
    obj.prototype[name2] = function cachedProperty2() {
      return this[key] !== void 0 ? this[key] : this[key] = computer.call(this);
    };
  }
  utils.cachedProperty = cachedProperty;
  function parseBytes(bytes) {
    return typeof bytes === "string" ? utils.toArray(bytes, "hex") : bytes;
  }
  utils.parseBytes = parseBytes;
  function intFromLE(bytes) {
    return new BN(bytes, "hex", "le");
  }
  utils.intFromLE = intFromLE;
  return exports$T$1;
}
function dew$S$1() {
  if (_dewExec$S$1)
    return exports$S$1;
  _dewExec$S$1 = true;
  var BN = dew$V$1();
  var utils = dew$T$1();
  var getNAF = utils.getNAF;
  var getJSF = utils.getJSF;
  var assert2 = utils.assert;
  function BaseCurve(type, conf) {
    this.type = type;
    this.p = new BN(conf.p, 16);
    this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);
    this.zero = new BN(0).toRed(this.red);
    this.one = new BN(1).toRed(this.red);
    this.two = new BN(2).toRed(this.red);
    this.n = conf.n && new BN(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);
    this._bitLength = this.n ? this.n.bitLength() : 0;
    var adjustCount = this.n && this.p.div(this.n);
    if (!adjustCount || adjustCount.cmpn(100) > 0) {
      this.redN = null;
    } else {
      this._maxwellTrick = true;
      this.redN = this.n.toRed(this.red);
    }
  }
  exports$S$1 = BaseCurve;
  BaseCurve.prototype.point = function point() {
    throw new Error("Not implemented");
  };
  BaseCurve.prototype.validate = function validate() {
    throw new Error("Not implemented");
  };
  BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p8, k4) {
    assert2(p8.precomputed);
    var doubles = p8._getDoubles();
    var naf = getNAF(k4, 1, this._bitLength);
    var I4 = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
    I4 /= 3;
    var repr = [];
    var j4;
    var nafW;
    for (j4 = 0; j4 < naf.length; j4 += doubles.step) {
      nafW = 0;
      for (var l8 = j4 + doubles.step - 1; l8 >= j4; l8--)
        nafW = (nafW << 1) + naf[l8];
      repr.push(nafW);
    }
    var a8 = this.jpoint(null, null, null);
    var b5 = this.jpoint(null, null, null);
    for (var i8 = I4; i8 > 0; i8--) {
      for (j4 = 0; j4 < repr.length; j4++) {
        nafW = repr[j4];
        if (nafW === i8)
          b5 = b5.mixedAdd(doubles.points[j4]);
        else if (nafW === -i8)
          b5 = b5.mixedAdd(doubles.points[j4].neg());
      }
      a8 = a8.add(b5);
    }
    return a8.toP();
  };
  BaseCurve.prototype._wnafMul = function _wnafMul(p8, k4) {
    var w4 = 4;
    var nafPoints = p8._getNAFPoints(w4);
    w4 = nafPoints.wnd;
    var wnd = nafPoints.points;
    var naf = getNAF(k4, w4, this._bitLength);
    var acc = this.jpoint(null, null, null);
    for (var i8 = naf.length - 1; i8 >= 0; i8--) {
      for (var l8 = 0; i8 >= 0 && naf[i8] === 0; i8--)
        l8++;
      if (i8 >= 0)
        l8++;
      acc = acc.dblp(l8);
      if (i8 < 0)
        break;
      var z5 = naf[i8];
      assert2(z5 !== 0);
      if (p8.type === "affine") {
        if (z5 > 0)
          acc = acc.mixedAdd(wnd[z5 - 1 >> 1]);
        else
          acc = acc.mixedAdd(wnd[-z5 - 1 >> 1].neg());
      } else {
        if (z5 > 0)
          acc = acc.add(wnd[z5 - 1 >> 1]);
        else
          acc = acc.add(wnd[-z5 - 1 >> 1].neg());
      }
    }
    return p8.type === "affine" ? acc.toP() : acc;
  };
  BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;
    var max = 0;
    var i8;
    var j4;
    var p8;
    for (i8 = 0; i8 < len; i8++) {
      p8 = points[i8];
      var nafPoints = p8._getNAFPoints(defW);
      wndWidth[i8] = nafPoints.wnd;
      wnd[i8] = nafPoints.points;
    }
    for (i8 = len - 1; i8 >= 1; i8 -= 2) {
      var a8 = i8 - 1;
      var b5 = i8;
      if (wndWidth[a8] !== 1 || wndWidth[b5] !== 1) {
        naf[a8] = getNAF(coeffs[a8], wndWidth[a8], this._bitLength);
        naf[b5] = getNAF(coeffs[b5], wndWidth[b5], this._bitLength);
        max = Math.max(naf[a8].length, max);
        max = Math.max(naf[b5].length, max);
        continue;
      }
      var comb = [
        points[a8],
        null,
        null,
        points[b5]
      ];
      if (points[a8].y.cmp(points[b5].y) === 0) {
        comb[1] = points[a8].add(points[b5]);
        comb[2] = points[a8].toJ().mixedAdd(points[b5].neg());
      } else if (points[a8].y.cmp(points[b5].y.redNeg()) === 0) {
        comb[1] = points[a8].toJ().mixedAdd(points[b5]);
        comb[2] = points[a8].add(points[b5].neg());
      } else {
        comb[1] = points[a8].toJ().mixedAdd(points[b5]);
        comb[2] = points[a8].toJ().mixedAdd(points[b5].neg());
      }
      var index = [
        -3,
        -1,
        -5,
        -7,
        0,
        7,
        5,
        1,
        3
      ];
      var jsf = getJSF(coeffs[a8], coeffs[b5]);
      max = Math.max(jsf[0].length, max);
      naf[a8] = new Array(max);
      naf[b5] = new Array(max);
      for (j4 = 0; j4 < max; j4++) {
        var ja = jsf[0][j4] | 0;
        var jb = jsf[1][j4] | 0;
        naf[a8][j4] = index[(ja + 1) * 3 + (jb + 1)];
        naf[b5][j4] = 0;
        wnd[a8] = comb;
      }
    }
    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for (i8 = max; i8 >= 0; i8--) {
      var k4 = 0;
      while (i8 >= 0) {
        var zero = true;
        for (j4 = 0; j4 < len; j4++) {
          tmp[j4] = naf[j4][i8] | 0;
          if (tmp[j4] !== 0)
            zero = false;
        }
        if (!zero)
          break;
        k4++;
        i8--;
      }
      if (i8 >= 0)
        k4++;
      acc = acc.dblp(k4);
      if (i8 < 0)
        break;
      for (j4 = 0; j4 < len; j4++) {
        var z5 = tmp[j4];
        if (z5 === 0)
          continue;
        else if (z5 > 0)
          p8 = wnd[j4][z5 - 1 >> 1];
        else if (z5 < 0)
          p8 = wnd[j4][-z5 - 1 >> 1].neg();
        if (p8.type === "affine")
          acc = acc.mixedAdd(p8);
        else
          acc = acc.add(p8);
      }
    }
    for (i8 = 0; i8 < len; i8++)
      wnd[i8] = null;
    if (jacobianResult)
      return acc;
    else
      return acc.toP();
  };
  function BasePoint(curve, type) {
    this.curve = curve;
    this.type = type;
    this.precomputed = null;
  }
  BaseCurve.BasePoint = BasePoint;
  BasePoint.prototype.eq = function eq() {
    throw new Error("Not implemented");
  };
  BasePoint.prototype.validate = function validate() {
    return this.curve.validate(this);
  };
  BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    bytes = utils.toArray(bytes, enc);
    var len = this.p.byteLength();
    if ((bytes[0] === 4 || bytes[0] === 6 || bytes[0] === 7) && bytes.length - 1 === 2 * len) {
      if (bytes[0] === 6)
        assert2(bytes[bytes.length - 1] % 2 === 0);
      else if (bytes[0] === 7)
        assert2(bytes[bytes.length - 1] % 2 === 1);
      var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
      return res;
    } else if ((bytes[0] === 2 || bytes[0] === 3) && bytes.length - 1 === len) {
      return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 3);
    }
    throw new Error("Unknown point format");
  };
  BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
  };
  BasePoint.prototype._encode = function _encode(compact) {
    var len = this.curve.p.byteLength();
    var x4 = this.getX().toArray("be", len);
    if (compact)
      return [this.getY().isEven() ? 2 : 3].concat(x4);
    return [4].concat(x4, this.getY().toArray("be", len));
  };
  BasePoint.prototype.encode = function encode3(enc, compact) {
    return utils.encode(this._encode(compact), enc);
  };
  BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed)
      return this;
    var precomputed = {
      doubles: null,
      naf: null,
      beta: null
    };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;
    return this;
  };
  BasePoint.prototype._hasDoubles = function _hasDoubles(k4) {
    if (!this.precomputed)
      return false;
    var doubles = this.precomputed.doubles;
    if (!doubles)
      return false;
    return doubles.points.length >= Math.ceil((k4.bitLength() + 1) / doubles.step);
  };
  BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles)
      return this.precomputed.doubles;
    var doubles = [this];
    var acc = this;
    for (var i8 = 0; i8 < power; i8 += step) {
      for (var j4 = 0; j4 < step; j4++)
        acc = acc.dbl();
      doubles.push(acc);
    }
    return {
      step,
      points: doubles
    };
  };
  BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf)
      return this.precomputed.naf;
    var res = [this];
    var max = (1 << wnd) - 1;
    var dbl = max === 1 ? null : this.dbl();
    for (var i8 = 1; i8 < max; i8++)
      res[i8] = res[i8 - 1].add(dbl);
    return {
      wnd,
      points: res
    };
  };
  BasePoint.prototype._getBeta = function _getBeta() {
    return null;
  };
  BasePoint.prototype.dblp = function dblp(k4) {
    var r9 = this;
    for (var i8 = 0; i8 < k4; i8++)
      r9 = r9.dbl();
    return r9;
  };
  return exports$S$1;
}
function dew$R$1() {
  if (_dewExec$R$1)
    return exports$R$1;
  _dewExec$R$1 = true;
  var utils = dew$T$1();
  var BN = dew$V$1();
  var inherits4 = dew$f$2();
  var Base = dew$S$1();
  var assert2 = utils.assert;
  function ShortCurve(conf) {
    Base.call(this, "short", conf);
    this.a = new BN(conf.a, 16).toRed(this.red);
    this.b = new BN(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();
    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
  }
  inherits4(ShortCurve, Base);
  exports$R$1 = ShortCurve;
  ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
      return;
    var beta;
    var lambda;
    if (conf.beta) {
      beta = new BN(conf.beta, 16).toRed(this.red);
    } else {
      var betas = this._getEndoRoots(this.p);
      beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
      beta = beta.toRed(this.red);
    }
    if (conf.lambda) {
      lambda = new BN(conf.lambda, 16);
    } else {
      var lambdas = this._getEndoRoots(this.n);
      if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
        lambda = lambdas[0];
      } else {
        lambda = lambdas[1];
        assert2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
      }
    }
    var basis;
    if (conf.basis) {
      basis = conf.basis.map(function(vec) {
        return {
          a: new BN(vec.a, 16),
          b: new BN(vec.b, 16)
        };
      });
    } else {
      basis = this._getEndoBasis(lambda);
    }
    return {
      beta,
      lambda,
      basis
    };
  };
  ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    var red = num === this.p ? this.red : BN.mont(num);
    var tinv = new BN(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();
    var s7 = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
    var l1 = ntinv.redAdd(s7).fromRed();
    var l22 = ntinv.redSub(s7).fromRed();
    return [l1, l22];
  };
  ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
    var u8 = lambda;
    var v6 = this.n.clone();
    var x1 = new BN(1);
    var y1 = new BN(0);
    var x22 = new BN(0);
    var y22 = new BN(1);
    var a0;
    var b0;
    var a1;
    var b1;
    var a22;
    var b22;
    var prevR;
    var i8 = 0;
    var r9;
    var x4;
    while (u8.cmpn(0) !== 0) {
      var q3 = v6.div(u8);
      r9 = v6.sub(q3.mul(u8));
      x4 = x22.sub(q3.mul(x1));
      var y6 = y22.sub(q3.mul(y1));
      if (!a1 && r9.cmp(aprxSqrt) < 0) {
        a0 = prevR.neg();
        b0 = x1;
        a1 = r9.neg();
        b1 = x4;
      } else if (a1 && ++i8 === 2) {
        break;
      }
      prevR = r9;
      v6 = u8;
      u8 = r9;
      x22 = x1;
      x1 = x4;
      y22 = y1;
      y1 = y6;
    }
    a22 = r9.neg();
    b22 = x4;
    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a22.sqr().add(b22.sqr());
    if (len2.cmp(len1) >= 0) {
      a22 = a0;
      b22 = b0;
    }
    if (a1.negative) {
      a1 = a1.neg();
      b1 = b1.neg();
    }
    if (a22.negative) {
      a22 = a22.neg();
      b22 = b22.neg();
    }
    return [{
      a: a1,
      b: b1
    }, {
      a: a22,
      b: b22
    }];
  };
  ShortCurve.prototype._endoSplit = function _endoSplit(k4) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v22 = basis[1];
    var c1 = v22.b.mul(k4).divRound(this.n);
    var c22 = v1.b.neg().mul(k4).divRound(this.n);
    var p1 = c1.mul(v1.a);
    var p22 = c22.mul(v22.a);
    var q1 = c1.mul(v1.b);
    var q22 = c22.mul(v22.b);
    var k1 = k4.sub(p1).sub(p22);
    var k22 = q1.add(q22).neg();
    return {
      k1,
      k2: k22
    };
  };
  ShortCurve.prototype.pointFromX = function pointFromX(x4, odd) {
    x4 = new BN(x4, 16);
    if (!x4.red)
      x4 = x4.toRed(this.red);
    var y22 = x4.redSqr().redMul(x4).redIAdd(x4.redMul(this.a)).redIAdd(this.b);
    var y6 = y22.redSqrt();
    if (y6.redSqr().redSub(y22).cmp(this.zero) !== 0)
      throw new Error("invalid point");
    var isOdd = y6.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd)
      y6 = y6.redNeg();
    return this.point(x4, y6);
  };
  ShortCurve.prototype.validate = function validate(point) {
    if (point.inf)
      return true;
    var x4 = point.x;
    var y6 = point.y;
    var ax = this.a.redMul(x4);
    var rhs = x4.redSqr().redMul(x4).redIAdd(ax).redIAdd(this.b);
    return y6.redSqr().redISub(rhs).cmpn(0) === 0;
  };
  ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
    var npoints = this._endoWnafT1;
    var ncoeffs = this._endoWnafT2;
    for (var i8 = 0; i8 < points.length; i8++) {
      var split = this._endoSplit(coeffs[i8]);
      var p8 = points[i8];
      var beta = p8._getBeta();
      if (split.k1.negative) {
        split.k1.ineg();
        p8 = p8.neg(true);
      }
      if (split.k2.negative) {
        split.k2.ineg();
        beta = beta.neg(true);
      }
      npoints[i8 * 2] = p8;
      npoints[i8 * 2 + 1] = beta;
      ncoeffs[i8 * 2] = split.k1;
      ncoeffs[i8 * 2 + 1] = split.k2;
    }
    var res = this._wnafMulAdd(1, npoints, ncoeffs, i8 * 2, jacobianResult);
    for (var j4 = 0; j4 < i8 * 2; j4++) {
      npoints[j4] = null;
      ncoeffs[j4] = null;
    }
    return res;
  };
  function Point(curve, x4, y6, isRed) {
    Base.BasePoint.call(this, curve, "affine");
    if (x4 === null && y6 === null) {
      this.x = null;
      this.y = null;
      this.inf = true;
    } else {
      this.x = new BN(x4, 16);
      this.y = new BN(y6, 16);
      if (isRed) {
        this.x.forceRed(this.curve.red);
        this.y.forceRed(this.curve.red);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      this.inf = false;
    }
  }
  inherits4(Point, Base.BasePoint);
  ShortCurve.prototype.point = function point(x4, y6, isRed) {
    return new Point(this, x4, y6, isRed);
  };
  ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return Point.fromJSON(this, obj, red);
  };
  Point.prototype._getBeta = function _getBeta() {
    if (!this.curve.endo)
      return;
    var pre = this.precomputed;
    if (pre && pre.beta)
      return pre.beta;
    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (pre) {
      var curve = this.curve;
      var endoMul = function(p8) {
        return curve.point(p8.x.redMul(curve.endo.beta), p8.y);
      };
      pre.beta = beta;
      beta.precomputed = {
        beta: null,
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: pre.naf.points.map(endoMul)
        },
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: pre.doubles.points.map(endoMul)
        }
      };
    }
    return beta;
  };
  Point.prototype.toJSON = function toJSON2() {
    if (!this.precomputed)
      return [this.x, this.y];
    return [this.x, this.y, this.precomputed && {
      doubles: this.precomputed.doubles && {
        step: this.precomputed.doubles.step,
        points: this.precomputed.doubles.points.slice(1)
      },
      naf: this.precomputed.naf && {
        wnd: this.precomputed.naf.wnd,
        points: this.precomputed.naf.points.slice(1)
      }
    }];
  };
  Point.fromJSON = function fromJSON(curve, obj, red) {
    if (typeof obj === "string")
      obj = JSON.parse(obj);
    var res = curve.point(obj[0], obj[1], red);
    if (!obj[2])
      return res;
    function obj2point(obj2) {
      return curve.point(obj2[0], obj2[1], red);
    }
    var pre = obj[2];
    res.precomputed = {
      beta: null,
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: [res].concat(pre.doubles.points.map(obj2point))
      },
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: [res].concat(pre.naf.points.map(obj2point))
      }
    };
    return res;
  };
  Point.prototype.inspect = function inspect3() {
    if (this.isInfinity())
      return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
  };
  Point.prototype.isInfinity = function isInfinity() {
    return this.inf;
  };
  Point.prototype.add = function add(p8) {
    if (this.inf)
      return p8;
    if (p8.inf)
      return this;
    if (this.eq(p8))
      return this.dbl();
    if (this.neg().eq(p8))
      return this.curve.point(null, null);
    if (this.x.cmp(p8.x) === 0)
      return this.curve.point(null, null);
    var c8 = this.y.redSub(p8.y);
    if (c8.cmpn(0) !== 0)
      c8 = c8.redMul(this.x.redSub(p8.x).redInvm());
    var nx = c8.redSqr().redISub(this.x).redISub(p8.x);
    var ny = c8.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };
  Point.prototype.dbl = function dbl() {
    if (this.inf)
      return this;
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0)
      return this.curve.point(null, null);
    var a8 = this.curve.a;
    var x22 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c8 = x22.redAdd(x22).redIAdd(x22).redIAdd(a8).redMul(dyinv);
    var nx = c8.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c8.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };
  Point.prototype.getX = function getX() {
    return this.x.fromRed();
  };
  Point.prototype.getY = function getY() {
    return this.y.fromRed();
  };
  Point.prototype.mul = function mul(k4) {
    k4 = new BN(k4, 16);
    if (this.isInfinity())
      return this;
    else if (this._hasDoubles(k4))
      return this.curve._fixedNafMul(this, k4);
    else if (this.curve.endo)
      return this.curve._endoWnafMulAdd([this], [k4]);
    else
      return this.curve._wnafMul(this, k4);
  };
  Point.prototype.mulAdd = function mulAdd(k1, p22, k22) {
    var points = [this, p22];
    var coeffs = [k1, k22];
    if (this.curve.endo)
      return this.curve._endoWnafMulAdd(points, coeffs);
    else
      return this.curve._wnafMulAdd(1, points, coeffs, 2);
  };
  Point.prototype.jmulAdd = function jmulAdd(k1, p22, k22) {
    var points = [this, p22];
    var coeffs = [k1, k22];
    if (this.curve.endo)
      return this.curve._endoWnafMulAdd(points, coeffs, true);
    else
      return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
  };
  Point.prototype.eq = function eq(p8) {
    return this === p8 || this.inf === p8.inf && (this.inf || this.x.cmp(p8.x) === 0 && this.y.cmp(p8.y) === 0);
  };
  Point.prototype.neg = function neg(_precompute) {
    if (this.inf)
      return this;
    var res = this.curve.point(this.x, this.y.redNeg());
    if (_precompute && this.precomputed) {
      var pre = this.precomputed;
      var negate = function(p8) {
        return p8.neg();
      };
      res.precomputed = {
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: pre.naf.points.map(negate)
        },
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: pre.doubles.points.map(negate)
        }
      };
    }
    return res;
  };
  Point.prototype.toJ = function toJ() {
    if (this.inf)
      return this.curve.jpoint(null, null, null);
    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
  };
  function JPoint(curve, x4, y6, z5) {
    Base.BasePoint.call(this, curve, "jacobian");
    if (x4 === null && y6 === null && z5 === null) {
      this.x = this.curve.one;
      this.y = this.curve.one;
      this.z = new BN(0);
    } else {
      this.x = new BN(x4, 16);
      this.y = new BN(y6, 16);
      this.z = new BN(z5, 16);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;
  }
  inherits4(JPoint, Base.BasePoint);
  ShortCurve.prototype.jpoint = function jpoint(x4, y6, z5) {
    return new JPoint(this, x4, y6, z5);
  };
  JPoint.prototype.toP = function toP() {
    if (this.isInfinity())
      return this.curve.point(null, null);
    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);
    return this.curve.point(ax, ay);
  };
  JPoint.prototype.neg = function neg() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
  };
  JPoint.prototype.add = function add(p8) {
    if (this.isInfinity())
      return p8;
    if (p8.isInfinity())
      return this;
    var pz2 = p8.z.redSqr();
    var z22 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u22 = p8.x.redMul(z22);
    var s1 = this.y.redMul(pz2.redMul(p8.z));
    var s22 = p8.y.redMul(z22.redMul(this.z));
    var h8 = u1.redSub(u22);
    var r9 = s1.redSub(s22);
    if (h8.cmpn(0) === 0) {
      if (r9.cmpn(0) !== 0)
        return this.curve.jpoint(null, null, null);
      else
        return this.dbl();
    }
    var h22 = h8.redSqr();
    var h32 = h22.redMul(h8);
    var v6 = u1.redMul(h22);
    var nx = r9.redSqr().redIAdd(h32).redISub(v6).redISub(v6);
    var ny = r9.redMul(v6.redISub(nx)).redISub(s1.redMul(h32));
    var nz = this.z.redMul(p8.z).redMul(h8);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.mixedAdd = function mixedAdd(p8) {
    if (this.isInfinity())
      return p8.toJ();
    if (p8.isInfinity())
      return this;
    var z22 = this.z.redSqr();
    var u1 = this.x;
    var u22 = p8.x.redMul(z22);
    var s1 = this.y;
    var s22 = p8.y.redMul(z22).redMul(this.z);
    var h8 = u1.redSub(u22);
    var r9 = s1.redSub(s22);
    if (h8.cmpn(0) === 0) {
      if (r9.cmpn(0) !== 0)
        return this.curve.jpoint(null, null, null);
      else
        return this.dbl();
    }
    var h22 = h8.redSqr();
    var h32 = h22.redMul(h8);
    var v6 = u1.redMul(h22);
    var nx = r9.redSqr().redIAdd(h32).redISub(v6).redISub(v6);
    var ny = r9.redMul(v6.redISub(nx)).redISub(s1.redMul(h32));
    var nz = this.z.redMul(h8);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.dblp = function dblp(pow) {
    if (pow === 0)
      return this;
    if (this.isInfinity())
      return this;
    if (!pow)
      return this.dbl();
    var i8;
    if (this.curve.zeroA || this.curve.threeA) {
      var r9 = this;
      for (i8 = 0; i8 < pow; i8++)
        r9 = r9.dbl();
      return r9;
    }
    var a8 = this.curve.a;
    var tinv = this.curve.tinv;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jyd = jy.redAdd(jy);
    for (i8 = 0; i8 < pow; i8++) {
      var jx2 = jx.redSqr();
      var jyd2 = jyd.redSqr();
      var jyd4 = jyd2.redSqr();
      var c8 = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a8.redMul(jz4));
      var t1 = jx.redMul(jyd2);
      var nx = c8.redSqr().redISub(t1.redAdd(t1));
      var t22 = t1.redISub(nx);
      var dny = c8.redMul(t22);
      dny = dny.redIAdd(dny).redISub(jyd4);
      var nz = jyd.redMul(jz);
      if (i8 + 1 < pow)
        jz4 = jz4.redMul(jyd4);
      jx = nx;
      jz = nz;
      jyd = dny;
    }
    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
  };
  JPoint.prototype.dbl = function dbl() {
    if (this.isInfinity())
      return this;
    if (this.curve.zeroA)
      return this._zeroDbl();
    else if (this.curve.threeA)
      return this._threeDbl();
    else
      return this._dbl();
  };
  JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;
    if (this.zOne) {
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var yyyy = yy.redSqr();
      var s7 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s7 = s7.redIAdd(s7);
      var m6 = xx.redAdd(xx).redIAdd(xx);
      var t8 = m6.redSqr().redISub(s7).redISub(s7);
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      nx = t8;
      ny = m6.redMul(s7.redISub(t8)).redISub(yyyy8);
      nz = this.y.redAdd(this.y);
    } else {
      var a8 = this.x.redSqr();
      var b5 = this.y.redSqr();
      var c8 = b5.redSqr();
      var d6 = this.x.redAdd(b5).redSqr().redISub(a8).redISub(c8);
      d6 = d6.redIAdd(d6);
      var e11 = a8.redAdd(a8).redIAdd(a8);
      var f9 = e11.redSqr();
      var c82 = c8.redIAdd(c8);
      c82 = c82.redIAdd(c82);
      c82 = c82.redIAdd(c82);
      nx = f9.redISub(d6).redISub(d6);
      ny = e11.redMul(d6.redISub(nx)).redISub(c82);
      nz = this.y.redMul(this.z);
      nz = nz.redIAdd(nz);
    }
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;
    if (this.zOne) {
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var yyyy = yy.redSqr();
      var s7 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s7 = s7.redIAdd(s7);
      var m6 = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
      var t8 = m6.redSqr().redISub(s7).redISub(s7);
      nx = t8;
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      ny = m6.redMul(s7.redISub(t8)).redISub(yyyy8);
      nz = this.y.redAdd(this.y);
    } else {
      var delta = this.z.redSqr();
      var gamma = this.y.redSqr();
      var beta = this.x.redMul(gamma);
      var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
      alpha = alpha.redAdd(alpha).redIAdd(alpha);
      var beta4 = beta.redIAdd(beta);
      beta4 = beta4.redIAdd(beta4);
      var beta8 = beta4.redAdd(beta4);
      nx = alpha.redSqr().redISub(beta8);
      nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
      var ggamma8 = gamma.redSqr();
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype._dbl = function _dbl() {
    var a8 = this.curve.a;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();
    var c8 = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a8.redMul(jz4));
    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c8.redSqr().redISub(t1.redAdd(t1));
    var t22 = t1.redISub(nx);
    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c8.redMul(t22).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA)
      return this.dbl().add(this);
    var xx = this.x.redSqr();
    var yy = this.y.redSqr();
    var zz = this.z.redSqr();
    var yyyy = yy.redSqr();
    var m6 = xx.redAdd(xx).redIAdd(xx);
    var mm = m6.redSqr();
    var e11 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e11 = e11.redIAdd(e11);
    e11 = e11.redAdd(e11).redIAdd(e11);
    e11 = e11.redISub(mm);
    var ee3 = e11.redSqr();
    var t8 = yyyy.redIAdd(yyyy);
    t8 = t8.redIAdd(t8);
    t8 = t8.redIAdd(t8);
    t8 = t8.redIAdd(t8);
    var u8 = m6.redIAdd(e11).redSqr().redISub(mm).redISub(ee3).redISub(t8);
    var yyu4 = yy.redMul(u8);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee3).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    var ny = this.y.redMul(u8.redMul(t8.redISub(u8)).redISub(e11.redMul(ee3)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    var nz = this.z.redAdd(e11).redSqr().redISub(zz).redISub(ee3);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.mul = function mul(k4, kbase) {
    k4 = new BN(k4, kbase);
    return this.curve._wnafMul(this, k4);
  };
  JPoint.prototype.eq = function eq(p8) {
    if (p8.type === "affine")
      return this.eq(p8.toJ());
    if (this === p8)
      return true;
    var z22 = this.z.redSqr();
    var pz2 = p8.z.redSqr();
    if (this.x.redMul(pz2).redISub(p8.x.redMul(z22)).cmpn(0) !== 0)
      return false;
    var z32 = z22.redMul(this.z);
    var pz3 = pz2.redMul(p8.z);
    return this.y.redMul(pz3).redISub(p8.y.redMul(z32)).cmpn(0) === 0;
  };
  JPoint.prototype.eqXToP = function eqXToP(x4) {
    var zs = this.z.redSqr();
    var rx = x4.toRed(this.curve.red).redMul(zs);
    if (this.x.cmp(rx) === 0)
      return true;
    var xc = x4.clone();
    var t8 = this.curve.redN.redMul(zs);
    for (; ; ) {
      xc.iadd(this.curve.n);
      if (xc.cmp(this.curve.p) >= 0)
        return false;
      rx.redIAdd(t8);
      if (this.x.cmp(rx) === 0)
        return true;
    }
  };
  JPoint.prototype.inspect = function inspect3() {
    if (this.isInfinity())
      return "<EC JPoint Infinity>";
    return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
  };
  JPoint.prototype.isInfinity = function isInfinity() {
    return this.z.cmpn(0) === 0;
  };
  return exports$R$1;
}
function dew$Q$1() {
  if (_dewExec$Q$1)
    return exports$Q$1;
  _dewExec$Q$1 = true;
  var BN = dew$V$1();
  var inherits4 = dew$f$2();
  var Base = dew$S$1();
  var utils = dew$T$1();
  function MontCurve(conf) {
    Base.call(this, "mont", conf);
    this.a = new BN(conf.a, 16).toRed(this.red);
    this.b = new BN(conf.b, 16).toRed(this.red);
    this.i4 = new BN(4).toRed(this.red).redInvm();
    this.two = new BN(2).toRed(this.red);
    this.a24 = this.i4.redMul(this.a.redAdd(this.two));
  }
  inherits4(MontCurve, Base);
  exports$Q$1 = MontCurve;
  MontCurve.prototype.validate = function validate(point) {
    var x4 = point.normalize().x;
    var x22 = x4.redSqr();
    var rhs = x22.redMul(x4).redAdd(x22.redMul(this.a)).redAdd(x4);
    var y6 = rhs.redSqrt();
    return y6.redSqr().cmp(rhs) === 0;
  };
  function Point(curve, x4, z5) {
    Base.BasePoint.call(this, curve, "projective");
    if (x4 === null && z5 === null) {
      this.x = this.curve.one;
      this.z = this.curve.zero;
    } else {
      this.x = new BN(x4, 16);
      this.z = new BN(z5, 16);
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
    }
  }
  inherits4(Point, Base.BasePoint);
  MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    return this.point(utils.toArray(bytes, enc), 1);
  };
  MontCurve.prototype.point = function point(x4, z5) {
    return new Point(this, x4, z5);
  };
  MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
  };
  Point.prototype.precompute = function precompute() {
  };
  Point.prototype._encode = function _encode() {
    return this.getX().toArray("be", this.curve.p.byteLength());
  };
  Point.fromJSON = function fromJSON(curve, obj) {
    return new Point(curve, obj[0], obj[1] || curve.one);
  };
  Point.prototype.inspect = function inspect3() {
    if (this.isInfinity())
      return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
  };
  Point.prototype.isInfinity = function isInfinity() {
    return this.z.cmpn(0) === 0;
  };
  Point.prototype.dbl = function dbl() {
    var a8 = this.x.redAdd(this.z);
    var aa = a8.redSqr();
    var b5 = this.x.redSub(this.z);
    var bb = b5.redSqr();
    var c8 = aa.redSub(bb);
    var nx = aa.redMul(bb);
    var nz = c8.redMul(bb.redAdd(this.curve.a24.redMul(c8)));
    return this.curve.point(nx, nz);
  };
  Point.prototype.add = function add() {
    throw new Error("Not supported on Montgomery curve");
  };
  Point.prototype.diffAdd = function diffAdd(p8, diff) {
    var a8 = this.x.redAdd(this.z);
    var b5 = this.x.redSub(this.z);
    var c8 = p8.x.redAdd(p8.z);
    var d6 = p8.x.redSub(p8.z);
    var da = d6.redMul(a8);
    var cb = c8.redMul(b5);
    var nx = diff.z.redMul(da.redAdd(cb).redSqr());
    var nz = diff.x.redMul(da.redISub(cb).redSqr());
    return this.curve.point(nx, nz);
  };
  Point.prototype.mul = function mul(k4) {
    var t8 = k4.clone();
    var a8 = this;
    var b5 = this.curve.point(null, null);
    var c8 = this;
    for (var bits = []; t8.cmpn(0) !== 0; t8.iushrn(1))
      bits.push(t8.andln(1));
    for (var i8 = bits.length - 1; i8 >= 0; i8--) {
      if (bits[i8] === 0) {
        a8 = a8.diffAdd(b5, c8);
        b5 = b5.dbl();
      } else {
        b5 = a8.diffAdd(b5, c8);
        a8 = a8.dbl();
      }
    }
    return b5;
  };
  Point.prototype.mulAdd = function mulAdd() {
    throw new Error("Not supported on Montgomery curve");
  };
  Point.prototype.jumlAdd = function jumlAdd() {
    throw new Error("Not supported on Montgomery curve");
  };
  Point.prototype.eq = function eq(other) {
    return this.getX().cmp(other.getX()) === 0;
  };
  Point.prototype.normalize = function normalize() {
    this.x = this.x.redMul(this.z.redInvm());
    this.z = this.curve.one;
    return this;
  };
  Point.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
  };
  return exports$Q$1;
}
function dew$P$1() {
  if (_dewExec$P$1)
    return exports$P$1;
  _dewExec$P$1 = true;
  var utils = dew$T$1();
  var BN = dew$V$1();
  var inherits4 = dew$f$2();
  var Base = dew$S$1();
  var assert2 = utils.assert;
  function EdwardsCurve(conf) {
    this.twisted = (conf.a | 0) !== 1;
    this.mOneA = this.twisted && (conf.a | 0) === -1;
    this.extended = this.mOneA;
    Base.call(this, "edwards", conf);
    this.a = new BN(conf.a, 16).umod(this.red.m);
    this.a = this.a.toRed(this.red);
    this.c = new BN(conf.c, 16).toRed(this.red);
    this.c2 = this.c.redSqr();
    this.d = new BN(conf.d, 16).toRed(this.red);
    this.dd = this.d.redAdd(this.d);
    assert2(!this.twisted || this.c.fromRed().cmpn(1) === 0);
    this.oneC = (conf.c | 0) === 1;
  }
  inherits4(EdwardsCurve, Base);
  exports$P$1 = EdwardsCurve;
  EdwardsCurve.prototype._mulA = function _mulA(num) {
    if (this.mOneA)
      return num.redNeg();
    else
      return this.a.redMul(num);
  };
  EdwardsCurve.prototype._mulC = function _mulC(num) {
    if (this.oneC)
      return num;
    else
      return this.c.redMul(num);
  };
  EdwardsCurve.prototype.jpoint = function jpoint(x4, y6, z5, t8) {
    return this.point(x4, y6, z5, t8);
  };
  EdwardsCurve.prototype.pointFromX = function pointFromX(x4, odd) {
    x4 = new BN(x4, 16);
    if (!x4.red)
      x4 = x4.toRed(this.red);
    var x22 = x4.redSqr();
    var rhs = this.c2.redSub(this.a.redMul(x22));
    var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x22));
    var y22 = rhs.redMul(lhs.redInvm());
    var y6 = y22.redSqrt();
    if (y6.redSqr().redSub(y22).cmp(this.zero) !== 0)
      throw new Error("invalid point");
    var isOdd = y6.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd)
      y6 = y6.redNeg();
    return this.point(x4, y6);
  };
  EdwardsCurve.prototype.pointFromY = function pointFromY(y6, odd) {
    y6 = new BN(y6, 16);
    if (!y6.red)
      y6 = y6.toRed(this.red);
    var y22 = y6.redSqr();
    var lhs = y22.redSub(this.c2);
    var rhs = y22.redMul(this.d).redMul(this.c2).redSub(this.a);
    var x22 = lhs.redMul(rhs.redInvm());
    if (x22.cmp(this.zero) === 0) {
      if (odd)
        throw new Error("invalid point");
      else
        return this.point(this.zero, y6);
    }
    var x4 = x22.redSqrt();
    if (x4.redSqr().redSub(x22).cmp(this.zero) !== 0)
      throw new Error("invalid point");
    if (x4.fromRed().isOdd() !== odd)
      x4 = x4.redNeg();
    return this.point(x4, y6);
  };
  EdwardsCurve.prototype.validate = function validate(point) {
    if (point.isInfinity())
      return true;
    point.normalize();
    var x22 = point.x.redSqr();
    var y22 = point.y.redSqr();
    var lhs = x22.redMul(this.a).redAdd(y22);
    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x22).redMul(y22)));
    return lhs.cmp(rhs) === 0;
  };
  function Point(curve, x4, y6, z5, t8) {
    Base.BasePoint.call(this, curve, "projective");
    if (x4 === null && y6 === null && z5 === null) {
      this.x = this.curve.zero;
      this.y = this.curve.one;
      this.z = this.curve.one;
      this.t = this.curve.zero;
      this.zOne = true;
    } else {
      this.x = new BN(x4, 16);
      this.y = new BN(y6, 16);
      this.z = z5 ? new BN(z5, 16) : this.curve.one;
      this.t = t8 && new BN(t8, 16);
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
      if (this.t && !this.t.red)
        this.t = this.t.toRed(this.curve.red);
      this.zOne = this.z === this.curve.one;
      if (this.curve.extended && !this.t) {
        this.t = this.x.redMul(this.y);
        if (!this.zOne)
          this.t = this.t.redMul(this.z.redInvm());
      }
    }
  }
  inherits4(Point, Base.BasePoint);
  EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
  };
  EdwardsCurve.prototype.point = function point(x4, y6, z5, t8) {
    return new Point(this, x4, y6, z5, t8);
  };
  Point.fromJSON = function fromJSON(curve, obj) {
    return new Point(curve, obj[0], obj[1], obj[2]);
  };
  Point.prototype.inspect = function inspect3() {
    if (this.isInfinity())
      return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
  };
  Point.prototype.isInfinity = function isInfinity() {
    return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
  };
  Point.prototype._extDbl = function _extDbl() {
    var a8 = this.x.redSqr();
    var b5 = this.y.redSqr();
    var c8 = this.z.redSqr();
    c8 = c8.redIAdd(c8);
    var d6 = this.curve._mulA(a8);
    var e11 = this.x.redAdd(this.y).redSqr().redISub(a8).redISub(b5);
    var g5 = d6.redAdd(b5);
    var f9 = g5.redSub(c8);
    var h8 = d6.redSub(b5);
    var nx = e11.redMul(f9);
    var ny = g5.redMul(h8);
    var nt2 = e11.redMul(h8);
    var nz = f9.redMul(g5);
    return this.curve.point(nx, ny, nz, nt2);
  };
  Point.prototype._projDbl = function _projDbl() {
    var b5 = this.x.redAdd(this.y).redSqr();
    var c8 = this.x.redSqr();
    var d6 = this.y.redSqr();
    var nx;
    var ny;
    var nz;
    var e11;
    var h8;
    var j4;
    if (this.curve.twisted) {
      e11 = this.curve._mulA(c8);
      var f9 = e11.redAdd(d6);
      if (this.zOne) {
        nx = b5.redSub(c8).redSub(d6).redMul(f9.redSub(this.curve.two));
        ny = f9.redMul(e11.redSub(d6));
        nz = f9.redSqr().redSub(f9).redSub(f9);
      } else {
        h8 = this.z.redSqr();
        j4 = f9.redSub(h8).redISub(h8);
        nx = b5.redSub(c8).redISub(d6).redMul(j4);
        ny = f9.redMul(e11.redSub(d6));
        nz = f9.redMul(j4);
      }
    } else {
      e11 = c8.redAdd(d6);
      h8 = this.curve._mulC(this.z).redSqr();
      j4 = e11.redSub(h8).redSub(h8);
      nx = this.curve._mulC(b5.redISub(e11)).redMul(j4);
      ny = this.curve._mulC(e11).redMul(c8.redISub(d6));
      nz = e11.redMul(j4);
    }
    return this.curve.point(nx, ny, nz);
  };
  Point.prototype.dbl = function dbl() {
    if (this.isInfinity())
      return this;
    if (this.curve.extended)
      return this._extDbl();
    else
      return this._projDbl();
  };
  Point.prototype._extAdd = function _extAdd(p8) {
    var a8 = this.y.redSub(this.x).redMul(p8.y.redSub(p8.x));
    var b5 = this.y.redAdd(this.x).redMul(p8.y.redAdd(p8.x));
    var c8 = this.t.redMul(this.curve.dd).redMul(p8.t);
    var d6 = this.z.redMul(p8.z.redAdd(p8.z));
    var e11 = b5.redSub(a8);
    var f9 = d6.redSub(c8);
    var g5 = d6.redAdd(c8);
    var h8 = b5.redAdd(a8);
    var nx = e11.redMul(f9);
    var ny = g5.redMul(h8);
    var nt2 = e11.redMul(h8);
    var nz = f9.redMul(g5);
    return this.curve.point(nx, ny, nz, nt2);
  };
  Point.prototype._projAdd = function _projAdd(p8) {
    var a8 = this.z.redMul(p8.z);
    var b5 = a8.redSqr();
    var c8 = this.x.redMul(p8.x);
    var d6 = this.y.redMul(p8.y);
    var e11 = this.curve.d.redMul(c8).redMul(d6);
    var f9 = b5.redSub(e11);
    var g5 = b5.redAdd(e11);
    var tmp = this.x.redAdd(this.y).redMul(p8.x.redAdd(p8.y)).redISub(c8).redISub(d6);
    var nx = a8.redMul(f9).redMul(tmp);
    var ny;
    var nz;
    if (this.curve.twisted) {
      ny = a8.redMul(g5).redMul(d6.redSub(this.curve._mulA(c8)));
      nz = f9.redMul(g5);
    } else {
      ny = a8.redMul(g5).redMul(d6.redSub(c8));
      nz = this.curve._mulC(f9).redMul(g5);
    }
    return this.curve.point(nx, ny, nz);
  };
  Point.prototype.add = function add(p8) {
    if (this.isInfinity())
      return p8;
    if (p8.isInfinity())
      return this;
    if (this.curve.extended)
      return this._extAdd(p8);
    else
      return this._projAdd(p8);
  };
  Point.prototype.mul = function mul(k4) {
    if (this._hasDoubles(k4))
      return this.curve._fixedNafMul(this, k4);
    else
      return this.curve._wnafMul(this, k4);
  };
  Point.prototype.mulAdd = function mulAdd(k1, p8, k22) {
    return this.curve._wnafMulAdd(1, [this, p8], [k1, k22], 2, false);
  };
  Point.prototype.jmulAdd = function jmulAdd(k1, p8, k22) {
    return this.curve._wnafMulAdd(1, [this, p8], [k1, k22], 2, true);
  };
  Point.prototype.normalize = function normalize() {
    if (this.zOne)
      return this;
    var zi = this.z.redInvm();
    this.x = this.x.redMul(zi);
    this.y = this.y.redMul(zi);
    if (this.t)
      this.t = this.t.redMul(zi);
    this.z = this.curve.one;
    this.zOne = true;
    return this;
  };
  Point.prototype.neg = function neg() {
    return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
  };
  Point.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
  };
  Point.prototype.getY = function getY() {
    this.normalize();
    return this.y.fromRed();
  };
  Point.prototype.eq = function eq(other) {
    return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
  };
  Point.prototype.eqXToP = function eqXToP(x4) {
    var rx = x4.toRed(this.curve.red).redMul(this.z);
    if (this.x.cmp(rx) === 0)
      return true;
    var xc = x4.clone();
    var t8 = this.curve.redN.redMul(this.z);
    for (; ; ) {
      xc.iadd(this.curve.n);
      if (xc.cmp(this.curve.p) >= 0)
        return false;
      rx.redIAdd(t8);
      if (this.x.cmp(rx) === 0)
        return true;
    }
  };
  Point.prototype.toP = Point.prototype.normalize;
  Point.prototype.mixedAdd = Point.prototype.add;
  return exports$P$1;
}
function dew$O$1() {
  if (_dewExec$O$1)
    return exports$O$1;
  _dewExec$O$1 = true;
  var curve = exports$O$1;
  curve.base = dew$S$1();
  curve.short = dew$R$1();
  curve.mont = dew$Q$1();
  curve.edwards = dew$P$1();
  return exports$O$1;
}
function dew$N$1() {
  if (_dewExec$N$1)
    return exports$N$1;
  _dewExec$N$1 = true;
  var assert2 = dew$1t();
  var inherits4 = dew$f$2();
  exports$N$1.inherits = inherits4;
  function isSurrogatePair(msg, i8) {
    if ((msg.charCodeAt(i8) & 64512) !== 55296) {
      return false;
    }
    if (i8 < 0 || i8 + 1 >= msg.length) {
      return false;
    }
    return (msg.charCodeAt(i8 + 1) & 64512) === 56320;
  }
  function toArray2(msg, enc) {
    if (Array.isArray(msg))
      return msg.slice();
    if (!msg)
      return [];
    var res = [];
    if (typeof msg === "string") {
      if (!enc) {
        var p8 = 0;
        for (var i8 = 0; i8 < msg.length; i8++) {
          var c8 = msg.charCodeAt(i8);
          if (c8 < 128) {
            res[p8++] = c8;
          } else if (c8 < 2048) {
            res[p8++] = c8 >> 6 | 192;
            res[p8++] = c8 & 63 | 128;
          } else if (isSurrogatePair(msg, i8)) {
            c8 = 65536 + ((c8 & 1023) << 10) + (msg.charCodeAt(++i8) & 1023);
            res[p8++] = c8 >> 18 | 240;
            res[p8++] = c8 >> 12 & 63 | 128;
            res[p8++] = c8 >> 6 & 63 | 128;
            res[p8++] = c8 & 63 | 128;
          } else {
            res[p8++] = c8 >> 12 | 224;
            res[p8++] = c8 >> 6 & 63 | 128;
            res[p8++] = c8 & 63 | 128;
          }
        }
      } else if (enc === "hex") {
        msg = msg.replace(/[^a-z0-9]+/ig, "");
        if (msg.length % 2 !== 0)
          msg = "0" + msg;
        for (i8 = 0; i8 < msg.length; i8 += 2)
          res.push(parseInt(msg[i8] + msg[i8 + 1], 16));
      }
    } else {
      for (i8 = 0; i8 < msg.length; i8++)
        res[i8] = msg[i8] | 0;
    }
    return res;
  }
  exports$N$1.toArray = toArray2;
  function toHex(msg) {
    var res = "";
    for (var i8 = 0; i8 < msg.length; i8++)
      res += zero2(msg[i8].toString(16));
    return res;
  }
  exports$N$1.toHex = toHex;
  function htonl(w4) {
    var res = w4 >>> 24 | w4 >>> 8 & 65280 | w4 << 8 & 16711680 | (w4 & 255) << 24;
    return res >>> 0;
  }
  exports$N$1.htonl = htonl;
  function toHex32(msg, endian) {
    var res = "";
    for (var i8 = 0; i8 < msg.length; i8++) {
      var w4 = msg[i8];
      if (endian === "little")
        w4 = htonl(w4);
      res += zero8(w4.toString(16));
    }
    return res;
  }
  exports$N$1.toHex32 = toHex32;
  function zero2(word) {
    if (word.length === 1)
      return "0" + word;
    else
      return word;
  }
  exports$N$1.zero2 = zero2;
  function zero8(word) {
    if (word.length === 7)
      return "0" + word;
    else if (word.length === 6)
      return "00" + word;
    else if (word.length === 5)
      return "000" + word;
    else if (word.length === 4)
      return "0000" + word;
    else if (word.length === 3)
      return "00000" + word;
    else if (word.length === 2)
      return "000000" + word;
    else if (word.length === 1)
      return "0000000" + word;
    else
      return word;
  }
  exports$N$1.zero8 = zero8;
  function join32(msg, start, end, endian) {
    var len = end - start;
    assert2(len % 4 === 0);
    var res = new Array(len / 4);
    for (var i8 = 0, k4 = start; i8 < res.length; i8++, k4 += 4) {
      var w4;
      if (endian === "big")
        w4 = msg[k4] << 24 | msg[k4 + 1] << 16 | msg[k4 + 2] << 8 | msg[k4 + 3];
      else
        w4 = msg[k4 + 3] << 24 | msg[k4 + 2] << 16 | msg[k4 + 1] << 8 | msg[k4];
      res[i8] = w4 >>> 0;
    }
    return res;
  }
  exports$N$1.join32 = join32;
  function split32(msg, endian) {
    var res = new Array(msg.length * 4);
    for (var i8 = 0, k4 = 0; i8 < msg.length; i8++, k4 += 4) {
      var m6 = msg[i8];
      if (endian === "big") {
        res[k4] = m6 >>> 24;
        res[k4 + 1] = m6 >>> 16 & 255;
        res[k4 + 2] = m6 >>> 8 & 255;
        res[k4 + 3] = m6 & 255;
      } else {
        res[k4 + 3] = m6 >>> 24;
        res[k4 + 2] = m6 >>> 16 & 255;
        res[k4 + 1] = m6 >>> 8 & 255;
        res[k4] = m6 & 255;
      }
    }
    return res;
  }
  exports$N$1.split32 = split32;
  function rotr32(w4, b5) {
    return w4 >>> b5 | w4 << 32 - b5;
  }
  exports$N$1.rotr32 = rotr32;
  function rotl32(w4, b5) {
    return w4 << b5 | w4 >>> 32 - b5;
  }
  exports$N$1.rotl32 = rotl32;
  function sum32(a8, b5) {
    return a8 + b5 >>> 0;
  }
  exports$N$1.sum32 = sum32;
  function sum32_3(a8, b5, c8) {
    return a8 + b5 + c8 >>> 0;
  }
  exports$N$1.sum32_3 = sum32_3;
  function sum32_4(a8, b5, c8, d6) {
    return a8 + b5 + c8 + d6 >>> 0;
  }
  exports$N$1.sum32_4 = sum32_4;
  function sum32_5(a8, b5, c8, d6, e11) {
    return a8 + b5 + c8 + d6 + e11 >>> 0;
  }
  exports$N$1.sum32_5 = sum32_5;
  function sum64(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
  }
  exports$N$1.sum64 = sum64;
  function sum64_hi(ah, al, bh, bl) {
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
  }
  exports$N$1.sum64_hi = sum64_hi;
  function sum64_lo(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
  }
  exports$N$1.sum64_lo = sum64_lo;
  function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    var hi = ah + bh + ch + dh + carry;
    return hi >>> 0;
  }
  exports$N$1.sum64_4_hi = sum64_4_hi;
  function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
  }
  exports$N$1.sum64_4_lo = sum64_4_lo;
  function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = lo + el >>> 0;
    carry += lo < el ? 1 : 0;
    var hi = ah + bh + ch + dh + eh + carry;
    return hi >>> 0;
  }
  exports$N$1.sum64_5_hi = sum64_5_hi;
  function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var lo = al + bl + cl + dl + el;
    return lo >>> 0;
  }
  exports$N$1.sum64_5_lo = sum64_5_lo;
  function rotr64_hi(ah, al, num) {
    var r9 = al << 32 - num | ah >>> num;
    return r9 >>> 0;
  }
  exports$N$1.rotr64_hi = rotr64_hi;
  function rotr64_lo(ah, al, num) {
    var r9 = ah << 32 - num | al >>> num;
    return r9 >>> 0;
  }
  exports$N$1.rotr64_lo = rotr64_lo;
  function shr64_hi(ah, al, num) {
    return ah >>> num;
  }
  exports$N$1.shr64_hi = shr64_hi;
  function shr64_lo(ah, al, num) {
    var r9 = ah << 32 - num | al >>> num;
    return r9 >>> 0;
  }
  exports$N$1.shr64_lo = shr64_lo;
  return exports$N$1;
}
function dew$M$1() {
  if (_dewExec$M$1)
    return exports$M$1;
  _dewExec$M$1 = true;
  var utils = dew$N$1();
  var assert2 = dew$1t();
  function BlockHash() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = "big";
    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
  }
  exports$M$1.BlockHash = BlockHash;
  BlockHash.prototype.update = function update(msg, enc) {
    msg = utils.toArray(msg, enc);
    if (!this.pending)
      this.pending = msg;
    else
      this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;
    if (this.pending.length >= this._delta8) {
      msg = this.pending;
      var r9 = msg.length % this._delta8;
      this.pending = msg.slice(msg.length - r9, msg.length);
      if (this.pending.length === 0)
        this.pending = null;
      msg = utils.join32(msg, 0, msg.length - r9, this.endian);
      for (var i8 = 0; i8 < msg.length; i8 += this._delta32)
        this._update(msg, i8, i8 + this._delta32);
    }
    return this;
  };
  BlockHash.prototype.digest = function digest(enc) {
    this.update(this._pad());
    assert2(this.pending === null);
    return this._digest(enc);
  };
  BlockHash.prototype._pad = function pad() {
    var len = this.pendingTotal;
    var bytes = this._delta8;
    var k4 = bytes - (len + this.padLength) % bytes;
    var res = new Array(k4 + this.padLength);
    res[0] = 128;
    for (var i8 = 1; i8 < k4; i8++)
      res[i8] = 0;
    len <<= 3;
    if (this.endian === "big") {
      for (var t8 = 8; t8 < this.padLength; t8++)
        res[i8++] = 0;
      res[i8++] = 0;
      res[i8++] = 0;
      res[i8++] = 0;
      res[i8++] = 0;
      res[i8++] = len >>> 24 & 255;
      res[i8++] = len >>> 16 & 255;
      res[i8++] = len >>> 8 & 255;
      res[i8++] = len & 255;
    } else {
      res[i8++] = len & 255;
      res[i8++] = len >>> 8 & 255;
      res[i8++] = len >>> 16 & 255;
      res[i8++] = len >>> 24 & 255;
      res[i8++] = 0;
      res[i8++] = 0;
      res[i8++] = 0;
      res[i8++] = 0;
      for (t8 = 8; t8 < this.padLength; t8++)
        res[i8++] = 0;
    }
    return res;
  };
  return exports$M$1;
}
function dew$L$1() {
  if (_dewExec$L$1)
    return exports$L$1;
  _dewExec$L$1 = true;
  return exports$L$1;
}
function dew$K$1() {
  if (_dewExec$K$1)
    return exports$K$1;
  _dewExec$K$1 = true;
  var utils = dew$N$1();
  var common = dew$M$1();
  var rotl32 = utils.rotl32;
  var sum32 = utils.sum32;
  var sum32_3 = utils.sum32_3;
  var sum32_4 = utils.sum32_4;
  var BlockHash = common.BlockHash;
  function RIPEMD160() {
    if (!(this instanceof RIPEMD160))
      return new RIPEMD160();
    BlockHash.call(this);
    this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
    this.endian = "little";
  }
  utils.inherits(RIPEMD160, BlockHash);
  exports$K$1.ripemd160 = RIPEMD160;
  RIPEMD160.blockSize = 512;
  RIPEMD160.outSize = 160;
  RIPEMD160.hmacStrength = 192;
  RIPEMD160.padLength = 64;
  RIPEMD160.prototype._update = function update(msg, start) {
    var A4 = this.h[0];
    var B4 = this.h[1];
    var C4 = this.h[2];
    var D4 = this.h[3];
    var E4 = this.h[4];
    var Ah = A4;
    var Bh = B4;
    var Ch = C4;
    var Dh = D4;
    var Eh = E4;
    for (var j4 = 0; j4 < 80; j4++) {
      var T5 = sum32(rotl32(sum32_4(A4, f9(j4, B4, C4, D4), msg[r9[j4] + start], K3(j4)), s7[j4]), E4);
      A4 = E4;
      E4 = D4;
      D4 = rotl32(C4, 10);
      C4 = B4;
      B4 = T5;
      T5 = sum32(rotl32(sum32_4(Ah, f9(79 - j4, Bh, Ch, Dh), msg[rh[j4] + start], Kh(j4)), sh[j4]), Eh);
      Ah = Eh;
      Eh = Dh;
      Dh = rotl32(Ch, 10);
      Ch = Bh;
      Bh = T5;
    }
    T5 = sum32_3(this.h[1], C4, Dh);
    this.h[1] = sum32_3(this.h[2], D4, Eh);
    this.h[2] = sum32_3(this.h[3], E4, Ah);
    this.h[3] = sum32_3(this.h[4], A4, Bh);
    this.h[4] = sum32_3(this.h[0], B4, Ch);
    this.h[0] = T5;
  };
  RIPEMD160.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils.toHex32(this.h, "little");
    else
      return utils.split32(this.h, "little");
  };
  function f9(j4, x4, y6, z5) {
    if (j4 <= 15)
      return x4 ^ y6 ^ z5;
    else if (j4 <= 31)
      return x4 & y6 | ~x4 & z5;
    else if (j4 <= 47)
      return (x4 | ~y6) ^ z5;
    else if (j4 <= 63)
      return x4 & z5 | y6 & ~z5;
    else
      return x4 ^ (y6 | ~z5);
  }
  function K3(j4) {
    if (j4 <= 15)
      return 0;
    else if (j4 <= 31)
      return 1518500249;
    else if (j4 <= 47)
      return 1859775393;
    else if (j4 <= 63)
      return 2400959708;
    else
      return 2840853838;
  }
  function Kh(j4) {
    if (j4 <= 15)
      return 1352829926;
    else if (j4 <= 31)
      return 1548603684;
    else if (j4 <= 47)
      return 1836072691;
    else if (j4 <= 63)
      return 2053994217;
    else
      return 0;
  }
  var r9 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];
  var rh = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];
  var s7 = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];
  var sh = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];
  return exports$K$1;
}
function dew$J$1() {
  if (_dewExec$J$1)
    return exports$J$1;
  _dewExec$J$1 = true;
  var utils = dew$N$1();
  var assert2 = dew$1t();
  function Hmac2(hash, key, enc) {
    if (!(this instanceof Hmac2))
      return new Hmac2(hash, key, enc);
    this.Hash = hash;
    this.blockSize = hash.blockSize / 8;
    this.outSize = hash.outSize / 8;
    this.inner = null;
    this.outer = null;
    this._init(utils.toArray(key, enc));
  }
  exports$J$1 = Hmac2;
  Hmac2.prototype._init = function init2(key) {
    if (key.length > this.blockSize)
      key = new this.Hash().update(key).digest();
    assert2(key.length <= this.blockSize);
    for (var i8 = key.length; i8 < this.blockSize; i8++)
      key.push(0);
    for (i8 = 0; i8 < key.length; i8++)
      key[i8] ^= 54;
    this.inner = new this.Hash().update(key);
    for (i8 = 0; i8 < key.length; i8++)
      key[i8] ^= 106;
    this.outer = new this.Hash().update(key);
  };
  Hmac2.prototype.update = function update(msg, enc) {
    this.inner.update(msg, enc);
    return this;
  };
  Hmac2.prototype.digest = function digest(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
  };
  return exports$J$1;
}
function dew$I$1() {
  if (_dewExec$I$1)
    return exports$I$1;
  _dewExec$I$1 = true;
  var hash = exports$I$1;
  hash.utils = dew$N$1();
  hash.common = dew$M$1();
  hash.sha = dew$L$1();
  hash.ripemd = dew$K$1();
  hash.hmac = dew$J$1();
  hash.sha1 = hash.sha.sha1;
  hash.sha256 = hash.sha.sha256;
  hash.sha224 = hash.sha.sha224;
  hash.sha384 = hash.sha.sha384;
  hash.sha512 = hash.sha.sha512;
  hash.ripemd160 = hash.ripemd.ripemd160;
  return exports$I$1;
}
function dew$H$1() {
  if (_dewExec$H$1)
    return exports$H$1;
  _dewExec$H$1 = true;
  exports$H$1 = {
    doubles: {
      step: 4,
      points: [["e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a", "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"], ["8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508", "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"], ["175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739", "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"], ["363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640", "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"], ["8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c", "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"], ["723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda", "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"], ["eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa", "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"], ["100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0", "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"], ["e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d", "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"], ["feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d", "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"], ["da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1", "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"], ["53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0", "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"], ["8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047", "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"], ["385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862", "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"], ["6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7", "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"], ["3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd", "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"], ["85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83", "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"], ["948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a", "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"], ["6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8", "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"], ["e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d", "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"], ["e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725", "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"], ["213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754", "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"], ["4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c", "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"], ["fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6", "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"], ["76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39", "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"], ["c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891", "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"], ["d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b", "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"], ["b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03", "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"], ["e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d", "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"], ["a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070", "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"], ["90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4", "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"], ["8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da", "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"], ["e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11", "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"], ["8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e", "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"], ["e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41", "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"], ["b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef", "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"], ["d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8", "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"], ["324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d", "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"], ["4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96", "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"], ["9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd", "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"], ["6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5", "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"], ["a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266", "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"], ["7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71", "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"], ["928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac", "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"], ["85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751", "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"], ["ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e", "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"], ["827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241", "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"], ["eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3", "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"], ["e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f", "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"], ["1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19", "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"], ["146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be", "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"], ["fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9", "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"], ["da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2", "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"], ["a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13", "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"], ["174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c", "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"], ["959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba", "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"], ["d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151", "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"], ["64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073", "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"], ["8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458", "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"], ["13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b", "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"], ["bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366", "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"], ["8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa", "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"], ["8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0", "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"], ["dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787", "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"], ["f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e", "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"]]
    },
    naf: {
      wnd: 7,
      points: [["f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9", "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"], ["2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4", "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"], ["5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc", "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"], ["acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe", "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"], ["774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb", "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"], ["f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8", "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"], ["d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e", "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"], ["defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34", "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"], ["2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c", "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"], ["352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5", "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"], ["2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f", "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"], ["9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714", "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"], ["daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729", "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"], ["c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db", "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"], ["6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4", "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"], ["1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5", "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"], ["605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479", "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"], ["62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d", "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"], ["80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f", "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"], ["7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb", "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"], ["d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9", "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"], ["49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963", "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"], ["77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74", "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"], ["f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530", "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"], ["463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b", "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"], ["f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247", "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"], ["caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1", "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"], ["2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120", "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"], ["7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435", "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"], ["754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18", "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"], ["e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8", "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"], ["186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb", "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"], ["df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f", "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"], ["5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143", "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"], ["290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba", "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"], ["af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45", "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"], ["766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a", "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"], ["59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e", "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"], ["f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8", "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"], ["7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c", "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"], ["948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519", "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"], ["7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab", "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"], ["3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca", "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"], ["d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf", "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"], ["1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610", "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"], ["733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4", "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"], ["15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c", "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"], ["a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940", "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"], ["e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980", "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"], ["311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3", "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"], ["34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf", "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"], ["f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63", "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"], ["d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448", "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"], ["32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf", "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"], ["7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5", "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"], ["ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6", "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"], ["16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5", "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"], ["eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99", "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"], ["78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51", "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"], ["494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5", "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"], ["a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5", "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"], ["c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997", "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"], ["841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881", "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"], ["5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5", "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"], ["36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66", "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"], ["336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726", "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"], ["8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede", "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"], ["1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94", "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"], ["85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31", "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"], ["29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51", "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"], ["a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252", "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"], ["4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5", "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"], ["d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b", "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"], ["ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4", "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"], ["af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f", "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"], ["e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889", "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"], ["591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246", "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"], ["11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984", "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"], ["3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a", "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"], ["cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030", "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"], ["c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197", "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"], ["c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593", "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"], ["a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef", "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"], ["347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38", "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"], ["da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a", "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"], ["c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111", "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"], ["4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502", "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"], ["3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea", "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"], ["cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26", "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"], ["b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986", "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"], ["d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e", "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"], ["48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4", "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"], ["dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda", "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"], ["6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859", "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"], ["e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f", "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"], ["eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c", "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"], ["13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942", "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"], ["ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a", "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"], ["b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80", "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"], ["ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d", "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"], ["8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1", "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"], ["52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63", "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"], ["e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352", "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"], ["7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193", "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"], ["5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00", "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"], ["32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58", "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"], ["e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7", "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"], ["8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8", "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"], ["4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e", "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"], ["3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d", "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"], ["674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b", "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"], ["d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f", "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"], ["30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6", "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"], ["be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297", "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"], ["93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a", "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"], ["b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c", "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"], ["d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52", "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"], ["d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb", "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"], ["463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065", "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"], ["7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917", "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"], ["74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9", "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"], ["30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3", "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"], ["9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57", "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"], ["176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66", "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"], ["75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8", "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"], ["809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721", "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"], ["1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180", "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"]]
    }
  };
  return exports$H$1;
}
function dew$G$1() {
  if (_dewExec$G$1)
    return exports$G$1;
  _dewExec$G$1 = true;
  var curves = exports$G$1;
  var hash = dew$I$1();
  var curve = dew$O$1();
  var utils = dew$T$1();
  var assert2 = utils.assert;
  function PresetCurve(options) {
    if (options.type === "short")
      this.curve = new curve.short(options);
    else if (options.type === "edwards")
      this.curve = new curve.edwards(options);
    else
      this.curve = new curve.mont(options);
    this.g = this.curve.g;
    this.n = this.curve.n;
    this.hash = options.hash;
    assert2(this.g.validate(), "Invalid curve");
    assert2(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
  }
  curves.PresetCurve = PresetCurve;
  function defineCurve(name2, options) {
    Object.defineProperty(curves, name2, {
      configurable: true,
      enumerable: true,
      get: function() {
        var curve2 = new PresetCurve(options);
        Object.defineProperty(curves, name2, {
          configurable: true,
          enumerable: true,
          value: curve2
        });
        return curve2;
      }
    });
  }
  defineCurve("p192", {
    type: "short",
    prime: "p192",
    p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
    a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
    b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
    n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
    hash: hash.sha256,
    gRed: false,
    g: ["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012", "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"]
  });
  defineCurve("p224", {
    type: "short",
    prime: "p224",
    p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
    a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
    b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
    n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
    hash: hash.sha256,
    gRed: false,
    g: ["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21", "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"]
  });
  defineCurve("p256", {
    type: "short",
    prime: null,
    p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
    a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
    b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
    n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
    hash: hash.sha256,
    gRed: false,
    g: ["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296", "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"]
  });
  defineCurve("p384", {
    type: "short",
    prime: null,
    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
    a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
    b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
    n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
    hash: hash.sha384,
    gRed: false,
    g: ["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7", "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"]
  });
  defineCurve("p521", {
    type: "short",
    prime: null,
    p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
    a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
    b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
    n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
    hash: hash.sha512,
    gRed: false,
    g: ["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66", "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"]
  });
  defineCurve("curve25519", {
    type: "mont",
    prime: "p25519",
    p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
    a: "76d06",
    b: "1",
    n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
    hash: hash.sha256,
    gRed: false,
    g: ["9"]
  });
  defineCurve("ed25519", {
    type: "edwards",
    prime: "p25519",
    p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
    a: "-1",
    c: "1",
    d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
    n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
    hash: hash.sha256,
    gRed: false,
    g: [
      "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
      "6666666666666666666666666666666666666666666666666666666666666658"
    ]
  });
  var pre;
  try {
    pre = dew$H$1();
  } catch (e11) {
    pre = void 0;
  }
  defineCurve("secp256k1", {
    type: "short",
    prime: "k256",
    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
    a: "0",
    b: "7",
    n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
    h: "1",
    hash: hash.sha256,
    beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
    lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
    basis: [{
      a: "3086d221a7d46bcde86c90e49284eb15",
      b: "-e4437ed6010e88286f547fa90abfe4c3"
    }, {
      a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
      b: "3086d221a7d46bcde86c90e49284eb15"
    }],
    gRed: false,
    g: ["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8", pre]
  });
  return exports$G$1;
}
function dew$F$1() {
  if (_dewExec$F$1)
    return exports$F$1;
  _dewExec$F$1 = true;
  var hash = dew$I$1();
  var utils = dew$U$1();
  var assert2 = dew$1t();
  function HmacDRBG(options) {
    if (!(this instanceof HmacDRBG))
      return new HmacDRBG(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;
    this.outLen = this.hash.outSize;
    this.minEntropy = options.minEntropy || this.hash.hmacStrength;
    this._reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;
    var entropy = utils.toArray(options.entropy, options.entropyEnc || "hex");
    var nonce = utils.toArray(options.nonce, options.nonceEnc || "hex");
    var pers = utils.toArray(options.pers, options.persEnc || "hex");
    assert2(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
    this._init(entropy, nonce, pers);
  }
  exports$F$1 = HmacDRBG;
  HmacDRBG.prototype._init = function init2(entropy, nonce, pers) {
    var seed = entropy.concat(nonce).concat(pers);
    this.K = new Array(this.outLen / 8);
    this.V = new Array(this.outLen / 8);
    for (var i8 = 0; i8 < this.V.length; i8++) {
      this.K[i8] = 0;
      this.V[i8] = 1;
    }
    this._update(seed);
    this._reseed = 1;
    this.reseedInterval = 281474976710656;
  };
  HmacDRBG.prototype._hmac = function hmac() {
    return new hash.hmac(this.hash, this.K);
  };
  HmacDRBG.prototype._update = function update(seed) {
    var kmac = this._hmac().update(this.V).update([0]);
    if (seed)
      kmac = kmac.update(seed);
    this.K = kmac.digest();
    this.V = this._hmac().update(this.V).digest();
    if (!seed)
      return;
    this.K = this._hmac().update(this.V).update([1]).update(seed).digest();
    this.V = this._hmac().update(this.V).digest();
  };
  HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
    if (typeof entropyEnc !== "string") {
      addEnc = add;
      add = entropyEnc;
      entropyEnc = null;
    }
    entropy = utils.toArray(entropy, entropyEnc);
    add = utils.toArray(add, addEnc);
    assert2(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
    this._update(entropy.concat(add || []));
    this._reseed = 1;
  };
  HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
    if (this._reseed > this.reseedInterval)
      throw new Error("Reseed is required");
    if (typeof enc !== "string") {
      addEnc = add;
      add = enc;
      enc = null;
    }
    if (add) {
      add = utils.toArray(add, addEnc || "hex");
      this._update(add);
    }
    var temp = [];
    while (temp.length < len) {
      this.V = this._hmac().update(this.V).digest();
      temp = temp.concat(this.V);
    }
    var res = temp.slice(0, len);
    this._update(add);
    this._reseed++;
    return utils.encode(res, enc);
  };
  return exports$F$1;
}
function dew$E$1() {
  if (_dewExec$E$1)
    return exports$E$1;
  _dewExec$E$1 = true;
  var BN = dew$V$1();
  var utils = dew$T$1();
  var assert2 = utils.assert;
  function KeyPair(ec, options) {
    this.ec = ec;
    this.priv = null;
    this.pub = null;
    if (options.priv)
      this._importPrivate(options.priv, options.privEnc);
    if (options.pub)
      this._importPublic(options.pub, options.pubEnc);
  }
  exports$E$1 = KeyPair;
  KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
    if (pub instanceof KeyPair)
      return pub;
    return new KeyPair(ec, {
      pub,
      pubEnc: enc
    });
  };
  KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
    if (priv instanceof KeyPair)
      return priv;
    return new KeyPair(ec, {
      priv,
      privEnc: enc
    });
  };
  KeyPair.prototype.validate = function validate() {
    var pub = this.getPublic();
    if (pub.isInfinity())
      return {
        result: false,
        reason: "Invalid public key"
      };
    if (!pub.validate())
      return {
        result: false,
        reason: "Public key is not a point"
      };
    if (!pub.mul(this.ec.curve.n).isInfinity())
      return {
        result: false,
        reason: "Public key * N != O"
      };
    return {
      result: true,
      reason: null
    };
  };
  KeyPair.prototype.getPublic = function getPublic(compact, enc) {
    if (typeof compact === "string") {
      enc = compact;
      compact = null;
    }
    if (!this.pub)
      this.pub = this.ec.g.mul(this.priv);
    if (!enc)
      return this.pub;
    return this.pub.encode(enc, compact);
  };
  KeyPair.prototype.getPrivate = function getPrivate(enc) {
    if (enc === "hex")
      return this.priv.toString(16, 2);
    else
      return this.priv;
  };
  KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
    this.priv = new BN(key, enc || 16);
    this.priv = this.priv.umod(this.ec.curve.n);
  };
  KeyPair.prototype._importPublic = function _importPublic(key, enc) {
    if (key.x || key.y) {
      if (this.ec.curve.type === "mont") {
        assert2(key.x, "Need x coordinate");
      } else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") {
        assert2(key.x && key.y, "Need both x and y coordinate");
      }
      this.pub = this.ec.curve.point(key.x, key.y);
      return;
    }
    this.pub = this.ec.curve.decodePoint(key, enc);
  };
  KeyPair.prototype.derive = function derive(pub) {
    if (!pub.validate()) {
      assert2(pub.validate(), "public point not validated");
    }
    return pub.mul(this.priv).getX();
  };
  KeyPair.prototype.sign = function sign(msg, enc, options) {
    return this.ec.sign(msg, this, enc, options);
  };
  KeyPair.prototype.verify = function verify(msg, signature) {
    return this.ec.verify(msg, signature, this);
  };
  KeyPair.prototype.inspect = function inspect3() {
    return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
  };
  return exports$E$1;
}
function dew$D$1() {
  if (_dewExec$D$1)
    return exports$D$1;
  _dewExec$D$1 = true;
  var BN = dew$V$1();
  var utils = dew$T$1();
  var assert2 = utils.assert;
  function Signature(options, enc) {
    if (options instanceof Signature)
      return options;
    if (this._importDER(options, enc))
      return;
    assert2(options.r && options.s, "Signature without r or s");
    this.r = new BN(options.r, 16);
    this.s = new BN(options.s, 16);
    if (options.recoveryParam === void 0)
      this.recoveryParam = null;
    else
      this.recoveryParam = options.recoveryParam;
  }
  exports$D$1 = Signature;
  function Position() {
    this.place = 0;
  }
  function getLength(buf, p8) {
    var initial = buf[p8.place++];
    if (!(initial & 128)) {
      return initial;
    }
    var octetLen = initial & 15;
    if (octetLen === 0 || octetLen > 4) {
      return false;
    }
    var val = 0;
    for (var i8 = 0, off2 = p8.place; i8 < octetLen; i8++, off2++) {
      val <<= 8;
      val |= buf[off2];
      val >>>= 0;
    }
    if (val <= 127) {
      return false;
    }
    p8.place = off2;
    return val;
  }
  function rmPadding(buf) {
    var i8 = 0;
    var len = buf.length - 1;
    while (!buf[i8] && !(buf[i8 + 1] & 128) && i8 < len) {
      i8++;
    }
    if (i8 === 0) {
      return buf;
    }
    return buf.slice(i8);
  }
  Signature.prototype._importDER = function _importDER(data, enc) {
    data = utils.toArray(data, enc);
    var p8 = new Position();
    if (data[p8.place++] !== 48) {
      return false;
    }
    var len = getLength(data, p8);
    if (len === false) {
      return false;
    }
    if (len + p8.place !== data.length) {
      return false;
    }
    if (data[p8.place++] !== 2) {
      return false;
    }
    var rlen = getLength(data, p8);
    if (rlen === false) {
      return false;
    }
    var r9 = data.slice(p8.place, rlen + p8.place);
    p8.place += rlen;
    if (data[p8.place++] !== 2) {
      return false;
    }
    var slen = getLength(data, p8);
    if (slen === false) {
      return false;
    }
    if (data.length !== slen + p8.place) {
      return false;
    }
    var s7 = data.slice(p8.place, slen + p8.place);
    if (r9[0] === 0) {
      if (r9[1] & 128) {
        r9 = r9.slice(1);
      } else {
        return false;
      }
    }
    if (s7[0] === 0) {
      if (s7[1] & 128) {
        s7 = s7.slice(1);
      } else {
        return false;
      }
    }
    this.r = new BN(r9);
    this.s = new BN(s7);
    this.recoveryParam = null;
    return true;
  };
  function constructLength(arr, len) {
    if (len < 128) {
      arr.push(len);
      return;
    }
    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
    arr.push(octets | 128);
    while (--octets) {
      arr.push(len >>> (octets << 3) & 255);
    }
    arr.push(len);
  }
  Signature.prototype.toDER = function toDER(enc) {
    var r9 = this.r.toArray();
    var s7 = this.s.toArray();
    if (r9[0] & 128)
      r9 = [0].concat(r9);
    if (s7[0] & 128)
      s7 = [0].concat(s7);
    r9 = rmPadding(r9);
    s7 = rmPadding(s7);
    while (!s7[0] && !(s7[1] & 128)) {
      s7 = s7.slice(1);
    }
    var arr = [2];
    constructLength(arr, r9.length);
    arr = arr.concat(r9);
    arr.push(2);
    constructLength(arr, s7.length);
    var backHalf = arr.concat(s7);
    var res = [48];
    constructLength(res, backHalf.length);
    res = res.concat(backHalf);
    return utils.encode(res, enc);
  };
  return exports$D$1;
}
function dew$C$1() {
  if (_dewExec$C$1)
    return exports$C$1;
  _dewExec$C$1 = true;
  var BN = dew$V$1();
  var HmacDRBG = dew$F$1();
  var utils = dew$T$1();
  var curves = dew$G$1();
  var rand = dew$10$1();
  var assert2 = utils.assert;
  var KeyPair = dew$E$1();
  var Signature = dew$D$1();
  function EC(options) {
    if (!(this instanceof EC))
      return new EC(options);
    if (typeof options === "string") {
      assert2(Object.prototype.hasOwnProperty.call(curves, options), "Unknown curve " + options);
      options = curves[options];
    }
    if (options instanceof curves.PresetCurve)
      options = {
        curve: options
      };
    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);
    this.hash = options.hash || options.curve.hash;
  }
  exports$C$1 = EC;
  EC.prototype.keyPair = function keyPair(options) {
    return new KeyPair(this, options);
  };
  EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return KeyPair.fromPrivate(this, priv, enc);
  };
  EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return KeyPair.fromPublic(this, pub, enc);
  };
  EC.prototype.genKeyPair = function genKeyPair(options) {
    if (!options)
      options = {};
    var drbg = new HmacDRBG({
      hash: this.hash,
      pers: options.pers,
      persEnc: options.persEnc || "utf8",
      entropy: options.entropy || rand(this.hash.hmacStrength),
      entropyEnc: options.entropy && options.entropyEnc || "utf8",
      nonce: this.n.toArray()
    });
    var bytes = this.n.byteLength();
    var ns2 = this.n.sub(new BN(2));
    for (; ; ) {
      var priv = new BN(drbg.generate(bytes));
      if (priv.cmp(ns2) > 0)
        continue;
      priv.iaddn(1);
      return this.keyFromPrivate(priv);
    }
  };
  EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
    var delta = msg.byteLength() * 8 - this.n.bitLength();
    if (delta > 0)
      msg = msg.ushrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0)
      return msg.sub(this.n);
    else
      return msg;
  };
  EC.prototype.sign = function sign(msg, key, enc, options) {
    if (typeof enc === "object") {
      options = enc;
      enc = null;
    }
    if (!options)
      options = {};
    key = this.keyFromPrivate(key, enc);
    msg = this._truncateToN(new BN(msg, 16));
    var bytes = this.n.byteLength();
    var bkey = key.getPrivate().toArray("be", bytes);
    var nonce = msg.toArray("be", bytes);
    var drbg = new HmacDRBG({
      hash: this.hash,
      entropy: bkey,
      nonce,
      pers: options.pers,
      persEnc: options.persEnc || "utf8"
    });
    var ns1 = this.n.sub(new BN(1));
    for (var iter = 0; ; iter++) {
      var k4 = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
      k4 = this._truncateToN(k4, true);
      if (k4.cmpn(1) <= 0 || k4.cmp(ns1) >= 0)
        continue;
      var kp = this.g.mul(k4);
      if (kp.isInfinity())
        continue;
      var kpX = kp.getX();
      var r9 = kpX.umod(this.n);
      if (r9.cmpn(0) === 0)
        continue;
      var s7 = k4.invm(this.n).mul(r9.mul(key.getPrivate()).iadd(msg));
      s7 = s7.umod(this.n);
      if (s7.cmpn(0) === 0)
        continue;
      var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r9) !== 0 ? 2 : 0);
      if (options.canonical && s7.cmp(this.nh) > 0) {
        s7 = this.n.sub(s7);
        recoveryParam ^= 1;
      }
      return new Signature({
        r: r9,
        s: s7,
        recoveryParam
      });
    }
  };
  EC.prototype.verify = function verify(msg, signature, key, enc) {
    msg = this._truncateToN(new BN(msg, 16));
    key = this.keyFromPublic(key, enc);
    signature = new Signature(signature, "hex");
    var r9 = signature.r;
    var s7 = signature.s;
    if (r9.cmpn(1) < 0 || r9.cmp(this.n) >= 0)
      return false;
    if (s7.cmpn(1) < 0 || s7.cmp(this.n) >= 0)
      return false;
    var sinv = s7.invm(this.n);
    var u1 = sinv.mul(msg).umod(this.n);
    var u22 = sinv.mul(r9).umod(this.n);
    var p8;
    if (!this.curve._maxwellTrick) {
      p8 = this.g.mulAdd(u1, key.getPublic(), u22);
      if (p8.isInfinity())
        return false;
      return p8.getX().umod(this.n).cmp(r9) === 0;
    }
    p8 = this.g.jmulAdd(u1, key.getPublic(), u22);
    if (p8.isInfinity())
      return false;
    return p8.eqXToP(r9);
  };
  EC.prototype.recoverPubKey = function(msg, signature, j4, enc) {
    assert2((3 & j4) === j4, "The recovery param is more than two bits");
    signature = new Signature(signature, enc);
    var n9 = this.n;
    var e11 = new BN(msg);
    var r9 = signature.r;
    var s7 = signature.s;
    var isYOdd = j4 & 1;
    var isSecondKey = j4 >> 1;
    if (r9.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
      throw new Error("Unable to find sencond key candinate");
    if (isSecondKey)
      r9 = this.curve.pointFromX(r9.add(this.curve.n), isYOdd);
    else
      r9 = this.curve.pointFromX(r9, isYOdd);
    var rInv = signature.r.invm(n9);
    var s1 = n9.sub(e11).mul(rInv).umod(n9);
    var s22 = s7.mul(rInv).umod(n9);
    return this.g.mulAdd(s1, r9, s22);
  };
  EC.prototype.getKeyRecoveryParam = function(e11, signature, Q3, enc) {
    signature = new Signature(signature, enc);
    if (signature.recoveryParam !== null)
      return signature.recoveryParam;
    for (var i8 = 0; i8 < 4; i8++) {
      var Qprime;
      try {
        Qprime = this.recoverPubKey(e11, signature, i8);
      } catch (e12) {
        continue;
      }
      if (Qprime.eq(Q3))
        return i8;
    }
    throw new Error("Unable to find valid recovery factor");
  };
  return exports$C$1;
}
function dew$B$1() {
  if (_dewExec$B$1)
    return exports$B$1;
  _dewExec$B$1 = true;
  var utils = dew$T$1();
  var assert2 = utils.assert;
  var parseBytes = utils.parseBytes;
  var cachedProperty = utils.cachedProperty;
  function KeyPair(eddsa, params) {
    this.eddsa = eddsa;
    this._secret = parseBytes(params.secret);
    if (eddsa.isPoint(params.pub))
      this._pub = params.pub;
    else
      this._pubBytes = parseBytes(params.pub);
  }
  KeyPair.fromPublic = function fromPublic(eddsa, pub) {
    if (pub instanceof KeyPair)
      return pub;
    return new KeyPair(eddsa, {
      pub
    });
  };
  KeyPair.fromSecret = function fromSecret(eddsa, secret) {
    if (secret instanceof KeyPair)
      return secret;
    return new KeyPair(eddsa, {
      secret
    });
  };
  KeyPair.prototype.secret = function secret() {
    return this._secret;
  };
  cachedProperty(KeyPair, "pubBytes", function pubBytes() {
    return this.eddsa.encodePoint(this.pub());
  });
  cachedProperty(KeyPair, "pub", function pub() {
    if (this._pubBytes)
      return this.eddsa.decodePoint(this._pubBytes);
    return this.eddsa.g.mul(this.priv());
  });
  cachedProperty(KeyPair, "privBytes", function privBytes() {
    var eddsa = this.eddsa;
    var hash = this.hash();
    var lastIx = eddsa.encodingLength - 1;
    var a8 = hash.slice(0, eddsa.encodingLength);
    a8[0] &= 248;
    a8[lastIx] &= 127;
    a8[lastIx] |= 64;
    return a8;
  });
  cachedProperty(KeyPair, "priv", function priv() {
    return this.eddsa.decodeInt(this.privBytes());
  });
  cachedProperty(KeyPair, "hash", function hash() {
    return this.eddsa.hash().update(this.secret()).digest();
  });
  cachedProperty(KeyPair, "messagePrefix", function messagePrefix() {
    return this.hash().slice(this.eddsa.encodingLength);
  });
  KeyPair.prototype.sign = function sign(message) {
    assert2(this._secret, "KeyPair can only verify");
    return this.eddsa.sign(message, this);
  };
  KeyPair.prototype.verify = function verify(message, sig) {
    return this.eddsa.verify(message, sig, this);
  };
  KeyPair.prototype.getSecret = function getSecret(enc) {
    assert2(this._secret, "KeyPair is public only");
    return utils.encode(this.secret(), enc);
  };
  KeyPair.prototype.getPublic = function getPublic(enc) {
    return utils.encode(this.pubBytes(), enc);
  };
  exports$B$1 = KeyPair;
  return exports$B$1;
}
function dew$A$1() {
  if (_dewExec$A$1)
    return exports$A$1;
  _dewExec$A$1 = true;
  var BN = dew$V$1();
  var utils = dew$T$1();
  var assert2 = utils.assert;
  var cachedProperty = utils.cachedProperty;
  var parseBytes = utils.parseBytes;
  function Signature(eddsa, sig) {
    this.eddsa = eddsa;
    if (typeof sig !== "object")
      sig = parseBytes(sig);
    if (Array.isArray(sig)) {
      sig = {
        R: sig.slice(0, eddsa.encodingLength),
        S: sig.slice(eddsa.encodingLength)
      };
    }
    assert2(sig.R && sig.S, "Signature without R or S");
    if (eddsa.isPoint(sig.R))
      this._R = sig.R;
    if (sig.S instanceof BN)
      this._S = sig.S;
    this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
    this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
  }
  cachedProperty(Signature, "S", function S4() {
    return this.eddsa.decodeInt(this.Sencoded());
  });
  cachedProperty(Signature, "R", function R4() {
    return this.eddsa.decodePoint(this.Rencoded());
  });
  cachedProperty(Signature, "Rencoded", function Rencoded() {
    return this.eddsa.encodePoint(this.R());
  });
  cachedProperty(Signature, "Sencoded", function Sencoded() {
    return this.eddsa.encodeInt(this.S());
  });
  Signature.prototype.toBytes = function toBytes() {
    return this.Rencoded().concat(this.Sencoded());
  };
  Signature.prototype.toHex = function toHex() {
    return utils.encode(this.toBytes(), "hex").toUpperCase();
  };
  exports$A$1 = Signature;
  return exports$A$1;
}
function dew$z$1() {
  if (_dewExec$z$1)
    return exports$z$1;
  _dewExec$z$1 = true;
  var hash = dew$I$1();
  var curves = dew$G$1();
  var utils = dew$T$1();
  var assert2 = utils.assert;
  var parseBytes = utils.parseBytes;
  var KeyPair = dew$B$1();
  var Signature = dew$A$1();
  function EDDSA(curve) {
    assert2(curve === "ed25519", "only tested with ed25519 so far");
    if (!(this instanceof EDDSA))
      return new EDDSA(curve);
    curve = curves[curve].curve;
    this.curve = curve;
    this.g = curve.g;
    this.g.precompute(curve.n.bitLength() + 1);
    this.pointClass = curve.point().constructor;
    this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
    this.hash = hash.sha512;
  }
  exports$z$1 = EDDSA;
  EDDSA.prototype.sign = function sign(message, secret) {
    message = parseBytes(message);
    var key = this.keyFromSecret(secret);
    var r9 = this.hashInt(key.messagePrefix(), message);
    var R4 = this.g.mul(r9);
    var Rencoded = this.encodePoint(R4);
    var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
    var S4 = r9.add(s_).umod(this.curve.n);
    return this.makeSignature({
      R: R4,
      S: S4,
      Rencoded
    });
  };
  EDDSA.prototype.verify = function verify(message, sig, pub) {
    message = parseBytes(message);
    sig = this.makeSignature(sig);
    var key = this.keyFromPublic(pub);
    var h8 = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
    var SG = this.g.mul(sig.S());
    var RplusAh = sig.R().add(key.pub().mul(h8));
    return RplusAh.eq(SG);
  };
  EDDSA.prototype.hashInt = function hashInt() {
    var hash2 = this.hash();
    for (var i8 = 0; i8 < arguments.length; i8++)
      hash2.update(arguments[i8]);
    return utils.intFromLE(hash2.digest()).umod(this.curve.n);
  };
  EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
    return KeyPair.fromPublic(this, pub);
  };
  EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
    return KeyPair.fromSecret(this, secret);
  };
  EDDSA.prototype.makeSignature = function makeSignature(sig) {
    if (sig instanceof Signature)
      return sig;
    return new Signature(this, sig);
  };
  EDDSA.prototype.encodePoint = function encodePoint(point) {
    var enc = point.getY().toArray("le", this.encodingLength);
    enc[this.encodingLength - 1] |= point.getX().isOdd() ? 128 : 0;
    return enc;
  };
  EDDSA.prototype.decodePoint = function decodePoint(bytes) {
    bytes = utils.parseBytes(bytes);
    var lastIx = bytes.length - 1;
    var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~128);
    var xIsOdd = (bytes[lastIx] & 128) !== 0;
    var y6 = utils.intFromLE(normed);
    return this.curve.pointFromY(y6, xIsOdd);
  };
  EDDSA.prototype.encodeInt = function encodeInt(num) {
    return num.toArray("le", this.encodingLength);
  };
  EDDSA.prototype.decodeInt = function decodeInt(bytes) {
    return utils.intFromLE(bytes);
  };
  EDDSA.prototype.isPoint = function isPoint(val) {
    return val instanceof this.pointClass;
  };
  return exports$z$1;
}
function dew$y$1() {
  if (_dewExec$y$1)
    return exports$y$1;
  _dewExec$y$1 = true;
  var elliptic = exports$y$1;
  elliptic.version = _package$1.version;
  elliptic.utils = dew$T$1();
  elliptic.rand = dew$10$1();
  elliptic.curve = dew$O$1();
  elliptic.curves = dew$G$1();
  elliptic.ec = dew$C$1();
  elliptic.eddsa = dew$z$1();
  return exports$y$1;
}
function dew$x$1() {
  if (_dewExec$x$1)
    return module$2$1.exports;
  _dewExec$x$1 = true;
  (function(module3, exports11) {
    function assert2(val, msg) {
      if (!val)
        throw new Error(msg || "Assertion failed");
    }
    function inherits4(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function() {
      };
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }
    function BN(number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }
      (this || _global$5$1).negative = 0;
      (this || _global$5$1).words = null;
      (this || _global$5$1).length = 0;
      (this || _global$5$1).red = null;
      if (number !== null) {
        if (base === "le" || base === "be") {
          endian = base;
          base = 10;
        }
        this._init(number || 0, base || 10, endian || "be");
      }
    }
    if (typeof module3 === "object") {
      module3.exports = BN;
    } else {
      exports11.BN = BN;
    }
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer3;
    try {
      if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
        Buffer3 = window.Buffer;
      } else {
        Buffer3 = e$1$1.Buffer;
      }
    } catch (e11) {
    }
    BN.isBN = function isBN(num) {
      if (num instanceof BN) {
        return true;
      }
      return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
      if (left.cmp(right) > 0)
        return left;
      return right;
    };
    BN.min = function min(left, right) {
      if (left.cmp(right) < 0)
        return left;
      return right;
    };
    BN.prototype._init = function init2(number, base, endian) {
      if (typeof number === "number") {
        return this._initNumber(number, base, endian);
      }
      if (typeof number === "object") {
        return this._initArray(number, base, endian);
      }
      if (base === "hex") {
        base = 16;
      }
      assert2(base === (base | 0) && base >= 2 && base <= 36);
      number = number.toString().replace(/\s+/g, "");
      var start = 0;
      if (number[0] === "-") {
        start++;
        (this || _global$5$1).negative = 1;
      }
      if (start < number.length) {
        if (base === 16) {
          this._parseHex(number, start, endian);
        } else {
          this._parseBase(number, base, start);
          if (endian === "le") {
            this._initArray(this.toArray(), base, endian);
          }
        }
      }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
      if (number < 0) {
        (this || _global$5$1).negative = 1;
        number = -number;
      }
      if (number < 67108864) {
        (this || _global$5$1).words = [number & 67108863];
        (this || _global$5$1).length = 1;
      } else if (number < 4503599627370496) {
        (this || _global$5$1).words = [number & 67108863, number / 67108864 & 67108863];
        (this || _global$5$1).length = 2;
      } else {
        assert2(number < 9007199254740992);
        (this || _global$5$1).words = [number & 67108863, number / 67108864 & 67108863, 1];
        (this || _global$5$1).length = 3;
      }
      if (endian !== "le")
        return;
      this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
      assert2(typeof number.length === "number");
      if (number.length <= 0) {
        (this || _global$5$1).words = [0];
        (this || _global$5$1).length = 1;
        return this || _global$5$1;
      }
      (this || _global$5$1).length = Math.ceil(number.length / 3);
      (this || _global$5$1).words = new Array((this || _global$5$1).length);
      for (var i8 = 0; i8 < (this || _global$5$1).length; i8++) {
        (this || _global$5$1).words[i8] = 0;
      }
      var j4, w4;
      var off2 = 0;
      if (endian === "be") {
        for (i8 = number.length - 1, j4 = 0; i8 >= 0; i8 -= 3) {
          w4 = number[i8] | number[i8 - 1] << 8 | number[i8 - 2] << 16;
          (this || _global$5$1).words[j4] |= w4 << off2 & 67108863;
          (this || _global$5$1).words[j4 + 1] = w4 >>> 26 - off2 & 67108863;
          off2 += 24;
          if (off2 >= 26) {
            off2 -= 26;
            j4++;
          }
        }
      } else if (endian === "le") {
        for (i8 = 0, j4 = 0; i8 < number.length; i8 += 3) {
          w4 = number[i8] | number[i8 + 1] << 8 | number[i8 + 2] << 16;
          (this || _global$5$1).words[j4] |= w4 << off2 & 67108863;
          (this || _global$5$1).words[j4 + 1] = w4 >>> 26 - off2 & 67108863;
          off2 += 24;
          if (off2 >= 26) {
            off2 -= 26;
            j4++;
          }
        }
      }
      return this.strip();
    };
    function parseHex4Bits(string, index) {
      var c8 = string.charCodeAt(index);
      if (c8 >= 65 && c8 <= 70) {
        return c8 - 55;
      } else if (c8 >= 97 && c8 <= 102) {
        return c8 - 87;
      } else {
        return c8 - 48 & 15;
      }
    }
    function parseHexByte(string, lowerBound, index) {
      var r9 = parseHex4Bits(string, index);
      if (index - 1 >= lowerBound) {
        r9 |= parseHex4Bits(string, index - 1) << 4;
      }
      return r9;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
      (this || _global$5$1).length = Math.ceil((number.length - start) / 6);
      (this || _global$5$1).words = new Array((this || _global$5$1).length);
      for (var i8 = 0; i8 < (this || _global$5$1).length; i8++) {
        (this || _global$5$1).words[i8] = 0;
      }
      var off2 = 0;
      var j4 = 0;
      var w4;
      if (endian === "be") {
        for (i8 = number.length - 1; i8 >= start; i8 -= 2) {
          w4 = parseHexByte(number, start, i8) << off2;
          (this || _global$5$1).words[j4] |= w4 & 67108863;
          if (off2 >= 18) {
            off2 -= 18;
            j4 += 1;
            (this || _global$5$1).words[j4] |= w4 >>> 26;
          } else {
            off2 += 8;
          }
        }
      } else {
        var parseLength = number.length - start;
        for (i8 = parseLength % 2 === 0 ? start + 1 : start; i8 < number.length; i8 += 2) {
          w4 = parseHexByte(number, start, i8) << off2;
          (this || _global$5$1).words[j4] |= w4 & 67108863;
          if (off2 >= 18) {
            off2 -= 18;
            j4 += 1;
            (this || _global$5$1).words[j4] |= w4 >>> 26;
          } else {
            off2 += 8;
          }
        }
      }
      this.strip();
    };
    function parseBase(str, start, end, mul) {
      var r9 = 0;
      var len = Math.min(str.length, end);
      for (var i8 = start; i8 < len; i8++) {
        var c8 = str.charCodeAt(i8) - 48;
        r9 *= mul;
        if (c8 >= 49) {
          r9 += c8 - 49 + 10;
        } else if (c8 >= 17) {
          r9 += c8 - 17 + 10;
        } else {
          r9 += c8;
        }
      }
      return r9;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
      (this || _global$5$1).words = [0];
      (this || _global$5$1).length = 1;
      for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
        limbLen++;
      }
      limbLen--;
      limbPow = limbPow / base | 0;
      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;
      var word = 0;
      for (var i8 = start; i8 < end; i8 += limbLen) {
        word = parseBase(number, i8, i8 + limbLen, base);
        this.imuln(limbPow);
        if ((this || _global$5$1).words[0] + word < 67108864) {
          (this || _global$5$1).words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i8, number.length, base);
        for (i8 = 0; i8 < mod; i8++) {
          pow *= base;
        }
        this.imuln(pow);
        if ((this || _global$5$1).words[0] + word < 67108864) {
          (this || _global$5$1).words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
      this.strip();
    };
    BN.prototype.copy = function copy(dest) {
      dest.words = new Array((this || _global$5$1).length);
      for (var i8 = 0; i8 < (this || _global$5$1).length; i8++) {
        dest.words[i8] = (this || _global$5$1).words[i8];
      }
      dest.length = (this || _global$5$1).length;
      dest.negative = (this || _global$5$1).negative;
      dest.red = (this || _global$5$1).red;
    };
    BN.prototype.clone = function clone() {
      var r9 = new BN(null);
      this.copy(r9);
      return r9;
    };
    BN.prototype._expand = function _expand(size) {
      while ((this || _global$5$1).length < size) {
        (this || _global$5$1).words[(this || _global$5$1).length++] = 0;
      }
      return this || _global$5$1;
    };
    BN.prototype.strip = function strip() {
      while ((this || _global$5$1).length > 1 && (this || _global$5$1).words[(this || _global$5$1).length - 1] === 0) {
        (this || _global$5$1).length--;
      }
      return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
      if ((this || _global$5$1).length === 1 && (this || _global$5$1).words[0] === 0) {
        (this || _global$5$1).negative = 0;
      }
      return this || _global$5$1;
    };
    BN.prototype.inspect = function inspect3() {
      return ((this || _global$5$1).red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    var zeros = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"];
    var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
    var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
    BN.prototype.toString = function toString3(base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;
      var out;
      if (base === 16 || base === "hex") {
        out = "";
        var off2 = 0;
        var carry = 0;
        for (var i8 = 0; i8 < (this || _global$5$1).length; i8++) {
          var w4 = (this || _global$5$1).words[i8];
          var word = ((w4 << off2 | carry) & 16777215).toString(16);
          carry = w4 >>> 24 - off2 & 16777215;
          if (carry !== 0 || i8 !== (this || _global$5$1).length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }
          off2 += 2;
          if (off2 >= 26) {
            off2 -= 26;
            i8--;
          }
        }
        if (carry !== 0) {
          out = carry.toString(16) + out;
        }
        while (out.length % padding !== 0) {
          out = "0" + out;
        }
        if ((this || _global$5$1).negative !== 0) {
          out = "-" + out;
        }
        return out;
      }
      if (base === (base | 0) && base >= 2 && base <= 36) {
        var groupSize = groupSizes[base];
        var groupBase = groupBases[base];
        out = "";
        var c8 = this.clone();
        c8.negative = 0;
        while (!c8.isZero()) {
          var r9 = c8.modn(groupBase).toString(base);
          c8 = c8.idivn(groupBase);
          if (!c8.isZero()) {
            out = zeros[groupSize - r9.length] + r9 + out;
          } else {
            out = r9 + out;
          }
        }
        if (this.isZero()) {
          out = "0" + out;
        }
        while (out.length % padding !== 0) {
          out = "0" + out;
        }
        if ((this || _global$5$1).negative !== 0) {
          out = "-" + out;
        }
        return out;
      }
      assert2(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
      var ret = (this || _global$5$1).words[0];
      if ((this || _global$5$1).length === 2) {
        ret += (this || _global$5$1).words[1] * 67108864;
      } else if ((this || _global$5$1).length === 3 && (this || _global$5$1).words[2] === 1) {
        ret += 4503599627370496 + (this || _global$5$1).words[1] * 67108864;
      } else if ((this || _global$5$1).length > 2) {
        assert2(false, "Number can only safely store up to 53 bits");
      }
      return (this || _global$5$1).negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON2() {
      return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
      assert2(typeof Buffer3 !== "undefined");
      return this.toArrayLike(Buffer3, endian, length);
    };
    BN.prototype.toArray = function toArray2(endian, length) {
      return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert2(byteLength <= reqLength, "byte array longer than desired length");
      assert2(reqLength > 0, "Requested array length <= 0");
      this.strip();
      var littleEndian = endian === "le";
      var res = new ArrayType(reqLength);
      var b5, i8;
      var q3 = this.clone();
      if (!littleEndian) {
        for (i8 = 0; i8 < reqLength - byteLength; i8++) {
          res[i8] = 0;
        }
        for (i8 = 0; !q3.isZero(); i8++) {
          b5 = q3.andln(255);
          q3.iushrn(8);
          res[reqLength - i8 - 1] = b5;
        }
      } else {
        for (i8 = 0; !q3.isZero(); i8++) {
          b5 = q3.andln(255);
          q3.iushrn(8);
          res[i8] = b5;
        }
        for (; i8 < reqLength; i8++) {
          res[i8] = 0;
        }
      }
      return res;
    };
    if (Math.clz32) {
      BN.prototype._countBits = function _countBits(w4) {
        return 32 - Math.clz32(w4);
      };
    } else {
      BN.prototype._countBits = function _countBits(w4) {
        var t8 = w4;
        var r9 = 0;
        if (t8 >= 4096) {
          r9 += 13;
          t8 >>>= 13;
        }
        if (t8 >= 64) {
          r9 += 7;
          t8 >>>= 7;
        }
        if (t8 >= 8) {
          r9 += 4;
          t8 >>>= 4;
        }
        if (t8 >= 2) {
          r9 += 2;
          t8 >>>= 2;
        }
        return r9 + t8;
      };
    }
    BN.prototype._zeroBits = function _zeroBits(w4) {
      if (w4 === 0)
        return 26;
      var t8 = w4;
      var r9 = 0;
      if ((t8 & 8191) === 0) {
        r9 += 13;
        t8 >>>= 13;
      }
      if ((t8 & 127) === 0) {
        r9 += 7;
        t8 >>>= 7;
      }
      if ((t8 & 15) === 0) {
        r9 += 4;
        t8 >>>= 4;
      }
      if ((t8 & 3) === 0) {
        r9 += 2;
        t8 >>>= 2;
      }
      if ((t8 & 1) === 0) {
        r9++;
      }
      return r9;
    };
    BN.prototype.bitLength = function bitLength() {
      var w4 = (this || _global$5$1).words[(this || _global$5$1).length - 1];
      var hi = this._countBits(w4);
      return ((this || _global$5$1).length - 1) * 26 + hi;
    };
    function toBitArray(num) {
      var w4 = new Array(num.bitLength());
      for (var bit = 0; bit < w4.length; bit++) {
        var off2 = bit / 26 | 0;
        var wbit = bit % 26;
        w4[bit] = (num.words[off2] & 1 << wbit) >>> wbit;
      }
      return w4;
    }
    BN.prototype.zeroBits = function zeroBits() {
      if (this.isZero())
        return 0;
      var r9 = 0;
      for (var i8 = 0; i8 < (this || _global$5$1).length; i8++) {
        var b5 = this._zeroBits((this || _global$5$1).words[i8]);
        r9 += b5;
        if (b5 !== 26)
          break;
      }
      return r9;
    };
    BN.prototype.byteLength = function byteLength() {
      return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
      if ((this || _global$5$1).negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }
      return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }
      return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
      return (this || _global$5$1).negative !== 0;
    };
    BN.prototype.neg = function neg() {
      return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
      if (!this.isZero()) {
        (this || _global$5$1).negative ^= 1;
      }
      return this || _global$5$1;
    };
    BN.prototype.iuor = function iuor(num) {
      while ((this || _global$5$1).length < num.length) {
        (this || _global$5$1).words[(this || _global$5$1).length++] = 0;
      }
      for (var i8 = 0; i8 < num.length; i8++) {
        (this || _global$5$1).words[i8] = (this || _global$5$1).words[i8] | num.words[i8];
      }
      return this.strip();
    };
    BN.prototype.ior = function ior(num) {
      assert2(((this || _global$5$1).negative | num.negative) === 0);
      return this.iuor(num);
    };
    BN.prototype.or = function or(num) {
      if ((this || _global$5$1).length > num.length)
        return this.clone().ior(num);
      return num.clone().ior(this || _global$5$1);
    };
    BN.prototype.uor = function uor(num) {
      if ((this || _global$5$1).length > num.length)
        return this.clone().iuor(num);
      return num.clone().iuor(this || _global$5$1);
    };
    BN.prototype.iuand = function iuand(num) {
      var b5;
      if ((this || _global$5$1).length > num.length) {
        b5 = num;
      } else {
        b5 = this || _global$5$1;
      }
      for (var i8 = 0; i8 < b5.length; i8++) {
        (this || _global$5$1).words[i8] = (this || _global$5$1).words[i8] & num.words[i8];
      }
      (this || _global$5$1).length = b5.length;
      return this.strip();
    };
    BN.prototype.iand = function iand(num) {
      assert2(((this || _global$5$1).negative | num.negative) === 0);
      return this.iuand(num);
    };
    BN.prototype.and = function and(num) {
      if ((this || _global$5$1).length > num.length)
        return this.clone().iand(num);
      return num.clone().iand(this || _global$5$1);
    };
    BN.prototype.uand = function uand(num) {
      if ((this || _global$5$1).length > num.length)
        return this.clone().iuand(num);
      return num.clone().iuand(this || _global$5$1);
    };
    BN.prototype.iuxor = function iuxor(num) {
      var a8;
      var b5;
      if ((this || _global$5$1).length > num.length) {
        a8 = this || _global$5$1;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$5$1;
      }
      for (var i8 = 0; i8 < b5.length; i8++) {
        (this || _global$5$1).words[i8] = a8.words[i8] ^ b5.words[i8];
      }
      if ((this || _global$5$1) !== a8) {
        for (; i8 < a8.length; i8++) {
          (this || _global$5$1).words[i8] = a8.words[i8];
        }
      }
      (this || _global$5$1).length = a8.length;
      return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
      assert2(((this || _global$5$1).negative | num.negative) === 0);
      return this.iuxor(num);
    };
    BN.prototype.xor = function xor(num) {
      if ((this || _global$5$1).length > num.length)
        return this.clone().ixor(num);
      return num.clone().ixor(this || _global$5$1);
    };
    BN.prototype.uxor = function uxor(num) {
      if ((this || _global$5$1).length > num.length)
        return this.clone().iuxor(num);
      return num.clone().iuxor(this || _global$5$1);
    };
    BN.prototype.inotn = function inotn(width) {
      assert2(typeof width === "number" && width >= 0);
      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;
      this._expand(bytesNeeded);
      if (bitsLeft > 0) {
        bytesNeeded--;
      }
      for (var i8 = 0; i8 < bytesNeeded; i8++) {
        (this || _global$5$1).words[i8] = ~(this || _global$5$1).words[i8] & 67108863;
      }
      if (bitsLeft > 0) {
        (this || _global$5$1).words[i8] = ~(this || _global$5$1).words[i8] & 67108863 >> 26 - bitsLeft;
      }
      return this.strip();
    };
    BN.prototype.notn = function notn(width) {
      return this.clone().inotn(width);
    };
    BN.prototype.setn = function setn(bit, val) {
      assert2(typeof bit === "number" && bit >= 0);
      var off2 = bit / 26 | 0;
      var wbit = bit % 26;
      this._expand(off2 + 1);
      if (val) {
        (this || _global$5$1).words[off2] = (this || _global$5$1).words[off2] | 1 << wbit;
      } else {
        (this || _global$5$1).words[off2] = (this || _global$5$1).words[off2] & ~(1 << wbit);
      }
      return this.strip();
    };
    BN.prototype.iadd = function iadd(num) {
      var r9;
      if ((this || _global$5$1).negative !== 0 && num.negative === 0) {
        (this || _global$5$1).negative = 0;
        r9 = this.isub(num);
        (this || _global$5$1).negative ^= 1;
        return this._normSign();
      } else if ((this || _global$5$1).negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r9 = this.isub(num);
        num.negative = 1;
        return r9._normSign();
      }
      var a8, b5;
      if ((this || _global$5$1).length > num.length) {
        a8 = this || _global$5$1;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$5$1;
      }
      var carry = 0;
      for (var i8 = 0; i8 < b5.length; i8++) {
        r9 = (a8.words[i8] | 0) + (b5.words[i8] | 0) + carry;
        (this || _global$5$1).words[i8] = r9 & 67108863;
        carry = r9 >>> 26;
      }
      for (; carry !== 0 && i8 < a8.length; i8++) {
        r9 = (a8.words[i8] | 0) + carry;
        (this || _global$5$1).words[i8] = r9 & 67108863;
        carry = r9 >>> 26;
      }
      (this || _global$5$1).length = a8.length;
      if (carry !== 0) {
        (this || _global$5$1).words[(this || _global$5$1).length] = carry;
        (this || _global$5$1).length++;
      } else if (a8 !== (this || _global$5$1)) {
        for (; i8 < a8.length; i8++) {
          (this || _global$5$1).words[i8] = a8.words[i8];
        }
      }
      return this || _global$5$1;
    };
    BN.prototype.add = function add(num) {
      var res;
      if (num.negative !== 0 && (this || _global$5$1).negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && (this || _global$5$1).negative !== 0) {
        (this || _global$5$1).negative = 0;
        res = num.sub(this || _global$5$1);
        (this || _global$5$1).negative = 1;
        return res;
      }
      if ((this || _global$5$1).length > num.length)
        return this.clone().iadd(num);
      return num.clone().iadd(this || _global$5$1);
    };
    BN.prototype.isub = function isub(num) {
      if (num.negative !== 0) {
        num.negative = 0;
        var r9 = this.iadd(num);
        num.negative = 1;
        return r9._normSign();
      } else if ((this || _global$5$1).negative !== 0) {
        (this || _global$5$1).negative = 0;
        this.iadd(num);
        (this || _global$5$1).negative = 1;
        return this._normSign();
      }
      var cmp = this.cmp(num);
      if (cmp === 0) {
        (this || _global$5$1).negative = 0;
        (this || _global$5$1).length = 1;
        (this || _global$5$1).words[0] = 0;
        return this || _global$5$1;
      }
      var a8, b5;
      if (cmp > 0) {
        a8 = this || _global$5$1;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$5$1;
      }
      var carry = 0;
      for (var i8 = 0; i8 < b5.length; i8++) {
        r9 = (a8.words[i8] | 0) - (b5.words[i8] | 0) + carry;
        carry = r9 >> 26;
        (this || _global$5$1).words[i8] = r9 & 67108863;
      }
      for (; carry !== 0 && i8 < a8.length; i8++) {
        r9 = (a8.words[i8] | 0) + carry;
        carry = r9 >> 26;
        (this || _global$5$1).words[i8] = r9 & 67108863;
      }
      if (carry === 0 && i8 < a8.length && a8 !== (this || _global$5$1)) {
        for (; i8 < a8.length; i8++) {
          (this || _global$5$1).words[i8] = a8.words[i8];
        }
      }
      (this || _global$5$1).length = Math.max((this || _global$5$1).length, i8);
      if (a8 !== (this || _global$5$1)) {
        (this || _global$5$1).negative = 1;
      }
      return this.strip();
    };
    BN.prototype.sub = function sub(num) {
      return this.clone().isub(num);
    };
    function smallMulTo(self2, num, out) {
      out.negative = num.negative ^ self2.negative;
      var len = self2.length + num.length | 0;
      out.length = len;
      len = len - 1 | 0;
      var a8 = self2.words[0] | 0;
      var b5 = num.words[0] | 0;
      var r9 = a8 * b5;
      var lo = r9 & 67108863;
      var carry = r9 / 67108864 | 0;
      out.words[0] = lo;
      for (var k4 = 1; k4 < len; k4++) {
        var ncarry = carry >>> 26;
        var rword = carry & 67108863;
        var maxJ = Math.min(k4, num.length - 1);
        for (var j4 = Math.max(0, k4 - self2.length + 1); j4 <= maxJ; j4++) {
          var i8 = k4 - j4 | 0;
          a8 = self2.words[i8] | 0;
          b5 = num.words[j4] | 0;
          r9 = a8 * b5 + rword;
          ncarry += r9 / 67108864 | 0;
          rword = r9 & 67108863;
        }
        out.words[k4] = rword | 0;
        carry = ncarry | 0;
      }
      if (carry !== 0) {
        out.words[k4] = carry | 0;
      } else {
        out.length--;
      }
      return out.strip();
    }
    var comb10MulTo = function comb10MulTo2(self2, num, out) {
      var a8 = self2.words;
      var b5 = num.words;
      var o9 = out.words;
      var c8 = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a8[0] | 0;
      var al0 = a0 & 8191;
      var ah0 = a0 >>> 13;
      var a1 = a8[1] | 0;
      var al1 = a1 & 8191;
      var ah1 = a1 >>> 13;
      var a22 = a8[2] | 0;
      var al2 = a22 & 8191;
      var ah2 = a22 >>> 13;
      var a32 = a8[3] | 0;
      var al3 = a32 & 8191;
      var ah3 = a32 >>> 13;
      var a42 = a8[4] | 0;
      var al4 = a42 & 8191;
      var ah4 = a42 >>> 13;
      var a52 = a8[5] | 0;
      var al5 = a52 & 8191;
      var ah5 = a52 >>> 13;
      var a62 = a8[6] | 0;
      var al6 = a62 & 8191;
      var ah6 = a62 >>> 13;
      var a72 = a8[7] | 0;
      var al7 = a72 & 8191;
      var ah7 = a72 >>> 13;
      var a82 = a8[8] | 0;
      var al8 = a82 & 8191;
      var ah8 = a82 >>> 13;
      var a9 = a8[9] | 0;
      var al9 = a9 & 8191;
      var ah9 = a9 >>> 13;
      var b0 = b5[0] | 0;
      var bl0 = b0 & 8191;
      var bh0 = b0 >>> 13;
      var b1 = b5[1] | 0;
      var bl1 = b1 & 8191;
      var bh1 = b1 >>> 13;
      var b22 = b5[2] | 0;
      var bl2 = b22 & 8191;
      var bh2 = b22 >>> 13;
      var b32 = b5[3] | 0;
      var bl3 = b32 & 8191;
      var bh3 = b32 >>> 13;
      var b42 = b5[4] | 0;
      var bl4 = b42 & 8191;
      var bh4 = b42 >>> 13;
      var b52 = b5[5] | 0;
      var bl5 = b52 & 8191;
      var bh5 = b52 >>> 13;
      var b6 = b5[6] | 0;
      var bl6 = b6 & 8191;
      var bh6 = b6 >>> 13;
      var b7 = b5[7] | 0;
      var bl7 = b7 & 8191;
      var bh7 = b7 >>> 13;
      var b8 = b5[8] | 0;
      var bl8 = b8 & 8191;
      var bh8 = b8 >>> 13;
      var b9 = b5[9] | 0;
      var bl9 = b9 & 8191;
      var bh9 = b9 >>> 13;
      out.negative = self2.negative ^ num.negative;
      out.length = 19;
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = mid + Math.imul(ah0, bl0) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
      w0 &= 67108863;
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = mid + Math.imul(ah1, bl0) | 0;
      hi = Math.imul(ah1, bh0);
      lo = lo + Math.imul(al0, bl1) | 0;
      mid = mid + Math.imul(al0, bh1) | 0;
      mid = mid + Math.imul(ah0, bl1) | 0;
      hi = hi + Math.imul(ah0, bh1) | 0;
      var w1 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
      w1 &= 67108863;
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = mid + Math.imul(ah2, bl0) | 0;
      hi = Math.imul(ah2, bh0);
      lo = lo + Math.imul(al1, bl1) | 0;
      mid = mid + Math.imul(al1, bh1) | 0;
      mid = mid + Math.imul(ah1, bl1) | 0;
      hi = hi + Math.imul(ah1, bh1) | 0;
      lo = lo + Math.imul(al0, bl2) | 0;
      mid = mid + Math.imul(al0, bh2) | 0;
      mid = mid + Math.imul(ah0, bl2) | 0;
      hi = hi + Math.imul(ah0, bh2) | 0;
      var w22 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w22 >>> 26) | 0;
      w22 &= 67108863;
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = mid + Math.imul(ah3, bl0) | 0;
      hi = Math.imul(ah3, bh0);
      lo = lo + Math.imul(al2, bl1) | 0;
      mid = mid + Math.imul(al2, bh1) | 0;
      mid = mid + Math.imul(ah2, bl1) | 0;
      hi = hi + Math.imul(ah2, bh1) | 0;
      lo = lo + Math.imul(al1, bl2) | 0;
      mid = mid + Math.imul(al1, bh2) | 0;
      mid = mid + Math.imul(ah1, bl2) | 0;
      hi = hi + Math.imul(ah1, bh2) | 0;
      lo = lo + Math.imul(al0, bl3) | 0;
      mid = mid + Math.imul(al0, bh3) | 0;
      mid = mid + Math.imul(ah0, bl3) | 0;
      hi = hi + Math.imul(ah0, bh3) | 0;
      var w32 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w32 >>> 26) | 0;
      w32 &= 67108863;
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = mid + Math.imul(ah4, bl0) | 0;
      hi = Math.imul(ah4, bh0);
      lo = lo + Math.imul(al3, bl1) | 0;
      mid = mid + Math.imul(al3, bh1) | 0;
      mid = mid + Math.imul(ah3, bl1) | 0;
      hi = hi + Math.imul(ah3, bh1) | 0;
      lo = lo + Math.imul(al2, bl2) | 0;
      mid = mid + Math.imul(al2, bh2) | 0;
      mid = mid + Math.imul(ah2, bl2) | 0;
      hi = hi + Math.imul(ah2, bh2) | 0;
      lo = lo + Math.imul(al1, bl3) | 0;
      mid = mid + Math.imul(al1, bh3) | 0;
      mid = mid + Math.imul(ah1, bl3) | 0;
      hi = hi + Math.imul(ah1, bh3) | 0;
      lo = lo + Math.imul(al0, bl4) | 0;
      mid = mid + Math.imul(al0, bh4) | 0;
      mid = mid + Math.imul(ah0, bl4) | 0;
      hi = hi + Math.imul(ah0, bh4) | 0;
      var w4 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
      w4 &= 67108863;
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = mid + Math.imul(ah5, bl0) | 0;
      hi = Math.imul(ah5, bh0);
      lo = lo + Math.imul(al4, bl1) | 0;
      mid = mid + Math.imul(al4, bh1) | 0;
      mid = mid + Math.imul(ah4, bl1) | 0;
      hi = hi + Math.imul(ah4, bh1) | 0;
      lo = lo + Math.imul(al3, bl2) | 0;
      mid = mid + Math.imul(al3, bh2) | 0;
      mid = mid + Math.imul(ah3, bl2) | 0;
      hi = hi + Math.imul(ah3, bh2) | 0;
      lo = lo + Math.imul(al2, bl3) | 0;
      mid = mid + Math.imul(al2, bh3) | 0;
      mid = mid + Math.imul(ah2, bl3) | 0;
      hi = hi + Math.imul(ah2, bh3) | 0;
      lo = lo + Math.imul(al1, bl4) | 0;
      mid = mid + Math.imul(al1, bh4) | 0;
      mid = mid + Math.imul(ah1, bl4) | 0;
      hi = hi + Math.imul(ah1, bh4) | 0;
      lo = lo + Math.imul(al0, bl5) | 0;
      mid = mid + Math.imul(al0, bh5) | 0;
      mid = mid + Math.imul(ah0, bl5) | 0;
      hi = hi + Math.imul(ah0, bh5) | 0;
      var w5 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
      w5 &= 67108863;
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = mid + Math.imul(ah6, bl0) | 0;
      hi = Math.imul(ah6, bh0);
      lo = lo + Math.imul(al5, bl1) | 0;
      mid = mid + Math.imul(al5, bh1) | 0;
      mid = mid + Math.imul(ah5, bl1) | 0;
      hi = hi + Math.imul(ah5, bh1) | 0;
      lo = lo + Math.imul(al4, bl2) | 0;
      mid = mid + Math.imul(al4, bh2) | 0;
      mid = mid + Math.imul(ah4, bl2) | 0;
      hi = hi + Math.imul(ah4, bh2) | 0;
      lo = lo + Math.imul(al3, bl3) | 0;
      mid = mid + Math.imul(al3, bh3) | 0;
      mid = mid + Math.imul(ah3, bl3) | 0;
      hi = hi + Math.imul(ah3, bh3) | 0;
      lo = lo + Math.imul(al2, bl4) | 0;
      mid = mid + Math.imul(al2, bh4) | 0;
      mid = mid + Math.imul(ah2, bl4) | 0;
      hi = hi + Math.imul(ah2, bh4) | 0;
      lo = lo + Math.imul(al1, bl5) | 0;
      mid = mid + Math.imul(al1, bh5) | 0;
      mid = mid + Math.imul(ah1, bl5) | 0;
      hi = hi + Math.imul(ah1, bh5) | 0;
      lo = lo + Math.imul(al0, bl6) | 0;
      mid = mid + Math.imul(al0, bh6) | 0;
      mid = mid + Math.imul(ah0, bl6) | 0;
      hi = hi + Math.imul(ah0, bh6) | 0;
      var w6 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
      w6 &= 67108863;
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = mid + Math.imul(ah7, bl0) | 0;
      hi = Math.imul(ah7, bh0);
      lo = lo + Math.imul(al6, bl1) | 0;
      mid = mid + Math.imul(al6, bh1) | 0;
      mid = mid + Math.imul(ah6, bl1) | 0;
      hi = hi + Math.imul(ah6, bh1) | 0;
      lo = lo + Math.imul(al5, bl2) | 0;
      mid = mid + Math.imul(al5, bh2) | 0;
      mid = mid + Math.imul(ah5, bl2) | 0;
      hi = hi + Math.imul(ah5, bh2) | 0;
      lo = lo + Math.imul(al4, bl3) | 0;
      mid = mid + Math.imul(al4, bh3) | 0;
      mid = mid + Math.imul(ah4, bl3) | 0;
      hi = hi + Math.imul(ah4, bh3) | 0;
      lo = lo + Math.imul(al3, bl4) | 0;
      mid = mid + Math.imul(al3, bh4) | 0;
      mid = mid + Math.imul(ah3, bl4) | 0;
      hi = hi + Math.imul(ah3, bh4) | 0;
      lo = lo + Math.imul(al2, bl5) | 0;
      mid = mid + Math.imul(al2, bh5) | 0;
      mid = mid + Math.imul(ah2, bl5) | 0;
      hi = hi + Math.imul(ah2, bh5) | 0;
      lo = lo + Math.imul(al1, bl6) | 0;
      mid = mid + Math.imul(al1, bh6) | 0;
      mid = mid + Math.imul(ah1, bl6) | 0;
      hi = hi + Math.imul(ah1, bh6) | 0;
      lo = lo + Math.imul(al0, bl7) | 0;
      mid = mid + Math.imul(al0, bh7) | 0;
      mid = mid + Math.imul(ah0, bl7) | 0;
      hi = hi + Math.imul(ah0, bh7) | 0;
      var w7 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
      w7 &= 67108863;
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = mid + Math.imul(ah8, bl0) | 0;
      hi = Math.imul(ah8, bh0);
      lo = lo + Math.imul(al7, bl1) | 0;
      mid = mid + Math.imul(al7, bh1) | 0;
      mid = mid + Math.imul(ah7, bl1) | 0;
      hi = hi + Math.imul(ah7, bh1) | 0;
      lo = lo + Math.imul(al6, bl2) | 0;
      mid = mid + Math.imul(al6, bh2) | 0;
      mid = mid + Math.imul(ah6, bl2) | 0;
      hi = hi + Math.imul(ah6, bh2) | 0;
      lo = lo + Math.imul(al5, bl3) | 0;
      mid = mid + Math.imul(al5, bh3) | 0;
      mid = mid + Math.imul(ah5, bl3) | 0;
      hi = hi + Math.imul(ah5, bh3) | 0;
      lo = lo + Math.imul(al4, bl4) | 0;
      mid = mid + Math.imul(al4, bh4) | 0;
      mid = mid + Math.imul(ah4, bl4) | 0;
      hi = hi + Math.imul(ah4, bh4) | 0;
      lo = lo + Math.imul(al3, bl5) | 0;
      mid = mid + Math.imul(al3, bh5) | 0;
      mid = mid + Math.imul(ah3, bl5) | 0;
      hi = hi + Math.imul(ah3, bh5) | 0;
      lo = lo + Math.imul(al2, bl6) | 0;
      mid = mid + Math.imul(al2, bh6) | 0;
      mid = mid + Math.imul(ah2, bl6) | 0;
      hi = hi + Math.imul(ah2, bh6) | 0;
      lo = lo + Math.imul(al1, bl7) | 0;
      mid = mid + Math.imul(al1, bh7) | 0;
      mid = mid + Math.imul(ah1, bl7) | 0;
      hi = hi + Math.imul(ah1, bh7) | 0;
      lo = lo + Math.imul(al0, bl8) | 0;
      mid = mid + Math.imul(al0, bh8) | 0;
      mid = mid + Math.imul(ah0, bl8) | 0;
      hi = hi + Math.imul(ah0, bh8) | 0;
      var w8 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
      w8 &= 67108863;
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = mid + Math.imul(ah9, bl0) | 0;
      hi = Math.imul(ah9, bh0);
      lo = lo + Math.imul(al8, bl1) | 0;
      mid = mid + Math.imul(al8, bh1) | 0;
      mid = mid + Math.imul(ah8, bl1) | 0;
      hi = hi + Math.imul(ah8, bh1) | 0;
      lo = lo + Math.imul(al7, bl2) | 0;
      mid = mid + Math.imul(al7, bh2) | 0;
      mid = mid + Math.imul(ah7, bl2) | 0;
      hi = hi + Math.imul(ah7, bh2) | 0;
      lo = lo + Math.imul(al6, bl3) | 0;
      mid = mid + Math.imul(al6, bh3) | 0;
      mid = mid + Math.imul(ah6, bl3) | 0;
      hi = hi + Math.imul(ah6, bh3) | 0;
      lo = lo + Math.imul(al5, bl4) | 0;
      mid = mid + Math.imul(al5, bh4) | 0;
      mid = mid + Math.imul(ah5, bl4) | 0;
      hi = hi + Math.imul(ah5, bh4) | 0;
      lo = lo + Math.imul(al4, bl5) | 0;
      mid = mid + Math.imul(al4, bh5) | 0;
      mid = mid + Math.imul(ah4, bl5) | 0;
      hi = hi + Math.imul(ah4, bh5) | 0;
      lo = lo + Math.imul(al3, bl6) | 0;
      mid = mid + Math.imul(al3, bh6) | 0;
      mid = mid + Math.imul(ah3, bl6) | 0;
      hi = hi + Math.imul(ah3, bh6) | 0;
      lo = lo + Math.imul(al2, bl7) | 0;
      mid = mid + Math.imul(al2, bh7) | 0;
      mid = mid + Math.imul(ah2, bl7) | 0;
      hi = hi + Math.imul(ah2, bh7) | 0;
      lo = lo + Math.imul(al1, bl8) | 0;
      mid = mid + Math.imul(al1, bh8) | 0;
      mid = mid + Math.imul(ah1, bl8) | 0;
      hi = hi + Math.imul(ah1, bh8) | 0;
      lo = lo + Math.imul(al0, bl9) | 0;
      mid = mid + Math.imul(al0, bh9) | 0;
      mid = mid + Math.imul(ah0, bl9) | 0;
      hi = hi + Math.imul(ah0, bh9) | 0;
      var w9 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
      w9 &= 67108863;
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = mid + Math.imul(ah9, bl1) | 0;
      hi = Math.imul(ah9, bh1);
      lo = lo + Math.imul(al8, bl2) | 0;
      mid = mid + Math.imul(al8, bh2) | 0;
      mid = mid + Math.imul(ah8, bl2) | 0;
      hi = hi + Math.imul(ah8, bh2) | 0;
      lo = lo + Math.imul(al7, bl3) | 0;
      mid = mid + Math.imul(al7, bh3) | 0;
      mid = mid + Math.imul(ah7, bl3) | 0;
      hi = hi + Math.imul(ah7, bh3) | 0;
      lo = lo + Math.imul(al6, bl4) | 0;
      mid = mid + Math.imul(al6, bh4) | 0;
      mid = mid + Math.imul(ah6, bl4) | 0;
      hi = hi + Math.imul(ah6, bh4) | 0;
      lo = lo + Math.imul(al5, bl5) | 0;
      mid = mid + Math.imul(al5, bh5) | 0;
      mid = mid + Math.imul(ah5, bl5) | 0;
      hi = hi + Math.imul(ah5, bh5) | 0;
      lo = lo + Math.imul(al4, bl6) | 0;
      mid = mid + Math.imul(al4, bh6) | 0;
      mid = mid + Math.imul(ah4, bl6) | 0;
      hi = hi + Math.imul(ah4, bh6) | 0;
      lo = lo + Math.imul(al3, bl7) | 0;
      mid = mid + Math.imul(al3, bh7) | 0;
      mid = mid + Math.imul(ah3, bl7) | 0;
      hi = hi + Math.imul(ah3, bh7) | 0;
      lo = lo + Math.imul(al2, bl8) | 0;
      mid = mid + Math.imul(al2, bh8) | 0;
      mid = mid + Math.imul(ah2, bl8) | 0;
      hi = hi + Math.imul(ah2, bh8) | 0;
      lo = lo + Math.imul(al1, bl9) | 0;
      mid = mid + Math.imul(al1, bh9) | 0;
      mid = mid + Math.imul(ah1, bl9) | 0;
      hi = hi + Math.imul(ah1, bh9) | 0;
      var w10 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
      w10 &= 67108863;
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = mid + Math.imul(ah9, bl2) | 0;
      hi = Math.imul(ah9, bh2);
      lo = lo + Math.imul(al8, bl3) | 0;
      mid = mid + Math.imul(al8, bh3) | 0;
      mid = mid + Math.imul(ah8, bl3) | 0;
      hi = hi + Math.imul(ah8, bh3) | 0;
      lo = lo + Math.imul(al7, bl4) | 0;
      mid = mid + Math.imul(al7, bh4) | 0;
      mid = mid + Math.imul(ah7, bl4) | 0;
      hi = hi + Math.imul(ah7, bh4) | 0;
      lo = lo + Math.imul(al6, bl5) | 0;
      mid = mid + Math.imul(al6, bh5) | 0;
      mid = mid + Math.imul(ah6, bl5) | 0;
      hi = hi + Math.imul(ah6, bh5) | 0;
      lo = lo + Math.imul(al5, bl6) | 0;
      mid = mid + Math.imul(al5, bh6) | 0;
      mid = mid + Math.imul(ah5, bl6) | 0;
      hi = hi + Math.imul(ah5, bh6) | 0;
      lo = lo + Math.imul(al4, bl7) | 0;
      mid = mid + Math.imul(al4, bh7) | 0;
      mid = mid + Math.imul(ah4, bl7) | 0;
      hi = hi + Math.imul(ah4, bh7) | 0;
      lo = lo + Math.imul(al3, bl8) | 0;
      mid = mid + Math.imul(al3, bh8) | 0;
      mid = mid + Math.imul(ah3, bl8) | 0;
      hi = hi + Math.imul(ah3, bh8) | 0;
      lo = lo + Math.imul(al2, bl9) | 0;
      mid = mid + Math.imul(al2, bh9) | 0;
      mid = mid + Math.imul(ah2, bl9) | 0;
      hi = hi + Math.imul(ah2, bh9) | 0;
      var w11 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
      w11 &= 67108863;
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = mid + Math.imul(ah9, bl3) | 0;
      hi = Math.imul(ah9, bh3);
      lo = lo + Math.imul(al8, bl4) | 0;
      mid = mid + Math.imul(al8, bh4) | 0;
      mid = mid + Math.imul(ah8, bl4) | 0;
      hi = hi + Math.imul(ah8, bh4) | 0;
      lo = lo + Math.imul(al7, bl5) | 0;
      mid = mid + Math.imul(al7, bh5) | 0;
      mid = mid + Math.imul(ah7, bl5) | 0;
      hi = hi + Math.imul(ah7, bh5) | 0;
      lo = lo + Math.imul(al6, bl6) | 0;
      mid = mid + Math.imul(al6, bh6) | 0;
      mid = mid + Math.imul(ah6, bl6) | 0;
      hi = hi + Math.imul(ah6, bh6) | 0;
      lo = lo + Math.imul(al5, bl7) | 0;
      mid = mid + Math.imul(al5, bh7) | 0;
      mid = mid + Math.imul(ah5, bl7) | 0;
      hi = hi + Math.imul(ah5, bh7) | 0;
      lo = lo + Math.imul(al4, bl8) | 0;
      mid = mid + Math.imul(al4, bh8) | 0;
      mid = mid + Math.imul(ah4, bl8) | 0;
      hi = hi + Math.imul(ah4, bh8) | 0;
      lo = lo + Math.imul(al3, bl9) | 0;
      mid = mid + Math.imul(al3, bh9) | 0;
      mid = mid + Math.imul(ah3, bl9) | 0;
      hi = hi + Math.imul(ah3, bh9) | 0;
      var w12 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
      w12 &= 67108863;
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = mid + Math.imul(ah9, bl4) | 0;
      hi = Math.imul(ah9, bh4);
      lo = lo + Math.imul(al8, bl5) | 0;
      mid = mid + Math.imul(al8, bh5) | 0;
      mid = mid + Math.imul(ah8, bl5) | 0;
      hi = hi + Math.imul(ah8, bh5) | 0;
      lo = lo + Math.imul(al7, bl6) | 0;
      mid = mid + Math.imul(al7, bh6) | 0;
      mid = mid + Math.imul(ah7, bl6) | 0;
      hi = hi + Math.imul(ah7, bh6) | 0;
      lo = lo + Math.imul(al6, bl7) | 0;
      mid = mid + Math.imul(al6, bh7) | 0;
      mid = mid + Math.imul(ah6, bl7) | 0;
      hi = hi + Math.imul(ah6, bh7) | 0;
      lo = lo + Math.imul(al5, bl8) | 0;
      mid = mid + Math.imul(al5, bh8) | 0;
      mid = mid + Math.imul(ah5, bl8) | 0;
      hi = hi + Math.imul(ah5, bh8) | 0;
      lo = lo + Math.imul(al4, bl9) | 0;
      mid = mid + Math.imul(al4, bh9) | 0;
      mid = mid + Math.imul(ah4, bl9) | 0;
      hi = hi + Math.imul(ah4, bh9) | 0;
      var w13 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
      w13 &= 67108863;
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = mid + Math.imul(ah9, bl5) | 0;
      hi = Math.imul(ah9, bh5);
      lo = lo + Math.imul(al8, bl6) | 0;
      mid = mid + Math.imul(al8, bh6) | 0;
      mid = mid + Math.imul(ah8, bl6) | 0;
      hi = hi + Math.imul(ah8, bh6) | 0;
      lo = lo + Math.imul(al7, bl7) | 0;
      mid = mid + Math.imul(al7, bh7) | 0;
      mid = mid + Math.imul(ah7, bl7) | 0;
      hi = hi + Math.imul(ah7, bh7) | 0;
      lo = lo + Math.imul(al6, bl8) | 0;
      mid = mid + Math.imul(al6, bh8) | 0;
      mid = mid + Math.imul(ah6, bl8) | 0;
      hi = hi + Math.imul(ah6, bh8) | 0;
      lo = lo + Math.imul(al5, bl9) | 0;
      mid = mid + Math.imul(al5, bh9) | 0;
      mid = mid + Math.imul(ah5, bl9) | 0;
      hi = hi + Math.imul(ah5, bh9) | 0;
      var w14 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
      w14 &= 67108863;
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = mid + Math.imul(ah9, bl6) | 0;
      hi = Math.imul(ah9, bh6);
      lo = lo + Math.imul(al8, bl7) | 0;
      mid = mid + Math.imul(al8, bh7) | 0;
      mid = mid + Math.imul(ah8, bl7) | 0;
      hi = hi + Math.imul(ah8, bh7) | 0;
      lo = lo + Math.imul(al7, bl8) | 0;
      mid = mid + Math.imul(al7, bh8) | 0;
      mid = mid + Math.imul(ah7, bl8) | 0;
      hi = hi + Math.imul(ah7, bh8) | 0;
      lo = lo + Math.imul(al6, bl9) | 0;
      mid = mid + Math.imul(al6, bh9) | 0;
      mid = mid + Math.imul(ah6, bl9) | 0;
      hi = hi + Math.imul(ah6, bh9) | 0;
      var w15 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
      w15 &= 67108863;
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = mid + Math.imul(ah9, bl7) | 0;
      hi = Math.imul(ah9, bh7);
      lo = lo + Math.imul(al8, bl8) | 0;
      mid = mid + Math.imul(al8, bh8) | 0;
      mid = mid + Math.imul(ah8, bl8) | 0;
      hi = hi + Math.imul(ah8, bh8) | 0;
      lo = lo + Math.imul(al7, bl9) | 0;
      mid = mid + Math.imul(al7, bh9) | 0;
      mid = mid + Math.imul(ah7, bl9) | 0;
      hi = hi + Math.imul(ah7, bh9) | 0;
      var w16 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
      w16 &= 67108863;
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = mid + Math.imul(ah9, bl8) | 0;
      hi = Math.imul(ah9, bh8);
      lo = lo + Math.imul(al8, bl9) | 0;
      mid = mid + Math.imul(al8, bh9) | 0;
      mid = mid + Math.imul(ah8, bl9) | 0;
      hi = hi + Math.imul(ah8, bh9) | 0;
      var w17 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
      w17 &= 67108863;
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = mid + Math.imul(ah9, bl9) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
      w18 &= 67108863;
      o9[0] = w0;
      o9[1] = w1;
      o9[2] = w22;
      o9[3] = w32;
      o9[4] = w4;
      o9[5] = w5;
      o9[6] = w6;
      o9[7] = w7;
      o9[8] = w8;
      o9[9] = w9;
      o9[10] = w10;
      o9[11] = w11;
      o9[12] = w12;
      o9[13] = w13;
      o9[14] = w14;
      o9[15] = w15;
      o9[16] = w16;
      o9[17] = w17;
      o9[18] = w18;
      if (c8 !== 0) {
        o9[19] = c8;
        out.length++;
      }
      return out;
    };
    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }
    function bigMulTo(self2, num, out) {
      out.negative = num.negative ^ self2.negative;
      out.length = self2.length + num.length;
      var carry = 0;
      var hncarry = 0;
      for (var k4 = 0; k4 < out.length - 1; k4++) {
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 67108863;
        var maxJ = Math.min(k4, num.length - 1);
        for (var j4 = Math.max(0, k4 - self2.length + 1); j4 <= maxJ; j4++) {
          var i8 = k4 - j4;
          var a8 = self2.words[i8] | 0;
          var b5 = num.words[j4] | 0;
          var r9 = a8 * b5;
          var lo = r9 & 67108863;
          ncarry = ncarry + (r9 / 67108864 | 0) | 0;
          lo = lo + rword | 0;
          rword = lo & 67108863;
          ncarry = ncarry + (lo >>> 26) | 0;
          hncarry += ncarry >>> 26;
          ncarry &= 67108863;
        }
        out.words[k4] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k4] = carry;
      } else {
        out.length--;
      }
      return out.strip();
    }
    function jumboMulTo(self2, num, out) {
      var fftm = new FFTM();
      return fftm.mulp(self2, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
      var res;
      var len = (this || _global$5$1).length + num.length;
      if ((this || _global$5$1).length === 10 && num.length === 10) {
        res = comb10MulTo(this || _global$5$1, num, out);
      } else if (len < 63) {
        res = smallMulTo(this || _global$5$1, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this || _global$5$1, num, out);
      } else {
        res = jumboMulTo(this || _global$5$1, num, out);
      }
      return res;
    };
    function FFTM(x4, y6) {
      (this || _global$5$1).x = x4;
      (this || _global$5$1).y = y6;
    }
    FFTM.prototype.makeRBT = function makeRBT(N4) {
      var t8 = new Array(N4);
      var l8 = BN.prototype._countBits(N4) - 1;
      for (var i8 = 0; i8 < N4; i8++) {
        t8[i8] = this.revBin(i8, l8, N4);
      }
      return t8;
    };
    FFTM.prototype.revBin = function revBin(x4, l8, N4) {
      if (x4 === 0 || x4 === N4 - 1)
        return x4;
      var rb = 0;
      for (var i8 = 0; i8 < l8; i8++) {
        rb |= (x4 & 1) << l8 - i8 - 1;
        x4 >>= 1;
      }
      return rb;
    };
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N4) {
      for (var i8 = 0; i8 < N4; i8++) {
        rtws[i8] = rws[rbt[i8]];
        itws[i8] = iws[rbt[i8]];
      }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N4, rbt) {
      this.permute(rbt, rws, iws, rtws, itws, N4);
      for (var s7 = 1; s7 < N4; s7 <<= 1) {
        var l8 = s7 << 1;
        var rtwdf = Math.cos(2 * Math.PI / l8);
        var itwdf = Math.sin(2 * Math.PI / l8);
        for (var p8 = 0; p8 < N4; p8 += l8) {
          var rtwdf_ = rtwdf;
          var itwdf_ = itwdf;
          for (var j4 = 0; j4 < s7; j4++) {
            var re3 = rtws[p8 + j4];
            var ie2 = itws[p8 + j4];
            var ro = rtws[p8 + j4 + s7];
            var io = itws[p8 + j4 + s7];
            var rx = rtwdf_ * ro - itwdf_ * io;
            io = rtwdf_ * io + itwdf_ * ro;
            ro = rx;
            rtws[p8 + j4] = re3 + ro;
            itws[p8 + j4] = ie2 + io;
            rtws[p8 + j4 + s7] = re3 - ro;
            itws[p8 + j4 + s7] = ie2 - io;
            if (j4 !== l8) {
              rx = rtwdf * rtwdf_ - itwdf * itwdf_;
              itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
              rtwdf_ = rx;
            }
          }
        }
      }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n9, m6) {
      var N4 = Math.max(m6, n9) | 1;
      var odd = N4 & 1;
      var i8 = 0;
      for (N4 = N4 / 2 | 0; N4; N4 = N4 >>> 1) {
        i8++;
      }
      return 1 << i8 + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N4) {
      if (N4 <= 1)
        return;
      for (var i8 = 0; i8 < N4 / 2; i8++) {
        var t8 = rws[i8];
        rws[i8] = rws[N4 - i8 - 1];
        rws[N4 - i8 - 1] = t8;
        t8 = iws[i8];
        iws[i8] = -iws[N4 - i8 - 1];
        iws[N4 - i8 - 1] = -t8;
      }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N4) {
      var carry = 0;
      for (var i8 = 0; i8 < N4 / 2; i8++) {
        var w4 = Math.round(ws[2 * i8 + 1] / N4) * 8192 + Math.round(ws[2 * i8] / N4) + carry;
        ws[i8] = w4 & 67108863;
        if (w4 < 67108864) {
          carry = 0;
        } else {
          carry = w4 / 67108864 | 0;
        }
      }
      return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N4) {
      var carry = 0;
      for (var i8 = 0; i8 < len; i8++) {
        carry = carry + (ws[i8] | 0);
        rws[2 * i8] = carry & 8191;
        carry = carry >>> 13;
        rws[2 * i8 + 1] = carry & 8191;
        carry = carry >>> 13;
      }
      for (i8 = 2 * len; i8 < N4; ++i8) {
        rws[i8] = 0;
      }
      assert2(carry === 0);
      assert2((carry & ~8191) === 0);
    };
    FFTM.prototype.stub = function stub(N4) {
      var ph = new Array(N4);
      for (var i8 = 0; i8 < N4; i8++) {
        ph[i8] = 0;
      }
      return ph;
    };
    FFTM.prototype.mulp = function mulp(x4, y6, out) {
      var N4 = 2 * this.guessLen13b(x4.length, y6.length);
      var rbt = this.makeRBT(N4);
      var _4 = this.stub(N4);
      var rws = new Array(N4);
      var rwst = new Array(N4);
      var iwst = new Array(N4);
      var nrws = new Array(N4);
      var nrwst = new Array(N4);
      var niwst = new Array(N4);
      var rmws = out.words;
      rmws.length = N4;
      this.convert13b(x4.words, x4.length, rws, N4);
      this.convert13b(y6.words, y6.length, nrws, N4);
      this.transform(rws, _4, rwst, iwst, N4, rbt);
      this.transform(nrws, _4, nrwst, niwst, N4, rbt);
      for (var i8 = 0; i8 < N4; i8++) {
        var rx = rwst[i8] * nrwst[i8] - iwst[i8] * niwst[i8];
        iwst[i8] = rwst[i8] * niwst[i8] + iwst[i8] * nrwst[i8];
        rwst[i8] = rx;
      }
      this.conjugate(rwst, iwst, N4);
      this.transform(rwst, iwst, rmws, _4, N4, rbt);
      this.conjugate(rmws, _4, N4);
      this.normalize13b(rmws, N4);
      out.negative = x4.negative ^ y6.negative;
      out.length = x4.length + y6.length;
      return out.strip();
    };
    BN.prototype.mul = function mul(num) {
      var out = new BN(null);
      out.words = new Array((this || _global$5$1).length + num.length);
      return this.mulTo(num, out);
    };
    BN.prototype.mulf = function mulf(num) {
      var out = new BN(null);
      out.words = new Array((this || _global$5$1).length + num.length);
      return jumboMulTo(this || _global$5$1, num, out);
    };
    BN.prototype.imul = function imul(num) {
      return this.clone().mulTo(num, this || _global$5$1);
    };
    BN.prototype.imuln = function imuln(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      var carry = 0;
      for (var i8 = 0; i8 < (this || _global$5$1).length; i8++) {
        var w4 = ((this || _global$5$1).words[i8] | 0) * num;
        var lo = (w4 & 67108863) + (carry & 67108863);
        carry >>= 26;
        carry += w4 / 67108864 | 0;
        carry += lo >>> 26;
        (this || _global$5$1).words[i8] = lo & 67108863;
      }
      if (carry !== 0) {
        (this || _global$5$1).words[i8] = carry;
        (this || _global$5$1).length++;
      }
      return this || _global$5$1;
    };
    BN.prototype.muln = function muln(num) {
      return this.clone().imuln(num);
    };
    BN.prototype.sqr = function sqr() {
      return this.mul(this || _global$5$1);
    };
    BN.prototype.isqr = function isqr() {
      return this.imul(this.clone());
    };
    BN.prototype.pow = function pow(num) {
      var w4 = toBitArray(num);
      if (w4.length === 0)
        return new BN(1);
      var res = this || _global$5$1;
      for (var i8 = 0; i8 < w4.length; i8++, res = res.sqr()) {
        if (w4[i8] !== 0)
          break;
      }
      if (++i8 < w4.length) {
        for (var q3 = res.sqr(); i8 < w4.length; i8++, q3 = q3.sqr()) {
          if (w4[i8] === 0)
            continue;
          res = res.mul(q3);
        }
      }
      return res;
    };
    BN.prototype.iushln = function iushln(bits) {
      assert2(typeof bits === "number" && bits >= 0);
      var r9 = bits % 26;
      var s7 = (bits - r9) / 26;
      var carryMask = 67108863 >>> 26 - r9 << 26 - r9;
      var i8;
      if (r9 !== 0) {
        var carry = 0;
        for (i8 = 0; i8 < (this || _global$5$1).length; i8++) {
          var newCarry = (this || _global$5$1).words[i8] & carryMask;
          var c8 = ((this || _global$5$1).words[i8] | 0) - newCarry << r9;
          (this || _global$5$1).words[i8] = c8 | carry;
          carry = newCarry >>> 26 - r9;
        }
        if (carry) {
          (this || _global$5$1).words[i8] = carry;
          (this || _global$5$1).length++;
        }
      }
      if (s7 !== 0) {
        for (i8 = (this || _global$5$1).length - 1; i8 >= 0; i8--) {
          (this || _global$5$1).words[i8 + s7] = (this || _global$5$1).words[i8];
        }
        for (i8 = 0; i8 < s7; i8++) {
          (this || _global$5$1).words[i8] = 0;
        }
        (this || _global$5$1).length += s7;
      }
      return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
      assert2((this || _global$5$1).negative === 0);
      return this.iushln(bits);
    };
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
      assert2(typeof bits === "number" && bits >= 0);
      var h8;
      if (hint) {
        h8 = (hint - hint % 26) / 26;
      } else {
        h8 = 0;
      }
      var r9 = bits % 26;
      var s7 = Math.min((bits - r9) / 26, (this || _global$5$1).length);
      var mask = 67108863 ^ 67108863 >>> r9 << r9;
      var maskedWords = extended;
      h8 -= s7;
      h8 = Math.max(0, h8);
      if (maskedWords) {
        for (var i8 = 0; i8 < s7; i8++) {
          maskedWords.words[i8] = (this || _global$5$1).words[i8];
        }
        maskedWords.length = s7;
      }
      if (s7 === 0)
        ;
      else if ((this || _global$5$1).length > s7) {
        (this || _global$5$1).length -= s7;
        for (i8 = 0; i8 < (this || _global$5$1).length; i8++) {
          (this || _global$5$1).words[i8] = (this || _global$5$1).words[i8 + s7];
        }
      } else {
        (this || _global$5$1).words[0] = 0;
        (this || _global$5$1).length = 1;
      }
      var carry = 0;
      for (i8 = (this || _global$5$1).length - 1; i8 >= 0 && (carry !== 0 || i8 >= h8); i8--) {
        var word = (this || _global$5$1).words[i8] | 0;
        (this || _global$5$1).words[i8] = carry << 26 - r9 | word >>> r9;
        carry = word & mask;
      }
      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }
      if ((this || _global$5$1).length === 0) {
        (this || _global$5$1).words[0] = 0;
        (this || _global$5$1).length = 1;
      }
      return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
      assert2((this || _global$5$1).negative === 0);
      return this.iushrn(bits, hint, extended);
    };
    BN.prototype.shln = function shln(bits) {
      return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
      return this.clone().iushln(bits);
    };
    BN.prototype.shrn = function shrn(bits) {
      return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
      return this.clone().iushrn(bits);
    };
    BN.prototype.testn = function testn(bit) {
      assert2(typeof bit === "number" && bit >= 0);
      var r9 = bit % 26;
      var s7 = (bit - r9) / 26;
      var q3 = 1 << r9;
      if ((this || _global$5$1).length <= s7)
        return false;
      var w4 = (this || _global$5$1).words[s7];
      return !!(w4 & q3);
    };
    BN.prototype.imaskn = function imaskn(bits) {
      assert2(typeof bits === "number" && bits >= 0);
      var r9 = bits % 26;
      var s7 = (bits - r9) / 26;
      assert2((this || _global$5$1).negative === 0, "imaskn works only with positive numbers");
      if ((this || _global$5$1).length <= s7) {
        return this || _global$5$1;
      }
      if (r9 !== 0) {
        s7++;
      }
      (this || _global$5$1).length = Math.min(s7, (this || _global$5$1).length);
      if (r9 !== 0) {
        var mask = 67108863 ^ 67108863 >>> r9 << r9;
        (this || _global$5$1).words[(this || _global$5$1).length - 1] &= mask;
      }
      return this.strip();
    };
    BN.prototype.maskn = function maskn(bits) {
      return this.clone().imaskn(bits);
    };
    BN.prototype.iaddn = function iaddn(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      if (num < 0)
        return this.isubn(-num);
      if ((this || _global$5$1).negative !== 0) {
        if ((this || _global$5$1).length === 1 && ((this || _global$5$1).words[0] | 0) < num) {
          (this || _global$5$1).words[0] = num - ((this || _global$5$1).words[0] | 0);
          (this || _global$5$1).negative = 0;
          return this || _global$5$1;
        }
        (this || _global$5$1).negative = 0;
        this.isubn(num);
        (this || _global$5$1).negative = 1;
        return this || _global$5$1;
      }
      return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
      (this || _global$5$1).words[0] += num;
      for (var i8 = 0; i8 < (this || _global$5$1).length && (this || _global$5$1).words[i8] >= 67108864; i8++) {
        (this || _global$5$1).words[i8] -= 67108864;
        if (i8 === (this || _global$5$1).length - 1) {
          (this || _global$5$1).words[i8 + 1] = 1;
        } else {
          (this || _global$5$1).words[i8 + 1]++;
        }
      }
      (this || _global$5$1).length = Math.max((this || _global$5$1).length, i8 + 1);
      return this || _global$5$1;
    };
    BN.prototype.isubn = function isubn(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      if (num < 0)
        return this.iaddn(-num);
      if ((this || _global$5$1).negative !== 0) {
        (this || _global$5$1).negative = 0;
        this.iaddn(num);
        (this || _global$5$1).negative = 1;
        return this || _global$5$1;
      }
      (this || _global$5$1).words[0] -= num;
      if ((this || _global$5$1).length === 1 && (this || _global$5$1).words[0] < 0) {
        (this || _global$5$1).words[0] = -(this || _global$5$1).words[0];
        (this || _global$5$1).negative = 1;
      } else {
        for (var i8 = 0; i8 < (this || _global$5$1).length && (this || _global$5$1).words[i8] < 0; i8++) {
          (this || _global$5$1).words[i8] += 67108864;
          (this || _global$5$1).words[i8 + 1] -= 1;
        }
      }
      return this.strip();
    };
    BN.prototype.addn = function addn(num) {
      return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
      return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
      (this || _global$5$1).negative = 0;
      return this || _global$5$1;
    };
    BN.prototype.abs = function abs() {
      return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
      var len = num.length + shift;
      var i8;
      this._expand(len);
      var w4;
      var carry = 0;
      for (i8 = 0; i8 < num.length; i8++) {
        w4 = ((this || _global$5$1).words[i8 + shift] | 0) + carry;
        var right = (num.words[i8] | 0) * mul;
        w4 -= right & 67108863;
        carry = (w4 >> 26) - (right / 67108864 | 0);
        (this || _global$5$1).words[i8 + shift] = w4 & 67108863;
      }
      for (; i8 < (this || _global$5$1).length - shift; i8++) {
        w4 = ((this || _global$5$1).words[i8 + shift] | 0) + carry;
        carry = w4 >> 26;
        (this || _global$5$1).words[i8 + shift] = w4 & 67108863;
      }
      if (carry === 0)
        return this.strip();
      assert2(carry === -1);
      carry = 0;
      for (i8 = 0; i8 < (this || _global$5$1).length; i8++) {
        w4 = -((this || _global$5$1).words[i8] | 0) + carry;
        carry = w4 >> 26;
        (this || _global$5$1).words[i8] = w4 & 67108863;
      }
      (this || _global$5$1).negative = 1;
      return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
      var shift = (this || _global$5$1).length - num.length;
      var a8 = this.clone();
      var b5 = num;
      var bhi = b5.words[b5.length - 1] | 0;
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b5 = b5.ushln(shift);
        a8.iushln(shift);
        bhi = b5.words[b5.length - 1] | 0;
      }
      var m6 = a8.length - b5.length;
      var q3;
      if (mode !== "mod") {
        q3 = new BN(null);
        q3.length = m6 + 1;
        q3.words = new Array(q3.length);
        for (var i8 = 0; i8 < q3.length; i8++) {
          q3.words[i8] = 0;
        }
      }
      var diff = a8.clone()._ishlnsubmul(b5, 1, m6);
      if (diff.negative === 0) {
        a8 = diff;
        if (q3) {
          q3.words[m6] = 1;
        }
      }
      for (var j4 = m6 - 1; j4 >= 0; j4--) {
        var qj = (a8.words[b5.length + j4] | 0) * 67108864 + (a8.words[b5.length + j4 - 1] | 0);
        qj = Math.min(qj / bhi | 0, 67108863);
        a8._ishlnsubmul(b5, qj, j4);
        while (a8.negative !== 0) {
          qj--;
          a8.negative = 0;
          a8._ishlnsubmul(b5, 1, j4);
          if (!a8.isZero()) {
            a8.negative ^= 1;
          }
        }
        if (q3) {
          q3.words[j4] = qj;
        }
      }
      if (q3) {
        q3.strip();
      }
      a8.strip();
      if (mode !== "div" && shift !== 0) {
        a8.iushrn(shift);
      }
      return {
        div: q3 || null,
        mod: a8
      };
    };
    BN.prototype.divmod = function divmod(num, mode, positive) {
      assert2(!num.isZero());
      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }
      var div, mod, res;
      if ((this || _global$5$1).negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);
        if (mode !== "mod") {
          div = res.div.neg();
        }
        if (mode !== "div") {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }
        return {
          div,
          mod
        };
      }
      if ((this || _global$5$1).negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);
        if (mode !== "mod") {
          div = res.div.neg();
        }
        return {
          div,
          mod: res.mod
        };
      }
      if (((this || _global$5$1).negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);
        if (mode !== "div") {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }
        return {
          div: res.div,
          mod
        };
      }
      if (num.length > (this || _global$5$1).length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this || _global$5$1
        };
      }
      if (num.length === 1) {
        if (mode === "div") {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }
        if (mode === "mod") {
          return {
            div: null,
            mod: new BN(this.modn(num.words[0]))
          };
        }
        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modn(num.words[0]))
        };
      }
      return this._wordDiv(num, mode);
    };
    BN.prototype.div = function div(num) {
      return this.divmod(num, "div", false).div;
    };
    BN.prototype.mod = function mod(num) {
      return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
      return this.divmod(num, "mod", true).mod;
    };
    BN.prototype.divRound = function divRound(num) {
      var dm = this.divmod(num);
      if (dm.mod.isZero())
        return dm.div;
      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
      var half = num.ushrn(1);
      var r22 = num.andln(1);
      var cmp = mod.cmp(half);
      if (cmp < 0 || r22 === 1 && cmp === 0)
        return dm.div;
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
      assert2(num <= 67108863);
      var p8 = (1 << 26) % num;
      var acc = 0;
      for (var i8 = (this || _global$5$1).length - 1; i8 >= 0; i8--) {
        acc = (p8 * acc + ((this || _global$5$1).words[i8] | 0)) % num;
      }
      return acc;
    };
    BN.prototype.idivn = function idivn(num) {
      assert2(num <= 67108863);
      var carry = 0;
      for (var i8 = (this || _global$5$1).length - 1; i8 >= 0; i8--) {
        var w4 = ((this || _global$5$1).words[i8] | 0) + carry * 67108864;
        (this || _global$5$1).words[i8] = w4 / num | 0;
        carry = w4 % num;
      }
      return this.strip();
    };
    BN.prototype.divn = function divn(num) {
      return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p8) {
      assert2(p8.negative === 0);
      assert2(!p8.isZero());
      var x4 = this || _global$5$1;
      var y6 = p8.clone();
      if (x4.negative !== 0) {
        x4 = x4.umod(p8);
      } else {
        x4 = x4.clone();
      }
      var A4 = new BN(1);
      var B4 = new BN(0);
      var C4 = new BN(0);
      var D4 = new BN(1);
      var g5 = 0;
      while (x4.isEven() && y6.isEven()) {
        x4.iushrn(1);
        y6.iushrn(1);
        ++g5;
      }
      var yp = y6.clone();
      var xp = x4.clone();
      while (!x4.isZero()) {
        for (var i8 = 0, im = 1; (x4.words[0] & im) === 0 && i8 < 26; ++i8, im <<= 1)
          ;
        if (i8 > 0) {
          x4.iushrn(i8);
          while (i8-- > 0) {
            if (A4.isOdd() || B4.isOdd()) {
              A4.iadd(yp);
              B4.isub(xp);
            }
            A4.iushrn(1);
            B4.iushrn(1);
          }
        }
        for (var j4 = 0, jm = 1; (y6.words[0] & jm) === 0 && j4 < 26; ++j4, jm <<= 1)
          ;
        if (j4 > 0) {
          y6.iushrn(j4);
          while (j4-- > 0) {
            if (C4.isOdd() || D4.isOdd()) {
              C4.iadd(yp);
              D4.isub(xp);
            }
            C4.iushrn(1);
            D4.iushrn(1);
          }
        }
        if (x4.cmp(y6) >= 0) {
          x4.isub(y6);
          A4.isub(C4);
          B4.isub(D4);
        } else {
          y6.isub(x4);
          C4.isub(A4);
          D4.isub(B4);
        }
      }
      return {
        a: C4,
        b: D4,
        gcd: y6.iushln(g5)
      };
    };
    BN.prototype._invmp = function _invmp(p8) {
      assert2(p8.negative === 0);
      assert2(!p8.isZero());
      var a8 = this || _global$5$1;
      var b5 = p8.clone();
      if (a8.negative !== 0) {
        a8 = a8.umod(p8);
      } else {
        a8 = a8.clone();
      }
      var x1 = new BN(1);
      var x22 = new BN(0);
      var delta = b5.clone();
      while (a8.cmpn(1) > 0 && b5.cmpn(1) > 0) {
        for (var i8 = 0, im = 1; (a8.words[0] & im) === 0 && i8 < 26; ++i8, im <<= 1)
          ;
        if (i8 > 0) {
          a8.iushrn(i8);
          while (i8-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }
            x1.iushrn(1);
          }
        }
        for (var j4 = 0, jm = 1; (b5.words[0] & jm) === 0 && j4 < 26; ++j4, jm <<= 1)
          ;
        if (j4 > 0) {
          b5.iushrn(j4);
          while (j4-- > 0) {
            if (x22.isOdd()) {
              x22.iadd(delta);
            }
            x22.iushrn(1);
          }
        }
        if (a8.cmp(b5) >= 0) {
          a8.isub(b5);
          x1.isub(x22);
        } else {
          b5.isub(a8);
          x22.isub(x1);
        }
      }
      var res;
      if (a8.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x22;
      }
      if (res.cmpn(0) < 0) {
        res.iadd(p8);
      }
      return res;
    };
    BN.prototype.gcd = function gcd(num) {
      if (this.isZero())
        return num.abs();
      if (num.isZero())
        return this.abs();
      var a8 = this.clone();
      var b5 = num.clone();
      a8.negative = 0;
      b5.negative = 0;
      for (var shift = 0; a8.isEven() && b5.isEven(); shift++) {
        a8.iushrn(1);
        b5.iushrn(1);
      }
      do {
        while (a8.isEven()) {
          a8.iushrn(1);
        }
        while (b5.isEven()) {
          b5.iushrn(1);
        }
        var r9 = a8.cmp(b5);
        if (r9 < 0) {
          var t8 = a8;
          a8 = b5;
          b5 = t8;
        } else if (r9 === 0 || b5.cmpn(1) === 0) {
          break;
        }
        a8.isub(b5);
      } while (true);
      return b5.iushln(shift);
    };
    BN.prototype.invm = function invm(num) {
      return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
      return ((this || _global$5$1).words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
      return ((this || _global$5$1).words[0] & 1) === 1;
    };
    BN.prototype.andln = function andln(num) {
      return (this || _global$5$1).words[0] & num;
    };
    BN.prototype.bincn = function bincn(bit) {
      assert2(typeof bit === "number");
      var r9 = bit % 26;
      var s7 = (bit - r9) / 26;
      var q3 = 1 << r9;
      if ((this || _global$5$1).length <= s7) {
        this._expand(s7 + 1);
        (this || _global$5$1).words[s7] |= q3;
        return this || _global$5$1;
      }
      var carry = q3;
      for (var i8 = s7; carry !== 0 && i8 < (this || _global$5$1).length; i8++) {
        var w4 = (this || _global$5$1).words[i8] | 0;
        w4 += carry;
        carry = w4 >>> 26;
        w4 &= 67108863;
        (this || _global$5$1).words[i8] = w4;
      }
      if (carry !== 0) {
        (this || _global$5$1).words[i8] = carry;
        (this || _global$5$1).length++;
      }
      return this || _global$5$1;
    };
    BN.prototype.isZero = function isZero() {
      return (this || _global$5$1).length === 1 && (this || _global$5$1).words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
      var negative = num < 0;
      if ((this || _global$5$1).negative !== 0 && !negative)
        return -1;
      if ((this || _global$5$1).negative === 0 && negative)
        return 1;
      this.strip();
      var res;
      if ((this || _global$5$1).length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }
        assert2(num <= 67108863, "Number is too big");
        var w4 = (this || _global$5$1).words[0] | 0;
        res = w4 === num ? 0 : w4 < num ? -1 : 1;
      }
      if ((this || _global$5$1).negative !== 0)
        return -res | 0;
      return res;
    };
    BN.prototype.cmp = function cmp(num) {
      if ((this || _global$5$1).negative !== 0 && num.negative === 0)
        return -1;
      if ((this || _global$5$1).negative === 0 && num.negative !== 0)
        return 1;
      var res = this.ucmp(num);
      if ((this || _global$5$1).negative !== 0)
        return -res | 0;
      return res;
    };
    BN.prototype.ucmp = function ucmp(num) {
      if ((this || _global$5$1).length > num.length)
        return 1;
      if ((this || _global$5$1).length < num.length)
        return -1;
      var res = 0;
      for (var i8 = (this || _global$5$1).length - 1; i8 >= 0; i8--) {
        var a8 = (this || _global$5$1).words[i8] | 0;
        var b5 = num.words[i8] | 0;
        if (a8 === b5)
          continue;
        if (a8 < b5) {
          res = -1;
        } else if (a8 > b5) {
          res = 1;
        }
        break;
      }
      return res;
    };
    BN.prototype.gtn = function gtn(num) {
      return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
      return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
      return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
      return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
      return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
      return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
      return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
      return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
      return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
      return this.cmp(num) === 0;
    };
    BN.red = function red(num) {
      return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
      assert2(!(this || _global$5$1).red, "Already a number in reduction context");
      assert2((this || _global$5$1).negative === 0, "red works only with positives");
      return ctx.convertTo(this || _global$5$1)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
      assert2((this || _global$5$1).red, "fromRed works only with numbers in reduction context");
      return (this || _global$5$1).red.convertFrom(this || _global$5$1);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
      (this || _global$5$1).red = ctx;
      return this || _global$5$1;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
      assert2(!(this || _global$5$1).red, "Already a number in reduction context");
      return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
      assert2((this || _global$5$1).red, "redAdd works only with red numbers");
      return (this || _global$5$1).red.add(this || _global$5$1, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
      assert2((this || _global$5$1).red, "redIAdd works only with red numbers");
      return (this || _global$5$1).red.iadd(this || _global$5$1, num);
    };
    BN.prototype.redSub = function redSub(num) {
      assert2((this || _global$5$1).red, "redSub works only with red numbers");
      return (this || _global$5$1).red.sub(this || _global$5$1, num);
    };
    BN.prototype.redISub = function redISub(num) {
      assert2((this || _global$5$1).red, "redISub works only with red numbers");
      return (this || _global$5$1).red.isub(this || _global$5$1, num);
    };
    BN.prototype.redShl = function redShl(num) {
      assert2((this || _global$5$1).red, "redShl works only with red numbers");
      return (this || _global$5$1).red.shl(this || _global$5$1, num);
    };
    BN.prototype.redMul = function redMul(num) {
      assert2((this || _global$5$1).red, "redMul works only with red numbers");
      (this || _global$5$1).red._verify2(this || _global$5$1, num);
      return (this || _global$5$1).red.mul(this || _global$5$1, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
      assert2((this || _global$5$1).red, "redMul works only with red numbers");
      (this || _global$5$1).red._verify2(this || _global$5$1, num);
      return (this || _global$5$1).red.imul(this || _global$5$1, num);
    };
    BN.prototype.redSqr = function redSqr() {
      assert2((this || _global$5$1).red, "redSqr works only with red numbers");
      (this || _global$5$1).red._verify1(this || _global$5$1);
      return (this || _global$5$1).red.sqr(this || _global$5$1);
    };
    BN.prototype.redISqr = function redISqr() {
      assert2((this || _global$5$1).red, "redISqr works only with red numbers");
      (this || _global$5$1).red._verify1(this || _global$5$1);
      return (this || _global$5$1).red.isqr(this || _global$5$1);
    };
    BN.prototype.redSqrt = function redSqrt() {
      assert2((this || _global$5$1).red, "redSqrt works only with red numbers");
      (this || _global$5$1).red._verify1(this || _global$5$1);
      return (this || _global$5$1).red.sqrt(this || _global$5$1);
    };
    BN.prototype.redInvm = function redInvm() {
      assert2((this || _global$5$1).red, "redInvm works only with red numbers");
      (this || _global$5$1).red._verify1(this || _global$5$1);
      return (this || _global$5$1).red.invm(this || _global$5$1);
    };
    BN.prototype.redNeg = function redNeg() {
      assert2((this || _global$5$1).red, "redNeg works only with red numbers");
      (this || _global$5$1).red._verify1(this || _global$5$1);
      return (this || _global$5$1).red.neg(this || _global$5$1);
    };
    BN.prototype.redPow = function redPow(num) {
      assert2((this || _global$5$1).red && !num.red, "redPow(normalNum)");
      (this || _global$5$1).red._verify1(this || _global$5$1);
      return (this || _global$5$1).red.pow(this || _global$5$1, num);
    };
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };
    function MPrime(name2, p8) {
      (this || _global$5$1).name = name2;
      (this || _global$5$1).p = new BN(p8, 16);
      (this || _global$5$1).n = (this || _global$5$1).p.bitLength();
      (this || _global$5$1).k = new BN(1).iushln((this || _global$5$1).n).isub((this || _global$5$1).p);
      (this || _global$5$1).tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil((this || _global$5$1).n / 13));
      return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
      var r9 = num;
      var rlen;
      do {
        this.split(r9, (this || _global$5$1).tmp);
        r9 = this.imulK(r9);
        r9 = r9.iadd((this || _global$5$1).tmp);
        rlen = r9.bitLength();
      } while (rlen > (this || _global$5$1).n);
      var cmp = rlen < (this || _global$5$1).n ? -1 : r9.ucmp((this || _global$5$1).p);
      if (cmp === 0) {
        r9.words[0] = 0;
        r9.length = 1;
      } else if (cmp > 0) {
        r9.isub((this || _global$5$1).p);
      } else {
        if (r9.strip !== void 0) {
          r9.strip();
        } else {
          r9._strip();
        }
      }
      return r9;
    };
    MPrime.prototype.split = function split(input, out) {
      input.iushrn((this || _global$5$1).n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
      return num.imul((this || _global$5$1).k);
    };
    function K256() {
      MPrime.call(this || _global$5$1, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits4(K256, MPrime);
    K256.prototype.split = function split(input, output) {
      var mask = 4194303;
      var outLen = Math.min(input.length, 9);
      for (var i8 = 0; i8 < outLen; i8++) {
        output.words[i8] = input.words[i8];
      }
      output.length = outLen;
      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }
      var prev = input.words[9];
      output.words[output.length++] = prev & mask;
      for (i8 = 10; i8 < input.length; i8++) {
        var next = input.words[i8] | 0;
        input.words[i8 - 10] = (next & mask) << 4 | prev >>> 22;
        prev = next;
      }
      prev >>>= 22;
      input.words[i8 - 10] = prev;
      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };
    K256.prototype.imulK = function imulK(num) {
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;
      var lo = 0;
      for (var i8 = 0; i8 < num.length; i8++) {
        var w4 = num.words[i8] | 0;
        lo += w4 * 977;
        num.words[i8] = lo & 67108863;
        lo = w4 * 64 + (lo / 67108864 | 0);
      }
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }
      return num;
    };
    function P224() {
      MPrime.call(this || _global$5$1, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits4(P224, MPrime);
    function P192() {
      MPrime.call(this || _global$5$1, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits4(P192, MPrime);
    function P25519() {
      MPrime.call(this || _global$5$1, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits4(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
      var carry = 0;
      for (var i8 = 0; i8 < num.length; i8++) {
        var hi = (num.words[i8] | 0) * 19 + carry;
        var lo = hi & 67108863;
        hi >>>= 26;
        num.words[i8] = lo;
        carry = hi;
      }
      if (carry !== 0) {
        num.words[num.length++] = carry;
      }
      return num;
    };
    BN._prime = function prime(name2) {
      if (primes[name2])
        return primes[name2];
      var prime2;
      if (name2 === "k256") {
        prime2 = new K256();
      } else if (name2 === "p224") {
        prime2 = new P224();
      } else if (name2 === "p192") {
        prime2 = new P192();
      } else if (name2 === "p25519") {
        prime2 = new P25519();
      } else {
        throw new Error("Unknown prime " + name2);
      }
      primes[name2] = prime2;
      return prime2;
    };
    function Red(m6) {
      if (typeof m6 === "string") {
        var prime = BN._prime(m6);
        (this || _global$5$1).m = prime.p;
        (this || _global$5$1).prime = prime;
      } else {
        assert2(m6.gtn(1), "modulus must be greater than 1");
        (this || _global$5$1).m = m6;
        (this || _global$5$1).prime = null;
      }
    }
    Red.prototype._verify1 = function _verify1(a8) {
      assert2(a8.negative === 0, "red works only with positives");
      assert2(a8.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a8, b5) {
      assert2((a8.negative | b5.negative) === 0, "red works only with positives");
      assert2(a8.red && a8.red === b5.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a8) {
      if ((this || _global$5$1).prime)
        return (this || _global$5$1).prime.ireduce(a8)._forceRed(this || _global$5$1);
      return a8.umod((this || _global$5$1).m)._forceRed(this || _global$5$1);
    };
    Red.prototype.neg = function neg(a8) {
      if (a8.isZero()) {
        return a8.clone();
      }
      return (this || _global$5$1).m.sub(a8)._forceRed(this || _global$5$1);
    };
    Red.prototype.add = function add(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.add(b5);
      if (res.cmp((this || _global$5$1).m) >= 0) {
        res.isub((this || _global$5$1).m);
      }
      return res._forceRed(this || _global$5$1);
    };
    Red.prototype.iadd = function iadd(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.iadd(b5);
      if (res.cmp((this || _global$5$1).m) >= 0) {
        res.isub((this || _global$5$1).m);
      }
      return res;
    };
    Red.prototype.sub = function sub(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.sub(b5);
      if (res.cmpn(0) < 0) {
        res.iadd((this || _global$5$1).m);
      }
      return res._forceRed(this || _global$5$1);
    };
    Red.prototype.isub = function isub(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.isub(b5);
      if (res.cmpn(0) < 0) {
        res.iadd((this || _global$5$1).m);
      }
      return res;
    };
    Red.prototype.shl = function shl(a8, num) {
      this._verify1(a8);
      return this.imod(a8.ushln(num));
    };
    Red.prototype.imul = function imul(a8, b5) {
      this._verify2(a8, b5);
      return this.imod(a8.imul(b5));
    };
    Red.prototype.mul = function mul(a8, b5) {
      this._verify2(a8, b5);
      return this.imod(a8.mul(b5));
    };
    Red.prototype.isqr = function isqr(a8) {
      return this.imul(a8, a8.clone());
    };
    Red.prototype.sqr = function sqr(a8) {
      return this.mul(a8, a8);
    };
    Red.prototype.sqrt = function sqrt(a8) {
      if (a8.isZero())
        return a8.clone();
      var mod3 = (this || _global$5$1).m.andln(3);
      assert2(mod3 % 2 === 1);
      if (mod3 === 3) {
        var pow = (this || _global$5$1).m.add(new BN(1)).iushrn(2);
        return this.pow(a8, pow);
      }
      var q3 = (this || _global$5$1).m.subn(1);
      var s7 = 0;
      while (!q3.isZero() && q3.andln(1) === 0) {
        s7++;
        q3.iushrn(1);
      }
      assert2(!q3.isZero());
      var one = new BN(1).toRed(this || _global$5$1);
      var nOne = one.redNeg();
      var lpow = (this || _global$5$1).m.subn(1).iushrn(1);
      var z5 = (this || _global$5$1).m.bitLength();
      z5 = new BN(2 * z5 * z5).toRed(this || _global$5$1);
      while (this.pow(z5, lpow).cmp(nOne) !== 0) {
        z5.redIAdd(nOne);
      }
      var c8 = this.pow(z5, q3);
      var r9 = this.pow(a8, q3.addn(1).iushrn(1));
      var t8 = this.pow(a8, q3);
      var m6 = s7;
      while (t8.cmp(one) !== 0) {
        var tmp = t8;
        for (var i8 = 0; tmp.cmp(one) !== 0; i8++) {
          tmp = tmp.redSqr();
        }
        assert2(i8 < m6);
        var b5 = this.pow(c8, new BN(1).iushln(m6 - i8 - 1));
        r9 = r9.redMul(b5);
        c8 = b5.redSqr();
        t8 = t8.redMul(c8);
        m6 = i8;
      }
      return r9;
    };
    Red.prototype.invm = function invm(a8) {
      var inv = a8._invmp((this || _global$5$1).m);
      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };
    Red.prototype.pow = function pow(a8, num) {
      if (num.isZero())
        return new BN(1).toRed(this || _global$5$1);
      if (num.cmpn(1) === 0)
        return a8.clone();
      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN(1).toRed(this || _global$5$1);
      wnd[1] = a8;
      for (var i8 = 2; i8 < wnd.length; i8++) {
        wnd[i8] = this.mul(wnd[i8 - 1], a8);
      }
      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;
      if (start === 0) {
        start = 26;
      }
      for (i8 = num.length - 1; i8 >= 0; i8--) {
        var word = num.words[i8];
        for (var j4 = start - 1; j4 >= 0; j4--) {
          var bit = word >> j4 & 1;
          if (res !== wnd[0]) {
            res = this.sqr(res);
          }
          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }
          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i8 !== 0 || j4 !== 0))
            continue;
          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }
        start = 26;
      }
      return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
      var r9 = num.umod((this || _global$5$1).m);
      return r9 === num ? r9.clone() : r9;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
      var res = num.clone();
      res.red = null;
      return res;
    };
    BN.mont = function mont(num) {
      return new Mont(num);
    };
    function Mont(m6) {
      Red.call(this || _global$5$1, m6);
      (this || _global$5$1).shift = (this || _global$5$1).m.bitLength();
      if ((this || _global$5$1).shift % 26 !== 0) {
        (this || _global$5$1).shift += 26 - (this || _global$5$1).shift % 26;
      }
      (this || _global$5$1).r = new BN(1).iushln((this || _global$5$1).shift);
      (this || _global$5$1).r2 = this.imod((this || _global$5$1).r.sqr());
      (this || _global$5$1).rinv = (this || _global$5$1).r._invmp((this || _global$5$1).m);
      (this || _global$5$1).minv = (this || _global$5$1).rinv.mul((this || _global$5$1).r).isubn(1).div((this || _global$5$1).m);
      (this || _global$5$1).minv = (this || _global$5$1).minv.umod((this || _global$5$1).r);
      (this || _global$5$1).minv = (this || _global$5$1).r.sub((this || _global$5$1).minv);
    }
    inherits4(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
      return this.imod(num.ushln((this || _global$5$1).shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
      var r9 = this.imod(num.mul((this || _global$5$1).rinv));
      r9.red = null;
      return r9;
    };
    Mont.prototype.imul = function imul(a8, b5) {
      if (a8.isZero() || b5.isZero()) {
        a8.words[0] = 0;
        a8.length = 1;
        return a8;
      }
      var t8 = a8.imul(b5);
      var c8 = t8.maskn((this || _global$5$1).shift).mul((this || _global$5$1).minv).imaskn((this || _global$5$1).shift).mul((this || _global$5$1).m);
      var u8 = t8.isub(c8).iushrn((this || _global$5$1).shift);
      var res = u8;
      if (u8.cmp((this || _global$5$1).m) >= 0) {
        res = u8.isub((this || _global$5$1).m);
      } else if (u8.cmpn(0) < 0) {
        res = u8.iadd((this || _global$5$1).m);
      }
      return res._forceRed(this || _global$5$1);
    };
    Mont.prototype.mul = function mul(a8, b5) {
      if (a8.isZero() || b5.isZero())
        return new BN(0)._forceRed(this || _global$5$1);
      var t8 = a8.mul(b5);
      var c8 = t8.maskn((this || _global$5$1).shift).mul((this || _global$5$1).minv).imaskn((this || _global$5$1).shift).mul((this || _global$5$1).m);
      var u8 = t8.isub(c8).iushrn((this || _global$5$1).shift);
      var res = u8;
      if (u8.cmp((this || _global$5$1).m) >= 0) {
        res = u8.isub((this || _global$5$1).m);
      } else if (u8.cmpn(0) < 0) {
        res = u8.iadd((this || _global$5$1).m);
      }
      return res._forceRed(this || _global$5$1);
    };
    Mont.prototype.invm = function invm(a8) {
      var res = this.imod(a8._invmp((this || _global$5$1).m).mul((this || _global$5$1).r2));
      return res._forceRed(this || _global$5$1);
    };
  })(module$2$1, exports$x$1);
  return module$2$1.exports;
}
function dew$w$1() {
  if (_dewExec$w$1)
    return exports$w$1;
  _dewExec$w$1 = true;
  var process3 = T;
  var buffer2 = e$1$1;
  var Buffer3 = buffer2.Buffer;
  var safer = {};
  var key;
  for (key in buffer2) {
    if (!buffer2.hasOwnProperty(key))
      continue;
    if (key === "SlowBuffer" || key === "Buffer")
      continue;
    safer[key] = buffer2[key];
  }
  var Safer = safer.Buffer = {};
  for (key in Buffer3) {
    if (!Buffer3.hasOwnProperty(key))
      continue;
    if (key === "allocUnsafe" || key === "allocUnsafeSlow")
      continue;
    Safer[key] = Buffer3[key];
  }
  safer.Buffer.prototype = Buffer3.prototype;
  if (!Safer.from || Safer.from === Uint8Array.from) {
    Safer.from = function(value, encodingOrOffset, length) {
      if (typeof value === "number") {
        throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value);
      }
      if (value && typeof value.length === "undefined") {
        throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
      }
      return Buffer3(value, encodingOrOffset, length);
    };
  }
  if (!Safer.alloc) {
    Safer.alloc = function(size, fill, encoding) {
      if (typeof size !== "number") {
        throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size);
      }
      if (size < 0 || size >= 2 * (1 << 30)) {
        throw new RangeError('The value "' + size + '" is invalid for option "size"');
      }
      var buf = Buffer3(size);
      if (!fill || fill.length === 0) {
        buf.fill(0);
      } else if (typeof encoding === "string") {
        buf.fill(fill, encoding);
      } else {
        buf.fill(fill);
      }
      return buf;
    };
  }
  if (!safer.kStringMaxLength) {
    try {
      safer.kStringMaxLength = process3.binding("buffer").kStringMaxLength;
    } catch (e11) {
    }
  }
  if (!safer.constants) {
    safer.constants = {
      MAX_LENGTH: safer.kMaxLength
    };
    if (safer.kStringMaxLength) {
      safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength;
    }
  }
  exports$w$1 = safer;
  return exports$w$1;
}
function dew$v$1() {
  if (_dewExec$v$1)
    return exports$v$1;
  _dewExec$v$1 = true;
  const inherits4 = dew$f$2();
  function Reporter(options) {
    this._reporterState = {
      obj: null,
      path: [],
      options: options || {},
      errors: []
    };
  }
  exports$v$1.Reporter = Reporter;
  Reporter.prototype.isError = function isError3(obj) {
    return obj instanceof ReporterError;
  };
  Reporter.prototype.save = function save() {
    const state = this._reporterState;
    return {
      obj: state.obj,
      pathLen: state.path.length
    };
  };
  Reporter.prototype.restore = function restore(data) {
    const state = this._reporterState;
    state.obj = data.obj;
    state.path = state.path.slice(0, data.pathLen);
  };
  Reporter.prototype.enterKey = function enterKey(key) {
    return this._reporterState.path.push(key);
  };
  Reporter.prototype.exitKey = function exitKey(index) {
    const state = this._reporterState;
    state.path = state.path.slice(0, index - 1);
  };
  Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
    const state = this._reporterState;
    this.exitKey(index);
    if (state.obj !== null)
      state.obj[key] = value;
  };
  Reporter.prototype.path = function path2() {
    return this._reporterState.path.join("/");
  };
  Reporter.prototype.enterObject = function enterObject() {
    const state = this._reporterState;
    const prev = state.obj;
    state.obj = {};
    return prev;
  };
  Reporter.prototype.leaveObject = function leaveObject(prev) {
    const state = this._reporterState;
    const now = state.obj;
    state.obj = prev;
    return now;
  };
  Reporter.prototype.error = function error(msg) {
    let err;
    const state = this._reporterState;
    const inherited = msg instanceof ReporterError;
    if (inherited) {
      err = msg;
    } else {
      err = new ReporterError(state.path.map(function(elem) {
        return "[" + JSON.stringify(elem) + "]";
      }).join(""), msg.message || msg, msg.stack);
    }
    if (!state.options.partial)
      throw err;
    if (!inherited)
      state.errors.push(err);
    return err;
  };
  Reporter.prototype.wrapResult = function wrapResult(result) {
    const state = this._reporterState;
    if (!state.options.partial)
      return result;
    return {
      result: this.isError(result) ? null : result,
      errors: state.errors
    };
  };
  function ReporterError(path2, msg) {
    this.path = path2;
    this.rethrow(msg);
  }
  inherits4(ReporterError, Error);
  ReporterError.prototype.rethrow = function rethrow(msg) {
    this.message = msg + " at: " + (this.path || "(shallow)");
    if (Error.captureStackTrace)
      Error.captureStackTrace(this, ReporterError);
    if (!this.stack) {
      try {
        throw new Error(this.message);
      } catch (e11) {
        this.stack = e11.stack;
      }
    }
    return this;
  };
  return exports$v$1;
}
function dew$u$1() {
  if (_dewExec$u$1)
    return exports$u$1;
  _dewExec$u$1 = true;
  const inherits4 = dew$f$2();
  const Reporter = dew$v$1().Reporter;
  const Buffer3 = dew$w$1().Buffer;
  function DecoderBuffer(base, options) {
    Reporter.call(this, options);
    if (!Buffer3.isBuffer(base)) {
      this.error("Input not Buffer");
      return;
    }
    this.base = base;
    this.offset = 0;
    this.length = base.length;
  }
  inherits4(DecoderBuffer, Reporter);
  exports$u$1.DecoderBuffer = DecoderBuffer;
  DecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {
    if (data instanceof DecoderBuffer) {
      return true;
    }
    const isCompatible = typeof data === "object" && Buffer3.isBuffer(data.base) && data.constructor.name === "DecoderBuffer" && typeof data.offset === "number" && typeof data.length === "number" && typeof data.save === "function" && typeof data.restore === "function" && typeof data.isEmpty === "function" && typeof data.readUInt8 === "function" && typeof data.skip === "function" && typeof data.raw === "function";
    return isCompatible;
  };
  DecoderBuffer.prototype.save = function save() {
    return {
      offset: this.offset,
      reporter: Reporter.prototype.save.call(this)
    };
  };
  DecoderBuffer.prototype.restore = function restore(save) {
    const res = new DecoderBuffer(this.base);
    res.offset = save.offset;
    res.length = this.offset;
    this.offset = save.offset;
    Reporter.prototype.restore.call(this, save.reporter);
    return res;
  };
  DecoderBuffer.prototype.isEmpty = function isEmpty() {
    return this.offset === this.length;
  };
  DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
    if (this.offset + 1 <= this.length)
      return this.base.readUInt8(this.offset++, true);
    else
      return this.error(fail || "DecoderBuffer overrun");
  };
  DecoderBuffer.prototype.skip = function skip(bytes, fail) {
    if (!(this.offset + bytes <= this.length))
      return this.error(fail || "DecoderBuffer overrun");
    const res = new DecoderBuffer(this.base);
    res._reporterState = this._reporterState;
    res.offset = this.offset;
    res.length = this.offset + bytes;
    this.offset += bytes;
    return res;
  };
  DecoderBuffer.prototype.raw = function raw(save) {
    return this.base.slice(save ? save.offset : this.offset, this.length);
  };
  function EncoderBuffer(value, reporter) {
    if (Array.isArray(value)) {
      this.length = 0;
      this.value = value.map(function(item) {
        if (!EncoderBuffer.isEncoderBuffer(item))
          item = new EncoderBuffer(item, reporter);
        this.length += item.length;
        return item;
      }, this);
    } else if (typeof value === "number") {
      if (!(0 <= value && value <= 255))
        return reporter.error("non-byte EncoderBuffer value");
      this.value = value;
      this.length = 1;
    } else if (typeof value === "string") {
      this.value = value;
      this.length = Buffer3.byteLength(value);
    } else if (Buffer3.isBuffer(value)) {
      this.value = value;
      this.length = value.length;
    } else {
      return reporter.error("Unsupported type: " + typeof value);
    }
  }
  exports$u$1.EncoderBuffer = EncoderBuffer;
  EncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {
    if (data instanceof EncoderBuffer) {
      return true;
    }
    const isCompatible = typeof data === "object" && data.constructor.name === "EncoderBuffer" && typeof data.length === "number" && typeof data.join === "function";
    return isCompatible;
  };
  EncoderBuffer.prototype.join = function join(out, offset) {
    if (!out)
      out = Buffer3.alloc(this.length);
    if (!offset)
      offset = 0;
    if (this.length === 0)
      return out;
    if (Array.isArray(this.value)) {
      this.value.forEach(function(item) {
        item.join(out, offset);
        offset += item.length;
      });
    } else {
      if (typeof this.value === "number")
        out[offset] = this.value;
      else if (typeof this.value === "string")
        out.write(this.value, offset);
      else if (Buffer3.isBuffer(this.value))
        this.value.copy(out, offset);
      offset += this.length;
    }
    return out;
  };
  return exports$u$1;
}
function dew$t$1() {
  if (_dewExec$t$1)
    return exports$t$1;
  _dewExec$t$1 = true;
  const Reporter = dew$v$1().Reporter;
  const EncoderBuffer = dew$u$1().EncoderBuffer;
  const DecoderBuffer = dew$u$1().DecoderBuffer;
  const assert2 = dew$1t();
  const tags = ["seq", "seqof", "set", "setof", "objid", "bool", "gentime", "utctime", "null_", "enum", "int", "objDesc", "bitstr", "bmpstr", "charstr", "genstr", "graphstr", "ia5str", "iso646str", "numstr", "octstr", "printstr", "t61str", "unistr", "utf8str", "videostr"];
  const methods = ["key", "obj", "use", "optional", "explicit", "implicit", "def", "choice", "any", "contains"].concat(tags);
  const overrided = ["_peekTag", "_decodeTag", "_use", "_decodeStr", "_decodeObjid", "_decodeTime", "_decodeNull", "_decodeInt", "_decodeBool", "_decodeList", "_encodeComposite", "_encodeStr", "_encodeObjid", "_encodeTime", "_encodeNull", "_encodeInt", "_encodeBool"];
  function Node(enc, parent, name2) {
    const state = {};
    this._baseState = state;
    state.name = name2;
    state.enc = enc;
    state.parent = parent || null;
    state.children = null;
    state.tag = null;
    state.args = null;
    state.reverseArgs = null;
    state.choice = null;
    state.optional = false;
    state.any = false;
    state.obj = false;
    state.use = null;
    state.useDecoder = null;
    state.key = null;
    state["default"] = null;
    state.explicit = null;
    state.implicit = null;
    state.contains = null;
    if (!state.parent) {
      state.children = [];
      this._wrap();
    }
  }
  exports$t$1 = Node;
  const stateProps = ["enc", "parent", "children", "tag", "args", "reverseArgs", "choice", "optional", "any", "obj", "use", "alteredUse", "key", "default", "explicit", "implicit", "contains"];
  Node.prototype.clone = function clone() {
    const state = this._baseState;
    const cstate = {};
    stateProps.forEach(function(prop) {
      cstate[prop] = state[prop];
    });
    const res = new this.constructor(cstate.parent);
    res._baseState = cstate;
    return res;
  };
  Node.prototype._wrap = function wrap() {
    const state = this._baseState;
    methods.forEach(function(method) {
      this[method] = function _wrappedMethod() {
        const clone = new this.constructor(this);
        state.children.push(clone);
        return clone[method].apply(clone, arguments);
      };
    }, this);
  };
  Node.prototype._init = function init2(body) {
    const state = this._baseState;
    assert2(state.parent === null);
    body.call(this);
    state.children = state.children.filter(function(child) {
      return child._baseState.parent === this;
    }, this);
    assert2.equal(state.children.length, 1, "Root node can have only one child");
  };
  Node.prototype._useArgs = function useArgs(args) {
    const state = this._baseState;
    const children = args.filter(function(arg) {
      return arg instanceof this.constructor;
    }, this);
    args = args.filter(function(arg) {
      return !(arg instanceof this.constructor);
    }, this);
    if (children.length !== 0) {
      assert2(state.children === null);
      state.children = children;
      children.forEach(function(child) {
        child._baseState.parent = this;
      }, this);
    }
    if (args.length !== 0) {
      assert2(state.args === null);
      state.args = args;
      state.reverseArgs = args.map(function(arg) {
        if (typeof arg !== "object" || arg.constructor !== Object)
          return arg;
        const res = {};
        Object.keys(arg).forEach(function(key) {
          if (key == (key | 0))
            key |= 0;
          const value = arg[key];
          res[value] = key;
        });
        return res;
      });
    }
  };
  overrided.forEach(function(method) {
    Node.prototype[method] = function _overrided() {
      const state = this._baseState;
      throw new Error(method + " not implemented for encoding: " + state.enc);
    };
  });
  tags.forEach(function(tag) {
    Node.prototype[tag] = function _tagMethod() {
      const state = this._baseState;
      const args = Array.prototype.slice.call(arguments);
      assert2(state.tag === null);
      state.tag = tag;
      this._useArgs(args);
      return this;
    };
  });
  Node.prototype.use = function use(item) {
    assert2(item);
    const state = this._baseState;
    assert2(state.use === null);
    state.use = item;
    return this;
  };
  Node.prototype.optional = function optional() {
    const state = this._baseState;
    state.optional = true;
    return this;
  };
  Node.prototype.def = function def(val) {
    const state = this._baseState;
    assert2(state["default"] === null);
    state["default"] = val;
    state.optional = true;
    return this;
  };
  Node.prototype.explicit = function explicit(num) {
    const state = this._baseState;
    assert2(state.explicit === null && state.implicit === null);
    state.explicit = num;
    return this;
  };
  Node.prototype.implicit = function implicit(num) {
    const state = this._baseState;
    assert2(state.explicit === null && state.implicit === null);
    state.implicit = num;
    return this;
  };
  Node.prototype.obj = function obj() {
    const state = this._baseState;
    const args = Array.prototype.slice.call(arguments);
    state.obj = true;
    if (args.length !== 0)
      this._useArgs(args);
    return this;
  };
  Node.prototype.key = function key(newKey) {
    const state = this._baseState;
    assert2(state.key === null);
    state.key = newKey;
    return this;
  };
  Node.prototype.any = function any() {
    const state = this._baseState;
    state.any = true;
    return this;
  };
  Node.prototype.choice = function choice(obj) {
    const state = this._baseState;
    assert2(state.choice === null);
    state.choice = obj;
    this._useArgs(Object.keys(obj).map(function(key) {
      return obj[key];
    }));
    return this;
  };
  Node.prototype.contains = function contains(item) {
    const state = this._baseState;
    assert2(state.use === null);
    state.contains = item;
    return this;
  };
  Node.prototype._decode = function decode(input, options) {
    const state = this._baseState;
    if (state.parent === null)
      return input.wrapResult(state.children[0]._decode(input, options));
    let result = state["default"];
    let present = true;
    let prevKey = null;
    if (state.key !== null)
      prevKey = input.enterKey(state.key);
    if (state.optional) {
      let tag = null;
      if (state.explicit !== null)
        tag = state.explicit;
      else if (state.implicit !== null)
        tag = state.implicit;
      else if (state.tag !== null)
        tag = state.tag;
      if (tag === null && !state.any) {
        const save = input.save();
        try {
          if (state.choice === null)
            this._decodeGeneric(state.tag, input, options);
          else
            this._decodeChoice(input, options);
          present = true;
        } catch (e11) {
          present = false;
        }
        input.restore(save);
      } else {
        present = this._peekTag(input, tag, state.any);
        if (input.isError(present))
          return present;
      }
    }
    let prevObj;
    if (state.obj && present)
      prevObj = input.enterObject();
    if (present) {
      if (state.explicit !== null) {
        const explicit = this._decodeTag(input, state.explicit);
        if (input.isError(explicit))
          return explicit;
        input = explicit;
      }
      const start = input.offset;
      if (state.use === null && state.choice === null) {
        let save;
        if (state.any)
          save = input.save();
        const body = this._decodeTag(input, state.implicit !== null ? state.implicit : state.tag, state.any);
        if (input.isError(body))
          return body;
        if (state.any)
          result = input.raw(save);
        else
          input = body;
      }
      if (options && options.track && state.tag !== null)
        options.track(input.path(), start, input.length, "tagged");
      if (options && options.track && state.tag !== null)
        options.track(input.path(), input.offset, input.length, "content");
      if (state.any)
        ;
      else if (state.choice === null) {
        result = this._decodeGeneric(state.tag, input, options);
      } else {
        result = this._decodeChoice(input, options);
      }
      if (input.isError(result))
        return result;
      if (!state.any && state.choice === null && state.children !== null) {
        state.children.forEach(function decodeChildren(child) {
          child._decode(input, options);
        });
      }
      if (state.contains && (state.tag === "octstr" || state.tag === "bitstr")) {
        const data = new DecoderBuffer(result);
        result = this._getUse(state.contains, input._reporterState.obj)._decode(data, options);
      }
    }
    if (state.obj && present)
      result = input.leaveObject(prevObj);
    if (state.key !== null && (result !== null || present === true))
      input.leaveKey(prevKey, state.key, result);
    else if (prevKey !== null)
      input.exitKey(prevKey);
    return result;
  };
  Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
    const state = this._baseState;
    if (tag === "seq" || tag === "set")
      return null;
    if (tag === "seqof" || tag === "setof")
      return this._decodeList(input, tag, state.args[0], options);
    else if (/str$/.test(tag))
      return this._decodeStr(input, tag, options);
    else if (tag === "objid" && state.args)
      return this._decodeObjid(input, state.args[0], state.args[1], options);
    else if (tag === "objid")
      return this._decodeObjid(input, null, null, options);
    else if (tag === "gentime" || tag === "utctime")
      return this._decodeTime(input, tag, options);
    else if (tag === "null_")
      return this._decodeNull(input, options);
    else if (tag === "bool")
      return this._decodeBool(input, options);
    else if (tag === "objDesc")
      return this._decodeStr(input, tag, options);
    else if (tag === "int" || tag === "enum")
      return this._decodeInt(input, state.args && state.args[0], options);
    if (state.use !== null) {
      return this._getUse(state.use, input._reporterState.obj)._decode(input, options);
    } else {
      return input.error("unknown tag: " + tag);
    }
  };
  Node.prototype._getUse = function _getUse(entity, obj) {
    const state = this._baseState;
    state.useDecoder = this._use(entity, obj);
    assert2(state.useDecoder._baseState.parent === null);
    state.useDecoder = state.useDecoder._baseState.children[0];
    if (state.implicit !== state.useDecoder._baseState.implicit) {
      state.useDecoder = state.useDecoder.clone();
      state.useDecoder._baseState.implicit = state.implicit;
    }
    return state.useDecoder;
  };
  Node.prototype._decodeChoice = function decodeChoice(input, options) {
    const state = this._baseState;
    let result = null;
    let match = false;
    Object.keys(state.choice).some(function(key) {
      const save = input.save();
      const node = state.choice[key];
      try {
        const value = node._decode(input, options);
        if (input.isError(value))
          return false;
        result = {
          type: key,
          value
        };
        match = true;
      } catch (e11) {
        input.restore(save);
        return false;
      }
      return true;
    }, this);
    if (!match)
      return input.error("Choice not matched");
    return result;
  };
  Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
    return new EncoderBuffer(data, this.reporter);
  };
  Node.prototype._encode = function encode3(data, reporter, parent) {
    const state = this._baseState;
    if (state["default"] !== null && state["default"] === data)
      return;
    const result = this._encodeValue(data, reporter, parent);
    if (result === void 0)
      return;
    if (this._skipDefault(result, reporter, parent))
      return;
    return result;
  };
  Node.prototype._encodeValue = function encode3(data, reporter, parent) {
    const state = this._baseState;
    if (state.parent === null)
      return state.children[0]._encode(data, reporter || new Reporter());
    let result = null;
    this.reporter = reporter;
    if (state.optional && data === void 0) {
      if (state["default"] !== null)
        data = state["default"];
      else
        return;
    }
    let content = null;
    let primitive = false;
    if (state.any) {
      result = this._createEncoderBuffer(data);
    } else if (state.choice) {
      result = this._encodeChoice(data, reporter);
    } else if (state.contains) {
      content = this._getUse(state.contains, parent)._encode(data, reporter);
      primitive = true;
    } else if (state.children) {
      content = state.children.map(function(child) {
        if (child._baseState.tag === "null_")
          return child._encode(null, reporter, data);
        if (child._baseState.key === null)
          return reporter.error("Child should have a key");
        const prevKey = reporter.enterKey(child._baseState.key);
        if (typeof data !== "object")
          return reporter.error("Child expected, but input is not object");
        const res = child._encode(data[child._baseState.key], reporter, data);
        reporter.leaveKey(prevKey);
        return res;
      }, this).filter(function(child) {
        return child;
      });
      content = this._createEncoderBuffer(content);
    } else {
      if (state.tag === "seqof" || state.tag === "setof") {
        if (!(state.args && state.args.length === 1))
          return reporter.error("Too many args for : " + state.tag);
        if (!Array.isArray(data))
          return reporter.error("seqof/setof, but data is not Array");
        const child = this.clone();
        child._baseState.implicit = null;
        content = this._createEncoderBuffer(data.map(function(item) {
          const state2 = this._baseState;
          return this._getUse(state2.args[0], data)._encode(item, reporter);
        }, child));
      } else if (state.use !== null) {
        result = this._getUse(state.use, parent)._encode(data, reporter);
      } else {
        content = this._encodePrimitive(state.tag, data);
        primitive = true;
      }
    }
    if (!state.any && state.choice === null) {
      const tag = state.implicit !== null ? state.implicit : state.tag;
      const cls = state.implicit === null ? "universal" : "context";
      if (tag === null) {
        if (state.use === null)
          reporter.error("Tag could be omitted only for .use()");
      } else {
        if (state.use === null)
          result = this._encodeComposite(tag, primitive, cls, content);
      }
    }
    if (state.explicit !== null)
      result = this._encodeComposite(state.explicit, false, "context", result);
    return result;
  };
  Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
    const state = this._baseState;
    const node = state.choice[data.type];
    if (!node) {
      assert2(false, data.type + " not found in " + JSON.stringify(Object.keys(state.choice)));
    }
    return node._encode(data.value, reporter);
  };
  Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
    const state = this._baseState;
    if (/str$/.test(tag))
      return this._encodeStr(data, tag);
    else if (tag === "objid" && state.args)
      return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
    else if (tag === "objid")
      return this._encodeObjid(data, null, null);
    else if (tag === "gentime" || tag === "utctime")
      return this._encodeTime(data, tag);
    else if (tag === "null_")
      return this._encodeNull();
    else if (tag === "int" || tag === "enum")
      return this._encodeInt(data, state.args && state.reverseArgs[0]);
    else if (tag === "bool")
      return this._encodeBool(data);
    else if (tag === "objDesc")
      return this._encodeStr(data, tag);
    else
      throw new Error("Unsupported tag: " + tag);
  };
  Node.prototype._isNumstr = function isNumstr(str) {
    return /^[0-9 ]*$/.test(str);
  };
  Node.prototype._isPrintstr = function isPrintstr(str) {
    return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);
  };
  return exports$t$1;
}
function dew$s$1() {
  if (_dewExec$s$1)
    return exports$s$1;
  _dewExec$s$1 = true;
  function reverse(map) {
    const res = {};
    Object.keys(map).forEach(function(key) {
      if ((key | 0) == key)
        key = key | 0;
      const value = map[key];
      res[value] = key;
    });
    return res;
  }
  exports$s$1.tagClass = {
    0: "universal",
    1: "application",
    2: "context",
    3: "private"
  };
  exports$s$1.tagClassByName = reverse(exports$s$1.tagClass);
  exports$s$1.tag = {
    0: "end",
    1: "bool",
    2: "int",
    3: "bitstr",
    4: "octstr",
    5: "null_",
    6: "objid",
    7: "objDesc",
    8: "external",
    9: "real",
    10: "enum",
    11: "embed",
    12: "utf8str",
    13: "relativeOid",
    16: "seq",
    17: "set",
    18: "numstr",
    19: "printstr",
    20: "t61str",
    21: "videostr",
    22: "ia5str",
    23: "utctime",
    24: "gentime",
    25: "graphstr",
    26: "iso646str",
    27: "genstr",
    28: "unistr",
    29: "charstr",
    30: "bmpstr"
  };
  exports$s$1.tagByName = reverse(exports$s$1.tag);
  return exports$s$1;
}
function dew$r$1() {
  if (_dewExec$r$1)
    return exports$r$1;
  _dewExec$r$1 = true;
  const inherits4 = dew$f$2();
  const Buffer3 = dew$w$1().Buffer;
  const Node = dew$t$1();
  const der = dew$s$1();
  function DEREncoder(entity) {
    this.enc = "der";
    this.name = entity.name;
    this.entity = entity;
    this.tree = new DERNode();
    this.tree._init(entity.body);
  }
  exports$r$1 = DEREncoder;
  DEREncoder.prototype.encode = function encode3(data, reporter) {
    return this.tree._encode(data, reporter).join();
  };
  function DERNode(parent) {
    Node.call(this, "der", parent);
  }
  inherits4(DERNode, Node);
  DERNode.prototype._encodeComposite = function encodeComposite(tag, primitive, cls, content) {
    const encodedTag = encodeTag(tag, primitive, cls, this.reporter);
    if (content.length < 128) {
      const header2 = Buffer3.alloc(2);
      header2[0] = encodedTag;
      header2[1] = content.length;
      return this._createEncoderBuffer([header2, content]);
    }
    let lenOctets = 1;
    for (let i8 = content.length; i8 >= 256; i8 >>= 8)
      lenOctets++;
    const header = Buffer3.alloc(1 + 1 + lenOctets);
    header[0] = encodedTag;
    header[1] = 128 | lenOctets;
    for (let i8 = 1 + lenOctets, j4 = content.length; j4 > 0; i8--, j4 >>= 8)
      header[i8] = j4 & 255;
    return this._createEncoderBuffer([header, content]);
  };
  DERNode.prototype._encodeStr = function encodeStr(str, tag) {
    if (tag === "bitstr") {
      return this._createEncoderBuffer([str.unused | 0, str.data]);
    } else if (tag === "bmpstr") {
      const buf = Buffer3.alloc(str.length * 2);
      for (let i8 = 0; i8 < str.length; i8++) {
        buf.writeUInt16BE(str.charCodeAt(i8), i8 * 2);
      }
      return this._createEncoderBuffer(buf);
    } else if (tag === "numstr") {
      if (!this._isNumstr(str)) {
        return this.reporter.error("Encoding of string type: numstr supports only digits and space");
      }
      return this._createEncoderBuffer(str);
    } else if (tag === "printstr") {
      if (!this._isPrintstr(str)) {
        return this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark");
      }
      return this._createEncoderBuffer(str);
    } else if (/str$/.test(tag)) {
      return this._createEncoderBuffer(str);
    } else if (tag === "objDesc") {
      return this._createEncoderBuffer(str);
    } else {
      return this.reporter.error("Encoding of string type: " + tag + " unsupported");
    }
  };
  DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
    if (typeof id === "string") {
      if (!values)
        return this.reporter.error("string objid given, but no values map found");
      if (!values.hasOwnProperty(id))
        return this.reporter.error("objid not found in values map");
      id = values[id].split(/[\s.]+/g);
      for (let i8 = 0; i8 < id.length; i8++)
        id[i8] |= 0;
    } else if (Array.isArray(id)) {
      id = id.slice();
      for (let i8 = 0; i8 < id.length; i8++)
        id[i8] |= 0;
    }
    if (!Array.isArray(id)) {
      return this.reporter.error("objid() should be either array or string, got: " + JSON.stringify(id));
    }
    if (!relative) {
      if (id[1] >= 40)
        return this.reporter.error("Second objid identifier OOB");
      id.splice(0, 2, id[0] * 40 + id[1]);
    }
    let size = 0;
    for (let i8 = 0; i8 < id.length; i8++) {
      let ident = id[i8];
      for (size++; ident >= 128; ident >>= 7)
        size++;
    }
    const objid = Buffer3.alloc(size);
    let offset = objid.length - 1;
    for (let i8 = id.length - 1; i8 >= 0; i8--) {
      let ident = id[i8];
      objid[offset--] = ident & 127;
      while ((ident >>= 7) > 0)
        objid[offset--] = 128 | ident & 127;
    }
    return this._createEncoderBuffer(objid);
  };
  function two(num) {
    if (num < 10)
      return "0" + num;
    else
      return num;
  }
  DERNode.prototype._encodeTime = function encodeTime(time, tag) {
    let str;
    const date = new Date(time);
    if (tag === "gentime") {
      str = [two(date.getUTCFullYear()), two(date.getUTCMonth() + 1), two(date.getUTCDate()), two(date.getUTCHours()), two(date.getUTCMinutes()), two(date.getUTCSeconds()), "Z"].join("");
    } else if (tag === "utctime") {
      str = [two(date.getUTCFullYear() % 100), two(date.getUTCMonth() + 1), two(date.getUTCDate()), two(date.getUTCHours()), two(date.getUTCMinutes()), two(date.getUTCSeconds()), "Z"].join("");
    } else {
      this.reporter.error("Encoding " + tag + " time is not supported yet");
    }
    return this._encodeStr(str, "octstr");
  };
  DERNode.prototype._encodeNull = function encodeNull() {
    return this._createEncoderBuffer("");
  };
  DERNode.prototype._encodeInt = function encodeInt(num, values) {
    if (typeof num === "string") {
      if (!values)
        return this.reporter.error("String int or enum given, but no values map");
      if (!values.hasOwnProperty(num)) {
        return this.reporter.error("Values map doesn't contain: " + JSON.stringify(num));
      }
      num = values[num];
    }
    if (typeof num !== "number" && !Buffer3.isBuffer(num)) {
      const numArray = num.toArray();
      if (!num.sign && numArray[0] & 128) {
        numArray.unshift(0);
      }
      num = Buffer3.from(numArray);
    }
    if (Buffer3.isBuffer(num)) {
      let size2 = num.length;
      if (num.length === 0)
        size2++;
      const out2 = Buffer3.alloc(size2);
      num.copy(out2);
      if (num.length === 0)
        out2[0] = 0;
      return this._createEncoderBuffer(out2);
    }
    if (num < 128)
      return this._createEncoderBuffer(num);
    if (num < 256)
      return this._createEncoderBuffer([0, num]);
    let size = 1;
    for (let i8 = num; i8 >= 256; i8 >>= 8)
      size++;
    const out = new Array(size);
    for (let i8 = out.length - 1; i8 >= 0; i8--) {
      out[i8] = num & 255;
      num >>= 8;
    }
    if (out[0] & 128) {
      out.unshift(0);
    }
    return this._createEncoderBuffer(Buffer3.from(out));
  };
  DERNode.prototype._encodeBool = function encodeBool(value) {
    return this._createEncoderBuffer(value ? 255 : 0);
  };
  DERNode.prototype._use = function use(entity, obj) {
    if (typeof entity === "function")
      entity = entity(obj);
    return entity._getEncoder("der").tree;
  };
  DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
    const state = this._baseState;
    let i8;
    if (state["default"] === null)
      return false;
    const data = dataBuffer.join();
    if (state.defaultBuffer === void 0)
      state.defaultBuffer = this._encodeValue(state["default"], reporter, parent).join();
    if (data.length !== state.defaultBuffer.length)
      return false;
    for (i8 = 0; i8 < data.length; i8++)
      if (data[i8] !== state.defaultBuffer[i8])
        return false;
    return true;
  };
  function encodeTag(tag, primitive, cls, reporter) {
    let res;
    if (tag === "seqof")
      tag = "seq";
    else if (tag === "setof")
      tag = "set";
    if (der.tagByName.hasOwnProperty(tag))
      res = der.tagByName[tag];
    else if (typeof tag === "number" && (tag | 0) === tag)
      res = tag;
    else
      return reporter.error("Unknown tag: " + tag);
    if (res >= 31)
      return reporter.error("Multi-octet tag encoding unsupported");
    if (!primitive)
      res |= 32;
    res |= der.tagClassByName[cls || "universal"] << 6;
    return res;
  }
  return exports$r$1;
}
function dew$q$1() {
  if (_dewExec$q$1)
    return exports$q$1;
  _dewExec$q$1 = true;
  const inherits4 = dew$f$2();
  const DEREncoder = dew$r$1();
  function PEMEncoder(entity) {
    DEREncoder.call(this, entity);
    this.enc = "pem";
  }
  inherits4(PEMEncoder, DEREncoder);
  exports$q$1 = PEMEncoder;
  PEMEncoder.prototype.encode = function encode3(data, options) {
    const buf = DEREncoder.prototype.encode.call(this, data);
    const p8 = buf.toString("base64");
    const out = ["-----BEGIN " + options.label + "-----"];
    for (let i8 = 0; i8 < p8.length; i8 += 64)
      out.push(p8.slice(i8, i8 + 64));
    out.push("-----END " + options.label + "-----");
    return out.join("\n");
  };
  return exports$q$1;
}
function dew$p$1() {
  if (_dewExec$p$1)
    return exports$p$1;
  _dewExec$p$1 = true;
  const encoders = exports$p$1;
  encoders.der = dew$r$1();
  encoders.pem = dew$q$1();
  return exports$p$1;
}
function dew$o$1() {
  if (_dewExec$o$1)
    return exports$o$1;
  _dewExec$o$1 = true;
  const inherits4 = dew$f$2();
  const bignum = dew$x$1();
  const DecoderBuffer = dew$u$1().DecoderBuffer;
  const Node = dew$t$1();
  const der = dew$s$1();
  function DERDecoder(entity) {
    this.enc = "der";
    this.name = entity.name;
    this.entity = entity;
    this.tree = new DERNode();
    this.tree._init(entity.body);
  }
  exports$o$1 = DERDecoder;
  DERDecoder.prototype.decode = function decode(data, options) {
    if (!DecoderBuffer.isDecoderBuffer(data)) {
      data = new DecoderBuffer(data, options);
    }
    return this.tree._decode(data, options);
  };
  function DERNode(parent) {
    Node.call(this, "der", parent);
  }
  inherits4(DERNode, Node);
  DERNode.prototype._peekTag = function peekTag(buffer2, tag, any) {
    if (buffer2.isEmpty())
      return false;
    const state = buffer2.save();
    const decodedTag = derDecodeTag(buffer2, 'Failed to peek tag: "' + tag + '"');
    if (buffer2.isError(decodedTag))
      return decodedTag;
    buffer2.restore(state);
    return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + "of" === tag || any;
  };
  DERNode.prototype._decodeTag = function decodeTag(buffer2, tag, any) {
    const decodedTag = derDecodeTag(buffer2, 'Failed to decode tag of "' + tag + '"');
    if (buffer2.isError(decodedTag))
      return decodedTag;
    let len = derDecodeLen(buffer2, decodedTag.primitive, 'Failed to get length of "' + tag + '"');
    if (buffer2.isError(len))
      return len;
    if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + "of" !== tag) {
      return buffer2.error('Failed to match tag: "' + tag + '"');
    }
    if (decodedTag.primitive || len !== null)
      return buffer2.skip(len, 'Failed to match body of: "' + tag + '"');
    const state = buffer2.save();
    const res = this._skipUntilEnd(buffer2, 'Failed to skip indefinite length body: "' + this.tag + '"');
    if (buffer2.isError(res))
      return res;
    len = buffer2.offset - state.offset;
    buffer2.restore(state);
    return buffer2.skip(len, 'Failed to match body of: "' + tag + '"');
  };
  DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer2, fail) {
    for (; ; ) {
      const tag = derDecodeTag(buffer2, fail);
      if (buffer2.isError(tag))
        return tag;
      const len = derDecodeLen(buffer2, tag.primitive, fail);
      if (buffer2.isError(len))
        return len;
      let res;
      if (tag.primitive || len !== null)
        res = buffer2.skip(len);
      else
        res = this._skipUntilEnd(buffer2, fail);
      if (buffer2.isError(res))
        return res;
      if (tag.tagStr === "end")
        break;
    }
  };
  DERNode.prototype._decodeList = function decodeList(buffer2, tag, decoder, options) {
    const result = [];
    while (!buffer2.isEmpty()) {
      const possibleEnd = this._peekTag(buffer2, "end");
      if (buffer2.isError(possibleEnd))
        return possibleEnd;
      const res = decoder.decode(buffer2, "der", options);
      if (buffer2.isError(res) && possibleEnd)
        break;
      result.push(res);
    }
    return result;
  };
  DERNode.prototype._decodeStr = function decodeStr(buffer2, tag) {
    if (tag === "bitstr") {
      const unused = buffer2.readUInt8();
      if (buffer2.isError(unused))
        return unused;
      return {
        unused,
        data: buffer2.raw()
      };
    } else if (tag === "bmpstr") {
      const raw = buffer2.raw();
      if (raw.length % 2 === 1)
        return buffer2.error("Decoding of string type: bmpstr length mismatch");
      let str = "";
      for (let i8 = 0; i8 < raw.length / 2; i8++) {
        str += String.fromCharCode(raw.readUInt16BE(i8 * 2));
      }
      return str;
    } else if (tag === "numstr") {
      const numstr = buffer2.raw().toString("ascii");
      if (!this._isNumstr(numstr)) {
        return buffer2.error("Decoding of string type: numstr unsupported characters");
      }
      return numstr;
    } else if (tag === "octstr") {
      return buffer2.raw();
    } else if (tag === "objDesc") {
      return buffer2.raw();
    } else if (tag === "printstr") {
      const printstr = buffer2.raw().toString("ascii");
      if (!this._isPrintstr(printstr)) {
        return buffer2.error("Decoding of string type: printstr unsupported characters");
      }
      return printstr;
    } else if (/str$/.test(tag)) {
      return buffer2.raw().toString();
    } else {
      return buffer2.error("Decoding of string type: " + tag + " unsupported");
    }
  };
  DERNode.prototype._decodeObjid = function decodeObjid(buffer2, values, relative) {
    let result;
    const identifiers = [];
    let ident = 0;
    let subident = 0;
    while (!buffer2.isEmpty()) {
      subident = buffer2.readUInt8();
      ident <<= 7;
      ident |= subident & 127;
      if ((subident & 128) === 0) {
        identifiers.push(ident);
        ident = 0;
      }
    }
    if (subident & 128)
      identifiers.push(ident);
    const first = identifiers[0] / 40 | 0;
    const second = identifiers[0] % 40;
    if (relative)
      result = identifiers;
    else
      result = [first, second].concat(identifiers.slice(1));
    if (values) {
      let tmp = values[result.join(" ")];
      if (tmp === void 0)
        tmp = values[result.join(".")];
      if (tmp !== void 0)
        result = tmp;
    }
    return result;
  };
  DERNode.prototype._decodeTime = function decodeTime(buffer2, tag) {
    const str = buffer2.raw().toString();
    let year;
    let mon;
    let day;
    let hour;
    let min;
    let sec;
    if (tag === "gentime") {
      year = str.slice(0, 4) | 0;
      mon = str.slice(4, 6) | 0;
      day = str.slice(6, 8) | 0;
      hour = str.slice(8, 10) | 0;
      min = str.slice(10, 12) | 0;
      sec = str.slice(12, 14) | 0;
    } else if (tag === "utctime") {
      year = str.slice(0, 2) | 0;
      mon = str.slice(2, 4) | 0;
      day = str.slice(4, 6) | 0;
      hour = str.slice(6, 8) | 0;
      min = str.slice(8, 10) | 0;
      sec = str.slice(10, 12) | 0;
      if (year < 70)
        year = 2e3 + year;
      else
        year = 1900 + year;
    } else {
      return buffer2.error("Decoding " + tag + " time is not supported yet");
    }
    return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
  };
  DERNode.prototype._decodeNull = function decodeNull() {
    return null;
  };
  DERNode.prototype._decodeBool = function decodeBool(buffer2) {
    const res = buffer2.readUInt8();
    if (buffer2.isError(res))
      return res;
    else
      return res !== 0;
  };
  DERNode.prototype._decodeInt = function decodeInt(buffer2, values) {
    const raw = buffer2.raw();
    let res = new bignum(raw);
    if (values)
      res = values[res.toString(10)] || res;
    return res;
  };
  DERNode.prototype._use = function use(entity, obj) {
    if (typeof entity === "function")
      entity = entity(obj);
    return entity._getDecoder("der").tree;
  };
  function derDecodeTag(buf, fail) {
    let tag = buf.readUInt8(fail);
    if (buf.isError(tag))
      return tag;
    const cls = der.tagClass[tag >> 6];
    const primitive = (tag & 32) === 0;
    if ((tag & 31) === 31) {
      let oct = tag;
      tag = 0;
      while ((oct & 128) === 128) {
        oct = buf.readUInt8(fail);
        if (buf.isError(oct))
          return oct;
        tag <<= 7;
        tag |= oct & 127;
      }
    } else {
      tag &= 31;
    }
    const tagStr = der.tag[tag];
    return {
      cls,
      primitive,
      tag,
      tagStr
    };
  }
  function derDecodeLen(buf, primitive, fail) {
    let len = buf.readUInt8(fail);
    if (buf.isError(len))
      return len;
    if (!primitive && len === 128)
      return null;
    if ((len & 128) === 0) {
      return len;
    }
    const num = len & 127;
    if (num > 4)
      return buf.error("length octect is too long");
    len = 0;
    for (let i8 = 0; i8 < num; i8++) {
      len <<= 8;
      const j4 = buf.readUInt8(fail);
      if (buf.isError(j4))
        return j4;
      len |= j4;
    }
    return len;
  }
  return exports$o$1;
}
function dew$n$1() {
  if (_dewExec$n$1)
    return exports$n$1;
  _dewExec$n$1 = true;
  const inherits4 = dew$f$2();
  const Buffer3 = dew$w$1().Buffer;
  const DERDecoder = dew$o$1();
  function PEMDecoder(entity) {
    DERDecoder.call(this, entity);
    this.enc = "pem";
  }
  inherits4(PEMDecoder, DERDecoder);
  exports$n$1 = PEMDecoder;
  PEMDecoder.prototype.decode = function decode(data, options) {
    const lines = data.toString().split(/[\r\n]+/g);
    const label = options.label.toUpperCase();
    const re3 = /^-----(BEGIN|END) ([^-]+)-----$/;
    let start = -1;
    let end = -1;
    for (let i8 = 0; i8 < lines.length; i8++) {
      const match = lines[i8].match(re3);
      if (match === null)
        continue;
      if (match[2] !== label)
        continue;
      if (start === -1) {
        if (match[1] !== "BEGIN")
          break;
        start = i8;
      } else {
        if (match[1] !== "END")
          break;
        end = i8;
        break;
      }
    }
    if (start === -1 || end === -1)
      throw new Error("PEM section not found for: " + label);
    const base64 = lines.slice(start + 1, end).join("");
    base64.replace(/[^a-z0-9+/=]+/gi, "");
    const input = Buffer3.from(base64, "base64");
    return DERDecoder.prototype.decode.call(this, input, options);
  };
  return exports$n$1;
}
function dew$m$1() {
  if (_dewExec$m$1)
    return exports$m$1;
  _dewExec$m$1 = true;
  const decoders = exports$m$1;
  decoders.der = dew$o$1();
  decoders.pem = dew$n$1();
  return exports$m$1;
}
function dew$l$1() {
  if (_dewExec$l$1)
    return exports$l$1;
  _dewExec$l$1 = true;
  const encoders = dew$p$1();
  const decoders = dew$m$1();
  const inherits4 = dew$f$2();
  const api = exports$l$1;
  api.define = function define2(name2, body) {
    return new Entity(name2, body);
  };
  function Entity(name2, body) {
    this.name = name2;
    this.body = body;
    this.decoders = {};
    this.encoders = {};
  }
  Entity.prototype._createNamed = function createNamed(Base) {
    const name2 = this.name;
    function Generated(entity) {
      this._initNamed(entity, name2);
    }
    inherits4(Generated, Base);
    Generated.prototype._initNamed = function _initNamed(entity, name3) {
      Base.call(this, entity, name3);
    };
    return new Generated(this);
  };
  Entity.prototype._getDecoder = function _getDecoder(enc) {
    enc = enc || "der";
    if (!this.decoders.hasOwnProperty(enc))
      this.decoders[enc] = this._createNamed(decoders[enc]);
    return this.decoders[enc];
  };
  Entity.prototype.decode = function decode(data, enc, options) {
    return this._getDecoder(enc).decode(data, options);
  };
  Entity.prototype._getEncoder = function _getEncoder(enc) {
    enc = enc || "der";
    if (!this.encoders.hasOwnProperty(enc))
      this.encoders[enc] = this._createNamed(encoders[enc]);
    return this.encoders[enc];
  };
  Entity.prototype.encode = function encode3(data, enc, reporter) {
    return this._getEncoder(enc).encode(data, reporter);
  };
  return exports$l$1;
}
function dew$k$1() {
  if (_dewExec$k$1)
    return exports$k$1;
  _dewExec$k$1 = true;
  const base = exports$k$1;
  base.Reporter = dew$v$1().Reporter;
  base.DecoderBuffer = dew$u$1().DecoderBuffer;
  base.EncoderBuffer = dew$u$1().EncoderBuffer;
  base.Node = dew$t$1();
  return exports$k$1;
}
function dew$j$1() {
  if (_dewExec$j$1)
    return exports$j$1;
  _dewExec$j$1 = true;
  const constants2 = exports$j$1;
  constants2._reverse = function reverse(map) {
    const res = {};
    Object.keys(map).forEach(function(key) {
      if ((key | 0) == key)
        key = key | 0;
      const value = map[key];
      res[value] = key;
    });
    return res;
  };
  constants2.der = dew$s$1();
  return exports$j$1;
}
function dew$i$1() {
  if (_dewExec$i$1)
    return exports$i$1;
  _dewExec$i$1 = true;
  const asn1 = exports$i$1;
  asn1.bignum = dew$x$1();
  asn1.define = dew$l$1().define;
  asn1.base = dew$k$1();
  asn1.constants = dew$j$1();
  asn1.decoders = dew$m$1();
  asn1.encoders = dew$p$1();
  return exports$i$1;
}
function dew$h$1() {
  if (_dewExec$h$1)
    return exports$h$1;
  _dewExec$h$1 = true;
  var asn = dew$i$1();
  var Time = asn.define("Time", function() {
    this.choice({
      utcTime: this.utctime(),
      generalTime: this.gentime()
    });
  });
  var AttributeTypeValue = asn.define("AttributeTypeValue", function() {
    this.seq().obj(this.key("type").objid(), this.key("value").any());
  });
  var AlgorithmIdentifier = asn.define("AlgorithmIdentifier", function() {
    this.seq().obj(this.key("algorithm").objid(), this.key("parameters").optional(), this.key("curve").objid().optional());
  });
  var SubjectPublicKeyInfo = asn.define("SubjectPublicKeyInfo", function() {
    this.seq().obj(this.key("algorithm").use(AlgorithmIdentifier), this.key("subjectPublicKey").bitstr());
  });
  var RelativeDistinguishedName = asn.define("RelativeDistinguishedName", function() {
    this.setof(AttributeTypeValue);
  });
  var RDNSequence = asn.define("RDNSequence", function() {
    this.seqof(RelativeDistinguishedName);
  });
  var Name = asn.define("Name", function() {
    this.choice({
      rdnSequence: this.use(RDNSequence)
    });
  });
  var Validity = asn.define("Validity", function() {
    this.seq().obj(this.key("notBefore").use(Time), this.key("notAfter").use(Time));
  });
  var Extension = asn.define("Extension", function() {
    this.seq().obj(this.key("extnID").objid(), this.key("critical").bool().def(false), this.key("extnValue").octstr());
  });
  var TBSCertificate = asn.define("TBSCertificate", function() {
    this.seq().obj(this.key("version").explicit(0).int().optional(), this.key("serialNumber").int(), this.key("signature").use(AlgorithmIdentifier), this.key("issuer").use(Name), this.key("validity").use(Validity), this.key("subject").use(Name), this.key("subjectPublicKeyInfo").use(SubjectPublicKeyInfo), this.key("issuerUniqueID").implicit(1).bitstr().optional(), this.key("subjectUniqueID").implicit(2).bitstr().optional(), this.key("extensions").explicit(3).seqof(Extension).optional());
  });
  var X509Certificate = asn.define("X509Certificate", function() {
    this.seq().obj(this.key("tbsCertificate").use(TBSCertificate), this.key("signatureAlgorithm").use(AlgorithmIdentifier), this.key("signatureValue").bitstr());
  });
  exports$h$1 = X509Certificate;
  return exports$h$1;
}
function dew$g$1() {
  if (_dewExec$g$1)
    return exports$g$1;
  _dewExec$g$1 = true;
  var asn1 = dew$i$1();
  exports$g$1.certificate = dew$h$1();
  var RSAPrivateKey = asn1.define("RSAPrivateKey", function() {
    this.seq().obj(this.key("version").int(), this.key("modulus").int(), this.key("publicExponent").int(), this.key("privateExponent").int(), this.key("prime1").int(), this.key("prime2").int(), this.key("exponent1").int(), this.key("exponent2").int(), this.key("coefficient").int());
  });
  exports$g$1.RSAPrivateKey = RSAPrivateKey;
  var RSAPublicKey = asn1.define("RSAPublicKey", function() {
    this.seq().obj(this.key("modulus").int(), this.key("publicExponent").int());
  });
  exports$g$1.RSAPublicKey = RSAPublicKey;
  var PublicKey = asn1.define("SubjectPublicKeyInfo", function() {
    this.seq().obj(this.key("algorithm").use(AlgorithmIdentifier), this.key("subjectPublicKey").bitstr());
  });
  exports$g$1.PublicKey = PublicKey;
  var AlgorithmIdentifier = asn1.define("AlgorithmIdentifier", function() {
    this.seq().obj(this.key("algorithm").objid(), this.key("none").null_().optional(), this.key("curve").objid().optional(), this.key("params").seq().obj(this.key("p").int(), this.key("q").int(), this.key("g").int()).optional());
  });
  var PrivateKeyInfo = asn1.define("PrivateKeyInfo", function() {
    this.seq().obj(this.key("version").int(), this.key("algorithm").use(AlgorithmIdentifier), this.key("subjectPrivateKey").octstr());
  });
  exports$g$1.PrivateKey = PrivateKeyInfo;
  var EncryptedPrivateKeyInfo = asn1.define("EncryptedPrivateKeyInfo", function() {
    this.seq().obj(this.key("algorithm").seq().obj(this.key("id").objid(), this.key("decrypt").seq().obj(this.key("kde").seq().obj(this.key("id").objid(), this.key("kdeparams").seq().obj(this.key("salt").octstr(), this.key("iters").int())), this.key("cipher").seq().obj(this.key("algo").objid(), this.key("iv").octstr()))), this.key("subjectPrivateKey").octstr());
  });
  exports$g$1.EncryptedPrivateKey = EncryptedPrivateKeyInfo;
  var DSAPrivateKey = asn1.define("DSAPrivateKey", function() {
    this.seq().obj(this.key("version").int(), this.key("p").int(), this.key("q").int(), this.key("g").int(), this.key("pub_key").int(), this.key("priv_key").int());
  });
  exports$g$1.DSAPrivateKey = DSAPrivateKey;
  exports$g$1.DSAparam = asn1.define("DSAparam", function() {
    this.int();
  });
  var ECPrivateKey = asn1.define("ECPrivateKey", function() {
    this.seq().obj(this.key("version").int(), this.key("privateKey").octstr(), this.key("parameters").optional().explicit(0).use(ECParameters), this.key("publicKey").optional().explicit(1).bitstr());
  });
  exports$g$1.ECPrivateKey = ECPrivateKey;
  var ECParameters = asn1.define("ECParameters", function() {
    this.choice({
      namedCurve: this.objid()
    });
  });
  exports$g$1.signature = asn1.define("signature", function() {
    this.seq().obj(this.key("r").int(), this.key("s").int());
  });
  return exports$g$1;
}
function dew$f$1() {
  if (_dewExec$f$1)
    return exports$f$1;
  _dewExec$f$1 = true;
  var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m;
  var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m;
  var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m;
  var evp = dew$18();
  var ciphers = dew$15();
  var Buffer3 = dew$1T().Buffer;
  exports$f$1 = function(okey, password) {
    var key = okey.toString();
    var match = key.match(findProc);
    var decrypted;
    if (!match) {
      var match2 = key.match(fullRegex);
      decrypted = Buffer3.from(match2[2].replace(/[\r\n]/g, ""), "base64");
    } else {
      var suite = "aes" + match[1];
      var iv = Buffer3.from(match[2], "hex");
      var cipherText = Buffer3.from(match[3].replace(/[\r\n]/g, ""), "base64");
      var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key;
      var out = [];
      var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);
      out.push(cipher.update(cipherText));
      out.push(cipher.final());
      decrypted = Buffer3.concat(out);
    }
    var tag = key.match(startRegex)[1];
    return {
      tag,
      data: decrypted
    };
  };
  return exports$f$1;
}
function dew$e$1() {
  if (_dewExec$e$1)
    return exports$e$1;
  _dewExec$e$1 = true;
  var asn1 = dew$g$1();
  var aesid = _aesid$1;
  var fixProc = dew$f$1();
  var ciphers = dew$15();
  var compat = dew$1v();
  var Buffer3 = dew$1T().Buffer;
  exports$e$1 = parseKeys;
  function parseKeys(buffer2) {
    var password;
    if (typeof buffer2 === "object" && !Buffer3.isBuffer(buffer2)) {
      password = buffer2.passphrase;
      buffer2 = buffer2.key;
    }
    if (typeof buffer2 === "string") {
      buffer2 = Buffer3.from(buffer2);
    }
    var stripped = fixProc(buffer2, password);
    var type = stripped.tag;
    var data = stripped.data;
    var subtype, ndata;
    switch (type) {
      case "CERTIFICATE":
        ndata = asn1.certificate.decode(data, "der").tbsCertificate.subjectPublicKeyInfo;
      case "PUBLIC KEY":
        if (!ndata) {
          ndata = asn1.PublicKey.decode(data, "der");
        }
        subtype = ndata.algorithm.algorithm.join(".");
        switch (subtype) {
          case "1.2.840.113549.1.1.1":
            return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, "der");
          case "1.2.840.10045.2.1":
            ndata.subjectPrivateKey = ndata.subjectPublicKey;
            return {
              type: "ec",
              data: ndata
            };
          case "1.2.840.10040.4.1":
            ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, "der");
            return {
              type: "dsa",
              data: ndata.algorithm.params
            };
          default:
            throw new Error("unknown key id " + subtype);
        }
      case "ENCRYPTED PRIVATE KEY":
        data = asn1.EncryptedPrivateKey.decode(data, "der");
        data = decrypt(data, password);
      case "PRIVATE KEY":
        ndata = asn1.PrivateKey.decode(data, "der");
        subtype = ndata.algorithm.algorithm.join(".");
        switch (subtype) {
          case "1.2.840.113549.1.1.1":
            return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, "der");
          case "1.2.840.10045.2.1":
            return {
              curve: ndata.algorithm.curve,
              privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, "der").privateKey
            };
          case "1.2.840.10040.4.1":
            ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, "der");
            return {
              type: "dsa",
              params: ndata.algorithm.params
            };
          default:
            throw new Error("unknown key id " + subtype);
        }
      case "RSA PUBLIC KEY":
        return asn1.RSAPublicKey.decode(data, "der");
      case "RSA PRIVATE KEY":
        return asn1.RSAPrivateKey.decode(data, "der");
      case "DSA PRIVATE KEY":
        return {
          type: "dsa",
          params: asn1.DSAPrivateKey.decode(data, "der")
        };
      case "EC PRIVATE KEY":
        data = asn1.ECPrivateKey.decode(data, "der");
        return {
          curve: data.parameters.value,
          privateKey: data.privateKey
        };
      default:
        throw new Error("unknown key type " + type);
    }
  }
  parseKeys.signature = asn1.signature;
  function decrypt(data, password) {
    var salt = data.algorithm.decrypt.kde.kdeparams.salt;
    var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
    var algo = aesid[data.algorithm.decrypt.cipher.algo.join(".")];
    var iv = data.algorithm.decrypt.cipher.iv;
    var cipherText = data.subjectPrivateKey;
    var keylen = parseInt(algo.split("-")[1], 10) / 8;
    var key = compat.pbkdf2Sync(password, salt, iters, keylen, "sha1");
    var cipher = ciphers.createDecipheriv(algo, key, iv);
    var out = [];
    out.push(cipher.update(cipherText));
    out.push(cipher.final());
    return Buffer3.concat(out);
  }
  return exports$e$1;
}
function dew$d$1() {
  if (_dewExec$d$1)
    return exports$d$1;
  _dewExec$d$1 = true;
  var Buffer3 = dew$1T().Buffer;
  var createHmac2 = dew$1C();
  var crt = dew$W$1();
  var EC = dew$y$1().ec;
  var BN = dew$X$1();
  var parseKeys = dew$e$1();
  var curves = _curves$1;
  function sign(hash, key, hashType, signType, tag) {
    var priv = parseKeys(key);
    if (priv.curve) {
      if (signType !== "ecdsa" && signType !== "ecdsa/rsa")
        throw new Error("wrong private key type");
      return ecSign(hash, priv);
    } else if (priv.type === "dsa") {
      if (signType !== "dsa")
        throw new Error("wrong private key type");
      return dsaSign(hash, priv, hashType);
    } else {
      if (signType !== "rsa" && signType !== "ecdsa/rsa")
        throw new Error("wrong private key type");
    }
    hash = Buffer3.concat([tag, hash]);
    var len = priv.modulus.byteLength();
    var pad = [0, 1];
    while (hash.length + pad.length + 1 < len)
      pad.push(255);
    pad.push(0);
    var i8 = -1;
    while (++i8 < hash.length)
      pad.push(hash[i8]);
    var out = crt(pad, priv);
    return out;
  }
  function ecSign(hash, priv) {
    var curveId = curves[priv.curve.join(".")];
    if (!curveId)
      throw new Error("unknown curve " + priv.curve.join("."));
    var curve = new EC(curveId);
    var key = curve.keyFromPrivate(priv.privateKey);
    var out = key.sign(hash);
    return Buffer3.from(out.toDER());
  }
  function dsaSign(hash, priv, algo) {
    var x4 = priv.params.priv_key;
    var p8 = priv.params.p;
    var q3 = priv.params.q;
    var g5 = priv.params.g;
    var r9 = new BN(0);
    var k4;
    var H3 = bits2int(hash, q3).mod(q3);
    var s7 = false;
    var kv = getKey(x4, q3, hash, algo);
    while (s7 === false) {
      k4 = makeKey(q3, kv, algo);
      r9 = makeR(g5, k4, p8, q3);
      s7 = k4.invm(q3).imul(H3.add(x4.mul(r9))).mod(q3);
      if (s7.cmpn(0) === 0) {
        s7 = false;
        r9 = new BN(0);
      }
    }
    return toDER(r9, s7);
  }
  function toDER(r9, s7) {
    r9 = r9.toArray();
    s7 = s7.toArray();
    if (r9[0] & 128)
      r9 = [0].concat(r9);
    if (s7[0] & 128)
      s7 = [0].concat(s7);
    var total = r9.length + s7.length + 4;
    var res = [48, total, 2, r9.length];
    res = res.concat(r9, [2, s7.length], s7);
    return Buffer3.from(res);
  }
  function getKey(x4, q3, hash, algo) {
    x4 = Buffer3.from(x4.toArray());
    if (x4.length < q3.byteLength()) {
      var zeros = Buffer3.alloc(q3.byteLength() - x4.length);
      x4 = Buffer3.concat([zeros, x4]);
    }
    var hlen = hash.length;
    var hbits = bits2octets(hash, q3);
    var v6 = Buffer3.alloc(hlen);
    v6.fill(1);
    var k4 = Buffer3.alloc(hlen);
    k4 = createHmac2(algo, k4).update(v6).update(Buffer3.from([0])).update(x4).update(hbits).digest();
    v6 = createHmac2(algo, k4).update(v6).digest();
    k4 = createHmac2(algo, k4).update(v6).update(Buffer3.from([1])).update(x4).update(hbits).digest();
    v6 = createHmac2(algo, k4).update(v6).digest();
    return {
      k: k4,
      v: v6
    };
  }
  function bits2int(obits, q3) {
    var bits = new BN(obits);
    var shift = (obits.length << 3) - q3.bitLength();
    if (shift > 0)
      bits.ishrn(shift);
    return bits;
  }
  function bits2octets(bits, q3) {
    bits = bits2int(bits, q3);
    bits = bits.mod(q3);
    var out = Buffer3.from(bits.toArray());
    if (out.length < q3.byteLength()) {
      var zeros = Buffer3.alloc(q3.byteLength() - out.length);
      out = Buffer3.concat([zeros, out]);
    }
    return out;
  }
  function makeKey(q3, kv, algo) {
    var t8;
    var k4;
    do {
      t8 = Buffer3.alloc(0);
      while (t8.length * 8 < q3.bitLength()) {
        kv.v = createHmac2(algo, kv.k).update(kv.v).digest();
        t8 = Buffer3.concat([t8, kv.v]);
      }
      k4 = bits2int(t8, q3);
      kv.k = createHmac2(algo, kv.k).update(kv.v).update(Buffer3.from([0])).digest();
      kv.v = createHmac2(algo, kv.k).update(kv.v).digest();
    } while (k4.cmp(q3) !== -1);
    return k4;
  }
  function makeR(g5, k4, p8, q3) {
    return g5.toRed(BN.mont(p8)).redPow(k4).fromRed().mod(q3);
  }
  exports$d$1 = sign;
  exports$d$1.getKey = getKey;
  exports$d$1.makeKey = makeKey;
  return exports$d$1;
}
function dew$c$1() {
  if (_dewExec$c$1)
    return exports$c$1;
  _dewExec$c$1 = true;
  var Buffer3 = dew$1T().Buffer;
  var BN = dew$X$1();
  var EC = dew$y$1().ec;
  var parseKeys = dew$e$1();
  var curves = _curves$1;
  function verify(sig, hash, key, signType, tag) {
    var pub = parseKeys(key);
    if (pub.type === "ec") {
      if (signType !== "ecdsa" && signType !== "ecdsa/rsa")
        throw new Error("wrong public key type");
      return ecVerify(sig, hash, pub);
    } else if (pub.type === "dsa") {
      if (signType !== "dsa")
        throw new Error("wrong public key type");
      return dsaVerify(sig, hash, pub);
    } else {
      if (signType !== "rsa" && signType !== "ecdsa/rsa")
        throw new Error("wrong public key type");
    }
    hash = Buffer3.concat([tag, hash]);
    var len = pub.modulus.byteLength();
    var pad = [1];
    var padNum = 0;
    while (hash.length + pad.length + 2 < len) {
      pad.push(255);
      padNum++;
    }
    pad.push(0);
    var i8 = -1;
    while (++i8 < hash.length) {
      pad.push(hash[i8]);
    }
    pad = Buffer3.from(pad);
    var red = BN.mont(pub.modulus);
    sig = new BN(sig).toRed(red);
    sig = sig.redPow(new BN(pub.publicExponent));
    sig = Buffer3.from(sig.fromRed().toArray());
    var out = padNum < 8 ? 1 : 0;
    len = Math.min(sig.length, pad.length);
    if (sig.length !== pad.length)
      out = 1;
    i8 = -1;
    while (++i8 < len)
      out |= sig[i8] ^ pad[i8];
    return out === 0;
  }
  function ecVerify(sig, hash, pub) {
    var curveId = curves[pub.data.algorithm.curve.join(".")];
    if (!curveId)
      throw new Error("unknown curve " + pub.data.algorithm.curve.join("."));
    var curve = new EC(curveId);
    var pubkey = pub.data.subjectPrivateKey.data;
    return curve.verify(hash, sig, pubkey);
  }
  function dsaVerify(sig, hash, pub) {
    var p8 = pub.data.p;
    var q3 = pub.data.q;
    var g5 = pub.data.g;
    var y6 = pub.data.pub_key;
    var unpacked = parseKeys.signature.decode(sig, "der");
    var s7 = unpacked.s;
    var r9 = unpacked.r;
    checkValue(s7, q3);
    checkValue(r9, q3);
    var montp = BN.mont(p8);
    var w4 = s7.invm(q3);
    var v6 = g5.toRed(montp).redPow(new BN(hash).mul(w4).mod(q3)).fromRed().mul(y6.toRed(montp).redPow(r9.mul(w4).mod(q3)).fromRed()).mod(p8).mod(q3);
    return v6.cmp(r9) === 0;
  }
  function checkValue(b5, q3) {
    if (b5.cmpn(0) <= 0)
      throw new Error("invalid sig");
    if (b5.cmp(q3) >= q3)
      throw new Error("invalid sig");
  }
  exports$c$1 = verify;
  return exports$c$1;
}
function dew$b$1() {
  if (_dewExec$b$1)
    return exports$b$1;
  _dewExec$b$1 = true;
  var Buffer3 = dew$1T().Buffer;
  var createHash2 = dew$1F();
  var stream2 = dew$1V();
  var inherits4 = dew$f$2();
  var sign = dew$d$1();
  var verify = dew$c$1();
  var algorithms = _algorithms;
  Object.keys(algorithms).forEach(function(key) {
    algorithms[key].id = Buffer3.from(algorithms[key].id, "hex");
    algorithms[key.toLowerCase()] = algorithms[key];
  });
  function Sign2(algorithm) {
    stream2.Writable.call(this || _global$4$1);
    var data = algorithms[algorithm];
    if (!data)
      throw new Error("Unknown message digest");
    (this || _global$4$1)._hashType = data.hash;
    (this || _global$4$1)._hash = createHash2(data.hash);
    (this || _global$4$1)._tag = data.id;
    (this || _global$4$1)._signType = data.sign;
  }
  inherits4(Sign2, stream2.Writable);
  Sign2.prototype._write = function _write(data, _4, done) {
    (this || _global$4$1)._hash.update(data);
    done();
  };
  Sign2.prototype.update = function update(data, enc) {
    if (typeof data === "string")
      data = Buffer3.from(data, enc);
    (this || _global$4$1)._hash.update(data);
    return this || _global$4$1;
  };
  Sign2.prototype.sign = function signMethod(key, enc) {
    this.end();
    var hash = (this || _global$4$1)._hash.digest();
    var sig = sign(hash, key, (this || _global$4$1)._hashType, (this || _global$4$1)._signType, (this || _global$4$1)._tag);
    return enc ? sig.toString(enc) : sig;
  };
  function Verify2(algorithm) {
    stream2.Writable.call(this || _global$4$1);
    var data = algorithms[algorithm];
    if (!data)
      throw new Error("Unknown message digest");
    (this || _global$4$1)._hash = createHash2(data.hash);
    (this || _global$4$1)._tag = data.id;
    (this || _global$4$1)._signType = data.sign;
  }
  inherits4(Verify2, stream2.Writable);
  Verify2.prototype._write = function _write(data, _4, done) {
    (this || _global$4$1)._hash.update(data);
    done();
  };
  Verify2.prototype.update = function update(data, enc) {
    if (typeof data === "string")
      data = Buffer3.from(data, enc);
    (this || _global$4$1)._hash.update(data);
    return this || _global$4$1;
  };
  Verify2.prototype.verify = function verifyMethod(key, sig, enc) {
    if (typeof sig === "string")
      sig = Buffer3.from(sig, enc);
    this.end();
    var hash = (this || _global$4$1)._hash.digest();
    return verify(sig, hash, key, (this || _global$4$1)._signType, (this || _global$4$1)._tag);
  };
  function createSign2(algorithm) {
    return new Sign2(algorithm);
  }
  function createVerify2(algorithm) {
    return new Verify2(algorithm);
  }
  exports$b$1 = {
    Sign: createSign2,
    Verify: createVerify2,
    createSign: createSign2,
    createVerify: createVerify2
  };
  return exports$b$1;
}
function dew$a$1() {
  if (_dewExec$a$1)
    return module$1$1.exports;
  _dewExec$a$1 = true;
  (function(module3, exports11) {
    function assert2(val, msg) {
      if (!val)
        throw new Error(msg || "Assertion failed");
    }
    function inherits4(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function() {
      };
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }
    function BN(number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }
      (this || _global$3$1).negative = 0;
      (this || _global$3$1).words = null;
      (this || _global$3$1).length = 0;
      (this || _global$3$1).red = null;
      if (number !== null) {
        if (base === "le" || base === "be") {
          endian = base;
          base = 10;
        }
        this._init(number || 0, base || 10, endian || "be");
      }
    }
    if (typeof module3 === "object") {
      module3.exports = BN;
    } else {
      exports11.BN = BN;
    }
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer3;
    try {
      if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
        Buffer3 = window.Buffer;
      } else {
        Buffer3 = e$1$1.Buffer;
      }
    } catch (e11) {
    }
    BN.isBN = function isBN(num) {
      if (num instanceof BN) {
        return true;
      }
      return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
      if (left.cmp(right) > 0)
        return left;
      return right;
    };
    BN.min = function min(left, right) {
      if (left.cmp(right) < 0)
        return left;
      return right;
    };
    BN.prototype._init = function init2(number, base, endian) {
      if (typeof number === "number") {
        return this._initNumber(number, base, endian);
      }
      if (typeof number === "object") {
        return this._initArray(number, base, endian);
      }
      if (base === "hex") {
        base = 16;
      }
      assert2(base === (base | 0) && base >= 2 && base <= 36);
      number = number.toString().replace(/\s+/g, "");
      var start = 0;
      if (number[0] === "-") {
        start++;
        (this || _global$3$1).negative = 1;
      }
      if (start < number.length) {
        if (base === 16) {
          this._parseHex(number, start, endian);
        } else {
          this._parseBase(number, base, start);
          if (endian === "le") {
            this._initArray(this.toArray(), base, endian);
          }
        }
      }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
      if (number < 0) {
        (this || _global$3$1).negative = 1;
        number = -number;
      }
      if (number < 67108864) {
        (this || _global$3$1).words = [number & 67108863];
        (this || _global$3$1).length = 1;
      } else if (number < 4503599627370496) {
        (this || _global$3$1).words = [number & 67108863, number / 67108864 & 67108863];
        (this || _global$3$1).length = 2;
      } else {
        assert2(number < 9007199254740992);
        (this || _global$3$1).words = [number & 67108863, number / 67108864 & 67108863, 1];
        (this || _global$3$1).length = 3;
      }
      if (endian !== "le")
        return;
      this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
      assert2(typeof number.length === "number");
      if (number.length <= 0) {
        (this || _global$3$1).words = [0];
        (this || _global$3$1).length = 1;
        return this || _global$3$1;
      }
      (this || _global$3$1).length = Math.ceil(number.length / 3);
      (this || _global$3$1).words = new Array((this || _global$3$1).length);
      for (var i8 = 0; i8 < (this || _global$3$1).length; i8++) {
        (this || _global$3$1).words[i8] = 0;
      }
      var j4, w4;
      var off2 = 0;
      if (endian === "be") {
        for (i8 = number.length - 1, j4 = 0; i8 >= 0; i8 -= 3) {
          w4 = number[i8] | number[i8 - 1] << 8 | number[i8 - 2] << 16;
          (this || _global$3$1).words[j4] |= w4 << off2 & 67108863;
          (this || _global$3$1).words[j4 + 1] = w4 >>> 26 - off2 & 67108863;
          off2 += 24;
          if (off2 >= 26) {
            off2 -= 26;
            j4++;
          }
        }
      } else if (endian === "le") {
        for (i8 = 0, j4 = 0; i8 < number.length; i8 += 3) {
          w4 = number[i8] | number[i8 + 1] << 8 | number[i8 + 2] << 16;
          (this || _global$3$1).words[j4] |= w4 << off2 & 67108863;
          (this || _global$3$1).words[j4 + 1] = w4 >>> 26 - off2 & 67108863;
          off2 += 24;
          if (off2 >= 26) {
            off2 -= 26;
            j4++;
          }
        }
      }
      return this.strip();
    };
    function parseHex4Bits(string, index) {
      var c8 = string.charCodeAt(index);
      if (c8 >= 65 && c8 <= 70) {
        return c8 - 55;
      } else if (c8 >= 97 && c8 <= 102) {
        return c8 - 87;
      } else {
        return c8 - 48 & 15;
      }
    }
    function parseHexByte(string, lowerBound, index) {
      var r9 = parseHex4Bits(string, index);
      if (index - 1 >= lowerBound) {
        r9 |= parseHex4Bits(string, index - 1) << 4;
      }
      return r9;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
      (this || _global$3$1).length = Math.ceil((number.length - start) / 6);
      (this || _global$3$1).words = new Array((this || _global$3$1).length);
      for (var i8 = 0; i8 < (this || _global$3$1).length; i8++) {
        (this || _global$3$1).words[i8] = 0;
      }
      var off2 = 0;
      var j4 = 0;
      var w4;
      if (endian === "be") {
        for (i8 = number.length - 1; i8 >= start; i8 -= 2) {
          w4 = parseHexByte(number, start, i8) << off2;
          (this || _global$3$1).words[j4] |= w4 & 67108863;
          if (off2 >= 18) {
            off2 -= 18;
            j4 += 1;
            (this || _global$3$1).words[j4] |= w4 >>> 26;
          } else {
            off2 += 8;
          }
        }
      } else {
        var parseLength = number.length - start;
        for (i8 = parseLength % 2 === 0 ? start + 1 : start; i8 < number.length; i8 += 2) {
          w4 = parseHexByte(number, start, i8) << off2;
          (this || _global$3$1).words[j4] |= w4 & 67108863;
          if (off2 >= 18) {
            off2 -= 18;
            j4 += 1;
            (this || _global$3$1).words[j4] |= w4 >>> 26;
          } else {
            off2 += 8;
          }
        }
      }
      this.strip();
    };
    function parseBase(str, start, end, mul) {
      var r9 = 0;
      var len = Math.min(str.length, end);
      for (var i8 = start; i8 < len; i8++) {
        var c8 = str.charCodeAt(i8) - 48;
        r9 *= mul;
        if (c8 >= 49) {
          r9 += c8 - 49 + 10;
        } else if (c8 >= 17) {
          r9 += c8 - 17 + 10;
        } else {
          r9 += c8;
        }
      }
      return r9;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
      (this || _global$3$1).words = [0];
      (this || _global$3$1).length = 1;
      for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
        limbLen++;
      }
      limbLen--;
      limbPow = limbPow / base | 0;
      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;
      var word = 0;
      for (var i8 = start; i8 < end; i8 += limbLen) {
        word = parseBase(number, i8, i8 + limbLen, base);
        this.imuln(limbPow);
        if ((this || _global$3$1).words[0] + word < 67108864) {
          (this || _global$3$1).words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i8, number.length, base);
        for (i8 = 0; i8 < mod; i8++) {
          pow *= base;
        }
        this.imuln(pow);
        if ((this || _global$3$1).words[0] + word < 67108864) {
          (this || _global$3$1).words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
      this.strip();
    };
    BN.prototype.copy = function copy(dest) {
      dest.words = new Array((this || _global$3$1).length);
      for (var i8 = 0; i8 < (this || _global$3$1).length; i8++) {
        dest.words[i8] = (this || _global$3$1).words[i8];
      }
      dest.length = (this || _global$3$1).length;
      dest.negative = (this || _global$3$1).negative;
      dest.red = (this || _global$3$1).red;
    };
    BN.prototype.clone = function clone() {
      var r9 = new BN(null);
      this.copy(r9);
      return r9;
    };
    BN.prototype._expand = function _expand(size) {
      while ((this || _global$3$1).length < size) {
        (this || _global$3$1).words[(this || _global$3$1).length++] = 0;
      }
      return this || _global$3$1;
    };
    BN.prototype.strip = function strip() {
      while ((this || _global$3$1).length > 1 && (this || _global$3$1).words[(this || _global$3$1).length - 1] === 0) {
        (this || _global$3$1).length--;
      }
      return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
      if ((this || _global$3$1).length === 1 && (this || _global$3$1).words[0] === 0) {
        (this || _global$3$1).negative = 0;
      }
      return this || _global$3$1;
    };
    BN.prototype.inspect = function inspect3() {
      return ((this || _global$3$1).red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    var zeros = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"];
    var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
    var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
    BN.prototype.toString = function toString3(base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;
      var out;
      if (base === 16 || base === "hex") {
        out = "";
        var off2 = 0;
        var carry = 0;
        for (var i8 = 0; i8 < (this || _global$3$1).length; i8++) {
          var w4 = (this || _global$3$1).words[i8];
          var word = ((w4 << off2 | carry) & 16777215).toString(16);
          carry = w4 >>> 24 - off2 & 16777215;
          if (carry !== 0 || i8 !== (this || _global$3$1).length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }
          off2 += 2;
          if (off2 >= 26) {
            off2 -= 26;
            i8--;
          }
        }
        if (carry !== 0) {
          out = carry.toString(16) + out;
        }
        while (out.length % padding !== 0) {
          out = "0" + out;
        }
        if ((this || _global$3$1).negative !== 0) {
          out = "-" + out;
        }
        return out;
      }
      if (base === (base | 0) && base >= 2 && base <= 36) {
        var groupSize = groupSizes[base];
        var groupBase = groupBases[base];
        out = "";
        var c8 = this.clone();
        c8.negative = 0;
        while (!c8.isZero()) {
          var r9 = c8.modn(groupBase).toString(base);
          c8 = c8.idivn(groupBase);
          if (!c8.isZero()) {
            out = zeros[groupSize - r9.length] + r9 + out;
          } else {
            out = r9 + out;
          }
        }
        if (this.isZero()) {
          out = "0" + out;
        }
        while (out.length % padding !== 0) {
          out = "0" + out;
        }
        if ((this || _global$3$1).negative !== 0) {
          out = "-" + out;
        }
        return out;
      }
      assert2(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
      var ret = (this || _global$3$1).words[0];
      if ((this || _global$3$1).length === 2) {
        ret += (this || _global$3$1).words[1] * 67108864;
      } else if ((this || _global$3$1).length === 3 && (this || _global$3$1).words[2] === 1) {
        ret += 4503599627370496 + (this || _global$3$1).words[1] * 67108864;
      } else if ((this || _global$3$1).length > 2) {
        assert2(false, "Number can only safely store up to 53 bits");
      }
      return (this || _global$3$1).negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON2() {
      return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
      assert2(typeof Buffer3 !== "undefined");
      return this.toArrayLike(Buffer3, endian, length);
    };
    BN.prototype.toArray = function toArray2(endian, length) {
      return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert2(byteLength <= reqLength, "byte array longer than desired length");
      assert2(reqLength > 0, "Requested array length <= 0");
      this.strip();
      var littleEndian = endian === "le";
      var res = new ArrayType(reqLength);
      var b5, i8;
      var q3 = this.clone();
      if (!littleEndian) {
        for (i8 = 0; i8 < reqLength - byteLength; i8++) {
          res[i8] = 0;
        }
        for (i8 = 0; !q3.isZero(); i8++) {
          b5 = q3.andln(255);
          q3.iushrn(8);
          res[reqLength - i8 - 1] = b5;
        }
      } else {
        for (i8 = 0; !q3.isZero(); i8++) {
          b5 = q3.andln(255);
          q3.iushrn(8);
          res[i8] = b5;
        }
        for (; i8 < reqLength; i8++) {
          res[i8] = 0;
        }
      }
      return res;
    };
    if (Math.clz32) {
      BN.prototype._countBits = function _countBits(w4) {
        return 32 - Math.clz32(w4);
      };
    } else {
      BN.prototype._countBits = function _countBits(w4) {
        var t8 = w4;
        var r9 = 0;
        if (t8 >= 4096) {
          r9 += 13;
          t8 >>>= 13;
        }
        if (t8 >= 64) {
          r9 += 7;
          t8 >>>= 7;
        }
        if (t8 >= 8) {
          r9 += 4;
          t8 >>>= 4;
        }
        if (t8 >= 2) {
          r9 += 2;
          t8 >>>= 2;
        }
        return r9 + t8;
      };
    }
    BN.prototype._zeroBits = function _zeroBits(w4) {
      if (w4 === 0)
        return 26;
      var t8 = w4;
      var r9 = 0;
      if ((t8 & 8191) === 0) {
        r9 += 13;
        t8 >>>= 13;
      }
      if ((t8 & 127) === 0) {
        r9 += 7;
        t8 >>>= 7;
      }
      if ((t8 & 15) === 0) {
        r9 += 4;
        t8 >>>= 4;
      }
      if ((t8 & 3) === 0) {
        r9 += 2;
        t8 >>>= 2;
      }
      if ((t8 & 1) === 0) {
        r9++;
      }
      return r9;
    };
    BN.prototype.bitLength = function bitLength() {
      var w4 = (this || _global$3$1).words[(this || _global$3$1).length - 1];
      var hi = this._countBits(w4);
      return ((this || _global$3$1).length - 1) * 26 + hi;
    };
    function toBitArray(num) {
      var w4 = new Array(num.bitLength());
      for (var bit = 0; bit < w4.length; bit++) {
        var off2 = bit / 26 | 0;
        var wbit = bit % 26;
        w4[bit] = (num.words[off2] & 1 << wbit) >>> wbit;
      }
      return w4;
    }
    BN.prototype.zeroBits = function zeroBits() {
      if (this.isZero())
        return 0;
      var r9 = 0;
      for (var i8 = 0; i8 < (this || _global$3$1).length; i8++) {
        var b5 = this._zeroBits((this || _global$3$1).words[i8]);
        r9 += b5;
        if (b5 !== 26)
          break;
      }
      return r9;
    };
    BN.prototype.byteLength = function byteLength() {
      return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
      if ((this || _global$3$1).negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }
      return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }
      return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
      return (this || _global$3$1).negative !== 0;
    };
    BN.prototype.neg = function neg() {
      return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
      if (!this.isZero()) {
        (this || _global$3$1).negative ^= 1;
      }
      return this || _global$3$1;
    };
    BN.prototype.iuor = function iuor(num) {
      while ((this || _global$3$1).length < num.length) {
        (this || _global$3$1).words[(this || _global$3$1).length++] = 0;
      }
      for (var i8 = 0; i8 < num.length; i8++) {
        (this || _global$3$1).words[i8] = (this || _global$3$1).words[i8] | num.words[i8];
      }
      return this.strip();
    };
    BN.prototype.ior = function ior(num) {
      assert2(((this || _global$3$1).negative | num.negative) === 0);
      return this.iuor(num);
    };
    BN.prototype.or = function or(num) {
      if ((this || _global$3$1).length > num.length)
        return this.clone().ior(num);
      return num.clone().ior(this || _global$3$1);
    };
    BN.prototype.uor = function uor(num) {
      if ((this || _global$3$1).length > num.length)
        return this.clone().iuor(num);
      return num.clone().iuor(this || _global$3$1);
    };
    BN.prototype.iuand = function iuand(num) {
      var b5;
      if ((this || _global$3$1).length > num.length) {
        b5 = num;
      } else {
        b5 = this || _global$3$1;
      }
      for (var i8 = 0; i8 < b5.length; i8++) {
        (this || _global$3$1).words[i8] = (this || _global$3$1).words[i8] & num.words[i8];
      }
      (this || _global$3$1).length = b5.length;
      return this.strip();
    };
    BN.prototype.iand = function iand(num) {
      assert2(((this || _global$3$1).negative | num.negative) === 0);
      return this.iuand(num);
    };
    BN.prototype.and = function and(num) {
      if ((this || _global$3$1).length > num.length)
        return this.clone().iand(num);
      return num.clone().iand(this || _global$3$1);
    };
    BN.prototype.uand = function uand(num) {
      if ((this || _global$3$1).length > num.length)
        return this.clone().iuand(num);
      return num.clone().iuand(this || _global$3$1);
    };
    BN.prototype.iuxor = function iuxor(num) {
      var a8;
      var b5;
      if ((this || _global$3$1).length > num.length) {
        a8 = this || _global$3$1;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$3$1;
      }
      for (var i8 = 0; i8 < b5.length; i8++) {
        (this || _global$3$1).words[i8] = a8.words[i8] ^ b5.words[i8];
      }
      if ((this || _global$3$1) !== a8) {
        for (; i8 < a8.length; i8++) {
          (this || _global$3$1).words[i8] = a8.words[i8];
        }
      }
      (this || _global$3$1).length = a8.length;
      return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
      assert2(((this || _global$3$1).negative | num.negative) === 0);
      return this.iuxor(num);
    };
    BN.prototype.xor = function xor(num) {
      if ((this || _global$3$1).length > num.length)
        return this.clone().ixor(num);
      return num.clone().ixor(this || _global$3$1);
    };
    BN.prototype.uxor = function uxor(num) {
      if ((this || _global$3$1).length > num.length)
        return this.clone().iuxor(num);
      return num.clone().iuxor(this || _global$3$1);
    };
    BN.prototype.inotn = function inotn(width) {
      assert2(typeof width === "number" && width >= 0);
      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;
      this._expand(bytesNeeded);
      if (bitsLeft > 0) {
        bytesNeeded--;
      }
      for (var i8 = 0; i8 < bytesNeeded; i8++) {
        (this || _global$3$1).words[i8] = ~(this || _global$3$1).words[i8] & 67108863;
      }
      if (bitsLeft > 0) {
        (this || _global$3$1).words[i8] = ~(this || _global$3$1).words[i8] & 67108863 >> 26 - bitsLeft;
      }
      return this.strip();
    };
    BN.prototype.notn = function notn(width) {
      return this.clone().inotn(width);
    };
    BN.prototype.setn = function setn(bit, val) {
      assert2(typeof bit === "number" && bit >= 0);
      var off2 = bit / 26 | 0;
      var wbit = bit % 26;
      this._expand(off2 + 1);
      if (val) {
        (this || _global$3$1).words[off2] = (this || _global$3$1).words[off2] | 1 << wbit;
      } else {
        (this || _global$3$1).words[off2] = (this || _global$3$1).words[off2] & ~(1 << wbit);
      }
      return this.strip();
    };
    BN.prototype.iadd = function iadd(num) {
      var r9;
      if ((this || _global$3$1).negative !== 0 && num.negative === 0) {
        (this || _global$3$1).negative = 0;
        r9 = this.isub(num);
        (this || _global$3$1).negative ^= 1;
        return this._normSign();
      } else if ((this || _global$3$1).negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r9 = this.isub(num);
        num.negative = 1;
        return r9._normSign();
      }
      var a8, b5;
      if ((this || _global$3$1).length > num.length) {
        a8 = this || _global$3$1;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$3$1;
      }
      var carry = 0;
      for (var i8 = 0; i8 < b5.length; i8++) {
        r9 = (a8.words[i8] | 0) + (b5.words[i8] | 0) + carry;
        (this || _global$3$1).words[i8] = r9 & 67108863;
        carry = r9 >>> 26;
      }
      for (; carry !== 0 && i8 < a8.length; i8++) {
        r9 = (a8.words[i8] | 0) + carry;
        (this || _global$3$1).words[i8] = r9 & 67108863;
        carry = r9 >>> 26;
      }
      (this || _global$3$1).length = a8.length;
      if (carry !== 0) {
        (this || _global$3$1).words[(this || _global$3$1).length] = carry;
        (this || _global$3$1).length++;
      } else if (a8 !== (this || _global$3$1)) {
        for (; i8 < a8.length; i8++) {
          (this || _global$3$1).words[i8] = a8.words[i8];
        }
      }
      return this || _global$3$1;
    };
    BN.prototype.add = function add(num) {
      var res;
      if (num.negative !== 0 && (this || _global$3$1).negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && (this || _global$3$1).negative !== 0) {
        (this || _global$3$1).negative = 0;
        res = num.sub(this || _global$3$1);
        (this || _global$3$1).negative = 1;
        return res;
      }
      if ((this || _global$3$1).length > num.length)
        return this.clone().iadd(num);
      return num.clone().iadd(this || _global$3$1);
    };
    BN.prototype.isub = function isub(num) {
      if (num.negative !== 0) {
        num.negative = 0;
        var r9 = this.iadd(num);
        num.negative = 1;
        return r9._normSign();
      } else if ((this || _global$3$1).negative !== 0) {
        (this || _global$3$1).negative = 0;
        this.iadd(num);
        (this || _global$3$1).negative = 1;
        return this._normSign();
      }
      var cmp = this.cmp(num);
      if (cmp === 0) {
        (this || _global$3$1).negative = 0;
        (this || _global$3$1).length = 1;
        (this || _global$3$1).words[0] = 0;
        return this || _global$3$1;
      }
      var a8, b5;
      if (cmp > 0) {
        a8 = this || _global$3$1;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$3$1;
      }
      var carry = 0;
      for (var i8 = 0; i8 < b5.length; i8++) {
        r9 = (a8.words[i8] | 0) - (b5.words[i8] | 0) + carry;
        carry = r9 >> 26;
        (this || _global$3$1).words[i8] = r9 & 67108863;
      }
      for (; carry !== 0 && i8 < a8.length; i8++) {
        r9 = (a8.words[i8] | 0) + carry;
        carry = r9 >> 26;
        (this || _global$3$1).words[i8] = r9 & 67108863;
      }
      if (carry === 0 && i8 < a8.length && a8 !== (this || _global$3$1)) {
        for (; i8 < a8.length; i8++) {
          (this || _global$3$1).words[i8] = a8.words[i8];
        }
      }
      (this || _global$3$1).length = Math.max((this || _global$3$1).length, i8);
      if (a8 !== (this || _global$3$1)) {
        (this || _global$3$1).negative = 1;
      }
      return this.strip();
    };
    BN.prototype.sub = function sub(num) {
      return this.clone().isub(num);
    };
    function smallMulTo(self2, num, out) {
      out.negative = num.negative ^ self2.negative;
      var len = self2.length + num.length | 0;
      out.length = len;
      len = len - 1 | 0;
      var a8 = self2.words[0] | 0;
      var b5 = num.words[0] | 0;
      var r9 = a8 * b5;
      var lo = r9 & 67108863;
      var carry = r9 / 67108864 | 0;
      out.words[0] = lo;
      for (var k4 = 1; k4 < len; k4++) {
        var ncarry = carry >>> 26;
        var rword = carry & 67108863;
        var maxJ = Math.min(k4, num.length - 1);
        for (var j4 = Math.max(0, k4 - self2.length + 1); j4 <= maxJ; j4++) {
          var i8 = k4 - j4 | 0;
          a8 = self2.words[i8] | 0;
          b5 = num.words[j4] | 0;
          r9 = a8 * b5 + rword;
          ncarry += r9 / 67108864 | 0;
          rword = r9 & 67108863;
        }
        out.words[k4] = rword | 0;
        carry = ncarry | 0;
      }
      if (carry !== 0) {
        out.words[k4] = carry | 0;
      } else {
        out.length--;
      }
      return out.strip();
    }
    var comb10MulTo = function comb10MulTo2(self2, num, out) {
      var a8 = self2.words;
      var b5 = num.words;
      var o9 = out.words;
      var c8 = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a8[0] | 0;
      var al0 = a0 & 8191;
      var ah0 = a0 >>> 13;
      var a1 = a8[1] | 0;
      var al1 = a1 & 8191;
      var ah1 = a1 >>> 13;
      var a22 = a8[2] | 0;
      var al2 = a22 & 8191;
      var ah2 = a22 >>> 13;
      var a32 = a8[3] | 0;
      var al3 = a32 & 8191;
      var ah3 = a32 >>> 13;
      var a42 = a8[4] | 0;
      var al4 = a42 & 8191;
      var ah4 = a42 >>> 13;
      var a52 = a8[5] | 0;
      var al5 = a52 & 8191;
      var ah5 = a52 >>> 13;
      var a62 = a8[6] | 0;
      var al6 = a62 & 8191;
      var ah6 = a62 >>> 13;
      var a72 = a8[7] | 0;
      var al7 = a72 & 8191;
      var ah7 = a72 >>> 13;
      var a82 = a8[8] | 0;
      var al8 = a82 & 8191;
      var ah8 = a82 >>> 13;
      var a9 = a8[9] | 0;
      var al9 = a9 & 8191;
      var ah9 = a9 >>> 13;
      var b0 = b5[0] | 0;
      var bl0 = b0 & 8191;
      var bh0 = b0 >>> 13;
      var b1 = b5[1] | 0;
      var bl1 = b1 & 8191;
      var bh1 = b1 >>> 13;
      var b22 = b5[2] | 0;
      var bl2 = b22 & 8191;
      var bh2 = b22 >>> 13;
      var b32 = b5[3] | 0;
      var bl3 = b32 & 8191;
      var bh3 = b32 >>> 13;
      var b42 = b5[4] | 0;
      var bl4 = b42 & 8191;
      var bh4 = b42 >>> 13;
      var b52 = b5[5] | 0;
      var bl5 = b52 & 8191;
      var bh5 = b52 >>> 13;
      var b6 = b5[6] | 0;
      var bl6 = b6 & 8191;
      var bh6 = b6 >>> 13;
      var b7 = b5[7] | 0;
      var bl7 = b7 & 8191;
      var bh7 = b7 >>> 13;
      var b8 = b5[8] | 0;
      var bl8 = b8 & 8191;
      var bh8 = b8 >>> 13;
      var b9 = b5[9] | 0;
      var bl9 = b9 & 8191;
      var bh9 = b9 >>> 13;
      out.negative = self2.negative ^ num.negative;
      out.length = 19;
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = mid + Math.imul(ah0, bl0) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
      w0 &= 67108863;
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = mid + Math.imul(ah1, bl0) | 0;
      hi = Math.imul(ah1, bh0);
      lo = lo + Math.imul(al0, bl1) | 0;
      mid = mid + Math.imul(al0, bh1) | 0;
      mid = mid + Math.imul(ah0, bl1) | 0;
      hi = hi + Math.imul(ah0, bh1) | 0;
      var w1 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
      w1 &= 67108863;
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = mid + Math.imul(ah2, bl0) | 0;
      hi = Math.imul(ah2, bh0);
      lo = lo + Math.imul(al1, bl1) | 0;
      mid = mid + Math.imul(al1, bh1) | 0;
      mid = mid + Math.imul(ah1, bl1) | 0;
      hi = hi + Math.imul(ah1, bh1) | 0;
      lo = lo + Math.imul(al0, bl2) | 0;
      mid = mid + Math.imul(al0, bh2) | 0;
      mid = mid + Math.imul(ah0, bl2) | 0;
      hi = hi + Math.imul(ah0, bh2) | 0;
      var w22 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w22 >>> 26) | 0;
      w22 &= 67108863;
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = mid + Math.imul(ah3, bl0) | 0;
      hi = Math.imul(ah3, bh0);
      lo = lo + Math.imul(al2, bl1) | 0;
      mid = mid + Math.imul(al2, bh1) | 0;
      mid = mid + Math.imul(ah2, bl1) | 0;
      hi = hi + Math.imul(ah2, bh1) | 0;
      lo = lo + Math.imul(al1, bl2) | 0;
      mid = mid + Math.imul(al1, bh2) | 0;
      mid = mid + Math.imul(ah1, bl2) | 0;
      hi = hi + Math.imul(ah1, bh2) | 0;
      lo = lo + Math.imul(al0, bl3) | 0;
      mid = mid + Math.imul(al0, bh3) | 0;
      mid = mid + Math.imul(ah0, bl3) | 0;
      hi = hi + Math.imul(ah0, bh3) | 0;
      var w32 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w32 >>> 26) | 0;
      w32 &= 67108863;
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = mid + Math.imul(ah4, bl0) | 0;
      hi = Math.imul(ah4, bh0);
      lo = lo + Math.imul(al3, bl1) | 0;
      mid = mid + Math.imul(al3, bh1) | 0;
      mid = mid + Math.imul(ah3, bl1) | 0;
      hi = hi + Math.imul(ah3, bh1) | 0;
      lo = lo + Math.imul(al2, bl2) | 0;
      mid = mid + Math.imul(al2, bh2) | 0;
      mid = mid + Math.imul(ah2, bl2) | 0;
      hi = hi + Math.imul(ah2, bh2) | 0;
      lo = lo + Math.imul(al1, bl3) | 0;
      mid = mid + Math.imul(al1, bh3) | 0;
      mid = mid + Math.imul(ah1, bl3) | 0;
      hi = hi + Math.imul(ah1, bh3) | 0;
      lo = lo + Math.imul(al0, bl4) | 0;
      mid = mid + Math.imul(al0, bh4) | 0;
      mid = mid + Math.imul(ah0, bl4) | 0;
      hi = hi + Math.imul(ah0, bh4) | 0;
      var w4 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
      w4 &= 67108863;
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = mid + Math.imul(ah5, bl0) | 0;
      hi = Math.imul(ah5, bh0);
      lo = lo + Math.imul(al4, bl1) | 0;
      mid = mid + Math.imul(al4, bh1) | 0;
      mid = mid + Math.imul(ah4, bl1) | 0;
      hi = hi + Math.imul(ah4, bh1) | 0;
      lo = lo + Math.imul(al3, bl2) | 0;
      mid = mid + Math.imul(al3, bh2) | 0;
      mid = mid + Math.imul(ah3, bl2) | 0;
      hi = hi + Math.imul(ah3, bh2) | 0;
      lo = lo + Math.imul(al2, bl3) | 0;
      mid = mid + Math.imul(al2, bh3) | 0;
      mid = mid + Math.imul(ah2, bl3) | 0;
      hi = hi + Math.imul(ah2, bh3) | 0;
      lo = lo + Math.imul(al1, bl4) | 0;
      mid = mid + Math.imul(al1, bh4) | 0;
      mid = mid + Math.imul(ah1, bl4) | 0;
      hi = hi + Math.imul(ah1, bh4) | 0;
      lo = lo + Math.imul(al0, bl5) | 0;
      mid = mid + Math.imul(al0, bh5) | 0;
      mid = mid + Math.imul(ah0, bl5) | 0;
      hi = hi + Math.imul(ah0, bh5) | 0;
      var w5 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
      w5 &= 67108863;
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = mid + Math.imul(ah6, bl0) | 0;
      hi = Math.imul(ah6, bh0);
      lo = lo + Math.imul(al5, bl1) | 0;
      mid = mid + Math.imul(al5, bh1) | 0;
      mid = mid + Math.imul(ah5, bl1) | 0;
      hi = hi + Math.imul(ah5, bh1) | 0;
      lo = lo + Math.imul(al4, bl2) | 0;
      mid = mid + Math.imul(al4, bh2) | 0;
      mid = mid + Math.imul(ah4, bl2) | 0;
      hi = hi + Math.imul(ah4, bh2) | 0;
      lo = lo + Math.imul(al3, bl3) | 0;
      mid = mid + Math.imul(al3, bh3) | 0;
      mid = mid + Math.imul(ah3, bl3) | 0;
      hi = hi + Math.imul(ah3, bh3) | 0;
      lo = lo + Math.imul(al2, bl4) | 0;
      mid = mid + Math.imul(al2, bh4) | 0;
      mid = mid + Math.imul(ah2, bl4) | 0;
      hi = hi + Math.imul(ah2, bh4) | 0;
      lo = lo + Math.imul(al1, bl5) | 0;
      mid = mid + Math.imul(al1, bh5) | 0;
      mid = mid + Math.imul(ah1, bl5) | 0;
      hi = hi + Math.imul(ah1, bh5) | 0;
      lo = lo + Math.imul(al0, bl6) | 0;
      mid = mid + Math.imul(al0, bh6) | 0;
      mid = mid + Math.imul(ah0, bl6) | 0;
      hi = hi + Math.imul(ah0, bh6) | 0;
      var w6 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
      w6 &= 67108863;
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = mid + Math.imul(ah7, bl0) | 0;
      hi = Math.imul(ah7, bh0);
      lo = lo + Math.imul(al6, bl1) | 0;
      mid = mid + Math.imul(al6, bh1) | 0;
      mid = mid + Math.imul(ah6, bl1) | 0;
      hi = hi + Math.imul(ah6, bh1) | 0;
      lo = lo + Math.imul(al5, bl2) | 0;
      mid = mid + Math.imul(al5, bh2) | 0;
      mid = mid + Math.imul(ah5, bl2) | 0;
      hi = hi + Math.imul(ah5, bh2) | 0;
      lo = lo + Math.imul(al4, bl3) | 0;
      mid = mid + Math.imul(al4, bh3) | 0;
      mid = mid + Math.imul(ah4, bl3) | 0;
      hi = hi + Math.imul(ah4, bh3) | 0;
      lo = lo + Math.imul(al3, bl4) | 0;
      mid = mid + Math.imul(al3, bh4) | 0;
      mid = mid + Math.imul(ah3, bl4) | 0;
      hi = hi + Math.imul(ah3, bh4) | 0;
      lo = lo + Math.imul(al2, bl5) | 0;
      mid = mid + Math.imul(al2, bh5) | 0;
      mid = mid + Math.imul(ah2, bl5) | 0;
      hi = hi + Math.imul(ah2, bh5) | 0;
      lo = lo + Math.imul(al1, bl6) | 0;
      mid = mid + Math.imul(al1, bh6) | 0;
      mid = mid + Math.imul(ah1, bl6) | 0;
      hi = hi + Math.imul(ah1, bh6) | 0;
      lo = lo + Math.imul(al0, bl7) | 0;
      mid = mid + Math.imul(al0, bh7) | 0;
      mid = mid + Math.imul(ah0, bl7) | 0;
      hi = hi + Math.imul(ah0, bh7) | 0;
      var w7 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
      w7 &= 67108863;
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = mid + Math.imul(ah8, bl0) | 0;
      hi = Math.imul(ah8, bh0);
      lo = lo + Math.imul(al7, bl1) | 0;
      mid = mid + Math.imul(al7, bh1) | 0;
      mid = mid + Math.imul(ah7, bl1) | 0;
      hi = hi + Math.imul(ah7, bh1) | 0;
      lo = lo + Math.imul(al6, bl2) | 0;
      mid = mid + Math.imul(al6, bh2) | 0;
      mid = mid + Math.imul(ah6, bl2) | 0;
      hi = hi + Math.imul(ah6, bh2) | 0;
      lo = lo + Math.imul(al5, bl3) | 0;
      mid = mid + Math.imul(al5, bh3) | 0;
      mid = mid + Math.imul(ah5, bl3) | 0;
      hi = hi + Math.imul(ah5, bh3) | 0;
      lo = lo + Math.imul(al4, bl4) | 0;
      mid = mid + Math.imul(al4, bh4) | 0;
      mid = mid + Math.imul(ah4, bl4) | 0;
      hi = hi + Math.imul(ah4, bh4) | 0;
      lo = lo + Math.imul(al3, bl5) | 0;
      mid = mid + Math.imul(al3, bh5) | 0;
      mid = mid + Math.imul(ah3, bl5) | 0;
      hi = hi + Math.imul(ah3, bh5) | 0;
      lo = lo + Math.imul(al2, bl6) | 0;
      mid = mid + Math.imul(al2, bh6) | 0;
      mid = mid + Math.imul(ah2, bl6) | 0;
      hi = hi + Math.imul(ah2, bh6) | 0;
      lo = lo + Math.imul(al1, bl7) | 0;
      mid = mid + Math.imul(al1, bh7) | 0;
      mid = mid + Math.imul(ah1, bl7) | 0;
      hi = hi + Math.imul(ah1, bh7) | 0;
      lo = lo + Math.imul(al0, bl8) | 0;
      mid = mid + Math.imul(al0, bh8) | 0;
      mid = mid + Math.imul(ah0, bl8) | 0;
      hi = hi + Math.imul(ah0, bh8) | 0;
      var w8 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
      w8 &= 67108863;
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = mid + Math.imul(ah9, bl0) | 0;
      hi = Math.imul(ah9, bh0);
      lo = lo + Math.imul(al8, bl1) | 0;
      mid = mid + Math.imul(al8, bh1) | 0;
      mid = mid + Math.imul(ah8, bl1) | 0;
      hi = hi + Math.imul(ah8, bh1) | 0;
      lo = lo + Math.imul(al7, bl2) | 0;
      mid = mid + Math.imul(al7, bh2) | 0;
      mid = mid + Math.imul(ah7, bl2) | 0;
      hi = hi + Math.imul(ah7, bh2) | 0;
      lo = lo + Math.imul(al6, bl3) | 0;
      mid = mid + Math.imul(al6, bh3) | 0;
      mid = mid + Math.imul(ah6, bl3) | 0;
      hi = hi + Math.imul(ah6, bh3) | 0;
      lo = lo + Math.imul(al5, bl4) | 0;
      mid = mid + Math.imul(al5, bh4) | 0;
      mid = mid + Math.imul(ah5, bl4) | 0;
      hi = hi + Math.imul(ah5, bh4) | 0;
      lo = lo + Math.imul(al4, bl5) | 0;
      mid = mid + Math.imul(al4, bh5) | 0;
      mid = mid + Math.imul(ah4, bl5) | 0;
      hi = hi + Math.imul(ah4, bh5) | 0;
      lo = lo + Math.imul(al3, bl6) | 0;
      mid = mid + Math.imul(al3, bh6) | 0;
      mid = mid + Math.imul(ah3, bl6) | 0;
      hi = hi + Math.imul(ah3, bh6) | 0;
      lo = lo + Math.imul(al2, bl7) | 0;
      mid = mid + Math.imul(al2, bh7) | 0;
      mid = mid + Math.imul(ah2, bl7) | 0;
      hi = hi + Math.imul(ah2, bh7) | 0;
      lo = lo + Math.imul(al1, bl8) | 0;
      mid = mid + Math.imul(al1, bh8) | 0;
      mid = mid + Math.imul(ah1, bl8) | 0;
      hi = hi + Math.imul(ah1, bh8) | 0;
      lo = lo + Math.imul(al0, bl9) | 0;
      mid = mid + Math.imul(al0, bh9) | 0;
      mid = mid + Math.imul(ah0, bl9) | 0;
      hi = hi + Math.imul(ah0, bh9) | 0;
      var w9 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
      w9 &= 67108863;
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = mid + Math.imul(ah9, bl1) | 0;
      hi = Math.imul(ah9, bh1);
      lo = lo + Math.imul(al8, bl2) | 0;
      mid = mid + Math.imul(al8, bh2) | 0;
      mid = mid + Math.imul(ah8, bl2) | 0;
      hi = hi + Math.imul(ah8, bh2) | 0;
      lo = lo + Math.imul(al7, bl3) | 0;
      mid = mid + Math.imul(al7, bh3) | 0;
      mid = mid + Math.imul(ah7, bl3) | 0;
      hi = hi + Math.imul(ah7, bh3) | 0;
      lo = lo + Math.imul(al6, bl4) | 0;
      mid = mid + Math.imul(al6, bh4) | 0;
      mid = mid + Math.imul(ah6, bl4) | 0;
      hi = hi + Math.imul(ah6, bh4) | 0;
      lo = lo + Math.imul(al5, bl5) | 0;
      mid = mid + Math.imul(al5, bh5) | 0;
      mid = mid + Math.imul(ah5, bl5) | 0;
      hi = hi + Math.imul(ah5, bh5) | 0;
      lo = lo + Math.imul(al4, bl6) | 0;
      mid = mid + Math.imul(al4, bh6) | 0;
      mid = mid + Math.imul(ah4, bl6) | 0;
      hi = hi + Math.imul(ah4, bh6) | 0;
      lo = lo + Math.imul(al3, bl7) | 0;
      mid = mid + Math.imul(al3, bh7) | 0;
      mid = mid + Math.imul(ah3, bl7) | 0;
      hi = hi + Math.imul(ah3, bh7) | 0;
      lo = lo + Math.imul(al2, bl8) | 0;
      mid = mid + Math.imul(al2, bh8) | 0;
      mid = mid + Math.imul(ah2, bl8) | 0;
      hi = hi + Math.imul(ah2, bh8) | 0;
      lo = lo + Math.imul(al1, bl9) | 0;
      mid = mid + Math.imul(al1, bh9) | 0;
      mid = mid + Math.imul(ah1, bl9) | 0;
      hi = hi + Math.imul(ah1, bh9) | 0;
      var w10 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
      w10 &= 67108863;
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = mid + Math.imul(ah9, bl2) | 0;
      hi = Math.imul(ah9, bh2);
      lo = lo + Math.imul(al8, bl3) | 0;
      mid = mid + Math.imul(al8, bh3) | 0;
      mid = mid + Math.imul(ah8, bl3) | 0;
      hi = hi + Math.imul(ah8, bh3) | 0;
      lo = lo + Math.imul(al7, bl4) | 0;
      mid = mid + Math.imul(al7, bh4) | 0;
      mid = mid + Math.imul(ah7, bl4) | 0;
      hi = hi + Math.imul(ah7, bh4) | 0;
      lo = lo + Math.imul(al6, bl5) | 0;
      mid = mid + Math.imul(al6, bh5) | 0;
      mid = mid + Math.imul(ah6, bl5) | 0;
      hi = hi + Math.imul(ah6, bh5) | 0;
      lo = lo + Math.imul(al5, bl6) | 0;
      mid = mid + Math.imul(al5, bh6) | 0;
      mid = mid + Math.imul(ah5, bl6) | 0;
      hi = hi + Math.imul(ah5, bh6) | 0;
      lo = lo + Math.imul(al4, bl7) | 0;
      mid = mid + Math.imul(al4, bh7) | 0;
      mid = mid + Math.imul(ah4, bl7) | 0;
      hi = hi + Math.imul(ah4, bh7) | 0;
      lo = lo + Math.imul(al3, bl8) | 0;
      mid = mid + Math.imul(al3, bh8) | 0;
      mid = mid + Math.imul(ah3, bl8) | 0;
      hi = hi + Math.imul(ah3, bh8) | 0;
      lo = lo + Math.imul(al2, bl9) | 0;
      mid = mid + Math.imul(al2, bh9) | 0;
      mid = mid + Math.imul(ah2, bl9) | 0;
      hi = hi + Math.imul(ah2, bh9) | 0;
      var w11 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
      w11 &= 67108863;
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = mid + Math.imul(ah9, bl3) | 0;
      hi = Math.imul(ah9, bh3);
      lo = lo + Math.imul(al8, bl4) | 0;
      mid = mid + Math.imul(al8, bh4) | 0;
      mid = mid + Math.imul(ah8, bl4) | 0;
      hi = hi + Math.imul(ah8, bh4) | 0;
      lo = lo + Math.imul(al7, bl5) | 0;
      mid = mid + Math.imul(al7, bh5) | 0;
      mid = mid + Math.imul(ah7, bl5) | 0;
      hi = hi + Math.imul(ah7, bh5) | 0;
      lo = lo + Math.imul(al6, bl6) | 0;
      mid = mid + Math.imul(al6, bh6) | 0;
      mid = mid + Math.imul(ah6, bl6) | 0;
      hi = hi + Math.imul(ah6, bh6) | 0;
      lo = lo + Math.imul(al5, bl7) | 0;
      mid = mid + Math.imul(al5, bh7) | 0;
      mid = mid + Math.imul(ah5, bl7) | 0;
      hi = hi + Math.imul(ah5, bh7) | 0;
      lo = lo + Math.imul(al4, bl8) | 0;
      mid = mid + Math.imul(al4, bh8) | 0;
      mid = mid + Math.imul(ah4, bl8) | 0;
      hi = hi + Math.imul(ah4, bh8) | 0;
      lo = lo + Math.imul(al3, bl9) | 0;
      mid = mid + Math.imul(al3, bh9) | 0;
      mid = mid + Math.imul(ah3, bl9) | 0;
      hi = hi + Math.imul(ah3, bh9) | 0;
      var w12 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
      w12 &= 67108863;
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = mid + Math.imul(ah9, bl4) | 0;
      hi = Math.imul(ah9, bh4);
      lo = lo + Math.imul(al8, bl5) | 0;
      mid = mid + Math.imul(al8, bh5) | 0;
      mid = mid + Math.imul(ah8, bl5) | 0;
      hi = hi + Math.imul(ah8, bh5) | 0;
      lo = lo + Math.imul(al7, bl6) | 0;
      mid = mid + Math.imul(al7, bh6) | 0;
      mid = mid + Math.imul(ah7, bl6) | 0;
      hi = hi + Math.imul(ah7, bh6) | 0;
      lo = lo + Math.imul(al6, bl7) | 0;
      mid = mid + Math.imul(al6, bh7) | 0;
      mid = mid + Math.imul(ah6, bl7) | 0;
      hi = hi + Math.imul(ah6, bh7) | 0;
      lo = lo + Math.imul(al5, bl8) | 0;
      mid = mid + Math.imul(al5, bh8) | 0;
      mid = mid + Math.imul(ah5, bl8) | 0;
      hi = hi + Math.imul(ah5, bh8) | 0;
      lo = lo + Math.imul(al4, bl9) | 0;
      mid = mid + Math.imul(al4, bh9) | 0;
      mid = mid + Math.imul(ah4, bl9) | 0;
      hi = hi + Math.imul(ah4, bh9) | 0;
      var w13 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
      w13 &= 67108863;
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = mid + Math.imul(ah9, bl5) | 0;
      hi = Math.imul(ah9, bh5);
      lo = lo + Math.imul(al8, bl6) | 0;
      mid = mid + Math.imul(al8, bh6) | 0;
      mid = mid + Math.imul(ah8, bl6) | 0;
      hi = hi + Math.imul(ah8, bh6) | 0;
      lo = lo + Math.imul(al7, bl7) | 0;
      mid = mid + Math.imul(al7, bh7) | 0;
      mid = mid + Math.imul(ah7, bl7) | 0;
      hi = hi + Math.imul(ah7, bh7) | 0;
      lo = lo + Math.imul(al6, bl8) | 0;
      mid = mid + Math.imul(al6, bh8) | 0;
      mid = mid + Math.imul(ah6, bl8) | 0;
      hi = hi + Math.imul(ah6, bh8) | 0;
      lo = lo + Math.imul(al5, bl9) | 0;
      mid = mid + Math.imul(al5, bh9) | 0;
      mid = mid + Math.imul(ah5, bl9) | 0;
      hi = hi + Math.imul(ah5, bh9) | 0;
      var w14 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
      w14 &= 67108863;
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = mid + Math.imul(ah9, bl6) | 0;
      hi = Math.imul(ah9, bh6);
      lo = lo + Math.imul(al8, bl7) | 0;
      mid = mid + Math.imul(al8, bh7) | 0;
      mid = mid + Math.imul(ah8, bl7) | 0;
      hi = hi + Math.imul(ah8, bh7) | 0;
      lo = lo + Math.imul(al7, bl8) | 0;
      mid = mid + Math.imul(al7, bh8) | 0;
      mid = mid + Math.imul(ah7, bl8) | 0;
      hi = hi + Math.imul(ah7, bh8) | 0;
      lo = lo + Math.imul(al6, bl9) | 0;
      mid = mid + Math.imul(al6, bh9) | 0;
      mid = mid + Math.imul(ah6, bl9) | 0;
      hi = hi + Math.imul(ah6, bh9) | 0;
      var w15 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
      w15 &= 67108863;
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = mid + Math.imul(ah9, bl7) | 0;
      hi = Math.imul(ah9, bh7);
      lo = lo + Math.imul(al8, bl8) | 0;
      mid = mid + Math.imul(al8, bh8) | 0;
      mid = mid + Math.imul(ah8, bl8) | 0;
      hi = hi + Math.imul(ah8, bh8) | 0;
      lo = lo + Math.imul(al7, bl9) | 0;
      mid = mid + Math.imul(al7, bh9) | 0;
      mid = mid + Math.imul(ah7, bl9) | 0;
      hi = hi + Math.imul(ah7, bh9) | 0;
      var w16 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
      w16 &= 67108863;
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = mid + Math.imul(ah9, bl8) | 0;
      hi = Math.imul(ah9, bh8);
      lo = lo + Math.imul(al8, bl9) | 0;
      mid = mid + Math.imul(al8, bh9) | 0;
      mid = mid + Math.imul(ah8, bl9) | 0;
      hi = hi + Math.imul(ah8, bh9) | 0;
      var w17 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
      w17 &= 67108863;
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = mid + Math.imul(ah9, bl9) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
      w18 &= 67108863;
      o9[0] = w0;
      o9[1] = w1;
      o9[2] = w22;
      o9[3] = w32;
      o9[4] = w4;
      o9[5] = w5;
      o9[6] = w6;
      o9[7] = w7;
      o9[8] = w8;
      o9[9] = w9;
      o9[10] = w10;
      o9[11] = w11;
      o9[12] = w12;
      o9[13] = w13;
      o9[14] = w14;
      o9[15] = w15;
      o9[16] = w16;
      o9[17] = w17;
      o9[18] = w18;
      if (c8 !== 0) {
        o9[19] = c8;
        out.length++;
      }
      return out;
    };
    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }
    function bigMulTo(self2, num, out) {
      out.negative = num.negative ^ self2.negative;
      out.length = self2.length + num.length;
      var carry = 0;
      var hncarry = 0;
      for (var k4 = 0; k4 < out.length - 1; k4++) {
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 67108863;
        var maxJ = Math.min(k4, num.length - 1);
        for (var j4 = Math.max(0, k4 - self2.length + 1); j4 <= maxJ; j4++) {
          var i8 = k4 - j4;
          var a8 = self2.words[i8] | 0;
          var b5 = num.words[j4] | 0;
          var r9 = a8 * b5;
          var lo = r9 & 67108863;
          ncarry = ncarry + (r9 / 67108864 | 0) | 0;
          lo = lo + rword | 0;
          rword = lo & 67108863;
          ncarry = ncarry + (lo >>> 26) | 0;
          hncarry += ncarry >>> 26;
          ncarry &= 67108863;
        }
        out.words[k4] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k4] = carry;
      } else {
        out.length--;
      }
      return out.strip();
    }
    function jumboMulTo(self2, num, out) {
      var fftm = new FFTM();
      return fftm.mulp(self2, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
      var res;
      var len = (this || _global$3$1).length + num.length;
      if ((this || _global$3$1).length === 10 && num.length === 10) {
        res = comb10MulTo(this || _global$3$1, num, out);
      } else if (len < 63) {
        res = smallMulTo(this || _global$3$1, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this || _global$3$1, num, out);
      } else {
        res = jumboMulTo(this || _global$3$1, num, out);
      }
      return res;
    };
    function FFTM(x4, y6) {
      (this || _global$3$1).x = x4;
      (this || _global$3$1).y = y6;
    }
    FFTM.prototype.makeRBT = function makeRBT(N4) {
      var t8 = new Array(N4);
      var l8 = BN.prototype._countBits(N4) - 1;
      for (var i8 = 0; i8 < N4; i8++) {
        t8[i8] = this.revBin(i8, l8, N4);
      }
      return t8;
    };
    FFTM.prototype.revBin = function revBin(x4, l8, N4) {
      if (x4 === 0 || x4 === N4 - 1)
        return x4;
      var rb = 0;
      for (var i8 = 0; i8 < l8; i8++) {
        rb |= (x4 & 1) << l8 - i8 - 1;
        x4 >>= 1;
      }
      return rb;
    };
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N4) {
      for (var i8 = 0; i8 < N4; i8++) {
        rtws[i8] = rws[rbt[i8]];
        itws[i8] = iws[rbt[i8]];
      }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N4, rbt) {
      this.permute(rbt, rws, iws, rtws, itws, N4);
      for (var s7 = 1; s7 < N4; s7 <<= 1) {
        var l8 = s7 << 1;
        var rtwdf = Math.cos(2 * Math.PI / l8);
        var itwdf = Math.sin(2 * Math.PI / l8);
        for (var p8 = 0; p8 < N4; p8 += l8) {
          var rtwdf_ = rtwdf;
          var itwdf_ = itwdf;
          for (var j4 = 0; j4 < s7; j4++) {
            var re3 = rtws[p8 + j4];
            var ie2 = itws[p8 + j4];
            var ro = rtws[p8 + j4 + s7];
            var io = itws[p8 + j4 + s7];
            var rx = rtwdf_ * ro - itwdf_ * io;
            io = rtwdf_ * io + itwdf_ * ro;
            ro = rx;
            rtws[p8 + j4] = re3 + ro;
            itws[p8 + j4] = ie2 + io;
            rtws[p8 + j4 + s7] = re3 - ro;
            itws[p8 + j4 + s7] = ie2 - io;
            if (j4 !== l8) {
              rx = rtwdf * rtwdf_ - itwdf * itwdf_;
              itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
              rtwdf_ = rx;
            }
          }
        }
      }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n9, m6) {
      var N4 = Math.max(m6, n9) | 1;
      var odd = N4 & 1;
      var i8 = 0;
      for (N4 = N4 / 2 | 0; N4; N4 = N4 >>> 1) {
        i8++;
      }
      return 1 << i8 + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N4) {
      if (N4 <= 1)
        return;
      for (var i8 = 0; i8 < N4 / 2; i8++) {
        var t8 = rws[i8];
        rws[i8] = rws[N4 - i8 - 1];
        rws[N4 - i8 - 1] = t8;
        t8 = iws[i8];
        iws[i8] = -iws[N4 - i8 - 1];
        iws[N4 - i8 - 1] = -t8;
      }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N4) {
      var carry = 0;
      for (var i8 = 0; i8 < N4 / 2; i8++) {
        var w4 = Math.round(ws[2 * i8 + 1] / N4) * 8192 + Math.round(ws[2 * i8] / N4) + carry;
        ws[i8] = w4 & 67108863;
        if (w4 < 67108864) {
          carry = 0;
        } else {
          carry = w4 / 67108864 | 0;
        }
      }
      return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N4) {
      var carry = 0;
      for (var i8 = 0; i8 < len; i8++) {
        carry = carry + (ws[i8] | 0);
        rws[2 * i8] = carry & 8191;
        carry = carry >>> 13;
        rws[2 * i8 + 1] = carry & 8191;
        carry = carry >>> 13;
      }
      for (i8 = 2 * len; i8 < N4; ++i8) {
        rws[i8] = 0;
      }
      assert2(carry === 0);
      assert2((carry & ~8191) === 0);
    };
    FFTM.prototype.stub = function stub(N4) {
      var ph = new Array(N4);
      for (var i8 = 0; i8 < N4; i8++) {
        ph[i8] = 0;
      }
      return ph;
    };
    FFTM.prototype.mulp = function mulp(x4, y6, out) {
      var N4 = 2 * this.guessLen13b(x4.length, y6.length);
      var rbt = this.makeRBT(N4);
      var _4 = this.stub(N4);
      var rws = new Array(N4);
      var rwst = new Array(N4);
      var iwst = new Array(N4);
      var nrws = new Array(N4);
      var nrwst = new Array(N4);
      var niwst = new Array(N4);
      var rmws = out.words;
      rmws.length = N4;
      this.convert13b(x4.words, x4.length, rws, N4);
      this.convert13b(y6.words, y6.length, nrws, N4);
      this.transform(rws, _4, rwst, iwst, N4, rbt);
      this.transform(nrws, _4, nrwst, niwst, N4, rbt);
      for (var i8 = 0; i8 < N4; i8++) {
        var rx = rwst[i8] * nrwst[i8] - iwst[i8] * niwst[i8];
        iwst[i8] = rwst[i8] * niwst[i8] + iwst[i8] * nrwst[i8];
        rwst[i8] = rx;
      }
      this.conjugate(rwst, iwst, N4);
      this.transform(rwst, iwst, rmws, _4, N4, rbt);
      this.conjugate(rmws, _4, N4);
      this.normalize13b(rmws, N4);
      out.negative = x4.negative ^ y6.negative;
      out.length = x4.length + y6.length;
      return out.strip();
    };
    BN.prototype.mul = function mul(num) {
      var out = new BN(null);
      out.words = new Array((this || _global$3$1).length + num.length);
      return this.mulTo(num, out);
    };
    BN.prototype.mulf = function mulf(num) {
      var out = new BN(null);
      out.words = new Array((this || _global$3$1).length + num.length);
      return jumboMulTo(this || _global$3$1, num, out);
    };
    BN.prototype.imul = function imul(num) {
      return this.clone().mulTo(num, this || _global$3$1);
    };
    BN.prototype.imuln = function imuln(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      var carry = 0;
      for (var i8 = 0; i8 < (this || _global$3$1).length; i8++) {
        var w4 = ((this || _global$3$1).words[i8] | 0) * num;
        var lo = (w4 & 67108863) + (carry & 67108863);
        carry >>= 26;
        carry += w4 / 67108864 | 0;
        carry += lo >>> 26;
        (this || _global$3$1).words[i8] = lo & 67108863;
      }
      if (carry !== 0) {
        (this || _global$3$1).words[i8] = carry;
        (this || _global$3$1).length++;
      }
      return this || _global$3$1;
    };
    BN.prototype.muln = function muln(num) {
      return this.clone().imuln(num);
    };
    BN.prototype.sqr = function sqr() {
      return this.mul(this || _global$3$1);
    };
    BN.prototype.isqr = function isqr() {
      return this.imul(this.clone());
    };
    BN.prototype.pow = function pow(num) {
      var w4 = toBitArray(num);
      if (w4.length === 0)
        return new BN(1);
      var res = this || _global$3$1;
      for (var i8 = 0; i8 < w4.length; i8++, res = res.sqr()) {
        if (w4[i8] !== 0)
          break;
      }
      if (++i8 < w4.length) {
        for (var q3 = res.sqr(); i8 < w4.length; i8++, q3 = q3.sqr()) {
          if (w4[i8] === 0)
            continue;
          res = res.mul(q3);
        }
      }
      return res;
    };
    BN.prototype.iushln = function iushln(bits) {
      assert2(typeof bits === "number" && bits >= 0);
      var r9 = bits % 26;
      var s7 = (bits - r9) / 26;
      var carryMask = 67108863 >>> 26 - r9 << 26 - r9;
      var i8;
      if (r9 !== 0) {
        var carry = 0;
        for (i8 = 0; i8 < (this || _global$3$1).length; i8++) {
          var newCarry = (this || _global$3$1).words[i8] & carryMask;
          var c8 = ((this || _global$3$1).words[i8] | 0) - newCarry << r9;
          (this || _global$3$1).words[i8] = c8 | carry;
          carry = newCarry >>> 26 - r9;
        }
        if (carry) {
          (this || _global$3$1).words[i8] = carry;
          (this || _global$3$1).length++;
        }
      }
      if (s7 !== 0) {
        for (i8 = (this || _global$3$1).length - 1; i8 >= 0; i8--) {
          (this || _global$3$1).words[i8 + s7] = (this || _global$3$1).words[i8];
        }
        for (i8 = 0; i8 < s7; i8++) {
          (this || _global$3$1).words[i8] = 0;
        }
        (this || _global$3$1).length += s7;
      }
      return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
      assert2((this || _global$3$1).negative === 0);
      return this.iushln(bits);
    };
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
      assert2(typeof bits === "number" && bits >= 0);
      var h8;
      if (hint) {
        h8 = (hint - hint % 26) / 26;
      } else {
        h8 = 0;
      }
      var r9 = bits % 26;
      var s7 = Math.min((bits - r9) / 26, (this || _global$3$1).length);
      var mask = 67108863 ^ 67108863 >>> r9 << r9;
      var maskedWords = extended;
      h8 -= s7;
      h8 = Math.max(0, h8);
      if (maskedWords) {
        for (var i8 = 0; i8 < s7; i8++) {
          maskedWords.words[i8] = (this || _global$3$1).words[i8];
        }
        maskedWords.length = s7;
      }
      if (s7 === 0)
        ;
      else if ((this || _global$3$1).length > s7) {
        (this || _global$3$1).length -= s7;
        for (i8 = 0; i8 < (this || _global$3$1).length; i8++) {
          (this || _global$3$1).words[i8] = (this || _global$3$1).words[i8 + s7];
        }
      } else {
        (this || _global$3$1).words[0] = 0;
        (this || _global$3$1).length = 1;
      }
      var carry = 0;
      for (i8 = (this || _global$3$1).length - 1; i8 >= 0 && (carry !== 0 || i8 >= h8); i8--) {
        var word = (this || _global$3$1).words[i8] | 0;
        (this || _global$3$1).words[i8] = carry << 26 - r9 | word >>> r9;
        carry = word & mask;
      }
      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }
      if ((this || _global$3$1).length === 0) {
        (this || _global$3$1).words[0] = 0;
        (this || _global$3$1).length = 1;
      }
      return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
      assert2((this || _global$3$1).negative === 0);
      return this.iushrn(bits, hint, extended);
    };
    BN.prototype.shln = function shln(bits) {
      return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
      return this.clone().iushln(bits);
    };
    BN.prototype.shrn = function shrn(bits) {
      return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
      return this.clone().iushrn(bits);
    };
    BN.prototype.testn = function testn(bit) {
      assert2(typeof bit === "number" && bit >= 0);
      var r9 = bit % 26;
      var s7 = (bit - r9) / 26;
      var q3 = 1 << r9;
      if ((this || _global$3$1).length <= s7)
        return false;
      var w4 = (this || _global$3$1).words[s7];
      return !!(w4 & q3);
    };
    BN.prototype.imaskn = function imaskn(bits) {
      assert2(typeof bits === "number" && bits >= 0);
      var r9 = bits % 26;
      var s7 = (bits - r9) / 26;
      assert2((this || _global$3$1).negative === 0, "imaskn works only with positive numbers");
      if ((this || _global$3$1).length <= s7) {
        return this || _global$3$1;
      }
      if (r9 !== 0) {
        s7++;
      }
      (this || _global$3$1).length = Math.min(s7, (this || _global$3$1).length);
      if (r9 !== 0) {
        var mask = 67108863 ^ 67108863 >>> r9 << r9;
        (this || _global$3$1).words[(this || _global$3$1).length - 1] &= mask;
      }
      return this.strip();
    };
    BN.prototype.maskn = function maskn(bits) {
      return this.clone().imaskn(bits);
    };
    BN.prototype.iaddn = function iaddn(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      if (num < 0)
        return this.isubn(-num);
      if ((this || _global$3$1).negative !== 0) {
        if ((this || _global$3$1).length === 1 && ((this || _global$3$1).words[0] | 0) < num) {
          (this || _global$3$1).words[0] = num - ((this || _global$3$1).words[0] | 0);
          (this || _global$3$1).negative = 0;
          return this || _global$3$1;
        }
        (this || _global$3$1).negative = 0;
        this.isubn(num);
        (this || _global$3$1).negative = 1;
        return this || _global$3$1;
      }
      return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
      (this || _global$3$1).words[0] += num;
      for (var i8 = 0; i8 < (this || _global$3$1).length && (this || _global$3$1).words[i8] >= 67108864; i8++) {
        (this || _global$3$1).words[i8] -= 67108864;
        if (i8 === (this || _global$3$1).length - 1) {
          (this || _global$3$1).words[i8 + 1] = 1;
        } else {
          (this || _global$3$1).words[i8 + 1]++;
        }
      }
      (this || _global$3$1).length = Math.max((this || _global$3$1).length, i8 + 1);
      return this || _global$3$1;
    };
    BN.prototype.isubn = function isubn(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      if (num < 0)
        return this.iaddn(-num);
      if ((this || _global$3$1).negative !== 0) {
        (this || _global$3$1).negative = 0;
        this.iaddn(num);
        (this || _global$3$1).negative = 1;
        return this || _global$3$1;
      }
      (this || _global$3$1).words[0] -= num;
      if ((this || _global$3$1).length === 1 && (this || _global$3$1).words[0] < 0) {
        (this || _global$3$1).words[0] = -(this || _global$3$1).words[0];
        (this || _global$3$1).negative = 1;
      } else {
        for (var i8 = 0; i8 < (this || _global$3$1).length && (this || _global$3$1).words[i8] < 0; i8++) {
          (this || _global$3$1).words[i8] += 67108864;
          (this || _global$3$1).words[i8 + 1] -= 1;
        }
      }
      return this.strip();
    };
    BN.prototype.addn = function addn(num) {
      return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
      return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
      (this || _global$3$1).negative = 0;
      return this || _global$3$1;
    };
    BN.prototype.abs = function abs() {
      return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
      var len = num.length + shift;
      var i8;
      this._expand(len);
      var w4;
      var carry = 0;
      for (i8 = 0; i8 < num.length; i8++) {
        w4 = ((this || _global$3$1).words[i8 + shift] | 0) + carry;
        var right = (num.words[i8] | 0) * mul;
        w4 -= right & 67108863;
        carry = (w4 >> 26) - (right / 67108864 | 0);
        (this || _global$3$1).words[i8 + shift] = w4 & 67108863;
      }
      for (; i8 < (this || _global$3$1).length - shift; i8++) {
        w4 = ((this || _global$3$1).words[i8 + shift] | 0) + carry;
        carry = w4 >> 26;
        (this || _global$3$1).words[i8 + shift] = w4 & 67108863;
      }
      if (carry === 0)
        return this.strip();
      assert2(carry === -1);
      carry = 0;
      for (i8 = 0; i8 < (this || _global$3$1).length; i8++) {
        w4 = -((this || _global$3$1).words[i8] | 0) + carry;
        carry = w4 >> 26;
        (this || _global$3$1).words[i8] = w4 & 67108863;
      }
      (this || _global$3$1).negative = 1;
      return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
      var shift = (this || _global$3$1).length - num.length;
      var a8 = this.clone();
      var b5 = num;
      var bhi = b5.words[b5.length - 1] | 0;
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b5 = b5.ushln(shift);
        a8.iushln(shift);
        bhi = b5.words[b5.length - 1] | 0;
      }
      var m6 = a8.length - b5.length;
      var q3;
      if (mode !== "mod") {
        q3 = new BN(null);
        q3.length = m6 + 1;
        q3.words = new Array(q3.length);
        for (var i8 = 0; i8 < q3.length; i8++) {
          q3.words[i8] = 0;
        }
      }
      var diff = a8.clone()._ishlnsubmul(b5, 1, m6);
      if (diff.negative === 0) {
        a8 = diff;
        if (q3) {
          q3.words[m6] = 1;
        }
      }
      for (var j4 = m6 - 1; j4 >= 0; j4--) {
        var qj = (a8.words[b5.length + j4] | 0) * 67108864 + (a8.words[b5.length + j4 - 1] | 0);
        qj = Math.min(qj / bhi | 0, 67108863);
        a8._ishlnsubmul(b5, qj, j4);
        while (a8.negative !== 0) {
          qj--;
          a8.negative = 0;
          a8._ishlnsubmul(b5, 1, j4);
          if (!a8.isZero()) {
            a8.negative ^= 1;
          }
        }
        if (q3) {
          q3.words[j4] = qj;
        }
      }
      if (q3) {
        q3.strip();
      }
      a8.strip();
      if (mode !== "div" && shift !== 0) {
        a8.iushrn(shift);
      }
      return {
        div: q3 || null,
        mod: a8
      };
    };
    BN.prototype.divmod = function divmod(num, mode, positive) {
      assert2(!num.isZero());
      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }
      var div, mod, res;
      if ((this || _global$3$1).negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);
        if (mode !== "mod") {
          div = res.div.neg();
        }
        if (mode !== "div") {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }
        return {
          div,
          mod
        };
      }
      if ((this || _global$3$1).negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);
        if (mode !== "mod") {
          div = res.div.neg();
        }
        return {
          div,
          mod: res.mod
        };
      }
      if (((this || _global$3$1).negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);
        if (mode !== "div") {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }
        return {
          div: res.div,
          mod
        };
      }
      if (num.length > (this || _global$3$1).length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this || _global$3$1
        };
      }
      if (num.length === 1) {
        if (mode === "div") {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }
        if (mode === "mod") {
          return {
            div: null,
            mod: new BN(this.modn(num.words[0]))
          };
        }
        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modn(num.words[0]))
        };
      }
      return this._wordDiv(num, mode);
    };
    BN.prototype.div = function div(num) {
      return this.divmod(num, "div", false).div;
    };
    BN.prototype.mod = function mod(num) {
      return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
      return this.divmod(num, "mod", true).mod;
    };
    BN.prototype.divRound = function divRound(num) {
      var dm = this.divmod(num);
      if (dm.mod.isZero())
        return dm.div;
      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
      var half = num.ushrn(1);
      var r22 = num.andln(1);
      var cmp = mod.cmp(half);
      if (cmp < 0 || r22 === 1 && cmp === 0)
        return dm.div;
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
      assert2(num <= 67108863);
      var p8 = (1 << 26) % num;
      var acc = 0;
      for (var i8 = (this || _global$3$1).length - 1; i8 >= 0; i8--) {
        acc = (p8 * acc + ((this || _global$3$1).words[i8] | 0)) % num;
      }
      return acc;
    };
    BN.prototype.idivn = function idivn(num) {
      assert2(num <= 67108863);
      var carry = 0;
      for (var i8 = (this || _global$3$1).length - 1; i8 >= 0; i8--) {
        var w4 = ((this || _global$3$1).words[i8] | 0) + carry * 67108864;
        (this || _global$3$1).words[i8] = w4 / num | 0;
        carry = w4 % num;
      }
      return this.strip();
    };
    BN.prototype.divn = function divn(num) {
      return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p8) {
      assert2(p8.negative === 0);
      assert2(!p8.isZero());
      var x4 = this || _global$3$1;
      var y6 = p8.clone();
      if (x4.negative !== 0) {
        x4 = x4.umod(p8);
      } else {
        x4 = x4.clone();
      }
      var A4 = new BN(1);
      var B4 = new BN(0);
      var C4 = new BN(0);
      var D4 = new BN(1);
      var g5 = 0;
      while (x4.isEven() && y6.isEven()) {
        x4.iushrn(1);
        y6.iushrn(1);
        ++g5;
      }
      var yp = y6.clone();
      var xp = x4.clone();
      while (!x4.isZero()) {
        for (var i8 = 0, im = 1; (x4.words[0] & im) === 0 && i8 < 26; ++i8, im <<= 1)
          ;
        if (i8 > 0) {
          x4.iushrn(i8);
          while (i8-- > 0) {
            if (A4.isOdd() || B4.isOdd()) {
              A4.iadd(yp);
              B4.isub(xp);
            }
            A4.iushrn(1);
            B4.iushrn(1);
          }
        }
        for (var j4 = 0, jm = 1; (y6.words[0] & jm) === 0 && j4 < 26; ++j4, jm <<= 1)
          ;
        if (j4 > 0) {
          y6.iushrn(j4);
          while (j4-- > 0) {
            if (C4.isOdd() || D4.isOdd()) {
              C4.iadd(yp);
              D4.isub(xp);
            }
            C4.iushrn(1);
            D4.iushrn(1);
          }
        }
        if (x4.cmp(y6) >= 0) {
          x4.isub(y6);
          A4.isub(C4);
          B4.isub(D4);
        } else {
          y6.isub(x4);
          C4.isub(A4);
          D4.isub(B4);
        }
      }
      return {
        a: C4,
        b: D4,
        gcd: y6.iushln(g5)
      };
    };
    BN.prototype._invmp = function _invmp(p8) {
      assert2(p8.negative === 0);
      assert2(!p8.isZero());
      var a8 = this || _global$3$1;
      var b5 = p8.clone();
      if (a8.negative !== 0) {
        a8 = a8.umod(p8);
      } else {
        a8 = a8.clone();
      }
      var x1 = new BN(1);
      var x22 = new BN(0);
      var delta = b5.clone();
      while (a8.cmpn(1) > 0 && b5.cmpn(1) > 0) {
        for (var i8 = 0, im = 1; (a8.words[0] & im) === 0 && i8 < 26; ++i8, im <<= 1)
          ;
        if (i8 > 0) {
          a8.iushrn(i8);
          while (i8-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }
            x1.iushrn(1);
          }
        }
        for (var j4 = 0, jm = 1; (b5.words[0] & jm) === 0 && j4 < 26; ++j4, jm <<= 1)
          ;
        if (j4 > 0) {
          b5.iushrn(j4);
          while (j4-- > 0) {
            if (x22.isOdd()) {
              x22.iadd(delta);
            }
            x22.iushrn(1);
          }
        }
        if (a8.cmp(b5) >= 0) {
          a8.isub(b5);
          x1.isub(x22);
        } else {
          b5.isub(a8);
          x22.isub(x1);
        }
      }
      var res;
      if (a8.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x22;
      }
      if (res.cmpn(0) < 0) {
        res.iadd(p8);
      }
      return res;
    };
    BN.prototype.gcd = function gcd(num) {
      if (this.isZero())
        return num.abs();
      if (num.isZero())
        return this.abs();
      var a8 = this.clone();
      var b5 = num.clone();
      a8.negative = 0;
      b5.negative = 0;
      for (var shift = 0; a8.isEven() && b5.isEven(); shift++) {
        a8.iushrn(1);
        b5.iushrn(1);
      }
      do {
        while (a8.isEven()) {
          a8.iushrn(1);
        }
        while (b5.isEven()) {
          b5.iushrn(1);
        }
        var r9 = a8.cmp(b5);
        if (r9 < 0) {
          var t8 = a8;
          a8 = b5;
          b5 = t8;
        } else if (r9 === 0 || b5.cmpn(1) === 0) {
          break;
        }
        a8.isub(b5);
      } while (true);
      return b5.iushln(shift);
    };
    BN.prototype.invm = function invm(num) {
      return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
      return ((this || _global$3$1).words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
      return ((this || _global$3$1).words[0] & 1) === 1;
    };
    BN.prototype.andln = function andln(num) {
      return (this || _global$3$1).words[0] & num;
    };
    BN.prototype.bincn = function bincn(bit) {
      assert2(typeof bit === "number");
      var r9 = bit % 26;
      var s7 = (bit - r9) / 26;
      var q3 = 1 << r9;
      if ((this || _global$3$1).length <= s7) {
        this._expand(s7 + 1);
        (this || _global$3$1).words[s7] |= q3;
        return this || _global$3$1;
      }
      var carry = q3;
      for (var i8 = s7; carry !== 0 && i8 < (this || _global$3$1).length; i8++) {
        var w4 = (this || _global$3$1).words[i8] | 0;
        w4 += carry;
        carry = w4 >>> 26;
        w4 &= 67108863;
        (this || _global$3$1).words[i8] = w4;
      }
      if (carry !== 0) {
        (this || _global$3$1).words[i8] = carry;
        (this || _global$3$1).length++;
      }
      return this || _global$3$1;
    };
    BN.prototype.isZero = function isZero() {
      return (this || _global$3$1).length === 1 && (this || _global$3$1).words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
      var negative = num < 0;
      if ((this || _global$3$1).negative !== 0 && !negative)
        return -1;
      if ((this || _global$3$1).negative === 0 && negative)
        return 1;
      this.strip();
      var res;
      if ((this || _global$3$1).length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }
        assert2(num <= 67108863, "Number is too big");
        var w4 = (this || _global$3$1).words[0] | 0;
        res = w4 === num ? 0 : w4 < num ? -1 : 1;
      }
      if ((this || _global$3$1).negative !== 0)
        return -res | 0;
      return res;
    };
    BN.prototype.cmp = function cmp(num) {
      if ((this || _global$3$1).negative !== 0 && num.negative === 0)
        return -1;
      if ((this || _global$3$1).negative === 0 && num.negative !== 0)
        return 1;
      var res = this.ucmp(num);
      if ((this || _global$3$1).negative !== 0)
        return -res | 0;
      return res;
    };
    BN.prototype.ucmp = function ucmp(num) {
      if ((this || _global$3$1).length > num.length)
        return 1;
      if ((this || _global$3$1).length < num.length)
        return -1;
      var res = 0;
      for (var i8 = (this || _global$3$1).length - 1; i8 >= 0; i8--) {
        var a8 = (this || _global$3$1).words[i8] | 0;
        var b5 = num.words[i8] | 0;
        if (a8 === b5)
          continue;
        if (a8 < b5) {
          res = -1;
        } else if (a8 > b5) {
          res = 1;
        }
        break;
      }
      return res;
    };
    BN.prototype.gtn = function gtn(num) {
      return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
      return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
      return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
      return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
      return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
      return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
      return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
      return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
      return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
      return this.cmp(num) === 0;
    };
    BN.red = function red(num) {
      return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
      assert2(!(this || _global$3$1).red, "Already a number in reduction context");
      assert2((this || _global$3$1).negative === 0, "red works only with positives");
      return ctx.convertTo(this || _global$3$1)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
      assert2((this || _global$3$1).red, "fromRed works only with numbers in reduction context");
      return (this || _global$3$1).red.convertFrom(this || _global$3$1);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
      (this || _global$3$1).red = ctx;
      return this || _global$3$1;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
      assert2(!(this || _global$3$1).red, "Already a number in reduction context");
      return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
      assert2((this || _global$3$1).red, "redAdd works only with red numbers");
      return (this || _global$3$1).red.add(this || _global$3$1, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
      assert2((this || _global$3$1).red, "redIAdd works only with red numbers");
      return (this || _global$3$1).red.iadd(this || _global$3$1, num);
    };
    BN.prototype.redSub = function redSub(num) {
      assert2((this || _global$3$1).red, "redSub works only with red numbers");
      return (this || _global$3$1).red.sub(this || _global$3$1, num);
    };
    BN.prototype.redISub = function redISub(num) {
      assert2((this || _global$3$1).red, "redISub works only with red numbers");
      return (this || _global$3$1).red.isub(this || _global$3$1, num);
    };
    BN.prototype.redShl = function redShl(num) {
      assert2((this || _global$3$1).red, "redShl works only with red numbers");
      return (this || _global$3$1).red.shl(this || _global$3$1, num);
    };
    BN.prototype.redMul = function redMul(num) {
      assert2((this || _global$3$1).red, "redMul works only with red numbers");
      (this || _global$3$1).red._verify2(this || _global$3$1, num);
      return (this || _global$3$1).red.mul(this || _global$3$1, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
      assert2((this || _global$3$1).red, "redMul works only with red numbers");
      (this || _global$3$1).red._verify2(this || _global$3$1, num);
      return (this || _global$3$1).red.imul(this || _global$3$1, num);
    };
    BN.prototype.redSqr = function redSqr() {
      assert2((this || _global$3$1).red, "redSqr works only with red numbers");
      (this || _global$3$1).red._verify1(this || _global$3$1);
      return (this || _global$3$1).red.sqr(this || _global$3$1);
    };
    BN.prototype.redISqr = function redISqr() {
      assert2((this || _global$3$1).red, "redISqr works only with red numbers");
      (this || _global$3$1).red._verify1(this || _global$3$1);
      return (this || _global$3$1).red.isqr(this || _global$3$1);
    };
    BN.prototype.redSqrt = function redSqrt() {
      assert2((this || _global$3$1).red, "redSqrt works only with red numbers");
      (this || _global$3$1).red._verify1(this || _global$3$1);
      return (this || _global$3$1).red.sqrt(this || _global$3$1);
    };
    BN.prototype.redInvm = function redInvm() {
      assert2((this || _global$3$1).red, "redInvm works only with red numbers");
      (this || _global$3$1).red._verify1(this || _global$3$1);
      return (this || _global$3$1).red.invm(this || _global$3$1);
    };
    BN.prototype.redNeg = function redNeg() {
      assert2((this || _global$3$1).red, "redNeg works only with red numbers");
      (this || _global$3$1).red._verify1(this || _global$3$1);
      return (this || _global$3$1).red.neg(this || _global$3$1);
    };
    BN.prototype.redPow = function redPow(num) {
      assert2((this || _global$3$1).red && !num.red, "redPow(normalNum)");
      (this || _global$3$1).red._verify1(this || _global$3$1);
      return (this || _global$3$1).red.pow(this || _global$3$1, num);
    };
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };
    function MPrime(name2, p8) {
      (this || _global$3$1).name = name2;
      (this || _global$3$1).p = new BN(p8, 16);
      (this || _global$3$1).n = (this || _global$3$1).p.bitLength();
      (this || _global$3$1).k = new BN(1).iushln((this || _global$3$1).n).isub((this || _global$3$1).p);
      (this || _global$3$1).tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil((this || _global$3$1).n / 13));
      return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
      var r9 = num;
      var rlen;
      do {
        this.split(r9, (this || _global$3$1).tmp);
        r9 = this.imulK(r9);
        r9 = r9.iadd((this || _global$3$1).tmp);
        rlen = r9.bitLength();
      } while (rlen > (this || _global$3$1).n);
      var cmp = rlen < (this || _global$3$1).n ? -1 : r9.ucmp((this || _global$3$1).p);
      if (cmp === 0) {
        r9.words[0] = 0;
        r9.length = 1;
      } else if (cmp > 0) {
        r9.isub((this || _global$3$1).p);
      } else {
        if (r9.strip !== void 0) {
          r9.strip();
        } else {
          r9._strip();
        }
      }
      return r9;
    };
    MPrime.prototype.split = function split(input, out) {
      input.iushrn((this || _global$3$1).n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
      return num.imul((this || _global$3$1).k);
    };
    function K256() {
      MPrime.call(this || _global$3$1, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits4(K256, MPrime);
    K256.prototype.split = function split(input, output) {
      var mask = 4194303;
      var outLen = Math.min(input.length, 9);
      for (var i8 = 0; i8 < outLen; i8++) {
        output.words[i8] = input.words[i8];
      }
      output.length = outLen;
      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }
      var prev = input.words[9];
      output.words[output.length++] = prev & mask;
      for (i8 = 10; i8 < input.length; i8++) {
        var next = input.words[i8] | 0;
        input.words[i8 - 10] = (next & mask) << 4 | prev >>> 22;
        prev = next;
      }
      prev >>>= 22;
      input.words[i8 - 10] = prev;
      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };
    K256.prototype.imulK = function imulK(num) {
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;
      var lo = 0;
      for (var i8 = 0; i8 < num.length; i8++) {
        var w4 = num.words[i8] | 0;
        lo += w4 * 977;
        num.words[i8] = lo & 67108863;
        lo = w4 * 64 + (lo / 67108864 | 0);
      }
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }
      return num;
    };
    function P224() {
      MPrime.call(this || _global$3$1, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits4(P224, MPrime);
    function P192() {
      MPrime.call(this || _global$3$1, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits4(P192, MPrime);
    function P25519() {
      MPrime.call(this || _global$3$1, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits4(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
      var carry = 0;
      for (var i8 = 0; i8 < num.length; i8++) {
        var hi = (num.words[i8] | 0) * 19 + carry;
        var lo = hi & 67108863;
        hi >>>= 26;
        num.words[i8] = lo;
        carry = hi;
      }
      if (carry !== 0) {
        num.words[num.length++] = carry;
      }
      return num;
    };
    BN._prime = function prime(name2) {
      if (primes[name2])
        return primes[name2];
      var prime2;
      if (name2 === "k256") {
        prime2 = new K256();
      } else if (name2 === "p224") {
        prime2 = new P224();
      } else if (name2 === "p192") {
        prime2 = new P192();
      } else if (name2 === "p25519") {
        prime2 = new P25519();
      } else {
        throw new Error("Unknown prime " + name2);
      }
      primes[name2] = prime2;
      return prime2;
    };
    function Red(m6) {
      if (typeof m6 === "string") {
        var prime = BN._prime(m6);
        (this || _global$3$1).m = prime.p;
        (this || _global$3$1).prime = prime;
      } else {
        assert2(m6.gtn(1), "modulus must be greater than 1");
        (this || _global$3$1).m = m6;
        (this || _global$3$1).prime = null;
      }
    }
    Red.prototype._verify1 = function _verify1(a8) {
      assert2(a8.negative === 0, "red works only with positives");
      assert2(a8.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a8, b5) {
      assert2((a8.negative | b5.negative) === 0, "red works only with positives");
      assert2(a8.red && a8.red === b5.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a8) {
      if ((this || _global$3$1).prime)
        return (this || _global$3$1).prime.ireduce(a8)._forceRed(this || _global$3$1);
      return a8.umod((this || _global$3$1).m)._forceRed(this || _global$3$1);
    };
    Red.prototype.neg = function neg(a8) {
      if (a8.isZero()) {
        return a8.clone();
      }
      return (this || _global$3$1).m.sub(a8)._forceRed(this || _global$3$1);
    };
    Red.prototype.add = function add(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.add(b5);
      if (res.cmp((this || _global$3$1).m) >= 0) {
        res.isub((this || _global$3$1).m);
      }
      return res._forceRed(this || _global$3$1);
    };
    Red.prototype.iadd = function iadd(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.iadd(b5);
      if (res.cmp((this || _global$3$1).m) >= 0) {
        res.isub((this || _global$3$1).m);
      }
      return res;
    };
    Red.prototype.sub = function sub(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.sub(b5);
      if (res.cmpn(0) < 0) {
        res.iadd((this || _global$3$1).m);
      }
      return res._forceRed(this || _global$3$1);
    };
    Red.prototype.isub = function isub(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.isub(b5);
      if (res.cmpn(0) < 0) {
        res.iadd((this || _global$3$1).m);
      }
      return res;
    };
    Red.prototype.shl = function shl(a8, num) {
      this._verify1(a8);
      return this.imod(a8.ushln(num));
    };
    Red.prototype.imul = function imul(a8, b5) {
      this._verify2(a8, b5);
      return this.imod(a8.imul(b5));
    };
    Red.prototype.mul = function mul(a8, b5) {
      this._verify2(a8, b5);
      return this.imod(a8.mul(b5));
    };
    Red.prototype.isqr = function isqr(a8) {
      return this.imul(a8, a8.clone());
    };
    Red.prototype.sqr = function sqr(a8) {
      return this.mul(a8, a8);
    };
    Red.prototype.sqrt = function sqrt(a8) {
      if (a8.isZero())
        return a8.clone();
      var mod3 = (this || _global$3$1).m.andln(3);
      assert2(mod3 % 2 === 1);
      if (mod3 === 3) {
        var pow = (this || _global$3$1).m.add(new BN(1)).iushrn(2);
        return this.pow(a8, pow);
      }
      var q3 = (this || _global$3$1).m.subn(1);
      var s7 = 0;
      while (!q3.isZero() && q3.andln(1) === 0) {
        s7++;
        q3.iushrn(1);
      }
      assert2(!q3.isZero());
      var one = new BN(1).toRed(this || _global$3$1);
      var nOne = one.redNeg();
      var lpow = (this || _global$3$1).m.subn(1).iushrn(1);
      var z5 = (this || _global$3$1).m.bitLength();
      z5 = new BN(2 * z5 * z5).toRed(this || _global$3$1);
      while (this.pow(z5, lpow).cmp(nOne) !== 0) {
        z5.redIAdd(nOne);
      }
      var c8 = this.pow(z5, q3);
      var r9 = this.pow(a8, q3.addn(1).iushrn(1));
      var t8 = this.pow(a8, q3);
      var m6 = s7;
      while (t8.cmp(one) !== 0) {
        var tmp = t8;
        for (var i8 = 0; tmp.cmp(one) !== 0; i8++) {
          tmp = tmp.redSqr();
        }
        assert2(i8 < m6);
        var b5 = this.pow(c8, new BN(1).iushln(m6 - i8 - 1));
        r9 = r9.redMul(b5);
        c8 = b5.redSqr();
        t8 = t8.redMul(c8);
        m6 = i8;
      }
      return r9;
    };
    Red.prototype.invm = function invm(a8) {
      var inv = a8._invmp((this || _global$3$1).m);
      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };
    Red.prototype.pow = function pow(a8, num) {
      if (num.isZero())
        return new BN(1).toRed(this || _global$3$1);
      if (num.cmpn(1) === 0)
        return a8.clone();
      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN(1).toRed(this || _global$3$1);
      wnd[1] = a8;
      for (var i8 = 2; i8 < wnd.length; i8++) {
        wnd[i8] = this.mul(wnd[i8 - 1], a8);
      }
      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;
      if (start === 0) {
        start = 26;
      }
      for (i8 = num.length - 1; i8 >= 0; i8--) {
        var word = num.words[i8];
        for (var j4 = start - 1; j4 >= 0; j4--) {
          var bit = word >> j4 & 1;
          if (res !== wnd[0]) {
            res = this.sqr(res);
          }
          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }
          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i8 !== 0 || j4 !== 0))
            continue;
          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }
        start = 26;
      }
      return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
      var r9 = num.umod((this || _global$3$1).m);
      return r9 === num ? r9.clone() : r9;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
      var res = num.clone();
      res.red = null;
      return res;
    };
    BN.mont = function mont(num) {
      return new Mont(num);
    };
    function Mont(m6) {
      Red.call(this || _global$3$1, m6);
      (this || _global$3$1).shift = (this || _global$3$1).m.bitLength();
      if ((this || _global$3$1).shift % 26 !== 0) {
        (this || _global$3$1).shift += 26 - (this || _global$3$1).shift % 26;
      }
      (this || _global$3$1).r = new BN(1).iushln((this || _global$3$1).shift);
      (this || _global$3$1).r2 = this.imod((this || _global$3$1).r.sqr());
      (this || _global$3$1).rinv = (this || _global$3$1).r._invmp((this || _global$3$1).m);
      (this || _global$3$1).minv = (this || _global$3$1).rinv.mul((this || _global$3$1).r).isubn(1).div((this || _global$3$1).m);
      (this || _global$3$1).minv = (this || _global$3$1).minv.umod((this || _global$3$1).r);
      (this || _global$3$1).minv = (this || _global$3$1).r.sub((this || _global$3$1).minv);
    }
    inherits4(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
      return this.imod(num.ushln((this || _global$3$1).shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
      var r9 = this.imod(num.mul((this || _global$3$1).rinv));
      r9.red = null;
      return r9;
    };
    Mont.prototype.imul = function imul(a8, b5) {
      if (a8.isZero() || b5.isZero()) {
        a8.words[0] = 0;
        a8.length = 1;
        return a8;
      }
      var t8 = a8.imul(b5);
      var c8 = t8.maskn((this || _global$3$1).shift).mul((this || _global$3$1).minv).imaskn((this || _global$3$1).shift).mul((this || _global$3$1).m);
      var u8 = t8.isub(c8).iushrn((this || _global$3$1).shift);
      var res = u8;
      if (u8.cmp((this || _global$3$1).m) >= 0) {
        res = u8.isub((this || _global$3$1).m);
      } else if (u8.cmpn(0) < 0) {
        res = u8.iadd((this || _global$3$1).m);
      }
      return res._forceRed(this || _global$3$1);
    };
    Mont.prototype.mul = function mul(a8, b5) {
      if (a8.isZero() || b5.isZero())
        return new BN(0)._forceRed(this || _global$3$1);
      var t8 = a8.mul(b5);
      var c8 = t8.maskn((this || _global$3$1).shift).mul((this || _global$3$1).minv).imaskn((this || _global$3$1).shift).mul((this || _global$3$1).m);
      var u8 = t8.isub(c8).iushrn((this || _global$3$1).shift);
      var res = u8;
      if (u8.cmp((this || _global$3$1).m) >= 0) {
        res = u8.isub((this || _global$3$1).m);
      } else if (u8.cmpn(0) < 0) {
        res = u8.iadd((this || _global$3$1).m);
      }
      return res._forceRed(this || _global$3$1);
    };
    Mont.prototype.invm = function invm(a8) {
      var res = this.imod(a8._invmp((this || _global$3$1).m).mul((this || _global$3$1).r2));
      return res._forceRed(this || _global$3$1);
    };
  })(module$1$1, exports$a$1);
  return module$1$1.exports;
}
function dew$9$1() {
  if (_dewExec$9$1)
    return exports$9$1;
  _dewExec$9$1 = true;
  var Buffer3 = e$1$1.Buffer;
  var elliptic = dew$y$1();
  var BN = dew$a$1();
  exports$9$1 = function createECDH2(curve) {
    return new ECDH(curve);
  };
  var aliases = {
    secp256k1: {
      name: "secp256k1",
      byteLength: 32
    },
    secp224r1: {
      name: "p224",
      byteLength: 28
    },
    prime256v1: {
      name: "p256",
      byteLength: 32
    },
    prime192v1: {
      name: "p192",
      byteLength: 24
    },
    ed25519: {
      name: "ed25519",
      byteLength: 32
    },
    secp384r1: {
      name: "p384",
      byteLength: 48
    },
    secp521r1: {
      name: "p521",
      byteLength: 66
    }
  };
  aliases.p224 = aliases.secp224r1;
  aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
  aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
  aliases.p384 = aliases.secp384r1;
  aliases.p521 = aliases.secp521r1;
  function ECDH(curve) {
    (this || _global$2$1).curveType = aliases[curve];
    if (!(this || _global$2$1).curveType) {
      (this || _global$2$1).curveType = {
        name: curve
      };
    }
    (this || _global$2$1).curve = new elliptic.ec((this || _global$2$1).curveType.name);
    (this || _global$2$1).keys = void 0;
  }
  ECDH.prototype.generateKeys = function(enc, format4) {
    (this || _global$2$1).keys = (this || _global$2$1).curve.genKeyPair();
    return this.getPublicKey(enc, format4);
  };
  ECDH.prototype.computeSecret = function(other, inenc, enc) {
    inenc = inenc || "utf8";
    if (!Buffer3.isBuffer(other)) {
      other = new Buffer3(other, inenc);
    }
    var otherPub = (this || _global$2$1).curve.keyFromPublic(other).getPublic();
    var out = otherPub.mul((this || _global$2$1).keys.getPrivate()).getX();
    return formatReturnValue(out, enc, (this || _global$2$1).curveType.byteLength);
  };
  ECDH.prototype.getPublicKey = function(enc, format4) {
    var key = (this || _global$2$1).keys.getPublic(format4 === "compressed", true);
    if (format4 === "hybrid") {
      if (key[key.length - 1] % 2) {
        key[0] = 7;
      } else {
        key[0] = 6;
      }
    }
    return formatReturnValue(key, enc);
  };
  ECDH.prototype.getPrivateKey = function(enc) {
    return formatReturnValue((this || _global$2$1).keys.getPrivate(), enc);
  };
  ECDH.prototype.setPublicKey = function(pub, enc) {
    enc = enc || "utf8";
    if (!Buffer3.isBuffer(pub)) {
      pub = new Buffer3(pub, enc);
    }
    (this || _global$2$1).keys._importPublic(pub);
    return this || _global$2$1;
  };
  ECDH.prototype.setPrivateKey = function(priv, enc) {
    enc = enc || "utf8";
    if (!Buffer3.isBuffer(priv)) {
      priv = new Buffer3(priv, enc);
    }
    var _priv = new BN(priv);
    _priv = _priv.toString(16);
    (this || _global$2$1).keys = (this || _global$2$1).curve.genKeyPair();
    (this || _global$2$1).keys._importPrivate(_priv);
    return this || _global$2$1;
  };
  function formatReturnValue(bn, enc, len) {
    if (!Array.isArray(bn)) {
      bn = bn.toArray();
    }
    var buf = new Buffer3(bn);
    if (len && buf.length < len) {
      var zeros = new Buffer3(len - buf.length);
      zeros.fill(0);
      buf = Buffer3.concat([zeros, buf]);
    }
    if (!enc) {
      return buf;
    } else {
      return buf.toString(enc);
    }
  }
  return exports$9$1;
}
function dew$8$1() {
  if (_dewExec$8$1)
    return exports$8$1;
  _dewExec$8$1 = true;
  var createHash2 = dew$1F();
  var Buffer3 = dew$1T().Buffer;
  exports$8$1 = function(seed, len) {
    var t8 = Buffer3.alloc(0);
    var i8 = 0;
    var c8;
    while (t8.length < len) {
      c8 = i2ops(i8++);
      t8 = Buffer3.concat([t8, createHash2("sha1").update(seed).update(c8).digest()]);
    }
    return t8.slice(0, len);
  };
  function i2ops(c8) {
    var out = Buffer3.allocUnsafe(4);
    out.writeUInt32BE(c8, 0);
    return out;
  }
  return exports$8$1;
}
function dew$7$1() {
  if (_dewExec$7$1)
    return exports$7$1;
  _dewExec$7$1 = true;
  exports$7$1 = function xor(a8, b5) {
    var len = a8.length;
    var i8 = -1;
    while (++i8 < len) {
      a8[i8] ^= b5[i8];
    }
    return a8;
  };
  return exports$7$1;
}
function dew$6$1() {
  if (_dewExec$6$1)
    return module$8.exports;
  _dewExec$6$1 = true;
  (function(module3, exports11) {
    function assert2(val, msg) {
      if (!val)
        throw new Error(msg || "Assertion failed");
    }
    function inherits4(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function() {
      };
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }
    function BN(number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }
      (this || _global$1$1).negative = 0;
      (this || _global$1$1).words = null;
      (this || _global$1$1).length = 0;
      (this || _global$1$1).red = null;
      if (number !== null) {
        if (base === "le" || base === "be") {
          endian = base;
          base = 10;
        }
        this._init(number || 0, base || 10, endian || "be");
      }
    }
    if (typeof module3 === "object") {
      module3.exports = BN;
    } else {
      exports11.BN = BN;
    }
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer3;
    try {
      if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
        Buffer3 = window.Buffer;
      } else {
        Buffer3 = e$1$1.Buffer;
      }
    } catch (e11) {
    }
    BN.isBN = function isBN(num) {
      if (num instanceof BN) {
        return true;
      }
      return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
      if (left.cmp(right) > 0)
        return left;
      return right;
    };
    BN.min = function min(left, right) {
      if (left.cmp(right) < 0)
        return left;
      return right;
    };
    BN.prototype._init = function init2(number, base, endian) {
      if (typeof number === "number") {
        return this._initNumber(number, base, endian);
      }
      if (typeof number === "object") {
        return this._initArray(number, base, endian);
      }
      if (base === "hex") {
        base = 16;
      }
      assert2(base === (base | 0) && base >= 2 && base <= 36);
      number = number.toString().replace(/\s+/g, "");
      var start = 0;
      if (number[0] === "-") {
        start++;
        (this || _global$1$1).negative = 1;
      }
      if (start < number.length) {
        if (base === 16) {
          this._parseHex(number, start, endian);
        } else {
          this._parseBase(number, base, start);
          if (endian === "le") {
            this._initArray(this.toArray(), base, endian);
          }
        }
      }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
      if (number < 0) {
        (this || _global$1$1).negative = 1;
        number = -number;
      }
      if (number < 67108864) {
        (this || _global$1$1).words = [number & 67108863];
        (this || _global$1$1).length = 1;
      } else if (number < 4503599627370496) {
        (this || _global$1$1).words = [number & 67108863, number / 67108864 & 67108863];
        (this || _global$1$1).length = 2;
      } else {
        assert2(number < 9007199254740992);
        (this || _global$1$1).words = [number & 67108863, number / 67108864 & 67108863, 1];
        (this || _global$1$1).length = 3;
      }
      if (endian !== "le")
        return;
      this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
      assert2(typeof number.length === "number");
      if (number.length <= 0) {
        (this || _global$1$1).words = [0];
        (this || _global$1$1).length = 1;
        return this || _global$1$1;
      }
      (this || _global$1$1).length = Math.ceil(number.length / 3);
      (this || _global$1$1).words = new Array((this || _global$1$1).length);
      for (var i8 = 0; i8 < (this || _global$1$1).length; i8++) {
        (this || _global$1$1).words[i8] = 0;
      }
      var j4, w4;
      var off2 = 0;
      if (endian === "be") {
        for (i8 = number.length - 1, j4 = 0; i8 >= 0; i8 -= 3) {
          w4 = number[i8] | number[i8 - 1] << 8 | number[i8 - 2] << 16;
          (this || _global$1$1).words[j4] |= w4 << off2 & 67108863;
          (this || _global$1$1).words[j4 + 1] = w4 >>> 26 - off2 & 67108863;
          off2 += 24;
          if (off2 >= 26) {
            off2 -= 26;
            j4++;
          }
        }
      } else if (endian === "le") {
        for (i8 = 0, j4 = 0; i8 < number.length; i8 += 3) {
          w4 = number[i8] | number[i8 + 1] << 8 | number[i8 + 2] << 16;
          (this || _global$1$1).words[j4] |= w4 << off2 & 67108863;
          (this || _global$1$1).words[j4 + 1] = w4 >>> 26 - off2 & 67108863;
          off2 += 24;
          if (off2 >= 26) {
            off2 -= 26;
            j4++;
          }
        }
      }
      return this.strip();
    };
    function parseHex4Bits(string, index) {
      var c8 = string.charCodeAt(index);
      if (c8 >= 65 && c8 <= 70) {
        return c8 - 55;
      } else if (c8 >= 97 && c8 <= 102) {
        return c8 - 87;
      } else {
        return c8 - 48 & 15;
      }
    }
    function parseHexByte(string, lowerBound, index) {
      var r9 = parseHex4Bits(string, index);
      if (index - 1 >= lowerBound) {
        r9 |= parseHex4Bits(string, index - 1) << 4;
      }
      return r9;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
      (this || _global$1$1).length = Math.ceil((number.length - start) / 6);
      (this || _global$1$1).words = new Array((this || _global$1$1).length);
      for (var i8 = 0; i8 < (this || _global$1$1).length; i8++) {
        (this || _global$1$1).words[i8] = 0;
      }
      var off2 = 0;
      var j4 = 0;
      var w4;
      if (endian === "be") {
        for (i8 = number.length - 1; i8 >= start; i8 -= 2) {
          w4 = parseHexByte(number, start, i8) << off2;
          (this || _global$1$1).words[j4] |= w4 & 67108863;
          if (off2 >= 18) {
            off2 -= 18;
            j4 += 1;
            (this || _global$1$1).words[j4] |= w4 >>> 26;
          } else {
            off2 += 8;
          }
        }
      } else {
        var parseLength = number.length - start;
        for (i8 = parseLength % 2 === 0 ? start + 1 : start; i8 < number.length; i8 += 2) {
          w4 = parseHexByte(number, start, i8) << off2;
          (this || _global$1$1).words[j4] |= w4 & 67108863;
          if (off2 >= 18) {
            off2 -= 18;
            j4 += 1;
            (this || _global$1$1).words[j4] |= w4 >>> 26;
          } else {
            off2 += 8;
          }
        }
      }
      this.strip();
    };
    function parseBase(str, start, end, mul) {
      var r9 = 0;
      var len = Math.min(str.length, end);
      for (var i8 = start; i8 < len; i8++) {
        var c8 = str.charCodeAt(i8) - 48;
        r9 *= mul;
        if (c8 >= 49) {
          r9 += c8 - 49 + 10;
        } else if (c8 >= 17) {
          r9 += c8 - 17 + 10;
        } else {
          r9 += c8;
        }
      }
      return r9;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
      (this || _global$1$1).words = [0];
      (this || _global$1$1).length = 1;
      for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
        limbLen++;
      }
      limbLen--;
      limbPow = limbPow / base | 0;
      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;
      var word = 0;
      for (var i8 = start; i8 < end; i8 += limbLen) {
        word = parseBase(number, i8, i8 + limbLen, base);
        this.imuln(limbPow);
        if ((this || _global$1$1).words[0] + word < 67108864) {
          (this || _global$1$1).words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i8, number.length, base);
        for (i8 = 0; i8 < mod; i8++) {
          pow *= base;
        }
        this.imuln(pow);
        if ((this || _global$1$1).words[0] + word < 67108864) {
          (this || _global$1$1).words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
      this.strip();
    };
    BN.prototype.copy = function copy(dest) {
      dest.words = new Array((this || _global$1$1).length);
      for (var i8 = 0; i8 < (this || _global$1$1).length; i8++) {
        dest.words[i8] = (this || _global$1$1).words[i8];
      }
      dest.length = (this || _global$1$1).length;
      dest.negative = (this || _global$1$1).negative;
      dest.red = (this || _global$1$1).red;
    };
    BN.prototype.clone = function clone() {
      var r9 = new BN(null);
      this.copy(r9);
      return r9;
    };
    BN.prototype._expand = function _expand(size) {
      while ((this || _global$1$1).length < size) {
        (this || _global$1$1).words[(this || _global$1$1).length++] = 0;
      }
      return this || _global$1$1;
    };
    BN.prototype.strip = function strip() {
      while ((this || _global$1$1).length > 1 && (this || _global$1$1).words[(this || _global$1$1).length - 1] === 0) {
        (this || _global$1$1).length--;
      }
      return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
      if ((this || _global$1$1).length === 1 && (this || _global$1$1).words[0] === 0) {
        (this || _global$1$1).negative = 0;
      }
      return this || _global$1$1;
    };
    BN.prototype.inspect = function inspect3() {
      return ((this || _global$1$1).red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    var zeros = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"];
    var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
    var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
    BN.prototype.toString = function toString3(base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;
      var out;
      if (base === 16 || base === "hex") {
        out = "";
        var off2 = 0;
        var carry = 0;
        for (var i8 = 0; i8 < (this || _global$1$1).length; i8++) {
          var w4 = (this || _global$1$1).words[i8];
          var word = ((w4 << off2 | carry) & 16777215).toString(16);
          carry = w4 >>> 24 - off2 & 16777215;
          if (carry !== 0 || i8 !== (this || _global$1$1).length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }
          off2 += 2;
          if (off2 >= 26) {
            off2 -= 26;
            i8--;
          }
        }
        if (carry !== 0) {
          out = carry.toString(16) + out;
        }
        while (out.length % padding !== 0) {
          out = "0" + out;
        }
        if ((this || _global$1$1).negative !== 0) {
          out = "-" + out;
        }
        return out;
      }
      if (base === (base | 0) && base >= 2 && base <= 36) {
        var groupSize = groupSizes[base];
        var groupBase = groupBases[base];
        out = "";
        var c8 = this.clone();
        c8.negative = 0;
        while (!c8.isZero()) {
          var r9 = c8.modn(groupBase).toString(base);
          c8 = c8.idivn(groupBase);
          if (!c8.isZero()) {
            out = zeros[groupSize - r9.length] + r9 + out;
          } else {
            out = r9 + out;
          }
        }
        if (this.isZero()) {
          out = "0" + out;
        }
        while (out.length % padding !== 0) {
          out = "0" + out;
        }
        if ((this || _global$1$1).negative !== 0) {
          out = "-" + out;
        }
        return out;
      }
      assert2(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
      var ret = (this || _global$1$1).words[0];
      if ((this || _global$1$1).length === 2) {
        ret += (this || _global$1$1).words[1] * 67108864;
      } else if ((this || _global$1$1).length === 3 && (this || _global$1$1).words[2] === 1) {
        ret += 4503599627370496 + (this || _global$1$1).words[1] * 67108864;
      } else if ((this || _global$1$1).length > 2) {
        assert2(false, "Number can only safely store up to 53 bits");
      }
      return (this || _global$1$1).negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON2() {
      return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
      assert2(typeof Buffer3 !== "undefined");
      return this.toArrayLike(Buffer3, endian, length);
    };
    BN.prototype.toArray = function toArray2(endian, length) {
      return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert2(byteLength <= reqLength, "byte array longer than desired length");
      assert2(reqLength > 0, "Requested array length <= 0");
      this.strip();
      var littleEndian = endian === "le";
      var res = new ArrayType(reqLength);
      var b5, i8;
      var q3 = this.clone();
      if (!littleEndian) {
        for (i8 = 0; i8 < reqLength - byteLength; i8++) {
          res[i8] = 0;
        }
        for (i8 = 0; !q3.isZero(); i8++) {
          b5 = q3.andln(255);
          q3.iushrn(8);
          res[reqLength - i8 - 1] = b5;
        }
      } else {
        for (i8 = 0; !q3.isZero(); i8++) {
          b5 = q3.andln(255);
          q3.iushrn(8);
          res[i8] = b5;
        }
        for (; i8 < reqLength; i8++) {
          res[i8] = 0;
        }
      }
      return res;
    };
    if (Math.clz32) {
      BN.prototype._countBits = function _countBits(w4) {
        return 32 - Math.clz32(w4);
      };
    } else {
      BN.prototype._countBits = function _countBits(w4) {
        var t8 = w4;
        var r9 = 0;
        if (t8 >= 4096) {
          r9 += 13;
          t8 >>>= 13;
        }
        if (t8 >= 64) {
          r9 += 7;
          t8 >>>= 7;
        }
        if (t8 >= 8) {
          r9 += 4;
          t8 >>>= 4;
        }
        if (t8 >= 2) {
          r9 += 2;
          t8 >>>= 2;
        }
        return r9 + t8;
      };
    }
    BN.prototype._zeroBits = function _zeroBits(w4) {
      if (w4 === 0)
        return 26;
      var t8 = w4;
      var r9 = 0;
      if ((t8 & 8191) === 0) {
        r9 += 13;
        t8 >>>= 13;
      }
      if ((t8 & 127) === 0) {
        r9 += 7;
        t8 >>>= 7;
      }
      if ((t8 & 15) === 0) {
        r9 += 4;
        t8 >>>= 4;
      }
      if ((t8 & 3) === 0) {
        r9 += 2;
        t8 >>>= 2;
      }
      if ((t8 & 1) === 0) {
        r9++;
      }
      return r9;
    };
    BN.prototype.bitLength = function bitLength() {
      var w4 = (this || _global$1$1).words[(this || _global$1$1).length - 1];
      var hi = this._countBits(w4);
      return ((this || _global$1$1).length - 1) * 26 + hi;
    };
    function toBitArray(num) {
      var w4 = new Array(num.bitLength());
      for (var bit = 0; bit < w4.length; bit++) {
        var off2 = bit / 26 | 0;
        var wbit = bit % 26;
        w4[bit] = (num.words[off2] & 1 << wbit) >>> wbit;
      }
      return w4;
    }
    BN.prototype.zeroBits = function zeroBits() {
      if (this.isZero())
        return 0;
      var r9 = 0;
      for (var i8 = 0; i8 < (this || _global$1$1).length; i8++) {
        var b5 = this._zeroBits((this || _global$1$1).words[i8]);
        r9 += b5;
        if (b5 !== 26)
          break;
      }
      return r9;
    };
    BN.prototype.byteLength = function byteLength() {
      return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
      if ((this || _global$1$1).negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }
      return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }
      return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
      return (this || _global$1$1).negative !== 0;
    };
    BN.prototype.neg = function neg() {
      return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
      if (!this.isZero()) {
        (this || _global$1$1).negative ^= 1;
      }
      return this || _global$1$1;
    };
    BN.prototype.iuor = function iuor(num) {
      while ((this || _global$1$1).length < num.length) {
        (this || _global$1$1).words[(this || _global$1$1).length++] = 0;
      }
      for (var i8 = 0; i8 < num.length; i8++) {
        (this || _global$1$1).words[i8] = (this || _global$1$1).words[i8] | num.words[i8];
      }
      return this.strip();
    };
    BN.prototype.ior = function ior(num) {
      assert2(((this || _global$1$1).negative | num.negative) === 0);
      return this.iuor(num);
    };
    BN.prototype.or = function or(num) {
      if ((this || _global$1$1).length > num.length)
        return this.clone().ior(num);
      return num.clone().ior(this || _global$1$1);
    };
    BN.prototype.uor = function uor(num) {
      if ((this || _global$1$1).length > num.length)
        return this.clone().iuor(num);
      return num.clone().iuor(this || _global$1$1);
    };
    BN.prototype.iuand = function iuand(num) {
      var b5;
      if ((this || _global$1$1).length > num.length) {
        b5 = num;
      } else {
        b5 = this || _global$1$1;
      }
      for (var i8 = 0; i8 < b5.length; i8++) {
        (this || _global$1$1).words[i8] = (this || _global$1$1).words[i8] & num.words[i8];
      }
      (this || _global$1$1).length = b5.length;
      return this.strip();
    };
    BN.prototype.iand = function iand(num) {
      assert2(((this || _global$1$1).negative | num.negative) === 0);
      return this.iuand(num);
    };
    BN.prototype.and = function and(num) {
      if ((this || _global$1$1).length > num.length)
        return this.clone().iand(num);
      return num.clone().iand(this || _global$1$1);
    };
    BN.prototype.uand = function uand(num) {
      if ((this || _global$1$1).length > num.length)
        return this.clone().iuand(num);
      return num.clone().iuand(this || _global$1$1);
    };
    BN.prototype.iuxor = function iuxor(num) {
      var a8;
      var b5;
      if ((this || _global$1$1).length > num.length) {
        a8 = this || _global$1$1;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$1$1;
      }
      for (var i8 = 0; i8 < b5.length; i8++) {
        (this || _global$1$1).words[i8] = a8.words[i8] ^ b5.words[i8];
      }
      if ((this || _global$1$1) !== a8) {
        for (; i8 < a8.length; i8++) {
          (this || _global$1$1).words[i8] = a8.words[i8];
        }
      }
      (this || _global$1$1).length = a8.length;
      return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
      assert2(((this || _global$1$1).negative | num.negative) === 0);
      return this.iuxor(num);
    };
    BN.prototype.xor = function xor(num) {
      if ((this || _global$1$1).length > num.length)
        return this.clone().ixor(num);
      return num.clone().ixor(this || _global$1$1);
    };
    BN.prototype.uxor = function uxor(num) {
      if ((this || _global$1$1).length > num.length)
        return this.clone().iuxor(num);
      return num.clone().iuxor(this || _global$1$1);
    };
    BN.prototype.inotn = function inotn(width) {
      assert2(typeof width === "number" && width >= 0);
      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;
      this._expand(bytesNeeded);
      if (bitsLeft > 0) {
        bytesNeeded--;
      }
      for (var i8 = 0; i8 < bytesNeeded; i8++) {
        (this || _global$1$1).words[i8] = ~(this || _global$1$1).words[i8] & 67108863;
      }
      if (bitsLeft > 0) {
        (this || _global$1$1).words[i8] = ~(this || _global$1$1).words[i8] & 67108863 >> 26 - bitsLeft;
      }
      return this.strip();
    };
    BN.prototype.notn = function notn(width) {
      return this.clone().inotn(width);
    };
    BN.prototype.setn = function setn(bit, val) {
      assert2(typeof bit === "number" && bit >= 0);
      var off2 = bit / 26 | 0;
      var wbit = bit % 26;
      this._expand(off2 + 1);
      if (val) {
        (this || _global$1$1).words[off2] = (this || _global$1$1).words[off2] | 1 << wbit;
      } else {
        (this || _global$1$1).words[off2] = (this || _global$1$1).words[off2] & ~(1 << wbit);
      }
      return this.strip();
    };
    BN.prototype.iadd = function iadd(num) {
      var r9;
      if ((this || _global$1$1).negative !== 0 && num.negative === 0) {
        (this || _global$1$1).negative = 0;
        r9 = this.isub(num);
        (this || _global$1$1).negative ^= 1;
        return this._normSign();
      } else if ((this || _global$1$1).negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r9 = this.isub(num);
        num.negative = 1;
        return r9._normSign();
      }
      var a8, b5;
      if ((this || _global$1$1).length > num.length) {
        a8 = this || _global$1$1;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$1$1;
      }
      var carry = 0;
      for (var i8 = 0; i8 < b5.length; i8++) {
        r9 = (a8.words[i8] | 0) + (b5.words[i8] | 0) + carry;
        (this || _global$1$1).words[i8] = r9 & 67108863;
        carry = r9 >>> 26;
      }
      for (; carry !== 0 && i8 < a8.length; i8++) {
        r9 = (a8.words[i8] | 0) + carry;
        (this || _global$1$1).words[i8] = r9 & 67108863;
        carry = r9 >>> 26;
      }
      (this || _global$1$1).length = a8.length;
      if (carry !== 0) {
        (this || _global$1$1).words[(this || _global$1$1).length] = carry;
        (this || _global$1$1).length++;
      } else if (a8 !== (this || _global$1$1)) {
        for (; i8 < a8.length; i8++) {
          (this || _global$1$1).words[i8] = a8.words[i8];
        }
      }
      return this || _global$1$1;
    };
    BN.prototype.add = function add(num) {
      var res;
      if (num.negative !== 0 && (this || _global$1$1).negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && (this || _global$1$1).negative !== 0) {
        (this || _global$1$1).negative = 0;
        res = num.sub(this || _global$1$1);
        (this || _global$1$1).negative = 1;
        return res;
      }
      if ((this || _global$1$1).length > num.length)
        return this.clone().iadd(num);
      return num.clone().iadd(this || _global$1$1);
    };
    BN.prototype.isub = function isub(num) {
      if (num.negative !== 0) {
        num.negative = 0;
        var r9 = this.iadd(num);
        num.negative = 1;
        return r9._normSign();
      } else if ((this || _global$1$1).negative !== 0) {
        (this || _global$1$1).negative = 0;
        this.iadd(num);
        (this || _global$1$1).negative = 1;
        return this._normSign();
      }
      var cmp = this.cmp(num);
      if (cmp === 0) {
        (this || _global$1$1).negative = 0;
        (this || _global$1$1).length = 1;
        (this || _global$1$1).words[0] = 0;
        return this || _global$1$1;
      }
      var a8, b5;
      if (cmp > 0) {
        a8 = this || _global$1$1;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$1$1;
      }
      var carry = 0;
      for (var i8 = 0; i8 < b5.length; i8++) {
        r9 = (a8.words[i8] | 0) - (b5.words[i8] | 0) + carry;
        carry = r9 >> 26;
        (this || _global$1$1).words[i8] = r9 & 67108863;
      }
      for (; carry !== 0 && i8 < a8.length; i8++) {
        r9 = (a8.words[i8] | 0) + carry;
        carry = r9 >> 26;
        (this || _global$1$1).words[i8] = r9 & 67108863;
      }
      if (carry === 0 && i8 < a8.length && a8 !== (this || _global$1$1)) {
        for (; i8 < a8.length; i8++) {
          (this || _global$1$1).words[i8] = a8.words[i8];
        }
      }
      (this || _global$1$1).length = Math.max((this || _global$1$1).length, i8);
      if (a8 !== (this || _global$1$1)) {
        (this || _global$1$1).negative = 1;
      }
      return this.strip();
    };
    BN.prototype.sub = function sub(num) {
      return this.clone().isub(num);
    };
    function smallMulTo(self2, num, out) {
      out.negative = num.negative ^ self2.negative;
      var len = self2.length + num.length | 0;
      out.length = len;
      len = len - 1 | 0;
      var a8 = self2.words[0] | 0;
      var b5 = num.words[0] | 0;
      var r9 = a8 * b5;
      var lo = r9 & 67108863;
      var carry = r9 / 67108864 | 0;
      out.words[0] = lo;
      for (var k4 = 1; k4 < len; k4++) {
        var ncarry = carry >>> 26;
        var rword = carry & 67108863;
        var maxJ = Math.min(k4, num.length - 1);
        for (var j4 = Math.max(0, k4 - self2.length + 1); j4 <= maxJ; j4++) {
          var i8 = k4 - j4 | 0;
          a8 = self2.words[i8] | 0;
          b5 = num.words[j4] | 0;
          r9 = a8 * b5 + rword;
          ncarry += r9 / 67108864 | 0;
          rword = r9 & 67108863;
        }
        out.words[k4] = rword | 0;
        carry = ncarry | 0;
      }
      if (carry !== 0) {
        out.words[k4] = carry | 0;
      } else {
        out.length--;
      }
      return out.strip();
    }
    var comb10MulTo = function comb10MulTo2(self2, num, out) {
      var a8 = self2.words;
      var b5 = num.words;
      var o9 = out.words;
      var c8 = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a8[0] | 0;
      var al0 = a0 & 8191;
      var ah0 = a0 >>> 13;
      var a1 = a8[1] | 0;
      var al1 = a1 & 8191;
      var ah1 = a1 >>> 13;
      var a22 = a8[2] | 0;
      var al2 = a22 & 8191;
      var ah2 = a22 >>> 13;
      var a32 = a8[3] | 0;
      var al3 = a32 & 8191;
      var ah3 = a32 >>> 13;
      var a42 = a8[4] | 0;
      var al4 = a42 & 8191;
      var ah4 = a42 >>> 13;
      var a52 = a8[5] | 0;
      var al5 = a52 & 8191;
      var ah5 = a52 >>> 13;
      var a62 = a8[6] | 0;
      var al6 = a62 & 8191;
      var ah6 = a62 >>> 13;
      var a72 = a8[7] | 0;
      var al7 = a72 & 8191;
      var ah7 = a72 >>> 13;
      var a82 = a8[8] | 0;
      var al8 = a82 & 8191;
      var ah8 = a82 >>> 13;
      var a9 = a8[9] | 0;
      var al9 = a9 & 8191;
      var ah9 = a9 >>> 13;
      var b0 = b5[0] | 0;
      var bl0 = b0 & 8191;
      var bh0 = b0 >>> 13;
      var b1 = b5[1] | 0;
      var bl1 = b1 & 8191;
      var bh1 = b1 >>> 13;
      var b22 = b5[2] | 0;
      var bl2 = b22 & 8191;
      var bh2 = b22 >>> 13;
      var b32 = b5[3] | 0;
      var bl3 = b32 & 8191;
      var bh3 = b32 >>> 13;
      var b42 = b5[4] | 0;
      var bl4 = b42 & 8191;
      var bh4 = b42 >>> 13;
      var b52 = b5[5] | 0;
      var bl5 = b52 & 8191;
      var bh5 = b52 >>> 13;
      var b6 = b5[6] | 0;
      var bl6 = b6 & 8191;
      var bh6 = b6 >>> 13;
      var b7 = b5[7] | 0;
      var bl7 = b7 & 8191;
      var bh7 = b7 >>> 13;
      var b8 = b5[8] | 0;
      var bl8 = b8 & 8191;
      var bh8 = b8 >>> 13;
      var b9 = b5[9] | 0;
      var bl9 = b9 & 8191;
      var bh9 = b9 >>> 13;
      out.negative = self2.negative ^ num.negative;
      out.length = 19;
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = mid + Math.imul(ah0, bl0) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
      w0 &= 67108863;
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = mid + Math.imul(ah1, bl0) | 0;
      hi = Math.imul(ah1, bh0);
      lo = lo + Math.imul(al0, bl1) | 0;
      mid = mid + Math.imul(al0, bh1) | 0;
      mid = mid + Math.imul(ah0, bl1) | 0;
      hi = hi + Math.imul(ah0, bh1) | 0;
      var w1 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
      w1 &= 67108863;
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = mid + Math.imul(ah2, bl0) | 0;
      hi = Math.imul(ah2, bh0);
      lo = lo + Math.imul(al1, bl1) | 0;
      mid = mid + Math.imul(al1, bh1) | 0;
      mid = mid + Math.imul(ah1, bl1) | 0;
      hi = hi + Math.imul(ah1, bh1) | 0;
      lo = lo + Math.imul(al0, bl2) | 0;
      mid = mid + Math.imul(al0, bh2) | 0;
      mid = mid + Math.imul(ah0, bl2) | 0;
      hi = hi + Math.imul(ah0, bh2) | 0;
      var w22 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w22 >>> 26) | 0;
      w22 &= 67108863;
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = mid + Math.imul(ah3, bl0) | 0;
      hi = Math.imul(ah3, bh0);
      lo = lo + Math.imul(al2, bl1) | 0;
      mid = mid + Math.imul(al2, bh1) | 0;
      mid = mid + Math.imul(ah2, bl1) | 0;
      hi = hi + Math.imul(ah2, bh1) | 0;
      lo = lo + Math.imul(al1, bl2) | 0;
      mid = mid + Math.imul(al1, bh2) | 0;
      mid = mid + Math.imul(ah1, bl2) | 0;
      hi = hi + Math.imul(ah1, bh2) | 0;
      lo = lo + Math.imul(al0, bl3) | 0;
      mid = mid + Math.imul(al0, bh3) | 0;
      mid = mid + Math.imul(ah0, bl3) | 0;
      hi = hi + Math.imul(ah0, bh3) | 0;
      var w32 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w32 >>> 26) | 0;
      w32 &= 67108863;
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = mid + Math.imul(ah4, bl0) | 0;
      hi = Math.imul(ah4, bh0);
      lo = lo + Math.imul(al3, bl1) | 0;
      mid = mid + Math.imul(al3, bh1) | 0;
      mid = mid + Math.imul(ah3, bl1) | 0;
      hi = hi + Math.imul(ah3, bh1) | 0;
      lo = lo + Math.imul(al2, bl2) | 0;
      mid = mid + Math.imul(al2, bh2) | 0;
      mid = mid + Math.imul(ah2, bl2) | 0;
      hi = hi + Math.imul(ah2, bh2) | 0;
      lo = lo + Math.imul(al1, bl3) | 0;
      mid = mid + Math.imul(al1, bh3) | 0;
      mid = mid + Math.imul(ah1, bl3) | 0;
      hi = hi + Math.imul(ah1, bh3) | 0;
      lo = lo + Math.imul(al0, bl4) | 0;
      mid = mid + Math.imul(al0, bh4) | 0;
      mid = mid + Math.imul(ah0, bl4) | 0;
      hi = hi + Math.imul(ah0, bh4) | 0;
      var w4 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
      w4 &= 67108863;
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = mid + Math.imul(ah5, bl0) | 0;
      hi = Math.imul(ah5, bh0);
      lo = lo + Math.imul(al4, bl1) | 0;
      mid = mid + Math.imul(al4, bh1) | 0;
      mid = mid + Math.imul(ah4, bl1) | 0;
      hi = hi + Math.imul(ah4, bh1) | 0;
      lo = lo + Math.imul(al3, bl2) | 0;
      mid = mid + Math.imul(al3, bh2) | 0;
      mid = mid + Math.imul(ah3, bl2) | 0;
      hi = hi + Math.imul(ah3, bh2) | 0;
      lo = lo + Math.imul(al2, bl3) | 0;
      mid = mid + Math.imul(al2, bh3) | 0;
      mid = mid + Math.imul(ah2, bl3) | 0;
      hi = hi + Math.imul(ah2, bh3) | 0;
      lo = lo + Math.imul(al1, bl4) | 0;
      mid = mid + Math.imul(al1, bh4) | 0;
      mid = mid + Math.imul(ah1, bl4) | 0;
      hi = hi + Math.imul(ah1, bh4) | 0;
      lo = lo + Math.imul(al0, bl5) | 0;
      mid = mid + Math.imul(al0, bh5) | 0;
      mid = mid + Math.imul(ah0, bl5) | 0;
      hi = hi + Math.imul(ah0, bh5) | 0;
      var w5 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
      w5 &= 67108863;
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = mid + Math.imul(ah6, bl0) | 0;
      hi = Math.imul(ah6, bh0);
      lo = lo + Math.imul(al5, bl1) | 0;
      mid = mid + Math.imul(al5, bh1) | 0;
      mid = mid + Math.imul(ah5, bl1) | 0;
      hi = hi + Math.imul(ah5, bh1) | 0;
      lo = lo + Math.imul(al4, bl2) | 0;
      mid = mid + Math.imul(al4, bh2) | 0;
      mid = mid + Math.imul(ah4, bl2) | 0;
      hi = hi + Math.imul(ah4, bh2) | 0;
      lo = lo + Math.imul(al3, bl3) | 0;
      mid = mid + Math.imul(al3, bh3) | 0;
      mid = mid + Math.imul(ah3, bl3) | 0;
      hi = hi + Math.imul(ah3, bh3) | 0;
      lo = lo + Math.imul(al2, bl4) | 0;
      mid = mid + Math.imul(al2, bh4) | 0;
      mid = mid + Math.imul(ah2, bl4) | 0;
      hi = hi + Math.imul(ah2, bh4) | 0;
      lo = lo + Math.imul(al1, bl5) | 0;
      mid = mid + Math.imul(al1, bh5) | 0;
      mid = mid + Math.imul(ah1, bl5) | 0;
      hi = hi + Math.imul(ah1, bh5) | 0;
      lo = lo + Math.imul(al0, bl6) | 0;
      mid = mid + Math.imul(al0, bh6) | 0;
      mid = mid + Math.imul(ah0, bl6) | 0;
      hi = hi + Math.imul(ah0, bh6) | 0;
      var w6 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
      w6 &= 67108863;
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = mid + Math.imul(ah7, bl0) | 0;
      hi = Math.imul(ah7, bh0);
      lo = lo + Math.imul(al6, bl1) | 0;
      mid = mid + Math.imul(al6, bh1) | 0;
      mid = mid + Math.imul(ah6, bl1) | 0;
      hi = hi + Math.imul(ah6, bh1) | 0;
      lo = lo + Math.imul(al5, bl2) | 0;
      mid = mid + Math.imul(al5, bh2) | 0;
      mid = mid + Math.imul(ah5, bl2) | 0;
      hi = hi + Math.imul(ah5, bh2) | 0;
      lo = lo + Math.imul(al4, bl3) | 0;
      mid = mid + Math.imul(al4, bh3) | 0;
      mid = mid + Math.imul(ah4, bl3) | 0;
      hi = hi + Math.imul(ah4, bh3) | 0;
      lo = lo + Math.imul(al3, bl4) | 0;
      mid = mid + Math.imul(al3, bh4) | 0;
      mid = mid + Math.imul(ah3, bl4) | 0;
      hi = hi + Math.imul(ah3, bh4) | 0;
      lo = lo + Math.imul(al2, bl5) | 0;
      mid = mid + Math.imul(al2, bh5) | 0;
      mid = mid + Math.imul(ah2, bl5) | 0;
      hi = hi + Math.imul(ah2, bh5) | 0;
      lo = lo + Math.imul(al1, bl6) | 0;
      mid = mid + Math.imul(al1, bh6) | 0;
      mid = mid + Math.imul(ah1, bl6) | 0;
      hi = hi + Math.imul(ah1, bh6) | 0;
      lo = lo + Math.imul(al0, bl7) | 0;
      mid = mid + Math.imul(al0, bh7) | 0;
      mid = mid + Math.imul(ah0, bl7) | 0;
      hi = hi + Math.imul(ah0, bh7) | 0;
      var w7 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
      w7 &= 67108863;
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = mid + Math.imul(ah8, bl0) | 0;
      hi = Math.imul(ah8, bh0);
      lo = lo + Math.imul(al7, bl1) | 0;
      mid = mid + Math.imul(al7, bh1) | 0;
      mid = mid + Math.imul(ah7, bl1) | 0;
      hi = hi + Math.imul(ah7, bh1) | 0;
      lo = lo + Math.imul(al6, bl2) | 0;
      mid = mid + Math.imul(al6, bh2) | 0;
      mid = mid + Math.imul(ah6, bl2) | 0;
      hi = hi + Math.imul(ah6, bh2) | 0;
      lo = lo + Math.imul(al5, bl3) | 0;
      mid = mid + Math.imul(al5, bh3) | 0;
      mid = mid + Math.imul(ah5, bl3) | 0;
      hi = hi + Math.imul(ah5, bh3) | 0;
      lo = lo + Math.imul(al4, bl4) | 0;
      mid = mid + Math.imul(al4, bh4) | 0;
      mid = mid + Math.imul(ah4, bl4) | 0;
      hi = hi + Math.imul(ah4, bh4) | 0;
      lo = lo + Math.imul(al3, bl5) | 0;
      mid = mid + Math.imul(al3, bh5) | 0;
      mid = mid + Math.imul(ah3, bl5) | 0;
      hi = hi + Math.imul(ah3, bh5) | 0;
      lo = lo + Math.imul(al2, bl6) | 0;
      mid = mid + Math.imul(al2, bh6) | 0;
      mid = mid + Math.imul(ah2, bl6) | 0;
      hi = hi + Math.imul(ah2, bh6) | 0;
      lo = lo + Math.imul(al1, bl7) | 0;
      mid = mid + Math.imul(al1, bh7) | 0;
      mid = mid + Math.imul(ah1, bl7) | 0;
      hi = hi + Math.imul(ah1, bh7) | 0;
      lo = lo + Math.imul(al0, bl8) | 0;
      mid = mid + Math.imul(al0, bh8) | 0;
      mid = mid + Math.imul(ah0, bl8) | 0;
      hi = hi + Math.imul(ah0, bh8) | 0;
      var w8 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
      w8 &= 67108863;
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = mid + Math.imul(ah9, bl0) | 0;
      hi = Math.imul(ah9, bh0);
      lo = lo + Math.imul(al8, bl1) | 0;
      mid = mid + Math.imul(al8, bh1) | 0;
      mid = mid + Math.imul(ah8, bl1) | 0;
      hi = hi + Math.imul(ah8, bh1) | 0;
      lo = lo + Math.imul(al7, bl2) | 0;
      mid = mid + Math.imul(al7, bh2) | 0;
      mid = mid + Math.imul(ah7, bl2) | 0;
      hi = hi + Math.imul(ah7, bh2) | 0;
      lo = lo + Math.imul(al6, bl3) | 0;
      mid = mid + Math.imul(al6, bh3) | 0;
      mid = mid + Math.imul(ah6, bl3) | 0;
      hi = hi + Math.imul(ah6, bh3) | 0;
      lo = lo + Math.imul(al5, bl4) | 0;
      mid = mid + Math.imul(al5, bh4) | 0;
      mid = mid + Math.imul(ah5, bl4) | 0;
      hi = hi + Math.imul(ah5, bh4) | 0;
      lo = lo + Math.imul(al4, bl5) | 0;
      mid = mid + Math.imul(al4, bh5) | 0;
      mid = mid + Math.imul(ah4, bl5) | 0;
      hi = hi + Math.imul(ah4, bh5) | 0;
      lo = lo + Math.imul(al3, bl6) | 0;
      mid = mid + Math.imul(al3, bh6) | 0;
      mid = mid + Math.imul(ah3, bl6) | 0;
      hi = hi + Math.imul(ah3, bh6) | 0;
      lo = lo + Math.imul(al2, bl7) | 0;
      mid = mid + Math.imul(al2, bh7) | 0;
      mid = mid + Math.imul(ah2, bl7) | 0;
      hi = hi + Math.imul(ah2, bh7) | 0;
      lo = lo + Math.imul(al1, bl8) | 0;
      mid = mid + Math.imul(al1, bh8) | 0;
      mid = mid + Math.imul(ah1, bl8) | 0;
      hi = hi + Math.imul(ah1, bh8) | 0;
      lo = lo + Math.imul(al0, bl9) | 0;
      mid = mid + Math.imul(al0, bh9) | 0;
      mid = mid + Math.imul(ah0, bl9) | 0;
      hi = hi + Math.imul(ah0, bh9) | 0;
      var w9 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
      w9 &= 67108863;
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = mid + Math.imul(ah9, bl1) | 0;
      hi = Math.imul(ah9, bh1);
      lo = lo + Math.imul(al8, bl2) | 0;
      mid = mid + Math.imul(al8, bh2) | 0;
      mid = mid + Math.imul(ah8, bl2) | 0;
      hi = hi + Math.imul(ah8, bh2) | 0;
      lo = lo + Math.imul(al7, bl3) | 0;
      mid = mid + Math.imul(al7, bh3) | 0;
      mid = mid + Math.imul(ah7, bl3) | 0;
      hi = hi + Math.imul(ah7, bh3) | 0;
      lo = lo + Math.imul(al6, bl4) | 0;
      mid = mid + Math.imul(al6, bh4) | 0;
      mid = mid + Math.imul(ah6, bl4) | 0;
      hi = hi + Math.imul(ah6, bh4) | 0;
      lo = lo + Math.imul(al5, bl5) | 0;
      mid = mid + Math.imul(al5, bh5) | 0;
      mid = mid + Math.imul(ah5, bl5) | 0;
      hi = hi + Math.imul(ah5, bh5) | 0;
      lo = lo + Math.imul(al4, bl6) | 0;
      mid = mid + Math.imul(al4, bh6) | 0;
      mid = mid + Math.imul(ah4, bl6) | 0;
      hi = hi + Math.imul(ah4, bh6) | 0;
      lo = lo + Math.imul(al3, bl7) | 0;
      mid = mid + Math.imul(al3, bh7) | 0;
      mid = mid + Math.imul(ah3, bl7) | 0;
      hi = hi + Math.imul(ah3, bh7) | 0;
      lo = lo + Math.imul(al2, bl8) | 0;
      mid = mid + Math.imul(al2, bh8) | 0;
      mid = mid + Math.imul(ah2, bl8) | 0;
      hi = hi + Math.imul(ah2, bh8) | 0;
      lo = lo + Math.imul(al1, bl9) | 0;
      mid = mid + Math.imul(al1, bh9) | 0;
      mid = mid + Math.imul(ah1, bl9) | 0;
      hi = hi + Math.imul(ah1, bh9) | 0;
      var w10 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
      w10 &= 67108863;
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = mid + Math.imul(ah9, bl2) | 0;
      hi = Math.imul(ah9, bh2);
      lo = lo + Math.imul(al8, bl3) | 0;
      mid = mid + Math.imul(al8, bh3) | 0;
      mid = mid + Math.imul(ah8, bl3) | 0;
      hi = hi + Math.imul(ah8, bh3) | 0;
      lo = lo + Math.imul(al7, bl4) | 0;
      mid = mid + Math.imul(al7, bh4) | 0;
      mid = mid + Math.imul(ah7, bl4) | 0;
      hi = hi + Math.imul(ah7, bh4) | 0;
      lo = lo + Math.imul(al6, bl5) | 0;
      mid = mid + Math.imul(al6, bh5) | 0;
      mid = mid + Math.imul(ah6, bl5) | 0;
      hi = hi + Math.imul(ah6, bh5) | 0;
      lo = lo + Math.imul(al5, bl6) | 0;
      mid = mid + Math.imul(al5, bh6) | 0;
      mid = mid + Math.imul(ah5, bl6) | 0;
      hi = hi + Math.imul(ah5, bh6) | 0;
      lo = lo + Math.imul(al4, bl7) | 0;
      mid = mid + Math.imul(al4, bh7) | 0;
      mid = mid + Math.imul(ah4, bl7) | 0;
      hi = hi + Math.imul(ah4, bh7) | 0;
      lo = lo + Math.imul(al3, bl8) | 0;
      mid = mid + Math.imul(al3, bh8) | 0;
      mid = mid + Math.imul(ah3, bl8) | 0;
      hi = hi + Math.imul(ah3, bh8) | 0;
      lo = lo + Math.imul(al2, bl9) | 0;
      mid = mid + Math.imul(al2, bh9) | 0;
      mid = mid + Math.imul(ah2, bl9) | 0;
      hi = hi + Math.imul(ah2, bh9) | 0;
      var w11 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
      w11 &= 67108863;
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = mid + Math.imul(ah9, bl3) | 0;
      hi = Math.imul(ah9, bh3);
      lo = lo + Math.imul(al8, bl4) | 0;
      mid = mid + Math.imul(al8, bh4) | 0;
      mid = mid + Math.imul(ah8, bl4) | 0;
      hi = hi + Math.imul(ah8, bh4) | 0;
      lo = lo + Math.imul(al7, bl5) | 0;
      mid = mid + Math.imul(al7, bh5) | 0;
      mid = mid + Math.imul(ah7, bl5) | 0;
      hi = hi + Math.imul(ah7, bh5) | 0;
      lo = lo + Math.imul(al6, bl6) | 0;
      mid = mid + Math.imul(al6, bh6) | 0;
      mid = mid + Math.imul(ah6, bl6) | 0;
      hi = hi + Math.imul(ah6, bh6) | 0;
      lo = lo + Math.imul(al5, bl7) | 0;
      mid = mid + Math.imul(al5, bh7) | 0;
      mid = mid + Math.imul(ah5, bl7) | 0;
      hi = hi + Math.imul(ah5, bh7) | 0;
      lo = lo + Math.imul(al4, bl8) | 0;
      mid = mid + Math.imul(al4, bh8) | 0;
      mid = mid + Math.imul(ah4, bl8) | 0;
      hi = hi + Math.imul(ah4, bh8) | 0;
      lo = lo + Math.imul(al3, bl9) | 0;
      mid = mid + Math.imul(al3, bh9) | 0;
      mid = mid + Math.imul(ah3, bl9) | 0;
      hi = hi + Math.imul(ah3, bh9) | 0;
      var w12 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
      w12 &= 67108863;
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = mid + Math.imul(ah9, bl4) | 0;
      hi = Math.imul(ah9, bh4);
      lo = lo + Math.imul(al8, bl5) | 0;
      mid = mid + Math.imul(al8, bh5) | 0;
      mid = mid + Math.imul(ah8, bl5) | 0;
      hi = hi + Math.imul(ah8, bh5) | 0;
      lo = lo + Math.imul(al7, bl6) | 0;
      mid = mid + Math.imul(al7, bh6) | 0;
      mid = mid + Math.imul(ah7, bl6) | 0;
      hi = hi + Math.imul(ah7, bh6) | 0;
      lo = lo + Math.imul(al6, bl7) | 0;
      mid = mid + Math.imul(al6, bh7) | 0;
      mid = mid + Math.imul(ah6, bl7) | 0;
      hi = hi + Math.imul(ah6, bh7) | 0;
      lo = lo + Math.imul(al5, bl8) | 0;
      mid = mid + Math.imul(al5, bh8) | 0;
      mid = mid + Math.imul(ah5, bl8) | 0;
      hi = hi + Math.imul(ah5, bh8) | 0;
      lo = lo + Math.imul(al4, bl9) | 0;
      mid = mid + Math.imul(al4, bh9) | 0;
      mid = mid + Math.imul(ah4, bl9) | 0;
      hi = hi + Math.imul(ah4, bh9) | 0;
      var w13 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
      w13 &= 67108863;
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = mid + Math.imul(ah9, bl5) | 0;
      hi = Math.imul(ah9, bh5);
      lo = lo + Math.imul(al8, bl6) | 0;
      mid = mid + Math.imul(al8, bh6) | 0;
      mid = mid + Math.imul(ah8, bl6) | 0;
      hi = hi + Math.imul(ah8, bh6) | 0;
      lo = lo + Math.imul(al7, bl7) | 0;
      mid = mid + Math.imul(al7, bh7) | 0;
      mid = mid + Math.imul(ah7, bl7) | 0;
      hi = hi + Math.imul(ah7, bh7) | 0;
      lo = lo + Math.imul(al6, bl8) | 0;
      mid = mid + Math.imul(al6, bh8) | 0;
      mid = mid + Math.imul(ah6, bl8) | 0;
      hi = hi + Math.imul(ah6, bh8) | 0;
      lo = lo + Math.imul(al5, bl9) | 0;
      mid = mid + Math.imul(al5, bh9) | 0;
      mid = mid + Math.imul(ah5, bl9) | 0;
      hi = hi + Math.imul(ah5, bh9) | 0;
      var w14 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
      w14 &= 67108863;
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = mid + Math.imul(ah9, bl6) | 0;
      hi = Math.imul(ah9, bh6);
      lo = lo + Math.imul(al8, bl7) | 0;
      mid = mid + Math.imul(al8, bh7) | 0;
      mid = mid + Math.imul(ah8, bl7) | 0;
      hi = hi + Math.imul(ah8, bh7) | 0;
      lo = lo + Math.imul(al7, bl8) | 0;
      mid = mid + Math.imul(al7, bh8) | 0;
      mid = mid + Math.imul(ah7, bl8) | 0;
      hi = hi + Math.imul(ah7, bh8) | 0;
      lo = lo + Math.imul(al6, bl9) | 0;
      mid = mid + Math.imul(al6, bh9) | 0;
      mid = mid + Math.imul(ah6, bl9) | 0;
      hi = hi + Math.imul(ah6, bh9) | 0;
      var w15 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
      w15 &= 67108863;
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = mid + Math.imul(ah9, bl7) | 0;
      hi = Math.imul(ah9, bh7);
      lo = lo + Math.imul(al8, bl8) | 0;
      mid = mid + Math.imul(al8, bh8) | 0;
      mid = mid + Math.imul(ah8, bl8) | 0;
      hi = hi + Math.imul(ah8, bh8) | 0;
      lo = lo + Math.imul(al7, bl9) | 0;
      mid = mid + Math.imul(al7, bh9) | 0;
      mid = mid + Math.imul(ah7, bl9) | 0;
      hi = hi + Math.imul(ah7, bh9) | 0;
      var w16 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
      w16 &= 67108863;
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = mid + Math.imul(ah9, bl8) | 0;
      hi = Math.imul(ah9, bh8);
      lo = lo + Math.imul(al8, bl9) | 0;
      mid = mid + Math.imul(al8, bh9) | 0;
      mid = mid + Math.imul(ah8, bl9) | 0;
      hi = hi + Math.imul(ah8, bh9) | 0;
      var w17 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
      w17 &= 67108863;
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = mid + Math.imul(ah9, bl9) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
      w18 &= 67108863;
      o9[0] = w0;
      o9[1] = w1;
      o9[2] = w22;
      o9[3] = w32;
      o9[4] = w4;
      o9[5] = w5;
      o9[6] = w6;
      o9[7] = w7;
      o9[8] = w8;
      o9[9] = w9;
      o9[10] = w10;
      o9[11] = w11;
      o9[12] = w12;
      o9[13] = w13;
      o9[14] = w14;
      o9[15] = w15;
      o9[16] = w16;
      o9[17] = w17;
      o9[18] = w18;
      if (c8 !== 0) {
        o9[19] = c8;
        out.length++;
      }
      return out;
    };
    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }
    function bigMulTo(self2, num, out) {
      out.negative = num.negative ^ self2.negative;
      out.length = self2.length + num.length;
      var carry = 0;
      var hncarry = 0;
      for (var k4 = 0; k4 < out.length - 1; k4++) {
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 67108863;
        var maxJ = Math.min(k4, num.length - 1);
        for (var j4 = Math.max(0, k4 - self2.length + 1); j4 <= maxJ; j4++) {
          var i8 = k4 - j4;
          var a8 = self2.words[i8] | 0;
          var b5 = num.words[j4] | 0;
          var r9 = a8 * b5;
          var lo = r9 & 67108863;
          ncarry = ncarry + (r9 / 67108864 | 0) | 0;
          lo = lo + rword | 0;
          rword = lo & 67108863;
          ncarry = ncarry + (lo >>> 26) | 0;
          hncarry += ncarry >>> 26;
          ncarry &= 67108863;
        }
        out.words[k4] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k4] = carry;
      } else {
        out.length--;
      }
      return out.strip();
    }
    function jumboMulTo(self2, num, out) {
      var fftm = new FFTM();
      return fftm.mulp(self2, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
      var res;
      var len = (this || _global$1$1).length + num.length;
      if ((this || _global$1$1).length === 10 && num.length === 10) {
        res = comb10MulTo(this || _global$1$1, num, out);
      } else if (len < 63) {
        res = smallMulTo(this || _global$1$1, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this || _global$1$1, num, out);
      } else {
        res = jumboMulTo(this || _global$1$1, num, out);
      }
      return res;
    };
    function FFTM(x4, y6) {
      (this || _global$1$1).x = x4;
      (this || _global$1$1).y = y6;
    }
    FFTM.prototype.makeRBT = function makeRBT(N4) {
      var t8 = new Array(N4);
      var l8 = BN.prototype._countBits(N4) - 1;
      for (var i8 = 0; i8 < N4; i8++) {
        t8[i8] = this.revBin(i8, l8, N4);
      }
      return t8;
    };
    FFTM.prototype.revBin = function revBin(x4, l8, N4) {
      if (x4 === 0 || x4 === N4 - 1)
        return x4;
      var rb = 0;
      for (var i8 = 0; i8 < l8; i8++) {
        rb |= (x4 & 1) << l8 - i8 - 1;
        x4 >>= 1;
      }
      return rb;
    };
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N4) {
      for (var i8 = 0; i8 < N4; i8++) {
        rtws[i8] = rws[rbt[i8]];
        itws[i8] = iws[rbt[i8]];
      }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N4, rbt) {
      this.permute(rbt, rws, iws, rtws, itws, N4);
      for (var s7 = 1; s7 < N4; s7 <<= 1) {
        var l8 = s7 << 1;
        var rtwdf = Math.cos(2 * Math.PI / l8);
        var itwdf = Math.sin(2 * Math.PI / l8);
        for (var p8 = 0; p8 < N4; p8 += l8) {
          var rtwdf_ = rtwdf;
          var itwdf_ = itwdf;
          for (var j4 = 0; j4 < s7; j4++) {
            var re3 = rtws[p8 + j4];
            var ie2 = itws[p8 + j4];
            var ro = rtws[p8 + j4 + s7];
            var io = itws[p8 + j4 + s7];
            var rx = rtwdf_ * ro - itwdf_ * io;
            io = rtwdf_ * io + itwdf_ * ro;
            ro = rx;
            rtws[p8 + j4] = re3 + ro;
            itws[p8 + j4] = ie2 + io;
            rtws[p8 + j4 + s7] = re3 - ro;
            itws[p8 + j4 + s7] = ie2 - io;
            if (j4 !== l8) {
              rx = rtwdf * rtwdf_ - itwdf * itwdf_;
              itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
              rtwdf_ = rx;
            }
          }
        }
      }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n9, m6) {
      var N4 = Math.max(m6, n9) | 1;
      var odd = N4 & 1;
      var i8 = 0;
      for (N4 = N4 / 2 | 0; N4; N4 = N4 >>> 1) {
        i8++;
      }
      return 1 << i8 + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N4) {
      if (N4 <= 1)
        return;
      for (var i8 = 0; i8 < N4 / 2; i8++) {
        var t8 = rws[i8];
        rws[i8] = rws[N4 - i8 - 1];
        rws[N4 - i8 - 1] = t8;
        t8 = iws[i8];
        iws[i8] = -iws[N4 - i8 - 1];
        iws[N4 - i8 - 1] = -t8;
      }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N4) {
      var carry = 0;
      for (var i8 = 0; i8 < N4 / 2; i8++) {
        var w4 = Math.round(ws[2 * i8 + 1] / N4) * 8192 + Math.round(ws[2 * i8] / N4) + carry;
        ws[i8] = w4 & 67108863;
        if (w4 < 67108864) {
          carry = 0;
        } else {
          carry = w4 / 67108864 | 0;
        }
      }
      return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N4) {
      var carry = 0;
      for (var i8 = 0; i8 < len; i8++) {
        carry = carry + (ws[i8] | 0);
        rws[2 * i8] = carry & 8191;
        carry = carry >>> 13;
        rws[2 * i8 + 1] = carry & 8191;
        carry = carry >>> 13;
      }
      for (i8 = 2 * len; i8 < N4; ++i8) {
        rws[i8] = 0;
      }
      assert2(carry === 0);
      assert2((carry & ~8191) === 0);
    };
    FFTM.prototype.stub = function stub(N4) {
      var ph = new Array(N4);
      for (var i8 = 0; i8 < N4; i8++) {
        ph[i8] = 0;
      }
      return ph;
    };
    FFTM.prototype.mulp = function mulp(x4, y6, out) {
      var N4 = 2 * this.guessLen13b(x4.length, y6.length);
      var rbt = this.makeRBT(N4);
      var _4 = this.stub(N4);
      var rws = new Array(N4);
      var rwst = new Array(N4);
      var iwst = new Array(N4);
      var nrws = new Array(N4);
      var nrwst = new Array(N4);
      var niwst = new Array(N4);
      var rmws = out.words;
      rmws.length = N4;
      this.convert13b(x4.words, x4.length, rws, N4);
      this.convert13b(y6.words, y6.length, nrws, N4);
      this.transform(rws, _4, rwst, iwst, N4, rbt);
      this.transform(nrws, _4, nrwst, niwst, N4, rbt);
      for (var i8 = 0; i8 < N4; i8++) {
        var rx = rwst[i8] * nrwst[i8] - iwst[i8] * niwst[i8];
        iwst[i8] = rwst[i8] * niwst[i8] + iwst[i8] * nrwst[i8];
        rwst[i8] = rx;
      }
      this.conjugate(rwst, iwst, N4);
      this.transform(rwst, iwst, rmws, _4, N4, rbt);
      this.conjugate(rmws, _4, N4);
      this.normalize13b(rmws, N4);
      out.negative = x4.negative ^ y6.negative;
      out.length = x4.length + y6.length;
      return out.strip();
    };
    BN.prototype.mul = function mul(num) {
      var out = new BN(null);
      out.words = new Array((this || _global$1$1).length + num.length);
      return this.mulTo(num, out);
    };
    BN.prototype.mulf = function mulf(num) {
      var out = new BN(null);
      out.words = new Array((this || _global$1$1).length + num.length);
      return jumboMulTo(this || _global$1$1, num, out);
    };
    BN.prototype.imul = function imul(num) {
      return this.clone().mulTo(num, this || _global$1$1);
    };
    BN.prototype.imuln = function imuln(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      var carry = 0;
      for (var i8 = 0; i8 < (this || _global$1$1).length; i8++) {
        var w4 = ((this || _global$1$1).words[i8] | 0) * num;
        var lo = (w4 & 67108863) + (carry & 67108863);
        carry >>= 26;
        carry += w4 / 67108864 | 0;
        carry += lo >>> 26;
        (this || _global$1$1).words[i8] = lo & 67108863;
      }
      if (carry !== 0) {
        (this || _global$1$1).words[i8] = carry;
        (this || _global$1$1).length++;
      }
      return this || _global$1$1;
    };
    BN.prototype.muln = function muln(num) {
      return this.clone().imuln(num);
    };
    BN.prototype.sqr = function sqr() {
      return this.mul(this || _global$1$1);
    };
    BN.prototype.isqr = function isqr() {
      return this.imul(this.clone());
    };
    BN.prototype.pow = function pow(num) {
      var w4 = toBitArray(num);
      if (w4.length === 0)
        return new BN(1);
      var res = this || _global$1$1;
      for (var i8 = 0; i8 < w4.length; i8++, res = res.sqr()) {
        if (w4[i8] !== 0)
          break;
      }
      if (++i8 < w4.length) {
        for (var q3 = res.sqr(); i8 < w4.length; i8++, q3 = q3.sqr()) {
          if (w4[i8] === 0)
            continue;
          res = res.mul(q3);
        }
      }
      return res;
    };
    BN.prototype.iushln = function iushln(bits) {
      assert2(typeof bits === "number" && bits >= 0);
      var r9 = bits % 26;
      var s7 = (bits - r9) / 26;
      var carryMask = 67108863 >>> 26 - r9 << 26 - r9;
      var i8;
      if (r9 !== 0) {
        var carry = 0;
        for (i8 = 0; i8 < (this || _global$1$1).length; i8++) {
          var newCarry = (this || _global$1$1).words[i8] & carryMask;
          var c8 = ((this || _global$1$1).words[i8] | 0) - newCarry << r9;
          (this || _global$1$1).words[i8] = c8 | carry;
          carry = newCarry >>> 26 - r9;
        }
        if (carry) {
          (this || _global$1$1).words[i8] = carry;
          (this || _global$1$1).length++;
        }
      }
      if (s7 !== 0) {
        for (i8 = (this || _global$1$1).length - 1; i8 >= 0; i8--) {
          (this || _global$1$1).words[i8 + s7] = (this || _global$1$1).words[i8];
        }
        for (i8 = 0; i8 < s7; i8++) {
          (this || _global$1$1).words[i8] = 0;
        }
        (this || _global$1$1).length += s7;
      }
      return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
      assert2((this || _global$1$1).negative === 0);
      return this.iushln(bits);
    };
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
      assert2(typeof bits === "number" && bits >= 0);
      var h8;
      if (hint) {
        h8 = (hint - hint % 26) / 26;
      } else {
        h8 = 0;
      }
      var r9 = bits % 26;
      var s7 = Math.min((bits - r9) / 26, (this || _global$1$1).length);
      var mask = 67108863 ^ 67108863 >>> r9 << r9;
      var maskedWords = extended;
      h8 -= s7;
      h8 = Math.max(0, h8);
      if (maskedWords) {
        for (var i8 = 0; i8 < s7; i8++) {
          maskedWords.words[i8] = (this || _global$1$1).words[i8];
        }
        maskedWords.length = s7;
      }
      if (s7 === 0)
        ;
      else if ((this || _global$1$1).length > s7) {
        (this || _global$1$1).length -= s7;
        for (i8 = 0; i8 < (this || _global$1$1).length; i8++) {
          (this || _global$1$1).words[i8] = (this || _global$1$1).words[i8 + s7];
        }
      } else {
        (this || _global$1$1).words[0] = 0;
        (this || _global$1$1).length = 1;
      }
      var carry = 0;
      for (i8 = (this || _global$1$1).length - 1; i8 >= 0 && (carry !== 0 || i8 >= h8); i8--) {
        var word = (this || _global$1$1).words[i8] | 0;
        (this || _global$1$1).words[i8] = carry << 26 - r9 | word >>> r9;
        carry = word & mask;
      }
      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }
      if ((this || _global$1$1).length === 0) {
        (this || _global$1$1).words[0] = 0;
        (this || _global$1$1).length = 1;
      }
      return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
      assert2((this || _global$1$1).negative === 0);
      return this.iushrn(bits, hint, extended);
    };
    BN.prototype.shln = function shln(bits) {
      return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
      return this.clone().iushln(bits);
    };
    BN.prototype.shrn = function shrn(bits) {
      return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
      return this.clone().iushrn(bits);
    };
    BN.prototype.testn = function testn(bit) {
      assert2(typeof bit === "number" && bit >= 0);
      var r9 = bit % 26;
      var s7 = (bit - r9) / 26;
      var q3 = 1 << r9;
      if ((this || _global$1$1).length <= s7)
        return false;
      var w4 = (this || _global$1$1).words[s7];
      return !!(w4 & q3);
    };
    BN.prototype.imaskn = function imaskn(bits) {
      assert2(typeof bits === "number" && bits >= 0);
      var r9 = bits % 26;
      var s7 = (bits - r9) / 26;
      assert2((this || _global$1$1).negative === 0, "imaskn works only with positive numbers");
      if ((this || _global$1$1).length <= s7) {
        return this || _global$1$1;
      }
      if (r9 !== 0) {
        s7++;
      }
      (this || _global$1$1).length = Math.min(s7, (this || _global$1$1).length);
      if (r9 !== 0) {
        var mask = 67108863 ^ 67108863 >>> r9 << r9;
        (this || _global$1$1).words[(this || _global$1$1).length - 1] &= mask;
      }
      return this.strip();
    };
    BN.prototype.maskn = function maskn(bits) {
      return this.clone().imaskn(bits);
    };
    BN.prototype.iaddn = function iaddn(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      if (num < 0)
        return this.isubn(-num);
      if ((this || _global$1$1).negative !== 0) {
        if ((this || _global$1$1).length === 1 && ((this || _global$1$1).words[0] | 0) < num) {
          (this || _global$1$1).words[0] = num - ((this || _global$1$1).words[0] | 0);
          (this || _global$1$1).negative = 0;
          return this || _global$1$1;
        }
        (this || _global$1$1).negative = 0;
        this.isubn(num);
        (this || _global$1$1).negative = 1;
        return this || _global$1$1;
      }
      return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
      (this || _global$1$1).words[0] += num;
      for (var i8 = 0; i8 < (this || _global$1$1).length && (this || _global$1$1).words[i8] >= 67108864; i8++) {
        (this || _global$1$1).words[i8] -= 67108864;
        if (i8 === (this || _global$1$1).length - 1) {
          (this || _global$1$1).words[i8 + 1] = 1;
        } else {
          (this || _global$1$1).words[i8 + 1]++;
        }
      }
      (this || _global$1$1).length = Math.max((this || _global$1$1).length, i8 + 1);
      return this || _global$1$1;
    };
    BN.prototype.isubn = function isubn(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      if (num < 0)
        return this.iaddn(-num);
      if ((this || _global$1$1).negative !== 0) {
        (this || _global$1$1).negative = 0;
        this.iaddn(num);
        (this || _global$1$1).negative = 1;
        return this || _global$1$1;
      }
      (this || _global$1$1).words[0] -= num;
      if ((this || _global$1$1).length === 1 && (this || _global$1$1).words[0] < 0) {
        (this || _global$1$1).words[0] = -(this || _global$1$1).words[0];
        (this || _global$1$1).negative = 1;
      } else {
        for (var i8 = 0; i8 < (this || _global$1$1).length && (this || _global$1$1).words[i8] < 0; i8++) {
          (this || _global$1$1).words[i8] += 67108864;
          (this || _global$1$1).words[i8 + 1] -= 1;
        }
      }
      return this.strip();
    };
    BN.prototype.addn = function addn(num) {
      return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
      return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
      (this || _global$1$1).negative = 0;
      return this || _global$1$1;
    };
    BN.prototype.abs = function abs() {
      return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
      var len = num.length + shift;
      var i8;
      this._expand(len);
      var w4;
      var carry = 0;
      for (i8 = 0; i8 < num.length; i8++) {
        w4 = ((this || _global$1$1).words[i8 + shift] | 0) + carry;
        var right = (num.words[i8] | 0) * mul;
        w4 -= right & 67108863;
        carry = (w4 >> 26) - (right / 67108864 | 0);
        (this || _global$1$1).words[i8 + shift] = w4 & 67108863;
      }
      for (; i8 < (this || _global$1$1).length - shift; i8++) {
        w4 = ((this || _global$1$1).words[i8 + shift] | 0) + carry;
        carry = w4 >> 26;
        (this || _global$1$1).words[i8 + shift] = w4 & 67108863;
      }
      if (carry === 0)
        return this.strip();
      assert2(carry === -1);
      carry = 0;
      for (i8 = 0; i8 < (this || _global$1$1).length; i8++) {
        w4 = -((this || _global$1$1).words[i8] | 0) + carry;
        carry = w4 >> 26;
        (this || _global$1$1).words[i8] = w4 & 67108863;
      }
      (this || _global$1$1).negative = 1;
      return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
      var shift = (this || _global$1$1).length - num.length;
      var a8 = this.clone();
      var b5 = num;
      var bhi = b5.words[b5.length - 1] | 0;
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b5 = b5.ushln(shift);
        a8.iushln(shift);
        bhi = b5.words[b5.length - 1] | 0;
      }
      var m6 = a8.length - b5.length;
      var q3;
      if (mode !== "mod") {
        q3 = new BN(null);
        q3.length = m6 + 1;
        q3.words = new Array(q3.length);
        for (var i8 = 0; i8 < q3.length; i8++) {
          q3.words[i8] = 0;
        }
      }
      var diff = a8.clone()._ishlnsubmul(b5, 1, m6);
      if (diff.negative === 0) {
        a8 = diff;
        if (q3) {
          q3.words[m6] = 1;
        }
      }
      for (var j4 = m6 - 1; j4 >= 0; j4--) {
        var qj = (a8.words[b5.length + j4] | 0) * 67108864 + (a8.words[b5.length + j4 - 1] | 0);
        qj = Math.min(qj / bhi | 0, 67108863);
        a8._ishlnsubmul(b5, qj, j4);
        while (a8.negative !== 0) {
          qj--;
          a8.negative = 0;
          a8._ishlnsubmul(b5, 1, j4);
          if (!a8.isZero()) {
            a8.negative ^= 1;
          }
        }
        if (q3) {
          q3.words[j4] = qj;
        }
      }
      if (q3) {
        q3.strip();
      }
      a8.strip();
      if (mode !== "div" && shift !== 0) {
        a8.iushrn(shift);
      }
      return {
        div: q3 || null,
        mod: a8
      };
    };
    BN.prototype.divmod = function divmod(num, mode, positive) {
      assert2(!num.isZero());
      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }
      var div, mod, res;
      if ((this || _global$1$1).negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);
        if (mode !== "mod") {
          div = res.div.neg();
        }
        if (mode !== "div") {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }
        return {
          div,
          mod
        };
      }
      if ((this || _global$1$1).negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);
        if (mode !== "mod") {
          div = res.div.neg();
        }
        return {
          div,
          mod: res.mod
        };
      }
      if (((this || _global$1$1).negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);
        if (mode !== "div") {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }
        return {
          div: res.div,
          mod
        };
      }
      if (num.length > (this || _global$1$1).length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this || _global$1$1
        };
      }
      if (num.length === 1) {
        if (mode === "div") {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }
        if (mode === "mod") {
          return {
            div: null,
            mod: new BN(this.modn(num.words[0]))
          };
        }
        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modn(num.words[0]))
        };
      }
      return this._wordDiv(num, mode);
    };
    BN.prototype.div = function div(num) {
      return this.divmod(num, "div", false).div;
    };
    BN.prototype.mod = function mod(num) {
      return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
      return this.divmod(num, "mod", true).mod;
    };
    BN.prototype.divRound = function divRound(num) {
      var dm = this.divmod(num);
      if (dm.mod.isZero())
        return dm.div;
      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
      var half = num.ushrn(1);
      var r22 = num.andln(1);
      var cmp = mod.cmp(half);
      if (cmp < 0 || r22 === 1 && cmp === 0)
        return dm.div;
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
      assert2(num <= 67108863);
      var p8 = (1 << 26) % num;
      var acc = 0;
      for (var i8 = (this || _global$1$1).length - 1; i8 >= 0; i8--) {
        acc = (p8 * acc + ((this || _global$1$1).words[i8] | 0)) % num;
      }
      return acc;
    };
    BN.prototype.idivn = function idivn(num) {
      assert2(num <= 67108863);
      var carry = 0;
      for (var i8 = (this || _global$1$1).length - 1; i8 >= 0; i8--) {
        var w4 = ((this || _global$1$1).words[i8] | 0) + carry * 67108864;
        (this || _global$1$1).words[i8] = w4 / num | 0;
        carry = w4 % num;
      }
      return this.strip();
    };
    BN.prototype.divn = function divn(num) {
      return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p8) {
      assert2(p8.negative === 0);
      assert2(!p8.isZero());
      var x4 = this || _global$1$1;
      var y6 = p8.clone();
      if (x4.negative !== 0) {
        x4 = x4.umod(p8);
      } else {
        x4 = x4.clone();
      }
      var A4 = new BN(1);
      var B4 = new BN(0);
      var C4 = new BN(0);
      var D4 = new BN(1);
      var g5 = 0;
      while (x4.isEven() && y6.isEven()) {
        x4.iushrn(1);
        y6.iushrn(1);
        ++g5;
      }
      var yp = y6.clone();
      var xp = x4.clone();
      while (!x4.isZero()) {
        for (var i8 = 0, im = 1; (x4.words[0] & im) === 0 && i8 < 26; ++i8, im <<= 1)
          ;
        if (i8 > 0) {
          x4.iushrn(i8);
          while (i8-- > 0) {
            if (A4.isOdd() || B4.isOdd()) {
              A4.iadd(yp);
              B4.isub(xp);
            }
            A4.iushrn(1);
            B4.iushrn(1);
          }
        }
        for (var j4 = 0, jm = 1; (y6.words[0] & jm) === 0 && j4 < 26; ++j4, jm <<= 1)
          ;
        if (j4 > 0) {
          y6.iushrn(j4);
          while (j4-- > 0) {
            if (C4.isOdd() || D4.isOdd()) {
              C4.iadd(yp);
              D4.isub(xp);
            }
            C4.iushrn(1);
            D4.iushrn(1);
          }
        }
        if (x4.cmp(y6) >= 0) {
          x4.isub(y6);
          A4.isub(C4);
          B4.isub(D4);
        } else {
          y6.isub(x4);
          C4.isub(A4);
          D4.isub(B4);
        }
      }
      return {
        a: C4,
        b: D4,
        gcd: y6.iushln(g5)
      };
    };
    BN.prototype._invmp = function _invmp(p8) {
      assert2(p8.negative === 0);
      assert2(!p8.isZero());
      var a8 = this || _global$1$1;
      var b5 = p8.clone();
      if (a8.negative !== 0) {
        a8 = a8.umod(p8);
      } else {
        a8 = a8.clone();
      }
      var x1 = new BN(1);
      var x22 = new BN(0);
      var delta = b5.clone();
      while (a8.cmpn(1) > 0 && b5.cmpn(1) > 0) {
        for (var i8 = 0, im = 1; (a8.words[0] & im) === 0 && i8 < 26; ++i8, im <<= 1)
          ;
        if (i8 > 0) {
          a8.iushrn(i8);
          while (i8-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }
            x1.iushrn(1);
          }
        }
        for (var j4 = 0, jm = 1; (b5.words[0] & jm) === 0 && j4 < 26; ++j4, jm <<= 1)
          ;
        if (j4 > 0) {
          b5.iushrn(j4);
          while (j4-- > 0) {
            if (x22.isOdd()) {
              x22.iadd(delta);
            }
            x22.iushrn(1);
          }
        }
        if (a8.cmp(b5) >= 0) {
          a8.isub(b5);
          x1.isub(x22);
        } else {
          b5.isub(a8);
          x22.isub(x1);
        }
      }
      var res;
      if (a8.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x22;
      }
      if (res.cmpn(0) < 0) {
        res.iadd(p8);
      }
      return res;
    };
    BN.prototype.gcd = function gcd(num) {
      if (this.isZero())
        return num.abs();
      if (num.isZero())
        return this.abs();
      var a8 = this.clone();
      var b5 = num.clone();
      a8.negative = 0;
      b5.negative = 0;
      for (var shift = 0; a8.isEven() && b5.isEven(); shift++) {
        a8.iushrn(1);
        b5.iushrn(1);
      }
      do {
        while (a8.isEven()) {
          a8.iushrn(1);
        }
        while (b5.isEven()) {
          b5.iushrn(1);
        }
        var r9 = a8.cmp(b5);
        if (r9 < 0) {
          var t8 = a8;
          a8 = b5;
          b5 = t8;
        } else if (r9 === 0 || b5.cmpn(1) === 0) {
          break;
        }
        a8.isub(b5);
      } while (true);
      return b5.iushln(shift);
    };
    BN.prototype.invm = function invm(num) {
      return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
      return ((this || _global$1$1).words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
      return ((this || _global$1$1).words[0] & 1) === 1;
    };
    BN.prototype.andln = function andln(num) {
      return (this || _global$1$1).words[0] & num;
    };
    BN.prototype.bincn = function bincn(bit) {
      assert2(typeof bit === "number");
      var r9 = bit % 26;
      var s7 = (bit - r9) / 26;
      var q3 = 1 << r9;
      if ((this || _global$1$1).length <= s7) {
        this._expand(s7 + 1);
        (this || _global$1$1).words[s7] |= q3;
        return this || _global$1$1;
      }
      var carry = q3;
      for (var i8 = s7; carry !== 0 && i8 < (this || _global$1$1).length; i8++) {
        var w4 = (this || _global$1$1).words[i8] | 0;
        w4 += carry;
        carry = w4 >>> 26;
        w4 &= 67108863;
        (this || _global$1$1).words[i8] = w4;
      }
      if (carry !== 0) {
        (this || _global$1$1).words[i8] = carry;
        (this || _global$1$1).length++;
      }
      return this || _global$1$1;
    };
    BN.prototype.isZero = function isZero() {
      return (this || _global$1$1).length === 1 && (this || _global$1$1).words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
      var negative = num < 0;
      if ((this || _global$1$1).negative !== 0 && !negative)
        return -1;
      if ((this || _global$1$1).negative === 0 && negative)
        return 1;
      this.strip();
      var res;
      if ((this || _global$1$1).length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }
        assert2(num <= 67108863, "Number is too big");
        var w4 = (this || _global$1$1).words[0] | 0;
        res = w4 === num ? 0 : w4 < num ? -1 : 1;
      }
      if ((this || _global$1$1).negative !== 0)
        return -res | 0;
      return res;
    };
    BN.prototype.cmp = function cmp(num) {
      if ((this || _global$1$1).negative !== 0 && num.negative === 0)
        return -1;
      if ((this || _global$1$1).negative === 0 && num.negative !== 0)
        return 1;
      var res = this.ucmp(num);
      if ((this || _global$1$1).negative !== 0)
        return -res | 0;
      return res;
    };
    BN.prototype.ucmp = function ucmp(num) {
      if ((this || _global$1$1).length > num.length)
        return 1;
      if ((this || _global$1$1).length < num.length)
        return -1;
      var res = 0;
      for (var i8 = (this || _global$1$1).length - 1; i8 >= 0; i8--) {
        var a8 = (this || _global$1$1).words[i8] | 0;
        var b5 = num.words[i8] | 0;
        if (a8 === b5)
          continue;
        if (a8 < b5) {
          res = -1;
        } else if (a8 > b5) {
          res = 1;
        }
        break;
      }
      return res;
    };
    BN.prototype.gtn = function gtn(num) {
      return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
      return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
      return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
      return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
      return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
      return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
      return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
      return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
      return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
      return this.cmp(num) === 0;
    };
    BN.red = function red(num) {
      return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
      assert2(!(this || _global$1$1).red, "Already a number in reduction context");
      assert2((this || _global$1$1).negative === 0, "red works only with positives");
      return ctx.convertTo(this || _global$1$1)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
      assert2((this || _global$1$1).red, "fromRed works only with numbers in reduction context");
      return (this || _global$1$1).red.convertFrom(this || _global$1$1);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
      (this || _global$1$1).red = ctx;
      return this || _global$1$1;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
      assert2(!(this || _global$1$1).red, "Already a number in reduction context");
      return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
      assert2((this || _global$1$1).red, "redAdd works only with red numbers");
      return (this || _global$1$1).red.add(this || _global$1$1, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
      assert2((this || _global$1$1).red, "redIAdd works only with red numbers");
      return (this || _global$1$1).red.iadd(this || _global$1$1, num);
    };
    BN.prototype.redSub = function redSub(num) {
      assert2((this || _global$1$1).red, "redSub works only with red numbers");
      return (this || _global$1$1).red.sub(this || _global$1$1, num);
    };
    BN.prototype.redISub = function redISub(num) {
      assert2((this || _global$1$1).red, "redISub works only with red numbers");
      return (this || _global$1$1).red.isub(this || _global$1$1, num);
    };
    BN.prototype.redShl = function redShl(num) {
      assert2((this || _global$1$1).red, "redShl works only with red numbers");
      return (this || _global$1$1).red.shl(this || _global$1$1, num);
    };
    BN.prototype.redMul = function redMul(num) {
      assert2((this || _global$1$1).red, "redMul works only with red numbers");
      (this || _global$1$1).red._verify2(this || _global$1$1, num);
      return (this || _global$1$1).red.mul(this || _global$1$1, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
      assert2((this || _global$1$1).red, "redMul works only with red numbers");
      (this || _global$1$1).red._verify2(this || _global$1$1, num);
      return (this || _global$1$1).red.imul(this || _global$1$1, num);
    };
    BN.prototype.redSqr = function redSqr() {
      assert2((this || _global$1$1).red, "redSqr works only with red numbers");
      (this || _global$1$1).red._verify1(this || _global$1$1);
      return (this || _global$1$1).red.sqr(this || _global$1$1);
    };
    BN.prototype.redISqr = function redISqr() {
      assert2((this || _global$1$1).red, "redISqr works only with red numbers");
      (this || _global$1$1).red._verify1(this || _global$1$1);
      return (this || _global$1$1).red.isqr(this || _global$1$1);
    };
    BN.prototype.redSqrt = function redSqrt() {
      assert2((this || _global$1$1).red, "redSqrt works only with red numbers");
      (this || _global$1$1).red._verify1(this || _global$1$1);
      return (this || _global$1$1).red.sqrt(this || _global$1$1);
    };
    BN.prototype.redInvm = function redInvm() {
      assert2((this || _global$1$1).red, "redInvm works only with red numbers");
      (this || _global$1$1).red._verify1(this || _global$1$1);
      return (this || _global$1$1).red.invm(this || _global$1$1);
    };
    BN.prototype.redNeg = function redNeg() {
      assert2((this || _global$1$1).red, "redNeg works only with red numbers");
      (this || _global$1$1).red._verify1(this || _global$1$1);
      return (this || _global$1$1).red.neg(this || _global$1$1);
    };
    BN.prototype.redPow = function redPow(num) {
      assert2((this || _global$1$1).red && !num.red, "redPow(normalNum)");
      (this || _global$1$1).red._verify1(this || _global$1$1);
      return (this || _global$1$1).red.pow(this || _global$1$1, num);
    };
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };
    function MPrime(name2, p8) {
      (this || _global$1$1).name = name2;
      (this || _global$1$1).p = new BN(p8, 16);
      (this || _global$1$1).n = (this || _global$1$1).p.bitLength();
      (this || _global$1$1).k = new BN(1).iushln((this || _global$1$1).n).isub((this || _global$1$1).p);
      (this || _global$1$1).tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil((this || _global$1$1).n / 13));
      return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
      var r9 = num;
      var rlen;
      do {
        this.split(r9, (this || _global$1$1).tmp);
        r9 = this.imulK(r9);
        r9 = r9.iadd((this || _global$1$1).tmp);
        rlen = r9.bitLength();
      } while (rlen > (this || _global$1$1).n);
      var cmp = rlen < (this || _global$1$1).n ? -1 : r9.ucmp((this || _global$1$1).p);
      if (cmp === 0) {
        r9.words[0] = 0;
        r9.length = 1;
      } else if (cmp > 0) {
        r9.isub((this || _global$1$1).p);
      } else {
        if (r9.strip !== void 0) {
          r9.strip();
        } else {
          r9._strip();
        }
      }
      return r9;
    };
    MPrime.prototype.split = function split(input, out) {
      input.iushrn((this || _global$1$1).n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
      return num.imul((this || _global$1$1).k);
    };
    function K256() {
      MPrime.call(this || _global$1$1, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits4(K256, MPrime);
    K256.prototype.split = function split(input, output) {
      var mask = 4194303;
      var outLen = Math.min(input.length, 9);
      for (var i8 = 0; i8 < outLen; i8++) {
        output.words[i8] = input.words[i8];
      }
      output.length = outLen;
      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }
      var prev = input.words[9];
      output.words[output.length++] = prev & mask;
      for (i8 = 10; i8 < input.length; i8++) {
        var next = input.words[i8] | 0;
        input.words[i8 - 10] = (next & mask) << 4 | prev >>> 22;
        prev = next;
      }
      prev >>>= 22;
      input.words[i8 - 10] = prev;
      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };
    K256.prototype.imulK = function imulK(num) {
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;
      var lo = 0;
      for (var i8 = 0; i8 < num.length; i8++) {
        var w4 = num.words[i8] | 0;
        lo += w4 * 977;
        num.words[i8] = lo & 67108863;
        lo = w4 * 64 + (lo / 67108864 | 0);
      }
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }
      return num;
    };
    function P224() {
      MPrime.call(this || _global$1$1, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits4(P224, MPrime);
    function P192() {
      MPrime.call(this || _global$1$1, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits4(P192, MPrime);
    function P25519() {
      MPrime.call(this || _global$1$1, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits4(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
      var carry = 0;
      for (var i8 = 0; i8 < num.length; i8++) {
        var hi = (num.words[i8] | 0) * 19 + carry;
        var lo = hi & 67108863;
        hi >>>= 26;
        num.words[i8] = lo;
        carry = hi;
      }
      if (carry !== 0) {
        num.words[num.length++] = carry;
      }
      return num;
    };
    BN._prime = function prime(name2) {
      if (primes[name2])
        return primes[name2];
      var prime2;
      if (name2 === "k256") {
        prime2 = new K256();
      } else if (name2 === "p224") {
        prime2 = new P224();
      } else if (name2 === "p192") {
        prime2 = new P192();
      } else if (name2 === "p25519") {
        prime2 = new P25519();
      } else {
        throw new Error("Unknown prime " + name2);
      }
      primes[name2] = prime2;
      return prime2;
    };
    function Red(m6) {
      if (typeof m6 === "string") {
        var prime = BN._prime(m6);
        (this || _global$1$1).m = prime.p;
        (this || _global$1$1).prime = prime;
      } else {
        assert2(m6.gtn(1), "modulus must be greater than 1");
        (this || _global$1$1).m = m6;
        (this || _global$1$1).prime = null;
      }
    }
    Red.prototype._verify1 = function _verify1(a8) {
      assert2(a8.negative === 0, "red works only with positives");
      assert2(a8.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a8, b5) {
      assert2((a8.negative | b5.negative) === 0, "red works only with positives");
      assert2(a8.red && a8.red === b5.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a8) {
      if ((this || _global$1$1).prime)
        return (this || _global$1$1).prime.ireduce(a8)._forceRed(this || _global$1$1);
      return a8.umod((this || _global$1$1).m)._forceRed(this || _global$1$1);
    };
    Red.prototype.neg = function neg(a8) {
      if (a8.isZero()) {
        return a8.clone();
      }
      return (this || _global$1$1).m.sub(a8)._forceRed(this || _global$1$1);
    };
    Red.prototype.add = function add(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.add(b5);
      if (res.cmp((this || _global$1$1).m) >= 0) {
        res.isub((this || _global$1$1).m);
      }
      return res._forceRed(this || _global$1$1);
    };
    Red.prototype.iadd = function iadd(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.iadd(b5);
      if (res.cmp((this || _global$1$1).m) >= 0) {
        res.isub((this || _global$1$1).m);
      }
      return res;
    };
    Red.prototype.sub = function sub(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.sub(b5);
      if (res.cmpn(0) < 0) {
        res.iadd((this || _global$1$1).m);
      }
      return res._forceRed(this || _global$1$1);
    };
    Red.prototype.isub = function isub(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.isub(b5);
      if (res.cmpn(0) < 0) {
        res.iadd((this || _global$1$1).m);
      }
      return res;
    };
    Red.prototype.shl = function shl(a8, num) {
      this._verify1(a8);
      return this.imod(a8.ushln(num));
    };
    Red.prototype.imul = function imul(a8, b5) {
      this._verify2(a8, b5);
      return this.imod(a8.imul(b5));
    };
    Red.prototype.mul = function mul(a8, b5) {
      this._verify2(a8, b5);
      return this.imod(a8.mul(b5));
    };
    Red.prototype.isqr = function isqr(a8) {
      return this.imul(a8, a8.clone());
    };
    Red.prototype.sqr = function sqr(a8) {
      return this.mul(a8, a8);
    };
    Red.prototype.sqrt = function sqrt(a8) {
      if (a8.isZero())
        return a8.clone();
      var mod3 = (this || _global$1$1).m.andln(3);
      assert2(mod3 % 2 === 1);
      if (mod3 === 3) {
        var pow = (this || _global$1$1).m.add(new BN(1)).iushrn(2);
        return this.pow(a8, pow);
      }
      var q3 = (this || _global$1$1).m.subn(1);
      var s7 = 0;
      while (!q3.isZero() && q3.andln(1) === 0) {
        s7++;
        q3.iushrn(1);
      }
      assert2(!q3.isZero());
      var one = new BN(1).toRed(this || _global$1$1);
      var nOne = one.redNeg();
      var lpow = (this || _global$1$1).m.subn(1).iushrn(1);
      var z5 = (this || _global$1$1).m.bitLength();
      z5 = new BN(2 * z5 * z5).toRed(this || _global$1$1);
      while (this.pow(z5, lpow).cmp(nOne) !== 0) {
        z5.redIAdd(nOne);
      }
      var c8 = this.pow(z5, q3);
      var r9 = this.pow(a8, q3.addn(1).iushrn(1));
      var t8 = this.pow(a8, q3);
      var m6 = s7;
      while (t8.cmp(one) !== 0) {
        var tmp = t8;
        for (var i8 = 0; tmp.cmp(one) !== 0; i8++) {
          tmp = tmp.redSqr();
        }
        assert2(i8 < m6);
        var b5 = this.pow(c8, new BN(1).iushln(m6 - i8 - 1));
        r9 = r9.redMul(b5);
        c8 = b5.redSqr();
        t8 = t8.redMul(c8);
        m6 = i8;
      }
      return r9;
    };
    Red.prototype.invm = function invm(a8) {
      var inv = a8._invmp((this || _global$1$1).m);
      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };
    Red.prototype.pow = function pow(a8, num) {
      if (num.isZero())
        return new BN(1).toRed(this || _global$1$1);
      if (num.cmpn(1) === 0)
        return a8.clone();
      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN(1).toRed(this || _global$1$1);
      wnd[1] = a8;
      for (var i8 = 2; i8 < wnd.length; i8++) {
        wnd[i8] = this.mul(wnd[i8 - 1], a8);
      }
      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;
      if (start === 0) {
        start = 26;
      }
      for (i8 = num.length - 1; i8 >= 0; i8--) {
        var word = num.words[i8];
        for (var j4 = start - 1; j4 >= 0; j4--) {
          var bit = word >> j4 & 1;
          if (res !== wnd[0]) {
            res = this.sqr(res);
          }
          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }
          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i8 !== 0 || j4 !== 0))
            continue;
          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }
        start = 26;
      }
      return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
      var r9 = num.umod((this || _global$1$1).m);
      return r9 === num ? r9.clone() : r9;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
      var res = num.clone();
      res.red = null;
      return res;
    };
    BN.mont = function mont(num) {
      return new Mont(num);
    };
    function Mont(m6) {
      Red.call(this || _global$1$1, m6);
      (this || _global$1$1).shift = (this || _global$1$1).m.bitLength();
      if ((this || _global$1$1).shift % 26 !== 0) {
        (this || _global$1$1).shift += 26 - (this || _global$1$1).shift % 26;
      }
      (this || _global$1$1).r = new BN(1).iushln((this || _global$1$1).shift);
      (this || _global$1$1).r2 = this.imod((this || _global$1$1).r.sqr());
      (this || _global$1$1).rinv = (this || _global$1$1).r._invmp((this || _global$1$1).m);
      (this || _global$1$1).minv = (this || _global$1$1).rinv.mul((this || _global$1$1).r).isubn(1).div((this || _global$1$1).m);
      (this || _global$1$1).minv = (this || _global$1$1).minv.umod((this || _global$1$1).r);
      (this || _global$1$1).minv = (this || _global$1$1).r.sub((this || _global$1$1).minv);
    }
    inherits4(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
      return this.imod(num.ushln((this || _global$1$1).shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
      var r9 = this.imod(num.mul((this || _global$1$1).rinv));
      r9.red = null;
      return r9;
    };
    Mont.prototype.imul = function imul(a8, b5) {
      if (a8.isZero() || b5.isZero()) {
        a8.words[0] = 0;
        a8.length = 1;
        return a8;
      }
      var t8 = a8.imul(b5);
      var c8 = t8.maskn((this || _global$1$1).shift).mul((this || _global$1$1).minv).imaskn((this || _global$1$1).shift).mul((this || _global$1$1).m);
      var u8 = t8.isub(c8).iushrn((this || _global$1$1).shift);
      var res = u8;
      if (u8.cmp((this || _global$1$1).m) >= 0) {
        res = u8.isub((this || _global$1$1).m);
      } else if (u8.cmpn(0) < 0) {
        res = u8.iadd((this || _global$1$1).m);
      }
      return res._forceRed(this || _global$1$1);
    };
    Mont.prototype.mul = function mul(a8, b5) {
      if (a8.isZero() || b5.isZero())
        return new BN(0)._forceRed(this || _global$1$1);
      var t8 = a8.mul(b5);
      var c8 = t8.maskn((this || _global$1$1).shift).mul((this || _global$1$1).minv).imaskn((this || _global$1$1).shift).mul((this || _global$1$1).m);
      var u8 = t8.isub(c8).iushrn((this || _global$1$1).shift);
      var res = u8;
      if (u8.cmp((this || _global$1$1).m) >= 0) {
        res = u8.isub((this || _global$1$1).m);
      } else if (u8.cmpn(0) < 0) {
        res = u8.iadd((this || _global$1$1).m);
      }
      return res._forceRed(this || _global$1$1);
    };
    Mont.prototype.invm = function invm(a8) {
      var res = this.imod(a8._invmp((this || _global$1$1).m).mul((this || _global$1$1).r2));
      return res._forceRed(this || _global$1$1);
    };
  })(module$8, exports$6$1);
  return module$8.exports;
}
function dew$5$1() {
  if (_dewExec$5$1)
    return exports$5$1;
  _dewExec$5$1 = true;
  var BN = dew$6$1();
  var Buffer3 = dew$1T().Buffer;
  function withPublic(paddedMsg, key) {
    return Buffer3.from(paddedMsg.toRed(BN.mont(key.modulus)).redPow(new BN(key.publicExponent)).fromRed().toArray());
  }
  exports$5$1 = withPublic;
  return exports$5$1;
}
function dew$4$1() {
  if (_dewExec$4$1)
    return exports$4$1;
  _dewExec$4$1 = true;
  var parseKeys = dew$e$1();
  var randomBytes2 = dew$1S();
  var createHash2 = dew$1F();
  var mgf = dew$8$1();
  var xor = dew$7$1();
  var BN = dew$6$1();
  var withPublic = dew$5$1();
  var crt = dew$W$1();
  var Buffer3 = dew$1T().Buffer;
  exports$4$1 = function publicEncrypt2(publicKey, msg, reverse) {
    var padding;
    if (publicKey.padding) {
      padding = publicKey.padding;
    } else if (reverse) {
      padding = 1;
    } else {
      padding = 4;
    }
    var key = parseKeys(publicKey);
    var paddedMsg;
    if (padding === 4) {
      paddedMsg = oaep(key, msg);
    } else if (padding === 1) {
      paddedMsg = pkcs1(key, msg, reverse);
    } else if (padding === 3) {
      paddedMsg = new BN(msg);
      if (paddedMsg.cmp(key.modulus) >= 0) {
        throw new Error("data too long for modulus");
      }
    } else {
      throw new Error("unknown padding");
    }
    if (reverse) {
      return crt(paddedMsg, key);
    } else {
      return withPublic(paddedMsg, key);
    }
  };
  function oaep(key, msg) {
    var k4 = key.modulus.byteLength();
    var mLen = msg.length;
    var iHash = createHash2("sha1").update(Buffer3.alloc(0)).digest();
    var hLen = iHash.length;
    var hLen2 = 2 * hLen;
    if (mLen > k4 - hLen2 - 2) {
      throw new Error("message too long");
    }
    var ps = Buffer3.alloc(k4 - mLen - hLen2 - 2);
    var dblen = k4 - hLen - 1;
    var seed = randomBytes2(hLen);
    var maskedDb = xor(Buffer3.concat([iHash, ps, Buffer3.alloc(1, 1), msg], dblen), mgf(seed, dblen));
    var maskedSeed = xor(seed, mgf(maskedDb, hLen));
    return new BN(Buffer3.concat([Buffer3.alloc(1), maskedSeed, maskedDb], k4));
  }
  function pkcs1(key, msg, reverse) {
    var mLen = msg.length;
    var k4 = key.modulus.byteLength();
    if (mLen > k4 - 11) {
      throw new Error("message too long");
    }
    var ps;
    if (reverse) {
      ps = Buffer3.alloc(k4 - mLen - 3, 255);
    } else {
      ps = nonZero(k4 - mLen - 3);
    }
    return new BN(Buffer3.concat([Buffer3.from([0, reverse ? 1 : 2]), ps, Buffer3.alloc(1), msg], k4));
  }
  function nonZero(len) {
    var out = Buffer3.allocUnsafe(len);
    var i8 = 0;
    var cache = randomBytes2(len * 2);
    var cur = 0;
    var num;
    while (i8 < len) {
      if (cur === cache.length) {
        cache = randomBytes2(len * 2);
        cur = 0;
      }
      num = cache[cur++];
      if (num) {
        out[i8++] = num;
      }
    }
    return out;
  }
  return exports$4$1;
}
function dew$3$1() {
  if (_dewExec$3$1)
    return exports$3$1;
  _dewExec$3$1 = true;
  var parseKeys = dew$e$1();
  var mgf = dew$8$1();
  var xor = dew$7$1();
  var BN = dew$6$1();
  var crt = dew$W$1();
  var createHash2 = dew$1F();
  var withPublic = dew$5$1();
  var Buffer3 = dew$1T().Buffer;
  exports$3$1 = function privateDecrypt2(privateKey, enc, reverse) {
    var padding;
    if (privateKey.padding) {
      padding = privateKey.padding;
    } else if (reverse) {
      padding = 1;
    } else {
      padding = 4;
    }
    var key = parseKeys(privateKey);
    var k4 = key.modulus.byteLength();
    if (enc.length > k4 || new BN(enc).cmp(key.modulus) >= 0) {
      throw new Error("decryption error");
    }
    var msg;
    if (reverse) {
      msg = withPublic(new BN(enc), key);
    } else {
      msg = crt(enc, key);
    }
    var zBuffer = Buffer3.alloc(k4 - msg.length);
    msg = Buffer3.concat([zBuffer, msg], k4);
    if (padding === 4) {
      return oaep(key, msg);
    } else if (padding === 1) {
      return pkcs1(key, msg, reverse);
    } else if (padding === 3) {
      return msg;
    } else {
      throw new Error("unknown padding");
    }
  };
  function oaep(key, msg) {
    var k4 = key.modulus.byteLength();
    var iHash = createHash2("sha1").update(Buffer3.alloc(0)).digest();
    var hLen = iHash.length;
    if (msg[0] !== 0) {
      throw new Error("decryption error");
    }
    var maskedSeed = msg.slice(1, hLen + 1);
    var maskedDb = msg.slice(hLen + 1);
    var seed = xor(maskedSeed, mgf(maskedDb, hLen));
    var db = xor(maskedDb, mgf(seed, k4 - hLen - 1));
    if (compare(iHash, db.slice(0, hLen))) {
      throw new Error("decryption error");
    }
    var i8 = hLen;
    while (db[i8] === 0) {
      i8++;
    }
    if (db[i8++] !== 1) {
      throw new Error("decryption error");
    }
    return db.slice(i8);
  }
  function pkcs1(key, msg, reverse) {
    var p1 = msg.slice(0, 2);
    var i8 = 2;
    var status = 0;
    while (msg[i8++] !== 0) {
      if (i8 >= msg.length) {
        status++;
        break;
      }
    }
    var ps = msg.slice(2, i8 - 1);
    if (p1.toString("hex") !== "0002" && !reverse || p1.toString("hex") !== "0001" && reverse) {
      status++;
    }
    if (ps.length < 8) {
      status++;
    }
    if (status) {
      throw new Error("decryption error");
    }
    return msg.slice(i8);
  }
  function compare(a8, b5) {
    a8 = Buffer3.from(a8);
    b5 = Buffer3.from(b5);
    var dif = 0;
    var len = a8.length;
    if (a8.length !== b5.length) {
      dif++;
      len = Math.min(a8.length, b5.length);
    }
    var i8 = -1;
    while (++i8 < len) {
      dif += a8[i8] ^ b5[i8];
    }
    return dif;
  }
  return exports$3$1;
}
function dew$2$12() {
  if (_dewExec$2$12)
    return exports$2$12;
  _dewExec$2$12 = true;
  exports$2$12.publicEncrypt = dew$4$1();
  exports$2$12.privateDecrypt = dew$3$1();
  exports$2$12.privateEncrypt = function privateEncrypt2(key, buf) {
    return exports$2$12.publicEncrypt(key, buf, true);
  };
  exports$2$12.publicDecrypt = function publicDecrypt2(key, buf) {
    return exports$2$12.privateDecrypt(key, buf, true);
  };
  return exports$2$12;
}
function dew$1$12() {
  if (_dewExec$1$12)
    return exports$1$12;
  _dewExec$1$12 = true;
  var process3 = T;
  function oldBrowser() {
    throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11");
  }
  var safeBuffer = dew$1T();
  var randombytes = dew$1S();
  var Buffer3 = safeBuffer.Buffer;
  var kBufferMaxLength = safeBuffer.kMaxLength;
  var crypto2 = _global$x.crypto || _global$x.msCrypto;
  var kMaxUint32 = Math.pow(2, 32) - 1;
  function assertOffset(offset, length) {
    if (typeof offset !== "number" || offset !== offset) {
      throw new TypeError("offset must be a number");
    }
    if (offset > kMaxUint32 || offset < 0) {
      throw new TypeError("offset must be a uint32");
    }
    if (offset > kBufferMaxLength || offset > length) {
      throw new RangeError("offset out of range");
    }
  }
  function assertSize(size, offset, length) {
    if (typeof size !== "number" || size !== size) {
      throw new TypeError("size must be a number");
    }
    if (size > kMaxUint32 || size < 0) {
      throw new TypeError("size must be a uint32");
    }
    if (size + offset > length || size > kBufferMaxLength) {
      throw new RangeError("buffer too small");
    }
  }
  if (crypto2 && crypto2.getRandomValues || !process3.browser) {
    exports$1$12.randomFill = randomFill2;
    exports$1$12.randomFillSync = randomFillSync2;
  } else {
    exports$1$12.randomFill = oldBrowser;
    exports$1$12.randomFillSync = oldBrowser;
  }
  function randomFill2(buf, offset, size, cb) {
    if (!Buffer3.isBuffer(buf) && !(buf instanceof _global$x.Uint8Array)) {
      throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
    }
    if (typeof offset === "function") {
      cb = offset;
      offset = 0;
      size = buf.length;
    } else if (typeof size === "function") {
      cb = size;
      size = buf.length - offset;
    } else if (typeof cb !== "function") {
      throw new TypeError('"cb" argument must be a function');
    }
    assertOffset(offset, buf.length);
    assertSize(size, offset, buf.length);
    return actualFill(buf, offset, size, cb);
  }
  function actualFill(buf, offset, size, cb) {
    if (process3.browser) {
      var ourBuf = buf.buffer;
      var uint = new Uint8Array(ourBuf, offset, size);
      crypto2.getRandomValues(uint);
      if (cb) {
        process3.nextTick(function() {
          cb(null, buf);
        });
        return;
      }
      return buf;
    }
    if (cb) {
      randombytes(size, function(err, bytes2) {
        if (err) {
          return cb(err);
        }
        bytes2.copy(buf, offset);
        cb(null, buf);
      });
      return;
    }
    var bytes = randombytes(size);
    bytes.copy(buf, offset);
    return buf;
  }
  function randomFillSync2(buf, offset, size) {
    if (typeof offset === "undefined") {
      offset = 0;
    }
    if (!Buffer3.isBuffer(buf) && !(buf instanceof _global$x.Uint8Array)) {
      throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
    }
    assertOffset(offset, buf.length);
    if (size === void 0)
      size = buf.length - offset;
    assertSize(size, offset, buf.length);
    return actualFill(buf, offset, size);
  }
  return exports$1$12;
}
function dew$1U() {
  if (_dewExec$1U)
    return exports$1V;
  _dewExec$1U = true;
  exports$1V.randomBytes = exports$1V.rng = exports$1V.pseudoRandomBytes = exports$1V.prng = dew$1S();
  exports$1V.createHash = exports$1V.Hash = dew$1F();
  exports$1V.createHmac = exports$1V.Hmac = dew$1C();
  var algos = dew$1B();
  var algoKeys = Object.keys(algos);
  var hashes = ["sha1", "sha224", "sha256", "sha384", "sha512", "md5", "rmd160"].concat(algoKeys);
  exports$1V.getHashes = function() {
    return hashes;
  };
  var p8 = dew$1v();
  exports$1V.pbkdf2 = p8.pbkdf2;
  exports$1V.pbkdf2Sync = p8.pbkdf2Sync;
  var aes = dew$13();
  exports$1V.Cipher = aes.Cipher;
  exports$1V.createCipher = aes.createCipher;
  exports$1V.Cipheriv = aes.Cipheriv;
  exports$1V.createCipheriv = aes.createCipheriv;
  exports$1V.Decipher = aes.Decipher;
  exports$1V.createDecipher = aes.createDecipher;
  exports$1V.Decipheriv = aes.Decipheriv;
  exports$1V.createDecipheriv = aes.createDecipheriv;
  exports$1V.getCiphers = aes.getCiphers;
  exports$1V.listCiphers = aes.listCiphers;
  var dh = dew$Y$1();
  exports$1V.DiffieHellmanGroup = dh.DiffieHellmanGroup;
  exports$1V.createDiffieHellmanGroup = dh.createDiffieHellmanGroup;
  exports$1V.getDiffieHellman = dh.getDiffieHellman;
  exports$1V.createDiffieHellman = dh.createDiffieHellman;
  exports$1V.DiffieHellman = dh.DiffieHellman;
  var sign = dew$b$1();
  exports$1V.createSign = sign.createSign;
  exports$1V.Sign = sign.Sign;
  exports$1V.createVerify = sign.createVerify;
  exports$1V.Verify = sign.Verify;
  exports$1V.createECDH = dew$9$1();
  var publicEncrypt2 = dew$2$12();
  exports$1V.publicEncrypt = publicEncrypt2.publicEncrypt;
  exports$1V.privateEncrypt = publicEncrypt2.privateEncrypt;
  exports$1V.publicDecrypt = publicEncrypt2.publicDecrypt;
  exports$1V.privateDecrypt = publicEncrypt2.privateDecrypt;
  var rf = dew$1$12();
  exports$1V.randomFill = rf.randomFill;
  exports$1V.randomFillSync = rf.randomFillSync;
  exports$1V.createCredentials = function() {
    throw new Error(["sorry, createCredentials is not implemented yet", "we accept pull requests", "https://github.com/crypto-browserify/crypto-browserify"].join("\n"));
  };
  exports$1V.constants = {
    "DH_CHECK_P_NOT_SAFE_PRIME": 2,
    "DH_CHECK_P_NOT_PRIME": 1,
    "DH_UNABLE_TO_CHECK_GENERATOR": 4,
    "DH_NOT_SUITABLE_GENERATOR": 8,
    "NPN_ENABLED": 1,
    "ALPN_ENABLED": 1,
    "RSA_PKCS1_PADDING": 1,
    "RSA_SSLV23_PADDING": 2,
    "RSA_NO_PADDING": 3,
    "RSA_PKCS1_OAEP_PADDING": 4,
    "RSA_X931_PADDING": 5,
    "RSA_PKCS1_PSS_PADDING": 6,
    "POINT_CONVERSION_COMPRESSED": 2,
    "POINT_CONVERSION_UNCOMPRESSED": 4,
    "POINT_CONVERSION_HYBRID": 6
  };
  return exports$1V;
}
function dew$11() {
  if (_dewExec$11)
    return exports$122;
  _dewExec$11 = true;
  var r9;
  exports$122 = function rand(len) {
    if (!r9)
      r9 = new Rand(null);
    return r9.generate(len);
  };
  function Rand(rand) {
    (this || _global$a).rand = rand;
  }
  exports$122.Rand = Rand;
  Rand.prototype.generate = function generate(len) {
    return this._rand(len);
  };
  Rand.prototype._rand = function _rand(n9) {
    if ((this || _global$a).rand.getBytes)
      return (this || _global$a).rand.getBytes(n9);
    var res = new Uint8Array(n9);
    for (var i8 = 0; i8 < res.length; i8++)
      res[i8] = (this || _global$a).rand.getByte();
    return res;
  };
  if (typeof self === "object") {
    if (self.crypto && self.crypto.getRandomValues) {
      Rand.prototype._rand = function _rand(n9) {
        var arr = new Uint8Array(n9);
        self.crypto.getRandomValues(arr);
        return arr;
      };
    } else if (self.msCrypto && self.msCrypto.getRandomValues) {
      Rand.prototype._rand = function _rand(n9) {
        var arr = new Uint8Array(n9);
        self.msCrypto.getRandomValues(arr);
        return arr;
      };
    } else if (typeof window === "object") {
      Rand.prototype._rand = function() {
        throw new Error("Not implemented yet");
      };
    }
  } else {
    try {
      var crypto$1 = crypto;
      if (typeof crypto$1.randomBytes !== "function")
        throw new Error("Not supported");
      Rand.prototype._rand = function _rand(n9) {
        return crypto$1.randomBytes(n9);
      };
    } catch (e11) {
    }
  }
  return exports$122;
}
function dew$10() {
  if (_dewExec$10)
    return exports$11;
  _dewExec$10 = true;
  var bn = dew$1W();
  var brorand = dew$11();
  function MillerRabin(rand) {
    (this || _global$9).rand = rand || new brorand.Rand();
  }
  exports$11 = MillerRabin;
  MillerRabin.create = function create(rand) {
    return new MillerRabin(rand);
  };
  MillerRabin.prototype._randbelow = function _randbelow(n9) {
    var len = n9.bitLength();
    var min_bytes = Math.ceil(len / 8);
    do
      var a8 = new bn((this || _global$9).rand.generate(min_bytes));
    while (a8.cmp(n9) >= 0);
    return a8;
  };
  MillerRabin.prototype._randrange = function _randrange(start, stop) {
    var size = stop.sub(start);
    return start.add(this._randbelow(size));
  };
  MillerRabin.prototype.test = function test(n9, k4, cb) {
    var len = n9.bitLength();
    var red = bn.mont(n9);
    var rone = new bn(1).toRed(red);
    if (!k4)
      k4 = Math.max(1, len / 48 | 0);
    var n1 = n9.subn(1);
    for (var s7 = 0; !n1.testn(s7); s7++) {
    }
    var d6 = n9.shrn(s7);
    var rn1 = n1.toRed(red);
    var prime = true;
    for (; k4 > 0; k4--) {
      var a8 = this._randrange(new bn(2), n1);
      if (cb)
        cb(a8);
      var x4 = a8.toRed(red).redPow(d6);
      if (x4.cmp(rone) === 0 || x4.cmp(rn1) === 0)
        continue;
      for (var i8 = 1; i8 < s7; i8++) {
        x4 = x4.redSqr();
        if (x4.cmp(rone) === 0)
          return false;
        if (x4.cmp(rn1) === 0)
          break;
      }
      if (i8 === s7)
        return false;
    }
    return prime;
  };
  MillerRabin.prototype.getDivisor = function getDivisor(n9, k4) {
    var len = n9.bitLength();
    var red = bn.mont(n9);
    var rone = new bn(1).toRed(red);
    if (!k4)
      k4 = Math.max(1, len / 48 | 0);
    var n1 = n9.subn(1);
    for (var s7 = 0; !n1.testn(s7); s7++) {
    }
    var d6 = n9.shrn(s7);
    var rn1 = n1.toRed(red);
    for (; k4 > 0; k4--) {
      var a8 = this._randrange(new bn(2), n1);
      var g5 = n9.gcd(a8);
      if (g5.cmpn(1) !== 0)
        return g5;
      var x4 = a8.toRed(red).redPow(d6);
      if (x4.cmp(rone) === 0 || x4.cmp(rn1) === 0)
        continue;
      for (var i8 = 1; i8 < s7; i8++) {
        x4 = x4.redSqr();
        if (x4.cmp(rone) === 0)
          return x4.fromRed().subn(1).gcd(n9);
        if (x4.cmp(rn1) === 0)
          break;
      }
      if (i8 === s7) {
        x4 = x4.redSqr();
        return x4.fromRed().subn(1).gcd(n9);
      }
    }
    return false;
  };
  return exports$11;
}
function dew$$() {
  if (_dewExec$$)
    return exports$10;
  _dewExec$$ = true;
  var randomBytes2 = dew$2O();
  exports$10 = findPrime;
  findPrime.simpleSieve = simpleSieve;
  findPrime.fermatTest = fermatTest;
  var BN = dew$1X();
  var TWENTYFOUR = new BN(24);
  var MillerRabin = dew$10();
  var millerRabin = new MillerRabin();
  var ONE = new BN(1);
  var TWO = new BN(2);
  var FIVE = new BN(5);
  new BN(16);
  new BN(8);
  var TEN = new BN(10);
  var THREE = new BN(3);
  new BN(7);
  var ELEVEN = new BN(11);
  var FOUR = new BN(4);
  new BN(12);
  var primes = null;
  function _getPrimes() {
    if (primes !== null)
      return primes;
    var limit = 1048576;
    var res = [];
    res[0] = 2;
    for (var i8 = 1, k4 = 3; k4 < limit; k4 += 2) {
      var sqrt = Math.ceil(Math.sqrt(k4));
      for (var j4 = 0; j4 < i8 && res[j4] <= sqrt; j4++)
        if (k4 % res[j4] === 0)
          break;
      if (i8 !== j4 && res[j4] <= sqrt)
        continue;
      res[i8++] = k4;
    }
    primes = res;
    return res;
  }
  function simpleSieve(p8) {
    var primes2 = _getPrimes();
    for (var i8 = 0; i8 < primes2.length; i8++)
      if (p8.modn(primes2[i8]) === 0) {
        if (p8.cmpn(primes2[i8]) === 0) {
          return true;
        } else {
          return false;
        }
      }
    return true;
  }
  function fermatTest(p8) {
    var red = BN.mont(p8);
    return TWO.toRed(red).redPow(p8.subn(1)).fromRed().cmpn(1) === 0;
  }
  function findPrime(bits, gen) {
    if (bits < 16) {
      if (gen === 2 || gen === 5) {
        return new BN([140, 123]);
      } else {
        return new BN([140, 39]);
      }
    }
    gen = new BN(gen);
    var num, n22;
    while (true) {
      num = new BN(randomBytes2(Math.ceil(bits / 8)));
      while (num.bitLength() > bits) {
        num.ishrn(1);
      }
      if (num.isEven()) {
        num.iadd(ONE);
      }
      if (!num.testn(1)) {
        num.iadd(TWO);
      }
      if (!gen.cmp(TWO)) {
        while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
          num.iadd(FOUR);
        }
      } else if (!gen.cmp(FIVE)) {
        while (num.mod(TEN).cmp(THREE)) {
          num.iadd(FOUR);
        }
      }
      n22 = num.shrn(1);
      if (simpleSieve(n22) && simpleSieve(num) && fermatTest(n22) && fermatTest(num) && millerRabin.test(n22) && millerRabin.test(num)) {
        return num;
      }
    }
  }
  return exports$10;
}
function dew$_() {
  if (_dewExec$_)
    return exports$$;
  _dewExec$_ = true;
  var Buffer3 = buffer.Buffer;
  var BN = dew$1X();
  var MillerRabin = dew$10();
  var millerRabin = new MillerRabin();
  var TWENTYFOUR = new BN(24);
  var ELEVEN = new BN(11);
  var TEN = new BN(10);
  var THREE = new BN(3);
  var SEVEN = new BN(7);
  var primes = dew$$();
  var randomBytes2 = dew$2O();
  exports$$ = DH;
  function setPublicKey(pub, enc) {
    enc = enc || "utf8";
    if (!Buffer3.isBuffer(pub)) {
      pub = new Buffer3(pub, enc);
    }
    (this || _global$8)._pub = new BN(pub);
    return this || _global$8;
  }
  function setPrivateKey(priv, enc) {
    enc = enc || "utf8";
    if (!Buffer3.isBuffer(priv)) {
      priv = new Buffer3(priv, enc);
    }
    (this || _global$8)._priv = new BN(priv);
    return this || _global$8;
  }
  var primeCache = {};
  function checkPrime(prime, generator) {
    var gen = generator.toString("hex");
    var hex = [gen, prime.toString(16)].join("_");
    if (hex in primeCache) {
      return primeCache[hex];
    }
    var error = 0;
    if (prime.isEven() || !primes.simpleSieve || !primes.fermatTest(prime) || !millerRabin.test(prime)) {
      error += 1;
      if (gen === "02" || gen === "05") {
        error += 8;
      } else {
        error += 4;
      }
      primeCache[hex] = error;
      return error;
    }
    if (!millerRabin.test(prime.shrn(1))) {
      error += 2;
    }
    var rem;
    switch (gen) {
      case "02":
        if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
          error += 8;
        }
        break;
      case "05":
        rem = prime.mod(TEN);
        if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
          error += 8;
        }
        break;
      default:
        error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  function DH(prime, generator, malleable) {
    this.setGenerator(generator);
    (this || _global$8).__prime = new BN(prime);
    (this || _global$8)._prime = BN.mont((this || _global$8).__prime);
    (this || _global$8)._primeLen = prime.length;
    (this || _global$8)._pub = void 0;
    (this || _global$8)._priv = void 0;
    (this || _global$8)._primeCode = void 0;
    if (malleable) {
      (this || _global$8).setPublicKey = setPublicKey;
      (this || _global$8).setPrivateKey = setPrivateKey;
    } else {
      (this || _global$8)._primeCode = 8;
    }
  }
  Object.defineProperty(DH.prototype, "verifyError", {
    enumerable: true,
    get: function() {
      if (typeof (this || _global$8)._primeCode !== "number") {
        (this || _global$8)._primeCode = checkPrime((this || _global$8).__prime, (this || _global$8).__gen);
      }
      return (this || _global$8)._primeCode;
    }
  });
  DH.prototype.generateKeys = function() {
    if (!(this || _global$8)._priv) {
      (this || _global$8)._priv = new BN(randomBytes2((this || _global$8)._primeLen));
    }
    (this || _global$8)._pub = (this || _global$8)._gen.toRed((this || _global$8)._prime).redPow((this || _global$8)._priv).fromRed();
    return this.getPublicKey();
  };
  DH.prototype.computeSecret = function(other) {
    other = new BN(other);
    other = other.toRed((this || _global$8)._prime);
    var secret = other.redPow((this || _global$8)._priv).fromRed();
    var out = new Buffer3(secret.toArray());
    var prime = this.getPrime();
    if (out.length < prime.length) {
      var front = new Buffer3(prime.length - out.length);
      front.fill(0);
      out = Buffer3.concat([front, out]);
    }
    return out;
  };
  DH.prototype.getPublicKey = function getPublicKey(enc) {
    return formatReturnValue((this || _global$8)._pub, enc);
  };
  DH.prototype.getPrivateKey = function getPrivateKey(enc) {
    return formatReturnValue((this || _global$8)._priv, enc);
  };
  DH.prototype.getPrime = function(enc) {
    return formatReturnValue((this || _global$8).__prime, enc);
  };
  DH.prototype.getGenerator = function(enc) {
    return formatReturnValue((this || _global$8)._gen, enc);
  };
  DH.prototype.setGenerator = function(gen, enc) {
    enc = enc || "utf8";
    if (!Buffer3.isBuffer(gen)) {
      gen = new Buffer3(gen, enc);
    }
    (this || _global$8).__gen = gen;
    (this || _global$8)._gen = new BN(gen);
    return this || _global$8;
  };
  function formatReturnValue(bn, enc) {
    var buf = new Buffer3(bn.toArray());
    if (!enc) {
      return buf;
    } else {
      return buf.toString(enc);
    }
  }
  return exports$$;
}
function dew$Z() {
  if (_dewExec$Z)
    return exports$_;
  _dewExec$Z = true;
  var Buffer3 = buffer.Buffer;
  var generatePrime = dew$$();
  var primes = _primes;
  var DH = dew$_();
  function getDiffieHellman2(mod) {
    var prime = new Buffer3(primes[mod].prime, "hex");
    var gen = new Buffer3(primes[mod].gen, "hex");
    return new DH(prime, gen);
  }
  var ENCODINGS = {
    "binary": true,
    "hex": true,
    "base64": true
  };
  function createDiffieHellman2(prime, enc, generator, genc) {
    if (Buffer3.isBuffer(enc) || ENCODINGS[enc] === void 0) {
      return createDiffieHellman2(prime, "binary", enc, generator);
    }
    enc = enc || "binary";
    genc = genc || "binary";
    generator = generator || new Buffer3([2]);
    if (!Buffer3.isBuffer(generator)) {
      generator = new Buffer3(generator, genc);
    }
    if (typeof prime === "number") {
      return new DH(generatePrime(prime, generator), generator, true);
    }
    if (!Buffer3.isBuffer(prime)) {
      prime = new Buffer3(prime, enc);
    }
    return new DH(prime, generator, true);
  }
  exports$_.DiffieHellmanGroup = exports$_.createDiffieHellmanGroup = exports$_.getDiffieHellman = getDiffieHellman2;
  exports$_.createDiffieHellman = exports$_.DiffieHellman = createDiffieHellman2;
  return exports$_;
}
function dew$Y() {
  if (_dewExec$Y)
    return exports$Z;
  _dewExec$Y = true;
  var buffer$1 = buffer;
  var Buffer3 = buffer$1.Buffer;
  function copyProps(src, dst) {
    for (var key in src) {
      dst[key] = src[key];
    }
  }
  if (Buffer3.from && Buffer3.alloc && Buffer3.allocUnsafe && Buffer3.allocUnsafeSlow) {
    exports$Z = buffer$1;
  } else {
    copyProps(buffer$1, exports$Z);
    exports$Z.Buffer = SafeBuffer;
  }
  function SafeBuffer(arg, encodingOrOffset, length) {
    return Buffer3(arg, encodingOrOffset, length);
  }
  SafeBuffer.prototype = Object.create(Buffer3.prototype);
  copyProps(Buffer3, SafeBuffer);
  SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === "number") {
      throw new TypeError("Argument must not be a number");
    }
    return Buffer3(arg, encodingOrOffset, length);
  };
  SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== "number") {
      throw new TypeError("Argument must be a number");
    }
    var buf = Buffer3(size);
    if (fill !== void 0) {
      if (typeof encoding === "string") {
        buf.fill(fill, encoding);
      } else {
        buf.fill(fill);
      }
    } else {
      buf.fill(0);
    }
    return buf;
  };
  SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== "number") {
      throw new TypeError("Argument must be a number");
    }
    return Buffer3(size);
  };
  SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== "number") {
      throw new TypeError("Argument must be a number");
    }
    return buffer$1.SlowBuffer(size);
  };
  return exports$Z;
}
function dew$X() {
  if (_dewExec$X)
    return module$4.exports;
  _dewExec$X = true;
  (function(module3, exports11) {
    function assert2(val, msg) {
      if (!val)
        throw new Error(msg || "Assertion failed");
    }
    function inherits4(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function() {
      };
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }
    function BN(number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }
      (this || _global$7).negative = 0;
      (this || _global$7).words = null;
      (this || _global$7).length = 0;
      (this || _global$7).red = null;
      if (number !== null) {
        if (base === "le" || base === "be") {
          endian = base;
          base = 10;
        }
        this._init(number || 0, base || 10, endian || "be");
      }
    }
    if (typeof module3 === "object") {
      module3.exports = BN;
    } else {
      exports11.BN = BN;
    }
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer3;
    try {
      if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
        Buffer3 = window.Buffer;
      } else {
        Buffer3 = buffer.Buffer;
      }
    } catch (e11) {
    }
    BN.isBN = function isBN(num) {
      if (num instanceof BN) {
        return true;
      }
      return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
      if (left.cmp(right) > 0)
        return left;
      return right;
    };
    BN.min = function min(left, right) {
      if (left.cmp(right) < 0)
        return left;
      return right;
    };
    BN.prototype._init = function init2(number, base, endian) {
      if (typeof number === "number") {
        return this._initNumber(number, base, endian);
      }
      if (typeof number === "object") {
        return this._initArray(number, base, endian);
      }
      if (base === "hex") {
        base = 16;
      }
      assert2(base === (base | 0) && base >= 2 && base <= 36);
      number = number.toString().replace(/\s+/g, "");
      var start = 0;
      if (number[0] === "-") {
        start++;
        (this || _global$7).negative = 1;
      }
      if (start < number.length) {
        if (base === 16) {
          this._parseHex(number, start, endian);
        } else {
          this._parseBase(number, base, start);
          if (endian === "le") {
            this._initArray(this.toArray(), base, endian);
          }
        }
      }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
      if (number < 0) {
        (this || _global$7).negative = 1;
        number = -number;
      }
      if (number < 67108864) {
        (this || _global$7).words = [number & 67108863];
        (this || _global$7).length = 1;
      } else if (number < 4503599627370496) {
        (this || _global$7).words = [number & 67108863, number / 67108864 & 67108863];
        (this || _global$7).length = 2;
      } else {
        assert2(number < 9007199254740992);
        (this || _global$7).words = [number & 67108863, number / 67108864 & 67108863, 1];
        (this || _global$7).length = 3;
      }
      if (endian !== "le")
        return;
      this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
      assert2(typeof number.length === "number");
      if (number.length <= 0) {
        (this || _global$7).words = [0];
        (this || _global$7).length = 1;
        return this || _global$7;
      }
      (this || _global$7).length = Math.ceil(number.length / 3);
      (this || _global$7).words = new Array((this || _global$7).length);
      for (var i8 = 0; i8 < (this || _global$7).length; i8++) {
        (this || _global$7).words[i8] = 0;
      }
      var j4, w4;
      var off2 = 0;
      if (endian === "be") {
        for (i8 = number.length - 1, j4 = 0; i8 >= 0; i8 -= 3) {
          w4 = number[i8] | number[i8 - 1] << 8 | number[i8 - 2] << 16;
          (this || _global$7).words[j4] |= w4 << off2 & 67108863;
          (this || _global$7).words[j4 + 1] = w4 >>> 26 - off2 & 67108863;
          off2 += 24;
          if (off2 >= 26) {
            off2 -= 26;
            j4++;
          }
        }
      } else if (endian === "le") {
        for (i8 = 0, j4 = 0; i8 < number.length; i8 += 3) {
          w4 = number[i8] | number[i8 + 1] << 8 | number[i8 + 2] << 16;
          (this || _global$7).words[j4] |= w4 << off2 & 67108863;
          (this || _global$7).words[j4 + 1] = w4 >>> 26 - off2 & 67108863;
          off2 += 24;
          if (off2 >= 26) {
            off2 -= 26;
            j4++;
          }
        }
      }
      return this._strip();
    };
    function parseHex4Bits(string, index) {
      var c8 = string.charCodeAt(index);
      if (c8 >= 48 && c8 <= 57) {
        return c8 - 48;
      } else if (c8 >= 65 && c8 <= 70) {
        return c8 - 55;
      } else if (c8 >= 97 && c8 <= 102) {
        return c8 - 87;
      } else {
        assert2(false, "Invalid character in " + string);
      }
    }
    function parseHexByte(string, lowerBound, index) {
      var r9 = parseHex4Bits(string, index);
      if (index - 1 >= lowerBound) {
        r9 |= parseHex4Bits(string, index - 1) << 4;
      }
      return r9;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
      (this || _global$7).length = Math.ceil((number.length - start) / 6);
      (this || _global$7).words = new Array((this || _global$7).length);
      for (var i8 = 0; i8 < (this || _global$7).length; i8++) {
        (this || _global$7).words[i8] = 0;
      }
      var off2 = 0;
      var j4 = 0;
      var w4;
      if (endian === "be") {
        for (i8 = number.length - 1; i8 >= start; i8 -= 2) {
          w4 = parseHexByte(number, start, i8) << off2;
          (this || _global$7).words[j4] |= w4 & 67108863;
          if (off2 >= 18) {
            off2 -= 18;
            j4 += 1;
            (this || _global$7).words[j4] |= w4 >>> 26;
          } else {
            off2 += 8;
          }
        }
      } else {
        var parseLength = number.length - start;
        for (i8 = parseLength % 2 === 0 ? start + 1 : start; i8 < number.length; i8 += 2) {
          w4 = parseHexByte(number, start, i8) << off2;
          (this || _global$7).words[j4] |= w4 & 67108863;
          if (off2 >= 18) {
            off2 -= 18;
            j4 += 1;
            (this || _global$7).words[j4] |= w4 >>> 26;
          } else {
            off2 += 8;
          }
        }
      }
      this._strip();
    };
    function parseBase(str, start, end, mul) {
      var r9 = 0;
      var b5 = 0;
      var len = Math.min(str.length, end);
      for (var i8 = start; i8 < len; i8++) {
        var c8 = str.charCodeAt(i8) - 48;
        r9 *= mul;
        if (c8 >= 49) {
          b5 = c8 - 49 + 10;
        } else if (c8 >= 17) {
          b5 = c8 - 17 + 10;
        } else {
          b5 = c8;
        }
        assert2(c8 >= 0 && b5 < mul, "Invalid character");
        r9 += b5;
      }
      return r9;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
      (this || _global$7).words = [0];
      (this || _global$7).length = 1;
      for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
        limbLen++;
      }
      limbLen--;
      limbPow = limbPow / base | 0;
      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;
      var word = 0;
      for (var i8 = start; i8 < end; i8 += limbLen) {
        word = parseBase(number, i8, i8 + limbLen, base);
        this.imuln(limbPow);
        if ((this || _global$7).words[0] + word < 67108864) {
          (this || _global$7).words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i8, number.length, base);
        for (i8 = 0; i8 < mod; i8++) {
          pow *= base;
        }
        this.imuln(pow);
        if ((this || _global$7).words[0] + word < 67108864) {
          (this || _global$7).words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
      this._strip();
    };
    BN.prototype.copy = function copy(dest) {
      dest.words = new Array((this || _global$7).length);
      for (var i8 = 0; i8 < (this || _global$7).length; i8++) {
        dest.words[i8] = (this || _global$7).words[i8];
      }
      dest.length = (this || _global$7).length;
      dest.negative = (this || _global$7).negative;
      dest.red = (this || _global$7).red;
    };
    function move(dest, src) {
      dest.words = src.words;
      dest.length = src.length;
      dest.negative = src.negative;
      dest.red = src.red;
    }
    BN.prototype._move = function _move(dest) {
      move(dest, this || _global$7);
    };
    BN.prototype.clone = function clone() {
      var r9 = new BN(null);
      this.copy(r9);
      return r9;
    };
    BN.prototype._expand = function _expand(size) {
      while ((this || _global$7).length < size) {
        (this || _global$7).words[(this || _global$7).length++] = 0;
      }
      return this || _global$7;
    };
    BN.prototype._strip = function strip() {
      while ((this || _global$7).length > 1 && (this || _global$7).words[(this || _global$7).length - 1] === 0) {
        (this || _global$7).length--;
      }
      return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
      if ((this || _global$7).length === 1 && (this || _global$7).words[0] === 0) {
        (this || _global$7).negative = 0;
      }
      return this || _global$7;
    };
    if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
      try {
        BN.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect3;
      } catch (e11) {
        BN.prototype.inspect = inspect3;
      }
    } else {
      BN.prototype.inspect = inspect3;
    }
    function inspect3() {
      return ((this || _global$7).red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    }
    var zeros = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"];
    var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
    var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
    BN.prototype.toString = function toString3(base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;
      var out;
      if (base === 16 || base === "hex") {
        out = "";
        var off2 = 0;
        var carry = 0;
        for (var i8 = 0; i8 < (this || _global$7).length; i8++) {
          var w4 = (this || _global$7).words[i8];
          var word = ((w4 << off2 | carry) & 16777215).toString(16);
          carry = w4 >>> 24 - off2 & 16777215;
          if (carry !== 0 || i8 !== (this || _global$7).length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }
          off2 += 2;
          if (off2 >= 26) {
            off2 -= 26;
            i8--;
          }
        }
        if (carry !== 0) {
          out = carry.toString(16) + out;
        }
        while (out.length % padding !== 0) {
          out = "0" + out;
        }
        if ((this || _global$7).negative !== 0) {
          out = "-" + out;
        }
        return out;
      }
      if (base === (base | 0) && base >= 2 && base <= 36) {
        var groupSize = groupSizes[base];
        var groupBase = groupBases[base];
        out = "";
        var c8 = this.clone();
        c8.negative = 0;
        while (!c8.isZero()) {
          var r9 = c8.modrn(groupBase).toString(base);
          c8 = c8.idivn(groupBase);
          if (!c8.isZero()) {
            out = zeros[groupSize - r9.length] + r9 + out;
          } else {
            out = r9 + out;
          }
        }
        if (this.isZero()) {
          out = "0" + out;
        }
        while (out.length % padding !== 0) {
          out = "0" + out;
        }
        if ((this || _global$7).negative !== 0) {
          out = "-" + out;
        }
        return out;
      }
      assert2(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
      var ret = (this || _global$7).words[0];
      if ((this || _global$7).length === 2) {
        ret += (this || _global$7).words[1] * 67108864;
      } else if ((this || _global$7).length === 3 && (this || _global$7).words[2] === 1) {
        ret += 4503599627370496 + (this || _global$7).words[1] * 67108864;
      } else if ((this || _global$7).length > 2) {
        assert2(false, "Number can only safely store up to 53 bits");
      }
      return (this || _global$7).negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON2() {
      return this.toString(16, 2);
    };
    if (Buffer3) {
      BN.prototype.toBuffer = function toBuffer(endian, length) {
        return this.toArrayLike(Buffer3, endian, length);
      };
    }
    BN.prototype.toArray = function toArray2(endian, length) {
      return this.toArrayLike(Array, endian, length);
    };
    var allocate = function allocate2(ArrayType, size) {
      if (ArrayType.allocUnsafe) {
        return ArrayType.allocUnsafe(size);
      }
      return new ArrayType(size);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
      this._strip();
      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert2(byteLength <= reqLength, "byte array longer than desired length");
      assert2(reqLength > 0, "Requested array length <= 0");
      var res = allocate(ArrayType, reqLength);
      var postfix = endian === "le" ? "LE" : "BE";
      this["_toArrayLike" + postfix](res, byteLength);
      return res;
    };
    BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
      var position = 0;
      var carry = 0;
      for (var i8 = 0, shift = 0; i8 < (this || _global$7).length; i8++) {
        var word = (this || _global$7).words[i8] << shift | carry;
        res[position++] = word & 255;
        if (position < res.length) {
          res[position++] = word >> 8 & 255;
        }
        if (position < res.length) {
          res[position++] = word >> 16 & 255;
        }
        if (shift === 6) {
          if (position < res.length) {
            res[position++] = word >> 24 & 255;
          }
          carry = 0;
          shift = 0;
        } else {
          carry = word >>> 24;
          shift += 2;
        }
      }
      if (position < res.length) {
        res[position++] = carry;
        while (position < res.length) {
          res[position++] = 0;
        }
      }
    };
    BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
      var position = res.length - 1;
      var carry = 0;
      for (var i8 = 0, shift = 0; i8 < (this || _global$7).length; i8++) {
        var word = (this || _global$7).words[i8] << shift | carry;
        res[position--] = word & 255;
        if (position >= 0) {
          res[position--] = word >> 8 & 255;
        }
        if (position >= 0) {
          res[position--] = word >> 16 & 255;
        }
        if (shift === 6) {
          if (position >= 0) {
            res[position--] = word >> 24 & 255;
          }
          carry = 0;
          shift = 0;
        } else {
          carry = word >>> 24;
          shift += 2;
        }
      }
      if (position >= 0) {
        res[position--] = carry;
        while (position >= 0) {
          res[position--] = 0;
        }
      }
    };
    if (Math.clz32) {
      BN.prototype._countBits = function _countBits(w4) {
        return 32 - Math.clz32(w4);
      };
    } else {
      BN.prototype._countBits = function _countBits(w4) {
        var t8 = w4;
        var r9 = 0;
        if (t8 >= 4096) {
          r9 += 13;
          t8 >>>= 13;
        }
        if (t8 >= 64) {
          r9 += 7;
          t8 >>>= 7;
        }
        if (t8 >= 8) {
          r9 += 4;
          t8 >>>= 4;
        }
        if (t8 >= 2) {
          r9 += 2;
          t8 >>>= 2;
        }
        return r9 + t8;
      };
    }
    BN.prototype._zeroBits = function _zeroBits(w4) {
      if (w4 === 0)
        return 26;
      var t8 = w4;
      var r9 = 0;
      if ((t8 & 8191) === 0) {
        r9 += 13;
        t8 >>>= 13;
      }
      if ((t8 & 127) === 0) {
        r9 += 7;
        t8 >>>= 7;
      }
      if ((t8 & 15) === 0) {
        r9 += 4;
        t8 >>>= 4;
      }
      if ((t8 & 3) === 0) {
        r9 += 2;
        t8 >>>= 2;
      }
      if ((t8 & 1) === 0) {
        r9++;
      }
      return r9;
    };
    BN.prototype.bitLength = function bitLength() {
      var w4 = (this || _global$7).words[(this || _global$7).length - 1];
      var hi = this._countBits(w4);
      return ((this || _global$7).length - 1) * 26 + hi;
    };
    function toBitArray(num) {
      var w4 = new Array(num.bitLength());
      for (var bit = 0; bit < w4.length; bit++) {
        var off2 = bit / 26 | 0;
        var wbit = bit % 26;
        w4[bit] = num.words[off2] >>> wbit & 1;
      }
      return w4;
    }
    BN.prototype.zeroBits = function zeroBits() {
      if (this.isZero())
        return 0;
      var r9 = 0;
      for (var i8 = 0; i8 < (this || _global$7).length; i8++) {
        var b5 = this._zeroBits((this || _global$7).words[i8]);
        r9 += b5;
        if (b5 !== 26)
          break;
      }
      return r9;
    };
    BN.prototype.byteLength = function byteLength() {
      return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
      if ((this || _global$7).negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }
      return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }
      return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
      return (this || _global$7).negative !== 0;
    };
    BN.prototype.neg = function neg() {
      return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
      if (!this.isZero()) {
        (this || _global$7).negative ^= 1;
      }
      return this || _global$7;
    };
    BN.prototype.iuor = function iuor(num) {
      while ((this || _global$7).length < num.length) {
        (this || _global$7).words[(this || _global$7).length++] = 0;
      }
      for (var i8 = 0; i8 < num.length; i8++) {
        (this || _global$7).words[i8] = (this || _global$7).words[i8] | num.words[i8];
      }
      return this._strip();
    };
    BN.prototype.ior = function ior(num) {
      assert2(((this || _global$7).negative | num.negative) === 0);
      return this.iuor(num);
    };
    BN.prototype.or = function or(num) {
      if ((this || _global$7).length > num.length)
        return this.clone().ior(num);
      return num.clone().ior(this || _global$7);
    };
    BN.prototype.uor = function uor(num) {
      if ((this || _global$7).length > num.length)
        return this.clone().iuor(num);
      return num.clone().iuor(this || _global$7);
    };
    BN.prototype.iuand = function iuand(num) {
      var b5;
      if ((this || _global$7).length > num.length) {
        b5 = num;
      } else {
        b5 = this || _global$7;
      }
      for (var i8 = 0; i8 < b5.length; i8++) {
        (this || _global$7).words[i8] = (this || _global$7).words[i8] & num.words[i8];
      }
      (this || _global$7).length = b5.length;
      return this._strip();
    };
    BN.prototype.iand = function iand(num) {
      assert2(((this || _global$7).negative | num.negative) === 0);
      return this.iuand(num);
    };
    BN.prototype.and = function and(num) {
      if ((this || _global$7).length > num.length)
        return this.clone().iand(num);
      return num.clone().iand(this || _global$7);
    };
    BN.prototype.uand = function uand(num) {
      if ((this || _global$7).length > num.length)
        return this.clone().iuand(num);
      return num.clone().iuand(this || _global$7);
    };
    BN.prototype.iuxor = function iuxor(num) {
      var a8;
      var b5;
      if ((this || _global$7).length > num.length) {
        a8 = this || _global$7;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$7;
      }
      for (var i8 = 0; i8 < b5.length; i8++) {
        (this || _global$7).words[i8] = a8.words[i8] ^ b5.words[i8];
      }
      if ((this || _global$7) !== a8) {
        for (; i8 < a8.length; i8++) {
          (this || _global$7).words[i8] = a8.words[i8];
        }
      }
      (this || _global$7).length = a8.length;
      return this._strip();
    };
    BN.prototype.ixor = function ixor(num) {
      assert2(((this || _global$7).negative | num.negative) === 0);
      return this.iuxor(num);
    };
    BN.prototype.xor = function xor(num) {
      if ((this || _global$7).length > num.length)
        return this.clone().ixor(num);
      return num.clone().ixor(this || _global$7);
    };
    BN.prototype.uxor = function uxor(num) {
      if ((this || _global$7).length > num.length)
        return this.clone().iuxor(num);
      return num.clone().iuxor(this || _global$7);
    };
    BN.prototype.inotn = function inotn(width) {
      assert2(typeof width === "number" && width >= 0);
      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;
      this._expand(bytesNeeded);
      if (bitsLeft > 0) {
        bytesNeeded--;
      }
      for (var i8 = 0; i8 < bytesNeeded; i8++) {
        (this || _global$7).words[i8] = ~(this || _global$7).words[i8] & 67108863;
      }
      if (bitsLeft > 0) {
        (this || _global$7).words[i8] = ~(this || _global$7).words[i8] & 67108863 >> 26 - bitsLeft;
      }
      return this._strip();
    };
    BN.prototype.notn = function notn(width) {
      return this.clone().inotn(width);
    };
    BN.prototype.setn = function setn(bit, val) {
      assert2(typeof bit === "number" && bit >= 0);
      var off2 = bit / 26 | 0;
      var wbit = bit % 26;
      this._expand(off2 + 1);
      if (val) {
        (this || _global$7).words[off2] = (this || _global$7).words[off2] | 1 << wbit;
      } else {
        (this || _global$7).words[off2] = (this || _global$7).words[off2] & ~(1 << wbit);
      }
      return this._strip();
    };
    BN.prototype.iadd = function iadd(num) {
      var r9;
      if ((this || _global$7).negative !== 0 && num.negative === 0) {
        (this || _global$7).negative = 0;
        r9 = this.isub(num);
        (this || _global$7).negative ^= 1;
        return this._normSign();
      } else if ((this || _global$7).negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r9 = this.isub(num);
        num.negative = 1;
        return r9._normSign();
      }
      var a8, b5;
      if ((this || _global$7).length > num.length) {
        a8 = this || _global$7;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$7;
      }
      var carry = 0;
      for (var i8 = 0; i8 < b5.length; i8++) {
        r9 = (a8.words[i8] | 0) + (b5.words[i8] | 0) + carry;
        (this || _global$7).words[i8] = r9 & 67108863;
        carry = r9 >>> 26;
      }
      for (; carry !== 0 && i8 < a8.length; i8++) {
        r9 = (a8.words[i8] | 0) + carry;
        (this || _global$7).words[i8] = r9 & 67108863;
        carry = r9 >>> 26;
      }
      (this || _global$7).length = a8.length;
      if (carry !== 0) {
        (this || _global$7).words[(this || _global$7).length] = carry;
        (this || _global$7).length++;
      } else if (a8 !== (this || _global$7)) {
        for (; i8 < a8.length; i8++) {
          (this || _global$7).words[i8] = a8.words[i8];
        }
      }
      return this || _global$7;
    };
    BN.prototype.add = function add(num) {
      var res;
      if (num.negative !== 0 && (this || _global$7).negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && (this || _global$7).negative !== 0) {
        (this || _global$7).negative = 0;
        res = num.sub(this || _global$7);
        (this || _global$7).negative = 1;
        return res;
      }
      if ((this || _global$7).length > num.length)
        return this.clone().iadd(num);
      return num.clone().iadd(this || _global$7);
    };
    BN.prototype.isub = function isub(num) {
      if (num.negative !== 0) {
        num.negative = 0;
        var r9 = this.iadd(num);
        num.negative = 1;
        return r9._normSign();
      } else if ((this || _global$7).negative !== 0) {
        (this || _global$7).negative = 0;
        this.iadd(num);
        (this || _global$7).negative = 1;
        return this._normSign();
      }
      var cmp = this.cmp(num);
      if (cmp === 0) {
        (this || _global$7).negative = 0;
        (this || _global$7).length = 1;
        (this || _global$7).words[0] = 0;
        return this || _global$7;
      }
      var a8, b5;
      if (cmp > 0) {
        a8 = this || _global$7;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$7;
      }
      var carry = 0;
      for (var i8 = 0; i8 < b5.length; i8++) {
        r9 = (a8.words[i8] | 0) - (b5.words[i8] | 0) + carry;
        carry = r9 >> 26;
        (this || _global$7).words[i8] = r9 & 67108863;
      }
      for (; carry !== 0 && i8 < a8.length; i8++) {
        r9 = (a8.words[i8] | 0) + carry;
        carry = r9 >> 26;
        (this || _global$7).words[i8] = r9 & 67108863;
      }
      if (carry === 0 && i8 < a8.length && a8 !== (this || _global$7)) {
        for (; i8 < a8.length; i8++) {
          (this || _global$7).words[i8] = a8.words[i8];
        }
      }
      (this || _global$7).length = Math.max((this || _global$7).length, i8);
      if (a8 !== (this || _global$7)) {
        (this || _global$7).negative = 1;
      }
      return this._strip();
    };
    BN.prototype.sub = function sub(num) {
      return this.clone().isub(num);
    };
    function smallMulTo(self2, num, out) {
      out.negative = num.negative ^ self2.negative;
      var len = self2.length + num.length | 0;
      out.length = len;
      len = len - 1 | 0;
      var a8 = self2.words[0] | 0;
      var b5 = num.words[0] | 0;
      var r9 = a8 * b5;
      var lo = r9 & 67108863;
      var carry = r9 / 67108864 | 0;
      out.words[0] = lo;
      for (var k4 = 1; k4 < len; k4++) {
        var ncarry = carry >>> 26;
        var rword = carry & 67108863;
        var maxJ = Math.min(k4, num.length - 1);
        for (var j4 = Math.max(0, k4 - self2.length + 1); j4 <= maxJ; j4++) {
          var i8 = k4 - j4 | 0;
          a8 = self2.words[i8] | 0;
          b5 = num.words[j4] | 0;
          r9 = a8 * b5 + rword;
          ncarry += r9 / 67108864 | 0;
          rword = r9 & 67108863;
        }
        out.words[k4] = rword | 0;
        carry = ncarry | 0;
      }
      if (carry !== 0) {
        out.words[k4] = carry | 0;
      } else {
        out.length--;
      }
      return out._strip();
    }
    var comb10MulTo = function comb10MulTo2(self2, num, out) {
      var a8 = self2.words;
      var b5 = num.words;
      var o9 = out.words;
      var c8 = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a8[0] | 0;
      var al0 = a0 & 8191;
      var ah0 = a0 >>> 13;
      var a1 = a8[1] | 0;
      var al1 = a1 & 8191;
      var ah1 = a1 >>> 13;
      var a22 = a8[2] | 0;
      var al2 = a22 & 8191;
      var ah2 = a22 >>> 13;
      var a32 = a8[3] | 0;
      var al3 = a32 & 8191;
      var ah3 = a32 >>> 13;
      var a42 = a8[4] | 0;
      var al4 = a42 & 8191;
      var ah4 = a42 >>> 13;
      var a52 = a8[5] | 0;
      var al5 = a52 & 8191;
      var ah5 = a52 >>> 13;
      var a62 = a8[6] | 0;
      var al6 = a62 & 8191;
      var ah6 = a62 >>> 13;
      var a72 = a8[7] | 0;
      var al7 = a72 & 8191;
      var ah7 = a72 >>> 13;
      var a82 = a8[8] | 0;
      var al8 = a82 & 8191;
      var ah8 = a82 >>> 13;
      var a9 = a8[9] | 0;
      var al9 = a9 & 8191;
      var ah9 = a9 >>> 13;
      var b0 = b5[0] | 0;
      var bl0 = b0 & 8191;
      var bh0 = b0 >>> 13;
      var b1 = b5[1] | 0;
      var bl1 = b1 & 8191;
      var bh1 = b1 >>> 13;
      var b22 = b5[2] | 0;
      var bl2 = b22 & 8191;
      var bh2 = b22 >>> 13;
      var b32 = b5[3] | 0;
      var bl3 = b32 & 8191;
      var bh3 = b32 >>> 13;
      var b42 = b5[4] | 0;
      var bl4 = b42 & 8191;
      var bh4 = b42 >>> 13;
      var b52 = b5[5] | 0;
      var bl5 = b52 & 8191;
      var bh5 = b52 >>> 13;
      var b6 = b5[6] | 0;
      var bl6 = b6 & 8191;
      var bh6 = b6 >>> 13;
      var b7 = b5[7] | 0;
      var bl7 = b7 & 8191;
      var bh7 = b7 >>> 13;
      var b8 = b5[8] | 0;
      var bl8 = b8 & 8191;
      var bh8 = b8 >>> 13;
      var b9 = b5[9] | 0;
      var bl9 = b9 & 8191;
      var bh9 = b9 >>> 13;
      out.negative = self2.negative ^ num.negative;
      out.length = 19;
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = mid + Math.imul(ah0, bl0) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
      w0 &= 67108863;
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = mid + Math.imul(ah1, bl0) | 0;
      hi = Math.imul(ah1, bh0);
      lo = lo + Math.imul(al0, bl1) | 0;
      mid = mid + Math.imul(al0, bh1) | 0;
      mid = mid + Math.imul(ah0, bl1) | 0;
      hi = hi + Math.imul(ah0, bh1) | 0;
      var w1 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
      w1 &= 67108863;
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = mid + Math.imul(ah2, bl0) | 0;
      hi = Math.imul(ah2, bh0);
      lo = lo + Math.imul(al1, bl1) | 0;
      mid = mid + Math.imul(al1, bh1) | 0;
      mid = mid + Math.imul(ah1, bl1) | 0;
      hi = hi + Math.imul(ah1, bh1) | 0;
      lo = lo + Math.imul(al0, bl2) | 0;
      mid = mid + Math.imul(al0, bh2) | 0;
      mid = mid + Math.imul(ah0, bl2) | 0;
      hi = hi + Math.imul(ah0, bh2) | 0;
      var w22 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w22 >>> 26) | 0;
      w22 &= 67108863;
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = mid + Math.imul(ah3, bl0) | 0;
      hi = Math.imul(ah3, bh0);
      lo = lo + Math.imul(al2, bl1) | 0;
      mid = mid + Math.imul(al2, bh1) | 0;
      mid = mid + Math.imul(ah2, bl1) | 0;
      hi = hi + Math.imul(ah2, bh1) | 0;
      lo = lo + Math.imul(al1, bl2) | 0;
      mid = mid + Math.imul(al1, bh2) | 0;
      mid = mid + Math.imul(ah1, bl2) | 0;
      hi = hi + Math.imul(ah1, bh2) | 0;
      lo = lo + Math.imul(al0, bl3) | 0;
      mid = mid + Math.imul(al0, bh3) | 0;
      mid = mid + Math.imul(ah0, bl3) | 0;
      hi = hi + Math.imul(ah0, bh3) | 0;
      var w32 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w32 >>> 26) | 0;
      w32 &= 67108863;
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = mid + Math.imul(ah4, bl0) | 0;
      hi = Math.imul(ah4, bh0);
      lo = lo + Math.imul(al3, bl1) | 0;
      mid = mid + Math.imul(al3, bh1) | 0;
      mid = mid + Math.imul(ah3, bl1) | 0;
      hi = hi + Math.imul(ah3, bh1) | 0;
      lo = lo + Math.imul(al2, bl2) | 0;
      mid = mid + Math.imul(al2, bh2) | 0;
      mid = mid + Math.imul(ah2, bl2) | 0;
      hi = hi + Math.imul(ah2, bh2) | 0;
      lo = lo + Math.imul(al1, bl3) | 0;
      mid = mid + Math.imul(al1, bh3) | 0;
      mid = mid + Math.imul(ah1, bl3) | 0;
      hi = hi + Math.imul(ah1, bh3) | 0;
      lo = lo + Math.imul(al0, bl4) | 0;
      mid = mid + Math.imul(al0, bh4) | 0;
      mid = mid + Math.imul(ah0, bl4) | 0;
      hi = hi + Math.imul(ah0, bh4) | 0;
      var w4 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
      w4 &= 67108863;
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = mid + Math.imul(ah5, bl0) | 0;
      hi = Math.imul(ah5, bh0);
      lo = lo + Math.imul(al4, bl1) | 0;
      mid = mid + Math.imul(al4, bh1) | 0;
      mid = mid + Math.imul(ah4, bl1) | 0;
      hi = hi + Math.imul(ah4, bh1) | 0;
      lo = lo + Math.imul(al3, bl2) | 0;
      mid = mid + Math.imul(al3, bh2) | 0;
      mid = mid + Math.imul(ah3, bl2) | 0;
      hi = hi + Math.imul(ah3, bh2) | 0;
      lo = lo + Math.imul(al2, bl3) | 0;
      mid = mid + Math.imul(al2, bh3) | 0;
      mid = mid + Math.imul(ah2, bl3) | 0;
      hi = hi + Math.imul(ah2, bh3) | 0;
      lo = lo + Math.imul(al1, bl4) | 0;
      mid = mid + Math.imul(al1, bh4) | 0;
      mid = mid + Math.imul(ah1, bl4) | 0;
      hi = hi + Math.imul(ah1, bh4) | 0;
      lo = lo + Math.imul(al0, bl5) | 0;
      mid = mid + Math.imul(al0, bh5) | 0;
      mid = mid + Math.imul(ah0, bl5) | 0;
      hi = hi + Math.imul(ah0, bh5) | 0;
      var w5 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
      w5 &= 67108863;
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = mid + Math.imul(ah6, bl0) | 0;
      hi = Math.imul(ah6, bh0);
      lo = lo + Math.imul(al5, bl1) | 0;
      mid = mid + Math.imul(al5, bh1) | 0;
      mid = mid + Math.imul(ah5, bl1) | 0;
      hi = hi + Math.imul(ah5, bh1) | 0;
      lo = lo + Math.imul(al4, bl2) | 0;
      mid = mid + Math.imul(al4, bh2) | 0;
      mid = mid + Math.imul(ah4, bl2) | 0;
      hi = hi + Math.imul(ah4, bh2) | 0;
      lo = lo + Math.imul(al3, bl3) | 0;
      mid = mid + Math.imul(al3, bh3) | 0;
      mid = mid + Math.imul(ah3, bl3) | 0;
      hi = hi + Math.imul(ah3, bh3) | 0;
      lo = lo + Math.imul(al2, bl4) | 0;
      mid = mid + Math.imul(al2, bh4) | 0;
      mid = mid + Math.imul(ah2, bl4) | 0;
      hi = hi + Math.imul(ah2, bh4) | 0;
      lo = lo + Math.imul(al1, bl5) | 0;
      mid = mid + Math.imul(al1, bh5) | 0;
      mid = mid + Math.imul(ah1, bl5) | 0;
      hi = hi + Math.imul(ah1, bh5) | 0;
      lo = lo + Math.imul(al0, bl6) | 0;
      mid = mid + Math.imul(al0, bh6) | 0;
      mid = mid + Math.imul(ah0, bl6) | 0;
      hi = hi + Math.imul(ah0, bh6) | 0;
      var w6 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
      w6 &= 67108863;
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = mid + Math.imul(ah7, bl0) | 0;
      hi = Math.imul(ah7, bh0);
      lo = lo + Math.imul(al6, bl1) | 0;
      mid = mid + Math.imul(al6, bh1) | 0;
      mid = mid + Math.imul(ah6, bl1) | 0;
      hi = hi + Math.imul(ah6, bh1) | 0;
      lo = lo + Math.imul(al5, bl2) | 0;
      mid = mid + Math.imul(al5, bh2) | 0;
      mid = mid + Math.imul(ah5, bl2) | 0;
      hi = hi + Math.imul(ah5, bh2) | 0;
      lo = lo + Math.imul(al4, bl3) | 0;
      mid = mid + Math.imul(al4, bh3) | 0;
      mid = mid + Math.imul(ah4, bl3) | 0;
      hi = hi + Math.imul(ah4, bh3) | 0;
      lo = lo + Math.imul(al3, bl4) | 0;
      mid = mid + Math.imul(al3, bh4) | 0;
      mid = mid + Math.imul(ah3, bl4) | 0;
      hi = hi + Math.imul(ah3, bh4) | 0;
      lo = lo + Math.imul(al2, bl5) | 0;
      mid = mid + Math.imul(al2, bh5) | 0;
      mid = mid + Math.imul(ah2, bl5) | 0;
      hi = hi + Math.imul(ah2, bh5) | 0;
      lo = lo + Math.imul(al1, bl6) | 0;
      mid = mid + Math.imul(al1, bh6) | 0;
      mid = mid + Math.imul(ah1, bl6) | 0;
      hi = hi + Math.imul(ah1, bh6) | 0;
      lo = lo + Math.imul(al0, bl7) | 0;
      mid = mid + Math.imul(al0, bh7) | 0;
      mid = mid + Math.imul(ah0, bl7) | 0;
      hi = hi + Math.imul(ah0, bh7) | 0;
      var w7 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
      w7 &= 67108863;
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = mid + Math.imul(ah8, bl0) | 0;
      hi = Math.imul(ah8, bh0);
      lo = lo + Math.imul(al7, bl1) | 0;
      mid = mid + Math.imul(al7, bh1) | 0;
      mid = mid + Math.imul(ah7, bl1) | 0;
      hi = hi + Math.imul(ah7, bh1) | 0;
      lo = lo + Math.imul(al6, bl2) | 0;
      mid = mid + Math.imul(al6, bh2) | 0;
      mid = mid + Math.imul(ah6, bl2) | 0;
      hi = hi + Math.imul(ah6, bh2) | 0;
      lo = lo + Math.imul(al5, bl3) | 0;
      mid = mid + Math.imul(al5, bh3) | 0;
      mid = mid + Math.imul(ah5, bl3) | 0;
      hi = hi + Math.imul(ah5, bh3) | 0;
      lo = lo + Math.imul(al4, bl4) | 0;
      mid = mid + Math.imul(al4, bh4) | 0;
      mid = mid + Math.imul(ah4, bl4) | 0;
      hi = hi + Math.imul(ah4, bh4) | 0;
      lo = lo + Math.imul(al3, bl5) | 0;
      mid = mid + Math.imul(al3, bh5) | 0;
      mid = mid + Math.imul(ah3, bl5) | 0;
      hi = hi + Math.imul(ah3, bh5) | 0;
      lo = lo + Math.imul(al2, bl6) | 0;
      mid = mid + Math.imul(al2, bh6) | 0;
      mid = mid + Math.imul(ah2, bl6) | 0;
      hi = hi + Math.imul(ah2, bh6) | 0;
      lo = lo + Math.imul(al1, bl7) | 0;
      mid = mid + Math.imul(al1, bh7) | 0;
      mid = mid + Math.imul(ah1, bl7) | 0;
      hi = hi + Math.imul(ah1, bh7) | 0;
      lo = lo + Math.imul(al0, bl8) | 0;
      mid = mid + Math.imul(al0, bh8) | 0;
      mid = mid + Math.imul(ah0, bl8) | 0;
      hi = hi + Math.imul(ah0, bh8) | 0;
      var w8 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
      w8 &= 67108863;
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = mid + Math.imul(ah9, bl0) | 0;
      hi = Math.imul(ah9, bh0);
      lo = lo + Math.imul(al8, bl1) | 0;
      mid = mid + Math.imul(al8, bh1) | 0;
      mid = mid + Math.imul(ah8, bl1) | 0;
      hi = hi + Math.imul(ah8, bh1) | 0;
      lo = lo + Math.imul(al7, bl2) | 0;
      mid = mid + Math.imul(al7, bh2) | 0;
      mid = mid + Math.imul(ah7, bl2) | 0;
      hi = hi + Math.imul(ah7, bh2) | 0;
      lo = lo + Math.imul(al6, bl3) | 0;
      mid = mid + Math.imul(al6, bh3) | 0;
      mid = mid + Math.imul(ah6, bl3) | 0;
      hi = hi + Math.imul(ah6, bh3) | 0;
      lo = lo + Math.imul(al5, bl4) | 0;
      mid = mid + Math.imul(al5, bh4) | 0;
      mid = mid + Math.imul(ah5, bl4) | 0;
      hi = hi + Math.imul(ah5, bh4) | 0;
      lo = lo + Math.imul(al4, bl5) | 0;
      mid = mid + Math.imul(al4, bh5) | 0;
      mid = mid + Math.imul(ah4, bl5) | 0;
      hi = hi + Math.imul(ah4, bh5) | 0;
      lo = lo + Math.imul(al3, bl6) | 0;
      mid = mid + Math.imul(al3, bh6) | 0;
      mid = mid + Math.imul(ah3, bl6) | 0;
      hi = hi + Math.imul(ah3, bh6) | 0;
      lo = lo + Math.imul(al2, bl7) | 0;
      mid = mid + Math.imul(al2, bh7) | 0;
      mid = mid + Math.imul(ah2, bl7) | 0;
      hi = hi + Math.imul(ah2, bh7) | 0;
      lo = lo + Math.imul(al1, bl8) | 0;
      mid = mid + Math.imul(al1, bh8) | 0;
      mid = mid + Math.imul(ah1, bl8) | 0;
      hi = hi + Math.imul(ah1, bh8) | 0;
      lo = lo + Math.imul(al0, bl9) | 0;
      mid = mid + Math.imul(al0, bh9) | 0;
      mid = mid + Math.imul(ah0, bl9) | 0;
      hi = hi + Math.imul(ah0, bh9) | 0;
      var w9 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
      w9 &= 67108863;
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = mid + Math.imul(ah9, bl1) | 0;
      hi = Math.imul(ah9, bh1);
      lo = lo + Math.imul(al8, bl2) | 0;
      mid = mid + Math.imul(al8, bh2) | 0;
      mid = mid + Math.imul(ah8, bl2) | 0;
      hi = hi + Math.imul(ah8, bh2) | 0;
      lo = lo + Math.imul(al7, bl3) | 0;
      mid = mid + Math.imul(al7, bh3) | 0;
      mid = mid + Math.imul(ah7, bl3) | 0;
      hi = hi + Math.imul(ah7, bh3) | 0;
      lo = lo + Math.imul(al6, bl4) | 0;
      mid = mid + Math.imul(al6, bh4) | 0;
      mid = mid + Math.imul(ah6, bl4) | 0;
      hi = hi + Math.imul(ah6, bh4) | 0;
      lo = lo + Math.imul(al5, bl5) | 0;
      mid = mid + Math.imul(al5, bh5) | 0;
      mid = mid + Math.imul(ah5, bl5) | 0;
      hi = hi + Math.imul(ah5, bh5) | 0;
      lo = lo + Math.imul(al4, bl6) | 0;
      mid = mid + Math.imul(al4, bh6) | 0;
      mid = mid + Math.imul(ah4, bl6) | 0;
      hi = hi + Math.imul(ah4, bh6) | 0;
      lo = lo + Math.imul(al3, bl7) | 0;
      mid = mid + Math.imul(al3, bh7) | 0;
      mid = mid + Math.imul(ah3, bl7) | 0;
      hi = hi + Math.imul(ah3, bh7) | 0;
      lo = lo + Math.imul(al2, bl8) | 0;
      mid = mid + Math.imul(al2, bh8) | 0;
      mid = mid + Math.imul(ah2, bl8) | 0;
      hi = hi + Math.imul(ah2, bh8) | 0;
      lo = lo + Math.imul(al1, bl9) | 0;
      mid = mid + Math.imul(al1, bh9) | 0;
      mid = mid + Math.imul(ah1, bl9) | 0;
      hi = hi + Math.imul(ah1, bh9) | 0;
      var w10 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
      w10 &= 67108863;
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = mid + Math.imul(ah9, bl2) | 0;
      hi = Math.imul(ah9, bh2);
      lo = lo + Math.imul(al8, bl3) | 0;
      mid = mid + Math.imul(al8, bh3) | 0;
      mid = mid + Math.imul(ah8, bl3) | 0;
      hi = hi + Math.imul(ah8, bh3) | 0;
      lo = lo + Math.imul(al7, bl4) | 0;
      mid = mid + Math.imul(al7, bh4) | 0;
      mid = mid + Math.imul(ah7, bl4) | 0;
      hi = hi + Math.imul(ah7, bh4) | 0;
      lo = lo + Math.imul(al6, bl5) | 0;
      mid = mid + Math.imul(al6, bh5) | 0;
      mid = mid + Math.imul(ah6, bl5) | 0;
      hi = hi + Math.imul(ah6, bh5) | 0;
      lo = lo + Math.imul(al5, bl6) | 0;
      mid = mid + Math.imul(al5, bh6) | 0;
      mid = mid + Math.imul(ah5, bl6) | 0;
      hi = hi + Math.imul(ah5, bh6) | 0;
      lo = lo + Math.imul(al4, bl7) | 0;
      mid = mid + Math.imul(al4, bh7) | 0;
      mid = mid + Math.imul(ah4, bl7) | 0;
      hi = hi + Math.imul(ah4, bh7) | 0;
      lo = lo + Math.imul(al3, bl8) | 0;
      mid = mid + Math.imul(al3, bh8) | 0;
      mid = mid + Math.imul(ah3, bl8) | 0;
      hi = hi + Math.imul(ah3, bh8) | 0;
      lo = lo + Math.imul(al2, bl9) | 0;
      mid = mid + Math.imul(al2, bh9) | 0;
      mid = mid + Math.imul(ah2, bl9) | 0;
      hi = hi + Math.imul(ah2, bh9) | 0;
      var w11 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
      w11 &= 67108863;
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = mid + Math.imul(ah9, bl3) | 0;
      hi = Math.imul(ah9, bh3);
      lo = lo + Math.imul(al8, bl4) | 0;
      mid = mid + Math.imul(al8, bh4) | 0;
      mid = mid + Math.imul(ah8, bl4) | 0;
      hi = hi + Math.imul(ah8, bh4) | 0;
      lo = lo + Math.imul(al7, bl5) | 0;
      mid = mid + Math.imul(al7, bh5) | 0;
      mid = mid + Math.imul(ah7, bl5) | 0;
      hi = hi + Math.imul(ah7, bh5) | 0;
      lo = lo + Math.imul(al6, bl6) | 0;
      mid = mid + Math.imul(al6, bh6) | 0;
      mid = mid + Math.imul(ah6, bl6) | 0;
      hi = hi + Math.imul(ah6, bh6) | 0;
      lo = lo + Math.imul(al5, bl7) | 0;
      mid = mid + Math.imul(al5, bh7) | 0;
      mid = mid + Math.imul(ah5, bl7) | 0;
      hi = hi + Math.imul(ah5, bh7) | 0;
      lo = lo + Math.imul(al4, bl8) | 0;
      mid = mid + Math.imul(al4, bh8) | 0;
      mid = mid + Math.imul(ah4, bl8) | 0;
      hi = hi + Math.imul(ah4, bh8) | 0;
      lo = lo + Math.imul(al3, bl9) | 0;
      mid = mid + Math.imul(al3, bh9) | 0;
      mid = mid + Math.imul(ah3, bl9) | 0;
      hi = hi + Math.imul(ah3, bh9) | 0;
      var w12 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
      w12 &= 67108863;
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = mid + Math.imul(ah9, bl4) | 0;
      hi = Math.imul(ah9, bh4);
      lo = lo + Math.imul(al8, bl5) | 0;
      mid = mid + Math.imul(al8, bh5) | 0;
      mid = mid + Math.imul(ah8, bl5) | 0;
      hi = hi + Math.imul(ah8, bh5) | 0;
      lo = lo + Math.imul(al7, bl6) | 0;
      mid = mid + Math.imul(al7, bh6) | 0;
      mid = mid + Math.imul(ah7, bl6) | 0;
      hi = hi + Math.imul(ah7, bh6) | 0;
      lo = lo + Math.imul(al6, bl7) | 0;
      mid = mid + Math.imul(al6, bh7) | 0;
      mid = mid + Math.imul(ah6, bl7) | 0;
      hi = hi + Math.imul(ah6, bh7) | 0;
      lo = lo + Math.imul(al5, bl8) | 0;
      mid = mid + Math.imul(al5, bh8) | 0;
      mid = mid + Math.imul(ah5, bl8) | 0;
      hi = hi + Math.imul(ah5, bh8) | 0;
      lo = lo + Math.imul(al4, bl9) | 0;
      mid = mid + Math.imul(al4, bh9) | 0;
      mid = mid + Math.imul(ah4, bl9) | 0;
      hi = hi + Math.imul(ah4, bh9) | 0;
      var w13 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
      w13 &= 67108863;
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = mid + Math.imul(ah9, bl5) | 0;
      hi = Math.imul(ah9, bh5);
      lo = lo + Math.imul(al8, bl6) | 0;
      mid = mid + Math.imul(al8, bh6) | 0;
      mid = mid + Math.imul(ah8, bl6) | 0;
      hi = hi + Math.imul(ah8, bh6) | 0;
      lo = lo + Math.imul(al7, bl7) | 0;
      mid = mid + Math.imul(al7, bh7) | 0;
      mid = mid + Math.imul(ah7, bl7) | 0;
      hi = hi + Math.imul(ah7, bh7) | 0;
      lo = lo + Math.imul(al6, bl8) | 0;
      mid = mid + Math.imul(al6, bh8) | 0;
      mid = mid + Math.imul(ah6, bl8) | 0;
      hi = hi + Math.imul(ah6, bh8) | 0;
      lo = lo + Math.imul(al5, bl9) | 0;
      mid = mid + Math.imul(al5, bh9) | 0;
      mid = mid + Math.imul(ah5, bl9) | 0;
      hi = hi + Math.imul(ah5, bh9) | 0;
      var w14 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
      w14 &= 67108863;
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = mid + Math.imul(ah9, bl6) | 0;
      hi = Math.imul(ah9, bh6);
      lo = lo + Math.imul(al8, bl7) | 0;
      mid = mid + Math.imul(al8, bh7) | 0;
      mid = mid + Math.imul(ah8, bl7) | 0;
      hi = hi + Math.imul(ah8, bh7) | 0;
      lo = lo + Math.imul(al7, bl8) | 0;
      mid = mid + Math.imul(al7, bh8) | 0;
      mid = mid + Math.imul(ah7, bl8) | 0;
      hi = hi + Math.imul(ah7, bh8) | 0;
      lo = lo + Math.imul(al6, bl9) | 0;
      mid = mid + Math.imul(al6, bh9) | 0;
      mid = mid + Math.imul(ah6, bl9) | 0;
      hi = hi + Math.imul(ah6, bh9) | 0;
      var w15 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
      w15 &= 67108863;
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = mid + Math.imul(ah9, bl7) | 0;
      hi = Math.imul(ah9, bh7);
      lo = lo + Math.imul(al8, bl8) | 0;
      mid = mid + Math.imul(al8, bh8) | 0;
      mid = mid + Math.imul(ah8, bl8) | 0;
      hi = hi + Math.imul(ah8, bh8) | 0;
      lo = lo + Math.imul(al7, bl9) | 0;
      mid = mid + Math.imul(al7, bh9) | 0;
      mid = mid + Math.imul(ah7, bl9) | 0;
      hi = hi + Math.imul(ah7, bh9) | 0;
      var w16 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
      w16 &= 67108863;
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = mid + Math.imul(ah9, bl8) | 0;
      hi = Math.imul(ah9, bh8);
      lo = lo + Math.imul(al8, bl9) | 0;
      mid = mid + Math.imul(al8, bh9) | 0;
      mid = mid + Math.imul(ah8, bl9) | 0;
      hi = hi + Math.imul(ah8, bh9) | 0;
      var w17 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
      w17 &= 67108863;
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = mid + Math.imul(ah9, bl9) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
      w18 &= 67108863;
      o9[0] = w0;
      o9[1] = w1;
      o9[2] = w22;
      o9[3] = w32;
      o9[4] = w4;
      o9[5] = w5;
      o9[6] = w6;
      o9[7] = w7;
      o9[8] = w8;
      o9[9] = w9;
      o9[10] = w10;
      o9[11] = w11;
      o9[12] = w12;
      o9[13] = w13;
      o9[14] = w14;
      o9[15] = w15;
      o9[16] = w16;
      o9[17] = w17;
      o9[18] = w18;
      if (c8 !== 0) {
        o9[19] = c8;
        out.length++;
      }
      return out;
    };
    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }
    function bigMulTo(self2, num, out) {
      out.negative = num.negative ^ self2.negative;
      out.length = self2.length + num.length;
      var carry = 0;
      var hncarry = 0;
      for (var k4 = 0; k4 < out.length - 1; k4++) {
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 67108863;
        var maxJ = Math.min(k4, num.length - 1);
        for (var j4 = Math.max(0, k4 - self2.length + 1); j4 <= maxJ; j4++) {
          var i8 = k4 - j4;
          var a8 = self2.words[i8] | 0;
          var b5 = num.words[j4] | 0;
          var r9 = a8 * b5;
          var lo = r9 & 67108863;
          ncarry = ncarry + (r9 / 67108864 | 0) | 0;
          lo = lo + rword | 0;
          rword = lo & 67108863;
          ncarry = ncarry + (lo >>> 26) | 0;
          hncarry += ncarry >>> 26;
          ncarry &= 67108863;
        }
        out.words[k4] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k4] = carry;
      } else {
        out.length--;
      }
      return out._strip();
    }
    function jumboMulTo(self2, num, out) {
      return bigMulTo(self2, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
      var res;
      var len = (this || _global$7).length + num.length;
      if ((this || _global$7).length === 10 && num.length === 10) {
        res = comb10MulTo(this || _global$7, num, out);
      } else if (len < 63) {
        res = smallMulTo(this || _global$7, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this || _global$7, num, out);
      } else {
        res = jumboMulTo(this || _global$7, num, out);
      }
      return res;
    };
    BN.prototype.mul = function mul(num) {
      var out = new BN(null);
      out.words = new Array((this || _global$7).length + num.length);
      return this.mulTo(num, out);
    };
    BN.prototype.mulf = function mulf(num) {
      var out = new BN(null);
      out.words = new Array((this || _global$7).length + num.length);
      return jumboMulTo(this || _global$7, num, out);
    };
    BN.prototype.imul = function imul(num) {
      return this.clone().mulTo(num, this || _global$7);
    };
    BN.prototype.imuln = function imuln(num) {
      var isNegNum = num < 0;
      if (isNegNum)
        num = -num;
      assert2(typeof num === "number");
      assert2(num < 67108864);
      var carry = 0;
      for (var i8 = 0; i8 < (this || _global$7).length; i8++) {
        var w4 = ((this || _global$7).words[i8] | 0) * num;
        var lo = (w4 & 67108863) + (carry & 67108863);
        carry >>= 26;
        carry += w4 / 67108864 | 0;
        carry += lo >>> 26;
        (this || _global$7).words[i8] = lo & 67108863;
      }
      if (carry !== 0) {
        (this || _global$7).words[i8] = carry;
        (this || _global$7).length++;
      }
      return isNegNum ? this.ineg() : this || _global$7;
    };
    BN.prototype.muln = function muln(num) {
      return this.clone().imuln(num);
    };
    BN.prototype.sqr = function sqr() {
      return this.mul(this || _global$7);
    };
    BN.prototype.isqr = function isqr() {
      return this.imul(this.clone());
    };
    BN.prototype.pow = function pow(num) {
      var w4 = toBitArray(num);
      if (w4.length === 0)
        return new BN(1);
      var res = this || _global$7;
      for (var i8 = 0; i8 < w4.length; i8++, res = res.sqr()) {
        if (w4[i8] !== 0)
          break;
      }
      if (++i8 < w4.length) {
        for (var q3 = res.sqr(); i8 < w4.length; i8++, q3 = q3.sqr()) {
          if (w4[i8] === 0)
            continue;
          res = res.mul(q3);
        }
      }
      return res;
    };
    BN.prototype.iushln = function iushln(bits) {
      assert2(typeof bits === "number" && bits >= 0);
      var r9 = bits % 26;
      var s7 = (bits - r9) / 26;
      var carryMask = 67108863 >>> 26 - r9 << 26 - r9;
      var i8;
      if (r9 !== 0) {
        var carry = 0;
        for (i8 = 0; i8 < (this || _global$7).length; i8++) {
          var newCarry = (this || _global$7).words[i8] & carryMask;
          var c8 = ((this || _global$7).words[i8] | 0) - newCarry << r9;
          (this || _global$7).words[i8] = c8 | carry;
          carry = newCarry >>> 26 - r9;
        }
        if (carry) {
          (this || _global$7).words[i8] = carry;
          (this || _global$7).length++;
        }
      }
      if (s7 !== 0) {
        for (i8 = (this || _global$7).length - 1; i8 >= 0; i8--) {
          (this || _global$7).words[i8 + s7] = (this || _global$7).words[i8];
        }
        for (i8 = 0; i8 < s7; i8++) {
          (this || _global$7).words[i8] = 0;
        }
        (this || _global$7).length += s7;
      }
      return this._strip();
    };
    BN.prototype.ishln = function ishln(bits) {
      assert2((this || _global$7).negative === 0);
      return this.iushln(bits);
    };
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
      assert2(typeof bits === "number" && bits >= 0);
      var h8;
      if (hint) {
        h8 = (hint - hint % 26) / 26;
      } else {
        h8 = 0;
      }
      var r9 = bits % 26;
      var s7 = Math.min((bits - r9) / 26, (this || _global$7).length);
      var mask = 67108863 ^ 67108863 >>> r9 << r9;
      var maskedWords = extended;
      h8 -= s7;
      h8 = Math.max(0, h8);
      if (maskedWords) {
        for (var i8 = 0; i8 < s7; i8++) {
          maskedWords.words[i8] = (this || _global$7).words[i8];
        }
        maskedWords.length = s7;
      }
      if (s7 === 0)
        ;
      else if ((this || _global$7).length > s7) {
        (this || _global$7).length -= s7;
        for (i8 = 0; i8 < (this || _global$7).length; i8++) {
          (this || _global$7).words[i8] = (this || _global$7).words[i8 + s7];
        }
      } else {
        (this || _global$7).words[0] = 0;
        (this || _global$7).length = 1;
      }
      var carry = 0;
      for (i8 = (this || _global$7).length - 1; i8 >= 0 && (carry !== 0 || i8 >= h8); i8--) {
        var word = (this || _global$7).words[i8] | 0;
        (this || _global$7).words[i8] = carry << 26 - r9 | word >>> r9;
        carry = word & mask;
      }
      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }
      if ((this || _global$7).length === 0) {
        (this || _global$7).words[0] = 0;
        (this || _global$7).length = 1;
      }
      return this._strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
      assert2((this || _global$7).negative === 0);
      return this.iushrn(bits, hint, extended);
    };
    BN.prototype.shln = function shln(bits) {
      return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
      return this.clone().iushln(bits);
    };
    BN.prototype.shrn = function shrn(bits) {
      return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
      return this.clone().iushrn(bits);
    };
    BN.prototype.testn = function testn(bit) {
      assert2(typeof bit === "number" && bit >= 0);
      var r9 = bit % 26;
      var s7 = (bit - r9) / 26;
      var q3 = 1 << r9;
      if ((this || _global$7).length <= s7)
        return false;
      var w4 = (this || _global$7).words[s7];
      return !!(w4 & q3);
    };
    BN.prototype.imaskn = function imaskn(bits) {
      assert2(typeof bits === "number" && bits >= 0);
      var r9 = bits % 26;
      var s7 = (bits - r9) / 26;
      assert2((this || _global$7).negative === 0, "imaskn works only with positive numbers");
      if ((this || _global$7).length <= s7) {
        return this || _global$7;
      }
      if (r9 !== 0) {
        s7++;
      }
      (this || _global$7).length = Math.min(s7, (this || _global$7).length);
      if (r9 !== 0) {
        var mask = 67108863 ^ 67108863 >>> r9 << r9;
        (this || _global$7).words[(this || _global$7).length - 1] &= mask;
      }
      return this._strip();
    };
    BN.prototype.maskn = function maskn(bits) {
      return this.clone().imaskn(bits);
    };
    BN.prototype.iaddn = function iaddn(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      if (num < 0)
        return this.isubn(-num);
      if ((this || _global$7).negative !== 0) {
        if ((this || _global$7).length === 1 && ((this || _global$7).words[0] | 0) <= num) {
          (this || _global$7).words[0] = num - ((this || _global$7).words[0] | 0);
          (this || _global$7).negative = 0;
          return this || _global$7;
        }
        (this || _global$7).negative = 0;
        this.isubn(num);
        (this || _global$7).negative = 1;
        return this || _global$7;
      }
      return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
      (this || _global$7).words[0] += num;
      for (var i8 = 0; i8 < (this || _global$7).length && (this || _global$7).words[i8] >= 67108864; i8++) {
        (this || _global$7).words[i8] -= 67108864;
        if (i8 === (this || _global$7).length - 1) {
          (this || _global$7).words[i8 + 1] = 1;
        } else {
          (this || _global$7).words[i8 + 1]++;
        }
      }
      (this || _global$7).length = Math.max((this || _global$7).length, i8 + 1);
      return this || _global$7;
    };
    BN.prototype.isubn = function isubn(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      if (num < 0)
        return this.iaddn(-num);
      if ((this || _global$7).negative !== 0) {
        (this || _global$7).negative = 0;
        this.iaddn(num);
        (this || _global$7).negative = 1;
        return this || _global$7;
      }
      (this || _global$7).words[0] -= num;
      if ((this || _global$7).length === 1 && (this || _global$7).words[0] < 0) {
        (this || _global$7).words[0] = -(this || _global$7).words[0];
        (this || _global$7).negative = 1;
      } else {
        for (var i8 = 0; i8 < (this || _global$7).length && (this || _global$7).words[i8] < 0; i8++) {
          (this || _global$7).words[i8] += 67108864;
          (this || _global$7).words[i8 + 1] -= 1;
        }
      }
      return this._strip();
    };
    BN.prototype.addn = function addn(num) {
      return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
      return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
      (this || _global$7).negative = 0;
      return this || _global$7;
    };
    BN.prototype.abs = function abs() {
      return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
      var len = num.length + shift;
      var i8;
      this._expand(len);
      var w4;
      var carry = 0;
      for (i8 = 0; i8 < num.length; i8++) {
        w4 = ((this || _global$7).words[i8 + shift] | 0) + carry;
        var right = (num.words[i8] | 0) * mul;
        w4 -= right & 67108863;
        carry = (w4 >> 26) - (right / 67108864 | 0);
        (this || _global$7).words[i8 + shift] = w4 & 67108863;
      }
      for (; i8 < (this || _global$7).length - shift; i8++) {
        w4 = ((this || _global$7).words[i8 + shift] | 0) + carry;
        carry = w4 >> 26;
        (this || _global$7).words[i8 + shift] = w4 & 67108863;
      }
      if (carry === 0)
        return this._strip();
      assert2(carry === -1);
      carry = 0;
      for (i8 = 0; i8 < (this || _global$7).length; i8++) {
        w4 = -((this || _global$7).words[i8] | 0) + carry;
        carry = w4 >> 26;
        (this || _global$7).words[i8] = w4 & 67108863;
      }
      (this || _global$7).negative = 1;
      return this._strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
      var shift = (this || _global$7).length - num.length;
      var a8 = this.clone();
      var b5 = num;
      var bhi = b5.words[b5.length - 1] | 0;
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b5 = b5.ushln(shift);
        a8.iushln(shift);
        bhi = b5.words[b5.length - 1] | 0;
      }
      var m6 = a8.length - b5.length;
      var q3;
      if (mode !== "mod") {
        q3 = new BN(null);
        q3.length = m6 + 1;
        q3.words = new Array(q3.length);
        for (var i8 = 0; i8 < q3.length; i8++) {
          q3.words[i8] = 0;
        }
      }
      var diff = a8.clone()._ishlnsubmul(b5, 1, m6);
      if (diff.negative === 0) {
        a8 = diff;
        if (q3) {
          q3.words[m6] = 1;
        }
      }
      for (var j4 = m6 - 1; j4 >= 0; j4--) {
        var qj = (a8.words[b5.length + j4] | 0) * 67108864 + (a8.words[b5.length + j4 - 1] | 0);
        qj = Math.min(qj / bhi | 0, 67108863);
        a8._ishlnsubmul(b5, qj, j4);
        while (a8.negative !== 0) {
          qj--;
          a8.negative = 0;
          a8._ishlnsubmul(b5, 1, j4);
          if (!a8.isZero()) {
            a8.negative ^= 1;
          }
        }
        if (q3) {
          q3.words[j4] = qj;
        }
      }
      if (q3) {
        q3._strip();
      }
      a8._strip();
      if (mode !== "div" && shift !== 0) {
        a8.iushrn(shift);
      }
      return {
        div: q3 || null,
        mod: a8
      };
    };
    BN.prototype.divmod = function divmod(num, mode, positive) {
      assert2(!num.isZero());
      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }
      var div, mod, res;
      if ((this || _global$7).negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);
        if (mode !== "mod") {
          div = res.div.neg();
        }
        if (mode !== "div") {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }
        return {
          div,
          mod
        };
      }
      if ((this || _global$7).negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);
        if (mode !== "mod") {
          div = res.div.neg();
        }
        return {
          div,
          mod: res.mod
        };
      }
      if (((this || _global$7).negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);
        if (mode !== "div") {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }
        return {
          div: res.div,
          mod
        };
      }
      if (num.length > (this || _global$7).length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this || _global$7
        };
      }
      if (num.length === 1) {
        if (mode === "div") {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }
        if (mode === "mod") {
          return {
            div: null,
            mod: new BN(this.modrn(num.words[0]))
          };
        }
        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modrn(num.words[0]))
        };
      }
      return this._wordDiv(num, mode);
    };
    BN.prototype.div = function div(num) {
      return this.divmod(num, "div", false).div;
    };
    BN.prototype.mod = function mod(num) {
      return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
      return this.divmod(num, "mod", true).mod;
    };
    BN.prototype.divRound = function divRound(num) {
      var dm = this.divmod(num);
      if (dm.mod.isZero())
        return dm.div;
      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
      var half = num.ushrn(1);
      var r22 = num.andln(1);
      var cmp = mod.cmp(half);
      if (cmp < 0 || r22 === 1 && cmp === 0)
        return dm.div;
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modrn = function modrn(num) {
      var isNegNum = num < 0;
      if (isNegNum)
        num = -num;
      assert2(num <= 67108863);
      var p8 = (1 << 26) % num;
      var acc = 0;
      for (var i8 = (this || _global$7).length - 1; i8 >= 0; i8--) {
        acc = (p8 * acc + ((this || _global$7).words[i8] | 0)) % num;
      }
      return isNegNum ? -acc : acc;
    };
    BN.prototype.modn = function modn(num) {
      return this.modrn(num);
    };
    BN.prototype.idivn = function idivn(num) {
      var isNegNum = num < 0;
      if (isNegNum)
        num = -num;
      assert2(num <= 67108863);
      var carry = 0;
      for (var i8 = (this || _global$7).length - 1; i8 >= 0; i8--) {
        var w4 = ((this || _global$7).words[i8] | 0) + carry * 67108864;
        (this || _global$7).words[i8] = w4 / num | 0;
        carry = w4 % num;
      }
      this._strip();
      return isNegNum ? this.ineg() : this || _global$7;
    };
    BN.prototype.divn = function divn(num) {
      return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p8) {
      assert2(p8.negative === 0);
      assert2(!p8.isZero());
      var x4 = this || _global$7;
      var y6 = p8.clone();
      if (x4.negative !== 0) {
        x4 = x4.umod(p8);
      } else {
        x4 = x4.clone();
      }
      var A4 = new BN(1);
      var B4 = new BN(0);
      var C4 = new BN(0);
      var D4 = new BN(1);
      var g5 = 0;
      while (x4.isEven() && y6.isEven()) {
        x4.iushrn(1);
        y6.iushrn(1);
        ++g5;
      }
      var yp = y6.clone();
      var xp = x4.clone();
      while (!x4.isZero()) {
        for (var i8 = 0, im = 1; (x4.words[0] & im) === 0 && i8 < 26; ++i8, im <<= 1)
          ;
        if (i8 > 0) {
          x4.iushrn(i8);
          while (i8-- > 0) {
            if (A4.isOdd() || B4.isOdd()) {
              A4.iadd(yp);
              B4.isub(xp);
            }
            A4.iushrn(1);
            B4.iushrn(1);
          }
        }
        for (var j4 = 0, jm = 1; (y6.words[0] & jm) === 0 && j4 < 26; ++j4, jm <<= 1)
          ;
        if (j4 > 0) {
          y6.iushrn(j4);
          while (j4-- > 0) {
            if (C4.isOdd() || D4.isOdd()) {
              C4.iadd(yp);
              D4.isub(xp);
            }
            C4.iushrn(1);
            D4.iushrn(1);
          }
        }
        if (x4.cmp(y6) >= 0) {
          x4.isub(y6);
          A4.isub(C4);
          B4.isub(D4);
        } else {
          y6.isub(x4);
          C4.isub(A4);
          D4.isub(B4);
        }
      }
      return {
        a: C4,
        b: D4,
        gcd: y6.iushln(g5)
      };
    };
    BN.prototype._invmp = function _invmp(p8) {
      assert2(p8.negative === 0);
      assert2(!p8.isZero());
      var a8 = this || _global$7;
      var b5 = p8.clone();
      if (a8.negative !== 0) {
        a8 = a8.umod(p8);
      } else {
        a8 = a8.clone();
      }
      var x1 = new BN(1);
      var x22 = new BN(0);
      var delta = b5.clone();
      while (a8.cmpn(1) > 0 && b5.cmpn(1) > 0) {
        for (var i8 = 0, im = 1; (a8.words[0] & im) === 0 && i8 < 26; ++i8, im <<= 1)
          ;
        if (i8 > 0) {
          a8.iushrn(i8);
          while (i8-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }
            x1.iushrn(1);
          }
        }
        for (var j4 = 0, jm = 1; (b5.words[0] & jm) === 0 && j4 < 26; ++j4, jm <<= 1)
          ;
        if (j4 > 0) {
          b5.iushrn(j4);
          while (j4-- > 0) {
            if (x22.isOdd()) {
              x22.iadd(delta);
            }
            x22.iushrn(1);
          }
        }
        if (a8.cmp(b5) >= 0) {
          a8.isub(b5);
          x1.isub(x22);
        } else {
          b5.isub(a8);
          x22.isub(x1);
        }
      }
      var res;
      if (a8.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x22;
      }
      if (res.cmpn(0) < 0) {
        res.iadd(p8);
      }
      return res;
    };
    BN.prototype.gcd = function gcd(num) {
      if (this.isZero())
        return num.abs();
      if (num.isZero())
        return this.abs();
      var a8 = this.clone();
      var b5 = num.clone();
      a8.negative = 0;
      b5.negative = 0;
      for (var shift = 0; a8.isEven() && b5.isEven(); shift++) {
        a8.iushrn(1);
        b5.iushrn(1);
      }
      do {
        while (a8.isEven()) {
          a8.iushrn(1);
        }
        while (b5.isEven()) {
          b5.iushrn(1);
        }
        var r9 = a8.cmp(b5);
        if (r9 < 0) {
          var t8 = a8;
          a8 = b5;
          b5 = t8;
        } else if (r9 === 0 || b5.cmpn(1) === 0) {
          break;
        }
        a8.isub(b5);
      } while (true);
      return b5.iushln(shift);
    };
    BN.prototype.invm = function invm(num) {
      return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
      return ((this || _global$7).words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
      return ((this || _global$7).words[0] & 1) === 1;
    };
    BN.prototype.andln = function andln(num) {
      return (this || _global$7).words[0] & num;
    };
    BN.prototype.bincn = function bincn(bit) {
      assert2(typeof bit === "number");
      var r9 = bit % 26;
      var s7 = (bit - r9) / 26;
      var q3 = 1 << r9;
      if ((this || _global$7).length <= s7) {
        this._expand(s7 + 1);
        (this || _global$7).words[s7] |= q3;
        return this || _global$7;
      }
      var carry = q3;
      for (var i8 = s7; carry !== 0 && i8 < (this || _global$7).length; i8++) {
        var w4 = (this || _global$7).words[i8] | 0;
        w4 += carry;
        carry = w4 >>> 26;
        w4 &= 67108863;
        (this || _global$7).words[i8] = w4;
      }
      if (carry !== 0) {
        (this || _global$7).words[i8] = carry;
        (this || _global$7).length++;
      }
      return this || _global$7;
    };
    BN.prototype.isZero = function isZero() {
      return (this || _global$7).length === 1 && (this || _global$7).words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
      var negative = num < 0;
      if ((this || _global$7).negative !== 0 && !negative)
        return -1;
      if ((this || _global$7).negative === 0 && negative)
        return 1;
      this._strip();
      var res;
      if ((this || _global$7).length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }
        assert2(num <= 67108863, "Number is too big");
        var w4 = (this || _global$7).words[0] | 0;
        res = w4 === num ? 0 : w4 < num ? -1 : 1;
      }
      if ((this || _global$7).negative !== 0)
        return -res | 0;
      return res;
    };
    BN.prototype.cmp = function cmp(num) {
      if ((this || _global$7).negative !== 0 && num.negative === 0)
        return -1;
      if ((this || _global$7).negative === 0 && num.negative !== 0)
        return 1;
      var res = this.ucmp(num);
      if ((this || _global$7).negative !== 0)
        return -res | 0;
      return res;
    };
    BN.prototype.ucmp = function ucmp(num) {
      if ((this || _global$7).length > num.length)
        return 1;
      if ((this || _global$7).length < num.length)
        return -1;
      var res = 0;
      for (var i8 = (this || _global$7).length - 1; i8 >= 0; i8--) {
        var a8 = (this || _global$7).words[i8] | 0;
        var b5 = num.words[i8] | 0;
        if (a8 === b5)
          continue;
        if (a8 < b5) {
          res = -1;
        } else if (a8 > b5) {
          res = 1;
        }
        break;
      }
      return res;
    };
    BN.prototype.gtn = function gtn(num) {
      return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
      return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
      return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
      return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
      return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
      return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
      return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
      return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
      return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
      return this.cmp(num) === 0;
    };
    BN.red = function red(num) {
      return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
      assert2(!(this || _global$7).red, "Already a number in reduction context");
      assert2((this || _global$7).negative === 0, "red works only with positives");
      return ctx.convertTo(this || _global$7)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
      assert2((this || _global$7).red, "fromRed works only with numbers in reduction context");
      return (this || _global$7).red.convertFrom(this || _global$7);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
      (this || _global$7).red = ctx;
      return this || _global$7;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
      assert2(!(this || _global$7).red, "Already a number in reduction context");
      return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
      assert2((this || _global$7).red, "redAdd works only with red numbers");
      return (this || _global$7).red.add(this || _global$7, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
      assert2((this || _global$7).red, "redIAdd works only with red numbers");
      return (this || _global$7).red.iadd(this || _global$7, num);
    };
    BN.prototype.redSub = function redSub(num) {
      assert2((this || _global$7).red, "redSub works only with red numbers");
      return (this || _global$7).red.sub(this || _global$7, num);
    };
    BN.prototype.redISub = function redISub(num) {
      assert2((this || _global$7).red, "redISub works only with red numbers");
      return (this || _global$7).red.isub(this || _global$7, num);
    };
    BN.prototype.redShl = function redShl(num) {
      assert2((this || _global$7).red, "redShl works only with red numbers");
      return (this || _global$7).red.shl(this || _global$7, num);
    };
    BN.prototype.redMul = function redMul(num) {
      assert2((this || _global$7).red, "redMul works only with red numbers");
      (this || _global$7).red._verify2(this || _global$7, num);
      return (this || _global$7).red.mul(this || _global$7, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
      assert2((this || _global$7).red, "redMul works only with red numbers");
      (this || _global$7).red._verify2(this || _global$7, num);
      return (this || _global$7).red.imul(this || _global$7, num);
    };
    BN.prototype.redSqr = function redSqr() {
      assert2((this || _global$7).red, "redSqr works only with red numbers");
      (this || _global$7).red._verify1(this || _global$7);
      return (this || _global$7).red.sqr(this || _global$7);
    };
    BN.prototype.redISqr = function redISqr() {
      assert2((this || _global$7).red, "redISqr works only with red numbers");
      (this || _global$7).red._verify1(this || _global$7);
      return (this || _global$7).red.isqr(this || _global$7);
    };
    BN.prototype.redSqrt = function redSqrt() {
      assert2((this || _global$7).red, "redSqrt works only with red numbers");
      (this || _global$7).red._verify1(this || _global$7);
      return (this || _global$7).red.sqrt(this || _global$7);
    };
    BN.prototype.redInvm = function redInvm() {
      assert2((this || _global$7).red, "redInvm works only with red numbers");
      (this || _global$7).red._verify1(this || _global$7);
      return (this || _global$7).red.invm(this || _global$7);
    };
    BN.prototype.redNeg = function redNeg() {
      assert2((this || _global$7).red, "redNeg works only with red numbers");
      (this || _global$7).red._verify1(this || _global$7);
      return (this || _global$7).red.neg(this || _global$7);
    };
    BN.prototype.redPow = function redPow(num) {
      assert2((this || _global$7).red && !num.red, "redPow(normalNum)");
      (this || _global$7).red._verify1(this || _global$7);
      return (this || _global$7).red.pow(this || _global$7, num);
    };
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };
    function MPrime(name2, p8) {
      (this || _global$7).name = name2;
      (this || _global$7).p = new BN(p8, 16);
      (this || _global$7).n = (this || _global$7).p.bitLength();
      (this || _global$7).k = new BN(1).iushln((this || _global$7).n).isub((this || _global$7).p);
      (this || _global$7).tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil((this || _global$7).n / 13));
      return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
      var r9 = num;
      var rlen;
      do {
        this.split(r9, (this || _global$7).tmp);
        r9 = this.imulK(r9);
        r9 = r9.iadd((this || _global$7).tmp);
        rlen = r9.bitLength();
      } while (rlen > (this || _global$7).n);
      var cmp = rlen < (this || _global$7).n ? -1 : r9.ucmp((this || _global$7).p);
      if (cmp === 0) {
        r9.words[0] = 0;
        r9.length = 1;
      } else if (cmp > 0) {
        r9.isub((this || _global$7).p);
      } else {
        if (r9.strip !== void 0) {
          r9.strip();
        } else {
          r9._strip();
        }
      }
      return r9;
    };
    MPrime.prototype.split = function split(input, out) {
      input.iushrn((this || _global$7).n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
      return num.imul((this || _global$7).k);
    };
    function K256() {
      MPrime.call(this || _global$7, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits4(K256, MPrime);
    K256.prototype.split = function split(input, output) {
      var mask = 4194303;
      var outLen = Math.min(input.length, 9);
      for (var i8 = 0; i8 < outLen; i8++) {
        output.words[i8] = input.words[i8];
      }
      output.length = outLen;
      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }
      var prev = input.words[9];
      output.words[output.length++] = prev & mask;
      for (i8 = 10; i8 < input.length; i8++) {
        var next = input.words[i8] | 0;
        input.words[i8 - 10] = (next & mask) << 4 | prev >>> 22;
        prev = next;
      }
      prev >>>= 22;
      input.words[i8 - 10] = prev;
      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };
    K256.prototype.imulK = function imulK(num) {
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;
      var lo = 0;
      for (var i8 = 0; i8 < num.length; i8++) {
        var w4 = num.words[i8] | 0;
        lo += w4 * 977;
        num.words[i8] = lo & 67108863;
        lo = w4 * 64 + (lo / 67108864 | 0);
      }
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }
      return num;
    };
    function P224() {
      MPrime.call(this || _global$7, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits4(P224, MPrime);
    function P192() {
      MPrime.call(this || _global$7, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits4(P192, MPrime);
    function P25519() {
      MPrime.call(this || _global$7, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits4(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
      var carry = 0;
      for (var i8 = 0; i8 < num.length; i8++) {
        var hi = (num.words[i8] | 0) * 19 + carry;
        var lo = hi & 67108863;
        hi >>>= 26;
        num.words[i8] = lo;
        carry = hi;
      }
      if (carry !== 0) {
        num.words[num.length++] = carry;
      }
      return num;
    };
    BN._prime = function prime(name2) {
      if (primes[name2])
        return primes[name2];
      var prime2;
      if (name2 === "k256") {
        prime2 = new K256();
      } else if (name2 === "p224") {
        prime2 = new P224();
      } else if (name2 === "p192") {
        prime2 = new P192();
      } else if (name2 === "p25519") {
        prime2 = new P25519();
      } else {
        throw new Error("Unknown prime " + name2);
      }
      primes[name2] = prime2;
      return prime2;
    };
    function Red(m6) {
      if (typeof m6 === "string") {
        var prime = BN._prime(m6);
        (this || _global$7).m = prime.p;
        (this || _global$7).prime = prime;
      } else {
        assert2(m6.gtn(1), "modulus must be greater than 1");
        (this || _global$7).m = m6;
        (this || _global$7).prime = null;
      }
    }
    Red.prototype._verify1 = function _verify1(a8) {
      assert2(a8.negative === 0, "red works only with positives");
      assert2(a8.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a8, b5) {
      assert2((a8.negative | b5.negative) === 0, "red works only with positives");
      assert2(a8.red && a8.red === b5.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a8) {
      if ((this || _global$7).prime)
        return (this || _global$7).prime.ireduce(a8)._forceRed(this || _global$7);
      move(a8, a8.umod((this || _global$7).m)._forceRed(this || _global$7));
      return a8;
    };
    Red.prototype.neg = function neg(a8) {
      if (a8.isZero()) {
        return a8.clone();
      }
      return (this || _global$7).m.sub(a8)._forceRed(this || _global$7);
    };
    Red.prototype.add = function add(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.add(b5);
      if (res.cmp((this || _global$7).m) >= 0) {
        res.isub((this || _global$7).m);
      }
      return res._forceRed(this || _global$7);
    };
    Red.prototype.iadd = function iadd(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.iadd(b5);
      if (res.cmp((this || _global$7).m) >= 0) {
        res.isub((this || _global$7).m);
      }
      return res;
    };
    Red.prototype.sub = function sub(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.sub(b5);
      if (res.cmpn(0) < 0) {
        res.iadd((this || _global$7).m);
      }
      return res._forceRed(this || _global$7);
    };
    Red.prototype.isub = function isub(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.isub(b5);
      if (res.cmpn(0) < 0) {
        res.iadd((this || _global$7).m);
      }
      return res;
    };
    Red.prototype.shl = function shl(a8, num) {
      this._verify1(a8);
      return this.imod(a8.ushln(num));
    };
    Red.prototype.imul = function imul(a8, b5) {
      this._verify2(a8, b5);
      return this.imod(a8.imul(b5));
    };
    Red.prototype.mul = function mul(a8, b5) {
      this._verify2(a8, b5);
      return this.imod(a8.mul(b5));
    };
    Red.prototype.isqr = function isqr(a8) {
      return this.imul(a8, a8.clone());
    };
    Red.prototype.sqr = function sqr(a8) {
      return this.mul(a8, a8);
    };
    Red.prototype.sqrt = function sqrt(a8) {
      if (a8.isZero())
        return a8.clone();
      var mod3 = (this || _global$7).m.andln(3);
      assert2(mod3 % 2 === 1);
      if (mod3 === 3) {
        var pow = (this || _global$7).m.add(new BN(1)).iushrn(2);
        return this.pow(a8, pow);
      }
      var q3 = (this || _global$7).m.subn(1);
      var s7 = 0;
      while (!q3.isZero() && q3.andln(1) === 0) {
        s7++;
        q3.iushrn(1);
      }
      assert2(!q3.isZero());
      var one = new BN(1).toRed(this || _global$7);
      var nOne = one.redNeg();
      var lpow = (this || _global$7).m.subn(1).iushrn(1);
      var z5 = (this || _global$7).m.bitLength();
      z5 = new BN(2 * z5 * z5).toRed(this || _global$7);
      while (this.pow(z5, lpow).cmp(nOne) !== 0) {
        z5.redIAdd(nOne);
      }
      var c8 = this.pow(z5, q3);
      var r9 = this.pow(a8, q3.addn(1).iushrn(1));
      var t8 = this.pow(a8, q3);
      var m6 = s7;
      while (t8.cmp(one) !== 0) {
        var tmp = t8;
        for (var i8 = 0; tmp.cmp(one) !== 0; i8++) {
          tmp = tmp.redSqr();
        }
        assert2(i8 < m6);
        var b5 = this.pow(c8, new BN(1).iushln(m6 - i8 - 1));
        r9 = r9.redMul(b5);
        c8 = b5.redSqr();
        t8 = t8.redMul(c8);
        m6 = i8;
      }
      return r9;
    };
    Red.prototype.invm = function invm(a8) {
      var inv = a8._invmp((this || _global$7).m);
      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };
    Red.prototype.pow = function pow(a8, num) {
      if (num.isZero())
        return new BN(1).toRed(this || _global$7);
      if (num.cmpn(1) === 0)
        return a8.clone();
      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN(1).toRed(this || _global$7);
      wnd[1] = a8;
      for (var i8 = 2; i8 < wnd.length; i8++) {
        wnd[i8] = this.mul(wnd[i8 - 1], a8);
      }
      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;
      if (start === 0) {
        start = 26;
      }
      for (i8 = num.length - 1; i8 >= 0; i8--) {
        var word = num.words[i8];
        for (var j4 = start - 1; j4 >= 0; j4--) {
          var bit = word >> j4 & 1;
          if (res !== wnd[0]) {
            res = this.sqr(res);
          }
          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }
          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i8 !== 0 || j4 !== 0))
            continue;
          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }
        start = 26;
      }
      return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
      var r9 = num.umod((this || _global$7).m);
      return r9 === num ? r9.clone() : r9;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
      var res = num.clone();
      res.red = null;
      return res;
    };
    BN.mont = function mont(num) {
      return new Mont(num);
    };
    function Mont(m6) {
      Red.call(this || _global$7, m6);
      (this || _global$7).shift = (this || _global$7).m.bitLength();
      if ((this || _global$7).shift % 26 !== 0) {
        (this || _global$7).shift += 26 - (this || _global$7).shift % 26;
      }
      (this || _global$7).r = new BN(1).iushln((this || _global$7).shift);
      (this || _global$7).r2 = this.imod((this || _global$7).r.sqr());
      (this || _global$7).rinv = (this || _global$7).r._invmp((this || _global$7).m);
      (this || _global$7).minv = (this || _global$7).rinv.mul((this || _global$7).r).isubn(1).div((this || _global$7).m);
      (this || _global$7).minv = (this || _global$7).minv.umod((this || _global$7).r);
      (this || _global$7).minv = (this || _global$7).r.sub((this || _global$7).minv);
    }
    inherits4(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
      return this.imod(num.ushln((this || _global$7).shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
      var r9 = this.imod(num.mul((this || _global$7).rinv));
      r9.red = null;
      return r9;
    };
    Mont.prototype.imul = function imul(a8, b5) {
      if (a8.isZero() || b5.isZero()) {
        a8.words[0] = 0;
        a8.length = 1;
        return a8;
      }
      var t8 = a8.imul(b5);
      var c8 = t8.maskn((this || _global$7).shift).mul((this || _global$7).minv).imaskn((this || _global$7).shift).mul((this || _global$7).m);
      var u8 = t8.isub(c8).iushrn((this || _global$7).shift);
      var res = u8;
      if (u8.cmp((this || _global$7).m) >= 0) {
        res = u8.isub((this || _global$7).m);
      } else if (u8.cmpn(0) < 0) {
        res = u8.iadd((this || _global$7).m);
      }
      return res._forceRed(this || _global$7);
    };
    Mont.prototype.mul = function mul(a8, b5) {
      if (a8.isZero() || b5.isZero())
        return new BN(0)._forceRed(this || _global$7);
      var t8 = a8.mul(b5);
      var c8 = t8.maskn((this || _global$7).shift).mul((this || _global$7).minv).imaskn((this || _global$7).shift).mul((this || _global$7).m);
      var u8 = t8.isub(c8).iushrn((this || _global$7).shift);
      var res = u8;
      if (u8.cmp((this || _global$7).m) >= 0) {
        res = u8.isub((this || _global$7).m);
      } else if (u8.cmpn(0) < 0) {
        res = u8.iadd((this || _global$7).m);
      }
      return res._forceRed(this || _global$7);
    };
    Mont.prototype.invm = function invm(a8) {
      var res = this.imod(a8._invmp((this || _global$7).m).mul((this || _global$7).r2));
      return res._forceRed(this || _global$7);
    };
  })(module$4, exports$Y);
  return module$4.exports;
}
function dew$W() {
  if (_dewExec$W)
    return exports$X;
  _dewExec$W = true;
  var Buffer3 = buffer.Buffer;
  var BN = dew$X();
  var randomBytes2 = dew$2O();
  function blind(priv) {
    var r9 = getr(priv);
    var blinder = r9.toRed(BN.mont(priv.modulus)).redPow(new BN(priv.publicExponent)).fromRed();
    return {
      blinder,
      unblinder: r9.invm(priv.modulus)
    };
  }
  function getr(priv) {
    var len = priv.modulus.byteLength();
    var r9;
    do {
      r9 = new BN(randomBytes2(len));
    } while (r9.cmp(priv.modulus) >= 0 || !r9.umod(priv.prime1) || !r9.umod(priv.prime2));
    return r9;
  }
  function crt(msg, priv) {
    var blinds = blind(priv);
    var len = priv.modulus.byteLength();
    var blinded = new BN(msg).mul(blinds.blinder).umod(priv.modulus);
    var c1 = blinded.toRed(BN.mont(priv.prime1));
    var c22 = blinded.toRed(BN.mont(priv.prime2));
    var qinv = priv.coefficient;
    var p8 = priv.prime1;
    var q3 = priv.prime2;
    var m1 = c1.redPow(priv.exponent1).fromRed();
    var m22 = c22.redPow(priv.exponent2).fromRed();
    var h8 = m1.isub(m22).imul(qinv).umod(p8).imul(q3);
    return m22.iadd(h8).imul(blinds.unblinder).umod(priv.modulus).toArrayLike(Buffer3, "be", len);
  }
  crt.getr = getr;
  exports$X = crt;
  return exports$X;
}
function dew$V() {
  if (_dewExec$V)
    return module$3.exports;
  _dewExec$V = true;
  (function(module3, exports11) {
    function assert2(val, msg) {
      if (!val)
        throw new Error(msg || "Assertion failed");
    }
    function inherits4(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function() {
      };
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }
    function BN(number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }
      (this || _global$6).negative = 0;
      (this || _global$6).words = null;
      (this || _global$6).length = 0;
      (this || _global$6).red = null;
      if (number !== null) {
        if (base === "le" || base === "be") {
          endian = base;
          base = 10;
        }
        this._init(number || 0, base || 10, endian || "be");
      }
    }
    if (typeof module3 === "object") {
      module3.exports = BN;
    } else {
      exports11.BN = BN;
    }
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer3;
    try {
      if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
        Buffer3 = window.Buffer;
      } else {
        Buffer3 = buffer.Buffer;
      }
    } catch (e11) {
    }
    BN.isBN = function isBN(num) {
      if (num instanceof BN) {
        return true;
      }
      return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
      if (left.cmp(right) > 0)
        return left;
      return right;
    };
    BN.min = function min(left, right) {
      if (left.cmp(right) < 0)
        return left;
      return right;
    };
    BN.prototype._init = function init2(number, base, endian) {
      if (typeof number === "number") {
        return this._initNumber(number, base, endian);
      }
      if (typeof number === "object") {
        return this._initArray(number, base, endian);
      }
      if (base === "hex") {
        base = 16;
      }
      assert2(base === (base | 0) && base >= 2 && base <= 36);
      number = number.toString().replace(/\s+/g, "");
      var start = 0;
      if (number[0] === "-") {
        start++;
        (this || _global$6).negative = 1;
      }
      if (start < number.length) {
        if (base === 16) {
          this._parseHex(number, start, endian);
        } else {
          this._parseBase(number, base, start);
          if (endian === "le") {
            this._initArray(this.toArray(), base, endian);
          }
        }
      }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
      if (number < 0) {
        (this || _global$6).negative = 1;
        number = -number;
      }
      if (number < 67108864) {
        (this || _global$6).words = [number & 67108863];
        (this || _global$6).length = 1;
      } else if (number < 4503599627370496) {
        (this || _global$6).words = [number & 67108863, number / 67108864 & 67108863];
        (this || _global$6).length = 2;
      } else {
        assert2(number < 9007199254740992);
        (this || _global$6).words = [number & 67108863, number / 67108864 & 67108863, 1];
        (this || _global$6).length = 3;
      }
      if (endian !== "le")
        return;
      this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
      assert2(typeof number.length === "number");
      if (number.length <= 0) {
        (this || _global$6).words = [0];
        (this || _global$6).length = 1;
        return this || _global$6;
      }
      (this || _global$6).length = Math.ceil(number.length / 3);
      (this || _global$6).words = new Array((this || _global$6).length);
      for (var i8 = 0; i8 < (this || _global$6).length; i8++) {
        (this || _global$6).words[i8] = 0;
      }
      var j4, w4;
      var off2 = 0;
      if (endian === "be") {
        for (i8 = number.length - 1, j4 = 0; i8 >= 0; i8 -= 3) {
          w4 = number[i8] | number[i8 - 1] << 8 | number[i8 - 2] << 16;
          (this || _global$6).words[j4] |= w4 << off2 & 67108863;
          (this || _global$6).words[j4 + 1] = w4 >>> 26 - off2 & 67108863;
          off2 += 24;
          if (off2 >= 26) {
            off2 -= 26;
            j4++;
          }
        }
      } else if (endian === "le") {
        for (i8 = 0, j4 = 0; i8 < number.length; i8 += 3) {
          w4 = number[i8] | number[i8 + 1] << 8 | number[i8 + 2] << 16;
          (this || _global$6).words[j4] |= w4 << off2 & 67108863;
          (this || _global$6).words[j4 + 1] = w4 >>> 26 - off2 & 67108863;
          off2 += 24;
          if (off2 >= 26) {
            off2 -= 26;
            j4++;
          }
        }
      }
      return this.strip();
    };
    function parseHex4Bits(string, index) {
      var c8 = string.charCodeAt(index);
      if (c8 >= 65 && c8 <= 70) {
        return c8 - 55;
      } else if (c8 >= 97 && c8 <= 102) {
        return c8 - 87;
      } else {
        return c8 - 48 & 15;
      }
    }
    function parseHexByte(string, lowerBound, index) {
      var r9 = parseHex4Bits(string, index);
      if (index - 1 >= lowerBound) {
        r9 |= parseHex4Bits(string, index - 1) << 4;
      }
      return r9;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
      (this || _global$6).length = Math.ceil((number.length - start) / 6);
      (this || _global$6).words = new Array((this || _global$6).length);
      for (var i8 = 0; i8 < (this || _global$6).length; i8++) {
        (this || _global$6).words[i8] = 0;
      }
      var off2 = 0;
      var j4 = 0;
      var w4;
      if (endian === "be") {
        for (i8 = number.length - 1; i8 >= start; i8 -= 2) {
          w4 = parseHexByte(number, start, i8) << off2;
          (this || _global$6).words[j4] |= w4 & 67108863;
          if (off2 >= 18) {
            off2 -= 18;
            j4 += 1;
            (this || _global$6).words[j4] |= w4 >>> 26;
          } else {
            off2 += 8;
          }
        }
      } else {
        var parseLength = number.length - start;
        for (i8 = parseLength % 2 === 0 ? start + 1 : start; i8 < number.length; i8 += 2) {
          w4 = parseHexByte(number, start, i8) << off2;
          (this || _global$6).words[j4] |= w4 & 67108863;
          if (off2 >= 18) {
            off2 -= 18;
            j4 += 1;
            (this || _global$6).words[j4] |= w4 >>> 26;
          } else {
            off2 += 8;
          }
        }
      }
      this.strip();
    };
    function parseBase(str, start, end, mul) {
      var r9 = 0;
      var len = Math.min(str.length, end);
      for (var i8 = start; i8 < len; i8++) {
        var c8 = str.charCodeAt(i8) - 48;
        r9 *= mul;
        if (c8 >= 49) {
          r9 += c8 - 49 + 10;
        } else if (c8 >= 17) {
          r9 += c8 - 17 + 10;
        } else {
          r9 += c8;
        }
      }
      return r9;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
      (this || _global$6).words = [0];
      (this || _global$6).length = 1;
      for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
        limbLen++;
      }
      limbLen--;
      limbPow = limbPow / base | 0;
      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;
      var word = 0;
      for (var i8 = start; i8 < end; i8 += limbLen) {
        word = parseBase(number, i8, i8 + limbLen, base);
        this.imuln(limbPow);
        if ((this || _global$6).words[0] + word < 67108864) {
          (this || _global$6).words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i8, number.length, base);
        for (i8 = 0; i8 < mod; i8++) {
          pow *= base;
        }
        this.imuln(pow);
        if ((this || _global$6).words[0] + word < 67108864) {
          (this || _global$6).words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
      this.strip();
    };
    BN.prototype.copy = function copy(dest) {
      dest.words = new Array((this || _global$6).length);
      for (var i8 = 0; i8 < (this || _global$6).length; i8++) {
        dest.words[i8] = (this || _global$6).words[i8];
      }
      dest.length = (this || _global$6).length;
      dest.negative = (this || _global$6).negative;
      dest.red = (this || _global$6).red;
    };
    BN.prototype.clone = function clone() {
      var r9 = new BN(null);
      this.copy(r9);
      return r9;
    };
    BN.prototype._expand = function _expand(size) {
      while ((this || _global$6).length < size) {
        (this || _global$6).words[(this || _global$6).length++] = 0;
      }
      return this || _global$6;
    };
    BN.prototype.strip = function strip() {
      while ((this || _global$6).length > 1 && (this || _global$6).words[(this || _global$6).length - 1] === 0) {
        (this || _global$6).length--;
      }
      return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
      if ((this || _global$6).length === 1 && (this || _global$6).words[0] === 0) {
        (this || _global$6).negative = 0;
      }
      return this || _global$6;
    };
    BN.prototype.inspect = function inspect3() {
      return ((this || _global$6).red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    var zeros = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"];
    var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
    var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
    BN.prototype.toString = function toString3(base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;
      var out;
      if (base === 16 || base === "hex") {
        out = "";
        var off2 = 0;
        var carry = 0;
        for (var i8 = 0; i8 < (this || _global$6).length; i8++) {
          var w4 = (this || _global$6).words[i8];
          var word = ((w4 << off2 | carry) & 16777215).toString(16);
          carry = w4 >>> 24 - off2 & 16777215;
          if (carry !== 0 || i8 !== (this || _global$6).length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }
          off2 += 2;
          if (off2 >= 26) {
            off2 -= 26;
            i8--;
          }
        }
        if (carry !== 0) {
          out = carry.toString(16) + out;
        }
        while (out.length % padding !== 0) {
          out = "0" + out;
        }
        if ((this || _global$6).negative !== 0) {
          out = "-" + out;
        }
        return out;
      }
      if (base === (base | 0) && base >= 2 && base <= 36) {
        var groupSize = groupSizes[base];
        var groupBase = groupBases[base];
        out = "";
        var c8 = this.clone();
        c8.negative = 0;
        while (!c8.isZero()) {
          var r9 = c8.modn(groupBase).toString(base);
          c8 = c8.idivn(groupBase);
          if (!c8.isZero()) {
            out = zeros[groupSize - r9.length] + r9 + out;
          } else {
            out = r9 + out;
          }
        }
        if (this.isZero()) {
          out = "0" + out;
        }
        while (out.length % padding !== 0) {
          out = "0" + out;
        }
        if ((this || _global$6).negative !== 0) {
          out = "-" + out;
        }
        return out;
      }
      assert2(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
      var ret = (this || _global$6).words[0];
      if ((this || _global$6).length === 2) {
        ret += (this || _global$6).words[1] * 67108864;
      } else if ((this || _global$6).length === 3 && (this || _global$6).words[2] === 1) {
        ret += 4503599627370496 + (this || _global$6).words[1] * 67108864;
      } else if ((this || _global$6).length > 2) {
        assert2(false, "Number can only safely store up to 53 bits");
      }
      return (this || _global$6).negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON2() {
      return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
      assert2(typeof Buffer3 !== "undefined");
      return this.toArrayLike(Buffer3, endian, length);
    };
    BN.prototype.toArray = function toArray2(endian, length) {
      return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert2(byteLength <= reqLength, "byte array longer than desired length");
      assert2(reqLength > 0, "Requested array length <= 0");
      this.strip();
      var littleEndian = endian === "le";
      var res = new ArrayType(reqLength);
      var b5, i8;
      var q3 = this.clone();
      if (!littleEndian) {
        for (i8 = 0; i8 < reqLength - byteLength; i8++) {
          res[i8] = 0;
        }
        for (i8 = 0; !q3.isZero(); i8++) {
          b5 = q3.andln(255);
          q3.iushrn(8);
          res[reqLength - i8 - 1] = b5;
        }
      } else {
        for (i8 = 0; !q3.isZero(); i8++) {
          b5 = q3.andln(255);
          q3.iushrn(8);
          res[i8] = b5;
        }
        for (; i8 < reqLength; i8++) {
          res[i8] = 0;
        }
      }
      return res;
    };
    if (Math.clz32) {
      BN.prototype._countBits = function _countBits(w4) {
        return 32 - Math.clz32(w4);
      };
    } else {
      BN.prototype._countBits = function _countBits(w4) {
        var t8 = w4;
        var r9 = 0;
        if (t8 >= 4096) {
          r9 += 13;
          t8 >>>= 13;
        }
        if (t8 >= 64) {
          r9 += 7;
          t8 >>>= 7;
        }
        if (t8 >= 8) {
          r9 += 4;
          t8 >>>= 4;
        }
        if (t8 >= 2) {
          r9 += 2;
          t8 >>>= 2;
        }
        return r9 + t8;
      };
    }
    BN.prototype._zeroBits = function _zeroBits(w4) {
      if (w4 === 0)
        return 26;
      var t8 = w4;
      var r9 = 0;
      if ((t8 & 8191) === 0) {
        r9 += 13;
        t8 >>>= 13;
      }
      if ((t8 & 127) === 0) {
        r9 += 7;
        t8 >>>= 7;
      }
      if ((t8 & 15) === 0) {
        r9 += 4;
        t8 >>>= 4;
      }
      if ((t8 & 3) === 0) {
        r9 += 2;
        t8 >>>= 2;
      }
      if ((t8 & 1) === 0) {
        r9++;
      }
      return r9;
    };
    BN.prototype.bitLength = function bitLength() {
      var w4 = (this || _global$6).words[(this || _global$6).length - 1];
      var hi = this._countBits(w4);
      return ((this || _global$6).length - 1) * 26 + hi;
    };
    function toBitArray(num) {
      var w4 = new Array(num.bitLength());
      for (var bit = 0; bit < w4.length; bit++) {
        var off2 = bit / 26 | 0;
        var wbit = bit % 26;
        w4[bit] = (num.words[off2] & 1 << wbit) >>> wbit;
      }
      return w4;
    }
    BN.prototype.zeroBits = function zeroBits() {
      if (this.isZero())
        return 0;
      var r9 = 0;
      for (var i8 = 0; i8 < (this || _global$6).length; i8++) {
        var b5 = this._zeroBits((this || _global$6).words[i8]);
        r9 += b5;
        if (b5 !== 26)
          break;
      }
      return r9;
    };
    BN.prototype.byteLength = function byteLength() {
      return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
      if ((this || _global$6).negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }
      return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }
      return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
      return (this || _global$6).negative !== 0;
    };
    BN.prototype.neg = function neg() {
      return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
      if (!this.isZero()) {
        (this || _global$6).negative ^= 1;
      }
      return this || _global$6;
    };
    BN.prototype.iuor = function iuor(num) {
      while ((this || _global$6).length < num.length) {
        (this || _global$6).words[(this || _global$6).length++] = 0;
      }
      for (var i8 = 0; i8 < num.length; i8++) {
        (this || _global$6).words[i8] = (this || _global$6).words[i8] | num.words[i8];
      }
      return this.strip();
    };
    BN.prototype.ior = function ior(num) {
      assert2(((this || _global$6).negative | num.negative) === 0);
      return this.iuor(num);
    };
    BN.prototype.or = function or(num) {
      if ((this || _global$6).length > num.length)
        return this.clone().ior(num);
      return num.clone().ior(this || _global$6);
    };
    BN.prototype.uor = function uor(num) {
      if ((this || _global$6).length > num.length)
        return this.clone().iuor(num);
      return num.clone().iuor(this || _global$6);
    };
    BN.prototype.iuand = function iuand(num) {
      var b5;
      if ((this || _global$6).length > num.length) {
        b5 = num;
      } else {
        b5 = this || _global$6;
      }
      for (var i8 = 0; i8 < b5.length; i8++) {
        (this || _global$6).words[i8] = (this || _global$6).words[i8] & num.words[i8];
      }
      (this || _global$6).length = b5.length;
      return this.strip();
    };
    BN.prototype.iand = function iand(num) {
      assert2(((this || _global$6).negative | num.negative) === 0);
      return this.iuand(num);
    };
    BN.prototype.and = function and(num) {
      if ((this || _global$6).length > num.length)
        return this.clone().iand(num);
      return num.clone().iand(this || _global$6);
    };
    BN.prototype.uand = function uand(num) {
      if ((this || _global$6).length > num.length)
        return this.clone().iuand(num);
      return num.clone().iuand(this || _global$6);
    };
    BN.prototype.iuxor = function iuxor(num) {
      var a8;
      var b5;
      if ((this || _global$6).length > num.length) {
        a8 = this || _global$6;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$6;
      }
      for (var i8 = 0; i8 < b5.length; i8++) {
        (this || _global$6).words[i8] = a8.words[i8] ^ b5.words[i8];
      }
      if ((this || _global$6) !== a8) {
        for (; i8 < a8.length; i8++) {
          (this || _global$6).words[i8] = a8.words[i8];
        }
      }
      (this || _global$6).length = a8.length;
      return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
      assert2(((this || _global$6).negative | num.negative) === 0);
      return this.iuxor(num);
    };
    BN.prototype.xor = function xor(num) {
      if ((this || _global$6).length > num.length)
        return this.clone().ixor(num);
      return num.clone().ixor(this || _global$6);
    };
    BN.prototype.uxor = function uxor(num) {
      if ((this || _global$6).length > num.length)
        return this.clone().iuxor(num);
      return num.clone().iuxor(this || _global$6);
    };
    BN.prototype.inotn = function inotn(width) {
      assert2(typeof width === "number" && width >= 0);
      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;
      this._expand(bytesNeeded);
      if (bitsLeft > 0) {
        bytesNeeded--;
      }
      for (var i8 = 0; i8 < bytesNeeded; i8++) {
        (this || _global$6).words[i8] = ~(this || _global$6).words[i8] & 67108863;
      }
      if (bitsLeft > 0) {
        (this || _global$6).words[i8] = ~(this || _global$6).words[i8] & 67108863 >> 26 - bitsLeft;
      }
      return this.strip();
    };
    BN.prototype.notn = function notn(width) {
      return this.clone().inotn(width);
    };
    BN.prototype.setn = function setn(bit, val) {
      assert2(typeof bit === "number" && bit >= 0);
      var off2 = bit / 26 | 0;
      var wbit = bit % 26;
      this._expand(off2 + 1);
      if (val) {
        (this || _global$6).words[off2] = (this || _global$6).words[off2] | 1 << wbit;
      } else {
        (this || _global$6).words[off2] = (this || _global$6).words[off2] & ~(1 << wbit);
      }
      return this.strip();
    };
    BN.prototype.iadd = function iadd(num) {
      var r9;
      if ((this || _global$6).negative !== 0 && num.negative === 0) {
        (this || _global$6).negative = 0;
        r9 = this.isub(num);
        (this || _global$6).negative ^= 1;
        return this._normSign();
      } else if ((this || _global$6).negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r9 = this.isub(num);
        num.negative = 1;
        return r9._normSign();
      }
      var a8, b5;
      if ((this || _global$6).length > num.length) {
        a8 = this || _global$6;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$6;
      }
      var carry = 0;
      for (var i8 = 0; i8 < b5.length; i8++) {
        r9 = (a8.words[i8] | 0) + (b5.words[i8] | 0) + carry;
        (this || _global$6).words[i8] = r9 & 67108863;
        carry = r9 >>> 26;
      }
      for (; carry !== 0 && i8 < a8.length; i8++) {
        r9 = (a8.words[i8] | 0) + carry;
        (this || _global$6).words[i8] = r9 & 67108863;
        carry = r9 >>> 26;
      }
      (this || _global$6).length = a8.length;
      if (carry !== 0) {
        (this || _global$6).words[(this || _global$6).length] = carry;
        (this || _global$6).length++;
      } else if (a8 !== (this || _global$6)) {
        for (; i8 < a8.length; i8++) {
          (this || _global$6).words[i8] = a8.words[i8];
        }
      }
      return this || _global$6;
    };
    BN.prototype.add = function add(num) {
      var res;
      if (num.negative !== 0 && (this || _global$6).negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && (this || _global$6).negative !== 0) {
        (this || _global$6).negative = 0;
        res = num.sub(this || _global$6);
        (this || _global$6).negative = 1;
        return res;
      }
      if ((this || _global$6).length > num.length)
        return this.clone().iadd(num);
      return num.clone().iadd(this || _global$6);
    };
    BN.prototype.isub = function isub(num) {
      if (num.negative !== 0) {
        num.negative = 0;
        var r9 = this.iadd(num);
        num.negative = 1;
        return r9._normSign();
      } else if ((this || _global$6).negative !== 0) {
        (this || _global$6).negative = 0;
        this.iadd(num);
        (this || _global$6).negative = 1;
        return this._normSign();
      }
      var cmp = this.cmp(num);
      if (cmp === 0) {
        (this || _global$6).negative = 0;
        (this || _global$6).length = 1;
        (this || _global$6).words[0] = 0;
        return this || _global$6;
      }
      var a8, b5;
      if (cmp > 0) {
        a8 = this || _global$6;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$6;
      }
      var carry = 0;
      for (var i8 = 0; i8 < b5.length; i8++) {
        r9 = (a8.words[i8] | 0) - (b5.words[i8] | 0) + carry;
        carry = r9 >> 26;
        (this || _global$6).words[i8] = r9 & 67108863;
      }
      for (; carry !== 0 && i8 < a8.length; i8++) {
        r9 = (a8.words[i8] | 0) + carry;
        carry = r9 >> 26;
        (this || _global$6).words[i8] = r9 & 67108863;
      }
      if (carry === 0 && i8 < a8.length && a8 !== (this || _global$6)) {
        for (; i8 < a8.length; i8++) {
          (this || _global$6).words[i8] = a8.words[i8];
        }
      }
      (this || _global$6).length = Math.max((this || _global$6).length, i8);
      if (a8 !== (this || _global$6)) {
        (this || _global$6).negative = 1;
      }
      return this.strip();
    };
    BN.prototype.sub = function sub(num) {
      return this.clone().isub(num);
    };
    function smallMulTo(self2, num, out) {
      out.negative = num.negative ^ self2.negative;
      var len = self2.length + num.length | 0;
      out.length = len;
      len = len - 1 | 0;
      var a8 = self2.words[0] | 0;
      var b5 = num.words[0] | 0;
      var r9 = a8 * b5;
      var lo = r9 & 67108863;
      var carry = r9 / 67108864 | 0;
      out.words[0] = lo;
      for (var k4 = 1; k4 < len; k4++) {
        var ncarry = carry >>> 26;
        var rword = carry & 67108863;
        var maxJ = Math.min(k4, num.length - 1);
        for (var j4 = Math.max(0, k4 - self2.length + 1); j4 <= maxJ; j4++) {
          var i8 = k4 - j4 | 0;
          a8 = self2.words[i8] | 0;
          b5 = num.words[j4] | 0;
          r9 = a8 * b5 + rword;
          ncarry += r9 / 67108864 | 0;
          rword = r9 & 67108863;
        }
        out.words[k4] = rword | 0;
        carry = ncarry | 0;
      }
      if (carry !== 0) {
        out.words[k4] = carry | 0;
      } else {
        out.length--;
      }
      return out.strip();
    }
    var comb10MulTo = function comb10MulTo2(self2, num, out) {
      var a8 = self2.words;
      var b5 = num.words;
      var o9 = out.words;
      var c8 = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a8[0] | 0;
      var al0 = a0 & 8191;
      var ah0 = a0 >>> 13;
      var a1 = a8[1] | 0;
      var al1 = a1 & 8191;
      var ah1 = a1 >>> 13;
      var a22 = a8[2] | 0;
      var al2 = a22 & 8191;
      var ah2 = a22 >>> 13;
      var a32 = a8[3] | 0;
      var al3 = a32 & 8191;
      var ah3 = a32 >>> 13;
      var a42 = a8[4] | 0;
      var al4 = a42 & 8191;
      var ah4 = a42 >>> 13;
      var a52 = a8[5] | 0;
      var al5 = a52 & 8191;
      var ah5 = a52 >>> 13;
      var a62 = a8[6] | 0;
      var al6 = a62 & 8191;
      var ah6 = a62 >>> 13;
      var a72 = a8[7] | 0;
      var al7 = a72 & 8191;
      var ah7 = a72 >>> 13;
      var a82 = a8[8] | 0;
      var al8 = a82 & 8191;
      var ah8 = a82 >>> 13;
      var a9 = a8[9] | 0;
      var al9 = a9 & 8191;
      var ah9 = a9 >>> 13;
      var b0 = b5[0] | 0;
      var bl0 = b0 & 8191;
      var bh0 = b0 >>> 13;
      var b1 = b5[1] | 0;
      var bl1 = b1 & 8191;
      var bh1 = b1 >>> 13;
      var b22 = b5[2] | 0;
      var bl2 = b22 & 8191;
      var bh2 = b22 >>> 13;
      var b32 = b5[3] | 0;
      var bl3 = b32 & 8191;
      var bh3 = b32 >>> 13;
      var b42 = b5[4] | 0;
      var bl4 = b42 & 8191;
      var bh4 = b42 >>> 13;
      var b52 = b5[5] | 0;
      var bl5 = b52 & 8191;
      var bh5 = b52 >>> 13;
      var b6 = b5[6] | 0;
      var bl6 = b6 & 8191;
      var bh6 = b6 >>> 13;
      var b7 = b5[7] | 0;
      var bl7 = b7 & 8191;
      var bh7 = b7 >>> 13;
      var b8 = b5[8] | 0;
      var bl8 = b8 & 8191;
      var bh8 = b8 >>> 13;
      var b9 = b5[9] | 0;
      var bl9 = b9 & 8191;
      var bh9 = b9 >>> 13;
      out.negative = self2.negative ^ num.negative;
      out.length = 19;
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = mid + Math.imul(ah0, bl0) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
      w0 &= 67108863;
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = mid + Math.imul(ah1, bl0) | 0;
      hi = Math.imul(ah1, bh0);
      lo = lo + Math.imul(al0, bl1) | 0;
      mid = mid + Math.imul(al0, bh1) | 0;
      mid = mid + Math.imul(ah0, bl1) | 0;
      hi = hi + Math.imul(ah0, bh1) | 0;
      var w1 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
      w1 &= 67108863;
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = mid + Math.imul(ah2, bl0) | 0;
      hi = Math.imul(ah2, bh0);
      lo = lo + Math.imul(al1, bl1) | 0;
      mid = mid + Math.imul(al1, bh1) | 0;
      mid = mid + Math.imul(ah1, bl1) | 0;
      hi = hi + Math.imul(ah1, bh1) | 0;
      lo = lo + Math.imul(al0, bl2) | 0;
      mid = mid + Math.imul(al0, bh2) | 0;
      mid = mid + Math.imul(ah0, bl2) | 0;
      hi = hi + Math.imul(ah0, bh2) | 0;
      var w22 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w22 >>> 26) | 0;
      w22 &= 67108863;
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = mid + Math.imul(ah3, bl0) | 0;
      hi = Math.imul(ah3, bh0);
      lo = lo + Math.imul(al2, bl1) | 0;
      mid = mid + Math.imul(al2, bh1) | 0;
      mid = mid + Math.imul(ah2, bl1) | 0;
      hi = hi + Math.imul(ah2, bh1) | 0;
      lo = lo + Math.imul(al1, bl2) | 0;
      mid = mid + Math.imul(al1, bh2) | 0;
      mid = mid + Math.imul(ah1, bl2) | 0;
      hi = hi + Math.imul(ah1, bh2) | 0;
      lo = lo + Math.imul(al0, bl3) | 0;
      mid = mid + Math.imul(al0, bh3) | 0;
      mid = mid + Math.imul(ah0, bl3) | 0;
      hi = hi + Math.imul(ah0, bh3) | 0;
      var w32 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w32 >>> 26) | 0;
      w32 &= 67108863;
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = mid + Math.imul(ah4, bl0) | 0;
      hi = Math.imul(ah4, bh0);
      lo = lo + Math.imul(al3, bl1) | 0;
      mid = mid + Math.imul(al3, bh1) | 0;
      mid = mid + Math.imul(ah3, bl1) | 0;
      hi = hi + Math.imul(ah3, bh1) | 0;
      lo = lo + Math.imul(al2, bl2) | 0;
      mid = mid + Math.imul(al2, bh2) | 0;
      mid = mid + Math.imul(ah2, bl2) | 0;
      hi = hi + Math.imul(ah2, bh2) | 0;
      lo = lo + Math.imul(al1, bl3) | 0;
      mid = mid + Math.imul(al1, bh3) | 0;
      mid = mid + Math.imul(ah1, bl3) | 0;
      hi = hi + Math.imul(ah1, bh3) | 0;
      lo = lo + Math.imul(al0, bl4) | 0;
      mid = mid + Math.imul(al0, bh4) | 0;
      mid = mid + Math.imul(ah0, bl4) | 0;
      hi = hi + Math.imul(ah0, bh4) | 0;
      var w4 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
      w4 &= 67108863;
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = mid + Math.imul(ah5, bl0) | 0;
      hi = Math.imul(ah5, bh0);
      lo = lo + Math.imul(al4, bl1) | 0;
      mid = mid + Math.imul(al4, bh1) | 0;
      mid = mid + Math.imul(ah4, bl1) | 0;
      hi = hi + Math.imul(ah4, bh1) | 0;
      lo = lo + Math.imul(al3, bl2) | 0;
      mid = mid + Math.imul(al3, bh2) | 0;
      mid = mid + Math.imul(ah3, bl2) | 0;
      hi = hi + Math.imul(ah3, bh2) | 0;
      lo = lo + Math.imul(al2, bl3) | 0;
      mid = mid + Math.imul(al2, bh3) | 0;
      mid = mid + Math.imul(ah2, bl3) | 0;
      hi = hi + Math.imul(ah2, bh3) | 0;
      lo = lo + Math.imul(al1, bl4) | 0;
      mid = mid + Math.imul(al1, bh4) | 0;
      mid = mid + Math.imul(ah1, bl4) | 0;
      hi = hi + Math.imul(ah1, bh4) | 0;
      lo = lo + Math.imul(al0, bl5) | 0;
      mid = mid + Math.imul(al0, bh5) | 0;
      mid = mid + Math.imul(ah0, bl5) | 0;
      hi = hi + Math.imul(ah0, bh5) | 0;
      var w5 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
      w5 &= 67108863;
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = mid + Math.imul(ah6, bl0) | 0;
      hi = Math.imul(ah6, bh0);
      lo = lo + Math.imul(al5, bl1) | 0;
      mid = mid + Math.imul(al5, bh1) | 0;
      mid = mid + Math.imul(ah5, bl1) | 0;
      hi = hi + Math.imul(ah5, bh1) | 0;
      lo = lo + Math.imul(al4, bl2) | 0;
      mid = mid + Math.imul(al4, bh2) | 0;
      mid = mid + Math.imul(ah4, bl2) | 0;
      hi = hi + Math.imul(ah4, bh2) | 0;
      lo = lo + Math.imul(al3, bl3) | 0;
      mid = mid + Math.imul(al3, bh3) | 0;
      mid = mid + Math.imul(ah3, bl3) | 0;
      hi = hi + Math.imul(ah3, bh3) | 0;
      lo = lo + Math.imul(al2, bl4) | 0;
      mid = mid + Math.imul(al2, bh4) | 0;
      mid = mid + Math.imul(ah2, bl4) | 0;
      hi = hi + Math.imul(ah2, bh4) | 0;
      lo = lo + Math.imul(al1, bl5) | 0;
      mid = mid + Math.imul(al1, bh5) | 0;
      mid = mid + Math.imul(ah1, bl5) | 0;
      hi = hi + Math.imul(ah1, bh5) | 0;
      lo = lo + Math.imul(al0, bl6) | 0;
      mid = mid + Math.imul(al0, bh6) | 0;
      mid = mid + Math.imul(ah0, bl6) | 0;
      hi = hi + Math.imul(ah0, bh6) | 0;
      var w6 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
      w6 &= 67108863;
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = mid + Math.imul(ah7, bl0) | 0;
      hi = Math.imul(ah7, bh0);
      lo = lo + Math.imul(al6, bl1) | 0;
      mid = mid + Math.imul(al6, bh1) | 0;
      mid = mid + Math.imul(ah6, bl1) | 0;
      hi = hi + Math.imul(ah6, bh1) | 0;
      lo = lo + Math.imul(al5, bl2) | 0;
      mid = mid + Math.imul(al5, bh2) | 0;
      mid = mid + Math.imul(ah5, bl2) | 0;
      hi = hi + Math.imul(ah5, bh2) | 0;
      lo = lo + Math.imul(al4, bl3) | 0;
      mid = mid + Math.imul(al4, bh3) | 0;
      mid = mid + Math.imul(ah4, bl3) | 0;
      hi = hi + Math.imul(ah4, bh3) | 0;
      lo = lo + Math.imul(al3, bl4) | 0;
      mid = mid + Math.imul(al3, bh4) | 0;
      mid = mid + Math.imul(ah3, bl4) | 0;
      hi = hi + Math.imul(ah3, bh4) | 0;
      lo = lo + Math.imul(al2, bl5) | 0;
      mid = mid + Math.imul(al2, bh5) | 0;
      mid = mid + Math.imul(ah2, bl5) | 0;
      hi = hi + Math.imul(ah2, bh5) | 0;
      lo = lo + Math.imul(al1, bl6) | 0;
      mid = mid + Math.imul(al1, bh6) | 0;
      mid = mid + Math.imul(ah1, bl6) | 0;
      hi = hi + Math.imul(ah1, bh6) | 0;
      lo = lo + Math.imul(al0, bl7) | 0;
      mid = mid + Math.imul(al0, bh7) | 0;
      mid = mid + Math.imul(ah0, bl7) | 0;
      hi = hi + Math.imul(ah0, bh7) | 0;
      var w7 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
      w7 &= 67108863;
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = mid + Math.imul(ah8, bl0) | 0;
      hi = Math.imul(ah8, bh0);
      lo = lo + Math.imul(al7, bl1) | 0;
      mid = mid + Math.imul(al7, bh1) | 0;
      mid = mid + Math.imul(ah7, bl1) | 0;
      hi = hi + Math.imul(ah7, bh1) | 0;
      lo = lo + Math.imul(al6, bl2) | 0;
      mid = mid + Math.imul(al6, bh2) | 0;
      mid = mid + Math.imul(ah6, bl2) | 0;
      hi = hi + Math.imul(ah6, bh2) | 0;
      lo = lo + Math.imul(al5, bl3) | 0;
      mid = mid + Math.imul(al5, bh3) | 0;
      mid = mid + Math.imul(ah5, bl3) | 0;
      hi = hi + Math.imul(ah5, bh3) | 0;
      lo = lo + Math.imul(al4, bl4) | 0;
      mid = mid + Math.imul(al4, bh4) | 0;
      mid = mid + Math.imul(ah4, bl4) | 0;
      hi = hi + Math.imul(ah4, bh4) | 0;
      lo = lo + Math.imul(al3, bl5) | 0;
      mid = mid + Math.imul(al3, bh5) | 0;
      mid = mid + Math.imul(ah3, bl5) | 0;
      hi = hi + Math.imul(ah3, bh5) | 0;
      lo = lo + Math.imul(al2, bl6) | 0;
      mid = mid + Math.imul(al2, bh6) | 0;
      mid = mid + Math.imul(ah2, bl6) | 0;
      hi = hi + Math.imul(ah2, bh6) | 0;
      lo = lo + Math.imul(al1, bl7) | 0;
      mid = mid + Math.imul(al1, bh7) | 0;
      mid = mid + Math.imul(ah1, bl7) | 0;
      hi = hi + Math.imul(ah1, bh7) | 0;
      lo = lo + Math.imul(al0, bl8) | 0;
      mid = mid + Math.imul(al0, bh8) | 0;
      mid = mid + Math.imul(ah0, bl8) | 0;
      hi = hi + Math.imul(ah0, bh8) | 0;
      var w8 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
      w8 &= 67108863;
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = mid + Math.imul(ah9, bl0) | 0;
      hi = Math.imul(ah9, bh0);
      lo = lo + Math.imul(al8, bl1) | 0;
      mid = mid + Math.imul(al8, bh1) | 0;
      mid = mid + Math.imul(ah8, bl1) | 0;
      hi = hi + Math.imul(ah8, bh1) | 0;
      lo = lo + Math.imul(al7, bl2) | 0;
      mid = mid + Math.imul(al7, bh2) | 0;
      mid = mid + Math.imul(ah7, bl2) | 0;
      hi = hi + Math.imul(ah7, bh2) | 0;
      lo = lo + Math.imul(al6, bl3) | 0;
      mid = mid + Math.imul(al6, bh3) | 0;
      mid = mid + Math.imul(ah6, bl3) | 0;
      hi = hi + Math.imul(ah6, bh3) | 0;
      lo = lo + Math.imul(al5, bl4) | 0;
      mid = mid + Math.imul(al5, bh4) | 0;
      mid = mid + Math.imul(ah5, bl4) | 0;
      hi = hi + Math.imul(ah5, bh4) | 0;
      lo = lo + Math.imul(al4, bl5) | 0;
      mid = mid + Math.imul(al4, bh5) | 0;
      mid = mid + Math.imul(ah4, bl5) | 0;
      hi = hi + Math.imul(ah4, bh5) | 0;
      lo = lo + Math.imul(al3, bl6) | 0;
      mid = mid + Math.imul(al3, bh6) | 0;
      mid = mid + Math.imul(ah3, bl6) | 0;
      hi = hi + Math.imul(ah3, bh6) | 0;
      lo = lo + Math.imul(al2, bl7) | 0;
      mid = mid + Math.imul(al2, bh7) | 0;
      mid = mid + Math.imul(ah2, bl7) | 0;
      hi = hi + Math.imul(ah2, bh7) | 0;
      lo = lo + Math.imul(al1, bl8) | 0;
      mid = mid + Math.imul(al1, bh8) | 0;
      mid = mid + Math.imul(ah1, bl8) | 0;
      hi = hi + Math.imul(ah1, bh8) | 0;
      lo = lo + Math.imul(al0, bl9) | 0;
      mid = mid + Math.imul(al0, bh9) | 0;
      mid = mid + Math.imul(ah0, bl9) | 0;
      hi = hi + Math.imul(ah0, bh9) | 0;
      var w9 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
      w9 &= 67108863;
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = mid + Math.imul(ah9, bl1) | 0;
      hi = Math.imul(ah9, bh1);
      lo = lo + Math.imul(al8, bl2) | 0;
      mid = mid + Math.imul(al8, bh2) | 0;
      mid = mid + Math.imul(ah8, bl2) | 0;
      hi = hi + Math.imul(ah8, bh2) | 0;
      lo = lo + Math.imul(al7, bl3) | 0;
      mid = mid + Math.imul(al7, bh3) | 0;
      mid = mid + Math.imul(ah7, bl3) | 0;
      hi = hi + Math.imul(ah7, bh3) | 0;
      lo = lo + Math.imul(al6, bl4) | 0;
      mid = mid + Math.imul(al6, bh4) | 0;
      mid = mid + Math.imul(ah6, bl4) | 0;
      hi = hi + Math.imul(ah6, bh4) | 0;
      lo = lo + Math.imul(al5, bl5) | 0;
      mid = mid + Math.imul(al5, bh5) | 0;
      mid = mid + Math.imul(ah5, bl5) | 0;
      hi = hi + Math.imul(ah5, bh5) | 0;
      lo = lo + Math.imul(al4, bl6) | 0;
      mid = mid + Math.imul(al4, bh6) | 0;
      mid = mid + Math.imul(ah4, bl6) | 0;
      hi = hi + Math.imul(ah4, bh6) | 0;
      lo = lo + Math.imul(al3, bl7) | 0;
      mid = mid + Math.imul(al3, bh7) | 0;
      mid = mid + Math.imul(ah3, bl7) | 0;
      hi = hi + Math.imul(ah3, bh7) | 0;
      lo = lo + Math.imul(al2, bl8) | 0;
      mid = mid + Math.imul(al2, bh8) | 0;
      mid = mid + Math.imul(ah2, bl8) | 0;
      hi = hi + Math.imul(ah2, bh8) | 0;
      lo = lo + Math.imul(al1, bl9) | 0;
      mid = mid + Math.imul(al1, bh9) | 0;
      mid = mid + Math.imul(ah1, bl9) | 0;
      hi = hi + Math.imul(ah1, bh9) | 0;
      var w10 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
      w10 &= 67108863;
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = mid + Math.imul(ah9, bl2) | 0;
      hi = Math.imul(ah9, bh2);
      lo = lo + Math.imul(al8, bl3) | 0;
      mid = mid + Math.imul(al8, bh3) | 0;
      mid = mid + Math.imul(ah8, bl3) | 0;
      hi = hi + Math.imul(ah8, bh3) | 0;
      lo = lo + Math.imul(al7, bl4) | 0;
      mid = mid + Math.imul(al7, bh4) | 0;
      mid = mid + Math.imul(ah7, bl4) | 0;
      hi = hi + Math.imul(ah7, bh4) | 0;
      lo = lo + Math.imul(al6, bl5) | 0;
      mid = mid + Math.imul(al6, bh5) | 0;
      mid = mid + Math.imul(ah6, bl5) | 0;
      hi = hi + Math.imul(ah6, bh5) | 0;
      lo = lo + Math.imul(al5, bl6) | 0;
      mid = mid + Math.imul(al5, bh6) | 0;
      mid = mid + Math.imul(ah5, bl6) | 0;
      hi = hi + Math.imul(ah5, bh6) | 0;
      lo = lo + Math.imul(al4, bl7) | 0;
      mid = mid + Math.imul(al4, bh7) | 0;
      mid = mid + Math.imul(ah4, bl7) | 0;
      hi = hi + Math.imul(ah4, bh7) | 0;
      lo = lo + Math.imul(al3, bl8) | 0;
      mid = mid + Math.imul(al3, bh8) | 0;
      mid = mid + Math.imul(ah3, bl8) | 0;
      hi = hi + Math.imul(ah3, bh8) | 0;
      lo = lo + Math.imul(al2, bl9) | 0;
      mid = mid + Math.imul(al2, bh9) | 0;
      mid = mid + Math.imul(ah2, bl9) | 0;
      hi = hi + Math.imul(ah2, bh9) | 0;
      var w11 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
      w11 &= 67108863;
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = mid + Math.imul(ah9, bl3) | 0;
      hi = Math.imul(ah9, bh3);
      lo = lo + Math.imul(al8, bl4) | 0;
      mid = mid + Math.imul(al8, bh4) | 0;
      mid = mid + Math.imul(ah8, bl4) | 0;
      hi = hi + Math.imul(ah8, bh4) | 0;
      lo = lo + Math.imul(al7, bl5) | 0;
      mid = mid + Math.imul(al7, bh5) | 0;
      mid = mid + Math.imul(ah7, bl5) | 0;
      hi = hi + Math.imul(ah7, bh5) | 0;
      lo = lo + Math.imul(al6, bl6) | 0;
      mid = mid + Math.imul(al6, bh6) | 0;
      mid = mid + Math.imul(ah6, bl6) | 0;
      hi = hi + Math.imul(ah6, bh6) | 0;
      lo = lo + Math.imul(al5, bl7) | 0;
      mid = mid + Math.imul(al5, bh7) | 0;
      mid = mid + Math.imul(ah5, bl7) | 0;
      hi = hi + Math.imul(ah5, bh7) | 0;
      lo = lo + Math.imul(al4, bl8) | 0;
      mid = mid + Math.imul(al4, bh8) | 0;
      mid = mid + Math.imul(ah4, bl8) | 0;
      hi = hi + Math.imul(ah4, bh8) | 0;
      lo = lo + Math.imul(al3, bl9) | 0;
      mid = mid + Math.imul(al3, bh9) | 0;
      mid = mid + Math.imul(ah3, bl9) | 0;
      hi = hi + Math.imul(ah3, bh9) | 0;
      var w12 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
      w12 &= 67108863;
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = mid + Math.imul(ah9, bl4) | 0;
      hi = Math.imul(ah9, bh4);
      lo = lo + Math.imul(al8, bl5) | 0;
      mid = mid + Math.imul(al8, bh5) | 0;
      mid = mid + Math.imul(ah8, bl5) | 0;
      hi = hi + Math.imul(ah8, bh5) | 0;
      lo = lo + Math.imul(al7, bl6) | 0;
      mid = mid + Math.imul(al7, bh6) | 0;
      mid = mid + Math.imul(ah7, bl6) | 0;
      hi = hi + Math.imul(ah7, bh6) | 0;
      lo = lo + Math.imul(al6, bl7) | 0;
      mid = mid + Math.imul(al6, bh7) | 0;
      mid = mid + Math.imul(ah6, bl7) | 0;
      hi = hi + Math.imul(ah6, bh7) | 0;
      lo = lo + Math.imul(al5, bl8) | 0;
      mid = mid + Math.imul(al5, bh8) | 0;
      mid = mid + Math.imul(ah5, bl8) | 0;
      hi = hi + Math.imul(ah5, bh8) | 0;
      lo = lo + Math.imul(al4, bl9) | 0;
      mid = mid + Math.imul(al4, bh9) | 0;
      mid = mid + Math.imul(ah4, bl9) | 0;
      hi = hi + Math.imul(ah4, bh9) | 0;
      var w13 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
      w13 &= 67108863;
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = mid + Math.imul(ah9, bl5) | 0;
      hi = Math.imul(ah9, bh5);
      lo = lo + Math.imul(al8, bl6) | 0;
      mid = mid + Math.imul(al8, bh6) | 0;
      mid = mid + Math.imul(ah8, bl6) | 0;
      hi = hi + Math.imul(ah8, bh6) | 0;
      lo = lo + Math.imul(al7, bl7) | 0;
      mid = mid + Math.imul(al7, bh7) | 0;
      mid = mid + Math.imul(ah7, bl7) | 0;
      hi = hi + Math.imul(ah7, bh7) | 0;
      lo = lo + Math.imul(al6, bl8) | 0;
      mid = mid + Math.imul(al6, bh8) | 0;
      mid = mid + Math.imul(ah6, bl8) | 0;
      hi = hi + Math.imul(ah6, bh8) | 0;
      lo = lo + Math.imul(al5, bl9) | 0;
      mid = mid + Math.imul(al5, bh9) | 0;
      mid = mid + Math.imul(ah5, bl9) | 0;
      hi = hi + Math.imul(ah5, bh9) | 0;
      var w14 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
      w14 &= 67108863;
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = mid + Math.imul(ah9, bl6) | 0;
      hi = Math.imul(ah9, bh6);
      lo = lo + Math.imul(al8, bl7) | 0;
      mid = mid + Math.imul(al8, bh7) | 0;
      mid = mid + Math.imul(ah8, bl7) | 0;
      hi = hi + Math.imul(ah8, bh7) | 0;
      lo = lo + Math.imul(al7, bl8) | 0;
      mid = mid + Math.imul(al7, bh8) | 0;
      mid = mid + Math.imul(ah7, bl8) | 0;
      hi = hi + Math.imul(ah7, bh8) | 0;
      lo = lo + Math.imul(al6, bl9) | 0;
      mid = mid + Math.imul(al6, bh9) | 0;
      mid = mid + Math.imul(ah6, bl9) | 0;
      hi = hi + Math.imul(ah6, bh9) | 0;
      var w15 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
      w15 &= 67108863;
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = mid + Math.imul(ah9, bl7) | 0;
      hi = Math.imul(ah9, bh7);
      lo = lo + Math.imul(al8, bl8) | 0;
      mid = mid + Math.imul(al8, bh8) | 0;
      mid = mid + Math.imul(ah8, bl8) | 0;
      hi = hi + Math.imul(ah8, bh8) | 0;
      lo = lo + Math.imul(al7, bl9) | 0;
      mid = mid + Math.imul(al7, bh9) | 0;
      mid = mid + Math.imul(ah7, bl9) | 0;
      hi = hi + Math.imul(ah7, bh9) | 0;
      var w16 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
      w16 &= 67108863;
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = mid + Math.imul(ah9, bl8) | 0;
      hi = Math.imul(ah9, bh8);
      lo = lo + Math.imul(al8, bl9) | 0;
      mid = mid + Math.imul(al8, bh9) | 0;
      mid = mid + Math.imul(ah8, bl9) | 0;
      hi = hi + Math.imul(ah8, bh9) | 0;
      var w17 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
      w17 &= 67108863;
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = mid + Math.imul(ah9, bl9) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
      w18 &= 67108863;
      o9[0] = w0;
      o9[1] = w1;
      o9[2] = w22;
      o9[3] = w32;
      o9[4] = w4;
      o9[5] = w5;
      o9[6] = w6;
      o9[7] = w7;
      o9[8] = w8;
      o9[9] = w9;
      o9[10] = w10;
      o9[11] = w11;
      o9[12] = w12;
      o9[13] = w13;
      o9[14] = w14;
      o9[15] = w15;
      o9[16] = w16;
      o9[17] = w17;
      o9[18] = w18;
      if (c8 !== 0) {
        o9[19] = c8;
        out.length++;
      }
      return out;
    };
    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }
    function bigMulTo(self2, num, out) {
      out.negative = num.negative ^ self2.negative;
      out.length = self2.length + num.length;
      var carry = 0;
      var hncarry = 0;
      for (var k4 = 0; k4 < out.length - 1; k4++) {
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 67108863;
        var maxJ = Math.min(k4, num.length - 1);
        for (var j4 = Math.max(0, k4 - self2.length + 1); j4 <= maxJ; j4++) {
          var i8 = k4 - j4;
          var a8 = self2.words[i8] | 0;
          var b5 = num.words[j4] | 0;
          var r9 = a8 * b5;
          var lo = r9 & 67108863;
          ncarry = ncarry + (r9 / 67108864 | 0) | 0;
          lo = lo + rword | 0;
          rword = lo & 67108863;
          ncarry = ncarry + (lo >>> 26) | 0;
          hncarry += ncarry >>> 26;
          ncarry &= 67108863;
        }
        out.words[k4] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k4] = carry;
      } else {
        out.length--;
      }
      return out.strip();
    }
    function jumboMulTo(self2, num, out) {
      var fftm = new FFTM();
      return fftm.mulp(self2, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
      var res;
      var len = (this || _global$6).length + num.length;
      if ((this || _global$6).length === 10 && num.length === 10) {
        res = comb10MulTo(this || _global$6, num, out);
      } else if (len < 63) {
        res = smallMulTo(this || _global$6, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this || _global$6, num, out);
      } else {
        res = jumboMulTo(this || _global$6, num, out);
      }
      return res;
    };
    function FFTM(x4, y6) {
      (this || _global$6).x = x4;
      (this || _global$6).y = y6;
    }
    FFTM.prototype.makeRBT = function makeRBT(N4) {
      var t8 = new Array(N4);
      var l8 = BN.prototype._countBits(N4) - 1;
      for (var i8 = 0; i8 < N4; i8++) {
        t8[i8] = this.revBin(i8, l8, N4);
      }
      return t8;
    };
    FFTM.prototype.revBin = function revBin(x4, l8, N4) {
      if (x4 === 0 || x4 === N4 - 1)
        return x4;
      var rb = 0;
      for (var i8 = 0; i8 < l8; i8++) {
        rb |= (x4 & 1) << l8 - i8 - 1;
        x4 >>= 1;
      }
      return rb;
    };
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N4) {
      for (var i8 = 0; i8 < N4; i8++) {
        rtws[i8] = rws[rbt[i8]];
        itws[i8] = iws[rbt[i8]];
      }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N4, rbt) {
      this.permute(rbt, rws, iws, rtws, itws, N4);
      for (var s7 = 1; s7 < N4; s7 <<= 1) {
        var l8 = s7 << 1;
        var rtwdf = Math.cos(2 * Math.PI / l8);
        var itwdf = Math.sin(2 * Math.PI / l8);
        for (var p8 = 0; p8 < N4; p8 += l8) {
          var rtwdf_ = rtwdf;
          var itwdf_ = itwdf;
          for (var j4 = 0; j4 < s7; j4++) {
            var re3 = rtws[p8 + j4];
            var ie2 = itws[p8 + j4];
            var ro = rtws[p8 + j4 + s7];
            var io = itws[p8 + j4 + s7];
            var rx = rtwdf_ * ro - itwdf_ * io;
            io = rtwdf_ * io + itwdf_ * ro;
            ro = rx;
            rtws[p8 + j4] = re3 + ro;
            itws[p8 + j4] = ie2 + io;
            rtws[p8 + j4 + s7] = re3 - ro;
            itws[p8 + j4 + s7] = ie2 - io;
            if (j4 !== l8) {
              rx = rtwdf * rtwdf_ - itwdf * itwdf_;
              itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
              rtwdf_ = rx;
            }
          }
        }
      }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n9, m6) {
      var N4 = Math.max(m6, n9) | 1;
      var odd = N4 & 1;
      var i8 = 0;
      for (N4 = N4 / 2 | 0; N4; N4 = N4 >>> 1) {
        i8++;
      }
      return 1 << i8 + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N4) {
      if (N4 <= 1)
        return;
      for (var i8 = 0; i8 < N4 / 2; i8++) {
        var t8 = rws[i8];
        rws[i8] = rws[N4 - i8 - 1];
        rws[N4 - i8 - 1] = t8;
        t8 = iws[i8];
        iws[i8] = -iws[N4 - i8 - 1];
        iws[N4 - i8 - 1] = -t8;
      }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N4) {
      var carry = 0;
      for (var i8 = 0; i8 < N4 / 2; i8++) {
        var w4 = Math.round(ws[2 * i8 + 1] / N4) * 8192 + Math.round(ws[2 * i8] / N4) + carry;
        ws[i8] = w4 & 67108863;
        if (w4 < 67108864) {
          carry = 0;
        } else {
          carry = w4 / 67108864 | 0;
        }
      }
      return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N4) {
      var carry = 0;
      for (var i8 = 0; i8 < len; i8++) {
        carry = carry + (ws[i8] | 0);
        rws[2 * i8] = carry & 8191;
        carry = carry >>> 13;
        rws[2 * i8 + 1] = carry & 8191;
        carry = carry >>> 13;
      }
      for (i8 = 2 * len; i8 < N4; ++i8) {
        rws[i8] = 0;
      }
      assert2(carry === 0);
      assert2((carry & ~8191) === 0);
    };
    FFTM.prototype.stub = function stub(N4) {
      var ph = new Array(N4);
      for (var i8 = 0; i8 < N4; i8++) {
        ph[i8] = 0;
      }
      return ph;
    };
    FFTM.prototype.mulp = function mulp(x4, y6, out) {
      var N4 = 2 * this.guessLen13b(x4.length, y6.length);
      var rbt = this.makeRBT(N4);
      var _4 = this.stub(N4);
      var rws = new Array(N4);
      var rwst = new Array(N4);
      var iwst = new Array(N4);
      var nrws = new Array(N4);
      var nrwst = new Array(N4);
      var niwst = new Array(N4);
      var rmws = out.words;
      rmws.length = N4;
      this.convert13b(x4.words, x4.length, rws, N4);
      this.convert13b(y6.words, y6.length, nrws, N4);
      this.transform(rws, _4, rwst, iwst, N4, rbt);
      this.transform(nrws, _4, nrwst, niwst, N4, rbt);
      for (var i8 = 0; i8 < N4; i8++) {
        var rx = rwst[i8] * nrwst[i8] - iwst[i8] * niwst[i8];
        iwst[i8] = rwst[i8] * niwst[i8] + iwst[i8] * nrwst[i8];
        rwst[i8] = rx;
      }
      this.conjugate(rwst, iwst, N4);
      this.transform(rwst, iwst, rmws, _4, N4, rbt);
      this.conjugate(rmws, _4, N4);
      this.normalize13b(rmws, N4);
      out.negative = x4.negative ^ y6.negative;
      out.length = x4.length + y6.length;
      return out.strip();
    };
    BN.prototype.mul = function mul(num) {
      var out = new BN(null);
      out.words = new Array((this || _global$6).length + num.length);
      return this.mulTo(num, out);
    };
    BN.prototype.mulf = function mulf(num) {
      var out = new BN(null);
      out.words = new Array((this || _global$6).length + num.length);
      return jumboMulTo(this || _global$6, num, out);
    };
    BN.prototype.imul = function imul(num) {
      return this.clone().mulTo(num, this || _global$6);
    };
    BN.prototype.imuln = function imuln(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      var carry = 0;
      for (var i8 = 0; i8 < (this || _global$6).length; i8++) {
        var w4 = ((this || _global$6).words[i8] | 0) * num;
        var lo = (w4 & 67108863) + (carry & 67108863);
        carry >>= 26;
        carry += w4 / 67108864 | 0;
        carry += lo >>> 26;
        (this || _global$6).words[i8] = lo & 67108863;
      }
      if (carry !== 0) {
        (this || _global$6).words[i8] = carry;
        (this || _global$6).length++;
      }
      return this || _global$6;
    };
    BN.prototype.muln = function muln(num) {
      return this.clone().imuln(num);
    };
    BN.prototype.sqr = function sqr() {
      return this.mul(this || _global$6);
    };
    BN.prototype.isqr = function isqr() {
      return this.imul(this.clone());
    };
    BN.prototype.pow = function pow(num) {
      var w4 = toBitArray(num);
      if (w4.length === 0)
        return new BN(1);
      var res = this || _global$6;
      for (var i8 = 0; i8 < w4.length; i8++, res = res.sqr()) {
        if (w4[i8] !== 0)
          break;
      }
      if (++i8 < w4.length) {
        for (var q3 = res.sqr(); i8 < w4.length; i8++, q3 = q3.sqr()) {
          if (w4[i8] === 0)
            continue;
          res = res.mul(q3);
        }
      }
      return res;
    };
    BN.prototype.iushln = function iushln(bits) {
      assert2(typeof bits === "number" && bits >= 0);
      var r9 = bits % 26;
      var s7 = (bits - r9) / 26;
      var carryMask = 67108863 >>> 26 - r9 << 26 - r9;
      var i8;
      if (r9 !== 0) {
        var carry = 0;
        for (i8 = 0; i8 < (this || _global$6).length; i8++) {
          var newCarry = (this || _global$6).words[i8] & carryMask;
          var c8 = ((this || _global$6).words[i8] | 0) - newCarry << r9;
          (this || _global$6).words[i8] = c8 | carry;
          carry = newCarry >>> 26 - r9;
        }
        if (carry) {
          (this || _global$6).words[i8] = carry;
          (this || _global$6).length++;
        }
      }
      if (s7 !== 0) {
        for (i8 = (this || _global$6).length - 1; i8 >= 0; i8--) {
          (this || _global$6).words[i8 + s7] = (this || _global$6).words[i8];
        }
        for (i8 = 0; i8 < s7; i8++) {
          (this || _global$6).words[i8] = 0;
        }
        (this || _global$6).length += s7;
      }
      return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
      assert2((this || _global$6).negative === 0);
      return this.iushln(bits);
    };
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
      assert2(typeof bits === "number" && bits >= 0);
      var h8;
      if (hint) {
        h8 = (hint - hint % 26) / 26;
      } else {
        h8 = 0;
      }
      var r9 = bits % 26;
      var s7 = Math.min((bits - r9) / 26, (this || _global$6).length);
      var mask = 67108863 ^ 67108863 >>> r9 << r9;
      var maskedWords = extended;
      h8 -= s7;
      h8 = Math.max(0, h8);
      if (maskedWords) {
        for (var i8 = 0; i8 < s7; i8++) {
          maskedWords.words[i8] = (this || _global$6).words[i8];
        }
        maskedWords.length = s7;
      }
      if (s7 === 0)
        ;
      else if ((this || _global$6).length > s7) {
        (this || _global$6).length -= s7;
        for (i8 = 0; i8 < (this || _global$6).length; i8++) {
          (this || _global$6).words[i8] = (this || _global$6).words[i8 + s7];
        }
      } else {
        (this || _global$6).words[0] = 0;
        (this || _global$6).length = 1;
      }
      var carry = 0;
      for (i8 = (this || _global$6).length - 1; i8 >= 0 && (carry !== 0 || i8 >= h8); i8--) {
        var word = (this || _global$6).words[i8] | 0;
        (this || _global$6).words[i8] = carry << 26 - r9 | word >>> r9;
        carry = word & mask;
      }
      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }
      if ((this || _global$6).length === 0) {
        (this || _global$6).words[0] = 0;
        (this || _global$6).length = 1;
      }
      return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
      assert2((this || _global$6).negative === 0);
      return this.iushrn(bits, hint, extended);
    };
    BN.prototype.shln = function shln(bits) {
      return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
      return this.clone().iushln(bits);
    };
    BN.prototype.shrn = function shrn(bits) {
      return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
      return this.clone().iushrn(bits);
    };
    BN.prototype.testn = function testn(bit) {
      assert2(typeof bit === "number" && bit >= 0);
      var r9 = bit % 26;
      var s7 = (bit - r9) / 26;
      var q3 = 1 << r9;
      if ((this || _global$6).length <= s7)
        return false;
      var w4 = (this || _global$6).words[s7];
      return !!(w4 & q3);
    };
    BN.prototype.imaskn = function imaskn(bits) {
      assert2(typeof bits === "number" && bits >= 0);
      var r9 = bits % 26;
      var s7 = (bits - r9) / 26;
      assert2((this || _global$6).negative === 0, "imaskn works only with positive numbers");
      if ((this || _global$6).length <= s7) {
        return this || _global$6;
      }
      if (r9 !== 0) {
        s7++;
      }
      (this || _global$6).length = Math.min(s7, (this || _global$6).length);
      if (r9 !== 0) {
        var mask = 67108863 ^ 67108863 >>> r9 << r9;
        (this || _global$6).words[(this || _global$6).length - 1] &= mask;
      }
      return this.strip();
    };
    BN.prototype.maskn = function maskn(bits) {
      return this.clone().imaskn(bits);
    };
    BN.prototype.iaddn = function iaddn(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      if (num < 0)
        return this.isubn(-num);
      if ((this || _global$6).negative !== 0) {
        if ((this || _global$6).length === 1 && ((this || _global$6).words[0] | 0) < num) {
          (this || _global$6).words[0] = num - ((this || _global$6).words[0] | 0);
          (this || _global$6).negative = 0;
          return this || _global$6;
        }
        (this || _global$6).negative = 0;
        this.isubn(num);
        (this || _global$6).negative = 1;
        return this || _global$6;
      }
      return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
      (this || _global$6).words[0] += num;
      for (var i8 = 0; i8 < (this || _global$6).length && (this || _global$6).words[i8] >= 67108864; i8++) {
        (this || _global$6).words[i8] -= 67108864;
        if (i8 === (this || _global$6).length - 1) {
          (this || _global$6).words[i8 + 1] = 1;
        } else {
          (this || _global$6).words[i8 + 1]++;
        }
      }
      (this || _global$6).length = Math.max((this || _global$6).length, i8 + 1);
      return this || _global$6;
    };
    BN.prototype.isubn = function isubn(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      if (num < 0)
        return this.iaddn(-num);
      if ((this || _global$6).negative !== 0) {
        (this || _global$6).negative = 0;
        this.iaddn(num);
        (this || _global$6).negative = 1;
        return this || _global$6;
      }
      (this || _global$6).words[0] -= num;
      if ((this || _global$6).length === 1 && (this || _global$6).words[0] < 0) {
        (this || _global$6).words[0] = -(this || _global$6).words[0];
        (this || _global$6).negative = 1;
      } else {
        for (var i8 = 0; i8 < (this || _global$6).length && (this || _global$6).words[i8] < 0; i8++) {
          (this || _global$6).words[i8] += 67108864;
          (this || _global$6).words[i8 + 1] -= 1;
        }
      }
      return this.strip();
    };
    BN.prototype.addn = function addn(num) {
      return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
      return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
      (this || _global$6).negative = 0;
      return this || _global$6;
    };
    BN.prototype.abs = function abs() {
      return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
      var len = num.length + shift;
      var i8;
      this._expand(len);
      var w4;
      var carry = 0;
      for (i8 = 0; i8 < num.length; i8++) {
        w4 = ((this || _global$6).words[i8 + shift] | 0) + carry;
        var right = (num.words[i8] | 0) * mul;
        w4 -= right & 67108863;
        carry = (w4 >> 26) - (right / 67108864 | 0);
        (this || _global$6).words[i8 + shift] = w4 & 67108863;
      }
      for (; i8 < (this || _global$6).length - shift; i8++) {
        w4 = ((this || _global$6).words[i8 + shift] | 0) + carry;
        carry = w4 >> 26;
        (this || _global$6).words[i8 + shift] = w4 & 67108863;
      }
      if (carry === 0)
        return this.strip();
      assert2(carry === -1);
      carry = 0;
      for (i8 = 0; i8 < (this || _global$6).length; i8++) {
        w4 = -((this || _global$6).words[i8] | 0) + carry;
        carry = w4 >> 26;
        (this || _global$6).words[i8] = w4 & 67108863;
      }
      (this || _global$6).negative = 1;
      return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
      var shift = (this || _global$6).length - num.length;
      var a8 = this.clone();
      var b5 = num;
      var bhi = b5.words[b5.length - 1] | 0;
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b5 = b5.ushln(shift);
        a8.iushln(shift);
        bhi = b5.words[b5.length - 1] | 0;
      }
      var m6 = a8.length - b5.length;
      var q3;
      if (mode !== "mod") {
        q3 = new BN(null);
        q3.length = m6 + 1;
        q3.words = new Array(q3.length);
        for (var i8 = 0; i8 < q3.length; i8++) {
          q3.words[i8] = 0;
        }
      }
      var diff = a8.clone()._ishlnsubmul(b5, 1, m6);
      if (diff.negative === 0) {
        a8 = diff;
        if (q3) {
          q3.words[m6] = 1;
        }
      }
      for (var j4 = m6 - 1; j4 >= 0; j4--) {
        var qj = (a8.words[b5.length + j4] | 0) * 67108864 + (a8.words[b5.length + j4 - 1] | 0);
        qj = Math.min(qj / bhi | 0, 67108863);
        a8._ishlnsubmul(b5, qj, j4);
        while (a8.negative !== 0) {
          qj--;
          a8.negative = 0;
          a8._ishlnsubmul(b5, 1, j4);
          if (!a8.isZero()) {
            a8.negative ^= 1;
          }
        }
        if (q3) {
          q3.words[j4] = qj;
        }
      }
      if (q3) {
        q3.strip();
      }
      a8.strip();
      if (mode !== "div" && shift !== 0) {
        a8.iushrn(shift);
      }
      return {
        div: q3 || null,
        mod: a8
      };
    };
    BN.prototype.divmod = function divmod(num, mode, positive) {
      assert2(!num.isZero());
      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }
      var div, mod, res;
      if ((this || _global$6).negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);
        if (mode !== "mod") {
          div = res.div.neg();
        }
        if (mode !== "div") {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }
        return {
          div,
          mod
        };
      }
      if ((this || _global$6).negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);
        if (mode !== "mod") {
          div = res.div.neg();
        }
        return {
          div,
          mod: res.mod
        };
      }
      if (((this || _global$6).negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);
        if (mode !== "div") {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }
        return {
          div: res.div,
          mod
        };
      }
      if (num.length > (this || _global$6).length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this || _global$6
        };
      }
      if (num.length === 1) {
        if (mode === "div") {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }
        if (mode === "mod") {
          return {
            div: null,
            mod: new BN(this.modn(num.words[0]))
          };
        }
        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modn(num.words[0]))
        };
      }
      return this._wordDiv(num, mode);
    };
    BN.prototype.div = function div(num) {
      return this.divmod(num, "div", false).div;
    };
    BN.prototype.mod = function mod(num) {
      return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
      return this.divmod(num, "mod", true).mod;
    };
    BN.prototype.divRound = function divRound(num) {
      var dm = this.divmod(num);
      if (dm.mod.isZero())
        return dm.div;
      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
      var half = num.ushrn(1);
      var r22 = num.andln(1);
      var cmp = mod.cmp(half);
      if (cmp < 0 || r22 === 1 && cmp === 0)
        return dm.div;
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
      assert2(num <= 67108863);
      var p8 = (1 << 26) % num;
      var acc = 0;
      for (var i8 = (this || _global$6).length - 1; i8 >= 0; i8--) {
        acc = (p8 * acc + ((this || _global$6).words[i8] | 0)) % num;
      }
      return acc;
    };
    BN.prototype.idivn = function idivn(num) {
      assert2(num <= 67108863);
      var carry = 0;
      for (var i8 = (this || _global$6).length - 1; i8 >= 0; i8--) {
        var w4 = ((this || _global$6).words[i8] | 0) + carry * 67108864;
        (this || _global$6).words[i8] = w4 / num | 0;
        carry = w4 % num;
      }
      return this.strip();
    };
    BN.prototype.divn = function divn(num) {
      return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p8) {
      assert2(p8.negative === 0);
      assert2(!p8.isZero());
      var x4 = this || _global$6;
      var y6 = p8.clone();
      if (x4.negative !== 0) {
        x4 = x4.umod(p8);
      } else {
        x4 = x4.clone();
      }
      var A4 = new BN(1);
      var B4 = new BN(0);
      var C4 = new BN(0);
      var D4 = new BN(1);
      var g5 = 0;
      while (x4.isEven() && y6.isEven()) {
        x4.iushrn(1);
        y6.iushrn(1);
        ++g5;
      }
      var yp = y6.clone();
      var xp = x4.clone();
      while (!x4.isZero()) {
        for (var i8 = 0, im = 1; (x4.words[0] & im) === 0 && i8 < 26; ++i8, im <<= 1)
          ;
        if (i8 > 0) {
          x4.iushrn(i8);
          while (i8-- > 0) {
            if (A4.isOdd() || B4.isOdd()) {
              A4.iadd(yp);
              B4.isub(xp);
            }
            A4.iushrn(1);
            B4.iushrn(1);
          }
        }
        for (var j4 = 0, jm = 1; (y6.words[0] & jm) === 0 && j4 < 26; ++j4, jm <<= 1)
          ;
        if (j4 > 0) {
          y6.iushrn(j4);
          while (j4-- > 0) {
            if (C4.isOdd() || D4.isOdd()) {
              C4.iadd(yp);
              D4.isub(xp);
            }
            C4.iushrn(1);
            D4.iushrn(1);
          }
        }
        if (x4.cmp(y6) >= 0) {
          x4.isub(y6);
          A4.isub(C4);
          B4.isub(D4);
        } else {
          y6.isub(x4);
          C4.isub(A4);
          D4.isub(B4);
        }
      }
      return {
        a: C4,
        b: D4,
        gcd: y6.iushln(g5)
      };
    };
    BN.prototype._invmp = function _invmp(p8) {
      assert2(p8.negative === 0);
      assert2(!p8.isZero());
      var a8 = this || _global$6;
      var b5 = p8.clone();
      if (a8.negative !== 0) {
        a8 = a8.umod(p8);
      } else {
        a8 = a8.clone();
      }
      var x1 = new BN(1);
      var x22 = new BN(0);
      var delta = b5.clone();
      while (a8.cmpn(1) > 0 && b5.cmpn(1) > 0) {
        for (var i8 = 0, im = 1; (a8.words[0] & im) === 0 && i8 < 26; ++i8, im <<= 1)
          ;
        if (i8 > 0) {
          a8.iushrn(i8);
          while (i8-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }
            x1.iushrn(1);
          }
        }
        for (var j4 = 0, jm = 1; (b5.words[0] & jm) === 0 && j4 < 26; ++j4, jm <<= 1)
          ;
        if (j4 > 0) {
          b5.iushrn(j4);
          while (j4-- > 0) {
            if (x22.isOdd()) {
              x22.iadd(delta);
            }
            x22.iushrn(1);
          }
        }
        if (a8.cmp(b5) >= 0) {
          a8.isub(b5);
          x1.isub(x22);
        } else {
          b5.isub(a8);
          x22.isub(x1);
        }
      }
      var res;
      if (a8.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x22;
      }
      if (res.cmpn(0) < 0) {
        res.iadd(p8);
      }
      return res;
    };
    BN.prototype.gcd = function gcd(num) {
      if (this.isZero())
        return num.abs();
      if (num.isZero())
        return this.abs();
      var a8 = this.clone();
      var b5 = num.clone();
      a8.negative = 0;
      b5.negative = 0;
      for (var shift = 0; a8.isEven() && b5.isEven(); shift++) {
        a8.iushrn(1);
        b5.iushrn(1);
      }
      do {
        while (a8.isEven()) {
          a8.iushrn(1);
        }
        while (b5.isEven()) {
          b5.iushrn(1);
        }
        var r9 = a8.cmp(b5);
        if (r9 < 0) {
          var t8 = a8;
          a8 = b5;
          b5 = t8;
        } else if (r9 === 0 || b5.cmpn(1) === 0) {
          break;
        }
        a8.isub(b5);
      } while (true);
      return b5.iushln(shift);
    };
    BN.prototype.invm = function invm(num) {
      return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
      return ((this || _global$6).words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
      return ((this || _global$6).words[0] & 1) === 1;
    };
    BN.prototype.andln = function andln(num) {
      return (this || _global$6).words[0] & num;
    };
    BN.prototype.bincn = function bincn(bit) {
      assert2(typeof bit === "number");
      var r9 = bit % 26;
      var s7 = (bit - r9) / 26;
      var q3 = 1 << r9;
      if ((this || _global$6).length <= s7) {
        this._expand(s7 + 1);
        (this || _global$6).words[s7] |= q3;
        return this || _global$6;
      }
      var carry = q3;
      for (var i8 = s7; carry !== 0 && i8 < (this || _global$6).length; i8++) {
        var w4 = (this || _global$6).words[i8] | 0;
        w4 += carry;
        carry = w4 >>> 26;
        w4 &= 67108863;
        (this || _global$6).words[i8] = w4;
      }
      if (carry !== 0) {
        (this || _global$6).words[i8] = carry;
        (this || _global$6).length++;
      }
      return this || _global$6;
    };
    BN.prototype.isZero = function isZero() {
      return (this || _global$6).length === 1 && (this || _global$6).words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
      var negative = num < 0;
      if ((this || _global$6).negative !== 0 && !negative)
        return -1;
      if ((this || _global$6).negative === 0 && negative)
        return 1;
      this.strip();
      var res;
      if ((this || _global$6).length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }
        assert2(num <= 67108863, "Number is too big");
        var w4 = (this || _global$6).words[0] | 0;
        res = w4 === num ? 0 : w4 < num ? -1 : 1;
      }
      if ((this || _global$6).negative !== 0)
        return -res | 0;
      return res;
    };
    BN.prototype.cmp = function cmp(num) {
      if ((this || _global$6).negative !== 0 && num.negative === 0)
        return -1;
      if ((this || _global$6).negative === 0 && num.negative !== 0)
        return 1;
      var res = this.ucmp(num);
      if ((this || _global$6).negative !== 0)
        return -res | 0;
      return res;
    };
    BN.prototype.ucmp = function ucmp(num) {
      if ((this || _global$6).length > num.length)
        return 1;
      if ((this || _global$6).length < num.length)
        return -1;
      var res = 0;
      for (var i8 = (this || _global$6).length - 1; i8 >= 0; i8--) {
        var a8 = (this || _global$6).words[i8] | 0;
        var b5 = num.words[i8] | 0;
        if (a8 === b5)
          continue;
        if (a8 < b5) {
          res = -1;
        } else if (a8 > b5) {
          res = 1;
        }
        break;
      }
      return res;
    };
    BN.prototype.gtn = function gtn(num) {
      return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
      return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
      return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
      return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
      return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
      return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
      return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
      return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
      return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
      return this.cmp(num) === 0;
    };
    BN.red = function red(num) {
      return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
      assert2(!(this || _global$6).red, "Already a number in reduction context");
      assert2((this || _global$6).negative === 0, "red works only with positives");
      return ctx.convertTo(this || _global$6)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
      assert2((this || _global$6).red, "fromRed works only with numbers in reduction context");
      return (this || _global$6).red.convertFrom(this || _global$6);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
      (this || _global$6).red = ctx;
      return this || _global$6;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
      assert2(!(this || _global$6).red, "Already a number in reduction context");
      return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
      assert2((this || _global$6).red, "redAdd works only with red numbers");
      return (this || _global$6).red.add(this || _global$6, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
      assert2((this || _global$6).red, "redIAdd works only with red numbers");
      return (this || _global$6).red.iadd(this || _global$6, num);
    };
    BN.prototype.redSub = function redSub(num) {
      assert2((this || _global$6).red, "redSub works only with red numbers");
      return (this || _global$6).red.sub(this || _global$6, num);
    };
    BN.prototype.redISub = function redISub(num) {
      assert2((this || _global$6).red, "redISub works only with red numbers");
      return (this || _global$6).red.isub(this || _global$6, num);
    };
    BN.prototype.redShl = function redShl(num) {
      assert2((this || _global$6).red, "redShl works only with red numbers");
      return (this || _global$6).red.shl(this || _global$6, num);
    };
    BN.prototype.redMul = function redMul(num) {
      assert2((this || _global$6).red, "redMul works only with red numbers");
      (this || _global$6).red._verify2(this || _global$6, num);
      return (this || _global$6).red.mul(this || _global$6, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
      assert2((this || _global$6).red, "redMul works only with red numbers");
      (this || _global$6).red._verify2(this || _global$6, num);
      return (this || _global$6).red.imul(this || _global$6, num);
    };
    BN.prototype.redSqr = function redSqr() {
      assert2((this || _global$6).red, "redSqr works only with red numbers");
      (this || _global$6).red._verify1(this || _global$6);
      return (this || _global$6).red.sqr(this || _global$6);
    };
    BN.prototype.redISqr = function redISqr() {
      assert2((this || _global$6).red, "redISqr works only with red numbers");
      (this || _global$6).red._verify1(this || _global$6);
      return (this || _global$6).red.isqr(this || _global$6);
    };
    BN.prototype.redSqrt = function redSqrt() {
      assert2((this || _global$6).red, "redSqrt works only with red numbers");
      (this || _global$6).red._verify1(this || _global$6);
      return (this || _global$6).red.sqrt(this || _global$6);
    };
    BN.prototype.redInvm = function redInvm() {
      assert2((this || _global$6).red, "redInvm works only with red numbers");
      (this || _global$6).red._verify1(this || _global$6);
      return (this || _global$6).red.invm(this || _global$6);
    };
    BN.prototype.redNeg = function redNeg() {
      assert2((this || _global$6).red, "redNeg works only with red numbers");
      (this || _global$6).red._verify1(this || _global$6);
      return (this || _global$6).red.neg(this || _global$6);
    };
    BN.prototype.redPow = function redPow(num) {
      assert2((this || _global$6).red && !num.red, "redPow(normalNum)");
      (this || _global$6).red._verify1(this || _global$6);
      return (this || _global$6).red.pow(this || _global$6, num);
    };
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };
    function MPrime(name2, p8) {
      (this || _global$6).name = name2;
      (this || _global$6).p = new BN(p8, 16);
      (this || _global$6).n = (this || _global$6).p.bitLength();
      (this || _global$6).k = new BN(1).iushln((this || _global$6).n).isub((this || _global$6).p);
      (this || _global$6).tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil((this || _global$6).n / 13));
      return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
      var r9 = num;
      var rlen;
      do {
        this.split(r9, (this || _global$6).tmp);
        r9 = this.imulK(r9);
        r9 = r9.iadd((this || _global$6).tmp);
        rlen = r9.bitLength();
      } while (rlen > (this || _global$6).n);
      var cmp = rlen < (this || _global$6).n ? -1 : r9.ucmp((this || _global$6).p);
      if (cmp === 0) {
        r9.words[0] = 0;
        r9.length = 1;
      } else if (cmp > 0) {
        r9.isub((this || _global$6).p);
      } else {
        if (r9.strip !== void 0) {
          r9.strip();
        } else {
          r9._strip();
        }
      }
      return r9;
    };
    MPrime.prototype.split = function split(input, out) {
      input.iushrn((this || _global$6).n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
      return num.imul((this || _global$6).k);
    };
    function K256() {
      MPrime.call(this || _global$6, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits4(K256, MPrime);
    K256.prototype.split = function split(input, output) {
      var mask = 4194303;
      var outLen = Math.min(input.length, 9);
      for (var i8 = 0; i8 < outLen; i8++) {
        output.words[i8] = input.words[i8];
      }
      output.length = outLen;
      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }
      var prev = input.words[9];
      output.words[output.length++] = prev & mask;
      for (i8 = 10; i8 < input.length; i8++) {
        var next = input.words[i8] | 0;
        input.words[i8 - 10] = (next & mask) << 4 | prev >>> 22;
        prev = next;
      }
      prev >>>= 22;
      input.words[i8 - 10] = prev;
      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };
    K256.prototype.imulK = function imulK(num) {
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;
      var lo = 0;
      for (var i8 = 0; i8 < num.length; i8++) {
        var w4 = num.words[i8] | 0;
        lo += w4 * 977;
        num.words[i8] = lo & 67108863;
        lo = w4 * 64 + (lo / 67108864 | 0);
      }
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }
      return num;
    };
    function P224() {
      MPrime.call(this || _global$6, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits4(P224, MPrime);
    function P192() {
      MPrime.call(this || _global$6, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits4(P192, MPrime);
    function P25519() {
      MPrime.call(this || _global$6, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits4(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
      var carry = 0;
      for (var i8 = 0; i8 < num.length; i8++) {
        var hi = (num.words[i8] | 0) * 19 + carry;
        var lo = hi & 67108863;
        hi >>>= 26;
        num.words[i8] = lo;
        carry = hi;
      }
      if (carry !== 0) {
        num.words[num.length++] = carry;
      }
      return num;
    };
    BN._prime = function prime(name2) {
      if (primes[name2])
        return primes[name2];
      var prime2;
      if (name2 === "k256") {
        prime2 = new K256();
      } else if (name2 === "p224") {
        prime2 = new P224();
      } else if (name2 === "p192") {
        prime2 = new P192();
      } else if (name2 === "p25519") {
        prime2 = new P25519();
      } else {
        throw new Error("Unknown prime " + name2);
      }
      primes[name2] = prime2;
      return prime2;
    };
    function Red(m6) {
      if (typeof m6 === "string") {
        var prime = BN._prime(m6);
        (this || _global$6).m = prime.p;
        (this || _global$6).prime = prime;
      } else {
        assert2(m6.gtn(1), "modulus must be greater than 1");
        (this || _global$6).m = m6;
        (this || _global$6).prime = null;
      }
    }
    Red.prototype._verify1 = function _verify1(a8) {
      assert2(a8.negative === 0, "red works only with positives");
      assert2(a8.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a8, b5) {
      assert2((a8.negative | b5.negative) === 0, "red works only with positives");
      assert2(a8.red && a8.red === b5.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a8) {
      if ((this || _global$6).prime)
        return (this || _global$6).prime.ireduce(a8)._forceRed(this || _global$6);
      return a8.umod((this || _global$6).m)._forceRed(this || _global$6);
    };
    Red.prototype.neg = function neg(a8) {
      if (a8.isZero()) {
        return a8.clone();
      }
      return (this || _global$6).m.sub(a8)._forceRed(this || _global$6);
    };
    Red.prototype.add = function add(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.add(b5);
      if (res.cmp((this || _global$6).m) >= 0) {
        res.isub((this || _global$6).m);
      }
      return res._forceRed(this || _global$6);
    };
    Red.prototype.iadd = function iadd(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.iadd(b5);
      if (res.cmp((this || _global$6).m) >= 0) {
        res.isub((this || _global$6).m);
      }
      return res;
    };
    Red.prototype.sub = function sub(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.sub(b5);
      if (res.cmpn(0) < 0) {
        res.iadd((this || _global$6).m);
      }
      return res._forceRed(this || _global$6);
    };
    Red.prototype.isub = function isub(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.isub(b5);
      if (res.cmpn(0) < 0) {
        res.iadd((this || _global$6).m);
      }
      return res;
    };
    Red.prototype.shl = function shl(a8, num) {
      this._verify1(a8);
      return this.imod(a8.ushln(num));
    };
    Red.prototype.imul = function imul(a8, b5) {
      this._verify2(a8, b5);
      return this.imod(a8.imul(b5));
    };
    Red.prototype.mul = function mul(a8, b5) {
      this._verify2(a8, b5);
      return this.imod(a8.mul(b5));
    };
    Red.prototype.isqr = function isqr(a8) {
      return this.imul(a8, a8.clone());
    };
    Red.prototype.sqr = function sqr(a8) {
      return this.mul(a8, a8);
    };
    Red.prototype.sqrt = function sqrt(a8) {
      if (a8.isZero())
        return a8.clone();
      var mod3 = (this || _global$6).m.andln(3);
      assert2(mod3 % 2 === 1);
      if (mod3 === 3) {
        var pow = (this || _global$6).m.add(new BN(1)).iushrn(2);
        return this.pow(a8, pow);
      }
      var q3 = (this || _global$6).m.subn(1);
      var s7 = 0;
      while (!q3.isZero() && q3.andln(1) === 0) {
        s7++;
        q3.iushrn(1);
      }
      assert2(!q3.isZero());
      var one = new BN(1).toRed(this || _global$6);
      var nOne = one.redNeg();
      var lpow = (this || _global$6).m.subn(1).iushrn(1);
      var z5 = (this || _global$6).m.bitLength();
      z5 = new BN(2 * z5 * z5).toRed(this || _global$6);
      while (this.pow(z5, lpow).cmp(nOne) !== 0) {
        z5.redIAdd(nOne);
      }
      var c8 = this.pow(z5, q3);
      var r9 = this.pow(a8, q3.addn(1).iushrn(1));
      var t8 = this.pow(a8, q3);
      var m6 = s7;
      while (t8.cmp(one) !== 0) {
        var tmp = t8;
        for (var i8 = 0; tmp.cmp(one) !== 0; i8++) {
          tmp = tmp.redSqr();
        }
        assert2(i8 < m6);
        var b5 = this.pow(c8, new BN(1).iushln(m6 - i8 - 1));
        r9 = r9.redMul(b5);
        c8 = b5.redSqr();
        t8 = t8.redMul(c8);
        m6 = i8;
      }
      return r9;
    };
    Red.prototype.invm = function invm(a8) {
      var inv = a8._invmp((this || _global$6).m);
      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };
    Red.prototype.pow = function pow(a8, num) {
      if (num.isZero())
        return new BN(1).toRed(this || _global$6);
      if (num.cmpn(1) === 0)
        return a8.clone();
      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN(1).toRed(this || _global$6);
      wnd[1] = a8;
      for (var i8 = 2; i8 < wnd.length; i8++) {
        wnd[i8] = this.mul(wnd[i8 - 1], a8);
      }
      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;
      if (start === 0) {
        start = 26;
      }
      for (i8 = num.length - 1; i8 >= 0; i8--) {
        var word = num.words[i8];
        for (var j4 = start - 1; j4 >= 0; j4--) {
          var bit = word >> j4 & 1;
          if (res !== wnd[0]) {
            res = this.sqr(res);
          }
          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }
          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i8 !== 0 || j4 !== 0))
            continue;
          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }
        start = 26;
      }
      return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
      var r9 = num.umod((this || _global$6).m);
      return r9 === num ? r9.clone() : r9;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
      var res = num.clone();
      res.red = null;
      return res;
    };
    BN.mont = function mont(num) {
      return new Mont(num);
    };
    function Mont(m6) {
      Red.call(this || _global$6, m6);
      (this || _global$6).shift = (this || _global$6).m.bitLength();
      if ((this || _global$6).shift % 26 !== 0) {
        (this || _global$6).shift += 26 - (this || _global$6).shift % 26;
      }
      (this || _global$6).r = new BN(1).iushln((this || _global$6).shift);
      (this || _global$6).r2 = this.imod((this || _global$6).r.sqr());
      (this || _global$6).rinv = (this || _global$6).r._invmp((this || _global$6).m);
      (this || _global$6).minv = (this || _global$6).rinv.mul((this || _global$6).r).isubn(1).div((this || _global$6).m);
      (this || _global$6).minv = (this || _global$6).minv.umod((this || _global$6).r);
      (this || _global$6).minv = (this || _global$6).r.sub((this || _global$6).minv);
    }
    inherits4(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
      return this.imod(num.ushln((this || _global$6).shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
      var r9 = this.imod(num.mul((this || _global$6).rinv));
      r9.red = null;
      return r9;
    };
    Mont.prototype.imul = function imul(a8, b5) {
      if (a8.isZero() || b5.isZero()) {
        a8.words[0] = 0;
        a8.length = 1;
        return a8;
      }
      var t8 = a8.imul(b5);
      var c8 = t8.maskn((this || _global$6).shift).mul((this || _global$6).minv).imaskn((this || _global$6).shift).mul((this || _global$6).m);
      var u8 = t8.isub(c8).iushrn((this || _global$6).shift);
      var res = u8;
      if (u8.cmp((this || _global$6).m) >= 0) {
        res = u8.isub((this || _global$6).m);
      } else if (u8.cmpn(0) < 0) {
        res = u8.iadd((this || _global$6).m);
      }
      return res._forceRed(this || _global$6);
    };
    Mont.prototype.mul = function mul(a8, b5) {
      if (a8.isZero() || b5.isZero())
        return new BN(0)._forceRed(this || _global$6);
      var t8 = a8.mul(b5);
      var c8 = t8.maskn((this || _global$6).shift).mul((this || _global$6).minv).imaskn((this || _global$6).shift).mul((this || _global$6).m);
      var u8 = t8.isub(c8).iushrn((this || _global$6).shift);
      var res = u8;
      if (u8.cmp((this || _global$6).m) >= 0) {
        res = u8.isub((this || _global$6).m);
      } else if (u8.cmpn(0) < 0) {
        res = u8.iadd((this || _global$6).m);
      }
      return res._forceRed(this || _global$6);
    };
    Mont.prototype.invm = function invm(a8) {
      var res = this.imod(a8._invmp((this || _global$6).m).mul((this || _global$6).r2));
      return res._forceRed(this || _global$6);
    };
  })(module$3, exports$W);
  return module$3.exports;
}
function dew$U() {
  if (_dewExec$U)
    return exports$V;
  _dewExec$U = true;
  var utils = exports$V;
  function toArray2(msg, enc) {
    if (Array.isArray(msg))
      return msg.slice();
    if (!msg)
      return [];
    var res = [];
    if (typeof msg !== "string") {
      for (var i8 = 0; i8 < msg.length; i8++)
        res[i8] = msg[i8] | 0;
      return res;
    }
    if (enc === "hex") {
      msg = msg.replace(/[^a-z0-9]+/ig, "");
      if (msg.length % 2 !== 0)
        msg = "0" + msg;
      for (var i8 = 0; i8 < msg.length; i8 += 2)
        res.push(parseInt(msg[i8] + msg[i8 + 1], 16));
    } else {
      for (var i8 = 0; i8 < msg.length; i8++) {
        var c8 = msg.charCodeAt(i8);
        var hi = c8 >> 8;
        var lo = c8 & 255;
        if (hi)
          res.push(hi, lo);
        else
          res.push(lo);
      }
    }
    return res;
  }
  utils.toArray = toArray2;
  function zero2(word) {
    if (word.length === 1)
      return "0" + word;
    else
      return word;
  }
  utils.zero2 = zero2;
  function toHex(msg) {
    var res = "";
    for (var i8 = 0; i8 < msg.length; i8++)
      res += zero2(msg[i8].toString(16));
    return res;
  }
  utils.toHex = toHex;
  utils.encode = function encode3(arr, enc) {
    if (enc === "hex")
      return toHex(arr);
    else
      return arr;
  };
  return exports$V;
}
function dew$T() {
  if (_dewExec$T)
    return exports$U;
  _dewExec$T = true;
  var utils = exports$U;
  var BN = dew$V();
  var minAssert = dew$2m();
  var minUtils = dew$U();
  utils.assert = minAssert;
  utils.toArray = minUtils.toArray;
  utils.zero2 = minUtils.zero2;
  utils.toHex = minUtils.toHex;
  utils.encode = minUtils.encode;
  function getNAF(num, w4, bits) {
    var naf = new Array(Math.max(num.bitLength(), bits) + 1);
    naf.fill(0);
    var ws = 1 << w4 + 1;
    var k4 = num.clone();
    for (var i8 = 0; i8 < naf.length; i8++) {
      var z5;
      var mod = k4.andln(ws - 1);
      if (k4.isOdd()) {
        if (mod > (ws >> 1) - 1)
          z5 = (ws >> 1) - mod;
        else
          z5 = mod;
        k4.isubn(z5);
      } else {
        z5 = 0;
      }
      naf[i8] = z5;
      k4.iushrn(1);
    }
    return naf;
  }
  utils.getNAF = getNAF;
  function getJSF(k1, k22) {
    var jsf = [[], []];
    k1 = k1.clone();
    k22 = k22.clone();
    var d1 = 0;
    var d22 = 0;
    var m8;
    while (k1.cmpn(-d1) > 0 || k22.cmpn(-d22) > 0) {
      var m14 = k1.andln(3) + d1 & 3;
      var m24 = k22.andln(3) + d22 & 3;
      if (m14 === 3)
        m14 = -1;
      if (m24 === 3)
        m24 = -1;
      var u1;
      if ((m14 & 1) === 0) {
        u1 = 0;
      } else {
        m8 = k1.andln(7) + d1 & 7;
        if ((m8 === 3 || m8 === 5) && m24 === 2)
          u1 = -m14;
        else
          u1 = m14;
      }
      jsf[0].push(u1);
      var u22;
      if ((m24 & 1) === 0) {
        u22 = 0;
      } else {
        m8 = k22.andln(7) + d22 & 7;
        if ((m8 === 3 || m8 === 5) && m14 === 2)
          u22 = -m24;
        else
          u22 = m24;
      }
      jsf[1].push(u22);
      if (2 * d1 === u1 + 1)
        d1 = 1 - d1;
      if (2 * d22 === u22 + 1)
        d22 = 1 - d22;
      k1.iushrn(1);
      k22.iushrn(1);
    }
    return jsf;
  }
  utils.getJSF = getJSF;
  function cachedProperty(obj, name2, computer) {
    var key = "_" + name2;
    obj.prototype[name2] = function cachedProperty2() {
      return this[key] !== void 0 ? this[key] : this[key] = computer.call(this);
    };
  }
  utils.cachedProperty = cachedProperty;
  function parseBytes(bytes) {
    return typeof bytes === "string" ? utils.toArray(bytes, "hex") : bytes;
  }
  utils.parseBytes = parseBytes;
  function intFromLE(bytes) {
    return new BN(bytes, "hex", "le");
  }
  utils.intFromLE = intFromLE;
  return exports$U;
}
function dew$S() {
  if (_dewExec$S)
    return exports$T;
  _dewExec$S = true;
  var BN = dew$V();
  var utils = dew$T();
  var getNAF = utils.getNAF;
  var getJSF = utils.getJSF;
  var assert2 = utils.assert;
  function BaseCurve(type, conf) {
    this.type = type;
    this.p = new BN(conf.p, 16);
    this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);
    this.zero = new BN(0).toRed(this.red);
    this.one = new BN(1).toRed(this.red);
    this.two = new BN(2).toRed(this.red);
    this.n = conf.n && new BN(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);
    this._bitLength = this.n ? this.n.bitLength() : 0;
    var adjustCount = this.n && this.p.div(this.n);
    if (!adjustCount || adjustCount.cmpn(100) > 0) {
      this.redN = null;
    } else {
      this._maxwellTrick = true;
      this.redN = this.n.toRed(this.red);
    }
  }
  exports$T = BaseCurve;
  BaseCurve.prototype.point = function point() {
    throw new Error("Not implemented");
  };
  BaseCurve.prototype.validate = function validate() {
    throw new Error("Not implemented");
  };
  BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p8, k4) {
    assert2(p8.precomputed);
    var doubles = p8._getDoubles();
    var naf = getNAF(k4, 1, this._bitLength);
    var I4 = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
    I4 /= 3;
    var repr = [];
    var j4;
    var nafW;
    for (j4 = 0; j4 < naf.length; j4 += doubles.step) {
      nafW = 0;
      for (var l8 = j4 + doubles.step - 1; l8 >= j4; l8--)
        nafW = (nafW << 1) + naf[l8];
      repr.push(nafW);
    }
    var a8 = this.jpoint(null, null, null);
    var b5 = this.jpoint(null, null, null);
    for (var i8 = I4; i8 > 0; i8--) {
      for (j4 = 0; j4 < repr.length; j4++) {
        nafW = repr[j4];
        if (nafW === i8)
          b5 = b5.mixedAdd(doubles.points[j4]);
        else if (nafW === -i8)
          b5 = b5.mixedAdd(doubles.points[j4].neg());
      }
      a8 = a8.add(b5);
    }
    return a8.toP();
  };
  BaseCurve.prototype._wnafMul = function _wnafMul(p8, k4) {
    var w4 = 4;
    var nafPoints = p8._getNAFPoints(w4);
    w4 = nafPoints.wnd;
    var wnd = nafPoints.points;
    var naf = getNAF(k4, w4, this._bitLength);
    var acc = this.jpoint(null, null, null);
    for (var i8 = naf.length - 1; i8 >= 0; i8--) {
      for (var l8 = 0; i8 >= 0 && naf[i8] === 0; i8--)
        l8++;
      if (i8 >= 0)
        l8++;
      acc = acc.dblp(l8);
      if (i8 < 0)
        break;
      var z5 = naf[i8];
      assert2(z5 !== 0);
      if (p8.type === "affine") {
        if (z5 > 0)
          acc = acc.mixedAdd(wnd[z5 - 1 >> 1]);
        else
          acc = acc.mixedAdd(wnd[-z5 - 1 >> 1].neg());
      } else {
        if (z5 > 0)
          acc = acc.add(wnd[z5 - 1 >> 1]);
        else
          acc = acc.add(wnd[-z5 - 1 >> 1].neg());
      }
    }
    return p8.type === "affine" ? acc.toP() : acc;
  };
  BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;
    var max = 0;
    var i8;
    var j4;
    var p8;
    for (i8 = 0; i8 < len; i8++) {
      p8 = points[i8];
      var nafPoints = p8._getNAFPoints(defW);
      wndWidth[i8] = nafPoints.wnd;
      wnd[i8] = nafPoints.points;
    }
    for (i8 = len - 1; i8 >= 1; i8 -= 2) {
      var a8 = i8 - 1;
      var b5 = i8;
      if (wndWidth[a8] !== 1 || wndWidth[b5] !== 1) {
        naf[a8] = getNAF(coeffs[a8], wndWidth[a8], this._bitLength);
        naf[b5] = getNAF(coeffs[b5], wndWidth[b5], this._bitLength);
        max = Math.max(naf[a8].length, max);
        max = Math.max(naf[b5].length, max);
        continue;
      }
      var comb = [
        points[a8],
        null,
        null,
        points[b5]
      ];
      if (points[a8].y.cmp(points[b5].y) === 0) {
        comb[1] = points[a8].add(points[b5]);
        comb[2] = points[a8].toJ().mixedAdd(points[b5].neg());
      } else if (points[a8].y.cmp(points[b5].y.redNeg()) === 0) {
        comb[1] = points[a8].toJ().mixedAdd(points[b5]);
        comb[2] = points[a8].add(points[b5].neg());
      } else {
        comb[1] = points[a8].toJ().mixedAdd(points[b5]);
        comb[2] = points[a8].toJ().mixedAdd(points[b5].neg());
      }
      var index = [
        -3,
        -1,
        -5,
        -7,
        0,
        7,
        5,
        1,
        3
      ];
      var jsf = getJSF(coeffs[a8], coeffs[b5]);
      max = Math.max(jsf[0].length, max);
      naf[a8] = new Array(max);
      naf[b5] = new Array(max);
      for (j4 = 0; j4 < max; j4++) {
        var ja = jsf[0][j4] | 0;
        var jb = jsf[1][j4] | 0;
        naf[a8][j4] = index[(ja + 1) * 3 + (jb + 1)];
        naf[b5][j4] = 0;
        wnd[a8] = comb;
      }
    }
    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for (i8 = max; i8 >= 0; i8--) {
      var k4 = 0;
      while (i8 >= 0) {
        var zero = true;
        for (j4 = 0; j4 < len; j4++) {
          tmp[j4] = naf[j4][i8] | 0;
          if (tmp[j4] !== 0)
            zero = false;
        }
        if (!zero)
          break;
        k4++;
        i8--;
      }
      if (i8 >= 0)
        k4++;
      acc = acc.dblp(k4);
      if (i8 < 0)
        break;
      for (j4 = 0; j4 < len; j4++) {
        var z5 = tmp[j4];
        if (z5 === 0)
          continue;
        else if (z5 > 0)
          p8 = wnd[j4][z5 - 1 >> 1];
        else if (z5 < 0)
          p8 = wnd[j4][-z5 - 1 >> 1].neg();
        if (p8.type === "affine")
          acc = acc.mixedAdd(p8);
        else
          acc = acc.add(p8);
      }
    }
    for (i8 = 0; i8 < len; i8++)
      wnd[i8] = null;
    if (jacobianResult)
      return acc;
    else
      return acc.toP();
  };
  function BasePoint(curve, type) {
    this.curve = curve;
    this.type = type;
    this.precomputed = null;
  }
  BaseCurve.BasePoint = BasePoint;
  BasePoint.prototype.eq = function eq() {
    throw new Error("Not implemented");
  };
  BasePoint.prototype.validate = function validate() {
    return this.curve.validate(this);
  };
  BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    bytes = utils.toArray(bytes, enc);
    var len = this.p.byteLength();
    if ((bytes[0] === 4 || bytes[0] === 6 || bytes[0] === 7) && bytes.length - 1 === 2 * len) {
      if (bytes[0] === 6)
        assert2(bytes[bytes.length - 1] % 2 === 0);
      else if (bytes[0] === 7)
        assert2(bytes[bytes.length - 1] % 2 === 1);
      var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
      return res;
    } else if ((bytes[0] === 2 || bytes[0] === 3) && bytes.length - 1 === len) {
      return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 3);
    }
    throw new Error("Unknown point format");
  };
  BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
  };
  BasePoint.prototype._encode = function _encode(compact) {
    var len = this.curve.p.byteLength();
    var x4 = this.getX().toArray("be", len);
    if (compact)
      return [this.getY().isEven() ? 2 : 3].concat(x4);
    return [4].concat(x4, this.getY().toArray("be", len));
  };
  BasePoint.prototype.encode = function encode3(enc, compact) {
    return utils.encode(this._encode(compact), enc);
  };
  BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed)
      return this;
    var precomputed = {
      doubles: null,
      naf: null,
      beta: null
    };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;
    return this;
  };
  BasePoint.prototype._hasDoubles = function _hasDoubles(k4) {
    if (!this.precomputed)
      return false;
    var doubles = this.precomputed.doubles;
    if (!doubles)
      return false;
    return doubles.points.length >= Math.ceil((k4.bitLength() + 1) / doubles.step);
  };
  BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles)
      return this.precomputed.doubles;
    var doubles = [this];
    var acc = this;
    for (var i8 = 0; i8 < power; i8 += step) {
      for (var j4 = 0; j4 < step; j4++)
        acc = acc.dbl();
      doubles.push(acc);
    }
    return {
      step,
      points: doubles
    };
  };
  BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf)
      return this.precomputed.naf;
    var res = [this];
    var max = (1 << wnd) - 1;
    var dbl = max === 1 ? null : this.dbl();
    for (var i8 = 1; i8 < max; i8++)
      res[i8] = res[i8 - 1].add(dbl);
    return {
      wnd,
      points: res
    };
  };
  BasePoint.prototype._getBeta = function _getBeta() {
    return null;
  };
  BasePoint.prototype.dblp = function dblp(k4) {
    var r9 = this;
    for (var i8 = 0; i8 < k4; i8++)
      r9 = r9.dbl();
    return r9;
  };
  return exports$T;
}
function dew$R() {
  if (_dewExec$R)
    return exports$S;
  _dewExec$R = true;
  var utils = dew$T();
  var BN = dew$V();
  var inherits4 = dew$f();
  var Base = dew$S();
  var assert2 = utils.assert;
  function ShortCurve(conf) {
    Base.call(this, "short", conf);
    this.a = new BN(conf.a, 16).toRed(this.red);
    this.b = new BN(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();
    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
  }
  inherits4(ShortCurve, Base);
  exports$S = ShortCurve;
  ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
      return;
    var beta;
    var lambda;
    if (conf.beta) {
      beta = new BN(conf.beta, 16).toRed(this.red);
    } else {
      var betas = this._getEndoRoots(this.p);
      beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
      beta = beta.toRed(this.red);
    }
    if (conf.lambda) {
      lambda = new BN(conf.lambda, 16);
    } else {
      var lambdas = this._getEndoRoots(this.n);
      if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
        lambda = lambdas[0];
      } else {
        lambda = lambdas[1];
        assert2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
      }
    }
    var basis;
    if (conf.basis) {
      basis = conf.basis.map(function(vec) {
        return {
          a: new BN(vec.a, 16),
          b: new BN(vec.b, 16)
        };
      });
    } else {
      basis = this._getEndoBasis(lambda);
    }
    return {
      beta,
      lambda,
      basis
    };
  };
  ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    var red = num === this.p ? this.red : BN.mont(num);
    var tinv = new BN(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();
    var s7 = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
    var l1 = ntinv.redAdd(s7).fromRed();
    var l22 = ntinv.redSub(s7).fromRed();
    return [l1, l22];
  };
  ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
    var u8 = lambda;
    var v6 = this.n.clone();
    var x1 = new BN(1);
    var y1 = new BN(0);
    var x22 = new BN(0);
    var y22 = new BN(1);
    var a0;
    var b0;
    var a1;
    var b1;
    var a22;
    var b22;
    var prevR;
    var i8 = 0;
    var r9;
    var x4;
    while (u8.cmpn(0) !== 0) {
      var q3 = v6.div(u8);
      r9 = v6.sub(q3.mul(u8));
      x4 = x22.sub(q3.mul(x1));
      var y6 = y22.sub(q3.mul(y1));
      if (!a1 && r9.cmp(aprxSqrt) < 0) {
        a0 = prevR.neg();
        b0 = x1;
        a1 = r9.neg();
        b1 = x4;
      } else if (a1 && ++i8 === 2) {
        break;
      }
      prevR = r9;
      v6 = u8;
      u8 = r9;
      x22 = x1;
      x1 = x4;
      y22 = y1;
      y1 = y6;
    }
    a22 = r9.neg();
    b22 = x4;
    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a22.sqr().add(b22.sqr());
    if (len2.cmp(len1) >= 0) {
      a22 = a0;
      b22 = b0;
    }
    if (a1.negative) {
      a1 = a1.neg();
      b1 = b1.neg();
    }
    if (a22.negative) {
      a22 = a22.neg();
      b22 = b22.neg();
    }
    return [{
      a: a1,
      b: b1
    }, {
      a: a22,
      b: b22
    }];
  };
  ShortCurve.prototype._endoSplit = function _endoSplit(k4) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v22 = basis[1];
    var c1 = v22.b.mul(k4).divRound(this.n);
    var c22 = v1.b.neg().mul(k4).divRound(this.n);
    var p1 = c1.mul(v1.a);
    var p22 = c22.mul(v22.a);
    var q1 = c1.mul(v1.b);
    var q22 = c22.mul(v22.b);
    var k1 = k4.sub(p1).sub(p22);
    var k22 = q1.add(q22).neg();
    return {
      k1,
      k2: k22
    };
  };
  ShortCurve.prototype.pointFromX = function pointFromX(x4, odd) {
    x4 = new BN(x4, 16);
    if (!x4.red)
      x4 = x4.toRed(this.red);
    var y22 = x4.redSqr().redMul(x4).redIAdd(x4.redMul(this.a)).redIAdd(this.b);
    var y6 = y22.redSqrt();
    if (y6.redSqr().redSub(y22).cmp(this.zero) !== 0)
      throw new Error("invalid point");
    var isOdd = y6.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd)
      y6 = y6.redNeg();
    return this.point(x4, y6);
  };
  ShortCurve.prototype.validate = function validate(point) {
    if (point.inf)
      return true;
    var x4 = point.x;
    var y6 = point.y;
    var ax = this.a.redMul(x4);
    var rhs = x4.redSqr().redMul(x4).redIAdd(ax).redIAdd(this.b);
    return y6.redSqr().redISub(rhs).cmpn(0) === 0;
  };
  ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
    var npoints = this._endoWnafT1;
    var ncoeffs = this._endoWnafT2;
    for (var i8 = 0; i8 < points.length; i8++) {
      var split = this._endoSplit(coeffs[i8]);
      var p8 = points[i8];
      var beta = p8._getBeta();
      if (split.k1.negative) {
        split.k1.ineg();
        p8 = p8.neg(true);
      }
      if (split.k2.negative) {
        split.k2.ineg();
        beta = beta.neg(true);
      }
      npoints[i8 * 2] = p8;
      npoints[i8 * 2 + 1] = beta;
      ncoeffs[i8 * 2] = split.k1;
      ncoeffs[i8 * 2 + 1] = split.k2;
    }
    var res = this._wnafMulAdd(1, npoints, ncoeffs, i8 * 2, jacobianResult);
    for (var j4 = 0; j4 < i8 * 2; j4++) {
      npoints[j4] = null;
      ncoeffs[j4] = null;
    }
    return res;
  };
  function Point(curve, x4, y6, isRed) {
    Base.BasePoint.call(this, curve, "affine");
    if (x4 === null && y6 === null) {
      this.x = null;
      this.y = null;
      this.inf = true;
    } else {
      this.x = new BN(x4, 16);
      this.y = new BN(y6, 16);
      if (isRed) {
        this.x.forceRed(this.curve.red);
        this.y.forceRed(this.curve.red);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      this.inf = false;
    }
  }
  inherits4(Point, Base.BasePoint);
  ShortCurve.prototype.point = function point(x4, y6, isRed) {
    return new Point(this, x4, y6, isRed);
  };
  ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return Point.fromJSON(this, obj, red);
  };
  Point.prototype._getBeta = function _getBeta() {
    if (!this.curve.endo)
      return;
    var pre = this.precomputed;
    if (pre && pre.beta)
      return pre.beta;
    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (pre) {
      var curve = this.curve;
      var endoMul = function(p8) {
        return curve.point(p8.x.redMul(curve.endo.beta), p8.y);
      };
      pre.beta = beta;
      beta.precomputed = {
        beta: null,
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: pre.naf.points.map(endoMul)
        },
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: pre.doubles.points.map(endoMul)
        }
      };
    }
    return beta;
  };
  Point.prototype.toJSON = function toJSON2() {
    if (!this.precomputed)
      return [this.x, this.y];
    return [this.x, this.y, this.precomputed && {
      doubles: this.precomputed.doubles && {
        step: this.precomputed.doubles.step,
        points: this.precomputed.doubles.points.slice(1)
      },
      naf: this.precomputed.naf && {
        wnd: this.precomputed.naf.wnd,
        points: this.precomputed.naf.points.slice(1)
      }
    }];
  };
  Point.fromJSON = function fromJSON(curve, obj, red) {
    if (typeof obj === "string")
      obj = JSON.parse(obj);
    var res = curve.point(obj[0], obj[1], red);
    if (!obj[2])
      return res;
    function obj2point(obj2) {
      return curve.point(obj2[0], obj2[1], red);
    }
    var pre = obj[2];
    res.precomputed = {
      beta: null,
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: [res].concat(pre.doubles.points.map(obj2point))
      },
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: [res].concat(pre.naf.points.map(obj2point))
      }
    };
    return res;
  };
  Point.prototype.inspect = function inspect3() {
    if (this.isInfinity())
      return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
  };
  Point.prototype.isInfinity = function isInfinity() {
    return this.inf;
  };
  Point.prototype.add = function add(p8) {
    if (this.inf)
      return p8;
    if (p8.inf)
      return this;
    if (this.eq(p8))
      return this.dbl();
    if (this.neg().eq(p8))
      return this.curve.point(null, null);
    if (this.x.cmp(p8.x) === 0)
      return this.curve.point(null, null);
    var c8 = this.y.redSub(p8.y);
    if (c8.cmpn(0) !== 0)
      c8 = c8.redMul(this.x.redSub(p8.x).redInvm());
    var nx = c8.redSqr().redISub(this.x).redISub(p8.x);
    var ny = c8.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };
  Point.prototype.dbl = function dbl() {
    if (this.inf)
      return this;
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0)
      return this.curve.point(null, null);
    var a8 = this.curve.a;
    var x22 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c8 = x22.redAdd(x22).redIAdd(x22).redIAdd(a8).redMul(dyinv);
    var nx = c8.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c8.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };
  Point.prototype.getX = function getX() {
    return this.x.fromRed();
  };
  Point.prototype.getY = function getY() {
    return this.y.fromRed();
  };
  Point.prototype.mul = function mul(k4) {
    k4 = new BN(k4, 16);
    if (this.isInfinity())
      return this;
    else if (this._hasDoubles(k4))
      return this.curve._fixedNafMul(this, k4);
    else if (this.curve.endo)
      return this.curve._endoWnafMulAdd([this], [k4]);
    else
      return this.curve._wnafMul(this, k4);
  };
  Point.prototype.mulAdd = function mulAdd(k1, p22, k22) {
    var points = [this, p22];
    var coeffs = [k1, k22];
    if (this.curve.endo)
      return this.curve._endoWnafMulAdd(points, coeffs);
    else
      return this.curve._wnafMulAdd(1, points, coeffs, 2);
  };
  Point.prototype.jmulAdd = function jmulAdd(k1, p22, k22) {
    var points = [this, p22];
    var coeffs = [k1, k22];
    if (this.curve.endo)
      return this.curve._endoWnafMulAdd(points, coeffs, true);
    else
      return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
  };
  Point.prototype.eq = function eq(p8) {
    return this === p8 || this.inf === p8.inf && (this.inf || this.x.cmp(p8.x) === 0 && this.y.cmp(p8.y) === 0);
  };
  Point.prototype.neg = function neg(_precompute) {
    if (this.inf)
      return this;
    var res = this.curve.point(this.x, this.y.redNeg());
    if (_precompute && this.precomputed) {
      var pre = this.precomputed;
      var negate = function(p8) {
        return p8.neg();
      };
      res.precomputed = {
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: pre.naf.points.map(negate)
        },
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: pre.doubles.points.map(negate)
        }
      };
    }
    return res;
  };
  Point.prototype.toJ = function toJ() {
    if (this.inf)
      return this.curve.jpoint(null, null, null);
    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
  };
  function JPoint(curve, x4, y6, z5) {
    Base.BasePoint.call(this, curve, "jacobian");
    if (x4 === null && y6 === null && z5 === null) {
      this.x = this.curve.one;
      this.y = this.curve.one;
      this.z = new BN(0);
    } else {
      this.x = new BN(x4, 16);
      this.y = new BN(y6, 16);
      this.z = new BN(z5, 16);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;
  }
  inherits4(JPoint, Base.BasePoint);
  ShortCurve.prototype.jpoint = function jpoint(x4, y6, z5) {
    return new JPoint(this, x4, y6, z5);
  };
  JPoint.prototype.toP = function toP() {
    if (this.isInfinity())
      return this.curve.point(null, null);
    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);
    return this.curve.point(ax, ay);
  };
  JPoint.prototype.neg = function neg() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
  };
  JPoint.prototype.add = function add(p8) {
    if (this.isInfinity())
      return p8;
    if (p8.isInfinity())
      return this;
    var pz2 = p8.z.redSqr();
    var z22 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u22 = p8.x.redMul(z22);
    var s1 = this.y.redMul(pz2.redMul(p8.z));
    var s22 = p8.y.redMul(z22.redMul(this.z));
    var h8 = u1.redSub(u22);
    var r9 = s1.redSub(s22);
    if (h8.cmpn(0) === 0) {
      if (r9.cmpn(0) !== 0)
        return this.curve.jpoint(null, null, null);
      else
        return this.dbl();
    }
    var h22 = h8.redSqr();
    var h32 = h22.redMul(h8);
    var v6 = u1.redMul(h22);
    var nx = r9.redSqr().redIAdd(h32).redISub(v6).redISub(v6);
    var ny = r9.redMul(v6.redISub(nx)).redISub(s1.redMul(h32));
    var nz = this.z.redMul(p8.z).redMul(h8);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.mixedAdd = function mixedAdd(p8) {
    if (this.isInfinity())
      return p8.toJ();
    if (p8.isInfinity())
      return this;
    var z22 = this.z.redSqr();
    var u1 = this.x;
    var u22 = p8.x.redMul(z22);
    var s1 = this.y;
    var s22 = p8.y.redMul(z22).redMul(this.z);
    var h8 = u1.redSub(u22);
    var r9 = s1.redSub(s22);
    if (h8.cmpn(0) === 0) {
      if (r9.cmpn(0) !== 0)
        return this.curve.jpoint(null, null, null);
      else
        return this.dbl();
    }
    var h22 = h8.redSqr();
    var h32 = h22.redMul(h8);
    var v6 = u1.redMul(h22);
    var nx = r9.redSqr().redIAdd(h32).redISub(v6).redISub(v6);
    var ny = r9.redMul(v6.redISub(nx)).redISub(s1.redMul(h32));
    var nz = this.z.redMul(h8);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.dblp = function dblp(pow) {
    if (pow === 0)
      return this;
    if (this.isInfinity())
      return this;
    if (!pow)
      return this.dbl();
    var i8;
    if (this.curve.zeroA || this.curve.threeA) {
      var r9 = this;
      for (i8 = 0; i8 < pow; i8++)
        r9 = r9.dbl();
      return r9;
    }
    var a8 = this.curve.a;
    var tinv = this.curve.tinv;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jyd = jy.redAdd(jy);
    for (i8 = 0; i8 < pow; i8++) {
      var jx2 = jx.redSqr();
      var jyd2 = jyd.redSqr();
      var jyd4 = jyd2.redSqr();
      var c8 = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a8.redMul(jz4));
      var t1 = jx.redMul(jyd2);
      var nx = c8.redSqr().redISub(t1.redAdd(t1));
      var t22 = t1.redISub(nx);
      var dny = c8.redMul(t22);
      dny = dny.redIAdd(dny).redISub(jyd4);
      var nz = jyd.redMul(jz);
      if (i8 + 1 < pow)
        jz4 = jz4.redMul(jyd4);
      jx = nx;
      jz = nz;
      jyd = dny;
    }
    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
  };
  JPoint.prototype.dbl = function dbl() {
    if (this.isInfinity())
      return this;
    if (this.curve.zeroA)
      return this._zeroDbl();
    else if (this.curve.threeA)
      return this._threeDbl();
    else
      return this._dbl();
  };
  JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;
    if (this.zOne) {
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var yyyy = yy.redSqr();
      var s7 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s7 = s7.redIAdd(s7);
      var m6 = xx.redAdd(xx).redIAdd(xx);
      var t8 = m6.redSqr().redISub(s7).redISub(s7);
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      nx = t8;
      ny = m6.redMul(s7.redISub(t8)).redISub(yyyy8);
      nz = this.y.redAdd(this.y);
    } else {
      var a8 = this.x.redSqr();
      var b5 = this.y.redSqr();
      var c8 = b5.redSqr();
      var d6 = this.x.redAdd(b5).redSqr().redISub(a8).redISub(c8);
      d6 = d6.redIAdd(d6);
      var e11 = a8.redAdd(a8).redIAdd(a8);
      var f9 = e11.redSqr();
      var c82 = c8.redIAdd(c8);
      c82 = c82.redIAdd(c82);
      c82 = c82.redIAdd(c82);
      nx = f9.redISub(d6).redISub(d6);
      ny = e11.redMul(d6.redISub(nx)).redISub(c82);
      nz = this.y.redMul(this.z);
      nz = nz.redIAdd(nz);
    }
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;
    if (this.zOne) {
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var yyyy = yy.redSqr();
      var s7 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s7 = s7.redIAdd(s7);
      var m6 = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
      var t8 = m6.redSqr().redISub(s7).redISub(s7);
      nx = t8;
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      ny = m6.redMul(s7.redISub(t8)).redISub(yyyy8);
      nz = this.y.redAdd(this.y);
    } else {
      var delta = this.z.redSqr();
      var gamma = this.y.redSqr();
      var beta = this.x.redMul(gamma);
      var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
      alpha = alpha.redAdd(alpha).redIAdd(alpha);
      var beta4 = beta.redIAdd(beta);
      beta4 = beta4.redIAdd(beta4);
      var beta8 = beta4.redAdd(beta4);
      nx = alpha.redSqr().redISub(beta8);
      nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
      var ggamma8 = gamma.redSqr();
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype._dbl = function _dbl() {
    var a8 = this.curve.a;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();
    var c8 = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a8.redMul(jz4));
    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c8.redSqr().redISub(t1.redAdd(t1));
    var t22 = t1.redISub(nx);
    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c8.redMul(t22).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA)
      return this.dbl().add(this);
    var xx = this.x.redSqr();
    var yy = this.y.redSqr();
    var zz = this.z.redSqr();
    var yyyy = yy.redSqr();
    var m6 = xx.redAdd(xx).redIAdd(xx);
    var mm = m6.redSqr();
    var e11 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e11 = e11.redIAdd(e11);
    e11 = e11.redAdd(e11).redIAdd(e11);
    e11 = e11.redISub(mm);
    var ee3 = e11.redSqr();
    var t8 = yyyy.redIAdd(yyyy);
    t8 = t8.redIAdd(t8);
    t8 = t8.redIAdd(t8);
    t8 = t8.redIAdd(t8);
    var u8 = m6.redIAdd(e11).redSqr().redISub(mm).redISub(ee3).redISub(t8);
    var yyu4 = yy.redMul(u8);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee3).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    var ny = this.y.redMul(u8.redMul(t8.redISub(u8)).redISub(e11.redMul(ee3)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    var nz = this.z.redAdd(e11).redSqr().redISub(zz).redISub(ee3);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.mul = function mul(k4, kbase) {
    k4 = new BN(k4, kbase);
    return this.curve._wnafMul(this, k4);
  };
  JPoint.prototype.eq = function eq(p8) {
    if (p8.type === "affine")
      return this.eq(p8.toJ());
    if (this === p8)
      return true;
    var z22 = this.z.redSqr();
    var pz2 = p8.z.redSqr();
    if (this.x.redMul(pz2).redISub(p8.x.redMul(z22)).cmpn(0) !== 0)
      return false;
    var z32 = z22.redMul(this.z);
    var pz3 = pz2.redMul(p8.z);
    return this.y.redMul(pz3).redISub(p8.y.redMul(z32)).cmpn(0) === 0;
  };
  JPoint.prototype.eqXToP = function eqXToP(x4) {
    var zs = this.z.redSqr();
    var rx = x4.toRed(this.curve.red).redMul(zs);
    if (this.x.cmp(rx) === 0)
      return true;
    var xc = x4.clone();
    var t8 = this.curve.redN.redMul(zs);
    for (; ; ) {
      xc.iadd(this.curve.n);
      if (xc.cmp(this.curve.p) >= 0)
        return false;
      rx.redIAdd(t8);
      if (this.x.cmp(rx) === 0)
        return true;
    }
  };
  JPoint.prototype.inspect = function inspect3() {
    if (this.isInfinity())
      return "<EC JPoint Infinity>";
    return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
  };
  JPoint.prototype.isInfinity = function isInfinity() {
    return this.z.cmpn(0) === 0;
  };
  return exports$S;
}
function dew$Q() {
  if (_dewExec$Q)
    return exports$R;
  _dewExec$Q = true;
  var BN = dew$V();
  var inherits4 = dew$f();
  var Base = dew$S();
  var utils = dew$T();
  function MontCurve(conf) {
    Base.call(this, "mont", conf);
    this.a = new BN(conf.a, 16).toRed(this.red);
    this.b = new BN(conf.b, 16).toRed(this.red);
    this.i4 = new BN(4).toRed(this.red).redInvm();
    this.two = new BN(2).toRed(this.red);
    this.a24 = this.i4.redMul(this.a.redAdd(this.two));
  }
  inherits4(MontCurve, Base);
  exports$R = MontCurve;
  MontCurve.prototype.validate = function validate(point) {
    var x4 = point.normalize().x;
    var x22 = x4.redSqr();
    var rhs = x22.redMul(x4).redAdd(x22.redMul(this.a)).redAdd(x4);
    var y6 = rhs.redSqrt();
    return y6.redSqr().cmp(rhs) === 0;
  };
  function Point(curve, x4, z5) {
    Base.BasePoint.call(this, curve, "projective");
    if (x4 === null && z5 === null) {
      this.x = this.curve.one;
      this.z = this.curve.zero;
    } else {
      this.x = new BN(x4, 16);
      this.z = new BN(z5, 16);
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
    }
  }
  inherits4(Point, Base.BasePoint);
  MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    return this.point(utils.toArray(bytes, enc), 1);
  };
  MontCurve.prototype.point = function point(x4, z5) {
    return new Point(this, x4, z5);
  };
  MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
  };
  Point.prototype.precompute = function precompute() {
  };
  Point.prototype._encode = function _encode() {
    return this.getX().toArray("be", this.curve.p.byteLength());
  };
  Point.fromJSON = function fromJSON(curve, obj) {
    return new Point(curve, obj[0], obj[1] || curve.one);
  };
  Point.prototype.inspect = function inspect3() {
    if (this.isInfinity())
      return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
  };
  Point.prototype.isInfinity = function isInfinity() {
    return this.z.cmpn(0) === 0;
  };
  Point.prototype.dbl = function dbl() {
    var a8 = this.x.redAdd(this.z);
    var aa = a8.redSqr();
    var b5 = this.x.redSub(this.z);
    var bb = b5.redSqr();
    var c8 = aa.redSub(bb);
    var nx = aa.redMul(bb);
    var nz = c8.redMul(bb.redAdd(this.curve.a24.redMul(c8)));
    return this.curve.point(nx, nz);
  };
  Point.prototype.add = function add() {
    throw new Error("Not supported on Montgomery curve");
  };
  Point.prototype.diffAdd = function diffAdd(p8, diff) {
    var a8 = this.x.redAdd(this.z);
    var b5 = this.x.redSub(this.z);
    var c8 = p8.x.redAdd(p8.z);
    var d6 = p8.x.redSub(p8.z);
    var da = d6.redMul(a8);
    var cb = c8.redMul(b5);
    var nx = diff.z.redMul(da.redAdd(cb).redSqr());
    var nz = diff.x.redMul(da.redISub(cb).redSqr());
    return this.curve.point(nx, nz);
  };
  Point.prototype.mul = function mul(k4) {
    var t8 = k4.clone();
    var a8 = this;
    var b5 = this.curve.point(null, null);
    var c8 = this;
    for (var bits = []; t8.cmpn(0) !== 0; t8.iushrn(1))
      bits.push(t8.andln(1));
    for (var i8 = bits.length - 1; i8 >= 0; i8--) {
      if (bits[i8] === 0) {
        a8 = a8.diffAdd(b5, c8);
        b5 = b5.dbl();
      } else {
        b5 = a8.diffAdd(b5, c8);
        a8 = a8.dbl();
      }
    }
    return b5;
  };
  Point.prototype.mulAdd = function mulAdd() {
    throw new Error("Not supported on Montgomery curve");
  };
  Point.prototype.jumlAdd = function jumlAdd() {
    throw new Error("Not supported on Montgomery curve");
  };
  Point.prototype.eq = function eq(other) {
    return this.getX().cmp(other.getX()) === 0;
  };
  Point.prototype.normalize = function normalize() {
    this.x = this.x.redMul(this.z.redInvm());
    this.z = this.curve.one;
    return this;
  };
  Point.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
  };
  return exports$R;
}
function dew$P() {
  if (_dewExec$P)
    return exports$Q;
  _dewExec$P = true;
  var utils = dew$T();
  var BN = dew$V();
  var inherits4 = dew$f();
  var Base = dew$S();
  var assert2 = utils.assert;
  function EdwardsCurve(conf) {
    this.twisted = (conf.a | 0) !== 1;
    this.mOneA = this.twisted && (conf.a | 0) === -1;
    this.extended = this.mOneA;
    Base.call(this, "edwards", conf);
    this.a = new BN(conf.a, 16).umod(this.red.m);
    this.a = this.a.toRed(this.red);
    this.c = new BN(conf.c, 16).toRed(this.red);
    this.c2 = this.c.redSqr();
    this.d = new BN(conf.d, 16).toRed(this.red);
    this.dd = this.d.redAdd(this.d);
    assert2(!this.twisted || this.c.fromRed().cmpn(1) === 0);
    this.oneC = (conf.c | 0) === 1;
  }
  inherits4(EdwardsCurve, Base);
  exports$Q = EdwardsCurve;
  EdwardsCurve.prototype._mulA = function _mulA(num) {
    if (this.mOneA)
      return num.redNeg();
    else
      return this.a.redMul(num);
  };
  EdwardsCurve.prototype._mulC = function _mulC(num) {
    if (this.oneC)
      return num;
    else
      return this.c.redMul(num);
  };
  EdwardsCurve.prototype.jpoint = function jpoint(x4, y6, z5, t8) {
    return this.point(x4, y6, z5, t8);
  };
  EdwardsCurve.prototype.pointFromX = function pointFromX(x4, odd) {
    x4 = new BN(x4, 16);
    if (!x4.red)
      x4 = x4.toRed(this.red);
    var x22 = x4.redSqr();
    var rhs = this.c2.redSub(this.a.redMul(x22));
    var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x22));
    var y22 = rhs.redMul(lhs.redInvm());
    var y6 = y22.redSqrt();
    if (y6.redSqr().redSub(y22).cmp(this.zero) !== 0)
      throw new Error("invalid point");
    var isOdd = y6.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd)
      y6 = y6.redNeg();
    return this.point(x4, y6);
  };
  EdwardsCurve.prototype.pointFromY = function pointFromY(y6, odd) {
    y6 = new BN(y6, 16);
    if (!y6.red)
      y6 = y6.toRed(this.red);
    var y22 = y6.redSqr();
    var lhs = y22.redSub(this.c2);
    var rhs = y22.redMul(this.d).redMul(this.c2).redSub(this.a);
    var x22 = lhs.redMul(rhs.redInvm());
    if (x22.cmp(this.zero) === 0) {
      if (odd)
        throw new Error("invalid point");
      else
        return this.point(this.zero, y6);
    }
    var x4 = x22.redSqrt();
    if (x4.redSqr().redSub(x22).cmp(this.zero) !== 0)
      throw new Error("invalid point");
    if (x4.fromRed().isOdd() !== odd)
      x4 = x4.redNeg();
    return this.point(x4, y6);
  };
  EdwardsCurve.prototype.validate = function validate(point) {
    if (point.isInfinity())
      return true;
    point.normalize();
    var x22 = point.x.redSqr();
    var y22 = point.y.redSqr();
    var lhs = x22.redMul(this.a).redAdd(y22);
    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x22).redMul(y22)));
    return lhs.cmp(rhs) === 0;
  };
  function Point(curve, x4, y6, z5, t8) {
    Base.BasePoint.call(this, curve, "projective");
    if (x4 === null && y6 === null && z5 === null) {
      this.x = this.curve.zero;
      this.y = this.curve.one;
      this.z = this.curve.one;
      this.t = this.curve.zero;
      this.zOne = true;
    } else {
      this.x = new BN(x4, 16);
      this.y = new BN(y6, 16);
      this.z = z5 ? new BN(z5, 16) : this.curve.one;
      this.t = t8 && new BN(t8, 16);
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
      if (this.t && !this.t.red)
        this.t = this.t.toRed(this.curve.red);
      this.zOne = this.z === this.curve.one;
      if (this.curve.extended && !this.t) {
        this.t = this.x.redMul(this.y);
        if (!this.zOne)
          this.t = this.t.redMul(this.z.redInvm());
      }
    }
  }
  inherits4(Point, Base.BasePoint);
  EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
  };
  EdwardsCurve.prototype.point = function point(x4, y6, z5, t8) {
    return new Point(this, x4, y6, z5, t8);
  };
  Point.fromJSON = function fromJSON(curve, obj) {
    return new Point(curve, obj[0], obj[1], obj[2]);
  };
  Point.prototype.inspect = function inspect3() {
    if (this.isInfinity())
      return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
  };
  Point.prototype.isInfinity = function isInfinity() {
    return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
  };
  Point.prototype._extDbl = function _extDbl() {
    var a8 = this.x.redSqr();
    var b5 = this.y.redSqr();
    var c8 = this.z.redSqr();
    c8 = c8.redIAdd(c8);
    var d6 = this.curve._mulA(a8);
    var e11 = this.x.redAdd(this.y).redSqr().redISub(a8).redISub(b5);
    var g5 = d6.redAdd(b5);
    var f9 = g5.redSub(c8);
    var h8 = d6.redSub(b5);
    var nx = e11.redMul(f9);
    var ny = g5.redMul(h8);
    var nt2 = e11.redMul(h8);
    var nz = f9.redMul(g5);
    return this.curve.point(nx, ny, nz, nt2);
  };
  Point.prototype._projDbl = function _projDbl() {
    var b5 = this.x.redAdd(this.y).redSqr();
    var c8 = this.x.redSqr();
    var d6 = this.y.redSqr();
    var nx;
    var ny;
    var nz;
    var e11;
    var h8;
    var j4;
    if (this.curve.twisted) {
      e11 = this.curve._mulA(c8);
      var f9 = e11.redAdd(d6);
      if (this.zOne) {
        nx = b5.redSub(c8).redSub(d6).redMul(f9.redSub(this.curve.two));
        ny = f9.redMul(e11.redSub(d6));
        nz = f9.redSqr().redSub(f9).redSub(f9);
      } else {
        h8 = this.z.redSqr();
        j4 = f9.redSub(h8).redISub(h8);
        nx = b5.redSub(c8).redISub(d6).redMul(j4);
        ny = f9.redMul(e11.redSub(d6));
        nz = f9.redMul(j4);
      }
    } else {
      e11 = c8.redAdd(d6);
      h8 = this.curve._mulC(this.z).redSqr();
      j4 = e11.redSub(h8).redSub(h8);
      nx = this.curve._mulC(b5.redISub(e11)).redMul(j4);
      ny = this.curve._mulC(e11).redMul(c8.redISub(d6));
      nz = e11.redMul(j4);
    }
    return this.curve.point(nx, ny, nz);
  };
  Point.prototype.dbl = function dbl() {
    if (this.isInfinity())
      return this;
    if (this.curve.extended)
      return this._extDbl();
    else
      return this._projDbl();
  };
  Point.prototype._extAdd = function _extAdd(p8) {
    var a8 = this.y.redSub(this.x).redMul(p8.y.redSub(p8.x));
    var b5 = this.y.redAdd(this.x).redMul(p8.y.redAdd(p8.x));
    var c8 = this.t.redMul(this.curve.dd).redMul(p8.t);
    var d6 = this.z.redMul(p8.z.redAdd(p8.z));
    var e11 = b5.redSub(a8);
    var f9 = d6.redSub(c8);
    var g5 = d6.redAdd(c8);
    var h8 = b5.redAdd(a8);
    var nx = e11.redMul(f9);
    var ny = g5.redMul(h8);
    var nt2 = e11.redMul(h8);
    var nz = f9.redMul(g5);
    return this.curve.point(nx, ny, nz, nt2);
  };
  Point.prototype._projAdd = function _projAdd(p8) {
    var a8 = this.z.redMul(p8.z);
    var b5 = a8.redSqr();
    var c8 = this.x.redMul(p8.x);
    var d6 = this.y.redMul(p8.y);
    var e11 = this.curve.d.redMul(c8).redMul(d6);
    var f9 = b5.redSub(e11);
    var g5 = b5.redAdd(e11);
    var tmp = this.x.redAdd(this.y).redMul(p8.x.redAdd(p8.y)).redISub(c8).redISub(d6);
    var nx = a8.redMul(f9).redMul(tmp);
    var ny;
    var nz;
    if (this.curve.twisted) {
      ny = a8.redMul(g5).redMul(d6.redSub(this.curve._mulA(c8)));
      nz = f9.redMul(g5);
    } else {
      ny = a8.redMul(g5).redMul(d6.redSub(c8));
      nz = this.curve._mulC(f9).redMul(g5);
    }
    return this.curve.point(nx, ny, nz);
  };
  Point.prototype.add = function add(p8) {
    if (this.isInfinity())
      return p8;
    if (p8.isInfinity())
      return this;
    if (this.curve.extended)
      return this._extAdd(p8);
    else
      return this._projAdd(p8);
  };
  Point.prototype.mul = function mul(k4) {
    if (this._hasDoubles(k4))
      return this.curve._fixedNafMul(this, k4);
    else
      return this.curve._wnafMul(this, k4);
  };
  Point.prototype.mulAdd = function mulAdd(k1, p8, k22) {
    return this.curve._wnafMulAdd(1, [this, p8], [k1, k22], 2, false);
  };
  Point.prototype.jmulAdd = function jmulAdd(k1, p8, k22) {
    return this.curve._wnafMulAdd(1, [this, p8], [k1, k22], 2, true);
  };
  Point.prototype.normalize = function normalize() {
    if (this.zOne)
      return this;
    var zi = this.z.redInvm();
    this.x = this.x.redMul(zi);
    this.y = this.y.redMul(zi);
    if (this.t)
      this.t = this.t.redMul(zi);
    this.z = this.curve.one;
    this.zOne = true;
    return this;
  };
  Point.prototype.neg = function neg() {
    return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
  };
  Point.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
  };
  Point.prototype.getY = function getY() {
    this.normalize();
    return this.y.fromRed();
  };
  Point.prototype.eq = function eq(other) {
    return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
  };
  Point.prototype.eqXToP = function eqXToP(x4) {
    var rx = x4.toRed(this.curve.red).redMul(this.z);
    if (this.x.cmp(rx) === 0)
      return true;
    var xc = x4.clone();
    var t8 = this.curve.redN.redMul(this.z);
    for (; ; ) {
      xc.iadd(this.curve.n);
      if (xc.cmp(this.curve.p) >= 0)
        return false;
      rx.redIAdd(t8);
      if (this.x.cmp(rx) === 0)
        return true;
    }
  };
  Point.prototype.toP = Point.prototype.normalize;
  Point.prototype.mixedAdd = Point.prototype.add;
  return exports$Q;
}
function dew$O() {
  if (_dewExec$O)
    return exports$P;
  _dewExec$O = true;
  var curve = exports$P;
  curve.base = dew$S();
  curve.short = dew$R();
  curve.mont = dew$Q();
  curve.edwards = dew$P();
  return exports$P;
}
function dew$N() {
  if (_dewExec$N)
    return exports$O;
  _dewExec$N = true;
  var assert2 = dew$2m();
  var inherits4 = dew$f();
  exports$O.inherits = inherits4;
  function isSurrogatePair(msg, i8) {
    if ((msg.charCodeAt(i8) & 64512) !== 55296) {
      return false;
    }
    if (i8 < 0 || i8 + 1 >= msg.length) {
      return false;
    }
    return (msg.charCodeAt(i8 + 1) & 64512) === 56320;
  }
  function toArray2(msg, enc) {
    if (Array.isArray(msg))
      return msg.slice();
    if (!msg)
      return [];
    var res = [];
    if (typeof msg === "string") {
      if (!enc) {
        var p8 = 0;
        for (var i8 = 0; i8 < msg.length; i8++) {
          var c8 = msg.charCodeAt(i8);
          if (c8 < 128) {
            res[p8++] = c8;
          } else if (c8 < 2048) {
            res[p8++] = c8 >> 6 | 192;
            res[p8++] = c8 & 63 | 128;
          } else if (isSurrogatePair(msg, i8)) {
            c8 = 65536 + ((c8 & 1023) << 10) + (msg.charCodeAt(++i8) & 1023);
            res[p8++] = c8 >> 18 | 240;
            res[p8++] = c8 >> 12 & 63 | 128;
            res[p8++] = c8 >> 6 & 63 | 128;
            res[p8++] = c8 & 63 | 128;
          } else {
            res[p8++] = c8 >> 12 | 224;
            res[p8++] = c8 >> 6 & 63 | 128;
            res[p8++] = c8 & 63 | 128;
          }
        }
      } else if (enc === "hex") {
        msg = msg.replace(/[^a-z0-9]+/ig, "");
        if (msg.length % 2 !== 0)
          msg = "0" + msg;
        for (i8 = 0; i8 < msg.length; i8 += 2)
          res.push(parseInt(msg[i8] + msg[i8 + 1], 16));
      }
    } else {
      for (i8 = 0; i8 < msg.length; i8++)
        res[i8] = msg[i8] | 0;
    }
    return res;
  }
  exports$O.toArray = toArray2;
  function toHex(msg) {
    var res = "";
    for (var i8 = 0; i8 < msg.length; i8++)
      res += zero2(msg[i8].toString(16));
    return res;
  }
  exports$O.toHex = toHex;
  function htonl(w4) {
    var res = w4 >>> 24 | w4 >>> 8 & 65280 | w4 << 8 & 16711680 | (w4 & 255) << 24;
    return res >>> 0;
  }
  exports$O.htonl = htonl;
  function toHex32(msg, endian) {
    var res = "";
    for (var i8 = 0; i8 < msg.length; i8++) {
      var w4 = msg[i8];
      if (endian === "little")
        w4 = htonl(w4);
      res += zero8(w4.toString(16));
    }
    return res;
  }
  exports$O.toHex32 = toHex32;
  function zero2(word) {
    if (word.length === 1)
      return "0" + word;
    else
      return word;
  }
  exports$O.zero2 = zero2;
  function zero8(word) {
    if (word.length === 7)
      return "0" + word;
    else if (word.length === 6)
      return "00" + word;
    else if (word.length === 5)
      return "000" + word;
    else if (word.length === 4)
      return "0000" + word;
    else if (word.length === 3)
      return "00000" + word;
    else if (word.length === 2)
      return "000000" + word;
    else if (word.length === 1)
      return "0000000" + word;
    else
      return word;
  }
  exports$O.zero8 = zero8;
  function join32(msg, start, end, endian) {
    var len = end - start;
    assert2(len % 4 === 0);
    var res = new Array(len / 4);
    for (var i8 = 0, k4 = start; i8 < res.length; i8++, k4 += 4) {
      var w4;
      if (endian === "big")
        w4 = msg[k4] << 24 | msg[k4 + 1] << 16 | msg[k4 + 2] << 8 | msg[k4 + 3];
      else
        w4 = msg[k4 + 3] << 24 | msg[k4 + 2] << 16 | msg[k4 + 1] << 8 | msg[k4];
      res[i8] = w4 >>> 0;
    }
    return res;
  }
  exports$O.join32 = join32;
  function split32(msg, endian) {
    var res = new Array(msg.length * 4);
    for (var i8 = 0, k4 = 0; i8 < msg.length; i8++, k4 += 4) {
      var m6 = msg[i8];
      if (endian === "big") {
        res[k4] = m6 >>> 24;
        res[k4 + 1] = m6 >>> 16 & 255;
        res[k4 + 2] = m6 >>> 8 & 255;
        res[k4 + 3] = m6 & 255;
      } else {
        res[k4 + 3] = m6 >>> 24;
        res[k4 + 2] = m6 >>> 16 & 255;
        res[k4 + 1] = m6 >>> 8 & 255;
        res[k4] = m6 & 255;
      }
    }
    return res;
  }
  exports$O.split32 = split32;
  function rotr32(w4, b5) {
    return w4 >>> b5 | w4 << 32 - b5;
  }
  exports$O.rotr32 = rotr32;
  function rotl32(w4, b5) {
    return w4 << b5 | w4 >>> 32 - b5;
  }
  exports$O.rotl32 = rotl32;
  function sum32(a8, b5) {
    return a8 + b5 >>> 0;
  }
  exports$O.sum32 = sum32;
  function sum32_3(a8, b5, c8) {
    return a8 + b5 + c8 >>> 0;
  }
  exports$O.sum32_3 = sum32_3;
  function sum32_4(a8, b5, c8, d6) {
    return a8 + b5 + c8 + d6 >>> 0;
  }
  exports$O.sum32_4 = sum32_4;
  function sum32_5(a8, b5, c8, d6, e11) {
    return a8 + b5 + c8 + d6 + e11 >>> 0;
  }
  exports$O.sum32_5 = sum32_5;
  function sum64(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
  }
  exports$O.sum64 = sum64;
  function sum64_hi(ah, al, bh, bl) {
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
  }
  exports$O.sum64_hi = sum64_hi;
  function sum64_lo(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
  }
  exports$O.sum64_lo = sum64_lo;
  function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    var hi = ah + bh + ch + dh + carry;
    return hi >>> 0;
  }
  exports$O.sum64_4_hi = sum64_4_hi;
  function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
  }
  exports$O.sum64_4_lo = sum64_4_lo;
  function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = lo + el >>> 0;
    carry += lo < el ? 1 : 0;
    var hi = ah + bh + ch + dh + eh + carry;
    return hi >>> 0;
  }
  exports$O.sum64_5_hi = sum64_5_hi;
  function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var lo = al + bl + cl + dl + el;
    return lo >>> 0;
  }
  exports$O.sum64_5_lo = sum64_5_lo;
  function rotr64_hi(ah, al, num) {
    var r9 = al << 32 - num | ah >>> num;
    return r9 >>> 0;
  }
  exports$O.rotr64_hi = rotr64_hi;
  function rotr64_lo(ah, al, num) {
    var r9 = ah << 32 - num | al >>> num;
    return r9 >>> 0;
  }
  exports$O.rotr64_lo = rotr64_lo;
  function shr64_hi(ah, al, num) {
    return ah >>> num;
  }
  exports$O.shr64_hi = shr64_hi;
  function shr64_lo(ah, al, num) {
    var r9 = ah << 32 - num | al >>> num;
    return r9 >>> 0;
  }
  exports$O.shr64_lo = shr64_lo;
  return exports$O;
}
function dew$M() {
  if (_dewExec$M)
    return exports$N;
  _dewExec$M = true;
  var utils = dew$N();
  var assert2 = dew$2m();
  function BlockHash() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = "big";
    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
  }
  exports$N.BlockHash = BlockHash;
  BlockHash.prototype.update = function update(msg, enc) {
    msg = utils.toArray(msg, enc);
    if (!this.pending)
      this.pending = msg;
    else
      this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;
    if (this.pending.length >= this._delta8) {
      msg = this.pending;
      var r9 = msg.length % this._delta8;
      this.pending = msg.slice(msg.length - r9, msg.length);
      if (this.pending.length === 0)
        this.pending = null;
      msg = utils.join32(msg, 0, msg.length - r9, this.endian);
      for (var i8 = 0; i8 < msg.length; i8 += this._delta32)
        this._update(msg, i8, i8 + this._delta32);
    }
    return this;
  };
  BlockHash.prototype.digest = function digest(enc) {
    this.update(this._pad());
    assert2(this.pending === null);
    return this._digest(enc);
  };
  BlockHash.prototype._pad = function pad() {
    var len = this.pendingTotal;
    var bytes = this._delta8;
    var k4 = bytes - (len + this.padLength) % bytes;
    var res = new Array(k4 + this.padLength);
    res[0] = 128;
    for (var i8 = 1; i8 < k4; i8++)
      res[i8] = 0;
    len <<= 3;
    if (this.endian === "big") {
      for (var t8 = 8; t8 < this.padLength; t8++)
        res[i8++] = 0;
      res[i8++] = 0;
      res[i8++] = 0;
      res[i8++] = 0;
      res[i8++] = 0;
      res[i8++] = len >>> 24 & 255;
      res[i8++] = len >>> 16 & 255;
      res[i8++] = len >>> 8 & 255;
      res[i8++] = len & 255;
    } else {
      res[i8++] = len & 255;
      res[i8++] = len >>> 8 & 255;
      res[i8++] = len >>> 16 & 255;
      res[i8++] = len >>> 24 & 255;
      res[i8++] = 0;
      res[i8++] = 0;
      res[i8++] = 0;
      res[i8++] = 0;
      for (t8 = 8; t8 < this.padLength; t8++)
        res[i8++] = 0;
    }
    return res;
  };
  return exports$N;
}
function dew$L() {
  if (_dewExec$L)
    return exports$M;
  _dewExec$L = true;
  return exports$M;
}
function dew$K() {
  if (_dewExec$K)
    return exports$L;
  _dewExec$K = true;
  var utils = dew$N();
  var common = dew$M();
  var rotl32 = utils.rotl32;
  var sum32 = utils.sum32;
  var sum32_3 = utils.sum32_3;
  var sum32_4 = utils.sum32_4;
  var BlockHash = common.BlockHash;
  function RIPEMD160() {
    if (!(this instanceof RIPEMD160))
      return new RIPEMD160();
    BlockHash.call(this);
    this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
    this.endian = "little";
  }
  utils.inherits(RIPEMD160, BlockHash);
  exports$L.ripemd160 = RIPEMD160;
  RIPEMD160.blockSize = 512;
  RIPEMD160.outSize = 160;
  RIPEMD160.hmacStrength = 192;
  RIPEMD160.padLength = 64;
  RIPEMD160.prototype._update = function update(msg, start) {
    var A4 = this.h[0];
    var B4 = this.h[1];
    var C4 = this.h[2];
    var D4 = this.h[3];
    var E4 = this.h[4];
    var Ah = A4;
    var Bh = B4;
    var Ch = C4;
    var Dh = D4;
    var Eh = E4;
    for (var j4 = 0; j4 < 80; j4++) {
      var T5 = sum32(rotl32(sum32_4(A4, f9(j4, B4, C4, D4), msg[r9[j4] + start], K3(j4)), s7[j4]), E4);
      A4 = E4;
      E4 = D4;
      D4 = rotl32(C4, 10);
      C4 = B4;
      B4 = T5;
      T5 = sum32(rotl32(sum32_4(Ah, f9(79 - j4, Bh, Ch, Dh), msg[rh[j4] + start], Kh(j4)), sh[j4]), Eh);
      Ah = Eh;
      Eh = Dh;
      Dh = rotl32(Ch, 10);
      Ch = Bh;
      Bh = T5;
    }
    T5 = sum32_3(this.h[1], C4, Dh);
    this.h[1] = sum32_3(this.h[2], D4, Eh);
    this.h[2] = sum32_3(this.h[3], E4, Ah);
    this.h[3] = sum32_3(this.h[4], A4, Bh);
    this.h[4] = sum32_3(this.h[0], B4, Ch);
    this.h[0] = T5;
  };
  RIPEMD160.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils.toHex32(this.h, "little");
    else
      return utils.split32(this.h, "little");
  };
  function f9(j4, x4, y6, z5) {
    if (j4 <= 15)
      return x4 ^ y6 ^ z5;
    else if (j4 <= 31)
      return x4 & y6 | ~x4 & z5;
    else if (j4 <= 47)
      return (x4 | ~y6) ^ z5;
    else if (j4 <= 63)
      return x4 & z5 | y6 & ~z5;
    else
      return x4 ^ (y6 | ~z5);
  }
  function K3(j4) {
    if (j4 <= 15)
      return 0;
    else if (j4 <= 31)
      return 1518500249;
    else if (j4 <= 47)
      return 1859775393;
    else if (j4 <= 63)
      return 2400959708;
    else
      return 2840853838;
  }
  function Kh(j4) {
    if (j4 <= 15)
      return 1352829926;
    else if (j4 <= 31)
      return 1548603684;
    else if (j4 <= 47)
      return 1836072691;
    else if (j4 <= 63)
      return 2053994217;
    else
      return 0;
  }
  var r9 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];
  var rh = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];
  var s7 = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];
  var sh = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];
  return exports$L;
}
function dew$J() {
  if (_dewExec$J)
    return exports$K;
  _dewExec$J = true;
  var utils = dew$N();
  var assert2 = dew$2m();
  function Hmac2(hash, key, enc) {
    if (!(this instanceof Hmac2))
      return new Hmac2(hash, key, enc);
    this.Hash = hash;
    this.blockSize = hash.blockSize / 8;
    this.outSize = hash.outSize / 8;
    this.inner = null;
    this.outer = null;
    this._init(utils.toArray(key, enc));
  }
  exports$K = Hmac2;
  Hmac2.prototype._init = function init2(key) {
    if (key.length > this.blockSize)
      key = new this.Hash().update(key).digest();
    assert2(key.length <= this.blockSize);
    for (var i8 = key.length; i8 < this.blockSize; i8++)
      key.push(0);
    for (i8 = 0; i8 < key.length; i8++)
      key[i8] ^= 54;
    this.inner = new this.Hash().update(key);
    for (i8 = 0; i8 < key.length; i8++)
      key[i8] ^= 106;
    this.outer = new this.Hash().update(key);
  };
  Hmac2.prototype.update = function update(msg, enc) {
    this.inner.update(msg, enc);
    return this;
  };
  Hmac2.prototype.digest = function digest(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
  };
  return exports$K;
}
function dew$I() {
  if (_dewExec$I)
    return exports$J;
  _dewExec$I = true;
  var hash = exports$J;
  hash.utils = dew$N();
  hash.common = dew$M();
  hash.sha = dew$L();
  hash.ripemd = dew$K();
  hash.hmac = dew$J();
  hash.sha1 = hash.sha.sha1;
  hash.sha256 = hash.sha.sha256;
  hash.sha224 = hash.sha.sha224;
  hash.sha384 = hash.sha.sha384;
  hash.sha512 = hash.sha.sha512;
  hash.ripemd160 = hash.ripemd.ripemd160;
  return exports$J;
}
function dew$H() {
  if (_dewExec$H)
    return exports$I;
  _dewExec$H = true;
  exports$I = {
    doubles: {
      step: 4,
      points: [["e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a", "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"], ["8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508", "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"], ["175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739", "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"], ["363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640", "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"], ["8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c", "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"], ["723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda", "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"], ["eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa", "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"], ["100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0", "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"], ["e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d", "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"], ["feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d", "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"], ["da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1", "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"], ["53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0", "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"], ["8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047", "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"], ["385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862", "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"], ["6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7", "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"], ["3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd", "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"], ["85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83", "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"], ["948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a", "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"], ["6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8", "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"], ["e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d", "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"], ["e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725", "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"], ["213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754", "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"], ["4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c", "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"], ["fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6", "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"], ["76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39", "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"], ["c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891", "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"], ["d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b", "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"], ["b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03", "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"], ["e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d", "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"], ["a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070", "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"], ["90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4", "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"], ["8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da", "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"], ["e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11", "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"], ["8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e", "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"], ["e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41", "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"], ["b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef", "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"], ["d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8", "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"], ["324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d", "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"], ["4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96", "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"], ["9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd", "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"], ["6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5", "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"], ["a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266", "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"], ["7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71", "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"], ["928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac", "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"], ["85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751", "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"], ["ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e", "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"], ["827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241", "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"], ["eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3", "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"], ["e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f", "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"], ["1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19", "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"], ["146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be", "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"], ["fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9", "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"], ["da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2", "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"], ["a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13", "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"], ["174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c", "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"], ["959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba", "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"], ["d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151", "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"], ["64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073", "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"], ["8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458", "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"], ["13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b", "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"], ["bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366", "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"], ["8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa", "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"], ["8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0", "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"], ["dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787", "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"], ["f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e", "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"]]
    },
    naf: {
      wnd: 7,
      points: [["f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9", "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"], ["2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4", "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"], ["5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc", "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"], ["acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe", "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"], ["774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb", "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"], ["f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8", "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"], ["d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e", "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"], ["defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34", "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"], ["2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c", "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"], ["352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5", "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"], ["2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f", "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"], ["9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714", "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"], ["daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729", "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"], ["c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db", "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"], ["6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4", "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"], ["1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5", "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"], ["605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479", "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"], ["62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d", "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"], ["80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f", "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"], ["7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb", "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"], ["d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9", "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"], ["49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963", "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"], ["77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74", "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"], ["f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530", "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"], ["463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b", "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"], ["f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247", "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"], ["caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1", "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"], ["2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120", "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"], ["7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435", "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"], ["754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18", "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"], ["e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8", "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"], ["186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb", "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"], ["df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f", "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"], ["5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143", "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"], ["290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba", "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"], ["af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45", "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"], ["766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a", "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"], ["59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e", "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"], ["f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8", "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"], ["7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c", "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"], ["948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519", "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"], ["7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab", "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"], ["3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca", "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"], ["d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf", "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"], ["1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610", "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"], ["733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4", "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"], ["15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c", "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"], ["a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940", "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"], ["e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980", "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"], ["311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3", "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"], ["34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf", "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"], ["f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63", "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"], ["d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448", "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"], ["32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf", "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"], ["7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5", "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"], ["ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6", "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"], ["16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5", "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"], ["eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99", "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"], ["78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51", "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"], ["494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5", "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"], ["a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5", "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"], ["c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997", "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"], ["841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881", "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"], ["5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5", "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"], ["36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66", "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"], ["336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726", "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"], ["8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede", "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"], ["1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94", "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"], ["85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31", "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"], ["29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51", "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"], ["a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252", "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"], ["4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5", "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"], ["d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b", "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"], ["ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4", "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"], ["af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f", "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"], ["e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889", "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"], ["591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246", "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"], ["11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984", "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"], ["3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a", "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"], ["cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030", "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"], ["c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197", "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"], ["c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593", "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"], ["a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef", "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"], ["347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38", "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"], ["da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a", "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"], ["c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111", "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"], ["4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502", "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"], ["3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea", "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"], ["cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26", "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"], ["b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986", "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"], ["d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e", "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"], ["48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4", "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"], ["dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda", "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"], ["6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859", "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"], ["e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f", "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"], ["eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c", "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"], ["13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942", "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"], ["ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a", "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"], ["b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80", "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"], ["ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d", "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"], ["8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1", "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"], ["52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63", "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"], ["e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352", "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"], ["7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193", "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"], ["5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00", "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"], ["32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58", "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"], ["e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7", "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"], ["8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8", "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"], ["4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e", "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"], ["3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d", "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"], ["674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b", "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"], ["d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f", "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"], ["30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6", "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"], ["be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297", "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"], ["93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a", "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"], ["b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c", "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"], ["d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52", "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"], ["d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb", "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"], ["463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065", "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"], ["7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917", "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"], ["74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9", "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"], ["30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3", "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"], ["9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57", "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"], ["176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66", "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"], ["75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8", "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"], ["809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721", "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"], ["1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180", "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"]]
    }
  };
  return exports$I;
}
function dew$G() {
  if (_dewExec$G)
    return exports$H;
  _dewExec$G = true;
  var curves = exports$H;
  var hash = dew$I();
  var curve = dew$O();
  var utils = dew$T();
  var assert2 = utils.assert;
  function PresetCurve(options) {
    if (options.type === "short")
      this.curve = new curve.short(options);
    else if (options.type === "edwards")
      this.curve = new curve.edwards(options);
    else
      this.curve = new curve.mont(options);
    this.g = this.curve.g;
    this.n = this.curve.n;
    this.hash = options.hash;
    assert2(this.g.validate(), "Invalid curve");
    assert2(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
  }
  curves.PresetCurve = PresetCurve;
  function defineCurve(name2, options) {
    Object.defineProperty(curves, name2, {
      configurable: true,
      enumerable: true,
      get: function() {
        var curve2 = new PresetCurve(options);
        Object.defineProperty(curves, name2, {
          configurable: true,
          enumerable: true,
          value: curve2
        });
        return curve2;
      }
    });
  }
  defineCurve("p192", {
    type: "short",
    prime: "p192",
    p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
    a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
    b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
    n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
    hash: hash.sha256,
    gRed: false,
    g: ["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012", "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"]
  });
  defineCurve("p224", {
    type: "short",
    prime: "p224",
    p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
    a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
    b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
    n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
    hash: hash.sha256,
    gRed: false,
    g: ["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21", "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"]
  });
  defineCurve("p256", {
    type: "short",
    prime: null,
    p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
    a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
    b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
    n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
    hash: hash.sha256,
    gRed: false,
    g: ["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296", "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"]
  });
  defineCurve("p384", {
    type: "short",
    prime: null,
    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
    a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
    b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
    n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
    hash: hash.sha384,
    gRed: false,
    g: ["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7", "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"]
  });
  defineCurve("p521", {
    type: "short",
    prime: null,
    p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
    a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
    b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
    n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
    hash: hash.sha512,
    gRed: false,
    g: ["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66", "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"]
  });
  defineCurve("curve25519", {
    type: "mont",
    prime: "p25519",
    p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
    a: "76d06",
    b: "1",
    n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
    hash: hash.sha256,
    gRed: false,
    g: ["9"]
  });
  defineCurve("ed25519", {
    type: "edwards",
    prime: "p25519",
    p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
    a: "-1",
    c: "1",
    d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
    n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
    hash: hash.sha256,
    gRed: false,
    g: [
      "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
      "6666666666666666666666666666666666666666666666666666666666666658"
    ]
  });
  var pre;
  try {
    pre = dew$H();
  } catch (e11) {
    pre = void 0;
  }
  defineCurve("secp256k1", {
    type: "short",
    prime: "k256",
    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
    a: "0",
    b: "7",
    n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
    h: "1",
    hash: hash.sha256,
    beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
    lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
    basis: [{
      a: "3086d221a7d46bcde86c90e49284eb15",
      b: "-e4437ed6010e88286f547fa90abfe4c3"
    }, {
      a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
      b: "3086d221a7d46bcde86c90e49284eb15"
    }],
    gRed: false,
    g: ["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8", pre]
  });
  return exports$H;
}
function dew$F() {
  if (_dewExec$F)
    return exports$G;
  _dewExec$F = true;
  var hash = dew$I();
  var utils = dew$U();
  var assert2 = dew$2m();
  function HmacDRBG(options) {
    if (!(this instanceof HmacDRBG))
      return new HmacDRBG(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;
    this.outLen = this.hash.outSize;
    this.minEntropy = options.minEntropy || this.hash.hmacStrength;
    this._reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;
    var entropy = utils.toArray(options.entropy, options.entropyEnc || "hex");
    var nonce = utils.toArray(options.nonce, options.nonceEnc || "hex");
    var pers = utils.toArray(options.pers, options.persEnc || "hex");
    assert2(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
    this._init(entropy, nonce, pers);
  }
  exports$G = HmacDRBG;
  HmacDRBG.prototype._init = function init2(entropy, nonce, pers) {
    var seed = entropy.concat(nonce).concat(pers);
    this.K = new Array(this.outLen / 8);
    this.V = new Array(this.outLen / 8);
    for (var i8 = 0; i8 < this.V.length; i8++) {
      this.K[i8] = 0;
      this.V[i8] = 1;
    }
    this._update(seed);
    this._reseed = 1;
    this.reseedInterval = 281474976710656;
  };
  HmacDRBG.prototype._hmac = function hmac() {
    return new hash.hmac(this.hash, this.K);
  };
  HmacDRBG.prototype._update = function update(seed) {
    var kmac = this._hmac().update(this.V).update([0]);
    if (seed)
      kmac = kmac.update(seed);
    this.K = kmac.digest();
    this.V = this._hmac().update(this.V).digest();
    if (!seed)
      return;
    this.K = this._hmac().update(this.V).update([1]).update(seed).digest();
    this.V = this._hmac().update(this.V).digest();
  };
  HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
    if (typeof entropyEnc !== "string") {
      addEnc = add;
      add = entropyEnc;
      entropyEnc = null;
    }
    entropy = utils.toArray(entropy, entropyEnc);
    add = utils.toArray(add, addEnc);
    assert2(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
    this._update(entropy.concat(add || []));
    this._reseed = 1;
  };
  HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
    if (this._reseed > this.reseedInterval)
      throw new Error("Reseed is required");
    if (typeof enc !== "string") {
      addEnc = add;
      add = enc;
      enc = null;
    }
    if (add) {
      add = utils.toArray(add, addEnc || "hex");
      this._update(add);
    }
    var temp = [];
    while (temp.length < len) {
      this.V = this._hmac().update(this.V).digest();
      temp = temp.concat(this.V);
    }
    var res = temp.slice(0, len);
    this._update(add);
    this._reseed++;
    return utils.encode(res, enc);
  };
  return exports$G;
}
function dew$E() {
  if (_dewExec$E)
    return exports$F;
  _dewExec$E = true;
  var BN = dew$V();
  var utils = dew$T();
  var assert2 = utils.assert;
  function KeyPair(ec, options) {
    this.ec = ec;
    this.priv = null;
    this.pub = null;
    if (options.priv)
      this._importPrivate(options.priv, options.privEnc);
    if (options.pub)
      this._importPublic(options.pub, options.pubEnc);
  }
  exports$F = KeyPair;
  KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
    if (pub instanceof KeyPair)
      return pub;
    return new KeyPair(ec, {
      pub,
      pubEnc: enc
    });
  };
  KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
    if (priv instanceof KeyPair)
      return priv;
    return new KeyPair(ec, {
      priv,
      privEnc: enc
    });
  };
  KeyPair.prototype.validate = function validate() {
    var pub = this.getPublic();
    if (pub.isInfinity())
      return {
        result: false,
        reason: "Invalid public key"
      };
    if (!pub.validate())
      return {
        result: false,
        reason: "Public key is not a point"
      };
    if (!pub.mul(this.ec.curve.n).isInfinity())
      return {
        result: false,
        reason: "Public key * N != O"
      };
    return {
      result: true,
      reason: null
    };
  };
  KeyPair.prototype.getPublic = function getPublic(compact, enc) {
    if (typeof compact === "string") {
      enc = compact;
      compact = null;
    }
    if (!this.pub)
      this.pub = this.ec.g.mul(this.priv);
    if (!enc)
      return this.pub;
    return this.pub.encode(enc, compact);
  };
  KeyPair.prototype.getPrivate = function getPrivate(enc) {
    if (enc === "hex")
      return this.priv.toString(16, 2);
    else
      return this.priv;
  };
  KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
    this.priv = new BN(key, enc || 16);
    this.priv = this.priv.umod(this.ec.curve.n);
  };
  KeyPair.prototype._importPublic = function _importPublic(key, enc) {
    if (key.x || key.y) {
      if (this.ec.curve.type === "mont") {
        assert2(key.x, "Need x coordinate");
      } else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") {
        assert2(key.x && key.y, "Need both x and y coordinate");
      }
      this.pub = this.ec.curve.point(key.x, key.y);
      return;
    }
    this.pub = this.ec.curve.decodePoint(key, enc);
  };
  KeyPair.prototype.derive = function derive(pub) {
    if (!pub.validate()) {
      assert2(pub.validate(), "public point not validated");
    }
    return pub.mul(this.priv).getX();
  };
  KeyPair.prototype.sign = function sign(msg, enc, options) {
    return this.ec.sign(msg, this, enc, options);
  };
  KeyPair.prototype.verify = function verify(msg, signature) {
    return this.ec.verify(msg, signature, this);
  };
  KeyPair.prototype.inspect = function inspect3() {
    return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
  };
  return exports$F;
}
function dew$D() {
  if (_dewExec$D)
    return exports$E;
  _dewExec$D = true;
  var BN = dew$V();
  var utils = dew$T();
  var assert2 = utils.assert;
  function Signature(options, enc) {
    if (options instanceof Signature)
      return options;
    if (this._importDER(options, enc))
      return;
    assert2(options.r && options.s, "Signature without r or s");
    this.r = new BN(options.r, 16);
    this.s = new BN(options.s, 16);
    if (options.recoveryParam === void 0)
      this.recoveryParam = null;
    else
      this.recoveryParam = options.recoveryParam;
  }
  exports$E = Signature;
  function Position() {
    this.place = 0;
  }
  function getLength(buf, p8) {
    var initial = buf[p8.place++];
    if (!(initial & 128)) {
      return initial;
    }
    var octetLen = initial & 15;
    if (octetLen === 0 || octetLen > 4) {
      return false;
    }
    var val = 0;
    for (var i8 = 0, off2 = p8.place; i8 < octetLen; i8++, off2++) {
      val <<= 8;
      val |= buf[off2];
      val >>>= 0;
    }
    if (val <= 127) {
      return false;
    }
    p8.place = off2;
    return val;
  }
  function rmPadding(buf) {
    var i8 = 0;
    var len = buf.length - 1;
    while (!buf[i8] && !(buf[i8 + 1] & 128) && i8 < len) {
      i8++;
    }
    if (i8 === 0) {
      return buf;
    }
    return buf.slice(i8);
  }
  Signature.prototype._importDER = function _importDER(data, enc) {
    data = utils.toArray(data, enc);
    var p8 = new Position();
    if (data[p8.place++] !== 48) {
      return false;
    }
    var len = getLength(data, p8);
    if (len === false) {
      return false;
    }
    if (len + p8.place !== data.length) {
      return false;
    }
    if (data[p8.place++] !== 2) {
      return false;
    }
    var rlen = getLength(data, p8);
    if (rlen === false) {
      return false;
    }
    var r9 = data.slice(p8.place, rlen + p8.place);
    p8.place += rlen;
    if (data[p8.place++] !== 2) {
      return false;
    }
    var slen = getLength(data, p8);
    if (slen === false) {
      return false;
    }
    if (data.length !== slen + p8.place) {
      return false;
    }
    var s7 = data.slice(p8.place, slen + p8.place);
    if (r9[0] === 0) {
      if (r9[1] & 128) {
        r9 = r9.slice(1);
      } else {
        return false;
      }
    }
    if (s7[0] === 0) {
      if (s7[1] & 128) {
        s7 = s7.slice(1);
      } else {
        return false;
      }
    }
    this.r = new BN(r9);
    this.s = new BN(s7);
    this.recoveryParam = null;
    return true;
  };
  function constructLength(arr, len) {
    if (len < 128) {
      arr.push(len);
      return;
    }
    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
    arr.push(octets | 128);
    while (--octets) {
      arr.push(len >>> (octets << 3) & 255);
    }
    arr.push(len);
  }
  Signature.prototype.toDER = function toDER(enc) {
    var r9 = this.r.toArray();
    var s7 = this.s.toArray();
    if (r9[0] & 128)
      r9 = [0].concat(r9);
    if (s7[0] & 128)
      s7 = [0].concat(s7);
    r9 = rmPadding(r9);
    s7 = rmPadding(s7);
    while (!s7[0] && !(s7[1] & 128)) {
      s7 = s7.slice(1);
    }
    var arr = [2];
    constructLength(arr, r9.length);
    arr = arr.concat(r9);
    arr.push(2);
    constructLength(arr, s7.length);
    var backHalf = arr.concat(s7);
    var res = [48];
    constructLength(res, backHalf.length);
    res = res.concat(backHalf);
    return utils.encode(res, enc);
  };
  return exports$E;
}
function dew$C() {
  if (_dewExec$C)
    return exports$D;
  _dewExec$C = true;
  var BN = dew$V();
  var HmacDRBG = dew$F();
  var utils = dew$T();
  var curves = dew$G();
  var rand = dew$11();
  var assert2 = utils.assert;
  var KeyPair = dew$E();
  var Signature = dew$D();
  function EC(options) {
    if (!(this instanceof EC))
      return new EC(options);
    if (typeof options === "string") {
      assert2(Object.prototype.hasOwnProperty.call(curves, options), "Unknown curve " + options);
      options = curves[options];
    }
    if (options instanceof curves.PresetCurve)
      options = {
        curve: options
      };
    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);
    this.hash = options.hash || options.curve.hash;
  }
  exports$D = EC;
  EC.prototype.keyPair = function keyPair(options) {
    return new KeyPair(this, options);
  };
  EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return KeyPair.fromPrivate(this, priv, enc);
  };
  EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return KeyPair.fromPublic(this, pub, enc);
  };
  EC.prototype.genKeyPair = function genKeyPair(options) {
    if (!options)
      options = {};
    var drbg = new HmacDRBG({
      hash: this.hash,
      pers: options.pers,
      persEnc: options.persEnc || "utf8",
      entropy: options.entropy || rand(this.hash.hmacStrength),
      entropyEnc: options.entropy && options.entropyEnc || "utf8",
      nonce: this.n.toArray()
    });
    var bytes = this.n.byteLength();
    var ns2 = this.n.sub(new BN(2));
    for (; ; ) {
      var priv = new BN(drbg.generate(bytes));
      if (priv.cmp(ns2) > 0)
        continue;
      priv.iaddn(1);
      return this.keyFromPrivate(priv);
    }
  };
  EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
    var delta = msg.byteLength() * 8 - this.n.bitLength();
    if (delta > 0)
      msg = msg.ushrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0)
      return msg.sub(this.n);
    else
      return msg;
  };
  EC.prototype.sign = function sign(msg, key, enc, options) {
    if (typeof enc === "object") {
      options = enc;
      enc = null;
    }
    if (!options)
      options = {};
    key = this.keyFromPrivate(key, enc);
    msg = this._truncateToN(new BN(msg, 16));
    var bytes = this.n.byteLength();
    var bkey = key.getPrivate().toArray("be", bytes);
    var nonce = msg.toArray("be", bytes);
    var drbg = new HmacDRBG({
      hash: this.hash,
      entropy: bkey,
      nonce,
      pers: options.pers,
      persEnc: options.persEnc || "utf8"
    });
    var ns1 = this.n.sub(new BN(1));
    for (var iter = 0; ; iter++) {
      var k4 = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
      k4 = this._truncateToN(k4, true);
      if (k4.cmpn(1) <= 0 || k4.cmp(ns1) >= 0)
        continue;
      var kp = this.g.mul(k4);
      if (kp.isInfinity())
        continue;
      var kpX = kp.getX();
      var r9 = kpX.umod(this.n);
      if (r9.cmpn(0) === 0)
        continue;
      var s7 = k4.invm(this.n).mul(r9.mul(key.getPrivate()).iadd(msg));
      s7 = s7.umod(this.n);
      if (s7.cmpn(0) === 0)
        continue;
      var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r9) !== 0 ? 2 : 0);
      if (options.canonical && s7.cmp(this.nh) > 0) {
        s7 = this.n.sub(s7);
        recoveryParam ^= 1;
      }
      return new Signature({
        r: r9,
        s: s7,
        recoveryParam
      });
    }
  };
  EC.prototype.verify = function verify(msg, signature, key, enc) {
    msg = this._truncateToN(new BN(msg, 16));
    key = this.keyFromPublic(key, enc);
    signature = new Signature(signature, "hex");
    var r9 = signature.r;
    var s7 = signature.s;
    if (r9.cmpn(1) < 0 || r9.cmp(this.n) >= 0)
      return false;
    if (s7.cmpn(1) < 0 || s7.cmp(this.n) >= 0)
      return false;
    var sinv = s7.invm(this.n);
    var u1 = sinv.mul(msg).umod(this.n);
    var u22 = sinv.mul(r9).umod(this.n);
    var p8;
    if (!this.curve._maxwellTrick) {
      p8 = this.g.mulAdd(u1, key.getPublic(), u22);
      if (p8.isInfinity())
        return false;
      return p8.getX().umod(this.n).cmp(r9) === 0;
    }
    p8 = this.g.jmulAdd(u1, key.getPublic(), u22);
    if (p8.isInfinity())
      return false;
    return p8.eqXToP(r9);
  };
  EC.prototype.recoverPubKey = function(msg, signature, j4, enc) {
    assert2((3 & j4) === j4, "The recovery param is more than two bits");
    signature = new Signature(signature, enc);
    var n9 = this.n;
    var e11 = new BN(msg);
    var r9 = signature.r;
    var s7 = signature.s;
    var isYOdd = j4 & 1;
    var isSecondKey = j4 >> 1;
    if (r9.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
      throw new Error("Unable to find sencond key candinate");
    if (isSecondKey)
      r9 = this.curve.pointFromX(r9.add(this.curve.n), isYOdd);
    else
      r9 = this.curve.pointFromX(r9, isYOdd);
    var rInv = signature.r.invm(n9);
    var s1 = n9.sub(e11).mul(rInv).umod(n9);
    var s22 = s7.mul(rInv).umod(n9);
    return this.g.mulAdd(s1, r9, s22);
  };
  EC.prototype.getKeyRecoveryParam = function(e11, signature, Q3, enc) {
    signature = new Signature(signature, enc);
    if (signature.recoveryParam !== null)
      return signature.recoveryParam;
    for (var i8 = 0; i8 < 4; i8++) {
      var Qprime;
      try {
        Qprime = this.recoverPubKey(e11, signature, i8);
      } catch (e12) {
        continue;
      }
      if (Qprime.eq(Q3))
        return i8;
    }
    throw new Error("Unable to find valid recovery factor");
  };
  return exports$D;
}
function dew$B() {
  if (_dewExec$B)
    return exports$C;
  _dewExec$B = true;
  var utils = dew$T();
  var assert2 = utils.assert;
  var parseBytes = utils.parseBytes;
  var cachedProperty = utils.cachedProperty;
  function KeyPair(eddsa, params) {
    this.eddsa = eddsa;
    this._secret = parseBytes(params.secret);
    if (eddsa.isPoint(params.pub))
      this._pub = params.pub;
    else
      this._pubBytes = parseBytes(params.pub);
  }
  KeyPair.fromPublic = function fromPublic(eddsa, pub) {
    if (pub instanceof KeyPair)
      return pub;
    return new KeyPair(eddsa, {
      pub
    });
  };
  KeyPair.fromSecret = function fromSecret(eddsa, secret) {
    if (secret instanceof KeyPair)
      return secret;
    return new KeyPair(eddsa, {
      secret
    });
  };
  KeyPair.prototype.secret = function secret() {
    return this._secret;
  };
  cachedProperty(KeyPair, "pubBytes", function pubBytes() {
    return this.eddsa.encodePoint(this.pub());
  });
  cachedProperty(KeyPair, "pub", function pub() {
    if (this._pubBytes)
      return this.eddsa.decodePoint(this._pubBytes);
    return this.eddsa.g.mul(this.priv());
  });
  cachedProperty(KeyPair, "privBytes", function privBytes() {
    var eddsa = this.eddsa;
    var hash = this.hash();
    var lastIx = eddsa.encodingLength - 1;
    var a8 = hash.slice(0, eddsa.encodingLength);
    a8[0] &= 248;
    a8[lastIx] &= 127;
    a8[lastIx] |= 64;
    return a8;
  });
  cachedProperty(KeyPair, "priv", function priv() {
    return this.eddsa.decodeInt(this.privBytes());
  });
  cachedProperty(KeyPair, "hash", function hash() {
    return this.eddsa.hash().update(this.secret()).digest();
  });
  cachedProperty(KeyPair, "messagePrefix", function messagePrefix() {
    return this.hash().slice(this.eddsa.encodingLength);
  });
  KeyPair.prototype.sign = function sign(message) {
    assert2(this._secret, "KeyPair can only verify");
    return this.eddsa.sign(message, this);
  };
  KeyPair.prototype.verify = function verify(message, sig) {
    return this.eddsa.verify(message, sig, this);
  };
  KeyPair.prototype.getSecret = function getSecret(enc) {
    assert2(this._secret, "KeyPair is public only");
    return utils.encode(this.secret(), enc);
  };
  KeyPair.prototype.getPublic = function getPublic(enc) {
    return utils.encode(this.pubBytes(), enc);
  };
  exports$C = KeyPair;
  return exports$C;
}
function dew$A() {
  if (_dewExec$A)
    return exports$B;
  _dewExec$A = true;
  var BN = dew$V();
  var utils = dew$T();
  var assert2 = utils.assert;
  var cachedProperty = utils.cachedProperty;
  var parseBytes = utils.parseBytes;
  function Signature(eddsa, sig) {
    this.eddsa = eddsa;
    if (typeof sig !== "object")
      sig = parseBytes(sig);
    if (Array.isArray(sig)) {
      sig = {
        R: sig.slice(0, eddsa.encodingLength),
        S: sig.slice(eddsa.encodingLength)
      };
    }
    assert2(sig.R && sig.S, "Signature without R or S");
    if (eddsa.isPoint(sig.R))
      this._R = sig.R;
    if (sig.S instanceof BN)
      this._S = sig.S;
    this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
    this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
  }
  cachedProperty(Signature, "S", function S4() {
    return this.eddsa.decodeInt(this.Sencoded());
  });
  cachedProperty(Signature, "R", function R4() {
    return this.eddsa.decodePoint(this.Rencoded());
  });
  cachedProperty(Signature, "Rencoded", function Rencoded() {
    return this.eddsa.encodePoint(this.R());
  });
  cachedProperty(Signature, "Sencoded", function Sencoded() {
    return this.eddsa.encodeInt(this.S());
  });
  Signature.prototype.toBytes = function toBytes() {
    return this.Rencoded().concat(this.Sencoded());
  };
  Signature.prototype.toHex = function toHex() {
    return utils.encode(this.toBytes(), "hex").toUpperCase();
  };
  exports$B = Signature;
  return exports$B;
}
function dew$z() {
  if (_dewExec$z)
    return exports$A;
  _dewExec$z = true;
  var hash = dew$I();
  var curves = dew$G();
  var utils = dew$T();
  var assert2 = utils.assert;
  var parseBytes = utils.parseBytes;
  var KeyPair = dew$B();
  var Signature = dew$A();
  function EDDSA(curve) {
    assert2(curve === "ed25519", "only tested with ed25519 so far");
    if (!(this instanceof EDDSA))
      return new EDDSA(curve);
    curve = curves[curve].curve;
    this.curve = curve;
    this.g = curve.g;
    this.g.precompute(curve.n.bitLength() + 1);
    this.pointClass = curve.point().constructor;
    this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
    this.hash = hash.sha512;
  }
  exports$A = EDDSA;
  EDDSA.prototype.sign = function sign(message, secret) {
    message = parseBytes(message);
    var key = this.keyFromSecret(secret);
    var r9 = this.hashInt(key.messagePrefix(), message);
    var R4 = this.g.mul(r9);
    var Rencoded = this.encodePoint(R4);
    var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
    var S4 = r9.add(s_).umod(this.curve.n);
    return this.makeSignature({
      R: R4,
      S: S4,
      Rencoded
    });
  };
  EDDSA.prototype.verify = function verify(message, sig, pub) {
    message = parseBytes(message);
    sig = this.makeSignature(sig);
    var key = this.keyFromPublic(pub);
    var h8 = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
    var SG = this.g.mul(sig.S());
    var RplusAh = sig.R().add(key.pub().mul(h8));
    return RplusAh.eq(SG);
  };
  EDDSA.prototype.hashInt = function hashInt() {
    var hash2 = this.hash();
    for (var i8 = 0; i8 < arguments.length; i8++)
      hash2.update(arguments[i8]);
    return utils.intFromLE(hash2.digest()).umod(this.curve.n);
  };
  EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
    return KeyPair.fromPublic(this, pub);
  };
  EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
    return KeyPair.fromSecret(this, secret);
  };
  EDDSA.prototype.makeSignature = function makeSignature(sig) {
    if (sig instanceof Signature)
      return sig;
    return new Signature(this, sig);
  };
  EDDSA.prototype.encodePoint = function encodePoint(point) {
    var enc = point.getY().toArray("le", this.encodingLength);
    enc[this.encodingLength - 1] |= point.getX().isOdd() ? 128 : 0;
    return enc;
  };
  EDDSA.prototype.decodePoint = function decodePoint(bytes) {
    bytes = utils.parseBytes(bytes);
    var lastIx = bytes.length - 1;
    var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~128);
    var xIsOdd = (bytes[lastIx] & 128) !== 0;
    var y6 = utils.intFromLE(normed);
    return this.curve.pointFromY(y6, xIsOdd);
  };
  EDDSA.prototype.encodeInt = function encodeInt(num) {
    return num.toArray("le", this.encodingLength);
  };
  EDDSA.prototype.decodeInt = function decodeInt(bytes) {
    return utils.intFromLE(bytes);
  };
  EDDSA.prototype.isPoint = function isPoint(val) {
    return val instanceof this.pointClass;
  };
  return exports$A;
}
function dew$y() {
  if (_dewExec$y)
    return exports$z;
  _dewExec$y = true;
  var elliptic = exports$z;
  elliptic.version = _package.version;
  elliptic.utils = dew$T();
  elliptic.rand = dew$11();
  elliptic.curve = dew$O();
  elliptic.curves = dew$G();
  elliptic.ec = dew$C();
  elliptic.eddsa = dew$z();
  return exports$z;
}
function dew$x() {
  if (_dewExec$x)
    return module$2.exports;
  _dewExec$x = true;
  (function(module3, exports11) {
    function assert2(val, msg) {
      if (!val)
        throw new Error(msg || "Assertion failed");
    }
    function inherits4(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function() {
      };
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }
    function BN(number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }
      (this || _global$5).negative = 0;
      (this || _global$5).words = null;
      (this || _global$5).length = 0;
      (this || _global$5).red = null;
      if (number !== null) {
        if (base === "le" || base === "be") {
          endian = base;
          base = 10;
        }
        this._init(number || 0, base || 10, endian || "be");
      }
    }
    if (typeof module3 === "object") {
      module3.exports = BN;
    } else {
      exports11.BN = BN;
    }
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer3;
    try {
      if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
        Buffer3 = window.Buffer;
      } else {
        Buffer3 = buffer.Buffer;
      }
    } catch (e11) {
    }
    BN.isBN = function isBN(num) {
      if (num instanceof BN) {
        return true;
      }
      return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
      if (left.cmp(right) > 0)
        return left;
      return right;
    };
    BN.min = function min(left, right) {
      if (left.cmp(right) < 0)
        return left;
      return right;
    };
    BN.prototype._init = function init2(number, base, endian) {
      if (typeof number === "number") {
        return this._initNumber(number, base, endian);
      }
      if (typeof number === "object") {
        return this._initArray(number, base, endian);
      }
      if (base === "hex") {
        base = 16;
      }
      assert2(base === (base | 0) && base >= 2 && base <= 36);
      number = number.toString().replace(/\s+/g, "");
      var start = 0;
      if (number[0] === "-") {
        start++;
        (this || _global$5).negative = 1;
      }
      if (start < number.length) {
        if (base === 16) {
          this._parseHex(number, start, endian);
        } else {
          this._parseBase(number, base, start);
          if (endian === "le") {
            this._initArray(this.toArray(), base, endian);
          }
        }
      }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
      if (number < 0) {
        (this || _global$5).negative = 1;
        number = -number;
      }
      if (number < 67108864) {
        (this || _global$5).words = [number & 67108863];
        (this || _global$5).length = 1;
      } else if (number < 4503599627370496) {
        (this || _global$5).words = [number & 67108863, number / 67108864 & 67108863];
        (this || _global$5).length = 2;
      } else {
        assert2(number < 9007199254740992);
        (this || _global$5).words = [number & 67108863, number / 67108864 & 67108863, 1];
        (this || _global$5).length = 3;
      }
      if (endian !== "le")
        return;
      this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
      assert2(typeof number.length === "number");
      if (number.length <= 0) {
        (this || _global$5).words = [0];
        (this || _global$5).length = 1;
        return this || _global$5;
      }
      (this || _global$5).length = Math.ceil(number.length / 3);
      (this || _global$5).words = new Array((this || _global$5).length);
      for (var i8 = 0; i8 < (this || _global$5).length; i8++) {
        (this || _global$5).words[i8] = 0;
      }
      var j4, w4;
      var off2 = 0;
      if (endian === "be") {
        for (i8 = number.length - 1, j4 = 0; i8 >= 0; i8 -= 3) {
          w4 = number[i8] | number[i8 - 1] << 8 | number[i8 - 2] << 16;
          (this || _global$5).words[j4] |= w4 << off2 & 67108863;
          (this || _global$5).words[j4 + 1] = w4 >>> 26 - off2 & 67108863;
          off2 += 24;
          if (off2 >= 26) {
            off2 -= 26;
            j4++;
          }
        }
      } else if (endian === "le") {
        for (i8 = 0, j4 = 0; i8 < number.length; i8 += 3) {
          w4 = number[i8] | number[i8 + 1] << 8 | number[i8 + 2] << 16;
          (this || _global$5).words[j4] |= w4 << off2 & 67108863;
          (this || _global$5).words[j4 + 1] = w4 >>> 26 - off2 & 67108863;
          off2 += 24;
          if (off2 >= 26) {
            off2 -= 26;
            j4++;
          }
        }
      }
      return this.strip();
    };
    function parseHex4Bits(string, index) {
      var c8 = string.charCodeAt(index);
      if (c8 >= 65 && c8 <= 70) {
        return c8 - 55;
      } else if (c8 >= 97 && c8 <= 102) {
        return c8 - 87;
      } else {
        return c8 - 48 & 15;
      }
    }
    function parseHexByte(string, lowerBound, index) {
      var r9 = parseHex4Bits(string, index);
      if (index - 1 >= lowerBound) {
        r9 |= parseHex4Bits(string, index - 1) << 4;
      }
      return r9;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
      (this || _global$5).length = Math.ceil((number.length - start) / 6);
      (this || _global$5).words = new Array((this || _global$5).length);
      for (var i8 = 0; i8 < (this || _global$5).length; i8++) {
        (this || _global$5).words[i8] = 0;
      }
      var off2 = 0;
      var j4 = 0;
      var w4;
      if (endian === "be") {
        for (i8 = number.length - 1; i8 >= start; i8 -= 2) {
          w4 = parseHexByte(number, start, i8) << off2;
          (this || _global$5).words[j4] |= w4 & 67108863;
          if (off2 >= 18) {
            off2 -= 18;
            j4 += 1;
            (this || _global$5).words[j4] |= w4 >>> 26;
          } else {
            off2 += 8;
          }
        }
      } else {
        var parseLength = number.length - start;
        for (i8 = parseLength % 2 === 0 ? start + 1 : start; i8 < number.length; i8 += 2) {
          w4 = parseHexByte(number, start, i8) << off2;
          (this || _global$5).words[j4] |= w4 & 67108863;
          if (off2 >= 18) {
            off2 -= 18;
            j4 += 1;
            (this || _global$5).words[j4] |= w4 >>> 26;
          } else {
            off2 += 8;
          }
        }
      }
      this.strip();
    };
    function parseBase(str, start, end, mul) {
      var r9 = 0;
      var len = Math.min(str.length, end);
      for (var i8 = start; i8 < len; i8++) {
        var c8 = str.charCodeAt(i8) - 48;
        r9 *= mul;
        if (c8 >= 49) {
          r9 += c8 - 49 + 10;
        } else if (c8 >= 17) {
          r9 += c8 - 17 + 10;
        } else {
          r9 += c8;
        }
      }
      return r9;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
      (this || _global$5).words = [0];
      (this || _global$5).length = 1;
      for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
        limbLen++;
      }
      limbLen--;
      limbPow = limbPow / base | 0;
      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;
      var word = 0;
      for (var i8 = start; i8 < end; i8 += limbLen) {
        word = parseBase(number, i8, i8 + limbLen, base);
        this.imuln(limbPow);
        if ((this || _global$5).words[0] + word < 67108864) {
          (this || _global$5).words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i8, number.length, base);
        for (i8 = 0; i8 < mod; i8++) {
          pow *= base;
        }
        this.imuln(pow);
        if ((this || _global$5).words[0] + word < 67108864) {
          (this || _global$5).words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
      this.strip();
    };
    BN.prototype.copy = function copy(dest) {
      dest.words = new Array((this || _global$5).length);
      for (var i8 = 0; i8 < (this || _global$5).length; i8++) {
        dest.words[i8] = (this || _global$5).words[i8];
      }
      dest.length = (this || _global$5).length;
      dest.negative = (this || _global$5).negative;
      dest.red = (this || _global$5).red;
    };
    BN.prototype.clone = function clone() {
      var r9 = new BN(null);
      this.copy(r9);
      return r9;
    };
    BN.prototype._expand = function _expand(size) {
      while ((this || _global$5).length < size) {
        (this || _global$5).words[(this || _global$5).length++] = 0;
      }
      return this || _global$5;
    };
    BN.prototype.strip = function strip() {
      while ((this || _global$5).length > 1 && (this || _global$5).words[(this || _global$5).length - 1] === 0) {
        (this || _global$5).length--;
      }
      return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
      if ((this || _global$5).length === 1 && (this || _global$5).words[0] === 0) {
        (this || _global$5).negative = 0;
      }
      return this || _global$5;
    };
    BN.prototype.inspect = function inspect3() {
      return ((this || _global$5).red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    var zeros = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"];
    var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
    var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
    BN.prototype.toString = function toString3(base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;
      var out;
      if (base === 16 || base === "hex") {
        out = "";
        var off2 = 0;
        var carry = 0;
        for (var i8 = 0; i8 < (this || _global$5).length; i8++) {
          var w4 = (this || _global$5).words[i8];
          var word = ((w4 << off2 | carry) & 16777215).toString(16);
          carry = w4 >>> 24 - off2 & 16777215;
          if (carry !== 0 || i8 !== (this || _global$5).length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }
          off2 += 2;
          if (off2 >= 26) {
            off2 -= 26;
            i8--;
          }
        }
        if (carry !== 0) {
          out = carry.toString(16) + out;
        }
        while (out.length % padding !== 0) {
          out = "0" + out;
        }
        if ((this || _global$5).negative !== 0) {
          out = "-" + out;
        }
        return out;
      }
      if (base === (base | 0) && base >= 2 && base <= 36) {
        var groupSize = groupSizes[base];
        var groupBase = groupBases[base];
        out = "";
        var c8 = this.clone();
        c8.negative = 0;
        while (!c8.isZero()) {
          var r9 = c8.modn(groupBase).toString(base);
          c8 = c8.idivn(groupBase);
          if (!c8.isZero()) {
            out = zeros[groupSize - r9.length] + r9 + out;
          } else {
            out = r9 + out;
          }
        }
        if (this.isZero()) {
          out = "0" + out;
        }
        while (out.length % padding !== 0) {
          out = "0" + out;
        }
        if ((this || _global$5).negative !== 0) {
          out = "-" + out;
        }
        return out;
      }
      assert2(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
      var ret = (this || _global$5).words[0];
      if ((this || _global$5).length === 2) {
        ret += (this || _global$5).words[1] * 67108864;
      } else if ((this || _global$5).length === 3 && (this || _global$5).words[2] === 1) {
        ret += 4503599627370496 + (this || _global$5).words[1] * 67108864;
      } else if ((this || _global$5).length > 2) {
        assert2(false, "Number can only safely store up to 53 bits");
      }
      return (this || _global$5).negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON2() {
      return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
      assert2(typeof Buffer3 !== "undefined");
      return this.toArrayLike(Buffer3, endian, length);
    };
    BN.prototype.toArray = function toArray2(endian, length) {
      return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert2(byteLength <= reqLength, "byte array longer than desired length");
      assert2(reqLength > 0, "Requested array length <= 0");
      this.strip();
      var littleEndian = endian === "le";
      var res = new ArrayType(reqLength);
      var b5, i8;
      var q3 = this.clone();
      if (!littleEndian) {
        for (i8 = 0; i8 < reqLength - byteLength; i8++) {
          res[i8] = 0;
        }
        for (i8 = 0; !q3.isZero(); i8++) {
          b5 = q3.andln(255);
          q3.iushrn(8);
          res[reqLength - i8 - 1] = b5;
        }
      } else {
        for (i8 = 0; !q3.isZero(); i8++) {
          b5 = q3.andln(255);
          q3.iushrn(8);
          res[i8] = b5;
        }
        for (; i8 < reqLength; i8++) {
          res[i8] = 0;
        }
      }
      return res;
    };
    if (Math.clz32) {
      BN.prototype._countBits = function _countBits(w4) {
        return 32 - Math.clz32(w4);
      };
    } else {
      BN.prototype._countBits = function _countBits(w4) {
        var t8 = w4;
        var r9 = 0;
        if (t8 >= 4096) {
          r9 += 13;
          t8 >>>= 13;
        }
        if (t8 >= 64) {
          r9 += 7;
          t8 >>>= 7;
        }
        if (t8 >= 8) {
          r9 += 4;
          t8 >>>= 4;
        }
        if (t8 >= 2) {
          r9 += 2;
          t8 >>>= 2;
        }
        return r9 + t8;
      };
    }
    BN.prototype._zeroBits = function _zeroBits(w4) {
      if (w4 === 0)
        return 26;
      var t8 = w4;
      var r9 = 0;
      if ((t8 & 8191) === 0) {
        r9 += 13;
        t8 >>>= 13;
      }
      if ((t8 & 127) === 0) {
        r9 += 7;
        t8 >>>= 7;
      }
      if ((t8 & 15) === 0) {
        r9 += 4;
        t8 >>>= 4;
      }
      if ((t8 & 3) === 0) {
        r9 += 2;
        t8 >>>= 2;
      }
      if ((t8 & 1) === 0) {
        r9++;
      }
      return r9;
    };
    BN.prototype.bitLength = function bitLength() {
      var w4 = (this || _global$5).words[(this || _global$5).length - 1];
      var hi = this._countBits(w4);
      return ((this || _global$5).length - 1) * 26 + hi;
    };
    function toBitArray(num) {
      var w4 = new Array(num.bitLength());
      for (var bit = 0; bit < w4.length; bit++) {
        var off2 = bit / 26 | 0;
        var wbit = bit % 26;
        w4[bit] = (num.words[off2] & 1 << wbit) >>> wbit;
      }
      return w4;
    }
    BN.prototype.zeroBits = function zeroBits() {
      if (this.isZero())
        return 0;
      var r9 = 0;
      for (var i8 = 0; i8 < (this || _global$5).length; i8++) {
        var b5 = this._zeroBits((this || _global$5).words[i8]);
        r9 += b5;
        if (b5 !== 26)
          break;
      }
      return r9;
    };
    BN.prototype.byteLength = function byteLength() {
      return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
      if ((this || _global$5).negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }
      return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }
      return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
      return (this || _global$5).negative !== 0;
    };
    BN.prototype.neg = function neg() {
      return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
      if (!this.isZero()) {
        (this || _global$5).negative ^= 1;
      }
      return this || _global$5;
    };
    BN.prototype.iuor = function iuor(num) {
      while ((this || _global$5).length < num.length) {
        (this || _global$5).words[(this || _global$5).length++] = 0;
      }
      for (var i8 = 0; i8 < num.length; i8++) {
        (this || _global$5).words[i8] = (this || _global$5).words[i8] | num.words[i8];
      }
      return this.strip();
    };
    BN.prototype.ior = function ior(num) {
      assert2(((this || _global$5).negative | num.negative) === 0);
      return this.iuor(num);
    };
    BN.prototype.or = function or(num) {
      if ((this || _global$5).length > num.length)
        return this.clone().ior(num);
      return num.clone().ior(this || _global$5);
    };
    BN.prototype.uor = function uor(num) {
      if ((this || _global$5).length > num.length)
        return this.clone().iuor(num);
      return num.clone().iuor(this || _global$5);
    };
    BN.prototype.iuand = function iuand(num) {
      var b5;
      if ((this || _global$5).length > num.length) {
        b5 = num;
      } else {
        b5 = this || _global$5;
      }
      for (var i8 = 0; i8 < b5.length; i8++) {
        (this || _global$5).words[i8] = (this || _global$5).words[i8] & num.words[i8];
      }
      (this || _global$5).length = b5.length;
      return this.strip();
    };
    BN.prototype.iand = function iand(num) {
      assert2(((this || _global$5).negative | num.negative) === 0);
      return this.iuand(num);
    };
    BN.prototype.and = function and(num) {
      if ((this || _global$5).length > num.length)
        return this.clone().iand(num);
      return num.clone().iand(this || _global$5);
    };
    BN.prototype.uand = function uand(num) {
      if ((this || _global$5).length > num.length)
        return this.clone().iuand(num);
      return num.clone().iuand(this || _global$5);
    };
    BN.prototype.iuxor = function iuxor(num) {
      var a8;
      var b5;
      if ((this || _global$5).length > num.length) {
        a8 = this || _global$5;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$5;
      }
      for (var i8 = 0; i8 < b5.length; i8++) {
        (this || _global$5).words[i8] = a8.words[i8] ^ b5.words[i8];
      }
      if ((this || _global$5) !== a8) {
        for (; i8 < a8.length; i8++) {
          (this || _global$5).words[i8] = a8.words[i8];
        }
      }
      (this || _global$5).length = a8.length;
      return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
      assert2(((this || _global$5).negative | num.negative) === 0);
      return this.iuxor(num);
    };
    BN.prototype.xor = function xor(num) {
      if ((this || _global$5).length > num.length)
        return this.clone().ixor(num);
      return num.clone().ixor(this || _global$5);
    };
    BN.prototype.uxor = function uxor(num) {
      if ((this || _global$5).length > num.length)
        return this.clone().iuxor(num);
      return num.clone().iuxor(this || _global$5);
    };
    BN.prototype.inotn = function inotn(width) {
      assert2(typeof width === "number" && width >= 0);
      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;
      this._expand(bytesNeeded);
      if (bitsLeft > 0) {
        bytesNeeded--;
      }
      for (var i8 = 0; i8 < bytesNeeded; i8++) {
        (this || _global$5).words[i8] = ~(this || _global$5).words[i8] & 67108863;
      }
      if (bitsLeft > 0) {
        (this || _global$5).words[i8] = ~(this || _global$5).words[i8] & 67108863 >> 26 - bitsLeft;
      }
      return this.strip();
    };
    BN.prototype.notn = function notn(width) {
      return this.clone().inotn(width);
    };
    BN.prototype.setn = function setn(bit, val) {
      assert2(typeof bit === "number" && bit >= 0);
      var off2 = bit / 26 | 0;
      var wbit = bit % 26;
      this._expand(off2 + 1);
      if (val) {
        (this || _global$5).words[off2] = (this || _global$5).words[off2] | 1 << wbit;
      } else {
        (this || _global$5).words[off2] = (this || _global$5).words[off2] & ~(1 << wbit);
      }
      return this.strip();
    };
    BN.prototype.iadd = function iadd(num) {
      var r9;
      if ((this || _global$5).negative !== 0 && num.negative === 0) {
        (this || _global$5).negative = 0;
        r9 = this.isub(num);
        (this || _global$5).negative ^= 1;
        return this._normSign();
      } else if ((this || _global$5).negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r9 = this.isub(num);
        num.negative = 1;
        return r9._normSign();
      }
      var a8, b5;
      if ((this || _global$5).length > num.length) {
        a8 = this || _global$5;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$5;
      }
      var carry = 0;
      for (var i8 = 0; i8 < b5.length; i8++) {
        r9 = (a8.words[i8] | 0) + (b5.words[i8] | 0) + carry;
        (this || _global$5).words[i8] = r9 & 67108863;
        carry = r9 >>> 26;
      }
      for (; carry !== 0 && i8 < a8.length; i8++) {
        r9 = (a8.words[i8] | 0) + carry;
        (this || _global$5).words[i8] = r9 & 67108863;
        carry = r9 >>> 26;
      }
      (this || _global$5).length = a8.length;
      if (carry !== 0) {
        (this || _global$5).words[(this || _global$5).length] = carry;
        (this || _global$5).length++;
      } else if (a8 !== (this || _global$5)) {
        for (; i8 < a8.length; i8++) {
          (this || _global$5).words[i8] = a8.words[i8];
        }
      }
      return this || _global$5;
    };
    BN.prototype.add = function add(num) {
      var res;
      if (num.negative !== 0 && (this || _global$5).negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && (this || _global$5).negative !== 0) {
        (this || _global$5).negative = 0;
        res = num.sub(this || _global$5);
        (this || _global$5).negative = 1;
        return res;
      }
      if ((this || _global$5).length > num.length)
        return this.clone().iadd(num);
      return num.clone().iadd(this || _global$5);
    };
    BN.prototype.isub = function isub(num) {
      if (num.negative !== 0) {
        num.negative = 0;
        var r9 = this.iadd(num);
        num.negative = 1;
        return r9._normSign();
      } else if ((this || _global$5).negative !== 0) {
        (this || _global$5).negative = 0;
        this.iadd(num);
        (this || _global$5).negative = 1;
        return this._normSign();
      }
      var cmp = this.cmp(num);
      if (cmp === 0) {
        (this || _global$5).negative = 0;
        (this || _global$5).length = 1;
        (this || _global$5).words[0] = 0;
        return this || _global$5;
      }
      var a8, b5;
      if (cmp > 0) {
        a8 = this || _global$5;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$5;
      }
      var carry = 0;
      for (var i8 = 0; i8 < b5.length; i8++) {
        r9 = (a8.words[i8] | 0) - (b5.words[i8] | 0) + carry;
        carry = r9 >> 26;
        (this || _global$5).words[i8] = r9 & 67108863;
      }
      for (; carry !== 0 && i8 < a8.length; i8++) {
        r9 = (a8.words[i8] | 0) + carry;
        carry = r9 >> 26;
        (this || _global$5).words[i8] = r9 & 67108863;
      }
      if (carry === 0 && i8 < a8.length && a8 !== (this || _global$5)) {
        for (; i8 < a8.length; i8++) {
          (this || _global$5).words[i8] = a8.words[i8];
        }
      }
      (this || _global$5).length = Math.max((this || _global$5).length, i8);
      if (a8 !== (this || _global$5)) {
        (this || _global$5).negative = 1;
      }
      return this.strip();
    };
    BN.prototype.sub = function sub(num) {
      return this.clone().isub(num);
    };
    function smallMulTo(self2, num, out) {
      out.negative = num.negative ^ self2.negative;
      var len = self2.length + num.length | 0;
      out.length = len;
      len = len - 1 | 0;
      var a8 = self2.words[0] | 0;
      var b5 = num.words[0] | 0;
      var r9 = a8 * b5;
      var lo = r9 & 67108863;
      var carry = r9 / 67108864 | 0;
      out.words[0] = lo;
      for (var k4 = 1; k4 < len; k4++) {
        var ncarry = carry >>> 26;
        var rword = carry & 67108863;
        var maxJ = Math.min(k4, num.length - 1);
        for (var j4 = Math.max(0, k4 - self2.length + 1); j4 <= maxJ; j4++) {
          var i8 = k4 - j4 | 0;
          a8 = self2.words[i8] | 0;
          b5 = num.words[j4] | 0;
          r9 = a8 * b5 + rword;
          ncarry += r9 / 67108864 | 0;
          rword = r9 & 67108863;
        }
        out.words[k4] = rword | 0;
        carry = ncarry | 0;
      }
      if (carry !== 0) {
        out.words[k4] = carry | 0;
      } else {
        out.length--;
      }
      return out.strip();
    }
    var comb10MulTo = function comb10MulTo2(self2, num, out) {
      var a8 = self2.words;
      var b5 = num.words;
      var o9 = out.words;
      var c8 = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a8[0] | 0;
      var al0 = a0 & 8191;
      var ah0 = a0 >>> 13;
      var a1 = a8[1] | 0;
      var al1 = a1 & 8191;
      var ah1 = a1 >>> 13;
      var a22 = a8[2] | 0;
      var al2 = a22 & 8191;
      var ah2 = a22 >>> 13;
      var a32 = a8[3] | 0;
      var al3 = a32 & 8191;
      var ah3 = a32 >>> 13;
      var a42 = a8[4] | 0;
      var al4 = a42 & 8191;
      var ah4 = a42 >>> 13;
      var a52 = a8[5] | 0;
      var al5 = a52 & 8191;
      var ah5 = a52 >>> 13;
      var a62 = a8[6] | 0;
      var al6 = a62 & 8191;
      var ah6 = a62 >>> 13;
      var a72 = a8[7] | 0;
      var al7 = a72 & 8191;
      var ah7 = a72 >>> 13;
      var a82 = a8[8] | 0;
      var al8 = a82 & 8191;
      var ah8 = a82 >>> 13;
      var a9 = a8[9] | 0;
      var al9 = a9 & 8191;
      var ah9 = a9 >>> 13;
      var b0 = b5[0] | 0;
      var bl0 = b0 & 8191;
      var bh0 = b0 >>> 13;
      var b1 = b5[1] | 0;
      var bl1 = b1 & 8191;
      var bh1 = b1 >>> 13;
      var b22 = b5[2] | 0;
      var bl2 = b22 & 8191;
      var bh2 = b22 >>> 13;
      var b32 = b5[3] | 0;
      var bl3 = b32 & 8191;
      var bh3 = b32 >>> 13;
      var b42 = b5[4] | 0;
      var bl4 = b42 & 8191;
      var bh4 = b42 >>> 13;
      var b52 = b5[5] | 0;
      var bl5 = b52 & 8191;
      var bh5 = b52 >>> 13;
      var b6 = b5[6] | 0;
      var bl6 = b6 & 8191;
      var bh6 = b6 >>> 13;
      var b7 = b5[7] | 0;
      var bl7 = b7 & 8191;
      var bh7 = b7 >>> 13;
      var b8 = b5[8] | 0;
      var bl8 = b8 & 8191;
      var bh8 = b8 >>> 13;
      var b9 = b5[9] | 0;
      var bl9 = b9 & 8191;
      var bh9 = b9 >>> 13;
      out.negative = self2.negative ^ num.negative;
      out.length = 19;
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = mid + Math.imul(ah0, bl0) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
      w0 &= 67108863;
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = mid + Math.imul(ah1, bl0) | 0;
      hi = Math.imul(ah1, bh0);
      lo = lo + Math.imul(al0, bl1) | 0;
      mid = mid + Math.imul(al0, bh1) | 0;
      mid = mid + Math.imul(ah0, bl1) | 0;
      hi = hi + Math.imul(ah0, bh1) | 0;
      var w1 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
      w1 &= 67108863;
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = mid + Math.imul(ah2, bl0) | 0;
      hi = Math.imul(ah2, bh0);
      lo = lo + Math.imul(al1, bl1) | 0;
      mid = mid + Math.imul(al1, bh1) | 0;
      mid = mid + Math.imul(ah1, bl1) | 0;
      hi = hi + Math.imul(ah1, bh1) | 0;
      lo = lo + Math.imul(al0, bl2) | 0;
      mid = mid + Math.imul(al0, bh2) | 0;
      mid = mid + Math.imul(ah0, bl2) | 0;
      hi = hi + Math.imul(ah0, bh2) | 0;
      var w22 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w22 >>> 26) | 0;
      w22 &= 67108863;
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = mid + Math.imul(ah3, bl0) | 0;
      hi = Math.imul(ah3, bh0);
      lo = lo + Math.imul(al2, bl1) | 0;
      mid = mid + Math.imul(al2, bh1) | 0;
      mid = mid + Math.imul(ah2, bl1) | 0;
      hi = hi + Math.imul(ah2, bh1) | 0;
      lo = lo + Math.imul(al1, bl2) | 0;
      mid = mid + Math.imul(al1, bh2) | 0;
      mid = mid + Math.imul(ah1, bl2) | 0;
      hi = hi + Math.imul(ah1, bh2) | 0;
      lo = lo + Math.imul(al0, bl3) | 0;
      mid = mid + Math.imul(al0, bh3) | 0;
      mid = mid + Math.imul(ah0, bl3) | 0;
      hi = hi + Math.imul(ah0, bh3) | 0;
      var w32 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w32 >>> 26) | 0;
      w32 &= 67108863;
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = mid + Math.imul(ah4, bl0) | 0;
      hi = Math.imul(ah4, bh0);
      lo = lo + Math.imul(al3, bl1) | 0;
      mid = mid + Math.imul(al3, bh1) | 0;
      mid = mid + Math.imul(ah3, bl1) | 0;
      hi = hi + Math.imul(ah3, bh1) | 0;
      lo = lo + Math.imul(al2, bl2) | 0;
      mid = mid + Math.imul(al2, bh2) | 0;
      mid = mid + Math.imul(ah2, bl2) | 0;
      hi = hi + Math.imul(ah2, bh2) | 0;
      lo = lo + Math.imul(al1, bl3) | 0;
      mid = mid + Math.imul(al1, bh3) | 0;
      mid = mid + Math.imul(ah1, bl3) | 0;
      hi = hi + Math.imul(ah1, bh3) | 0;
      lo = lo + Math.imul(al0, bl4) | 0;
      mid = mid + Math.imul(al0, bh4) | 0;
      mid = mid + Math.imul(ah0, bl4) | 0;
      hi = hi + Math.imul(ah0, bh4) | 0;
      var w4 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
      w4 &= 67108863;
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = mid + Math.imul(ah5, bl0) | 0;
      hi = Math.imul(ah5, bh0);
      lo = lo + Math.imul(al4, bl1) | 0;
      mid = mid + Math.imul(al4, bh1) | 0;
      mid = mid + Math.imul(ah4, bl1) | 0;
      hi = hi + Math.imul(ah4, bh1) | 0;
      lo = lo + Math.imul(al3, bl2) | 0;
      mid = mid + Math.imul(al3, bh2) | 0;
      mid = mid + Math.imul(ah3, bl2) | 0;
      hi = hi + Math.imul(ah3, bh2) | 0;
      lo = lo + Math.imul(al2, bl3) | 0;
      mid = mid + Math.imul(al2, bh3) | 0;
      mid = mid + Math.imul(ah2, bl3) | 0;
      hi = hi + Math.imul(ah2, bh3) | 0;
      lo = lo + Math.imul(al1, bl4) | 0;
      mid = mid + Math.imul(al1, bh4) | 0;
      mid = mid + Math.imul(ah1, bl4) | 0;
      hi = hi + Math.imul(ah1, bh4) | 0;
      lo = lo + Math.imul(al0, bl5) | 0;
      mid = mid + Math.imul(al0, bh5) | 0;
      mid = mid + Math.imul(ah0, bl5) | 0;
      hi = hi + Math.imul(ah0, bh5) | 0;
      var w5 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
      w5 &= 67108863;
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = mid + Math.imul(ah6, bl0) | 0;
      hi = Math.imul(ah6, bh0);
      lo = lo + Math.imul(al5, bl1) | 0;
      mid = mid + Math.imul(al5, bh1) | 0;
      mid = mid + Math.imul(ah5, bl1) | 0;
      hi = hi + Math.imul(ah5, bh1) | 0;
      lo = lo + Math.imul(al4, bl2) | 0;
      mid = mid + Math.imul(al4, bh2) | 0;
      mid = mid + Math.imul(ah4, bl2) | 0;
      hi = hi + Math.imul(ah4, bh2) | 0;
      lo = lo + Math.imul(al3, bl3) | 0;
      mid = mid + Math.imul(al3, bh3) | 0;
      mid = mid + Math.imul(ah3, bl3) | 0;
      hi = hi + Math.imul(ah3, bh3) | 0;
      lo = lo + Math.imul(al2, bl4) | 0;
      mid = mid + Math.imul(al2, bh4) | 0;
      mid = mid + Math.imul(ah2, bl4) | 0;
      hi = hi + Math.imul(ah2, bh4) | 0;
      lo = lo + Math.imul(al1, bl5) | 0;
      mid = mid + Math.imul(al1, bh5) | 0;
      mid = mid + Math.imul(ah1, bl5) | 0;
      hi = hi + Math.imul(ah1, bh5) | 0;
      lo = lo + Math.imul(al0, bl6) | 0;
      mid = mid + Math.imul(al0, bh6) | 0;
      mid = mid + Math.imul(ah0, bl6) | 0;
      hi = hi + Math.imul(ah0, bh6) | 0;
      var w6 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
      w6 &= 67108863;
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = mid + Math.imul(ah7, bl0) | 0;
      hi = Math.imul(ah7, bh0);
      lo = lo + Math.imul(al6, bl1) | 0;
      mid = mid + Math.imul(al6, bh1) | 0;
      mid = mid + Math.imul(ah6, bl1) | 0;
      hi = hi + Math.imul(ah6, bh1) | 0;
      lo = lo + Math.imul(al5, bl2) | 0;
      mid = mid + Math.imul(al5, bh2) | 0;
      mid = mid + Math.imul(ah5, bl2) | 0;
      hi = hi + Math.imul(ah5, bh2) | 0;
      lo = lo + Math.imul(al4, bl3) | 0;
      mid = mid + Math.imul(al4, bh3) | 0;
      mid = mid + Math.imul(ah4, bl3) | 0;
      hi = hi + Math.imul(ah4, bh3) | 0;
      lo = lo + Math.imul(al3, bl4) | 0;
      mid = mid + Math.imul(al3, bh4) | 0;
      mid = mid + Math.imul(ah3, bl4) | 0;
      hi = hi + Math.imul(ah3, bh4) | 0;
      lo = lo + Math.imul(al2, bl5) | 0;
      mid = mid + Math.imul(al2, bh5) | 0;
      mid = mid + Math.imul(ah2, bl5) | 0;
      hi = hi + Math.imul(ah2, bh5) | 0;
      lo = lo + Math.imul(al1, bl6) | 0;
      mid = mid + Math.imul(al1, bh6) | 0;
      mid = mid + Math.imul(ah1, bl6) | 0;
      hi = hi + Math.imul(ah1, bh6) | 0;
      lo = lo + Math.imul(al0, bl7) | 0;
      mid = mid + Math.imul(al0, bh7) | 0;
      mid = mid + Math.imul(ah0, bl7) | 0;
      hi = hi + Math.imul(ah0, bh7) | 0;
      var w7 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
      w7 &= 67108863;
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = mid + Math.imul(ah8, bl0) | 0;
      hi = Math.imul(ah8, bh0);
      lo = lo + Math.imul(al7, bl1) | 0;
      mid = mid + Math.imul(al7, bh1) | 0;
      mid = mid + Math.imul(ah7, bl1) | 0;
      hi = hi + Math.imul(ah7, bh1) | 0;
      lo = lo + Math.imul(al6, bl2) | 0;
      mid = mid + Math.imul(al6, bh2) | 0;
      mid = mid + Math.imul(ah6, bl2) | 0;
      hi = hi + Math.imul(ah6, bh2) | 0;
      lo = lo + Math.imul(al5, bl3) | 0;
      mid = mid + Math.imul(al5, bh3) | 0;
      mid = mid + Math.imul(ah5, bl3) | 0;
      hi = hi + Math.imul(ah5, bh3) | 0;
      lo = lo + Math.imul(al4, bl4) | 0;
      mid = mid + Math.imul(al4, bh4) | 0;
      mid = mid + Math.imul(ah4, bl4) | 0;
      hi = hi + Math.imul(ah4, bh4) | 0;
      lo = lo + Math.imul(al3, bl5) | 0;
      mid = mid + Math.imul(al3, bh5) | 0;
      mid = mid + Math.imul(ah3, bl5) | 0;
      hi = hi + Math.imul(ah3, bh5) | 0;
      lo = lo + Math.imul(al2, bl6) | 0;
      mid = mid + Math.imul(al2, bh6) | 0;
      mid = mid + Math.imul(ah2, bl6) | 0;
      hi = hi + Math.imul(ah2, bh6) | 0;
      lo = lo + Math.imul(al1, bl7) | 0;
      mid = mid + Math.imul(al1, bh7) | 0;
      mid = mid + Math.imul(ah1, bl7) | 0;
      hi = hi + Math.imul(ah1, bh7) | 0;
      lo = lo + Math.imul(al0, bl8) | 0;
      mid = mid + Math.imul(al0, bh8) | 0;
      mid = mid + Math.imul(ah0, bl8) | 0;
      hi = hi + Math.imul(ah0, bh8) | 0;
      var w8 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
      w8 &= 67108863;
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = mid + Math.imul(ah9, bl0) | 0;
      hi = Math.imul(ah9, bh0);
      lo = lo + Math.imul(al8, bl1) | 0;
      mid = mid + Math.imul(al8, bh1) | 0;
      mid = mid + Math.imul(ah8, bl1) | 0;
      hi = hi + Math.imul(ah8, bh1) | 0;
      lo = lo + Math.imul(al7, bl2) | 0;
      mid = mid + Math.imul(al7, bh2) | 0;
      mid = mid + Math.imul(ah7, bl2) | 0;
      hi = hi + Math.imul(ah7, bh2) | 0;
      lo = lo + Math.imul(al6, bl3) | 0;
      mid = mid + Math.imul(al6, bh3) | 0;
      mid = mid + Math.imul(ah6, bl3) | 0;
      hi = hi + Math.imul(ah6, bh3) | 0;
      lo = lo + Math.imul(al5, bl4) | 0;
      mid = mid + Math.imul(al5, bh4) | 0;
      mid = mid + Math.imul(ah5, bl4) | 0;
      hi = hi + Math.imul(ah5, bh4) | 0;
      lo = lo + Math.imul(al4, bl5) | 0;
      mid = mid + Math.imul(al4, bh5) | 0;
      mid = mid + Math.imul(ah4, bl5) | 0;
      hi = hi + Math.imul(ah4, bh5) | 0;
      lo = lo + Math.imul(al3, bl6) | 0;
      mid = mid + Math.imul(al3, bh6) | 0;
      mid = mid + Math.imul(ah3, bl6) | 0;
      hi = hi + Math.imul(ah3, bh6) | 0;
      lo = lo + Math.imul(al2, bl7) | 0;
      mid = mid + Math.imul(al2, bh7) | 0;
      mid = mid + Math.imul(ah2, bl7) | 0;
      hi = hi + Math.imul(ah2, bh7) | 0;
      lo = lo + Math.imul(al1, bl8) | 0;
      mid = mid + Math.imul(al1, bh8) | 0;
      mid = mid + Math.imul(ah1, bl8) | 0;
      hi = hi + Math.imul(ah1, bh8) | 0;
      lo = lo + Math.imul(al0, bl9) | 0;
      mid = mid + Math.imul(al0, bh9) | 0;
      mid = mid + Math.imul(ah0, bl9) | 0;
      hi = hi + Math.imul(ah0, bh9) | 0;
      var w9 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
      w9 &= 67108863;
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = mid + Math.imul(ah9, bl1) | 0;
      hi = Math.imul(ah9, bh1);
      lo = lo + Math.imul(al8, bl2) | 0;
      mid = mid + Math.imul(al8, bh2) | 0;
      mid = mid + Math.imul(ah8, bl2) | 0;
      hi = hi + Math.imul(ah8, bh2) | 0;
      lo = lo + Math.imul(al7, bl3) | 0;
      mid = mid + Math.imul(al7, bh3) | 0;
      mid = mid + Math.imul(ah7, bl3) | 0;
      hi = hi + Math.imul(ah7, bh3) | 0;
      lo = lo + Math.imul(al6, bl4) | 0;
      mid = mid + Math.imul(al6, bh4) | 0;
      mid = mid + Math.imul(ah6, bl4) | 0;
      hi = hi + Math.imul(ah6, bh4) | 0;
      lo = lo + Math.imul(al5, bl5) | 0;
      mid = mid + Math.imul(al5, bh5) | 0;
      mid = mid + Math.imul(ah5, bl5) | 0;
      hi = hi + Math.imul(ah5, bh5) | 0;
      lo = lo + Math.imul(al4, bl6) | 0;
      mid = mid + Math.imul(al4, bh6) | 0;
      mid = mid + Math.imul(ah4, bl6) | 0;
      hi = hi + Math.imul(ah4, bh6) | 0;
      lo = lo + Math.imul(al3, bl7) | 0;
      mid = mid + Math.imul(al3, bh7) | 0;
      mid = mid + Math.imul(ah3, bl7) | 0;
      hi = hi + Math.imul(ah3, bh7) | 0;
      lo = lo + Math.imul(al2, bl8) | 0;
      mid = mid + Math.imul(al2, bh8) | 0;
      mid = mid + Math.imul(ah2, bl8) | 0;
      hi = hi + Math.imul(ah2, bh8) | 0;
      lo = lo + Math.imul(al1, bl9) | 0;
      mid = mid + Math.imul(al1, bh9) | 0;
      mid = mid + Math.imul(ah1, bl9) | 0;
      hi = hi + Math.imul(ah1, bh9) | 0;
      var w10 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
      w10 &= 67108863;
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = mid + Math.imul(ah9, bl2) | 0;
      hi = Math.imul(ah9, bh2);
      lo = lo + Math.imul(al8, bl3) | 0;
      mid = mid + Math.imul(al8, bh3) | 0;
      mid = mid + Math.imul(ah8, bl3) | 0;
      hi = hi + Math.imul(ah8, bh3) | 0;
      lo = lo + Math.imul(al7, bl4) | 0;
      mid = mid + Math.imul(al7, bh4) | 0;
      mid = mid + Math.imul(ah7, bl4) | 0;
      hi = hi + Math.imul(ah7, bh4) | 0;
      lo = lo + Math.imul(al6, bl5) | 0;
      mid = mid + Math.imul(al6, bh5) | 0;
      mid = mid + Math.imul(ah6, bl5) | 0;
      hi = hi + Math.imul(ah6, bh5) | 0;
      lo = lo + Math.imul(al5, bl6) | 0;
      mid = mid + Math.imul(al5, bh6) | 0;
      mid = mid + Math.imul(ah5, bl6) | 0;
      hi = hi + Math.imul(ah5, bh6) | 0;
      lo = lo + Math.imul(al4, bl7) | 0;
      mid = mid + Math.imul(al4, bh7) | 0;
      mid = mid + Math.imul(ah4, bl7) | 0;
      hi = hi + Math.imul(ah4, bh7) | 0;
      lo = lo + Math.imul(al3, bl8) | 0;
      mid = mid + Math.imul(al3, bh8) | 0;
      mid = mid + Math.imul(ah3, bl8) | 0;
      hi = hi + Math.imul(ah3, bh8) | 0;
      lo = lo + Math.imul(al2, bl9) | 0;
      mid = mid + Math.imul(al2, bh9) | 0;
      mid = mid + Math.imul(ah2, bl9) | 0;
      hi = hi + Math.imul(ah2, bh9) | 0;
      var w11 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
      w11 &= 67108863;
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = mid + Math.imul(ah9, bl3) | 0;
      hi = Math.imul(ah9, bh3);
      lo = lo + Math.imul(al8, bl4) | 0;
      mid = mid + Math.imul(al8, bh4) | 0;
      mid = mid + Math.imul(ah8, bl4) | 0;
      hi = hi + Math.imul(ah8, bh4) | 0;
      lo = lo + Math.imul(al7, bl5) | 0;
      mid = mid + Math.imul(al7, bh5) | 0;
      mid = mid + Math.imul(ah7, bl5) | 0;
      hi = hi + Math.imul(ah7, bh5) | 0;
      lo = lo + Math.imul(al6, bl6) | 0;
      mid = mid + Math.imul(al6, bh6) | 0;
      mid = mid + Math.imul(ah6, bl6) | 0;
      hi = hi + Math.imul(ah6, bh6) | 0;
      lo = lo + Math.imul(al5, bl7) | 0;
      mid = mid + Math.imul(al5, bh7) | 0;
      mid = mid + Math.imul(ah5, bl7) | 0;
      hi = hi + Math.imul(ah5, bh7) | 0;
      lo = lo + Math.imul(al4, bl8) | 0;
      mid = mid + Math.imul(al4, bh8) | 0;
      mid = mid + Math.imul(ah4, bl8) | 0;
      hi = hi + Math.imul(ah4, bh8) | 0;
      lo = lo + Math.imul(al3, bl9) | 0;
      mid = mid + Math.imul(al3, bh9) | 0;
      mid = mid + Math.imul(ah3, bl9) | 0;
      hi = hi + Math.imul(ah3, bh9) | 0;
      var w12 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
      w12 &= 67108863;
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = mid + Math.imul(ah9, bl4) | 0;
      hi = Math.imul(ah9, bh4);
      lo = lo + Math.imul(al8, bl5) | 0;
      mid = mid + Math.imul(al8, bh5) | 0;
      mid = mid + Math.imul(ah8, bl5) | 0;
      hi = hi + Math.imul(ah8, bh5) | 0;
      lo = lo + Math.imul(al7, bl6) | 0;
      mid = mid + Math.imul(al7, bh6) | 0;
      mid = mid + Math.imul(ah7, bl6) | 0;
      hi = hi + Math.imul(ah7, bh6) | 0;
      lo = lo + Math.imul(al6, bl7) | 0;
      mid = mid + Math.imul(al6, bh7) | 0;
      mid = mid + Math.imul(ah6, bl7) | 0;
      hi = hi + Math.imul(ah6, bh7) | 0;
      lo = lo + Math.imul(al5, bl8) | 0;
      mid = mid + Math.imul(al5, bh8) | 0;
      mid = mid + Math.imul(ah5, bl8) | 0;
      hi = hi + Math.imul(ah5, bh8) | 0;
      lo = lo + Math.imul(al4, bl9) | 0;
      mid = mid + Math.imul(al4, bh9) | 0;
      mid = mid + Math.imul(ah4, bl9) | 0;
      hi = hi + Math.imul(ah4, bh9) | 0;
      var w13 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
      w13 &= 67108863;
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = mid + Math.imul(ah9, bl5) | 0;
      hi = Math.imul(ah9, bh5);
      lo = lo + Math.imul(al8, bl6) | 0;
      mid = mid + Math.imul(al8, bh6) | 0;
      mid = mid + Math.imul(ah8, bl6) | 0;
      hi = hi + Math.imul(ah8, bh6) | 0;
      lo = lo + Math.imul(al7, bl7) | 0;
      mid = mid + Math.imul(al7, bh7) | 0;
      mid = mid + Math.imul(ah7, bl7) | 0;
      hi = hi + Math.imul(ah7, bh7) | 0;
      lo = lo + Math.imul(al6, bl8) | 0;
      mid = mid + Math.imul(al6, bh8) | 0;
      mid = mid + Math.imul(ah6, bl8) | 0;
      hi = hi + Math.imul(ah6, bh8) | 0;
      lo = lo + Math.imul(al5, bl9) | 0;
      mid = mid + Math.imul(al5, bh9) | 0;
      mid = mid + Math.imul(ah5, bl9) | 0;
      hi = hi + Math.imul(ah5, bh9) | 0;
      var w14 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
      w14 &= 67108863;
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = mid + Math.imul(ah9, bl6) | 0;
      hi = Math.imul(ah9, bh6);
      lo = lo + Math.imul(al8, bl7) | 0;
      mid = mid + Math.imul(al8, bh7) | 0;
      mid = mid + Math.imul(ah8, bl7) | 0;
      hi = hi + Math.imul(ah8, bh7) | 0;
      lo = lo + Math.imul(al7, bl8) | 0;
      mid = mid + Math.imul(al7, bh8) | 0;
      mid = mid + Math.imul(ah7, bl8) | 0;
      hi = hi + Math.imul(ah7, bh8) | 0;
      lo = lo + Math.imul(al6, bl9) | 0;
      mid = mid + Math.imul(al6, bh9) | 0;
      mid = mid + Math.imul(ah6, bl9) | 0;
      hi = hi + Math.imul(ah6, bh9) | 0;
      var w15 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
      w15 &= 67108863;
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = mid + Math.imul(ah9, bl7) | 0;
      hi = Math.imul(ah9, bh7);
      lo = lo + Math.imul(al8, bl8) | 0;
      mid = mid + Math.imul(al8, bh8) | 0;
      mid = mid + Math.imul(ah8, bl8) | 0;
      hi = hi + Math.imul(ah8, bh8) | 0;
      lo = lo + Math.imul(al7, bl9) | 0;
      mid = mid + Math.imul(al7, bh9) | 0;
      mid = mid + Math.imul(ah7, bl9) | 0;
      hi = hi + Math.imul(ah7, bh9) | 0;
      var w16 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
      w16 &= 67108863;
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = mid + Math.imul(ah9, bl8) | 0;
      hi = Math.imul(ah9, bh8);
      lo = lo + Math.imul(al8, bl9) | 0;
      mid = mid + Math.imul(al8, bh9) | 0;
      mid = mid + Math.imul(ah8, bl9) | 0;
      hi = hi + Math.imul(ah8, bh9) | 0;
      var w17 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
      w17 &= 67108863;
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = mid + Math.imul(ah9, bl9) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
      w18 &= 67108863;
      o9[0] = w0;
      o9[1] = w1;
      o9[2] = w22;
      o9[3] = w32;
      o9[4] = w4;
      o9[5] = w5;
      o9[6] = w6;
      o9[7] = w7;
      o9[8] = w8;
      o9[9] = w9;
      o9[10] = w10;
      o9[11] = w11;
      o9[12] = w12;
      o9[13] = w13;
      o9[14] = w14;
      o9[15] = w15;
      o9[16] = w16;
      o9[17] = w17;
      o9[18] = w18;
      if (c8 !== 0) {
        o9[19] = c8;
        out.length++;
      }
      return out;
    };
    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }
    function bigMulTo(self2, num, out) {
      out.negative = num.negative ^ self2.negative;
      out.length = self2.length + num.length;
      var carry = 0;
      var hncarry = 0;
      for (var k4 = 0; k4 < out.length - 1; k4++) {
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 67108863;
        var maxJ = Math.min(k4, num.length - 1);
        for (var j4 = Math.max(0, k4 - self2.length + 1); j4 <= maxJ; j4++) {
          var i8 = k4 - j4;
          var a8 = self2.words[i8] | 0;
          var b5 = num.words[j4] | 0;
          var r9 = a8 * b5;
          var lo = r9 & 67108863;
          ncarry = ncarry + (r9 / 67108864 | 0) | 0;
          lo = lo + rword | 0;
          rword = lo & 67108863;
          ncarry = ncarry + (lo >>> 26) | 0;
          hncarry += ncarry >>> 26;
          ncarry &= 67108863;
        }
        out.words[k4] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k4] = carry;
      } else {
        out.length--;
      }
      return out.strip();
    }
    function jumboMulTo(self2, num, out) {
      var fftm = new FFTM();
      return fftm.mulp(self2, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
      var res;
      var len = (this || _global$5).length + num.length;
      if ((this || _global$5).length === 10 && num.length === 10) {
        res = comb10MulTo(this || _global$5, num, out);
      } else if (len < 63) {
        res = smallMulTo(this || _global$5, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this || _global$5, num, out);
      } else {
        res = jumboMulTo(this || _global$5, num, out);
      }
      return res;
    };
    function FFTM(x4, y6) {
      (this || _global$5).x = x4;
      (this || _global$5).y = y6;
    }
    FFTM.prototype.makeRBT = function makeRBT(N4) {
      var t8 = new Array(N4);
      var l8 = BN.prototype._countBits(N4) - 1;
      for (var i8 = 0; i8 < N4; i8++) {
        t8[i8] = this.revBin(i8, l8, N4);
      }
      return t8;
    };
    FFTM.prototype.revBin = function revBin(x4, l8, N4) {
      if (x4 === 0 || x4 === N4 - 1)
        return x4;
      var rb = 0;
      for (var i8 = 0; i8 < l8; i8++) {
        rb |= (x4 & 1) << l8 - i8 - 1;
        x4 >>= 1;
      }
      return rb;
    };
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N4) {
      for (var i8 = 0; i8 < N4; i8++) {
        rtws[i8] = rws[rbt[i8]];
        itws[i8] = iws[rbt[i8]];
      }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N4, rbt) {
      this.permute(rbt, rws, iws, rtws, itws, N4);
      for (var s7 = 1; s7 < N4; s7 <<= 1) {
        var l8 = s7 << 1;
        var rtwdf = Math.cos(2 * Math.PI / l8);
        var itwdf = Math.sin(2 * Math.PI / l8);
        for (var p8 = 0; p8 < N4; p8 += l8) {
          var rtwdf_ = rtwdf;
          var itwdf_ = itwdf;
          for (var j4 = 0; j4 < s7; j4++) {
            var re3 = rtws[p8 + j4];
            var ie2 = itws[p8 + j4];
            var ro = rtws[p8 + j4 + s7];
            var io = itws[p8 + j4 + s7];
            var rx = rtwdf_ * ro - itwdf_ * io;
            io = rtwdf_ * io + itwdf_ * ro;
            ro = rx;
            rtws[p8 + j4] = re3 + ro;
            itws[p8 + j4] = ie2 + io;
            rtws[p8 + j4 + s7] = re3 - ro;
            itws[p8 + j4 + s7] = ie2 - io;
            if (j4 !== l8) {
              rx = rtwdf * rtwdf_ - itwdf * itwdf_;
              itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
              rtwdf_ = rx;
            }
          }
        }
      }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n9, m6) {
      var N4 = Math.max(m6, n9) | 1;
      var odd = N4 & 1;
      var i8 = 0;
      for (N4 = N4 / 2 | 0; N4; N4 = N4 >>> 1) {
        i8++;
      }
      return 1 << i8 + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N4) {
      if (N4 <= 1)
        return;
      for (var i8 = 0; i8 < N4 / 2; i8++) {
        var t8 = rws[i8];
        rws[i8] = rws[N4 - i8 - 1];
        rws[N4 - i8 - 1] = t8;
        t8 = iws[i8];
        iws[i8] = -iws[N4 - i8 - 1];
        iws[N4 - i8 - 1] = -t8;
      }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N4) {
      var carry = 0;
      for (var i8 = 0; i8 < N4 / 2; i8++) {
        var w4 = Math.round(ws[2 * i8 + 1] / N4) * 8192 + Math.round(ws[2 * i8] / N4) + carry;
        ws[i8] = w4 & 67108863;
        if (w4 < 67108864) {
          carry = 0;
        } else {
          carry = w4 / 67108864 | 0;
        }
      }
      return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N4) {
      var carry = 0;
      for (var i8 = 0; i8 < len; i8++) {
        carry = carry + (ws[i8] | 0);
        rws[2 * i8] = carry & 8191;
        carry = carry >>> 13;
        rws[2 * i8 + 1] = carry & 8191;
        carry = carry >>> 13;
      }
      for (i8 = 2 * len; i8 < N4; ++i8) {
        rws[i8] = 0;
      }
      assert2(carry === 0);
      assert2((carry & ~8191) === 0);
    };
    FFTM.prototype.stub = function stub(N4) {
      var ph = new Array(N4);
      for (var i8 = 0; i8 < N4; i8++) {
        ph[i8] = 0;
      }
      return ph;
    };
    FFTM.prototype.mulp = function mulp(x4, y6, out) {
      var N4 = 2 * this.guessLen13b(x4.length, y6.length);
      var rbt = this.makeRBT(N4);
      var _4 = this.stub(N4);
      var rws = new Array(N4);
      var rwst = new Array(N4);
      var iwst = new Array(N4);
      var nrws = new Array(N4);
      var nrwst = new Array(N4);
      var niwst = new Array(N4);
      var rmws = out.words;
      rmws.length = N4;
      this.convert13b(x4.words, x4.length, rws, N4);
      this.convert13b(y6.words, y6.length, nrws, N4);
      this.transform(rws, _4, rwst, iwst, N4, rbt);
      this.transform(nrws, _4, nrwst, niwst, N4, rbt);
      for (var i8 = 0; i8 < N4; i8++) {
        var rx = rwst[i8] * nrwst[i8] - iwst[i8] * niwst[i8];
        iwst[i8] = rwst[i8] * niwst[i8] + iwst[i8] * nrwst[i8];
        rwst[i8] = rx;
      }
      this.conjugate(rwst, iwst, N4);
      this.transform(rwst, iwst, rmws, _4, N4, rbt);
      this.conjugate(rmws, _4, N4);
      this.normalize13b(rmws, N4);
      out.negative = x4.negative ^ y6.negative;
      out.length = x4.length + y6.length;
      return out.strip();
    };
    BN.prototype.mul = function mul(num) {
      var out = new BN(null);
      out.words = new Array((this || _global$5).length + num.length);
      return this.mulTo(num, out);
    };
    BN.prototype.mulf = function mulf(num) {
      var out = new BN(null);
      out.words = new Array((this || _global$5).length + num.length);
      return jumboMulTo(this || _global$5, num, out);
    };
    BN.prototype.imul = function imul(num) {
      return this.clone().mulTo(num, this || _global$5);
    };
    BN.prototype.imuln = function imuln(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      var carry = 0;
      for (var i8 = 0; i8 < (this || _global$5).length; i8++) {
        var w4 = ((this || _global$5).words[i8] | 0) * num;
        var lo = (w4 & 67108863) + (carry & 67108863);
        carry >>= 26;
        carry += w4 / 67108864 | 0;
        carry += lo >>> 26;
        (this || _global$5).words[i8] = lo & 67108863;
      }
      if (carry !== 0) {
        (this || _global$5).words[i8] = carry;
        (this || _global$5).length++;
      }
      return this || _global$5;
    };
    BN.prototype.muln = function muln(num) {
      return this.clone().imuln(num);
    };
    BN.prototype.sqr = function sqr() {
      return this.mul(this || _global$5);
    };
    BN.prototype.isqr = function isqr() {
      return this.imul(this.clone());
    };
    BN.prototype.pow = function pow(num) {
      var w4 = toBitArray(num);
      if (w4.length === 0)
        return new BN(1);
      var res = this || _global$5;
      for (var i8 = 0; i8 < w4.length; i8++, res = res.sqr()) {
        if (w4[i8] !== 0)
          break;
      }
      if (++i8 < w4.length) {
        for (var q3 = res.sqr(); i8 < w4.length; i8++, q3 = q3.sqr()) {
          if (w4[i8] === 0)
            continue;
          res = res.mul(q3);
        }
      }
      return res;
    };
    BN.prototype.iushln = function iushln(bits) {
      assert2(typeof bits === "number" && bits >= 0);
      var r9 = bits % 26;
      var s7 = (bits - r9) / 26;
      var carryMask = 67108863 >>> 26 - r9 << 26 - r9;
      var i8;
      if (r9 !== 0) {
        var carry = 0;
        for (i8 = 0; i8 < (this || _global$5).length; i8++) {
          var newCarry = (this || _global$5).words[i8] & carryMask;
          var c8 = ((this || _global$5).words[i8] | 0) - newCarry << r9;
          (this || _global$5).words[i8] = c8 | carry;
          carry = newCarry >>> 26 - r9;
        }
        if (carry) {
          (this || _global$5).words[i8] = carry;
          (this || _global$5).length++;
        }
      }
      if (s7 !== 0) {
        for (i8 = (this || _global$5).length - 1; i8 >= 0; i8--) {
          (this || _global$5).words[i8 + s7] = (this || _global$5).words[i8];
        }
        for (i8 = 0; i8 < s7; i8++) {
          (this || _global$5).words[i8] = 0;
        }
        (this || _global$5).length += s7;
      }
      return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
      assert2((this || _global$5).negative === 0);
      return this.iushln(bits);
    };
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
      assert2(typeof bits === "number" && bits >= 0);
      var h8;
      if (hint) {
        h8 = (hint - hint % 26) / 26;
      } else {
        h8 = 0;
      }
      var r9 = bits % 26;
      var s7 = Math.min((bits - r9) / 26, (this || _global$5).length);
      var mask = 67108863 ^ 67108863 >>> r9 << r9;
      var maskedWords = extended;
      h8 -= s7;
      h8 = Math.max(0, h8);
      if (maskedWords) {
        for (var i8 = 0; i8 < s7; i8++) {
          maskedWords.words[i8] = (this || _global$5).words[i8];
        }
        maskedWords.length = s7;
      }
      if (s7 === 0)
        ;
      else if ((this || _global$5).length > s7) {
        (this || _global$5).length -= s7;
        for (i8 = 0; i8 < (this || _global$5).length; i8++) {
          (this || _global$5).words[i8] = (this || _global$5).words[i8 + s7];
        }
      } else {
        (this || _global$5).words[0] = 0;
        (this || _global$5).length = 1;
      }
      var carry = 0;
      for (i8 = (this || _global$5).length - 1; i8 >= 0 && (carry !== 0 || i8 >= h8); i8--) {
        var word = (this || _global$5).words[i8] | 0;
        (this || _global$5).words[i8] = carry << 26 - r9 | word >>> r9;
        carry = word & mask;
      }
      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }
      if ((this || _global$5).length === 0) {
        (this || _global$5).words[0] = 0;
        (this || _global$5).length = 1;
      }
      return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
      assert2((this || _global$5).negative === 0);
      return this.iushrn(bits, hint, extended);
    };
    BN.prototype.shln = function shln(bits) {
      return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
      return this.clone().iushln(bits);
    };
    BN.prototype.shrn = function shrn(bits) {
      return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
      return this.clone().iushrn(bits);
    };
    BN.prototype.testn = function testn(bit) {
      assert2(typeof bit === "number" && bit >= 0);
      var r9 = bit % 26;
      var s7 = (bit - r9) / 26;
      var q3 = 1 << r9;
      if ((this || _global$5).length <= s7)
        return false;
      var w4 = (this || _global$5).words[s7];
      return !!(w4 & q3);
    };
    BN.prototype.imaskn = function imaskn(bits) {
      assert2(typeof bits === "number" && bits >= 0);
      var r9 = bits % 26;
      var s7 = (bits - r9) / 26;
      assert2((this || _global$5).negative === 0, "imaskn works only with positive numbers");
      if ((this || _global$5).length <= s7) {
        return this || _global$5;
      }
      if (r9 !== 0) {
        s7++;
      }
      (this || _global$5).length = Math.min(s7, (this || _global$5).length);
      if (r9 !== 0) {
        var mask = 67108863 ^ 67108863 >>> r9 << r9;
        (this || _global$5).words[(this || _global$5).length - 1] &= mask;
      }
      return this.strip();
    };
    BN.prototype.maskn = function maskn(bits) {
      return this.clone().imaskn(bits);
    };
    BN.prototype.iaddn = function iaddn(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      if (num < 0)
        return this.isubn(-num);
      if ((this || _global$5).negative !== 0) {
        if ((this || _global$5).length === 1 && ((this || _global$5).words[0] | 0) < num) {
          (this || _global$5).words[0] = num - ((this || _global$5).words[0] | 0);
          (this || _global$5).negative = 0;
          return this || _global$5;
        }
        (this || _global$5).negative = 0;
        this.isubn(num);
        (this || _global$5).negative = 1;
        return this || _global$5;
      }
      return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
      (this || _global$5).words[0] += num;
      for (var i8 = 0; i8 < (this || _global$5).length && (this || _global$5).words[i8] >= 67108864; i8++) {
        (this || _global$5).words[i8] -= 67108864;
        if (i8 === (this || _global$5).length - 1) {
          (this || _global$5).words[i8 + 1] = 1;
        } else {
          (this || _global$5).words[i8 + 1]++;
        }
      }
      (this || _global$5).length = Math.max((this || _global$5).length, i8 + 1);
      return this || _global$5;
    };
    BN.prototype.isubn = function isubn(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      if (num < 0)
        return this.iaddn(-num);
      if ((this || _global$5).negative !== 0) {
        (this || _global$5).negative = 0;
        this.iaddn(num);
        (this || _global$5).negative = 1;
        return this || _global$5;
      }
      (this || _global$5).words[0] -= num;
      if ((this || _global$5).length === 1 && (this || _global$5).words[0] < 0) {
        (this || _global$5).words[0] = -(this || _global$5).words[0];
        (this || _global$5).negative = 1;
      } else {
        for (var i8 = 0; i8 < (this || _global$5).length && (this || _global$5).words[i8] < 0; i8++) {
          (this || _global$5).words[i8] += 67108864;
          (this || _global$5).words[i8 + 1] -= 1;
        }
      }
      return this.strip();
    };
    BN.prototype.addn = function addn(num) {
      return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
      return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
      (this || _global$5).negative = 0;
      return this || _global$5;
    };
    BN.prototype.abs = function abs() {
      return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
      var len = num.length + shift;
      var i8;
      this._expand(len);
      var w4;
      var carry = 0;
      for (i8 = 0; i8 < num.length; i8++) {
        w4 = ((this || _global$5).words[i8 + shift] | 0) + carry;
        var right = (num.words[i8] | 0) * mul;
        w4 -= right & 67108863;
        carry = (w4 >> 26) - (right / 67108864 | 0);
        (this || _global$5).words[i8 + shift] = w4 & 67108863;
      }
      for (; i8 < (this || _global$5).length - shift; i8++) {
        w4 = ((this || _global$5).words[i8 + shift] | 0) + carry;
        carry = w4 >> 26;
        (this || _global$5).words[i8 + shift] = w4 & 67108863;
      }
      if (carry === 0)
        return this.strip();
      assert2(carry === -1);
      carry = 0;
      for (i8 = 0; i8 < (this || _global$5).length; i8++) {
        w4 = -((this || _global$5).words[i8] | 0) + carry;
        carry = w4 >> 26;
        (this || _global$5).words[i8] = w4 & 67108863;
      }
      (this || _global$5).negative = 1;
      return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
      var shift = (this || _global$5).length - num.length;
      var a8 = this.clone();
      var b5 = num;
      var bhi = b5.words[b5.length - 1] | 0;
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b5 = b5.ushln(shift);
        a8.iushln(shift);
        bhi = b5.words[b5.length - 1] | 0;
      }
      var m6 = a8.length - b5.length;
      var q3;
      if (mode !== "mod") {
        q3 = new BN(null);
        q3.length = m6 + 1;
        q3.words = new Array(q3.length);
        for (var i8 = 0; i8 < q3.length; i8++) {
          q3.words[i8] = 0;
        }
      }
      var diff = a8.clone()._ishlnsubmul(b5, 1, m6);
      if (diff.negative === 0) {
        a8 = diff;
        if (q3) {
          q3.words[m6] = 1;
        }
      }
      for (var j4 = m6 - 1; j4 >= 0; j4--) {
        var qj = (a8.words[b5.length + j4] | 0) * 67108864 + (a8.words[b5.length + j4 - 1] | 0);
        qj = Math.min(qj / bhi | 0, 67108863);
        a8._ishlnsubmul(b5, qj, j4);
        while (a8.negative !== 0) {
          qj--;
          a8.negative = 0;
          a8._ishlnsubmul(b5, 1, j4);
          if (!a8.isZero()) {
            a8.negative ^= 1;
          }
        }
        if (q3) {
          q3.words[j4] = qj;
        }
      }
      if (q3) {
        q3.strip();
      }
      a8.strip();
      if (mode !== "div" && shift !== 0) {
        a8.iushrn(shift);
      }
      return {
        div: q3 || null,
        mod: a8
      };
    };
    BN.prototype.divmod = function divmod(num, mode, positive) {
      assert2(!num.isZero());
      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }
      var div, mod, res;
      if ((this || _global$5).negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);
        if (mode !== "mod") {
          div = res.div.neg();
        }
        if (mode !== "div") {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }
        return {
          div,
          mod
        };
      }
      if ((this || _global$5).negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);
        if (mode !== "mod") {
          div = res.div.neg();
        }
        return {
          div,
          mod: res.mod
        };
      }
      if (((this || _global$5).negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);
        if (mode !== "div") {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }
        return {
          div: res.div,
          mod
        };
      }
      if (num.length > (this || _global$5).length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this || _global$5
        };
      }
      if (num.length === 1) {
        if (mode === "div") {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }
        if (mode === "mod") {
          return {
            div: null,
            mod: new BN(this.modn(num.words[0]))
          };
        }
        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modn(num.words[0]))
        };
      }
      return this._wordDiv(num, mode);
    };
    BN.prototype.div = function div(num) {
      return this.divmod(num, "div", false).div;
    };
    BN.prototype.mod = function mod(num) {
      return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
      return this.divmod(num, "mod", true).mod;
    };
    BN.prototype.divRound = function divRound(num) {
      var dm = this.divmod(num);
      if (dm.mod.isZero())
        return dm.div;
      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
      var half = num.ushrn(1);
      var r22 = num.andln(1);
      var cmp = mod.cmp(half);
      if (cmp < 0 || r22 === 1 && cmp === 0)
        return dm.div;
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
      assert2(num <= 67108863);
      var p8 = (1 << 26) % num;
      var acc = 0;
      for (var i8 = (this || _global$5).length - 1; i8 >= 0; i8--) {
        acc = (p8 * acc + ((this || _global$5).words[i8] | 0)) % num;
      }
      return acc;
    };
    BN.prototype.idivn = function idivn(num) {
      assert2(num <= 67108863);
      var carry = 0;
      for (var i8 = (this || _global$5).length - 1; i8 >= 0; i8--) {
        var w4 = ((this || _global$5).words[i8] | 0) + carry * 67108864;
        (this || _global$5).words[i8] = w4 / num | 0;
        carry = w4 % num;
      }
      return this.strip();
    };
    BN.prototype.divn = function divn(num) {
      return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p8) {
      assert2(p8.negative === 0);
      assert2(!p8.isZero());
      var x4 = this || _global$5;
      var y6 = p8.clone();
      if (x4.negative !== 0) {
        x4 = x4.umod(p8);
      } else {
        x4 = x4.clone();
      }
      var A4 = new BN(1);
      var B4 = new BN(0);
      var C4 = new BN(0);
      var D4 = new BN(1);
      var g5 = 0;
      while (x4.isEven() && y6.isEven()) {
        x4.iushrn(1);
        y6.iushrn(1);
        ++g5;
      }
      var yp = y6.clone();
      var xp = x4.clone();
      while (!x4.isZero()) {
        for (var i8 = 0, im = 1; (x4.words[0] & im) === 0 && i8 < 26; ++i8, im <<= 1)
          ;
        if (i8 > 0) {
          x4.iushrn(i8);
          while (i8-- > 0) {
            if (A4.isOdd() || B4.isOdd()) {
              A4.iadd(yp);
              B4.isub(xp);
            }
            A4.iushrn(1);
            B4.iushrn(1);
          }
        }
        for (var j4 = 0, jm = 1; (y6.words[0] & jm) === 0 && j4 < 26; ++j4, jm <<= 1)
          ;
        if (j4 > 0) {
          y6.iushrn(j4);
          while (j4-- > 0) {
            if (C4.isOdd() || D4.isOdd()) {
              C4.iadd(yp);
              D4.isub(xp);
            }
            C4.iushrn(1);
            D4.iushrn(1);
          }
        }
        if (x4.cmp(y6) >= 0) {
          x4.isub(y6);
          A4.isub(C4);
          B4.isub(D4);
        } else {
          y6.isub(x4);
          C4.isub(A4);
          D4.isub(B4);
        }
      }
      return {
        a: C4,
        b: D4,
        gcd: y6.iushln(g5)
      };
    };
    BN.prototype._invmp = function _invmp(p8) {
      assert2(p8.negative === 0);
      assert2(!p8.isZero());
      var a8 = this || _global$5;
      var b5 = p8.clone();
      if (a8.negative !== 0) {
        a8 = a8.umod(p8);
      } else {
        a8 = a8.clone();
      }
      var x1 = new BN(1);
      var x22 = new BN(0);
      var delta = b5.clone();
      while (a8.cmpn(1) > 0 && b5.cmpn(1) > 0) {
        for (var i8 = 0, im = 1; (a8.words[0] & im) === 0 && i8 < 26; ++i8, im <<= 1)
          ;
        if (i8 > 0) {
          a8.iushrn(i8);
          while (i8-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }
            x1.iushrn(1);
          }
        }
        for (var j4 = 0, jm = 1; (b5.words[0] & jm) === 0 && j4 < 26; ++j4, jm <<= 1)
          ;
        if (j4 > 0) {
          b5.iushrn(j4);
          while (j4-- > 0) {
            if (x22.isOdd()) {
              x22.iadd(delta);
            }
            x22.iushrn(1);
          }
        }
        if (a8.cmp(b5) >= 0) {
          a8.isub(b5);
          x1.isub(x22);
        } else {
          b5.isub(a8);
          x22.isub(x1);
        }
      }
      var res;
      if (a8.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x22;
      }
      if (res.cmpn(0) < 0) {
        res.iadd(p8);
      }
      return res;
    };
    BN.prototype.gcd = function gcd(num) {
      if (this.isZero())
        return num.abs();
      if (num.isZero())
        return this.abs();
      var a8 = this.clone();
      var b5 = num.clone();
      a8.negative = 0;
      b5.negative = 0;
      for (var shift = 0; a8.isEven() && b5.isEven(); shift++) {
        a8.iushrn(1);
        b5.iushrn(1);
      }
      do {
        while (a8.isEven()) {
          a8.iushrn(1);
        }
        while (b5.isEven()) {
          b5.iushrn(1);
        }
        var r9 = a8.cmp(b5);
        if (r9 < 0) {
          var t8 = a8;
          a8 = b5;
          b5 = t8;
        } else if (r9 === 0 || b5.cmpn(1) === 0) {
          break;
        }
        a8.isub(b5);
      } while (true);
      return b5.iushln(shift);
    };
    BN.prototype.invm = function invm(num) {
      return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
      return ((this || _global$5).words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
      return ((this || _global$5).words[0] & 1) === 1;
    };
    BN.prototype.andln = function andln(num) {
      return (this || _global$5).words[0] & num;
    };
    BN.prototype.bincn = function bincn(bit) {
      assert2(typeof bit === "number");
      var r9 = bit % 26;
      var s7 = (bit - r9) / 26;
      var q3 = 1 << r9;
      if ((this || _global$5).length <= s7) {
        this._expand(s7 + 1);
        (this || _global$5).words[s7] |= q3;
        return this || _global$5;
      }
      var carry = q3;
      for (var i8 = s7; carry !== 0 && i8 < (this || _global$5).length; i8++) {
        var w4 = (this || _global$5).words[i8] | 0;
        w4 += carry;
        carry = w4 >>> 26;
        w4 &= 67108863;
        (this || _global$5).words[i8] = w4;
      }
      if (carry !== 0) {
        (this || _global$5).words[i8] = carry;
        (this || _global$5).length++;
      }
      return this || _global$5;
    };
    BN.prototype.isZero = function isZero() {
      return (this || _global$5).length === 1 && (this || _global$5).words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
      var negative = num < 0;
      if ((this || _global$5).negative !== 0 && !negative)
        return -1;
      if ((this || _global$5).negative === 0 && negative)
        return 1;
      this.strip();
      var res;
      if ((this || _global$5).length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }
        assert2(num <= 67108863, "Number is too big");
        var w4 = (this || _global$5).words[0] | 0;
        res = w4 === num ? 0 : w4 < num ? -1 : 1;
      }
      if ((this || _global$5).negative !== 0)
        return -res | 0;
      return res;
    };
    BN.prototype.cmp = function cmp(num) {
      if ((this || _global$5).negative !== 0 && num.negative === 0)
        return -1;
      if ((this || _global$5).negative === 0 && num.negative !== 0)
        return 1;
      var res = this.ucmp(num);
      if ((this || _global$5).negative !== 0)
        return -res | 0;
      return res;
    };
    BN.prototype.ucmp = function ucmp(num) {
      if ((this || _global$5).length > num.length)
        return 1;
      if ((this || _global$5).length < num.length)
        return -1;
      var res = 0;
      for (var i8 = (this || _global$5).length - 1; i8 >= 0; i8--) {
        var a8 = (this || _global$5).words[i8] | 0;
        var b5 = num.words[i8] | 0;
        if (a8 === b5)
          continue;
        if (a8 < b5) {
          res = -1;
        } else if (a8 > b5) {
          res = 1;
        }
        break;
      }
      return res;
    };
    BN.prototype.gtn = function gtn(num) {
      return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
      return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
      return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
      return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
      return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
      return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
      return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
      return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
      return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
      return this.cmp(num) === 0;
    };
    BN.red = function red(num) {
      return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
      assert2(!(this || _global$5).red, "Already a number in reduction context");
      assert2((this || _global$5).negative === 0, "red works only with positives");
      return ctx.convertTo(this || _global$5)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
      assert2((this || _global$5).red, "fromRed works only with numbers in reduction context");
      return (this || _global$5).red.convertFrom(this || _global$5);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
      (this || _global$5).red = ctx;
      return this || _global$5;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
      assert2(!(this || _global$5).red, "Already a number in reduction context");
      return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
      assert2((this || _global$5).red, "redAdd works only with red numbers");
      return (this || _global$5).red.add(this || _global$5, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
      assert2((this || _global$5).red, "redIAdd works only with red numbers");
      return (this || _global$5).red.iadd(this || _global$5, num);
    };
    BN.prototype.redSub = function redSub(num) {
      assert2((this || _global$5).red, "redSub works only with red numbers");
      return (this || _global$5).red.sub(this || _global$5, num);
    };
    BN.prototype.redISub = function redISub(num) {
      assert2((this || _global$5).red, "redISub works only with red numbers");
      return (this || _global$5).red.isub(this || _global$5, num);
    };
    BN.prototype.redShl = function redShl(num) {
      assert2((this || _global$5).red, "redShl works only with red numbers");
      return (this || _global$5).red.shl(this || _global$5, num);
    };
    BN.prototype.redMul = function redMul(num) {
      assert2((this || _global$5).red, "redMul works only with red numbers");
      (this || _global$5).red._verify2(this || _global$5, num);
      return (this || _global$5).red.mul(this || _global$5, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
      assert2((this || _global$5).red, "redMul works only with red numbers");
      (this || _global$5).red._verify2(this || _global$5, num);
      return (this || _global$5).red.imul(this || _global$5, num);
    };
    BN.prototype.redSqr = function redSqr() {
      assert2((this || _global$5).red, "redSqr works only with red numbers");
      (this || _global$5).red._verify1(this || _global$5);
      return (this || _global$5).red.sqr(this || _global$5);
    };
    BN.prototype.redISqr = function redISqr() {
      assert2((this || _global$5).red, "redISqr works only with red numbers");
      (this || _global$5).red._verify1(this || _global$5);
      return (this || _global$5).red.isqr(this || _global$5);
    };
    BN.prototype.redSqrt = function redSqrt() {
      assert2((this || _global$5).red, "redSqrt works only with red numbers");
      (this || _global$5).red._verify1(this || _global$5);
      return (this || _global$5).red.sqrt(this || _global$5);
    };
    BN.prototype.redInvm = function redInvm() {
      assert2((this || _global$5).red, "redInvm works only with red numbers");
      (this || _global$5).red._verify1(this || _global$5);
      return (this || _global$5).red.invm(this || _global$5);
    };
    BN.prototype.redNeg = function redNeg() {
      assert2((this || _global$5).red, "redNeg works only with red numbers");
      (this || _global$5).red._verify1(this || _global$5);
      return (this || _global$5).red.neg(this || _global$5);
    };
    BN.prototype.redPow = function redPow(num) {
      assert2((this || _global$5).red && !num.red, "redPow(normalNum)");
      (this || _global$5).red._verify1(this || _global$5);
      return (this || _global$5).red.pow(this || _global$5, num);
    };
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };
    function MPrime(name2, p8) {
      (this || _global$5).name = name2;
      (this || _global$5).p = new BN(p8, 16);
      (this || _global$5).n = (this || _global$5).p.bitLength();
      (this || _global$5).k = new BN(1).iushln((this || _global$5).n).isub((this || _global$5).p);
      (this || _global$5).tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil((this || _global$5).n / 13));
      return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
      var r9 = num;
      var rlen;
      do {
        this.split(r9, (this || _global$5).tmp);
        r9 = this.imulK(r9);
        r9 = r9.iadd((this || _global$5).tmp);
        rlen = r9.bitLength();
      } while (rlen > (this || _global$5).n);
      var cmp = rlen < (this || _global$5).n ? -1 : r9.ucmp((this || _global$5).p);
      if (cmp === 0) {
        r9.words[0] = 0;
        r9.length = 1;
      } else if (cmp > 0) {
        r9.isub((this || _global$5).p);
      } else {
        if (r9.strip !== void 0) {
          r9.strip();
        } else {
          r9._strip();
        }
      }
      return r9;
    };
    MPrime.prototype.split = function split(input, out) {
      input.iushrn((this || _global$5).n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
      return num.imul((this || _global$5).k);
    };
    function K256() {
      MPrime.call(this || _global$5, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits4(K256, MPrime);
    K256.prototype.split = function split(input, output) {
      var mask = 4194303;
      var outLen = Math.min(input.length, 9);
      for (var i8 = 0; i8 < outLen; i8++) {
        output.words[i8] = input.words[i8];
      }
      output.length = outLen;
      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }
      var prev = input.words[9];
      output.words[output.length++] = prev & mask;
      for (i8 = 10; i8 < input.length; i8++) {
        var next = input.words[i8] | 0;
        input.words[i8 - 10] = (next & mask) << 4 | prev >>> 22;
        prev = next;
      }
      prev >>>= 22;
      input.words[i8 - 10] = prev;
      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };
    K256.prototype.imulK = function imulK(num) {
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;
      var lo = 0;
      for (var i8 = 0; i8 < num.length; i8++) {
        var w4 = num.words[i8] | 0;
        lo += w4 * 977;
        num.words[i8] = lo & 67108863;
        lo = w4 * 64 + (lo / 67108864 | 0);
      }
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }
      return num;
    };
    function P224() {
      MPrime.call(this || _global$5, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits4(P224, MPrime);
    function P192() {
      MPrime.call(this || _global$5, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits4(P192, MPrime);
    function P25519() {
      MPrime.call(this || _global$5, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits4(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
      var carry = 0;
      for (var i8 = 0; i8 < num.length; i8++) {
        var hi = (num.words[i8] | 0) * 19 + carry;
        var lo = hi & 67108863;
        hi >>>= 26;
        num.words[i8] = lo;
        carry = hi;
      }
      if (carry !== 0) {
        num.words[num.length++] = carry;
      }
      return num;
    };
    BN._prime = function prime(name2) {
      if (primes[name2])
        return primes[name2];
      var prime2;
      if (name2 === "k256") {
        prime2 = new K256();
      } else if (name2 === "p224") {
        prime2 = new P224();
      } else if (name2 === "p192") {
        prime2 = new P192();
      } else if (name2 === "p25519") {
        prime2 = new P25519();
      } else {
        throw new Error("Unknown prime " + name2);
      }
      primes[name2] = prime2;
      return prime2;
    };
    function Red(m6) {
      if (typeof m6 === "string") {
        var prime = BN._prime(m6);
        (this || _global$5).m = prime.p;
        (this || _global$5).prime = prime;
      } else {
        assert2(m6.gtn(1), "modulus must be greater than 1");
        (this || _global$5).m = m6;
        (this || _global$5).prime = null;
      }
    }
    Red.prototype._verify1 = function _verify1(a8) {
      assert2(a8.negative === 0, "red works only with positives");
      assert2(a8.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a8, b5) {
      assert2((a8.negative | b5.negative) === 0, "red works only with positives");
      assert2(a8.red && a8.red === b5.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a8) {
      if ((this || _global$5).prime)
        return (this || _global$5).prime.ireduce(a8)._forceRed(this || _global$5);
      return a8.umod((this || _global$5).m)._forceRed(this || _global$5);
    };
    Red.prototype.neg = function neg(a8) {
      if (a8.isZero()) {
        return a8.clone();
      }
      return (this || _global$5).m.sub(a8)._forceRed(this || _global$5);
    };
    Red.prototype.add = function add(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.add(b5);
      if (res.cmp((this || _global$5).m) >= 0) {
        res.isub((this || _global$5).m);
      }
      return res._forceRed(this || _global$5);
    };
    Red.prototype.iadd = function iadd(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.iadd(b5);
      if (res.cmp((this || _global$5).m) >= 0) {
        res.isub((this || _global$5).m);
      }
      return res;
    };
    Red.prototype.sub = function sub(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.sub(b5);
      if (res.cmpn(0) < 0) {
        res.iadd((this || _global$5).m);
      }
      return res._forceRed(this || _global$5);
    };
    Red.prototype.isub = function isub(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.isub(b5);
      if (res.cmpn(0) < 0) {
        res.iadd((this || _global$5).m);
      }
      return res;
    };
    Red.prototype.shl = function shl(a8, num) {
      this._verify1(a8);
      return this.imod(a8.ushln(num));
    };
    Red.prototype.imul = function imul(a8, b5) {
      this._verify2(a8, b5);
      return this.imod(a8.imul(b5));
    };
    Red.prototype.mul = function mul(a8, b5) {
      this._verify2(a8, b5);
      return this.imod(a8.mul(b5));
    };
    Red.prototype.isqr = function isqr(a8) {
      return this.imul(a8, a8.clone());
    };
    Red.prototype.sqr = function sqr(a8) {
      return this.mul(a8, a8);
    };
    Red.prototype.sqrt = function sqrt(a8) {
      if (a8.isZero())
        return a8.clone();
      var mod3 = (this || _global$5).m.andln(3);
      assert2(mod3 % 2 === 1);
      if (mod3 === 3) {
        var pow = (this || _global$5).m.add(new BN(1)).iushrn(2);
        return this.pow(a8, pow);
      }
      var q3 = (this || _global$5).m.subn(1);
      var s7 = 0;
      while (!q3.isZero() && q3.andln(1) === 0) {
        s7++;
        q3.iushrn(1);
      }
      assert2(!q3.isZero());
      var one = new BN(1).toRed(this || _global$5);
      var nOne = one.redNeg();
      var lpow = (this || _global$5).m.subn(1).iushrn(1);
      var z5 = (this || _global$5).m.bitLength();
      z5 = new BN(2 * z5 * z5).toRed(this || _global$5);
      while (this.pow(z5, lpow).cmp(nOne) !== 0) {
        z5.redIAdd(nOne);
      }
      var c8 = this.pow(z5, q3);
      var r9 = this.pow(a8, q3.addn(1).iushrn(1));
      var t8 = this.pow(a8, q3);
      var m6 = s7;
      while (t8.cmp(one) !== 0) {
        var tmp = t8;
        for (var i8 = 0; tmp.cmp(one) !== 0; i8++) {
          tmp = tmp.redSqr();
        }
        assert2(i8 < m6);
        var b5 = this.pow(c8, new BN(1).iushln(m6 - i8 - 1));
        r9 = r9.redMul(b5);
        c8 = b5.redSqr();
        t8 = t8.redMul(c8);
        m6 = i8;
      }
      return r9;
    };
    Red.prototype.invm = function invm(a8) {
      var inv = a8._invmp((this || _global$5).m);
      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };
    Red.prototype.pow = function pow(a8, num) {
      if (num.isZero())
        return new BN(1).toRed(this || _global$5);
      if (num.cmpn(1) === 0)
        return a8.clone();
      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN(1).toRed(this || _global$5);
      wnd[1] = a8;
      for (var i8 = 2; i8 < wnd.length; i8++) {
        wnd[i8] = this.mul(wnd[i8 - 1], a8);
      }
      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;
      if (start === 0) {
        start = 26;
      }
      for (i8 = num.length - 1; i8 >= 0; i8--) {
        var word = num.words[i8];
        for (var j4 = start - 1; j4 >= 0; j4--) {
          var bit = word >> j4 & 1;
          if (res !== wnd[0]) {
            res = this.sqr(res);
          }
          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }
          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i8 !== 0 || j4 !== 0))
            continue;
          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }
        start = 26;
      }
      return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
      var r9 = num.umod((this || _global$5).m);
      return r9 === num ? r9.clone() : r9;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
      var res = num.clone();
      res.red = null;
      return res;
    };
    BN.mont = function mont(num) {
      return new Mont(num);
    };
    function Mont(m6) {
      Red.call(this || _global$5, m6);
      (this || _global$5).shift = (this || _global$5).m.bitLength();
      if ((this || _global$5).shift % 26 !== 0) {
        (this || _global$5).shift += 26 - (this || _global$5).shift % 26;
      }
      (this || _global$5).r = new BN(1).iushln((this || _global$5).shift);
      (this || _global$5).r2 = this.imod((this || _global$5).r.sqr());
      (this || _global$5).rinv = (this || _global$5).r._invmp((this || _global$5).m);
      (this || _global$5).minv = (this || _global$5).rinv.mul((this || _global$5).r).isubn(1).div((this || _global$5).m);
      (this || _global$5).minv = (this || _global$5).minv.umod((this || _global$5).r);
      (this || _global$5).minv = (this || _global$5).r.sub((this || _global$5).minv);
    }
    inherits4(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
      return this.imod(num.ushln((this || _global$5).shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
      var r9 = this.imod(num.mul((this || _global$5).rinv));
      r9.red = null;
      return r9;
    };
    Mont.prototype.imul = function imul(a8, b5) {
      if (a8.isZero() || b5.isZero()) {
        a8.words[0] = 0;
        a8.length = 1;
        return a8;
      }
      var t8 = a8.imul(b5);
      var c8 = t8.maskn((this || _global$5).shift).mul((this || _global$5).minv).imaskn((this || _global$5).shift).mul((this || _global$5).m);
      var u8 = t8.isub(c8).iushrn((this || _global$5).shift);
      var res = u8;
      if (u8.cmp((this || _global$5).m) >= 0) {
        res = u8.isub((this || _global$5).m);
      } else if (u8.cmpn(0) < 0) {
        res = u8.iadd((this || _global$5).m);
      }
      return res._forceRed(this || _global$5);
    };
    Mont.prototype.mul = function mul(a8, b5) {
      if (a8.isZero() || b5.isZero())
        return new BN(0)._forceRed(this || _global$5);
      var t8 = a8.mul(b5);
      var c8 = t8.maskn((this || _global$5).shift).mul((this || _global$5).minv).imaskn((this || _global$5).shift).mul((this || _global$5).m);
      var u8 = t8.isub(c8).iushrn((this || _global$5).shift);
      var res = u8;
      if (u8.cmp((this || _global$5).m) >= 0) {
        res = u8.isub((this || _global$5).m);
      } else if (u8.cmpn(0) < 0) {
        res = u8.iadd((this || _global$5).m);
      }
      return res._forceRed(this || _global$5);
    };
    Mont.prototype.invm = function invm(a8) {
      var res = this.imod(a8._invmp((this || _global$5).m).mul((this || _global$5).r2));
      return res._forceRed(this || _global$5);
    };
  })(module$2, exports$y);
  return module$2.exports;
}
function dew$w() {
  if (_dewExec$w)
    return exports$x;
  _dewExec$w = true;
  var process$1 = process2;
  var buffer$1 = buffer;
  var Buffer3 = buffer$1.Buffer;
  var safer = {};
  var key;
  for (key in buffer$1) {
    if (!buffer$1.hasOwnProperty(key))
      continue;
    if (key === "SlowBuffer" || key === "Buffer")
      continue;
    safer[key] = buffer$1[key];
  }
  var Safer = safer.Buffer = {};
  for (key in Buffer3) {
    if (!Buffer3.hasOwnProperty(key))
      continue;
    if (key === "allocUnsafe" || key === "allocUnsafeSlow")
      continue;
    Safer[key] = Buffer3[key];
  }
  safer.Buffer.prototype = Buffer3.prototype;
  if (!Safer.from || Safer.from === Uint8Array.from) {
    Safer.from = function(value, encodingOrOffset, length) {
      if (typeof value === "number") {
        throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value);
      }
      if (value && typeof value.length === "undefined") {
        throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
      }
      return Buffer3(value, encodingOrOffset, length);
    };
  }
  if (!Safer.alloc) {
    Safer.alloc = function(size, fill, encoding) {
      if (typeof size !== "number") {
        throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size);
      }
      if (size < 0 || size >= 2 * (1 << 30)) {
        throw new RangeError('The value "' + size + '" is invalid for option "size"');
      }
      var buf = Buffer3(size);
      if (!fill || fill.length === 0) {
        buf.fill(0);
      } else if (typeof encoding === "string") {
        buf.fill(fill, encoding);
      } else {
        buf.fill(fill);
      }
      return buf;
    };
  }
  if (!safer.kStringMaxLength) {
    try {
      safer.kStringMaxLength = process$1.binding("buffer").kStringMaxLength;
    } catch (e11) {
    }
  }
  if (!safer.constants) {
    safer.constants = {
      MAX_LENGTH: safer.kMaxLength
    };
    if (safer.kStringMaxLength) {
      safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength;
    }
  }
  exports$x = safer;
  return exports$x;
}
function dew$v() {
  if (_dewExec$v)
    return exports$w;
  _dewExec$v = true;
  const inherits4 = dew$f();
  function Reporter(options) {
    this._reporterState = {
      obj: null,
      path: [],
      options: options || {},
      errors: []
    };
  }
  exports$w.Reporter = Reporter;
  Reporter.prototype.isError = function isError3(obj) {
    return obj instanceof ReporterError;
  };
  Reporter.prototype.save = function save() {
    const state = this._reporterState;
    return {
      obj: state.obj,
      pathLen: state.path.length
    };
  };
  Reporter.prototype.restore = function restore(data) {
    const state = this._reporterState;
    state.obj = data.obj;
    state.path = state.path.slice(0, data.pathLen);
  };
  Reporter.prototype.enterKey = function enterKey(key) {
    return this._reporterState.path.push(key);
  };
  Reporter.prototype.exitKey = function exitKey(index) {
    const state = this._reporterState;
    state.path = state.path.slice(0, index - 1);
  };
  Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
    const state = this._reporterState;
    this.exitKey(index);
    if (state.obj !== null)
      state.obj[key] = value;
  };
  Reporter.prototype.path = function path2() {
    return this._reporterState.path.join("/");
  };
  Reporter.prototype.enterObject = function enterObject() {
    const state = this._reporterState;
    const prev = state.obj;
    state.obj = {};
    return prev;
  };
  Reporter.prototype.leaveObject = function leaveObject(prev) {
    const state = this._reporterState;
    const now = state.obj;
    state.obj = prev;
    return now;
  };
  Reporter.prototype.error = function error(msg) {
    let err;
    const state = this._reporterState;
    const inherited = msg instanceof ReporterError;
    if (inherited) {
      err = msg;
    } else {
      err = new ReporterError(state.path.map(function(elem) {
        return "[" + JSON.stringify(elem) + "]";
      }).join(""), msg.message || msg, msg.stack);
    }
    if (!state.options.partial)
      throw err;
    if (!inherited)
      state.errors.push(err);
    return err;
  };
  Reporter.prototype.wrapResult = function wrapResult(result) {
    const state = this._reporterState;
    if (!state.options.partial)
      return result;
    return {
      result: this.isError(result) ? null : result,
      errors: state.errors
    };
  };
  function ReporterError(path2, msg) {
    this.path = path2;
    this.rethrow(msg);
  }
  inherits4(ReporterError, Error);
  ReporterError.prototype.rethrow = function rethrow(msg) {
    this.message = msg + " at: " + (this.path || "(shallow)");
    if (Error.captureStackTrace)
      Error.captureStackTrace(this, ReporterError);
    if (!this.stack) {
      try {
        throw new Error(this.message);
      } catch (e11) {
        this.stack = e11.stack;
      }
    }
    return this;
  };
  return exports$w;
}
function dew$u() {
  if (_dewExec$u)
    return exports$v;
  _dewExec$u = true;
  const inherits4 = dew$f();
  const Reporter = dew$v().Reporter;
  const Buffer3 = dew$w().Buffer;
  function DecoderBuffer(base, options) {
    Reporter.call(this, options);
    if (!Buffer3.isBuffer(base)) {
      this.error("Input not Buffer");
      return;
    }
    this.base = base;
    this.offset = 0;
    this.length = base.length;
  }
  inherits4(DecoderBuffer, Reporter);
  exports$v.DecoderBuffer = DecoderBuffer;
  DecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {
    if (data instanceof DecoderBuffer) {
      return true;
    }
    const isCompatible = typeof data === "object" && Buffer3.isBuffer(data.base) && data.constructor.name === "DecoderBuffer" && typeof data.offset === "number" && typeof data.length === "number" && typeof data.save === "function" && typeof data.restore === "function" && typeof data.isEmpty === "function" && typeof data.readUInt8 === "function" && typeof data.skip === "function" && typeof data.raw === "function";
    return isCompatible;
  };
  DecoderBuffer.prototype.save = function save() {
    return {
      offset: this.offset,
      reporter: Reporter.prototype.save.call(this)
    };
  };
  DecoderBuffer.prototype.restore = function restore(save) {
    const res = new DecoderBuffer(this.base);
    res.offset = save.offset;
    res.length = this.offset;
    this.offset = save.offset;
    Reporter.prototype.restore.call(this, save.reporter);
    return res;
  };
  DecoderBuffer.prototype.isEmpty = function isEmpty() {
    return this.offset === this.length;
  };
  DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
    if (this.offset + 1 <= this.length)
      return this.base.readUInt8(this.offset++, true);
    else
      return this.error(fail || "DecoderBuffer overrun");
  };
  DecoderBuffer.prototype.skip = function skip(bytes, fail) {
    if (!(this.offset + bytes <= this.length))
      return this.error(fail || "DecoderBuffer overrun");
    const res = new DecoderBuffer(this.base);
    res._reporterState = this._reporterState;
    res.offset = this.offset;
    res.length = this.offset + bytes;
    this.offset += bytes;
    return res;
  };
  DecoderBuffer.prototype.raw = function raw(save) {
    return this.base.slice(save ? save.offset : this.offset, this.length);
  };
  function EncoderBuffer(value, reporter) {
    if (Array.isArray(value)) {
      this.length = 0;
      this.value = value.map(function(item) {
        if (!EncoderBuffer.isEncoderBuffer(item))
          item = new EncoderBuffer(item, reporter);
        this.length += item.length;
        return item;
      }, this);
    } else if (typeof value === "number") {
      if (!(0 <= value && value <= 255))
        return reporter.error("non-byte EncoderBuffer value");
      this.value = value;
      this.length = 1;
    } else if (typeof value === "string") {
      this.value = value;
      this.length = Buffer3.byteLength(value);
    } else if (Buffer3.isBuffer(value)) {
      this.value = value;
      this.length = value.length;
    } else {
      return reporter.error("Unsupported type: " + typeof value);
    }
  }
  exports$v.EncoderBuffer = EncoderBuffer;
  EncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {
    if (data instanceof EncoderBuffer) {
      return true;
    }
    const isCompatible = typeof data === "object" && data.constructor.name === "EncoderBuffer" && typeof data.length === "number" && typeof data.join === "function";
    return isCompatible;
  };
  EncoderBuffer.prototype.join = function join(out, offset) {
    if (!out)
      out = Buffer3.alloc(this.length);
    if (!offset)
      offset = 0;
    if (this.length === 0)
      return out;
    if (Array.isArray(this.value)) {
      this.value.forEach(function(item) {
        item.join(out, offset);
        offset += item.length;
      });
    } else {
      if (typeof this.value === "number")
        out[offset] = this.value;
      else if (typeof this.value === "string")
        out.write(this.value, offset);
      else if (Buffer3.isBuffer(this.value))
        this.value.copy(out, offset);
      offset += this.length;
    }
    return out;
  };
  return exports$v;
}
function dew$t() {
  if (_dewExec$t)
    return exports$u;
  _dewExec$t = true;
  const Reporter = dew$v().Reporter;
  const EncoderBuffer = dew$u().EncoderBuffer;
  const DecoderBuffer = dew$u().DecoderBuffer;
  const assert2 = dew$2m();
  const tags = ["seq", "seqof", "set", "setof", "objid", "bool", "gentime", "utctime", "null_", "enum", "int", "objDesc", "bitstr", "bmpstr", "charstr", "genstr", "graphstr", "ia5str", "iso646str", "numstr", "octstr", "printstr", "t61str", "unistr", "utf8str", "videostr"];
  const methods = ["key", "obj", "use", "optional", "explicit", "implicit", "def", "choice", "any", "contains"].concat(tags);
  const overrided = ["_peekTag", "_decodeTag", "_use", "_decodeStr", "_decodeObjid", "_decodeTime", "_decodeNull", "_decodeInt", "_decodeBool", "_decodeList", "_encodeComposite", "_encodeStr", "_encodeObjid", "_encodeTime", "_encodeNull", "_encodeInt", "_encodeBool"];
  function Node(enc, parent, name2) {
    const state = {};
    this._baseState = state;
    state.name = name2;
    state.enc = enc;
    state.parent = parent || null;
    state.children = null;
    state.tag = null;
    state.args = null;
    state.reverseArgs = null;
    state.choice = null;
    state.optional = false;
    state.any = false;
    state.obj = false;
    state.use = null;
    state.useDecoder = null;
    state.key = null;
    state["default"] = null;
    state.explicit = null;
    state.implicit = null;
    state.contains = null;
    if (!state.parent) {
      state.children = [];
      this._wrap();
    }
  }
  exports$u = Node;
  const stateProps = ["enc", "parent", "children", "tag", "args", "reverseArgs", "choice", "optional", "any", "obj", "use", "alteredUse", "key", "default", "explicit", "implicit", "contains"];
  Node.prototype.clone = function clone() {
    const state = this._baseState;
    const cstate = {};
    stateProps.forEach(function(prop) {
      cstate[prop] = state[prop];
    });
    const res = new this.constructor(cstate.parent);
    res._baseState = cstate;
    return res;
  };
  Node.prototype._wrap = function wrap() {
    const state = this._baseState;
    methods.forEach(function(method) {
      this[method] = function _wrappedMethod() {
        const clone = new this.constructor(this);
        state.children.push(clone);
        return clone[method].apply(clone, arguments);
      };
    }, this);
  };
  Node.prototype._init = function init2(body) {
    const state = this._baseState;
    assert2(state.parent === null);
    body.call(this);
    state.children = state.children.filter(function(child) {
      return child._baseState.parent === this;
    }, this);
    assert2.equal(state.children.length, 1, "Root node can have only one child");
  };
  Node.prototype._useArgs = function useArgs(args) {
    const state = this._baseState;
    const children = args.filter(function(arg) {
      return arg instanceof this.constructor;
    }, this);
    args = args.filter(function(arg) {
      return !(arg instanceof this.constructor);
    }, this);
    if (children.length !== 0) {
      assert2(state.children === null);
      state.children = children;
      children.forEach(function(child) {
        child._baseState.parent = this;
      }, this);
    }
    if (args.length !== 0) {
      assert2(state.args === null);
      state.args = args;
      state.reverseArgs = args.map(function(arg) {
        if (typeof arg !== "object" || arg.constructor !== Object)
          return arg;
        const res = {};
        Object.keys(arg).forEach(function(key) {
          if (key == (key | 0))
            key |= 0;
          const value = arg[key];
          res[value] = key;
        });
        return res;
      });
    }
  };
  overrided.forEach(function(method) {
    Node.prototype[method] = function _overrided() {
      const state = this._baseState;
      throw new Error(method + " not implemented for encoding: " + state.enc);
    };
  });
  tags.forEach(function(tag) {
    Node.prototype[tag] = function _tagMethod() {
      const state = this._baseState;
      const args = Array.prototype.slice.call(arguments);
      assert2(state.tag === null);
      state.tag = tag;
      this._useArgs(args);
      return this;
    };
  });
  Node.prototype.use = function use(item) {
    assert2(item);
    const state = this._baseState;
    assert2(state.use === null);
    state.use = item;
    return this;
  };
  Node.prototype.optional = function optional() {
    const state = this._baseState;
    state.optional = true;
    return this;
  };
  Node.prototype.def = function def(val) {
    const state = this._baseState;
    assert2(state["default"] === null);
    state["default"] = val;
    state.optional = true;
    return this;
  };
  Node.prototype.explicit = function explicit(num) {
    const state = this._baseState;
    assert2(state.explicit === null && state.implicit === null);
    state.explicit = num;
    return this;
  };
  Node.prototype.implicit = function implicit(num) {
    const state = this._baseState;
    assert2(state.explicit === null && state.implicit === null);
    state.implicit = num;
    return this;
  };
  Node.prototype.obj = function obj() {
    const state = this._baseState;
    const args = Array.prototype.slice.call(arguments);
    state.obj = true;
    if (args.length !== 0)
      this._useArgs(args);
    return this;
  };
  Node.prototype.key = function key(newKey) {
    const state = this._baseState;
    assert2(state.key === null);
    state.key = newKey;
    return this;
  };
  Node.prototype.any = function any() {
    const state = this._baseState;
    state.any = true;
    return this;
  };
  Node.prototype.choice = function choice(obj) {
    const state = this._baseState;
    assert2(state.choice === null);
    state.choice = obj;
    this._useArgs(Object.keys(obj).map(function(key) {
      return obj[key];
    }));
    return this;
  };
  Node.prototype.contains = function contains(item) {
    const state = this._baseState;
    assert2(state.use === null);
    state.contains = item;
    return this;
  };
  Node.prototype._decode = function decode(input, options) {
    const state = this._baseState;
    if (state.parent === null)
      return input.wrapResult(state.children[0]._decode(input, options));
    let result = state["default"];
    let present = true;
    let prevKey = null;
    if (state.key !== null)
      prevKey = input.enterKey(state.key);
    if (state.optional) {
      let tag = null;
      if (state.explicit !== null)
        tag = state.explicit;
      else if (state.implicit !== null)
        tag = state.implicit;
      else if (state.tag !== null)
        tag = state.tag;
      if (tag === null && !state.any) {
        const save = input.save();
        try {
          if (state.choice === null)
            this._decodeGeneric(state.tag, input, options);
          else
            this._decodeChoice(input, options);
          present = true;
        } catch (e11) {
          present = false;
        }
        input.restore(save);
      } else {
        present = this._peekTag(input, tag, state.any);
        if (input.isError(present))
          return present;
      }
    }
    let prevObj;
    if (state.obj && present)
      prevObj = input.enterObject();
    if (present) {
      if (state.explicit !== null) {
        const explicit = this._decodeTag(input, state.explicit);
        if (input.isError(explicit))
          return explicit;
        input = explicit;
      }
      const start = input.offset;
      if (state.use === null && state.choice === null) {
        let save;
        if (state.any)
          save = input.save();
        const body = this._decodeTag(input, state.implicit !== null ? state.implicit : state.tag, state.any);
        if (input.isError(body))
          return body;
        if (state.any)
          result = input.raw(save);
        else
          input = body;
      }
      if (options && options.track && state.tag !== null)
        options.track(input.path(), start, input.length, "tagged");
      if (options && options.track && state.tag !== null)
        options.track(input.path(), input.offset, input.length, "content");
      if (state.any)
        ;
      else if (state.choice === null) {
        result = this._decodeGeneric(state.tag, input, options);
      } else {
        result = this._decodeChoice(input, options);
      }
      if (input.isError(result))
        return result;
      if (!state.any && state.choice === null && state.children !== null) {
        state.children.forEach(function decodeChildren(child) {
          child._decode(input, options);
        });
      }
      if (state.contains && (state.tag === "octstr" || state.tag === "bitstr")) {
        const data = new DecoderBuffer(result);
        result = this._getUse(state.contains, input._reporterState.obj)._decode(data, options);
      }
    }
    if (state.obj && present)
      result = input.leaveObject(prevObj);
    if (state.key !== null && (result !== null || present === true))
      input.leaveKey(prevKey, state.key, result);
    else if (prevKey !== null)
      input.exitKey(prevKey);
    return result;
  };
  Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
    const state = this._baseState;
    if (tag === "seq" || tag === "set")
      return null;
    if (tag === "seqof" || tag === "setof")
      return this._decodeList(input, tag, state.args[0], options);
    else if (/str$/.test(tag))
      return this._decodeStr(input, tag, options);
    else if (tag === "objid" && state.args)
      return this._decodeObjid(input, state.args[0], state.args[1], options);
    else if (tag === "objid")
      return this._decodeObjid(input, null, null, options);
    else if (tag === "gentime" || tag === "utctime")
      return this._decodeTime(input, tag, options);
    else if (tag === "null_")
      return this._decodeNull(input, options);
    else if (tag === "bool")
      return this._decodeBool(input, options);
    else if (tag === "objDesc")
      return this._decodeStr(input, tag, options);
    else if (tag === "int" || tag === "enum")
      return this._decodeInt(input, state.args && state.args[0], options);
    if (state.use !== null) {
      return this._getUse(state.use, input._reporterState.obj)._decode(input, options);
    } else {
      return input.error("unknown tag: " + tag);
    }
  };
  Node.prototype._getUse = function _getUse(entity, obj) {
    const state = this._baseState;
    state.useDecoder = this._use(entity, obj);
    assert2(state.useDecoder._baseState.parent === null);
    state.useDecoder = state.useDecoder._baseState.children[0];
    if (state.implicit !== state.useDecoder._baseState.implicit) {
      state.useDecoder = state.useDecoder.clone();
      state.useDecoder._baseState.implicit = state.implicit;
    }
    return state.useDecoder;
  };
  Node.prototype._decodeChoice = function decodeChoice(input, options) {
    const state = this._baseState;
    let result = null;
    let match = false;
    Object.keys(state.choice).some(function(key) {
      const save = input.save();
      const node = state.choice[key];
      try {
        const value = node._decode(input, options);
        if (input.isError(value))
          return false;
        result = {
          type: key,
          value
        };
        match = true;
      } catch (e11) {
        input.restore(save);
        return false;
      }
      return true;
    }, this);
    if (!match)
      return input.error("Choice not matched");
    return result;
  };
  Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
    return new EncoderBuffer(data, this.reporter);
  };
  Node.prototype._encode = function encode3(data, reporter, parent) {
    const state = this._baseState;
    if (state["default"] !== null && state["default"] === data)
      return;
    const result = this._encodeValue(data, reporter, parent);
    if (result === void 0)
      return;
    if (this._skipDefault(result, reporter, parent))
      return;
    return result;
  };
  Node.prototype._encodeValue = function encode3(data, reporter, parent) {
    const state = this._baseState;
    if (state.parent === null)
      return state.children[0]._encode(data, reporter || new Reporter());
    let result = null;
    this.reporter = reporter;
    if (state.optional && data === void 0) {
      if (state["default"] !== null)
        data = state["default"];
      else
        return;
    }
    let content = null;
    let primitive = false;
    if (state.any) {
      result = this._createEncoderBuffer(data);
    } else if (state.choice) {
      result = this._encodeChoice(data, reporter);
    } else if (state.contains) {
      content = this._getUse(state.contains, parent)._encode(data, reporter);
      primitive = true;
    } else if (state.children) {
      content = state.children.map(function(child) {
        if (child._baseState.tag === "null_")
          return child._encode(null, reporter, data);
        if (child._baseState.key === null)
          return reporter.error("Child should have a key");
        const prevKey = reporter.enterKey(child._baseState.key);
        if (typeof data !== "object")
          return reporter.error("Child expected, but input is not object");
        const res = child._encode(data[child._baseState.key], reporter, data);
        reporter.leaveKey(prevKey);
        return res;
      }, this).filter(function(child) {
        return child;
      });
      content = this._createEncoderBuffer(content);
    } else {
      if (state.tag === "seqof" || state.tag === "setof") {
        if (!(state.args && state.args.length === 1))
          return reporter.error("Too many args for : " + state.tag);
        if (!Array.isArray(data))
          return reporter.error("seqof/setof, but data is not Array");
        const child = this.clone();
        child._baseState.implicit = null;
        content = this._createEncoderBuffer(data.map(function(item) {
          const state2 = this._baseState;
          return this._getUse(state2.args[0], data)._encode(item, reporter);
        }, child));
      } else if (state.use !== null) {
        result = this._getUse(state.use, parent)._encode(data, reporter);
      } else {
        content = this._encodePrimitive(state.tag, data);
        primitive = true;
      }
    }
    if (!state.any && state.choice === null) {
      const tag = state.implicit !== null ? state.implicit : state.tag;
      const cls = state.implicit === null ? "universal" : "context";
      if (tag === null) {
        if (state.use === null)
          reporter.error("Tag could be omitted only for .use()");
      } else {
        if (state.use === null)
          result = this._encodeComposite(tag, primitive, cls, content);
      }
    }
    if (state.explicit !== null)
      result = this._encodeComposite(state.explicit, false, "context", result);
    return result;
  };
  Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
    const state = this._baseState;
    const node = state.choice[data.type];
    if (!node) {
      assert2(false, data.type + " not found in " + JSON.stringify(Object.keys(state.choice)));
    }
    return node._encode(data.value, reporter);
  };
  Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
    const state = this._baseState;
    if (/str$/.test(tag))
      return this._encodeStr(data, tag);
    else if (tag === "objid" && state.args)
      return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
    else if (tag === "objid")
      return this._encodeObjid(data, null, null);
    else if (tag === "gentime" || tag === "utctime")
      return this._encodeTime(data, tag);
    else if (tag === "null_")
      return this._encodeNull();
    else if (tag === "int" || tag === "enum")
      return this._encodeInt(data, state.args && state.reverseArgs[0]);
    else if (tag === "bool")
      return this._encodeBool(data);
    else if (tag === "objDesc")
      return this._encodeStr(data, tag);
    else
      throw new Error("Unsupported tag: " + tag);
  };
  Node.prototype._isNumstr = function isNumstr(str) {
    return /^[0-9 ]*$/.test(str);
  };
  Node.prototype._isPrintstr = function isPrintstr(str) {
    return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);
  };
  return exports$u;
}
function dew$s() {
  if (_dewExec$s)
    return exports$t;
  _dewExec$s = true;
  function reverse(map) {
    const res = {};
    Object.keys(map).forEach(function(key) {
      if ((key | 0) == key)
        key = key | 0;
      const value = map[key];
      res[value] = key;
    });
    return res;
  }
  exports$t.tagClass = {
    0: "universal",
    1: "application",
    2: "context",
    3: "private"
  };
  exports$t.tagClassByName = reverse(exports$t.tagClass);
  exports$t.tag = {
    0: "end",
    1: "bool",
    2: "int",
    3: "bitstr",
    4: "octstr",
    5: "null_",
    6: "objid",
    7: "objDesc",
    8: "external",
    9: "real",
    10: "enum",
    11: "embed",
    12: "utf8str",
    13: "relativeOid",
    16: "seq",
    17: "set",
    18: "numstr",
    19: "printstr",
    20: "t61str",
    21: "videostr",
    22: "ia5str",
    23: "utctime",
    24: "gentime",
    25: "graphstr",
    26: "iso646str",
    27: "genstr",
    28: "unistr",
    29: "charstr",
    30: "bmpstr"
  };
  exports$t.tagByName = reverse(exports$t.tag);
  return exports$t;
}
function dew$r() {
  if (_dewExec$r)
    return exports$s;
  _dewExec$r = true;
  const inherits4 = dew$f();
  const Buffer3 = dew$w().Buffer;
  const Node = dew$t();
  const der = dew$s();
  function DEREncoder(entity) {
    this.enc = "der";
    this.name = entity.name;
    this.entity = entity;
    this.tree = new DERNode();
    this.tree._init(entity.body);
  }
  exports$s = DEREncoder;
  DEREncoder.prototype.encode = function encode3(data, reporter) {
    return this.tree._encode(data, reporter).join();
  };
  function DERNode(parent) {
    Node.call(this, "der", parent);
  }
  inherits4(DERNode, Node);
  DERNode.prototype._encodeComposite = function encodeComposite(tag, primitive, cls, content) {
    const encodedTag = encodeTag(tag, primitive, cls, this.reporter);
    if (content.length < 128) {
      const header2 = Buffer3.alloc(2);
      header2[0] = encodedTag;
      header2[1] = content.length;
      return this._createEncoderBuffer([header2, content]);
    }
    let lenOctets = 1;
    for (let i8 = content.length; i8 >= 256; i8 >>= 8)
      lenOctets++;
    const header = Buffer3.alloc(1 + 1 + lenOctets);
    header[0] = encodedTag;
    header[1] = 128 | lenOctets;
    for (let i8 = 1 + lenOctets, j4 = content.length; j4 > 0; i8--, j4 >>= 8)
      header[i8] = j4 & 255;
    return this._createEncoderBuffer([header, content]);
  };
  DERNode.prototype._encodeStr = function encodeStr(str, tag) {
    if (tag === "bitstr") {
      return this._createEncoderBuffer([str.unused | 0, str.data]);
    } else if (tag === "bmpstr") {
      const buf = Buffer3.alloc(str.length * 2);
      for (let i8 = 0; i8 < str.length; i8++) {
        buf.writeUInt16BE(str.charCodeAt(i8), i8 * 2);
      }
      return this._createEncoderBuffer(buf);
    } else if (tag === "numstr") {
      if (!this._isNumstr(str)) {
        return this.reporter.error("Encoding of string type: numstr supports only digits and space");
      }
      return this._createEncoderBuffer(str);
    } else if (tag === "printstr") {
      if (!this._isPrintstr(str)) {
        return this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark");
      }
      return this._createEncoderBuffer(str);
    } else if (/str$/.test(tag)) {
      return this._createEncoderBuffer(str);
    } else if (tag === "objDesc") {
      return this._createEncoderBuffer(str);
    } else {
      return this.reporter.error("Encoding of string type: " + tag + " unsupported");
    }
  };
  DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
    if (typeof id === "string") {
      if (!values)
        return this.reporter.error("string objid given, but no values map found");
      if (!values.hasOwnProperty(id))
        return this.reporter.error("objid not found in values map");
      id = values[id].split(/[\s.]+/g);
      for (let i8 = 0; i8 < id.length; i8++)
        id[i8] |= 0;
    } else if (Array.isArray(id)) {
      id = id.slice();
      for (let i8 = 0; i8 < id.length; i8++)
        id[i8] |= 0;
    }
    if (!Array.isArray(id)) {
      return this.reporter.error("objid() should be either array or string, got: " + JSON.stringify(id));
    }
    if (!relative) {
      if (id[1] >= 40)
        return this.reporter.error("Second objid identifier OOB");
      id.splice(0, 2, id[0] * 40 + id[1]);
    }
    let size = 0;
    for (let i8 = 0; i8 < id.length; i8++) {
      let ident = id[i8];
      for (size++; ident >= 128; ident >>= 7)
        size++;
    }
    const objid = Buffer3.alloc(size);
    let offset = objid.length - 1;
    for (let i8 = id.length - 1; i8 >= 0; i8--) {
      let ident = id[i8];
      objid[offset--] = ident & 127;
      while ((ident >>= 7) > 0)
        objid[offset--] = 128 | ident & 127;
    }
    return this._createEncoderBuffer(objid);
  };
  function two(num) {
    if (num < 10)
      return "0" + num;
    else
      return num;
  }
  DERNode.prototype._encodeTime = function encodeTime(time, tag) {
    let str;
    const date = new Date(time);
    if (tag === "gentime") {
      str = [two(date.getUTCFullYear()), two(date.getUTCMonth() + 1), two(date.getUTCDate()), two(date.getUTCHours()), two(date.getUTCMinutes()), two(date.getUTCSeconds()), "Z"].join("");
    } else if (tag === "utctime") {
      str = [two(date.getUTCFullYear() % 100), two(date.getUTCMonth() + 1), two(date.getUTCDate()), two(date.getUTCHours()), two(date.getUTCMinutes()), two(date.getUTCSeconds()), "Z"].join("");
    } else {
      this.reporter.error("Encoding " + tag + " time is not supported yet");
    }
    return this._encodeStr(str, "octstr");
  };
  DERNode.prototype._encodeNull = function encodeNull() {
    return this._createEncoderBuffer("");
  };
  DERNode.prototype._encodeInt = function encodeInt(num, values) {
    if (typeof num === "string") {
      if (!values)
        return this.reporter.error("String int or enum given, but no values map");
      if (!values.hasOwnProperty(num)) {
        return this.reporter.error("Values map doesn't contain: " + JSON.stringify(num));
      }
      num = values[num];
    }
    if (typeof num !== "number" && !Buffer3.isBuffer(num)) {
      const numArray = num.toArray();
      if (!num.sign && numArray[0] & 128) {
        numArray.unshift(0);
      }
      num = Buffer3.from(numArray);
    }
    if (Buffer3.isBuffer(num)) {
      let size2 = num.length;
      if (num.length === 0)
        size2++;
      const out2 = Buffer3.alloc(size2);
      num.copy(out2);
      if (num.length === 0)
        out2[0] = 0;
      return this._createEncoderBuffer(out2);
    }
    if (num < 128)
      return this._createEncoderBuffer(num);
    if (num < 256)
      return this._createEncoderBuffer([0, num]);
    let size = 1;
    for (let i8 = num; i8 >= 256; i8 >>= 8)
      size++;
    const out = new Array(size);
    for (let i8 = out.length - 1; i8 >= 0; i8--) {
      out[i8] = num & 255;
      num >>= 8;
    }
    if (out[0] & 128) {
      out.unshift(0);
    }
    return this._createEncoderBuffer(Buffer3.from(out));
  };
  DERNode.prototype._encodeBool = function encodeBool(value) {
    return this._createEncoderBuffer(value ? 255 : 0);
  };
  DERNode.prototype._use = function use(entity, obj) {
    if (typeof entity === "function")
      entity = entity(obj);
    return entity._getEncoder("der").tree;
  };
  DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
    const state = this._baseState;
    let i8;
    if (state["default"] === null)
      return false;
    const data = dataBuffer.join();
    if (state.defaultBuffer === void 0)
      state.defaultBuffer = this._encodeValue(state["default"], reporter, parent).join();
    if (data.length !== state.defaultBuffer.length)
      return false;
    for (i8 = 0; i8 < data.length; i8++)
      if (data[i8] !== state.defaultBuffer[i8])
        return false;
    return true;
  };
  function encodeTag(tag, primitive, cls, reporter) {
    let res;
    if (tag === "seqof")
      tag = "seq";
    else if (tag === "setof")
      tag = "set";
    if (der.tagByName.hasOwnProperty(tag))
      res = der.tagByName[tag];
    else if (typeof tag === "number" && (tag | 0) === tag)
      res = tag;
    else
      return reporter.error("Unknown tag: " + tag);
    if (res >= 31)
      return reporter.error("Multi-octet tag encoding unsupported");
    if (!primitive)
      res |= 32;
    res |= der.tagClassByName[cls || "universal"] << 6;
    return res;
  }
  return exports$s;
}
function dew$q() {
  if (_dewExec$q)
    return exports$r;
  _dewExec$q = true;
  const inherits4 = dew$f();
  const DEREncoder = dew$r();
  function PEMEncoder(entity) {
    DEREncoder.call(this, entity);
    this.enc = "pem";
  }
  inherits4(PEMEncoder, DEREncoder);
  exports$r = PEMEncoder;
  PEMEncoder.prototype.encode = function encode3(data, options) {
    const buf = DEREncoder.prototype.encode.call(this, data);
    const p8 = buf.toString("base64");
    const out = ["-----BEGIN " + options.label + "-----"];
    for (let i8 = 0; i8 < p8.length; i8 += 64)
      out.push(p8.slice(i8, i8 + 64));
    out.push("-----END " + options.label + "-----");
    return out.join("\n");
  };
  return exports$r;
}
function dew$p() {
  if (_dewExec$p)
    return exports$q;
  _dewExec$p = true;
  const encoders = exports$q;
  encoders.der = dew$r();
  encoders.pem = dew$q();
  return exports$q;
}
function dew$o() {
  if (_dewExec$o)
    return exports$p;
  _dewExec$o = true;
  const inherits4 = dew$f();
  const bignum = dew$x();
  const DecoderBuffer = dew$u().DecoderBuffer;
  const Node = dew$t();
  const der = dew$s();
  function DERDecoder(entity) {
    this.enc = "der";
    this.name = entity.name;
    this.entity = entity;
    this.tree = new DERNode();
    this.tree._init(entity.body);
  }
  exports$p = DERDecoder;
  DERDecoder.prototype.decode = function decode(data, options) {
    if (!DecoderBuffer.isDecoderBuffer(data)) {
      data = new DecoderBuffer(data, options);
    }
    return this.tree._decode(data, options);
  };
  function DERNode(parent) {
    Node.call(this, "der", parent);
  }
  inherits4(DERNode, Node);
  DERNode.prototype._peekTag = function peekTag(buffer2, tag, any) {
    if (buffer2.isEmpty())
      return false;
    const state = buffer2.save();
    const decodedTag = derDecodeTag(buffer2, 'Failed to peek tag: "' + tag + '"');
    if (buffer2.isError(decodedTag))
      return decodedTag;
    buffer2.restore(state);
    return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + "of" === tag || any;
  };
  DERNode.prototype._decodeTag = function decodeTag(buffer2, tag, any) {
    const decodedTag = derDecodeTag(buffer2, 'Failed to decode tag of "' + tag + '"');
    if (buffer2.isError(decodedTag))
      return decodedTag;
    let len = derDecodeLen(buffer2, decodedTag.primitive, 'Failed to get length of "' + tag + '"');
    if (buffer2.isError(len))
      return len;
    if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + "of" !== tag) {
      return buffer2.error('Failed to match tag: "' + tag + '"');
    }
    if (decodedTag.primitive || len !== null)
      return buffer2.skip(len, 'Failed to match body of: "' + tag + '"');
    const state = buffer2.save();
    const res = this._skipUntilEnd(buffer2, 'Failed to skip indefinite length body: "' + this.tag + '"');
    if (buffer2.isError(res))
      return res;
    len = buffer2.offset - state.offset;
    buffer2.restore(state);
    return buffer2.skip(len, 'Failed to match body of: "' + tag + '"');
  };
  DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer2, fail) {
    for (; ; ) {
      const tag = derDecodeTag(buffer2, fail);
      if (buffer2.isError(tag))
        return tag;
      const len = derDecodeLen(buffer2, tag.primitive, fail);
      if (buffer2.isError(len))
        return len;
      let res;
      if (tag.primitive || len !== null)
        res = buffer2.skip(len);
      else
        res = this._skipUntilEnd(buffer2, fail);
      if (buffer2.isError(res))
        return res;
      if (tag.tagStr === "end")
        break;
    }
  };
  DERNode.prototype._decodeList = function decodeList(buffer2, tag, decoder, options) {
    const result = [];
    while (!buffer2.isEmpty()) {
      const possibleEnd = this._peekTag(buffer2, "end");
      if (buffer2.isError(possibleEnd))
        return possibleEnd;
      const res = decoder.decode(buffer2, "der", options);
      if (buffer2.isError(res) && possibleEnd)
        break;
      result.push(res);
    }
    return result;
  };
  DERNode.prototype._decodeStr = function decodeStr(buffer2, tag) {
    if (tag === "bitstr") {
      const unused = buffer2.readUInt8();
      if (buffer2.isError(unused))
        return unused;
      return {
        unused,
        data: buffer2.raw()
      };
    } else if (tag === "bmpstr") {
      const raw = buffer2.raw();
      if (raw.length % 2 === 1)
        return buffer2.error("Decoding of string type: bmpstr length mismatch");
      let str = "";
      for (let i8 = 0; i8 < raw.length / 2; i8++) {
        str += String.fromCharCode(raw.readUInt16BE(i8 * 2));
      }
      return str;
    } else if (tag === "numstr") {
      const numstr = buffer2.raw().toString("ascii");
      if (!this._isNumstr(numstr)) {
        return buffer2.error("Decoding of string type: numstr unsupported characters");
      }
      return numstr;
    } else if (tag === "octstr") {
      return buffer2.raw();
    } else if (tag === "objDesc") {
      return buffer2.raw();
    } else if (tag === "printstr") {
      const printstr = buffer2.raw().toString("ascii");
      if (!this._isPrintstr(printstr)) {
        return buffer2.error("Decoding of string type: printstr unsupported characters");
      }
      return printstr;
    } else if (/str$/.test(tag)) {
      return buffer2.raw().toString();
    } else {
      return buffer2.error("Decoding of string type: " + tag + " unsupported");
    }
  };
  DERNode.prototype._decodeObjid = function decodeObjid(buffer2, values, relative) {
    let result;
    const identifiers = [];
    let ident = 0;
    let subident = 0;
    while (!buffer2.isEmpty()) {
      subident = buffer2.readUInt8();
      ident <<= 7;
      ident |= subident & 127;
      if ((subident & 128) === 0) {
        identifiers.push(ident);
        ident = 0;
      }
    }
    if (subident & 128)
      identifiers.push(ident);
    const first = identifiers[0] / 40 | 0;
    const second = identifiers[0] % 40;
    if (relative)
      result = identifiers;
    else
      result = [first, second].concat(identifiers.slice(1));
    if (values) {
      let tmp = values[result.join(" ")];
      if (tmp === void 0)
        tmp = values[result.join(".")];
      if (tmp !== void 0)
        result = tmp;
    }
    return result;
  };
  DERNode.prototype._decodeTime = function decodeTime(buffer2, tag) {
    const str = buffer2.raw().toString();
    let year;
    let mon;
    let day;
    let hour;
    let min;
    let sec;
    if (tag === "gentime") {
      year = str.slice(0, 4) | 0;
      mon = str.slice(4, 6) | 0;
      day = str.slice(6, 8) | 0;
      hour = str.slice(8, 10) | 0;
      min = str.slice(10, 12) | 0;
      sec = str.slice(12, 14) | 0;
    } else if (tag === "utctime") {
      year = str.slice(0, 2) | 0;
      mon = str.slice(2, 4) | 0;
      day = str.slice(4, 6) | 0;
      hour = str.slice(6, 8) | 0;
      min = str.slice(8, 10) | 0;
      sec = str.slice(10, 12) | 0;
      if (year < 70)
        year = 2e3 + year;
      else
        year = 1900 + year;
    } else {
      return buffer2.error("Decoding " + tag + " time is not supported yet");
    }
    return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
  };
  DERNode.prototype._decodeNull = function decodeNull() {
    return null;
  };
  DERNode.prototype._decodeBool = function decodeBool(buffer2) {
    const res = buffer2.readUInt8();
    if (buffer2.isError(res))
      return res;
    else
      return res !== 0;
  };
  DERNode.prototype._decodeInt = function decodeInt(buffer2, values) {
    const raw = buffer2.raw();
    let res = new bignum(raw);
    if (values)
      res = values[res.toString(10)] || res;
    return res;
  };
  DERNode.prototype._use = function use(entity, obj) {
    if (typeof entity === "function")
      entity = entity(obj);
    return entity._getDecoder("der").tree;
  };
  function derDecodeTag(buf, fail) {
    let tag = buf.readUInt8(fail);
    if (buf.isError(tag))
      return tag;
    const cls = der.tagClass[tag >> 6];
    const primitive = (tag & 32) === 0;
    if ((tag & 31) === 31) {
      let oct = tag;
      tag = 0;
      while ((oct & 128) === 128) {
        oct = buf.readUInt8(fail);
        if (buf.isError(oct))
          return oct;
        tag <<= 7;
        tag |= oct & 127;
      }
    } else {
      tag &= 31;
    }
    const tagStr = der.tag[tag];
    return {
      cls,
      primitive,
      tag,
      tagStr
    };
  }
  function derDecodeLen(buf, primitive, fail) {
    let len = buf.readUInt8(fail);
    if (buf.isError(len))
      return len;
    if (!primitive && len === 128)
      return null;
    if ((len & 128) === 0) {
      return len;
    }
    const num = len & 127;
    if (num > 4)
      return buf.error("length octect is too long");
    len = 0;
    for (let i8 = 0; i8 < num; i8++) {
      len <<= 8;
      const j4 = buf.readUInt8(fail);
      if (buf.isError(j4))
        return j4;
      len |= j4;
    }
    return len;
  }
  return exports$p;
}
function dew$n() {
  if (_dewExec$n)
    return exports$o;
  _dewExec$n = true;
  const inherits4 = dew$f();
  const Buffer3 = dew$w().Buffer;
  const DERDecoder = dew$o();
  function PEMDecoder(entity) {
    DERDecoder.call(this, entity);
    this.enc = "pem";
  }
  inherits4(PEMDecoder, DERDecoder);
  exports$o = PEMDecoder;
  PEMDecoder.prototype.decode = function decode(data, options) {
    const lines = data.toString().split(/[\r\n]+/g);
    const label = options.label.toUpperCase();
    const re3 = /^-----(BEGIN|END) ([^-]+)-----$/;
    let start = -1;
    let end = -1;
    for (let i8 = 0; i8 < lines.length; i8++) {
      const match = lines[i8].match(re3);
      if (match === null)
        continue;
      if (match[2] !== label)
        continue;
      if (start === -1) {
        if (match[1] !== "BEGIN")
          break;
        start = i8;
      } else {
        if (match[1] !== "END")
          break;
        end = i8;
        break;
      }
    }
    if (start === -1 || end === -1)
      throw new Error("PEM section not found for: " + label);
    const base64 = lines.slice(start + 1, end).join("");
    base64.replace(/[^a-z0-9+/=]+/gi, "");
    const input = Buffer3.from(base64, "base64");
    return DERDecoder.prototype.decode.call(this, input, options);
  };
  return exports$o;
}
function dew$m() {
  if (_dewExec$m)
    return exports$n;
  _dewExec$m = true;
  const decoders = exports$n;
  decoders.der = dew$o();
  decoders.pem = dew$n();
  return exports$n;
}
function dew$l() {
  if (_dewExec$l)
    return exports$m;
  _dewExec$l = true;
  const encoders = dew$p();
  const decoders = dew$m();
  const inherits4 = dew$f();
  const api = exports$m;
  api.define = function define2(name2, body) {
    return new Entity(name2, body);
  };
  function Entity(name2, body) {
    this.name = name2;
    this.body = body;
    this.decoders = {};
    this.encoders = {};
  }
  Entity.prototype._createNamed = function createNamed(Base) {
    const name2 = this.name;
    function Generated(entity) {
      this._initNamed(entity, name2);
    }
    inherits4(Generated, Base);
    Generated.prototype._initNamed = function _initNamed(entity, name3) {
      Base.call(this, entity, name3);
    };
    return new Generated(this);
  };
  Entity.prototype._getDecoder = function _getDecoder(enc) {
    enc = enc || "der";
    if (!this.decoders.hasOwnProperty(enc))
      this.decoders[enc] = this._createNamed(decoders[enc]);
    return this.decoders[enc];
  };
  Entity.prototype.decode = function decode(data, enc, options) {
    return this._getDecoder(enc).decode(data, options);
  };
  Entity.prototype._getEncoder = function _getEncoder(enc) {
    enc = enc || "der";
    if (!this.encoders.hasOwnProperty(enc))
      this.encoders[enc] = this._createNamed(encoders[enc]);
    return this.encoders[enc];
  };
  Entity.prototype.encode = function encode3(data, enc, reporter) {
    return this._getEncoder(enc).encode(data, reporter);
  };
  return exports$m;
}
function dew$k() {
  if (_dewExec$k)
    return exports$l;
  _dewExec$k = true;
  const base = exports$l;
  base.Reporter = dew$v().Reporter;
  base.DecoderBuffer = dew$u().DecoderBuffer;
  base.EncoderBuffer = dew$u().EncoderBuffer;
  base.Node = dew$t();
  return exports$l;
}
function dew$j() {
  if (_dewExec$j)
    return exports$k;
  _dewExec$j = true;
  const constants2 = exports$k;
  constants2._reverse = function reverse(map) {
    const res = {};
    Object.keys(map).forEach(function(key) {
      if ((key | 0) == key)
        key = key | 0;
      const value = map[key];
      res[value] = key;
    });
    return res;
  };
  constants2.der = dew$s();
  return exports$k;
}
function dew$i() {
  if (_dewExec$i)
    return exports$j;
  _dewExec$i = true;
  const asn1 = exports$j;
  asn1.bignum = dew$x();
  asn1.define = dew$l().define;
  asn1.base = dew$k();
  asn1.constants = dew$j();
  asn1.decoders = dew$m();
  asn1.encoders = dew$p();
  return exports$j;
}
function dew$h() {
  if (_dewExec$h)
    return exports$i;
  _dewExec$h = true;
  var asn = dew$i();
  var Time = asn.define("Time", function() {
    this.choice({
      utcTime: this.utctime(),
      generalTime: this.gentime()
    });
  });
  var AttributeTypeValue = asn.define("AttributeTypeValue", function() {
    this.seq().obj(this.key("type").objid(), this.key("value").any());
  });
  var AlgorithmIdentifier = asn.define("AlgorithmIdentifier", function() {
    this.seq().obj(this.key("algorithm").objid(), this.key("parameters").optional(), this.key("curve").objid().optional());
  });
  var SubjectPublicKeyInfo = asn.define("SubjectPublicKeyInfo", function() {
    this.seq().obj(this.key("algorithm").use(AlgorithmIdentifier), this.key("subjectPublicKey").bitstr());
  });
  var RelativeDistinguishedName = asn.define("RelativeDistinguishedName", function() {
    this.setof(AttributeTypeValue);
  });
  var RDNSequence = asn.define("RDNSequence", function() {
    this.seqof(RelativeDistinguishedName);
  });
  var Name = asn.define("Name", function() {
    this.choice({
      rdnSequence: this.use(RDNSequence)
    });
  });
  var Validity = asn.define("Validity", function() {
    this.seq().obj(this.key("notBefore").use(Time), this.key("notAfter").use(Time));
  });
  var Extension = asn.define("Extension", function() {
    this.seq().obj(this.key("extnID").objid(), this.key("critical").bool().def(false), this.key("extnValue").octstr());
  });
  var TBSCertificate = asn.define("TBSCertificate", function() {
    this.seq().obj(this.key("version").explicit(0).int().optional(), this.key("serialNumber").int(), this.key("signature").use(AlgorithmIdentifier), this.key("issuer").use(Name), this.key("validity").use(Validity), this.key("subject").use(Name), this.key("subjectPublicKeyInfo").use(SubjectPublicKeyInfo), this.key("issuerUniqueID").implicit(1).bitstr().optional(), this.key("subjectUniqueID").implicit(2).bitstr().optional(), this.key("extensions").explicit(3).seqof(Extension).optional());
  });
  var X509Certificate = asn.define("X509Certificate", function() {
    this.seq().obj(this.key("tbsCertificate").use(TBSCertificate), this.key("signatureAlgorithm").use(AlgorithmIdentifier), this.key("signatureValue").bitstr());
  });
  exports$i = X509Certificate;
  return exports$i;
}
function dew$g2() {
  if (_dewExec$g2)
    return exports$h;
  _dewExec$g2 = true;
  var asn1 = dew$i();
  exports$h.certificate = dew$h();
  var RSAPrivateKey = asn1.define("RSAPrivateKey", function() {
    this.seq().obj(this.key("version").int(), this.key("modulus").int(), this.key("publicExponent").int(), this.key("privateExponent").int(), this.key("prime1").int(), this.key("prime2").int(), this.key("exponent1").int(), this.key("exponent2").int(), this.key("coefficient").int());
  });
  exports$h.RSAPrivateKey = RSAPrivateKey;
  var RSAPublicKey = asn1.define("RSAPublicKey", function() {
    this.seq().obj(this.key("modulus").int(), this.key("publicExponent").int());
  });
  exports$h.RSAPublicKey = RSAPublicKey;
  var PublicKey = asn1.define("SubjectPublicKeyInfo", function() {
    this.seq().obj(this.key("algorithm").use(AlgorithmIdentifier), this.key("subjectPublicKey").bitstr());
  });
  exports$h.PublicKey = PublicKey;
  var AlgorithmIdentifier = asn1.define("AlgorithmIdentifier", function() {
    this.seq().obj(this.key("algorithm").objid(), this.key("none").null_().optional(), this.key("curve").objid().optional(), this.key("params").seq().obj(this.key("p").int(), this.key("q").int(), this.key("g").int()).optional());
  });
  var PrivateKeyInfo = asn1.define("PrivateKeyInfo", function() {
    this.seq().obj(this.key("version").int(), this.key("algorithm").use(AlgorithmIdentifier), this.key("subjectPrivateKey").octstr());
  });
  exports$h.PrivateKey = PrivateKeyInfo;
  var EncryptedPrivateKeyInfo = asn1.define("EncryptedPrivateKeyInfo", function() {
    this.seq().obj(this.key("algorithm").seq().obj(this.key("id").objid(), this.key("decrypt").seq().obj(this.key("kde").seq().obj(this.key("id").objid(), this.key("kdeparams").seq().obj(this.key("salt").octstr(), this.key("iters").int())), this.key("cipher").seq().obj(this.key("algo").objid(), this.key("iv").octstr()))), this.key("subjectPrivateKey").octstr());
  });
  exports$h.EncryptedPrivateKey = EncryptedPrivateKeyInfo;
  var DSAPrivateKey = asn1.define("DSAPrivateKey", function() {
    this.seq().obj(this.key("version").int(), this.key("p").int(), this.key("q").int(), this.key("g").int(), this.key("pub_key").int(), this.key("priv_key").int());
  });
  exports$h.DSAPrivateKey = DSAPrivateKey;
  exports$h.DSAparam = asn1.define("DSAparam", function() {
    this.int();
  });
  var ECPrivateKey = asn1.define("ECPrivateKey", function() {
    this.seq().obj(this.key("version").int(), this.key("privateKey").octstr(), this.key("parameters").optional().explicit(0).use(ECParameters), this.key("publicKey").optional().explicit(1).bitstr());
  });
  exports$h.ECPrivateKey = ECPrivateKey;
  var ECParameters = asn1.define("ECParameters", function() {
    this.choice({
      namedCurve: this.objid()
    });
  });
  exports$h.signature = asn1.define("signature", function() {
    this.seq().obj(this.key("r").int(), this.key("s").int());
  });
  return exports$h;
}
function dew$f2() {
  if (_dewExec$f2)
    return exports$g2;
  _dewExec$f2 = true;
  var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m;
  var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m;
  var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m;
  var evp = dew$21();
  var ciphers = dew$1_();
  var Buffer3 = dew$2P().Buffer;
  exports$g2 = function(okey, password) {
    var key = okey.toString();
    var match = key.match(findProc);
    var decrypted;
    if (!match) {
      var match2 = key.match(fullRegex);
      decrypted = Buffer3.from(match2[2].replace(/[\r\n]/g, ""), "base64");
    } else {
      var suite = "aes" + match[1];
      var iv = Buffer3.from(match[2], "hex");
      var cipherText = Buffer3.from(match[3].replace(/[\r\n]/g, ""), "base64");
      var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key;
      var out = [];
      var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);
      out.push(cipher.update(cipherText));
      out.push(cipher.final());
      decrypted = Buffer3.concat(out);
    }
    var tag = key.match(startRegex)[1];
    return {
      tag,
      data: decrypted
    };
  };
  return exports$g2;
}
function dew$e2() {
  if (_dewExec$e2)
    return exports$f2;
  _dewExec$e2 = true;
  var asn1 = dew$g2();
  var aesid = _aesid;
  var fixProc = dew$f2();
  var ciphers = dew$1_();
  var compat = dew$2o();
  var Buffer3 = dew$2P().Buffer;
  exports$f2 = parseKeys;
  function parseKeys(buffer2) {
    var password;
    if (typeof buffer2 === "object" && !Buffer3.isBuffer(buffer2)) {
      password = buffer2.passphrase;
      buffer2 = buffer2.key;
    }
    if (typeof buffer2 === "string") {
      buffer2 = Buffer3.from(buffer2);
    }
    var stripped = fixProc(buffer2, password);
    var type = stripped.tag;
    var data = stripped.data;
    var subtype, ndata;
    switch (type) {
      case "CERTIFICATE":
        ndata = asn1.certificate.decode(data, "der").tbsCertificate.subjectPublicKeyInfo;
      case "PUBLIC KEY":
        if (!ndata) {
          ndata = asn1.PublicKey.decode(data, "der");
        }
        subtype = ndata.algorithm.algorithm.join(".");
        switch (subtype) {
          case "1.2.840.113549.1.1.1":
            return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, "der");
          case "1.2.840.10045.2.1":
            ndata.subjectPrivateKey = ndata.subjectPublicKey;
            return {
              type: "ec",
              data: ndata
            };
          case "1.2.840.10040.4.1":
            ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, "der");
            return {
              type: "dsa",
              data: ndata.algorithm.params
            };
          default:
            throw new Error("unknown key id " + subtype);
        }
      case "ENCRYPTED PRIVATE KEY":
        data = asn1.EncryptedPrivateKey.decode(data, "der");
        data = decrypt(data, password);
      case "PRIVATE KEY":
        ndata = asn1.PrivateKey.decode(data, "der");
        subtype = ndata.algorithm.algorithm.join(".");
        switch (subtype) {
          case "1.2.840.113549.1.1.1":
            return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, "der");
          case "1.2.840.10045.2.1":
            return {
              curve: ndata.algorithm.curve,
              privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, "der").privateKey
            };
          case "1.2.840.10040.4.1":
            ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, "der");
            return {
              type: "dsa",
              params: ndata.algorithm.params
            };
          default:
            throw new Error("unknown key id " + subtype);
        }
      case "RSA PUBLIC KEY":
        return asn1.RSAPublicKey.decode(data, "der");
      case "RSA PRIVATE KEY":
        return asn1.RSAPrivateKey.decode(data, "der");
      case "DSA PRIVATE KEY":
        return {
          type: "dsa",
          params: asn1.DSAPrivateKey.decode(data, "der")
        };
      case "EC PRIVATE KEY":
        data = asn1.ECPrivateKey.decode(data, "der");
        return {
          curve: data.parameters.value,
          privateKey: data.privateKey
        };
      default:
        throw new Error("unknown key type " + type);
    }
  }
  parseKeys.signature = asn1.signature;
  function decrypt(data, password) {
    var salt = data.algorithm.decrypt.kde.kdeparams.salt;
    var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
    var algo = aesid[data.algorithm.decrypt.cipher.algo.join(".")];
    var iv = data.algorithm.decrypt.cipher.iv;
    var cipherText = data.subjectPrivateKey;
    var keylen = parseInt(algo.split("-")[1], 10) / 8;
    var key = compat.pbkdf2Sync(password, salt, iters, keylen, "sha1");
    var cipher = ciphers.createDecipheriv(algo, key, iv);
    var out = [];
    out.push(cipher.update(cipherText));
    out.push(cipher.final());
    return Buffer3.concat(out);
  }
  return exports$f2;
}
function dew$d2() {
  if (_dewExec$d2)
    return exports$e2;
  _dewExec$d2 = true;
  var Buffer3 = dew$Y().Buffer;
  var createHmac2 = dew$2v();
  var crt = dew$W();
  var EC = dew$y().ec;
  var BN = dew$X();
  var parseKeys = dew$e2();
  var curves = _curves;
  function sign(hash, key, hashType, signType, tag) {
    var priv = parseKeys(key);
    if (priv.curve) {
      if (signType !== "ecdsa" && signType !== "ecdsa/rsa")
        throw new Error("wrong private key type");
      return ecSign(hash, priv);
    } else if (priv.type === "dsa") {
      if (signType !== "dsa")
        throw new Error("wrong private key type");
      return dsaSign(hash, priv, hashType);
    } else {
      if (signType !== "rsa" && signType !== "ecdsa/rsa")
        throw new Error("wrong private key type");
    }
    hash = Buffer3.concat([tag, hash]);
    var len = priv.modulus.byteLength();
    var pad = [0, 1];
    while (hash.length + pad.length + 1 < len)
      pad.push(255);
    pad.push(0);
    var i8 = -1;
    while (++i8 < hash.length)
      pad.push(hash[i8]);
    var out = crt(pad, priv);
    return out;
  }
  function ecSign(hash, priv) {
    var curveId = curves[priv.curve.join(".")];
    if (!curveId)
      throw new Error("unknown curve " + priv.curve.join("."));
    var curve = new EC(curveId);
    var key = curve.keyFromPrivate(priv.privateKey);
    var out = key.sign(hash);
    return Buffer3.from(out.toDER());
  }
  function dsaSign(hash, priv, algo) {
    var x4 = priv.params.priv_key;
    var p8 = priv.params.p;
    var q3 = priv.params.q;
    var g5 = priv.params.g;
    var r9 = new BN(0);
    var k4;
    var H3 = bits2int(hash, q3).mod(q3);
    var s7 = false;
    var kv = getKey(x4, q3, hash, algo);
    while (s7 === false) {
      k4 = makeKey(q3, kv, algo);
      r9 = makeR(g5, k4, p8, q3);
      s7 = k4.invm(q3).imul(H3.add(x4.mul(r9))).mod(q3);
      if (s7.cmpn(0) === 0) {
        s7 = false;
        r9 = new BN(0);
      }
    }
    return toDER(r9, s7);
  }
  function toDER(r9, s7) {
    r9 = r9.toArray();
    s7 = s7.toArray();
    if (r9[0] & 128)
      r9 = [0].concat(r9);
    if (s7[0] & 128)
      s7 = [0].concat(s7);
    var total = r9.length + s7.length + 4;
    var res = [48, total, 2, r9.length];
    res = res.concat(r9, [2, s7.length], s7);
    return Buffer3.from(res);
  }
  function getKey(x4, q3, hash, algo) {
    x4 = Buffer3.from(x4.toArray());
    if (x4.length < q3.byteLength()) {
      var zeros = Buffer3.alloc(q3.byteLength() - x4.length);
      x4 = Buffer3.concat([zeros, x4]);
    }
    var hlen = hash.length;
    var hbits = bits2octets(hash, q3);
    var v6 = Buffer3.alloc(hlen);
    v6.fill(1);
    var k4 = Buffer3.alloc(hlen);
    k4 = createHmac2(algo, k4).update(v6).update(Buffer3.from([0])).update(x4).update(hbits).digest();
    v6 = createHmac2(algo, k4).update(v6).digest();
    k4 = createHmac2(algo, k4).update(v6).update(Buffer3.from([1])).update(x4).update(hbits).digest();
    v6 = createHmac2(algo, k4).update(v6).digest();
    return {
      k: k4,
      v: v6
    };
  }
  function bits2int(obits, q3) {
    var bits = new BN(obits);
    var shift = (obits.length << 3) - q3.bitLength();
    if (shift > 0)
      bits.ishrn(shift);
    return bits;
  }
  function bits2octets(bits, q3) {
    bits = bits2int(bits, q3);
    bits = bits.mod(q3);
    var out = Buffer3.from(bits.toArray());
    if (out.length < q3.byteLength()) {
      var zeros = Buffer3.alloc(q3.byteLength() - out.length);
      out = Buffer3.concat([zeros, out]);
    }
    return out;
  }
  function makeKey(q3, kv, algo) {
    var t8;
    var k4;
    do {
      t8 = Buffer3.alloc(0);
      while (t8.length * 8 < q3.bitLength()) {
        kv.v = createHmac2(algo, kv.k).update(kv.v).digest();
        t8 = Buffer3.concat([t8, kv.v]);
      }
      k4 = bits2int(t8, q3);
      kv.k = createHmac2(algo, kv.k).update(kv.v).update(Buffer3.from([0])).digest();
      kv.v = createHmac2(algo, kv.k).update(kv.v).digest();
    } while (k4.cmp(q3) !== -1);
    return k4;
  }
  function makeR(g5, k4, p8, q3) {
    return g5.toRed(BN.mont(p8)).redPow(k4).fromRed().mod(q3);
  }
  exports$e2 = sign;
  exports$e2.getKey = getKey;
  exports$e2.makeKey = makeKey;
  return exports$e2;
}
function dew$c2() {
  if (_dewExec$c2)
    return exports$d2;
  _dewExec$c2 = true;
  var Buffer3 = dew$Y().Buffer;
  var BN = dew$X();
  var EC = dew$y().ec;
  var parseKeys = dew$e2();
  var curves = _curves;
  function verify(sig, hash, key, signType, tag) {
    var pub = parseKeys(key);
    if (pub.type === "ec") {
      if (signType !== "ecdsa" && signType !== "ecdsa/rsa")
        throw new Error("wrong public key type");
      return ecVerify(sig, hash, pub);
    } else if (pub.type === "dsa") {
      if (signType !== "dsa")
        throw new Error("wrong public key type");
      return dsaVerify(sig, hash, pub);
    } else {
      if (signType !== "rsa" && signType !== "ecdsa/rsa")
        throw new Error("wrong public key type");
    }
    hash = Buffer3.concat([tag, hash]);
    var len = pub.modulus.byteLength();
    var pad = [1];
    var padNum = 0;
    while (hash.length + pad.length + 2 < len) {
      pad.push(255);
      padNum++;
    }
    pad.push(0);
    var i8 = -1;
    while (++i8 < hash.length) {
      pad.push(hash[i8]);
    }
    pad = Buffer3.from(pad);
    var red = BN.mont(pub.modulus);
    sig = new BN(sig).toRed(red);
    sig = sig.redPow(new BN(pub.publicExponent));
    sig = Buffer3.from(sig.fromRed().toArray());
    var out = padNum < 8 ? 1 : 0;
    len = Math.min(sig.length, pad.length);
    if (sig.length !== pad.length)
      out = 1;
    i8 = -1;
    while (++i8 < len)
      out |= sig[i8] ^ pad[i8];
    return out === 0;
  }
  function ecVerify(sig, hash, pub) {
    var curveId = curves[pub.data.algorithm.curve.join(".")];
    if (!curveId)
      throw new Error("unknown curve " + pub.data.algorithm.curve.join("."));
    var curve = new EC(curveId);
    var pubkey = pub.data.subjectPrivateKey.data;
    return curve.verify(hash, sig, pubkey);
  }
  function dsaVerify(sig, hash, pub) {
    var p8 = pub.data.p;
    var q3 = pub.data.q;
    var g5 = pub.data.g;
    var y6 = pub.data.pub_key;
    var unpacked = parseKeys.signature.decode(sig, "der");
    var s7 = unpacked.s;
    var r9 = unpacked.r;
    checkValue(s7, q3);
    checkValue(r9, q3);
    var montp = BN.mont(p8);
    var w4 = s7.invm(q3);
    var v6 = g5.toRed(montp).redPow(new BN(hash).mul(w4).mod(q3)).fromRed().mul(y6.toRed(montp).redPow(r9.mul(w4).mod(q3)).fromRed()).mod(p8).mod(q3);
    return v6.cmp(r9) === 0;
  }
  function checkValue(b5, q3) {
    if (b5.cmpn(0) <= 0)
      throw new Error("invalid sig");
    if (b5.cmp(q3) >= q3)
      throw new Error("invalid sig");
  }
  exports$d2 = verify;
  return exports$d2;
}
function dew$b2() {
  if (_dewExec$b2)
    return exports$c2;
  _dewExec$b2 = true;
  var Buffer3 = dew$Y().Buffer;
  var createHash2 = dew$2y();
  var stream2 = dew4();
  var inherits4 = dew$f();
  var sign = dew$d2();
  var verify = dew$c2();
  var algorithms = _algorithms$1;
  Object.keys(algorithms).forEach(function(key) {
    algorithms[key].id = Buffer3.from(algorithms[key].id, "hex");
    algorithms[key.toLowerCase()] = algorithms[key];
  });
  function Sign2(algorithm) {
    stream2.Writable.call(this || _global$4);
    var data = algorithms[algorithm];
    if (!data)
      throw new Error("Unknown message digest");
    (this || _global$4)._hashType = data.hash;
    (this || _global$4)._hash = createHash2(data.hash);
    (this || _global$4)._tag = data.id;
    (this || _global$4)._signType = data.sign;
  }
  inherits4(Sign2, stream2.Writable);
  Sign2.prototype._write = function _write(data, _4, done) {
    (this || _global$4)._hash.update(data);
    done();
  };
  Sign2.prototype.update = function update(data, enc) {
    if (typeof data === "string")
      data = Buffer3.from(data, enc);
    (this || _global$4)._hash.update(data);
    return this || _global$4;
  };
  Sign2.prototype.sign = function signMethod(key, enc) {
    this.end();
    var hash = (this || _global$4)._hash.digest();
    var sig = sign(hash, key, (this || _global$4)._hashType, (this || _global$4)._signType, (this || _global$4)._tag);
    return enc ? sig.toString(enc) : sig;
  };
  function Verify2(algorithm) {
    stream2.Writable.call(this || _global$4);
    var data = algorithms[algorithm];
    if (!data)
      throw new Error("Unknown message digest");
    (this || _global$4)._hash = createHash2(data.hash);
    (this || _global$4)._tag = data.id;
    (this || _global$4)._signType = data.sign;
  }
  inherits4(Verify2, stream2.Writable);
  Verify2.prototype._write = function _write(data, _4, done) {
    (this || _global$4)._hash.update(data);
    done();
  };
  Verify2.prototype.update = function update(data, enc) {
    if (typeof data === "string")
      data = Buffer3.from(data, enc);
    (this || _global$4)._hash.update(data);
    return this || _global$4;
  };
  Verify2.prototype.verify = function verifyMethod(key, sig, enc) {
    if (typeof sig === "string")
      sig = Buffer3.from(sig, enc);
    this.end();
    var hash = (this || _global$4)._hash.digest();
    return verify(sig, hash, key, (this || _global$4)._signType, (this || _global$4)._tag);
  };
  function createSign2(algorithm) {
    return new Sign2(algorithm);
  }
  function createVerify2(algorithm) {
    return new Verify2(algorithm);
  }
  exports$c2 = {
    Sign: createSign2,
    Verify: createVerify2,
    createSign: createSign2,
    createVerify: createVerify2
  };
  return exports$c2;
}
function dew$a2() {
  if (_dewExec$a2)
    return module$1.exports;
  _dewExec$a2 = true;
  (function(module3, exports11) {
    function assert2(val, msg) {
      if (!val)
        throw new Error(msg || "Assertion failed");
    }
    function inherits4(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function() {
      };
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }
    function BN(number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }
      (this || _global$3).negative = 0;
      (this || _global$3).words = null;
      (this || _global$3).length = 0;
      (this || _global$3).red = null;
      if (number !== null) {
        if (base === "le" || base === "be") {
          endian = base;
          base = 10;
        }
        this._init(number || 0, base || 10, endian || "be");
      }
    }
    if (typeof module3 === "object") {
      module3.exports = BN;
    } else {
      exports11.BN = BN;
    }
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer3;
    try {
      if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
        Buffer3 = window.Buffer;
      } else {
        Buffer3 = buffer.Buffer;
      }
    } catch (e11) {
    }
    BN.isBN = function isBN(num) {
      if (num instanceof BN) {
        return true;
      }
      return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
      if (left.cmp(right) > 0)
        return left;
      return right;
    };
    BN.min = function min(left, right) {
      if (left.cmp(right) < 0)
        return left;
      return right;
    };
    BN.prototype._init = function init2(number, base, endian) {
      if (typeof number === "number") {
        return this._initNumber(number, base, endian);
      }
      if (typeof number === "object") {
        return this._initArray(number, base, endian);
      }
      if (base === "hex") {
        base = 16;
      }
      assert2(base === (base | 0) && base >= 2 && base <= 36);
      number = number.toString().replace(/\s+/g, "");
      var start = 0;
      if (number[0] === "-") {
        start++;
        (this || _global$3).negative = 1;
      }
      if (start < number.length) {
        if (base === 16) {
          this._parseHex(number, start, endian);
        } else {
          this._parseBase(number, base, start);
          if (endian === "le") {
            this._initArray(this.toArray(), base, endian);
          }
        }
      }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
      if (number < 0) {
        (this || _global$3).negative = 1;
        number = -number;
      }
      if (number < 67108864) {
        (this || _global$3).words = [number & 67108863];
        (this || _global$3).length = 1;
      } else if (number < 4503599627370496) {
        (this || _global$3).words = [number & 67108863, number / 67108864 & 67108863];
        (this || _global$3).length = 2;
      } else {
        assert2(number < 9007199254740992);
        (this || _global$3).words = [number & 67108863, number / 67108864 & 67108863, 1];
        (this || _global$3).length = 3;
      }
      if (endian !== "le")
        return;
      this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
      assert2(typeof number.length === "number");
      if (number.length <= 0) {
        (this || _global$3).words = [0];
        (this || _global$3).length = 1;
        return this || _global$3;
      }
      (this || _global$3).length = Math.ceil(number.length / 3);
      (this || _global$3).words = new Array((this || _global$3).length);
      for (var i8 = 0; i8 < (this || _global$3).length; i8++) {
        (this || _global$3).words[i8] = 0;
      }
      var j4, w4;
      var off2 = 0;
      if (endian === "be") {
        for (i8 = number.length - 1, j4 = 0; i8 >= 0; i8 -= 3) {
          w4 = number[i8] | number[i8 - 1] << 8 | number[i8 - 2] << 16;
          (this || _global$3).words[j4] |= w4 << off2 & 67108863;
          (this || _global$3).words[j4 + 1] = w4 >>> 26 - off2 & 67108863;
          off2 += 24;
          if (off2 >= 26) {
            off2 -= 26;
            j4++;
          }
        }
      } else if (endian === "le") {
        for (i8 = 0, j4 = 0; i8 < number.length; i8 += 3) {
          w4 = number[i8] | number[i8 + 1] << 8 | number[i8 + 2] << 16;
          (this || _global$3).words[j4] |= w4 << off2 & 67108863;
          (this || _global$3).words[j4 + 1] = w4 >>> 26 - off2 & 67108863;
          off2 += 24;
          if (off2 >= 26) {
            off2 -= 26;
            j4++;
          }
        }
      }
      return this.strip();
    };
    function parseHex4Bits(string, index) {
      var c8 = string.charCodeAt(index);
      if (c8 >= 65 && c8 <= 70) {
        return c8 - 55;
      } else if (c8 >= 97 && c8 <= 102) {
        return c8 - 87;
      } else {
        return c8 - 48 & 15;
      }
    }
    function parseHexByte(string, lowerBound, index) {
      var r9 = parseHex4Bits(string, index);
      if (index - 1 >= lowerBound) {
        r9 |= parseHex4Bits(string, index - 1) << 4;
      }
      return r9;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
      (this || _global$3).length = Math.ceil((number.length - start) / 6);
      (this || _global$3).words = new Array((this || _global$3).length);
      for (var i8 = 0; i8 < (this || _global$3).length; i8++) {
        (this || _global$3).words[i8] = 0;
      }
      var off2 = 0;
      var j4 = 0;
      var w4;
      if (endian === "be") {
        for (i8 = number.length - 1; i8 >= start; i8 -= 2) {
          w4 = parseHexByte(number, start, i8) << off2;
          (this || _global$3).words[j4] |= w4 & 67108863;
          if (off2 >= 18) {
            off2 -= 18;
            j4 += 1;
            (this || _global$3).words[j4] |= w4 >>> 26;
          } else {
            off2 += 8;
          }
        }
      } else {
        var parseLength = number.length - start;
        for (i8 = parseLength % 2 === 0 ? start + 1 : start; i8 < number.length; i8 += 2) {
          w4 = parseHexByte(number, start, i8) << off2;
          (this || _global$3).words[j4] |= w4 & 67108863;
          if (off2 >= 18) {
            off2 -= 18;
            j4 += 1;
            (this || _global$3).words[j4] |= w4 >>> 26;
          } else {
            off2 += 8;
          }
        }
      }
      this.strip();
    };
    function parseBase(str, start, end, mul) {
      var r9 = 0;
      var len = Math.min(str.length, end);
      for (var i8 = start; i8 < len; i8++) {
        var c8 = str.charCodeAt(i8) - 48;
        r9 *= mul;
        if (c8 >= 49) {
          r9 += c8 - 49 + 10;
        } else if (c8 >= 17) {
          r9 += c8 - 17 + 10;
        } else {
          r9 += c8;
        }
      }
      return r9;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
      (this || _global$3).words = [0];
      (this || _global$3).length = 1;
      for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
        limbLen++;
      }
      limbLen--;
      limbPow = limbPow / base | 0;
      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;
      var word = 0;
      for (var i8 = start; i8 < end; i8 += limbLen) {
        word = parseBase(number, i8, i8 + limbLen, base);
        this.imuln(limbPow);
        if ((this || _global$3).words[0] + word < 67108864) {
          (this || _global$3).words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i8, number.length, base);
        for (i8 = 0; i8 < mod; i8++) {
          pow *= base;
        }
        this.imuln(pow);
        if ((this || _global$3).words[0] + word < 67108864) {
          (this || _global$3).words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
      this.strip();
    };
    BN.prototype.copy = function copy(dest) {
      dest.words = new Array((this || _global$3).length);
      for (var i8 = 0; i8 < (this || _global$3).length; i8++) {
        dest.words[i8] = (this || _global$3).words[i8];
      }
      dest.length = (this || _global$3).length;
      dest.negative = (this || _global$3).negative;
      dest.red = (this || _global$3).red;
    };
    BN.prototype.clone = function clone() {
      var r9 = new BN(null);
      this.copy(r9);
      return r9;
    };
    BN.prototype._expand = function _expand(size) {
      while ((this || _global$3).length < size) {
        (this || _global$3).words[(this || _global$3).length++] = 0;
      }
      return this || _global$3;
    };
    BN.prototype.strip = function strip() {
      while ((this || _global$3).length > 1 && (this || _global$3).words[(this || _global$3).length - 1] === 0) {
        (this || _global$3).length--;
      }
      return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
      if ((this || _global$3).length === 1 && (this || _global$3).words[0] === 0) {
        (this || _global$3).negative = 0;
      }
      return this || _global$3;
    };
    BN.prototype.inspect = function inspect3() {
      return ((this || _global$3).red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    var zeros = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"];
    var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
    var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
    BN.prototype.toString = function toString3(base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;
      var out;
      if (base === 16 || base === "hex") {
        out = "";
        var off2 = 0;
        var carry = 0;
        for (var i8 = 0; i8 < (this || _global$3).length; i8++) {
          var w4 = (this || _global$3).words[i8];
          var word = ((w4 << off2 | carry) & 16777215).toString(16);
          carry = w4 >>> 24 - off2 & 16777215;
          if (carry !== 0 || i8 !== (this || _global$3).length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }
          off2 += 2;
          if (off2 >= 26) {
            off2 -= 26;
            i8--;
          }
        }
        if (carry !== 0) {
          out = carry.toString(16) + out;
        }
        while (out.length % padding !== 0) {
          out = "0" + out;
        }
        if ((this || _global$3).negative !== 0) {
          out = "-" + out;
        }
        return out;
      }
      if (base === (base | 0) && base >= 2 && base <= 36) {
        var groupSize = groupSizes[base];
        var groupBase = groupBases[base];
        out = "";
        var c8 = this.clone();
        c8.negative = 0;
        while (!c8.isZero()) {
          var r9 = c8.modn(groupBase).toString(base);
          c8 = c8.idivn(groupBase);
          if (!c8.isZero()) {
            out = zeros[groupSize - r9.length] + r9 + out;
          } else {
            out = r9 + out;
          }
        }
        if (this.isZero()) {
          out = "0" + out;
        }
        while (out.length % padding !== 0) {
          out = "0" + out;
        }
        if ((this || _global$3).negative !== 0) {
          out = "-" + out;
        }
        return out;
      }
      assert2(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
      var ret = (this || _global$3).words[0];
      if ((this || _global$3).length === 2) {
        ret += (this || _global$3).words[1] * 67108864;
      } else if ((this || _global$3).length === 3 && (this || _global$3).words[2] === 1) {
        ret += 4503599627370496 + (this || _global$3).words[1] * 67108864;
      } else if ((this || _global$3).length > 2) {
        assert2(false, "Number can only safely store up to 53 bits");
      }
      return (this || _global$3).negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON2() {
      return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
      assert2(typeof Buffer3 !== "undefined");
      return this.toArrayLike(Buffer3, endian, length);
    };
    BN.prototype.toArray = function toArray2(endian, length) {
      return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert2(byteLength <= reqLength, "byte array longer than desired length");
      assert2(reqLength > 0, "Requested array length <= 0");
      this.strip();
      var littleEndian = endian === "le";
      var res = new ArrayType(reqLength);
      var b5, i8;
      var q3 = this.clone();
      if (!littleEndian) {
        for (i8 = 0; i8 < reqLength - byteLength; i8++) {
          res[i8] = 0;
        }
        for (i8 = 0; !q3.isZero(); i8++) {
          b5 = q3.andln(255);
          q3.iushrn(8);
          res[reqLength - i8 - 1] = b5;
        }
      } else {
        for (i8 = 0; !q3.isZero(); i8++) {
          b5 = q3.andln(255);
          q3.iushrn(8);
          res[i8] = b5;
        }
        for (; i8 < reqLength; i8++) {
          res[i8] = 0;
        }
      }
      return res;
    };
    if (Math.clz32) {
      BN.prototype._countBits = function _countBits(w4) {
        return 32 - Math.clz32(w4);
      };
    } else {
      BN.prototype._countBits = function _countBits(w4) {
        var t8 = w4;
        var r9 = 0;
        if (t8 >= 4096) {
          r9 += 13;
          t8 >>>= 13;
        }
        if (t8 >= 64) {
          r9 += 7;
          t8 >>>= 7;
        }
        if (t8 >= 8) {
          r9 += 4;
          t8 >>>= 4;
        }
        if (t8 >= 2) {
          r9 += 2;
          t8 >>>= 2;
        }
        return r9 + t8;
      };
    }
    BN.prototype._zeroBits = function _zeroBits(w4) {
      if (w4 === 0)
        return 26;
      var t8 = w4;
      var r9 = 0;
      if ((t8 & 8191) === 0) {
        r9 += 13;
        t8 >>>= 13;
      }
      if ((t8 & 127) === 0) {
        r9 += 7;
        t8 >>>= 7;
      }
      if ((t8 & 15) === 0) {
        r9 += 4;
        t8 >>>= 4;
      }
      if ((t8 & 3) === 0) {
        r9 += 2;
        t8 >>>= 2;
      }
      if ((t8 & 1) === 0) {
        r9++;
      }
      return r9;
    };
    BN.prototype.bitLength = function bitLength() {
      var w4 = (this || _global$3).words[(this || _global$3).length - 1];
      var hi = this._countBits(w4);
      return ((this || _global$3).length - 1) * 26 + hi;
    };
    function toBitArray(num) {
      var w4 = new Array(num.bitLength());
      for (var bit = 0; bit < w4.length; bit++) {
        var off2 = bit / 26 | 0;
        var wbit = bit % 26;
        w4[bit] = (num.words[off2] & 1 << wbit) >>> wbit;
      }
      return w4;
    }
    BN.prototype.zeroBits = function zeroBits() {
      if (this.isZero())
        return 0;
      var r9 = 0;
      for (var i8 = 0; i8 < (this || _global$3).length; i8++) {
        var b5 = this._zeroBits((this || _global$3).words[i8]);
        r9 += b5;
        if (b5 !== 26)
          break;
      }
      return r9;
    };
    BN.prototype.byteLength = function byteLength() {
      return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
      if ((this || _global$3).negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }
      return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }
      return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
      return (this || _global$3).negative !== 0;
    };
    BN.prototype.neg = function neg() {
      return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
      if (!this.isZero()) {
        (this || _global$3).negative ^= 1;
      }
      return this || _global$3;
    };
    BN.prototype.iuor = function iuor(num) {
      while ((this || _global$3).length < num.length) {
        (this || _global$3).words[(this || _global$3).length++] = 0;
      }
      for (var i8 = 0; i8 < num.length; i8++) {
        (this || _global$3).words[i8] = (this || _global$3).words[i8] | num.words[i8];
      }
      return this.strip();
    };
    BN.prototype.ior = function ior(num) {
      assert2(((this || _global$3).negative | num.negative) === 0);
      return this.iuor(num);
    };
    BN.prototype.or = function or(num) {
      if ((this || _global$3).length > num.length)
        return this.clone().ior(num);
      return num.clone().ior(this || _global$3);
    };
    BN.prototype.uor = function uor(num) {
      if ((this || _global$3).length > num.length)
        return this.clone().iuor(num);
      return num.clone().iuor(this || _global$3);
    };
    BN.prototype.iuand = function iuand(num) {
      var b5;
      if ((this || _global$3).length > num.length) {
        b5 = num;
      } else {
        b5 = this || _global$3;
      }
      for (var i8 = 0; i8 < b5.length; i8++) {
        (this || _global$3).words[i8] = (this || _global$3).words[i8] & num.words[i8];
      }
      (this || _global$3).length = b5.length;
      return this.strip();
    };
    BN.prototype.iand = function iand(num) {
      assert2(((this || _global$3).negative | num.negative) === 0);
      return this.iuand(num);
    };
    BN.prototype.and = function and(num) {
      if ((this || _global$3).length > num.length)
        return this.clone().iand(num);
      return num.clone().iand(this || _global$3);
    };
    BN.prototype.uand = function uand(num) {
      if ((this || _global$3).length > num.length)
        return this.clone().iuand(num);
      return num.clone().iuand(this || _global$3);
    };
    BN.prototype.iuxor = function iuxor(num) {
      var a8;
      var b5;
      if ((this || _global$3).length > num.length) {
        a8 = this || _global$3;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$3;
      }
      for (var i8 = 0; i8 < b5.length; i8++) {
        (this || _global$3).words[i8] = a8.words[i8] ^ b5.words[i8];
      }
      if ((this || _global$3) !== a8) {
        for (; i8 < a8.length; i8++) {
          (this || _global$3).words[i8] = a8.words[i8];
        }
      }
      (this || _global$3).length = a8.length;
      return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
      assert2(((this || _global$3).negative | num.negative) === 0);
      return this.iuxor(num);
    };
    BN.prototype.xor = function xor(num) {
      if ((this || _global$3).length > num.length)
        return this.clone().ixor(num);
      return num.clone().ixor(this || _global$3);
    };
    BN.prototype.uxor = function uxor(num) {
      if ((this || _global$3).length > num.length)
        return this.clone().iuxor(num);
      return num.clone().iuxor(this || _global$3);
    };
    BN.prototype.inotn = function inotn(width) {
      assert2(typeof width === "number" && width >= 0);
      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;
      this._expand(bytesNeeded);
      if (bitsLeft > 0) {
        bytesNeeded--;
      }
      for (var i8 = 0; i8 < bytesNeeded; i8++) {
        (this || _global$3).words[i8] = ~(this || _global$3).words[i8] & 67108863;
      }
      if (bitsLeft > 0) {
        (this || _global$3).words[i8] = ~(this || _global$3).words[i8] & 67108863 >> 26 - bitsLeft;
      }
      return this.strip();
    };
    BN.prototype.notn = function notn(width) {
      return this.clone().inotn(width);
    };
    BN.prototype.setn = function setn(bit, val) {
      assert2(typeof bit === "number" && bit >= 0);
      var off2 = bit / 26 | 0;
      var wbit = bit % 26;
      this._expand(off2 + 1);
      if (val) {
        (this || _global$3).words[off2] = (this || _global$3).words[off2] | 1 << wbit;
      } else {
        (this || _global$3).words[off2] = (this || _global$3).words[off2] & ~(1 << wbit);
      }
      return this.strip();
    };
    BN.prototype.iadd = function iadd(num) {
      var r9;
      if ((this || _global$3).negative !== 0 && num.negative === 0) {
        (this || _global$3).negative = 0;
        r9 = this.isub(num);
        (this || _global$3).negative ^= 1;
        return this._normSign();
      } else if ((this || _global$3).negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r9 = this.isub(num);
        num.negative = 1;
        return r9._normSign();
      }
      var a8, b5;
      if ((this || _global$3).length > num.length) {
        a8 = this || _global$3;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$3;
      }
      var carry = 0;
      for (var i8 = 0; i8 < b5.length; i8++) {
        r9 = (a8.words[i8] | 0) + (b5.words[i8] | 0) + carry;
        (this || _global$3).words[i8] = r9 & 67108863;
        carry = r9 >>> 26;
      }
      for (; carry !== 0 && i8 < a8.length; i8++) {
        r9 = (a8.words[i8] | 0) + carry;
        (this || _global$3).words[i8] = r9 & 67108863;
        carry = r9 >>> 26;
      }
      (this || _global$3).length = a8.length;
      if (carry !== 0) {
        (this || _global$3).words[(this || _global$3).length] = carry;
        (this || _global$3).length++;
      } else if (a8 !== (this || _global$3)) {
        for (; i8 < a8.length; i8++) {
          (this || _global$3).words[i8] = a8.words[i8];
        }
      }
      return this || _global$3;
    };
    BN.prototype.add = function add(num) {
      var res;
      if (num.negative !== 0 && (this || _global$3).negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && (this || _global$3).negative !== 0) {
        (this || _global$3).negative = 0;
        res = num.sub(this || _global$3);
        (this || _global$3).negative = 1;
        return res;
      }
      if ((this || _global$3).length > num.length)
        return this.clone().iadd(num);
      return num.clone().iadd(this || _global$3);
    };
    BN.prototype.isub = function isub(num) {
      if (num.negative !== 0) {
        num.negative = 0;
        var r9 = this.iadd(num);
        num.negative = 1;
        return r9._normSign();
      } else if ((this || _global$3).negative !== 0) {
        (this || _global$3).negative = 0;
        this.iadd(num);
        (this || _global$3).negative = 1;
        return this._normSign();
      }
      var cmp = this.cmp(num);
      if (cmp === 0) {
        (this || _global$3).negative = 0;
        (this || _global$3).length = 1;
        (this || _global$3).words[0] = 0;
        return this || _global$3;
      }
      var a8, b5;
      if (cmp > 0) {
        a8 = this || _global$3;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$3;
      }
      var carry = 0;
      for (var i8 = 0; i8 < b5.length; i8++) {
        r9 = (a8.words[i8] | 0) - (b5.words[i8] | 0) + carry;
        carry = r9 >> 26;
        (this || _global$3).words[i8] = r9 & 67108863;
      }
      for (; carry !== 0 && i8 < a8.length; i8++) {
        r9 = (a8.words[i8] | 0) + carry;
        carry = r9 >> 26;
        (this || _global$3).words[i8] = r9 & 67108863;
      }
      if (carry === 0 && i8 < a8.length && a8 !== (this || _global$3)) {
        for (; i8 < a8.length; i8++) {
          (this || _global$3).words[i8] = a8.words[i8];
        }
      }
      (this || _global$3).length = Math.max((this || _global$3).length, i8);
      if (a8 !== (this || _global$3)) {
        (this || _global$3).negative = 1;
      }
      return this.strip();
    };
    BN.prototype.sub = function sub(num) {
      return this.clone().isub(num);
    };
    function smallMulTo(self2, num, out) {
      out.negative = num.negative ^ self2.negative;
      var len = self2.length + num.length | 0;
      out.length = len;
      len = len - 1 | 0;
      var a8 = self2.words[0] | 0;
      var b5 = num.words[0] | 0;
      var r9 = a8 * b5;
      var lo = r9 & 67108863;
      var carry = r9 / 67108864 | 0;
      out.words[0] = lo;
      for (var k4 = 1; k4 < len; k4++) {
        var ncarry = carry >>> 26;
        var rword = carry & 67108863;
        var maxJ = Math.min(k4, num.length - 1);
        for (var j4 = Math.max(0, k4 - self2.length + 1); j4 <= maxJ; j4++) {
          var i8 = k4 - j4 | 0;
          a8 = self2.words[i8] | 0;
          b5 = num.words[j4] | 0;
          r9 = a8 * b5 + rword;
          ncarry += r9 / 67108864 | 0;
          rword = r9 & 67108863;
        }
        out.words[k4] = rword | 0;
        carry = ncarry | 0;
      }
      if (carry !== 0) {
        out.words[k4] = carry | 0;
      } else {
        out.length--;
      }
      return out.strip();
    }
    var comb10MulTo = function comb10MulTo2(self2, num, out) {
      var a8 = self2.words;
      var b5 = num.words;
      var o9 = out.words;
      var c8 = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a8[0] | 0;
      var al0 = a0 & 8191;
      var ah0 = a0 >>> 13;
      var a1 = a8[1] | 0;
      var al1 = a1 & 8191;
      var ah1 = a1 >>> 13;
      var a22 = a8[2] | 0;
      var al2 = a22 & 8191;
      var ah2 = a22 >>> 13;
      var a32 = a8[3] | 0;
      var al3 = a32 & 8191;
      var ah3 = a32 >>> 13;
      var a42 = a8[4] | 0;
      var al4 = a42 & 8191;
      var ah4 = a42 >>> 13;
      var a52 = a8[5] | 0;
      var al5 = a52 & 8191;
      var ah5 = a52 >>> 13;
      var a62 = a8[6] | 0;
      var al6 = a62 & 8191;
      var ah6 = a62 >>> 13;
      var a72 = a8[7] | 0;
      var al7 = a72 & 8191;
      var ah7 = a72 >>> 13;
      var a82 = a8[8] | 0;
      var al8 = a82 & 8191;
      var ah8 = a82 >>> 13;
      var a9 = a8[9] | 0;
      var al9 = a9 & 8191;
      var ah9 = a9 >>> 13;
      var b0 = b5[0] | 0;
      var bl0 = b0 & 8191;
      var bh0 = b0 >>> 13;
      var b1 = b5[1] | 0;
      var bl1 = b1 & 8191;
      var bh1 = b1 >>> 13;
      var b22 = b5[2] | 0;
      var bl2 = b22 & 8191;
      var bh2 = b22 >>> 13;
      var b32 = b5[3] | 0;
      var bl3 = b32 & 8191;
      var bh3 = b32 >>> 13;
      var b42 = b5[4] | 0;
      var bl4 = b42 & 8191;
      var bh4 = b42 >>> 13;
      var b52 = b5[5] | 0;
      var bl5 = b52 & 8191;
      var bh5 = b52 >>> 13;
      var b6 = b5[6] | 0;
      var bl6 = b6 & 8191;
      var bh6 = b6 >>> 13;
      var b7 = b5[7] | 0;
      var bl7 = b7 & 8191;
      var bh7 = b7 >>> 13;
      var b8 = b5[8] | 0;
      var bl8 = b8 & 8191;
      var bh8 = b8 >>> 13;
      var b9 = b5[9] | 0;
      var bl9 = b9 & 8191;
      var bh9 = b9 >>> 13;
      out.negative = self2.negative ^ num.negative;
      out.length = 19;
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = mid + Math.imul(ah0, bl0) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
      w0 &= 67108863;
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = mid + Math.imul(ah1, bl0) | 0;
      hi = Math.imul(ah1, bh0);
      lo = lo + Math.imul(al0, bl1) | 0;
      mid = mid + Math.imul(al0, bh1) | 0;
      mid = mid + Math.imul(ah0, bl1) | 0;
      hi = hi + Math.imul(ah0, bh1) | 0;
      var w1 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
      w1 &= 67108863;
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = mid + Math.imul(ah2, bl0) | 0;
      hi = Math.imul(ah2, bh0);
      lo = lo + Math.imul(al1, bl1) | 0;
      mid = mid + Math.imul(al1, bh1) | 0;
      mid = mid + Math.imul(ah1, bl1) | 0;
      hi = hi + Math.imul(ah1, bh1) | 0;
      lo = lo + Math.imul(al0, bl2) | 0;
      mid = mid + Math.imul(al0, bh2) | 0;
      mid = mid + Math.imul(ah0, bl2) | 0;
      hi = hi + Math.imul(ah0, bh2) | 0;
      var w22 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w22 >>> 26) | 0;
      w22 &= 67108863;
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = mid + Math.imul(ah3, bl0) | 0;
      hi = Math.imul(ah3, bh0);
      lo = lo + Math.imul(al2, bl1) | 0;
      mid = mid + Math.imul(al2, bh1) | 0;
      mid = mid + Math.imul(ah2, bl1) | 0;
      hi = hi + Math.imul(ah2, bh1) | 0;
      lo = lo + Math.imul(al1, bl2) | 0;
      mid = mid + Math.imul(al1, bh2) | 0;
      mid = mid + Math.imul(ah1, bl2) | 0;
      hi = hi + Math.imul(ah1, bh2) | 0;
      lo = lo + Math.imul(al0, bl3) | 0;
      mid = mid + Math.imul(al0, bh3) | 0;
      mid = mid + Math.imul(ah0, bl3) | 0;
      hi = hi + Math.imul(ah0, bh3) | 0;
      var w32 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w32 >>> 26) | 0;
      w32 &= 67108863;
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = mid + Math.imul(ah4, bl0) | 0;
      hi = Math.imul(ah4, bh0);
      lo = lo + Math.imul(al3, bl1) | 0;
      mid = mid + Math.imul(al3, bh1) | 0;
      mid = mid + Math.imul(ah3, bl1) | 0;
      hi = hi + Math.imul(ah3, bh1) | 0;
      lo = lo + Math.imul(al2, bl2) | 0;
      mid = mid + Math.imul(al2, bh2) | 0;
      mid = mid + Math.imul(ah2, bl2) | 0;
      hi = hi + Math.imul(ah2, bh2) | 0;
      lo = lo + Math.imul(al1, bl3) | 0;
      mid = mid + Math.imul(al1, bh3) | 0;
      mid = mid + Math.imul(ah1, bl3) | 0;
      hi = hi + Math.imul(ah1, bh3) | 0;
      lo = lo + Math.imul(al0, bl4) | 0;
      mid = mid + Math.imul(al0, bh4) | 0;
      mid = mid + Math.imul(ah0, bl4) | 0;
      hi = hi + Math.imul(ah0, bh4) | 0;
      var w4 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
      w4 &= 67108863;
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = mid + Math.imul(ah5, bl0) | 0;
      hi = Math.imul(ah5, bh0);
      lo = lo + Math.imul(al4, bl1) | 0;
      mid = mid + Math.imul(al4, bh1) | 0;
      mid = mid + Math.imul(ah4, bl1) | 0;
      hi = hi + Math.imul(ah4, bh1) | 0;
      lo = lo + Math.imul(al3, bl2) | 0;
      mid = mid + Math.imul(al3, bh2) | 0;
      mid = mid + Math.imul(ah3, bl2) | 0;
      hi = hi + Math.imul(ah3, bh2) | 0;
      lo = lo + Math.imul(al2, bl3) | 0;
      mid = mid + Math.imul(al2, bh3) | 0;
      mid = mid + Math.imul(ah2, bl3) | 0;
      hi = hi + Math.imul(ah2, bh3) | 0;
      lo = lo + Math.imul(al1, bl4) | 0;
      mid = mid + Math.imul(al1, bh4) | 0;
      mid = mid + Math.imul(ah1, bl4) | 0;
      hi = hi + Math.imul(ah1, bh4) | 0;
      lo = lo + Math.imul(al0, bl5) | 0;
      mid = mid + Math.imul(al0, bh5) | 0;
      mid = mid + Math.imul(ah0, bl5) | 0;
      hi = hi + Math.imul(ah0, bh5) | 0;
      var w5 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
      w5 &= 67108863;
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = mid + Math.imul(ah6, bl0) | 0;
      hi = Math.imul(ah6, bh0);
      lo = lo + Math.imul(al5, bl1) | 0;
      mid = mid + Math.imul(al5, bh1) | 0;
      mid = mid + Math.imul(ah5, bl1) | 0;
      hi = hi + Math.imul(ah5, bh1) | 0;
      lo = lo + Math.imul(al4, bl2) | 0;
      mid = mid + Math.imul(al4, bh2) | 0;
      mid = mid + Math.imul(ah4, bl2) | 0;
      hi = hi + Math.imul(ah4, bh2) | 0;
      lo = lo + Math.imul(al3, bl3) | 0;
      mid = mid + Math.imul(al3, bh3) | 0;
      mid = mid + Math.imul(ah3, bl3) | 0;
      hi = hi + Math.imul(ah3, bh3) | 0;
      lo = lo + Math.imul(al2, bl4) | 0;
      mid = mid + Math.imul(al2, bh4) | 0;
      mid = mid + Math.imul(ah2, bl4) | 0;
      hi = hi + Math.imul(ah2, bh4) | 0;
      lo = lo + Math.imul(al1, bl5) | 0;
      mid = mid + Math.imul(al1, bh5) | 0;
      mid = mid + Math.imul(ah1, bl5) | 0;
      hi = hi + Math.imul(ah1, bh5) | 0;
      lo = lo + Math.imul(al0, bl6) | 0;
      mid = mid + Math.imul(al0, bh6) | 0;
      mid = mid + Math.imul(ah0, bl6) | 0;
      hi = hi + Math.imul(ah0, bh6) | 0;
      var w6 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
      w6 &= 67108863;
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = mid + Math.imul(ah7, bl0) | 0;
      hi = Math.imul(ah7, bh0);
      lo = lo + Math.imul(al6, bl1) | 0;
      mid = mid + Math.imul(al6, bh1) | 0;
      mid = mid + Math.imul(ah6, bl1) | 0;
      hi = hi + Math.imul(ah6, bh1) | 0;
      lo = lo + Math.imul(al5, bl2) | 0;
      mid = mid + Math.imul(al5, bh2) | 0;
      mid = mid + Math.imul(ah5, bl2) | 0;
      hi = hi + Math.imul(ah5, bh2) | 0;
      lo = lo + Math.imul(al4, bl3) | 0;
      mid = mid + Math.imul(al4, bh3) | 0;
      mid = mid + Math.imul(ah4, bl3) | 0;
      hi = hi + Math.imul(ah4, bh3) | 0;
      lo = lo + Math.imul(al3, bl4) | 0;
      mid = mid + Math.imul(al3, bh4) | 0;
      mid = mid + Math.imul(ah3, bl4) | 0;
      hi = hi + Math.imul(ah3, bh4) | 0;
      lo = lo + Math.imul(al2, bl5) | 0;
      mid = mid + Math.imul(al2, bh5) | 0;
      mid = mid + Math.imul(ah2, bl5) | 0;
      hi = hi + Math.imul(ah2, bh5) | 0;
      lo = lo + Math.imul(al1, bl6) | 0;
      mid = mid + Math.imul(al1, bh6) | 0;
      mid = mid + Math.imul(ah1, bl6) | 0;
      hi = hi + Math.imul(ah1, bh6) | 0;
      lo = lo + Math.imul(al0, bl7) | 0;
      mid = mid + Math.imul(al0, bh7) | 0;
      mid = mid + Math.imul(ah0, bl7) | 0;
      hi = hi + Math.imul(ah0, bh7) | 0;
      var w7 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
      w7 &= 67108863;
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = mid + Math.imul(ah8, bl0) | 0;
      hi = Math.imul(ah8, bh0);
      lo = lo + Math.imul(al7, bl1) | 0;
      mid = mid + Math.imul(al7, bh1) | 0;
      mid = mid + Math.imul(ah7, bl1) | 0;
      hi = hi + Math.imul(ah7, bh1) | 0;
      lo = lo + Math.imul(al6, bl2) | 0;
      mid = mid + Math.imul(al6, bh2) | 0;
      mid = mid + Math.imul(ah6, bl2) | 0;
      hi = hi + Math.imul(ah6, bh2) | 0;
      lo = lo + Math.imul(al5, bl3) | 0;
      mid = mid + Math.imul(al5, bh3) | 0;
      mid = mid + Math.imul(ah5, bl3) | 0;
      hi = hi + Math.imul(ah5, bh3) | 0;
      lo = lo + Math.imul(al4, bl4) | 0;
      mid = mid + Math.imul(al4, bh4) | 0;
      mid = mid + Math.imul(ah4, bl4) | 0;
      hi = hi + Math.imul(ah4, bh4) | 0;
      lo = lo + Math.imul(al3, bl5) | 0;
      mid = mid + Math.imul(al3, bh5) | 0;
      mid = mid + Math.imul(ah3, bl5) | 0;
      hi = hi + Math.imul(ah3, bh5) | 0;
      lo = lo + Math.imul(al2, bl6) | 0;
      mid = mid + Math.imul(al2, bh6) | 0;
      mid = mid + Math.imul(ah2, bl6) | 0;
      hi = hi + Math.imul(ah2, bh6) | 0;
      lo = lo + Math.imul(al1, bl7) | 0;
      mid = mid + Math.imul(al1, bh7) | 0;
      mid = mid + Math.imul(ah1, bl7) | 0;
      hi = hi + Math.imul(ah1, bh7) | 0;
      lo = lo + Math.imul(al0, bl8) | 0;
      mid = mid + Math.imul(al0, bh8) | 0;
      mid = mid + Math.imul(ah0, bl8) | 0;
      hi = hi + Math.imul(ah0, bh8) | 0;
      var w8 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
      w8 &= 67108863;
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = mid + Math.imul(ah9, bl0) | 0;
      hi = Math.imul(ah9, bh0);
      lo = lo + Math.imul(al8, bl1) | 0;
      mid = mid + Math.imul(al8, bh1) | 0;
      mid = mid + Math.imul(ah8, bl1) | 0;
      hi = hi + Math.imul(ah8, bh1) | 0;
      lo = lo + Math.imul(al7, bl2) | 0;
      mid = mid + Math.imul(al7, bh2) | 0;
      mid = mid + Math.imul(ah7, bl2) | 0;
      hi = hi + Math.imul(ah7, bh2) | 0;
      lo = lo + Math.imul(al6, bl3) | 0;
      mid = mid + Math.imul(al6, bh3) | 0;
      mid = mid + Math.imul(ah6, bl3) | 0;
      hi = hi + Math.imul(ah6, bh3) | 0;
      lo = lo + Math.imul(al5, bl4) | 0;
      mid = mid + Math.imul(al5, bh4) | 0;
      mid = mid + Math.imul(ah5, bl4) | 0;
      hi = hi + Math.imul(ah5, bh4) | 0;
      lo = lo + Math.imul(al4, bl5) | 0;
      mid = mid + Math.imul(al4, bh5) | 0;
      mid = mid + Math.imul(ah4, bl5) | 0;
      hi = hi + Math.imul(ah4, bh5) | 0;
      lo = lo + Math.imul(al3, bl6) | 0;
      mid = mid + Math.imul(al3, bh6) | 0;
      mid = mid + Math.imul(ah3, bl6) | 0;
      hi = hi + Math.imul(ah3, bh6) | 0;
      lo = lo + Math.imul(al2, bl7) | 0;
      mid = mid + Math.imul(al2, bh7) | 0;
      mid = mid + Math.imul(ah2, bl7) | 0;
      hi = hi + Math.imul(ah2, bh7) | 0;
      lo = lo + Math.imul(al1, bl8) | 0;
      mid = mid + Math.imul(al1, bh8) | 0;
      mid = mid + Math.imul(ah1, bl8) | 0;
      hi = hi + Math.imul(ah1, bh8) | 0;
      lo = lo + Math.imul(al0, bl9) | 0;
      mid = mid + Math.imul(al0, bh9) | 0;
      mid = mid + Math.imul(ah0, bl9) | 0;
      hi = hi + Math.imul(ah0, bh9) | 0;
      var w9 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
      w9 &= 67108863;
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = mid + Math.imul(ah9, bl1) | 0;
      hi = Math.imul(ah9, bh1);
      lo = lo + Math.imul(al8, bl2) | 0;
      mid = mid + Math.imul(al8, bh2) | 0;
      mid = mid + Math.imul(ah8, bl2) | 0;
      hi = hi + Math.imul(ah8, bh2) | 0;
      lo = lo + Math.imul(al7, bl3) | 0;
      mid = mid + Math.imul(al7, bh3) | 0;
      mid = mid + Math.imul(ah7, bl3) | 0;
      hi = hi + Math.imul(ah7, bh3) | 0;
      lo = lo + Math.imul(al6, bl4) | 0;
      mid = mid + Math.imul(al6, bh4) | 0;
      mid = mid + Math.imul(ah6, bl4) | 0;
      hi = hi + Math.imul(ah6, bh4) | 0;
      lo = lo + Math.imul(al5, bl5) | 0;
      mid = mid + Math.imul(al5, bh5) | 0;
      mid = mid + Math.imul(ah5, bl5) | 0;
      hi = hi + Math.imul(ah5, bh5) | 0;
      lo = lo + Math.imul(al4, bl6) | 0;
      mid = mid + Math.imul(al4, bh6) | 0;
      mid = mid + Math.imul(ah4, bl6) | 0;
      hi = hi + Math.imul(ah4, bh6) | 0;
      lo = lo + Math.imul(al3, bl7) | 0;
      mid = mid + Math.imul(al3, bh7) | 0;
      mid = mid + Math.imul(ah3, bl7) | 0;
      hi = hi + Math.imul(ah3, bh7) | 0;
      lo = lo + Math.imul(al2, bl8) | 0;
      mid = mid + Math.imul(al2, bh8) | 0;
      mid = mid + Math.imul(ah2, bl8) | 0;
      hi = hi + Math.imul(ah2, bh8) | 0;
      lo = lo + Math.imul(al1, bl9) | 0;
      mid = mid + Math.imul(al1, bh9) | 0;
      mid = mid + Math.imul(ah1, bl9) | 0;
      hi = hi + Math.imul(ah1, bh9) | 0;
      var w10 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
      w10 &= 67108863;
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = mid + Math.imul(ah9, bl2) | 0;
      hi = Math.imul(ah9, bh2);
      lo = lo + Math.imul(al8, bl3) | 0;
      mid = mid + Math.imul(al8, bh3) | 0;
      mid = mid + Math.imul(ah8, bl3) | 0;
      hi = hi + Math.imul(ah8, bh3) | 0;
      lo = lo + Math.imul(al7, bl4) | 0;
      mid = mid + Math.imul(al7, bh4) | 0;
      mid = mid + Math.imul(ah7, bl4) | 0;
      hi = hi + Math.imul(ah7, bh4) | 0;
      lo = lo + Math.imul(al6, bl5) | 0;
      mid = mid + Math.imul(al6, bh5) | 0;
      mid = mid + Math.imul(ah6, bl5) | 0;
      hi = hi + Math.imul(ah6, bh5) | 0;
      lo = lo + Math.imul(al5, bl6) | 0;
      mid = mid + Math.imul(al5, bh6) | 0;
      mid = mid + Math.imul(ah5, bl6) | 0;
      hi = hi + Math.imul(ah5, bh6) | 0;
      lo = lo + Math.imul(al4, bl7) | 0;
      mid = mid + Math.imul(al4, bh7) | 0;
      mid = mid + Math.imul(ah4, bl7) | 0;
      hi = hi + Math.imul(ah4, bh7) | 0;
      lo = lo + Math.imul(al3, bl8) | 0;
      mid = mid + Math.imul(al3, bh8) | 0;
      mid = mid + Math.imul(ah3, bl8) | 0;
      hi = hi + Math.imul(ah3, bh8) | 0;
      lo = lo + Math.imul(al2, bl9) | 0;
      mid = mid + Math.imul(al2, bh9) | 0;
      mid = mid + Math.imul(ah2, bl9) | 0;
      hi = hi + Math.imul(ah2, bh9) | 0;
      var w11 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
      w11 &= 67108863;
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = mid + Math.imul(ah9, bl3) | 0;
      hi = Math.imul(ah9, bh3);
      lo = lo + Math.imul(al8, bl4) | 0;
      mid = mid + Math.imul(al8, bh4) | 0;
      mid = mid + Math.imul(ah8, bl4) | 0;
      hi = hi + Math.imul(ah8, bh4) | 0;
      lo = lo + Math.imul(al7, bl5) | 0;
      mid = mid + Math.imul(al7, bh5) | 0;
      mid = mid + Math.imul(ah7, bl5) | 0;
      hi = hi + Math.imul(ah7, bh5) | 0;
      lo = lo + Math.imul(al6, bl6) | 0;
      mid = mid + Math.imul(al6, bh6) | 0;
      mid = mid + Math.imul(ah6, bl6) | 0;
      hi = hi + Math.imul(ah6, bh6) | 0;
      lo = lo + Math.imul(al5, bl7) | 0;
      mid = mid + Math.imul(al5, bh7) | 0;
      mid = mid + Math.imul(ah5, bl7) | 0;
      hi = hi + Math.imul(ah5, bh7) | 0;
      lo = lo + Math.imul(al4, bl8) | 0;
      mid = mid + Math.imul(al4, bh8) | 0;
      mid = mid + Math.imul(ah4, bl8) | 0;
      hi = hi + Math.imul(ah4, bh8) | 0;
      lo = lo + Math.imul(al3, bl9) | 0;
      mid = mid + Math.imul(al3, bh9) | 0;
      mid = mid + Math.imul(ah3, bl9) | 0;
      hi = hi + Math.imul(ah3, bh9) | 0;
      var w12 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
      w12 &= 67108863;
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = mid + Math.imul(ah9, bl4) | 0;
      hi = Math.imul(ah9, bh4);
      lo = lo + Math.imul(al8, bl5) | 0;
      mid = mid + Math.imul(al8, bh5) | 0;
      mid = mid + Math.imul(ah8, bl5) | 0;
      hi = hi + Math.imul(ah8, bh5) | 0;
      lo = lo + Math.imul(al7, bl6) | 0;
      mid = mid + Math.imul(al7, bh6) | 0;
      mid = mid + Math.imul(ah7, bl6) | 0;
      hi = hi + Math.imul(ah7, bh6) | 0;
      lo = lo + Math.imul(al6, bl7) | 0;
      mid = mid + Math.imul(al6, bh7) | 0;
      mid = mid + Math.imul(ah6, bl7) | 0;
      hi = hi + Math.imul(ah6, bh7) | 0;
      lo = lo + Math.imul(al5, bl8) | 0;
      mid = mid + Math.imul(al5, bh8) | 0;
      mid = mid + Math.imul(ah5, bl8) | 0;
      hi = hi + Math.imul(ah5, bh8) | 0;
      lo = lo + Math.imul(al4, bl9) | 0;
      mid = mid + Math.imul(al4, bh9) | 0;
      mid = mid + Math.imul(ah4, bl9) | 0;
      hi = hi + Math.imul(ah4, bh9) | 0;
      var w13 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
      w13 &= 67108863;
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = mid + Math.imul(ah9, bl5) | 0;
      hi = Math.imul(ah9, bh5);
      lo = lo + Math.imul(al8, bl6) | 0;
      mid = mid + Math.imul(al8, bh6) | 0;
      mid = mid + Math.imul(ah8, bl6) | 0;
      hi = hi + Math.imul(ah8, bh6) | 0;
      lo = lo + Math.imul(al7, bl7) | 0;
      mid = mid + Math.imul(al7, bh7) | 0;
      mid = mid + Math.imul(ah7, bl7) | 0;
      hi = hi + Math.imul(ah7, bh7) | 0;
      lo = lo + Math.imul(al6, bl8) | 0;
      mid = mid + Math.imul(al6, bh8) | 0;
      mid = mid + Math.imul(ah6, bl8) | 0;
      hi = hi + Math.imul(ah6, bh8) | 0;
      lo = lo + Math.imul(al5, bl9) | 0;
      mid = mid + Math.imul(al5, bh9) | 0;
      mid = mid + Math.imul(ah5, bl9) | 0;
      hi = hi + Math.imul(ah5, bh9) | 0;
      var w14 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
      w14 &= 67108863;
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = mid + Math.imul(ah9, bl6) | 0;
      hi = Math.imul(ah9, bh6);
      lo = lo + Math.imul(al8, bl7) | 0;
      mid = mid + Math.imul(al8, bh7) | 0;
      mid = mid + Math.imul(ah8, bl7) | 0;
      hi = hi + Math.imul(ah8, bh7) | 0;
      lo = lo + Math.imul(al7, bl8) | 0;
      mid = mid + Math.imul(al7, bh8) | 0;
      mid = mid + Math.imul(ah7, bl8) | 0;
      hi = hi + Math.imul(ah7, bh8) | 0;
      lo = lo + Math.imul(al6, bl9) | 0;
      mid = mid + Math.imul(al6, bh9) | 0;
      mid = mid + Math.imul(ah6, bl9) | 0;
      hi = hi + Math.imul(ah6, bh9) | 0;
      var w15 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
      w15 &= 67108863;
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = mid + Math.imul(ah9, bl7) | 0;
      hi = Math.imul(ah9, bh7);
      lo = lo + Math.imul(al8, bl8) | 0;
      mid = mid + Math.imul(al8, bh8) | 0;
      mid = mid + Math.imul(ah8, bl8) | 0;
      hi = hi + Math.imul(ah8, bh8) | 0;
      lo = lo + Math.imul(al7, bl9) | 0;
      mid = mid + Math.imul(al7, bh9) | 0;
      mid = mid + Math.imul(ah7, bl9) | 0;
      hi = hi + Math.imul(ah7, bh9) | 0;
      var w16 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
      w16 &= 67108863;
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = mid + Math.imul(ah9, bl8) | 0;
      hi = Math.imul(ah9, bh8);
      lo = lo + Math.imul(al8, bl9) | 0;
      mid = mid + Math.imul(al8, bh9) | 0;
      mid = mid + Math.imul(ah8, bl9) | 0;
      hi = hi + Math.imul(ah8, bh9) | 0;
      var w17 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
      w17 &= 67108863;
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = mid + Math.imul(ah9, bl9) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
      w18 &= 67108863;
      o9[0] = w0;
      o9[1] = w1;
      o9[2] = w22;
      o9[3] = w32;
      o9[4] = w4;
      o9[5] = w5;
      o9[6] = w6;
      o9[7] = w7;
      o9[8] = w8;
      o9[9] = w9;
      o9[10] = w10;
      o9[11] = w11;
      o9[12] = w12;
      o9[13] = w13;
      o9[14] = w14;
      o9[15] = w15;
      o9[16] = w16;
      o9[17] = w17;
      o9[18] = w18;
      if (c8 !== 0) {
        o9[19] = c8;
        out.length++;
      }
      return out;
    };
    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }
    function bigMulTo(self2, num, out) {
      out.negative = num.negative ^ self2.negative;
      out.length = self2.length + num.length;
      var carry = 0;
      var hncarry = 0;
      for (var k4 = 0; k4 < out.length - 1; k4++) {
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 67108863;
        var maxJ = Math.min(k4, num.length - 1);
        for (var j4 = Math.max(0, k4 - self2.length + 1); j4 <= maxJ; j4++) {
          var i8 = k4 - j4;
          var a8 = self2.words[i8] | 0;
          var b5 = num.words[j4] | 0;
          var r9 = a8 * b5;
          var lo = r9 & 67108863;
          ncarry = ncarry + (r9 / 67108864 | 0) | 0;
          lo = lo + rword | 0;
          rword = lo & 67108863;
          ncarry = ncarry + (lo >>> 26) | 0;
          hncarry += ncarry >>> 26;
          ncarry &= 67108863;
        }
        out.words[k4] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k4] = carry;
      } else {
        out.length--;
      }
      return out.strip();
    }
    function jumboMulTo(self2, num, out) {
      var fftm = new FFTM();
      return fftm.mulp(self2, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
      var res;
      var len = (this || _global$3).length + num.length;
      if ((this || _global$3).length === 10 && num.length === 10) {
        res = comb10MulTo(this || _global$3, num, out);
      } else if (len < 63) {
        res = smallMulTo(this || _global$3, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this || _global$3, num, out);
      } else {
        res = jumboMulTo(this || _global$3, num, out);
      }
      return res;
    };
    function FFTM(x4, y6) {
      (this || _global$3).x = x4;
      (this || _global$3).y = y6;
    }
    FFTM.prototype.makeRBT = function makeRBT(N4) {
      var t8 = new Array(N4);
      var l8 = BN.prototype._countBits(N4) - 1;
      for (var i8 = 0; i8 < N4; i8++) {
        t8[i8] = this.revBin(i8, l8, N4);
      }
      return t8;
    };
    FFTM.prototype.revBin = function revBin(x4, l8, N4) {
      if (x4 === 0 || x4 === N4 - 1)
        return x4;
      var rb = 0;
      for (var i8 = 0; i8 < l8; i8++) {
        rb |= (x4 & 1) << l8 - i8 - 1;
        x4 >>= 1;
      }
      return rb;
    };
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N4) {
      for (var i8 = 0; i8 < N4; i8++) {
        rtws[i8] = rws[rbt[i8]];
        itws[i8] = iws[rbt[i8]];
      }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N4, rbt) {
      this.permute(rbt, rws, iws, rtws, itws, N4);
      for (var s7 = 1; s7 < N4; s7 <<= 1) {
        var l8 = s7 << 1;
        var rtwdf = Math.cos(2 * Math.PI / l8);
        var itwdf = Math.sin(2 * Math.PI / l8);
        for (var p8 = 0; p8 < N4; p8 += l8) {
          var rtwdf_ = rtwdf;
          var itwdf_ = itwdf;
          for (var j4 = 0; j4 < s7; j4++) {
            var re3 = rtws[p8 + j4];
            var ie2 = itws[p8 + j4];
            var ro = rtws[p8 + j4 + s7];
            var io = itws[p8 + j4 + s7];
            var rx = rtwdf_ * ro - itwdf_ * io;
            io = rtwdf_ * io + itwdf_ * ro;
            ro = rx;
            rtws[p8 + j4] = re3 + ro;
            itws[p8 + j4] = ie2 + io;
            rtws[p8 + j4 + s7] = re3 - ro;
            itws[p8 + j4 + s7] = ie2 - io;
            if (j4 !== l8) {
              rx = rtwdf * rtwdf_ - itwdf * itwdf_;
              itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
              rtwdf_ = rx;
            }
          }
        }
      }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n9, m6) {
      var N4 = Math.max(m6, n9) | 1;
      var odd = N4 & 1;
      var i8 = 0;
      for (N4 = N4 / 2 | 0; N4; N4 = N4 >>> 1) {
        i8++;
      }
      return 1 << i8 + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N4) {
      if (N4 <= 1)
        return;
      for (var i8 = 0; i8 < N4 / 2; i8++) {
        var t8 = rws[i8];
        rws[i8] = rws[N4 - i8 - 1];
        rws[N4 - i8 - 1] = t8;
        t8 = iws[i8];
        iws[i8] = -iws[N4 - i8 - 1];
        iws[N4 - i8 - 1] = -t8;
      }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N4) {
      var carry = 0;
      for (var i8 = 0; i8 < N4 / 2; i8++) {
        var w4 = Math.round(ws[2 * i8 + 1] / N4) * 8192 + Math.round(ws[2 * i8] / N4) + carry;
        ws[i8] = w4 & 67108863;
        if (w4 < 67108864) {
          carry = 0;
        } else {
          carry = w4 / 67108864 | 0;
        }
      }
      return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N4) {
      var carry = 0;
      for (var i8 = 0; i8 < len; i8++) {
        carry = carry + (ws[i8] | 0);
        rws[2 * i8] = carry & 8191;
        carry = carry >>> 13;
        rws[2 * i8 + 1] = carry & 8191;
        carry = carry >>> 13;
      }
      for (i8 = 2 * len; i8 < N4; ++i8) {
        rws[i8] = 0;
      }
      assert2(carry === 0);
      assert2((carry & ~8191) === 0);
    };
    FFTM.prototype.stub = function stub(N4) {
      var ph = new Array(N4);
      for (var i8 = 0; i8 < N4; i8++) {
        ph[i8] = 0;
      }
      return ph;
    };
    FFTM.prototype.mulp = function mulp(x4, y6, out) {
      var N4 = 2 * this.guessLen13b(x4.length, y6.length);
      var rbt = this.makeRBT(N4);
      var _4 = this.stub(N4);
      var rws = new Array(N4);
      var rwst = new Array(N4);
      var iwst = new Array(N4);
      var nrws = new Array(N4);
      var nrwst = new Array(N4);
      var niwst = new Array(N4);
      var rmws = out.words;
      rmws.length = N4;
      this.convert13b(x4.words, x4.length, rws, N4);
      this.convert13b(y6.words, y6.length, nrws, N4);
      this.transform(rws, _4, rwst, iwst, N4, rbt);
      this.transform(nrws, _4, nrwst, niwst, N4, rbt);
      for (var i8 = 0; i8 < N4; i8++) {
        var rx = rwst[i8] * nrwst[i8] - iwst[i8] * niwst[i8];
        iwst[i8] = rwst[i8] * niwst[i8] + iwst[i8] * nrwst[i8];
        rwst[i8] = rx;
      }
      this.conjugate(rwst, iwst, N4);
      this.transform(rwst, iwst, rmws, _4, N4, rbt);
      this.conjugate(rmws, _4, N4);
      this.normalize13b(rmws, N4);
      out.negative = x4.negative ^ y6.negative;
      out.length = x4.length + y6.length;
      return out.strip();
    };
    BN.prototype.mul = function mul(num) {
      var out = new BN(null);
      out.words = new Array((this || _global$3).length + num.length);
      return this.mulTo(num, out);
    };
    BN.prototype.mulf = function mulf(num) {
      var out = new BN(null);
      out.words = new Array((this || _global$3).length + num.length);
      return jumboMulTo(this || _global$3, num, out);
    };
    BN.prototype.imul = function imul(num) {
      return this.clone().mulTo(num, this || _global$3);
    };
    BN.prototype.imuln = function imuln(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      var carry = 0;
      for (var i8 = 0; i8 < (this || _global$3).length; i8++) {
        var w4 = ((this || _global$3).words[i8] | 0) * num;
        var lo = (w4 & 67108863) + (carry & 67108863);
        carry >>= 26;
        carry += w4 / 67108864 | 0;
        carry += lo >>> 26;
        (this || _global$3).words[i8] = lo & 67108863;
      }
      if (carry !== 0) {
        (this || _global$3).words[i8] = carry;
        (this || _global$3).length++;
      }
      return this || _global$3;
    };
    BN.prototype.muln = function muln(num) {
      return this.clone().imuln(num);
    };
    BN.prototype.sqr = function sqr() {
      return this.mul(this || _global$3);
    };
    BN.prototype.isqr = function isqr() {
      return this.imul(this.clone());
    };
    BN.prototype.pow = function pow(num) {
      var w4 = toBitArray(num);
      if (w4.length === 0)
        return new BN(1);
      var res = this || _global$3;
      for (var i8 = 0; i8 < w4.length; i8++, res = res.sqr()) {
        if (w4[i8] !== 0)
          break;
      }
      if (++i8 < w4.length) {
        for (var q3 = res.sqr(); i8 < w4.length; i8++, q3 = q3.sqr()) {
          if (w4[i8] === 0)
            continue;
          res = res.mul(q3);
        }
      }
      return res;
    };
    BN.prototype.iushln = function iushln(bits) {
      assert2(typeof bits === "number" && bits >= 0);
      var r9 = bits % 26;
      var s7 = (bits - r9) / 26;
      var carryMask = 67108863 >>> 26 - r9 << 26 - r9;
      var i8;
      if (r9 !== 0) {
        var carry = 0;
        for (i8 = 0; i8 < (this || _global$3).length; i8++) {
          var newCarry = (this || _global$3).words[i8] & carryMask;
          var c8 = ((this || _global$3).words[i8] | 0) - newCarry << r9;
          (this || _global$3).words[i8] = c8 | carry;
          carry = newCarry >>> 26 - r9;
        }
        if (carry) {
          (this || _global$3).words[i8] = carry;
          (this || _global$3).length++;
        }
      }
      if (s7 !== 0) {
        for (i8 = (this || _global$3).length - 1; i8 >= 0; i8--) {
          (this || _global$3).words[i8 + s7] = (this || _global$3).words[i8];
        }
        for (i8 = 0; i8 < s7; i8++) {
          (this || _global$3).words[i8] = 0;
        }
        (this || _global$3).length += s7;
      }
      return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
      assert2((this || _global$3).negative === 0);
      return this.iushln(bits);
    };
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
      assert2(typeof bits === "number" && bits >= 0);
      var h8;
      if (hint) {
        h8 = (hint - hint % 26) / 26;
      } else {
        h8 = 0;
      }
      var r9 = bits % 26;
      var s7 = Math.min((bits - r9) / 26, (this || _global$3).length);
      var mask = 67108863 ^ 67108863 >>> r9 << r9;
      var maskedWords = extended;
      h8 -= s7;
      h8 = Math.max(0, h8);
      if (maskedWords) {
        for (var i8 = 0; i8 < s7; i8++) {
          maskedWords.words[i8] = (this || _global$3).words[i8];
        }
        maskedWords.length = s7;
      }
      if (s7 === 0)
        ;
      else if ((this || _global$3).length > s7) {
        (this || _global$3).length -= s7;
        for (i8 = 0; i8 < (this || _global$3).length; i8++) {
          (this || _global$3).words[i8] = (this || _global$3).words[i8 + s7];
        }
      } else {
        (this || _global$3).words[0] = 0;
        (this || _global$3).length = 1;
      }
      var carry = 0;
      for (i8 = (this || _global$3).length - 1; i8 >= 0 && (carry !== 0 || i8 >= h8); i8--) {
        var word = (this || _global$3).words[i8] | 0;
        (this || _global$3).words[i8] = carry << 26 - r9 | word >>> r9;
        carry = word & mask;
      }
      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }
      if ((this || _global$3).length === 0) {
        (this || _global$3).words[0] = 0;
        (this || _global$3).length = 1;
      }
      return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
      assert2((this || _global$3).negative === 0);
      return this.iushrn(bits, hint, extended);
    };
    BN.prototype.shln = function shln(bits) {
      return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
      return this.clone().iushln(bits);
    };
    BN.prototype.shrn = function shrn(bits) {
      return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
      return this.clone().iushrn(bits);
    };
    BN.prototype.testn = function testn(bit) {
      assert2(typeof bit === "number" && bit >= 0);
      var r9 = bit % 26;
      var s7 = (bit - r9) / 26;
      var q3 = 1 << r9;
      if ((this || _global$3).length <= s7)
        return false;
      var w4 = (this || _global$3).words[s7];
      return !!(w4 & q3);
    };
    BN.prototype.imaskn = function imaskn(bits) {
      assert2(typeof bits === "number" && bits >= 0);
      var r9 = bits % 26;
      var s7 = (bits - r9) / 26;
      assert2((this || _global$3).negative === 0, "imaskn works only with positive numbers");
      if ((this || _global$3).length <= s7) {
        return this || _global$3;
      }
      if (r9 !== 0) {
        s7++;
      }
      (this || _global$3).length = Math.min(s7, (this || _global$3).length);
      if (r9 !== 0) {
        var mask = 67108863 ^ 67108863 >>> r9 << r9;
        (this || _global$3).words[(this || _global$3).length - 1] &= mask;
      }
      return this.strip();
    };
    BN.prototype.maskn = function maskn(bits) {
      return this.clone().imaskn(bits);
    };
    BN.prototype.iaddn = function iaddn(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      if (num < 0)
        return this.isubn(-num);
      if ((this || _global$3).negative !== 0) {
        if ((this || _global$3).length === 1 && ((this || _global$3).words[0] | 0) < num) {
          (this || _global$3).words[0] = num - ((this || _global$3).words[0] | 0);
          (this || _global$3).negative = 0;
          return this || _global$3;
        }
        (this || _global$3).negative = 0;
        this.isubn(num);
        (this || _global$3).negative = 1;
        return this || _global$3;
      }
      return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
      (this || _global$3).words[0] += num;
      for (var i8 = 0; i8 < (this || _global$3).length && (this || _global$3).words[i8] >= 67108864; i8++) {
        (this || _global$3).words[i8] -= 67108864;
        if (i8 === (this || _global$3).length - 1) {
          (this || _global$3).words[i8 + 1] = 1;
        } else {
          (this || _global$3).words[i8 + 1]++;
        }
      }
      (this || _global$3).length = Math.max((this || _global$3).length, i8 + 1);
      return this || _global$3;
    };
    BN.prototype.isubn = function isubn(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      if (num < 0)
        return this.iaddn(-num);
      if ((this || _global$3).negative !== 0) {
        (this || _global$3).negative = 0;
        this.iaddn(num);
        (this || _global$3).negative = 1;
        return this || _global$3;
      }
      (this || _global$3).words[0] -= num;
      if ((this || _global$3).length === 1 && (this || _global$3).words[0] < 0) {
        (this || _global$3).words[0] = -(this || _global$3).words[0];
        (this || _global$3).negative = 1;
      } else {
        for (var i8 = 0; i8 < (this || _global$3).length && (this || _global$3).words[i8] < 0; i8++) {
          (this || _global$3).words[i8] += 67108864;
          (this || _global$3).words[i8 + 1] -= 1;
        }
      }
      return this.strip();
    };
    BN.prototype.addn = function addn(num) {
      return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
      return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
      (this || _global$3).negative = 0;
      return this || _global$3;
    };
    BN.prototype.abs = function abs() {
      return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
      var len = num.length + shift;
      var i8;
      this._expand(len);
      var w4;
      var carry = 0;
      for (i8 = 0; i8 < num.length; i8++) {
        w4 = ((this || _global$3).words[i8 + shift] | 0) + carry;
        var right = (num.words[i8] | 0) * mul;
        w4 -= right & 67108863;
        carry = (w4 >> 26) - (right / 67108864 | 0);
        (this || _global$3).words[i8 + shift] = w4 & 67108863;
      }
      for (; i8 < (this || _global$3).length - shift; i8++) {
        w4 = ((this || _global$3).words[i8 + shift] | 0) + carry;
        carry = w4 >> 26;
        (this || _global$3).words[i8 + shift] = w4 & 67108863;
      }
      if (carry === 0)
        return this.strip();
      assert2(carry === -1);
      carry = 0;
      for (i8 = 0; i8 < (this || _global$3).length; i8++) {
        w4 = -((this || _global$3).words[i8] | 0) + carry;
        carry = w4 >> 26;
        (this || _global$3).words[i8] = w4 & 67108863;
      }
      (this || _global$3).negative = 1;
      return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
      var shift = (this || _global$3).length - num.length;
      var a8 = this.clone();
      var b5 = num;
      var bhi = b5.words[b5.length - 1] | 0;
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b5 = b5.ushln(shift);
        a8.iushln(shift);
        bhi = b5.words[b5.length - 1] | 0;
      }
      var m6 = a8.length - b5.length;
      var q3;
      if (mode !== "mod") {
        q3 = new BN(null);
        q3.length = m6 + 1;
        q3.words = new Array(q3.length);
        for (var i8 = 0; i8 < q3.length; i8++) {
          q3.words[i8] = 0;
        }
      }
      var diff = a8.clone()._ishlnsubmul(b5, 1, m6);
      if (diff.negative === 0) {
        a8 = diff;
        if (q3) {
          q3.words[m6] = 1;
        }
      }
      for (var j4 = m6 - 1; j4 >= 0; j4--) {
        var qj = (a8.words[b5.length + j4] | 0) * 67108864 + (a8.words[b5.length + j4 - 1] | 0);
        qj = Math.min(qj / bhi | 0, 67108863);
        a8._ishlnsubmul(b5, qj, j4);
        while (a8.negative !== 0) {
          qj--;
          a8.negative = 0;
          a8._ishlnsubmul(b5, 1, j4);
          if (!a8.isZero()) {
            a8.negative ^= 1;
          }
        }
        if (q3) {
          q3.words[j4] = qj;
        }
      }
      if (q3) {
        q3.strip();
      }
      a8.strip();
      if (mode !== "div" && shift !== 0) {
        a8.iushrn(shift);
      }
      return {
        div: q3 || null,
        mod: a8
      };
    };
    BN.prototype.divmod = function divmod(num, mode, positive) {
      assert2(!num.isZero());
      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }
      var div, mod, res;
      if ((this || _global$3).negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);
        if (mode !== "mod") {
          div = res.div.neg();
        }
        if (mode !== "div") {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }
        return {
          div,
          mod
        };
      }
      if ((this || _global$3).negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);
        if (mode !== "mod") {
          div = res.div.neg();
        }
        return {
          div,
          mod: res.mod
        };
      }
      if (((this || _global$3).negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);
        if (mode !== "div") {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }
        return {
          div: res.div,
          mod
        };
      }
      if (num.length > (this || _global$3).length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this || _global$3
        };
      }
      if (num.length === 1) {
        if (mode === "div") {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }
        if (mode === "mod") {
          return {
            div: null,
            mod: new BN(this.modn(num.words[0]))
          };
        }
        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modn(num.words[0]))
        };
      }
      return this._wordDiv(num, mode);
    };
    BN.prototype.div = function div(num) {
      return this.divmod(num, "div", false).div;
    };
    BN.prototype.mod = function mod(num) {
      return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
      return this.divmod(num, "mod", true).mod;
    };
    BN.prototype.divRound = function divRound(num) {
      var dm = this.divmod(num);
      if (dm.mod.isZero())
        return dm.div;
      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
      var half = num.ushrn(1);
      var r22 = num.andln(1);
      var cmp = mod.cmp(half);
      if (cmp < 0 || r22 === 1 && cmp === 0)
        return dm.div;
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
      assert2(num <= 67108863);
      var p8 = (1 << 26) % num;
      var acc = 0;
      for (var i8 = (this || _global$3).length - 1; i8 >= 0; i8--) {
        acc = (p8 * acc + ((this || _global$3).words[i8] | 0)) % num;
      }
      return acc;
    };
    BN.prototype.idivn = function idivn(num) {
      assert2(num <= 67108863);
      var carry = 0;
      for (var i8 = (this || _global$3).length - 1; i8 >= 0; i8--) {
        var w4 = ((this || _global$3).words[i8] | 0) + carry * 67108864;
        (this || _global$3).words[i8] = w4 / num | 0;
        carry = w4 % num;
      }
      return this.strip();
    };
    BN.prototype.divn = function divn(num) {
      return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p8) {
      assert2(p8.negative === 0);
      assert2(!p8.isZero());
      var x4 = this || _global$3;
      var y6 = p8.clone();
      if (x4.negative !== 0) {
        x4 = x4.umod(p8);
      } else {
        x4 = x4.clone();
      }
      var A4 = new BN(1);
      var B4 = new BN(0);
      var C4 = new BN(0);
      var D4 = new BN(1);
      var g5 = 0;
      while (x4.isEven() && y6.isEven()) {
        x4.iushrn(1);
        y6.iushrn(1);
        ++g5;
      }
      var yp = y6.clone();
      var xp = x4.clone();
      while (!x4.isZero()) {
        for (var i8 = 0, im = 1; (x4.words[0] & im) === 0 && i8 < 26; ++i8, im <<= 1)
          ;
        if (i8 > 0) {
          x4.iushrn(i8);
          while (i8-- > 0) {
            if (A4.isOdd() || B4.isOdd()) {
              A4.iadd(yp);
              B4.isub(xp);
            }
            A4.iushrn(1);
            B4.iushrn(1);
          }
        }
        for (var j4 = 0, jm = 1; (y6.words[0] & jm) === 0 && j4 < 26; ++j4, jm <<= 1)
          ;
        if (j4 > 0) {
          y6.iushrn(j4);
          while (j4-- > 0) {
            if (C4.isOdd() || D4.isOdd()) {
              C4.iadd(yp);
              D4.isub(xp);
            }
            C4.iushrn(1);
            D4.iushrn(1);
          }
        }
        if (x4.cmp(y6) >= 0) {
          x4.isub(y6);
          A4.isub(C4);
          B4.isub(D4);
        } else {
          y6.isub(x4);
          C4.isub(A4);
          D4.isub(B4);
        }
      }
      return {
        a: C4,
        b: D4,
        gcd: y6.iushln(g5)
      };
    };
    BN.prototype._invmp = function _invmp(p8) {
      assert2(p8.negative === 0);
      assert2(!p8.isZero());
      var a8 = this || _global$3;
      var b5 = p8.clone();
      if (a8.negative !== 0) {
        a8 = a8.umod(p8);
      } else {
        a8 = a8.clone();
      }
      var x1 = new BN(1);
      var x22 = new BN(0);
      var delta = b5.clone();
      while (a8.cmpn(1) > 0 && b5.cmpn(1) > 0) {
        for (var i8 = 0, im = 1; (a8.words[0] & im) === 0 && i8 < 26; ++i8, im <<= 1)
          ;
        if (i8 > 0) {
          a8.iushrn(i8);
          while (i8-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }
            x1.iushrn(1);
          }
        }
        for (var j4 = 0, jm = 1; (b5.words[0] & jm) === 0 && j4 < 26; ++j4, jm <<= 1)
          ;
        if (j4 > 0) {
          b5.iushrn(j4);
          while (j4-- > 0) {
            if (x22.isOdd()) {
              x22.iadd(delta);
            }
            x22.iushrn(1);
          }
        }
        if (a8.cmp(b5) >= 0) {
          a8.isub(b5);
          x1.isub(x22);
        } else {
          b5.isub(a8);
          x22.isub(x1);
        }
      }
      var res;
      if (a8.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x22;
      }
      if (res.cmpn(0) < 0) {
        res.iadd(p8);
      }
      return res;
    };
    BN.prototype.gcd = function gcd(num) {
      if (this.isZero())
        return num.abs();
      if (num.isZero())
        return this.abs();
      var a8 = this.clone();
      var b5 = num.clone();
      a8.negative = 0;
      b5.negative = 0;
      for (var shift = 0; a8.isEven() && b5.isEven(); shift++) {
        a8.iushrn(1);
        b5.iushrn(1);
      }
      do {
        while (a8.isEven()) {
          a8.iushrn(1);
        }
        while (b5.isEven()) {
          b5.iushrn(1);
        }
        var r9 = a8.cmp(b5);
        if (r9 < 0) {
          var t8 = a8;
          a8 = b5;
          b5 = t8;
        } else if (r9 === 0 || b5.cmpn(1) === 0) {
          break;
        }
        a8.isub(b5);
      } while (true);
      return b5.iushln(shift);
    };
    BN.prototype.invm = function invm(num) {
      return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
      return ((this || _global$3).words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
      return ((this || _global$3).words[0] & 1) === 1;
    };
    BN.prototype.andln = function andln(num) {
      return (this || _global$3).words[0] & num;
    };
    BN.prototype.bincn = function bincn(bit) {
      assert2(typeof bit === "number");
      var r9 = bit % 26;
      var s7 = (bit - r9) / 26;
      var q3 = 1 << r9;
      if ((this || _global$3).length <= s7) {
        this._expand(s7 + 1);
        (this || _global$3).words[s7] |= q3;
        return this || _global$3;
      }
      var carry = q3;
      for (var i8 = s7; carry !== 0 && i8 < (this || _global$3).length; i8++) {
        var w4 = (this || _global$3).words[i8] | 0;
        w4 += carry;
        carry = w4 >>> 26;
        w4 &= 67108863;
        (this || _global$3).words[i8] = w4;
      }
      if (carry !== 0) {
        (this || _global$3).words[i8] = carry;
        (this || _global$3).length++;
      }
      return this || _global$3;
    };
    BN.prototype.isZero = function isZero() {
      return (this || _global$3).length === 1 && (this || _global$3).words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
      var negative = num < 0;
      if ((this || _global$3).negative !== 0 && !negative)
        return -1;
      if ((this || _global$3).negative === 0 && negative)
        return 1;
      this.strip();
      var res;
      if ((this || _global$3).length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }
        assert2(num <= 67108863, "Number is too big");
        var w4 = (this || _global$3).words[0] | 0;
        res = w4 === num ? 0 : w4 < num ? -1 : 1;
      }
      if ((this || _global$3).negative !== 0)
        return -res | 0;
      return res;
    };
    BN.prototype.cmp = function cmp(num) {
      if ((this || _global$3).negative !== 0 && num.negative === 0)
        return -1;
      if ((this || _global$3).negative === 0 && num.negative !== 0)
        return 1;
      var res = this.ucmp(num);
      if ((this || _global$3).negative !== 0)
        return -res | 0;
      return res;
    };
    BN.prototype.ucmp = function ucmp(num) {
      if ((this || _global$3).length > num.length)
        return 1;
      if ((this || _global$3).length < num.length)
        return -1;
      var res = 0;
      for (var i8 = (this || _global$3).length - 1; i8 >= 0; i8--) {
        var a8 = (this || _global$3).words[i8] | 0;
        var b5 = num.words[i8] | 0;
        if (a8 === b5)
          continue;
        if (a8 < b5) {
          res = -1;
        } else if (a8 > b5) {
          res = 1;
        }
        break;
      }
      return res;
    };
    BN.prototype.gtn = function gtn(num) {
      return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
      return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
      return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
      return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
      return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
      return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
      return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
      return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
      return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
      return this.cmp(num) === 0;
    };
    BN.red = function red(num) {
      return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
      assert2(!(this || _global$3).red, "Already a number in reduction context");
      assert2((this || _global$3).negative === 0, "red works only with positives");
      return ctx.convertTo(this || _global$3)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
      assert2((this || _global$3).red, "fromRed works only with numbers in reduction context");
      return (this || _global$3).red.convertFrom(this || _global$3);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
      (this || _global$3).red = ctx;
      return this || _global$3;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
      assert2(!(this || _global$3).red, "Already a number in reduction context");
      return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
      assert2((this || _global$3).red, "redAdd works only with red numbers");
      return (this || _global$3).red.add(this || _global$3, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
      assert2((this || _global$3).red, "redIAdd works only with red numbers");
      return (this || _global$3).red.iadd(this || _global$3, num);
    };
    BN.prototype.redSub = function redSub(num) {
      assert2((this || _global$3).red, "redSub works only with red numbers");
      return (this || _global$3).red.sub(this || _global$3, num);
    };
    BN.prototype.redISub = function redISub(num) {
      assert2((this || _global$3).red, "redISub works only with red numbers");
      return (this || _global$3).red.isub(this || _global$3, num);
    };
    BN.prototype.redShl = function redShl(num) {
      assert2((this || _global$3).red, "redShl works only with red numbers");
      return (this || _global$3).red.shl(this || _global$3, num);
    };
    BN.prototype.redMul = function redMul(num) {
      assert2((this || _global$3).red, "redMul works only with red numbers");
      (this || _global$3).red._verify2(this || _global$3, num);
      return (this || _global$3).red.mul(this || _global$3, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
      assert2((this || _global$3).red, "redMul works only with red numbers");
      (this || _global$3).red._verify2(this || _global$3, num);
      return (this || _global$3).red.imul(this || _global$3, num);
    };
    BN.prototype.redSqr = function redSqr() {
      assert2((this || _global$3).red, "redSqr works only with red numbers");
      (this || _global$3).red._verify1(this || _global$3);
      return (this || _global$3).red.sqr(this || _global$3);
    };
    BN.prototype.redISqr = function redISqr() {
      assert2((this || _global$3).red, "redISqr works only with red numbers");
      (this || _global$3).red._verify1(this || _global$3);
      return (this || _global$3).red.isqr(this || _global$3);
    };
    BN.prototype.redSqrt = function redSqrt() {
      assert2((this || _global$3).red, "redSqrt works only with red numbers");
      (this || _global$3).red._verify1(this || _global$3);
      return (this || _global$3).red.sqrt(this || _global$3);
    };
    BN.prototype.redInvm = function redInvm() {
      assert2((this || _global$3).red, "redInvm works only with red numbers");
      (this || _global$3).red._verify1(this || _global$3);
      return (this || _global$3).red.invm(this || _global$3);
    };
    BN.prototype.redNeg = function redNeg() {
      assert2((this || _global$3).red, "redNeg works only with red numbers");
      (this || _global$3).red._verify1(this || _global$3);
      return (this || _global$3).red.neg(this || _global$3);
    };
    BN.prototype.redPow = function redPow(num) {
      assert2((this || _global$3).red && !num.red, "redPow(normalNum)");
      (this || _global$3).red._verify1(this || _global$3);
      return (this || _global$3).red.pow(this || _global$3, num);
    };
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };
    function MPrime(name2, p8) {
      (this || _global$3).name = name2;
      (this || _global$3).p = new BN(p8, 16);
      (this || _global$3).n = (this || _global$3).p.bitLength();
      (this || _global$3).k = new BN(1).iushln((this || _global$3).n).isub((this || _global$3).p);
      (this || _global$3).tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil((this || _global$3).n / 13));
      return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
      var r9 = num;
      var rlen;
      do {
        this.split(r9, (this || _global$3).tmp);
        r9 = this.imulK(r9);
        r9 = r9.iadd((this || _global$3).tmp);
        rlen = r9.bitLength();
      } while (rlen > (this || _global$3).n);
      var cmp = rlen < (this || _global$3).n ? -1 : r9.ucmp((this || _global$3).p);
      if (cmp === 0) {
        r9.words[0] = 0;
        r9.length = 1;
      } else if (cmp > 0) {
        r9.isub((this || _global$3).p);
      } else {
        if (r9.strip !== void 0) {
          r9.strip();
        } else {
          r9._strip();
        }
      }
      return r9;
    };
    MPrime.prototype.split = function split(input, out) {
      input.iushrn((this || _global$3).n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
      return num.imul((this || _global$3).k);
    };
    function K256() {
      MPrime.call(this || _global$3, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits4(K256, MPrime);
    K256.prototype.split = function split(input, output) {
      var mask = 4194303;
      var outLen = Math.min(input.length, 9);
      for (var i8 = 0; i8 < outLen; i8++) {
        output.words[i8] = input.words[i8];
      }
      output.length = outLen;
      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }
      var prev = input.words[9];
      output.words[output.length++] = prev & mask;
      for (i8 = 10; i8 < input.length; i8++) {
        var next = input.words[i8] | 0;
        input.words[i8 - 10] = (next & mask) << 4 | prev >>> 22;
        prev = next;
      }
      prev >>>= 22;
      input.words[i8 - 10] = prev;
      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };
    K256.prototype.imulK = function imulK(num) {
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;
      var lo = 0;
      for (var i8 = 0; i8 < num.length; i8++) {
        var w4 = num.words[i8] | 0;
        lo += w4 * 977;
        num.words[i8] = lo & 67108863;
        lo = w4 * 64 + (lo / 67108864 | 0);
      }
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }
      return num;
    };
    function P224() {
      MPrime.call(this || _global$3, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits4(P224, MPrime);
    function P192() {
      MPrime.call(this || _global$3, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits4(P192, MPrime);
    function P25519() {
      MPrime.call(this || _global$3, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits4(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
      var carry = 0;
      for (var i8 = 0; i8 < num.length; i8++) {
        var hi = (num.words[i8] | 0) * 19 + carry;
        var lo = hi & 67108863;
        hi >>>= 26;
        num.words[i8] = lo;
        carry = hi;
      }
      if (carry !== 0) {
        num.words[num.length++] = carry;
      }
      return num;
    };
    BN._prime = function prime(name2) {
      if (primes[name2])
        return primes[name2];
      var prime2;
      if (name2 === "k256") {
        prime2 = new K256();
      } else if (name2 === "p224") {
        prime2 = new P224();
      } else if (name2 === "p192") {
        prime2 = new P192();
      } else if (name2 === "p25519") {
        prime2 = new P25519();
      } else {
        throw new Error("Unknown prime " + name2);
      }
      primes[name2] = prime2;
      return prime2;
    };
    function Red(m6) {
      if (typeof m6 === "string") {
        var prime = BN._prime(m6);
        (this || _global$3).m = prime.p;
        (this || _global$3).prime = prime;
      } else {
        assert2(m6.gtn(1), "modulus must be greater than 1");
        (this || _global$3).m = m6;
        (this || _global$3).prime = null;
      }
    }
    Red.prototype._verify1 = function _verify1(a8) {
      assert2(a8.negative === 0, "red works only with positives");
      assert2(a8.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a8, b5) {
      assert2((a8.negative | b5.negative) === 0, "red works only with positives");
      assert2(a8.red && a8.red === b5.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a8) {
      if ((this || _global$3).prime)
        return (this || _global$3).prime.ireduce(a8)._forceRed(this || _global$3);
      return a8.umod((this || _global$3).m)._forceRed(this || _global$3);
    };
    Red.prototype.neg = function neg(a8) {
      if (a8.isZero()) {
        return a8.clone();
      }
      return (this || _global$3).m.sub(a8)._forceRed(this || _global$3);
    };
    Red.prototype.add = function add(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.add(b5);
      if (res.cmp((this || _global$3).m) >= 0) {
        res.isub((this || _global$3).m);
      }
      return res._forceRed(this || _global$3);
    };
    Red.prototype.iadd = function iadd(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.iadd(b5);
      if (res.cmp((this || _global$3).m) >= 0) {
        res.isub((this || _global$3).m);
      }
      return res;
    };
    Red.prototype.sub = function sub(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.sub(b5);
      if (res.cmpn(0) < 0) {
        res.iadd((this || _global$3).m);
      }
      return res._forceRed(this || _global$3);
    };
    Red.prototype.isub = function isub(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.isub(b5);
      if (res.cmpn(0) < 0) {
        res.iadd((this || _global$3).m);
      }
      return res;
    };
    Red.prototype.shl = function shl(a8, num) {
      this._verify1(a8);
      return this.imod(a8.ushln(num));
    };
    Red.prototype.imul = function imul(a8, b5) {
      this._verify2(a8, b5);
      return this.imod(a8.imul(b5));
    };
    Red.prototype.mul = function mul(a8, b5) {
      this._verify2(a8, b5);
      return this.imod(a8.mul(b5));
    };
    Red.prototype.isqr = function isqr(a8) {
      return this.imul(a8, a8.clone());
    };
    Red.prototype.sqr = function sqr(a8) {
      return this.mul(a8, a8);
    };
    Red.prototype.sqrt = function sqrt(a8) {
      if (a8.isZero())
        return a8.clone();
      var mod3 = (this || _global$3).m.andln(3);
      assert2(mod3 % 2 === 1);
      if (mod3 === 3) {
        var pow = (this || _global$3).m.add(new BN(1)).iushrn(2);
        return this.pow(a8, pow);
      }
      var q3 = (this || _global$3).m.subn(1);
      var s7 = 0;
      while (!q3.isZero() && q3.andln(1) === 0) {
        s7++;
        q3.iushrn(1);
      }
      assert2(!q3.isZero());
      var one = new BN(1).toRed(this || _global$3);
      var nOne = one.redNeg();
      var lpow = (this || _global$3).m.subn(1).iushrn(1);
      var z5 = (this || _global$3).m.bitLength();
      z5 = new BN(2 * z5 * z5).toRed(this || _global$3);
      while (this.pow(z5, lpow).cmp(nOne) !== 0) {
        z5.redIAdd(nOne);
      }
      var c8 = this.pow(z5, q3);
      var r9 = this.pow(a8, q3.addn(1).iushrn(1));
      var t8 = this.pow(a8, q3);
      var m6 = s7;
      while (t8.cmp(one) !== 0) {
        var tmp = t8;
        for (var i8 = 0; tmp.cmp(one) !== 0; i8++) {
          tmp = tmp.redSqr();
        }
        assert2(i8 < m6);
        var b5 = this.pow(c8, new BN(1).iushln(m6 - i8 - 1));
        r9 = r9.redMul(b5);
        c8 = b5.redSqr();
        t8 = t8.redMul(c8);
        m6 = i8;
      }
      return r9;
    };
    Red.prototype.invm = function invm(a8) {
      var inv = a8._invmp((this || _global$3).m);
      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };
    Red.prototype.pow = function pow(a8, num) {
      if (num.isZero())
        return new BN(1).toRed(this || _global$3);
      if (num.cmpn(1) === 0)
        return a8.clone();
      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN(1).toRed(this || _global$3);
      wnd[1] = a8;
      for (var i8 = 2; i8 < wnd.length; i8++) {
        wnd[i8] = this.mul(wnd[i8 - 1], a8);
      }
      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;
      if (start === 0) {
        start = 26;
      }
      for (i8 = num.length - 1; i8 >= 0; i8--) {
        var word = num.words[i8];
        for (var j4 = start - 1; j4 >= 0; j4--) {
          var bit = word >> j4 & 1;
          if (res !== wnd[0]) {
            res = this.sqr(res);
          }
          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }
          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i8 !== 0 || j4 !== 0))
            continue;
          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }
        start = 26;
      }
      return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
      var r9 = num.umod((this || _global$3).m);
      return r9 === num ? r9.clone() : r9;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
      var res = num.clone();
      res.red = null;
      return res;
    };
    BN.mont = function mont(num) {
      return new Mont(num);
    };
    function Mont(m6) {
      Red.call(this || _global$3, m6);
      (this || _global$3).shift = (this || _global$3).m.bitLength();
      if ((this || _global$3).shift % 26 !== 0) {
        (this || _global$3).shift += 26 - (this || _global$3).shift % 26;
      }
      (this || _global$3).r = new BN(1).iushln((this || _global$3).shift);
      (this || _global$3).r2 = this.imod((this || _global$3).r.sqr());
      (this || _global$3).rinv = (this || _global$3).r._invmp((this || _global$3).m);
      (this || _global$3).minv = (this || _global$3).rinv.mul((this || _global$3).r).isubn(1).div((this || _global$3).m);
      (this || _global$3).minv = (this || _global$3).minv.umod((this || _global$3).r);
      (this || _global$3).minv = (this || _global$3).r.sub((this || _global$3).minv);
    }
    inherits4(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
      return this.imod(num.ushln((this || _global$3).shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
      var r9 = this.imod(num.mul((this || _global$3).rinv));
      r9.red = null;
      return r9;
    };
    Mont.prototype.imul = function imul(a8, b5) {
      if (a8.isZero() || b5.isZero()) {
        a8.words[0] = 0;
        a8.length = 1;
        return a8;
      }
      var t8 = a8.imul(b5);
      var c8 = t8.maskn((this || _global$3).shift).mul((this || _global$3).minv).imaskn((this || _global$3).shift).mul((this || _global$3).m);
      var u8 = t8.isub(c8).iushrn((this || _global$3).shift);
      var res = u8;
      if (u8.cmp((this || _global$3).m) >= 0) {
        res = u8.isub((this || _global$3).m);
      } else if (u8.cmpn(0) < 0) {
        res = u8.iadd((this || _global$3).m);
      }
      return res._forceRed(this || _global$3);
    };
    Mont.prototype.mul = function mul(a8, b5) {
      if (a8.isZero() || b5.isZero())
        return new BN(0)._forceRed(this || _global$3);
      var t8 = a8.mul(b5);
      var c8 = t8.maskn((this || _global$3).shift).mul((this || _global$3).minv).imaskn((this || _global$3).shift).mul((this || _global$3).m);
      var u8 = t8.isub(c8).iushrn((this || _global$3).shift);
      var res = u8;
      if (u8.cmp((this || _global$3).m) >= 0) {
        res = u8.isub((this || _global$3).m);
      } else if (u8.cmpn(0) < 0) {
        res = u8.iadd((this || _global$3).m);
      }
      return res._forceRed(this || _global$3);
    };
    Mont.prototype.invm = function invm(a8) {
      var res = this.imod(a8._invmp((this || _global$3).m).mul((this || _global$3).r2));
      return res._forceRed(this || _global$3);
    };
  })(module$1, exports$b2);
  return module$1.exports;
}
function dew$92() {
  if (_dewExec$92)
    return exports$a2;
  _dewExec$92 = true;
  var Buffer3 = buffer.Buffer;
  var elliptic = dew$y();
  var BN = dew$a2();
  exports$a2 = function createECDH2(curve) {
    return new ECDH(curve);
  };
  var aliases = {
    secp256k1: {
      name: "secp256k1",
      byteLength: 32
    },
    secp224r1: {
      name: "p224",
      byteLength: 28
    },
    prime256v1: {
      name: "p256",
      byteLength: 32
    },
    prime192v1: {
      name: "p192",
      byteLength: 24
    },
    ed25519: {
      name: "ed25519",
      byteLength: 32
    },
    secp384r1: {
      name: "p384",
      byteLength: 48
    },
    secp521r1: {
      name: "p521",
      byteLength: 66
    }
  };
  aliases.p224 = aliases.secp224r1;
  aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
  aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
  aliases.p384 = aliases.secp384r1;
  aliases.p521 = aliases.secp521r1;
  function ECDH(curve) {
    (this || _global$22).curveType = aliases[curve];
    if (!(this || _global$22).curveType) {
      (this || _global$22).curveType = {
        name: curve
      };
    }
    (this || _global$22).curve = new elliptic.ec((this || _global$22).curveType.name);
    (this || _global$22).keys = void 0;
  }
  ECDH.prototype.generateKeys = function(enc, format4) {
    (this || _global$22).keys = (this || _global$22).curve.genKeyPair();
    return this.getPublicKey(enc, format4);
  };
  ECDH.prototype.computeSecret = function(other, inenc, enc) {
    inenc = inenc || "utf8";
    if (!Buffer3.isBuffer(other)) {
      other = new Buffer3(other, inenc);
    }
    var otherPub = (this || _global$22).curve.keyFromPublic(other).getPublic();
    var out = otherPub.mul((this || _global$22).keys.getPrivate()).getX();
    return formatReturnValue(out, enc, (this || _global$22).curveType.byteLength);
  };
  ECDH.prototype.getPublicKey = function(enc, format4) {
    var key = (this || _global$22).keys.getPublic(format4 === "compressed", true);
    if (format4 === "hybrid") {
      if (key[key.length - 1] % 2) {
        key[0] = 7;
      } else {
        key[0] = 6;
      }
    }
    return formatReturnValue(key, enc);
  };
  ECDH.prototype.getPrivateKey = function(enc) {
    return formatReturnValue((this || _global$22).keys.getPrivate(), enc);
  };
  ECDH.prototype.setPublicKey = function(pub, enc) {
    enc = enc || "utf8";
    if (!Buffer3.isBuffer(pub)) {
      pub = new Buffer3(pub, enc);
    }
    (this || _global$22).keys._importPublic(pub);
    return this || _global$22;
  };
  ECDH.prototype.setPrivateKey = function(priv, enc) {
    enc = enc || "utf8";
    if (!Buffer3.isBuffer(priv)) {
      priv = new Buffer3(priv, enc);
    }
    var _priv = new BN(priv);
    _priv = _priv.toString(16);
    (this || _global$22).keys = (this || _global$22).curve.genKeyPair();
    (this || _global$22).keys._importPrivate(_priv);
    return this || _global$22;
  };
  function formatReturnValue(bn, enc, len) {
    if (!Array.isArray(bn)) {
      bn = bn.toArray();
    }
    var buf = new Buffer3(bn);
    if (len && buf.length < len) {
      var zeros = new Buffer3(len - buf.length);
      zeros.fill(0);
      buf = Buffer3.concat([zeros, buf]);
    }
    if (!enc) {
      return buf;
    } else {
      return buf.toString(enc);
    }
  }
  return exports$a2;
}
function dew$82() {
  if (_dewExec$82)
    return exports$92;
  _dewExec$82 = true;
  var createHash2 = dew$2y();
  var Buffer3 = dew$2P().Buffer;
  exports$92 = function(seed, len) {
    var t8 = Buffer3.alloc(0);
    var i8 = 0;
    var c8;
    while (t8.length < len) {
      c8 = i2ops(i8++);
      t8 = Buffer3.concat([t8, createHash2("sha1").update(seed).update(c8).digest()]);
    }
    return t8.slice(0, len);
  };
  function i2ops(c8) {
    var out = Buffer3.allocUnsafe(4);
    out.writeUInt32BE(c8, 0);
    return out;
  }
  return exports$92;
}
function dew$72() {
  if (_dewExec$72)
    return exports$82;
  _dewExec$72 = true;
  exports$82 = function xor(a8, b5) {
    var len = a8.length;
    var i8 = -1;
    while (++i8 < len) {
      a8[i8] ^= b5[i8];
    }
    return a8;
  };
  return exports$82;
}
function dew$62() {
  if (_dewExec$62)
    return module.exports;
  _dewExec$62 = true;
  (function(module3, exports11) {
    function assert2(val, msg) {
      if (!val)
        throw new Error(msg || "Assertion failed");
    }
    function inherits4(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function() {
      };
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    }
    function BN(number, base, endian) {
      if (BN.isBN(number)) {
        return number;
      }
      (this || _global$12).negative = 0;
      (this || _global$12).words = null;
      (this || _global$12).length = 0;
      (this || _global$12).red = null;
      if (number !== null) {
        if (base === "le" || base === "be") {
          endian = base;
          base = 10;
        }
        this._init(number || 0, base || 10, endian || "be");
      }
    }
    if (typeof module3 === "object") {
      module3.exports = BN;
    } else {
      exports11.BN = BN;
    }
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer3;
    try {
      if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
        Buffer3 = window.Buffer;
      } else {
        Buffer3 = buffer.Buffer;
      }
    } catch (e11) {
    }
    BN.isBN = function isBN(num) {
      if (num instanceof BN) {
        return true;
      }
      return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
      if (left.cmp(right) > 0)
        return left;
      return right;
    };
    BN.min = function min(left, right) {
      if (left.cmp(right) < 0)
        return left;
      return right;
    };
    BN.prototype._init = function init2(number, base, endian) {
      if (typeof number === "number") {
        return this._initNumber(number, base, endian);
      }
      if (typeof number === "object") {
        return this._initArray(number, base, endian);
      }
      if (base === "hex") {
        base = 16;
      }
      assert2(base === (base | 0) && base >= 2 && base <= 36);
      number = number.toString().replace(/\s+/g, "");
      var start = 0;
      if (number[0] === "-") {
        start++;
        (this || _global$12).negative = 1;
      }
      if (start < number.length) {
        if (base === 16) {
          this._parseHex(number, start, endian);
        } else {
          this._parseBase(number, base, start);
          if (endian === "le") {
            this._initArray(this.toArray(), base, endian);
          }
        }
      }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
      if (number < 0) {
        (this || _global$12).negative = 1;
        number = -number;
      }
      if (number < 67108864) {
        (this || _global$12).words = [number & 67108863];
        (this || _global$12).length = 1;
      } else if (number < 4503599627370496) {
        (this || _global$12).words = [number & 67108863, number / 67108864 & 67108863];
        (this || _global$12).length = 2;
      } else {
        assert2(number < 9007199254740992);
        (this || _global$12).words = [number & 67108863, number / 67108864 & 67108863, 1];
        (this || _global$12).length = 3;
      }
      if (endian !== "le")
        return;
      this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
      assert2(typeof number.length === "number");
      if (number.length <= 0) {
        (this || _global$12).words = [0];
        (this || _global$12).length = 1;
        return this || _global$12;
      }
      (this || _global$12).length = Math.ceil(number.length / 3);
      (this || _global$12).words = new Array((this || _global$12).length);
      for (var i8 = 0; i8 < (this || _global$12).length; i8++) {
        (this || _global$12).words[i8] = 0;
      }
      var j4, w4;
      var off2 = 0;
      if (endian === "be") {
        for (i8 = number.length - 1, j4 = 0; i8 >= 0; i8 -= 3) {
          w4 = number[i8] | number[i8 - 1] << 8 | number[i8 - 2] << 16;
          (this || _global$12).words[j4] |= w4 << off2 & 67108863;
          (this || _global$12).words[j4 + 1] = w4 >>> 26 - off2 & 67108863;
          off2 += 24;
          if (off2 >= 26) {
            off2 -= 26;
            j4++;
          }
        }
      } else if (endian === "le") {
        for (i8 = 0, j4 = 0; i8 < number.length; i8 += 3) {
          w4 = number[i8] | number[i8 + 1] << 8 | number[i8 + 2] << 16;
          (this || _global$12).words[j4] |= w4 << off2 & 67108863;
          (this || _global$12).words[j4 + 1] = w4 >>> 26 - off2 & 67108863;
          off2 += 24;
          if (off2 >= 26) {
            off2 -= 26;
            j4++;
          }
        }
      }
      return this.strip();
    };
    function parseHex4Bits(string, index) {
      var c8 = string.charCodeAt(index);
      if (c8 >= 65 && c8 <= 70) {
        return c8 - 55;
      } else if (c8 >= 97 && c8 <= 102) {
        return c8 - 87;
      } else {
        return c8 - 48 & 15;
      }
    }
    function parseHexByte(string, lowerBound, index) {
      var r9 = parseHex4Bits(string, index);
      if (index - 1 >= lowerBound) {
        r9 |= parseHex4Bits(string, index - 1) << 4;
      }
      return r9;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
      (this || _global$12).length = Math.ceil((number.length - start) / 6);
      (this || _global$12).words = new Array((this || _global$12).length);
      for (var i8 = 0; i8 < (this || _global$12).length; i8++) {
        (this || _global$12).words[i8] = 0;
      }
      var off2 = 0;
      var j4 = 0;
      var w4;
      if (endian === "be") {
        for (i8 = number.length - 1; i8 >= start; i8 -= 2) {
          w4 = parseHexByte(number, start, i8) << off2;
          (this || _global$12).words[j4] |= w4 & 67108863;
          if (off2 >= 18) {
            off2 -= 18;
            j4 += 1;
            (this || _global$12).words[j4] |= w4 >>> 26;
          } else {
            off2 += 8;
          }
        }
      } else {
        var parseLength = number.length - start;
        for (i8 = parseLength % 2 === 0 ? start + 1 : start; i8 < number.length; i8 += 2) {
          w4 = parseHexByte(number, start, i8) << off2;
          (this || _global$12).words[j4] |= w4 & 67108863;
          if (off2 >= 18) {
            off2 -= 18;
            j4 += 1;
            (this || _global$12).words[j4] |= w4 >>> 26;
          } else {
            off2 += 8;
          }
        }
      }
      this.strip();
    };
    function parseBase(str, start, end, mul) {
      var r9 = 0;
      var len = Math.min(str.length, end);
      for (var i8 = start; i8 < len; i8++) {
        var c8 = str.charCodeAt(i8) - 48;
        r9 *= mul;
        if (c8 >= 49) {
          r9 += c8 - 49 + 10;
        } else if (c8 >= 17) {
          r9 += c8 - 17 + 10;
        } else {
          r9 += c8;
        }
      }
      return r9;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
      (this || _global$12).words = [0];
      (this || _global$12).length = 1;
      for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
        limbLen++;
      }
      limbLen--;
      limbPow = limbPow / base | 0;
      var total = number.length - start;
      var mod = total % limbLen;
      var end = Math.min(total, total - mod) + start;
      var word = 0;
      for (var i8 = start; i8 < end; i8 += limbLen) {
        word = parseBase(number, i8, i8 + limbLen, base);
        this.imuln(limbPow);
        if ((this || _global$12).words[0] + word < 67108864) {
          (this || _global$12).words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
      if (mod !== 0) {
        var pow = 1;
        word = parseBase(number, i8, number.length, base);
        for (i8 = 0; i8 < mod; i8++) {
          pow *= base;
        }
        this.imuln(pow);
        if ((this || _global$12).words[0] + word < 67108864) {
          (this || _global$12).words[0] += word;
        } else {
          this._iaddn(word);
        }
      }
      this.strip();
    };
    BN.prototype.copy = function copy(dest) {
      dest.words = new Array((this || _global$12).length);
      for (var i8 = 0; i8 < (this || _global$12).length; i8++) {
        dest.words[i8] = (this || _global$12).words[i8];
      }
      dest.length = (this || _global$12).length;
      dest.negative = (this || _global$12).negative;
      dest.red = (this || _global$12).red;
    };
    BN.prototype.clone = function clone() {
      var r9 = new BN(null);
      this.copy(r9);
      return r9;
    };
    BN.prototype._expand = function _expand(size) {
      while ((this || _global$12).length < size) {
        (this || _global$12).words[(this || _global$12).length++] = 0;
      }
      return this || _global$12;
    };
    BN.prototype.strip = function strip() {
      while ((this || _global$12).length > 1 && (this || _global$12).words[(this || _global$12).length - 1] === 0) {
        (this || _global$12).length--;
      }
      return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
      if ((this || _global$12).length === 1 && (this || _global$12).words[0] === 0) {
        (this || _global$12).negative = 0;
      }
      return this || _global$12;
    };
    BN.prototype.inspect = function inspect3() {
      return ((this || _global$12).red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    var zeros = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"];
    var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
    var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
    BN.prototype.toString = function toString3(base, padding) {
      base = base || 10;
      padding = padding | 0 || 1;
      var out;
      if (base === 16 || base === "hex") {
        out = "";
        var off2 = 0;
        var carry = 0;
        for (var i8 = 0; i8 < (this || _global$12).length; i8++) {
          var w4 = (this || _global$12).words[i8];
          var word = ((w4 << off2 | carry) & 16777215).toString(16);
          carry = w4 >>> 24 - off2 & 16777215;
          if (carry !== 0 || i8 !== (this || _global$12).length - 1) {
            out = zeros[6 - word.length] + word + out;
          } else {
            out = word + out;
          }
          off2 += 2;
          if (off2 >= 26) {
            off2 -= 26;
            i8--;
          }
        }
        if (carry !== 0) {
          out = carry.toString(16) + out;
        }
        while (out.length % padding !== 0) {
          out = "0" + out;
        }
        if ((this || _global$12).negative !== 0) {
          out = "-" + out;
        }
        return out;
      }
      if (base === (base | 0) && base >= 2 && base <= 36) {
        var groupSize = groupSizes[base];
        var groupBase = groupBases[base];
        out = "";
        var c8 = this.clone();
        c8.negative = 0;
        while (!c8.isZero()) {
          var r9 = c8.modn(groupBase).toString(base);
          c8 = c8.idivn(groupBase);
          if (!c8.isZero()) {
            out = zeros[groupSize - r9.length] + r9 + out;
          } else {
            out = r9 + out;
          }
        }
        if (this.isZero()) {
          out = "0" + out;
        }
        while (out.length % padding !== 0) {
          out = "0" + out;
        }
        if ((this || _global$12).negative !== 0) {
          out = "-" + out;
        }
        return out;
      }
      assert2(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
      var ret = (this || _global$12).words[0];
      if ((this || _global$12).length === 2) {
        ret += (this || _global$12).words[1] * 67108864;
      } else if ((this || _global$12).length === 3 && (this || _global$12).words[2] === 1) {
        ret += 4503599627370496 + (this || _global$12).words[1] * 67108864;
      } else if ((this || _global$12).length > 2) {
        assert2(false, "Number can only safely store up to 53 bits");
      }
      return (this || _global$12).negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON2() {
      return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
      assert2(typeof Buffer3 !== "undefined");
      return this.toArrayLike(Buffer3, endian, length);
    };
    BN.prototype.toArray = function toArray2(endian, length) {
      return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
      var byteLength = this.byteLength();
      var reqLength = length || Math.max(1, byteLength);
      assert2(byteLength <= reqLength, "byte array longer than desired length");
      assert2(reqLength > 0, "Requested array length <= 0");
      this.strip();
      var littleEndian = endian === "le";
      var res = new ArrayType(reqLength);
      var b5, i8;
      var q3 = this.clone();
      if (!littleEndian) {
        for (i8 = 0; i8 < reqLength - byteLength; i8++) {
          res[i8] = 0;
        }
        for (i8 = 0; !q3.isZero(); i8++) {
          b5 = q3.andln(255);
          q3.iushrn(8);
          res[reqLength - i8 - 1] = b5;
        }
      } else {
        for (i8 = 0; !q3.isZero(); i8++) {
          b5 = q3.andln(255);
          q3.iushrn(8);
          res[i8] = b5;
        }
        for (; i8 < reqLength; i8++) {
          res[i8] = 0;
        }
      }
      return res;
    };
    if (Math.clz32) {
      BN.prototype._countBits = function _countBits(w4) {
        return 32 - Math.clz32(w4);
      };
    } else {
      BN.prototype._countBits = function _countBits(w4) {
        var t8 = w4;
        var r9 = 0;
        if (t8 >= 4096) {
          r9 += 13;
          t8 >>>= 13;
        }
        if (t8 >= 64) {
          r9 += 7;
          t8 >>>= 7;
        }
        if (t8 >= 8) {
          r9 += 4;
          t8 >>>= 4;
        }
        if (t8 >= 2) {
          r9 += 2;
          t8 >>>= 2;
        }
        return r9 + t8;
      };
    }
    BN.prototype._zeroBits = function _zeroBits(w4) {
      if (w4 === 0)
        return 26;
      var t8 = w4;
      var r9 = 0;
      if ((t8 & 8191) === 0) {
        r9 += 13;
        t8 >>>= 13;
      }
      if ((t8 & 127) === 0) {
        r9 += 7;
        t8 >>>= 7;
      }
      if ((t8 & 15) === 0) {
        r9 += 4;
        t8 >>>= 4;
      }
      if ((t8 & 3) === 0) {
        r9 += 2;
        t8 >>>= 2;
      }
      if ((t8 & 1) === 0) {
        r9++;
      }
      return r9;
    };
    BN.prototype.bitLength = function bitLength() {
      var w4 = (this || _global$12).words[(this || _global$12).length - 1];
      var hi = this._countBits(w4);
      return ((this || _global$12).length - 1) * 26 + hi;
    };
    function toBitArray(num) {
      var w4 = new Array(num.bitLength());
      for (var bit = 0; bit < w4.length; bit++) {
        var off2 = bit / 26 | 0;
        var wbit = bit % 26;
        w4[bit] = (num.words[off2] & 1 << wbit) >>> wbit;
      }
      return w4;
    }
    BN.prototype.zeroBits = function zeroBits() {
      if (this.isZero())
        return 0;
      var r9 = 0;
      for (var i8 = 0; i8 < (this || _global$12).length; i8++) {
        var b5 = this._zeroBits((this || _global$12).words[i8]);
        r9 += b5;
        if (b5 !== 26)
          break;
      }
      return r9;
    };
    BN.prototype.byteLength = function byteLength() {
      return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
      if ((this || _global$12).negative !== 0) {
        return this.abs().inotn(width).iaddn(1);
      }
      return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
      if (this.testn(width - 1)) {
        return this.notn(width).iaddn(1).ineg();
      }
      return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
      return (this || _global$12).negative !== 0;
    };
    BN.prototype.neg = function neg() {
      return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
      if (!this.isZero()) {
        (this || _global$12).negative ^= 1;
      }
      return this || _global$12;
    };
    BN.prototype.iuor = function iuor(num) {
      while ((this || _global$12).length < num.length) {
        (this || _global$12).words[(this || _global$12).length++] = 0;
      }
      for (var i8 = 0; i8 < num.length; i8++) {
        (this || _global$12).words[i8] = (this || _global$12).words[i8] | num.words[i8];
      }
      return this.strip();
    };
    BN.prototype.ior = function ior(num) {
      assert2(((this || _global$12).negative | num.negative) === 0);
      return this.iuor(num);
    };
    BN.prototype.or = function or(num) {
      if ((this || _global$12).length > num.length)
        return this.clone().ior(num);
      return num.clone().ior(this || _global$12);
    };
    BN.prototype.uor = function uor(num) {
      if ((this || _global$12).length > num.length)
        return this.clone().iuor(num);
      return num.clone().iuor(this || _global$12);
    };
    BN.prototype.iuand = function iuand(num) {
      var b5;
      if ((this || _global$12).length > num.length) {
        b5 = num;
      } else {
        b5 = this || _global$12;
      }
      for (var i8 = 0; i8 < b5.length; i8++) {
        (this || _global$12).words[i8] = (this || _global$12).words[i8] & num.words[i8];
      }
      (this || _global$12).length = b5.length;
      return this.strip();
    };
    BN.prototype.iand = function iand(num) {
      assert2(((this || _global$12).negative | num.negative) === 0);
      return this.iuand(num);
    };
    BN.prototype.and = function and(num) {
      if ((this || _global$12).length > num.length)
        return this.clone().iand(num);
      return num.clone().iand(this || _global$12);
    };
    BN.prototype.uand = function uand(num) {
      if ((this || _global$12).length > num.length)
        return this.clone().iuand(num);
      return num.clone().iuand(this || _global$12);
    };
    BN.prototype.iuxor = function iuxor(num) {
      var a8;
      var b5;
      if ((this || _global$12).length > num.length) {
        a8 = this || _global$12;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$12;
      }
      for (var i8 = 0; i8 < b5.length; i8++) {
        (this || _global$12).words[i8] = a8.words[i8] ^ b5.words[i8];
      }
      if ((this || _global$12) !== a8) {
        for (; i8 < a8.length; i8++) {
          (this || _global$12).words[i8] = a8.words[i8];
        }
      }
      (this || _global$12).length = a8.length;
      return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
      assert2(((this || _global$12).negative | num.negative) === 0);
      return this.iuxor(num);
    };
    BN.prototype.xor = function xor(num) {
      if ((this || _global$12).length > num.length)
        return this.clone().ixor(num);
      return num.clone().ixor(this || _global$12);
    };
    BN.prototype.uxor = function uxor(num) {
      if ((this || _global$12).length > num.length)
        return this.clone().iuxor(num);
      return num.clone().iuxor(this || _global$12);
    };
    BN.prototype.inotn = function inotn(width) {
      assert2(typeof width === "number" && width >= 0);
      var bytesNeeded = Math.ceil(width / 26) | 0;
      var bitsLeft = width % 26;
      this._expand(bytesNeeded);
      if (bitsLeft > 0) {
        bytesNeeded--;
      }
      for (var i8 = 0; i8 < bytesNeeded; i8++) {
        (this || _global$12).words[i8] = ~(this || _global$12).words[i8] & 67108863;
      }
      if (bitsLeft > 0) {
        (this || _global$12).words[i8] = ~(this || _global$12).words[i8] & 67108863 >> 26 - bitsLeft;
      }
      return this.strip();
    };
    BN.prototype.notn = function notn(width) {
      return this.clone().inotn(width);
    };
    BN.prototype.setn = function setn(bit, val) {
      assert2(typeof bit === "number" && bit >= 0);
      var off2 = bit / 26 | 0;
      var wbit = bit % 26;
      this._expand(off2 + 1);
      if (val) {
        (this || _global$12).words[off2] = (this || _global$12).words[off2] | 1 << wbit;
      } else {
        (this || _global$12).words[off2] = (this || _global$12).words[off2] & ~(1 << wbit);
      }
      return this.strip();
    };
    BN.prototype.iadd = function iadd(num) {
      var r9;
      if ((this || _global$12).negative !== 0 && num.negative === 0) {
        (this || _global$12).negative = 0;
        r9 = this.isub(num);
        (this || _global$12).negative ^= 1;
        return this._normSign();
      } else if ((this || _global$12).negative === 0 && num.negative !== 0) {
        num.negative = 0;
        r9 = this.isub(num);
        num.negative = 1;
        return r9._normSign();
      }
      var a8, b5;
      if ((this || _global$12).length > num.length) {
        a8 = this || _global$12;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$12;
      }
      var carry = 0;
      for (var i8 = 0; i8 < b5.length; i8++) {
        r9 = (a8.words[i8] | 0) + (b5.words[i8] | 0) + carry;
        (this || _global$12).words[i8] = r9 & 67108863;
        carry = r9 >>> 26;
      }
      for (; carry !== 0 && i8 < a8.length; i8++) {
        r9 = (a8.words[i8] | 0) + carry;
        (this || _global$12).words[i8] = r9 & 67108863;
        carry = r9 >>> 26;
      }
      (this || _global$12).length = a8.length;
      if (carry !== 0) {
        (this || _global$12).words[(this || _global$12).length] = carry;
        (this || _global$12).length++;
      } else if (a8 !== (this || _global$12)) {
        for (; i8 < a8.length; i8++) {
          (this || _global$12).words[i8] = a8.words[i8];
        }
      }
      return this || _global$12;
    };
    BN.prototype.add = function add(num) {
      var res;
      if (num.negative !== 0 && (this || _global$12).negative === 0) {
        num.negative = 0;
        res = this.sub(num);
        num.negative ^= 1;
        return res;
      } else if (num.negative === 0 && (this || _global$12).negative !== 0) {
        (this || _global$12).negative = 0;
        res = num.sub(this || _global$12);
        (this || _global$12).negative = 1;
        return res;
      }
      if ((this || _global$12).length > num.length)
        return this.clone().iadd(num);
      return num.clone().iadd(this || _global$12);
    };
    BN.prototype.isub = function isub(num) {
      if (num.negative !== 0) {
        num.negative = 0;
        var r9 = this.iadd(num);
        num.negative = 1;
        return r9._normSign();
      } else if ((this || _global$12).negative !== 0) {
        (this || _global$12).negative = 0;
        this.iadd(num);
        (this || _global$12).negative = 1;
        return this._normSign();
      }
      var cmp = this.cmp(num);
      if (cmp === 0) {
        (this || _global$12).negative = 0;
        (this || _global$12).length = 1;
        (this || _global$12).words[0] = 0;
        return this || _global$12;
      }
      var a8, b5;
      if (cmp > 0) {
        a8 = this || _global$12;
        b5 = num;
      } else {
        a8 = num;
        b5 = this || _global$12;
      }
      var carry = 0;
      for (var i8 = 0; i8 < b5.length; i8++) {
        r9 = (a8.words[i8] | 0) - (b5.words[i8] | 0) + carry;
        carry = r9 >> 26;
        (this || _global$12).words[i8] = r9 & 67108863;
      }
      for (; carry !== 0 && i8 < a8.length; i8++) {
        r9 = (a8.words[i8] | 0) + carry;
        carry = r9 >> 26;
        (this || _global$12).words[i8] = r9 & 67108863;
      }
      if (carry === 0 && i8 < a8.length && a8 !== (this || _global$12)) {
        for (; i8 < a8.length; i8++) {
          (this || _global$12).words[i8] = a8.words[i8];
        }
      }
      (this || _global$12).length = Math.max((this || _global$12).length, i8);
      if (a8 !== (this || _global$12)) {
        (this || _global$12).negative = 1;
      }
      return this.strip();
    };
    BN.prototype.sub = function sub(num) {
      return this.clone().isub(num);
    };
    function smallMulTo(self2, num, out) {
      out.negative = num.negative ^ self2.negative;
      var len = self2.length + num.length | 0;
      out.length = len;
      len = len - 1 | 0;
      var a8 = self2.words[0] | 0;
      var b5 = num.words[0] | 0;
      var r9 = a8 * b5;
      var lo = r9 & 67108863;
      var carry = r9 / 67108864 | 0;
      out.words[0] = lo;
      for (var k4 = 1; k4 < len; k4++) {
        var ncarry = carry >>> 26;
        var rword = carry & 67108863;
        var maxJ = Math.min(k4, num.length - 1);
        for (var j4 = Math.max(0, k4 - self2.length + 1); j4 <= maxJ; j4++) {
          var i8 = k4 - j4 | 0;
          a8 = self2.words[i8] | 0;
          b5 = num.words[j4] | 0;
          r9 = a8 * b5 + rword;
          ncarry += r9 / 67108864 | 0;
          rword = r9 & 67108863;
        }
        out.words[k4] = rword | 0;
        carry = ncarry | 0;
      }
      if (carry !== 0) {
        out.words[k4] = carry | 0;
      } else {
        out.length--;
      }
      return out.strip();
    }
    var comb10MulTo = function comb10MulTo2(self2, num, out) {
      var a8 = self2.words;
      var b5 = num.words;
      var o9 = out.words;
      var c8 = 0;
      var lo;
      var mid;
      var hi;
      var a0 = a8[0] | 0;
      var al0 = a0 & 8191;
      var ah0 = a0 >>> 13;
      var a1 = a8[1] | 0;
      var al1 = a1 & 8191;
      var ah1 = a1 >>> 13;
      var a22 = a8[2] | 0;
      var al2 = a22 & 8191;
      var ah2 = a22 >>> 13;
      var a32 = a8[3] | 0;
      var al3 = a32 & 8191;
      var ah3 = a32 >>> 13;
      var a42 = a8[4] | 0;
      var al4 = a42 & 8191;
      var ah4 = a42 >>> 13;
      var a52 = a8[5] | 0;
      var al5 = a52 & 8191;
      var ah5 = a52 >>> 13;
      var a62 = a8[6] | 0;
      var al6 = a62 & 8191;
      var ah6 = a62 >>> 13;
      var a72 = a8[7] | 0;
      var al7 = a72 & 8191;
      var ah7 = a72 >>> 13;
      var a82 = a8[8] | 0;
      var al8 = a82 & 8191;
      var ah8 = a82 >>> 13;
      var a9 = a8[9] | 0;
      var al9 = a9 & 8191;
      var ah9 = a9 >>> 13;
      var b0 = b5[0] | 0;
      var bl0 = b0 & 8191;
      var bh0 = b0 >>> 13;
      var b1 = b5[1] | 0;
      var bl1 = b1 & 8191;
      var bh1 = b1 >>> 13;
      var b22 = b5[2] | 0;
      var bl2 = b22 & 8191;
      var bh2 = b22 >>> 13;
      var b32 = b5[3] | 0;
      var bl3 = b32 & 8191;
      var bh3 = b32 >>> 13;
      var b42 = b5[4] | 0;
      var bl4 = b42 & 8191;
      var bh4 = b42 >>> 13;
      var b52 = b5[5] | 0;
      var bl5 = b52 & 8191;
      var bh5 = b52 >>> 13;
      var b6 = b5[6] | 0;
      var bl6 = b6 & 8191;
      var bh6 = b6 >>> 13;
      var b7 = b5[7] | 0;
      var bl7 = b7 & 8191;
      var bh7 = b7 >>> 13;
      var b8 = b5[8] | 0;
      var bl8 = b8 & 8191;
      var bh8 = b8 >>> 13;
      var b9 = b5[9] | 0;
      var bl9 = b9 & 8191;
      var bh9 = b9 >>> 13;
      out.negative = self2.negative ^ num.negative;
      out.length = 19;
      lo = Math.imul(al0, bl0);
      mid = Math.imul(al0, bh0);
      mid = mid + Math.imul(ah0, bl0) | 0;
      hi = Math.imul(ah0, bh0);
      var w0 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
      w0 &= 67108863;
      lo = Math.imul(al1, bl0);
      mid = Math.imul(al1, bh0);
      mid = mid + Math.imul(ah1, bl0) | 0;
      hi = Math.imul(ah1, bh0);
      lo = lo + Math.imul(al0, bl1) | 0;
      mid = mid + Math.imul(al0, bh1) | 0;
      mid = mid + Math.imul(ah0, bl1) | 0;
      hi = hi + Math.imul(ah0, bh1) | 0;
      var w1 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
      w1 &= 67108863;
      lo = Math.imul(al2, bl0);
      mid = Math.imul(al2, bh0);
      mid = mid + Math.imul(ah2, bl0) | 0;
      hi = Math.imul(ah2, bh0);
      lo = lo + Math.imul(al1, bl1) | 0;
      mid = mid + Math.imul(al1, bh1) | 0;
      mid = mid + Math.imul(ah1, bl1) | 0;
      hi = hi + Math.imul(ah1, bh1) | 0;
      lo = lo + Math.imul(al0, bl2) | 0;
      mid = mid + Math.imul(al0, bh2) | 0;
      mid = mid + Math.imul(ah0, bl2) | 0;
      hi = hi + Math.imul(ah0, bh2) | 0;
      var w22 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w22 >>> 26) | 0;
      w22 &= 67108863;
      lo = Math.imul(al3, bl0);
      mid = Math.imul(al3, bh0);
      mid = mid + Math.imul(ah3, bl0) | 0;
      hi = Math.imul(ah3, bh0);
      lo = lo + Math.imul(al2, bl1) | 0;
      mid = mid + Math.imul(al2, bh1) | 0;
      mid = mid + Math.imul(ah2, bl1) | 0;
      hi = hi + Math.imul(ah2, bh1) | 0;
      lo = lo + Math.imul(al1, bl2) | 0;
      mid = mid + Math.imul(al1, bh2) | 0;
      mid = mid + Math.imul(ah1, bl2) | 0;
      hi = hi + Math.imul(ah1, bh2) | 0;
      lo = lo + Math.imul(al0, bl3) | 0;
      mid = mid + Math.imul(al0, bh3) | 0;
      mid = mid + Math.imul(ah0, bl3) | 0;
      hi = hi + Math.imul(ah0, bh3) | 0;
      var w32 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w32 >>> 26) | 0;
      w32 &= 67108863;
      lo = Math.imul(al4, bl0);
      mid = Math.imul(al4, bh0);
      mid = mid + Math.imul(ah4, bl0) | 0;
      hi = Math.imul(ah4, bh0);
      lo = lo + Math.imul(al3, bl1) | 0;
      mid = mid + Math.imul(al3, bh1) | 0;
      mid = mid + Math.imul(ah3, bl1) | 0;
      hi = hi + Math.imul(ah3, bh1) | 0;
      lo = lo + Math.imul(al2, bl2) | 0;
      mid = mid + Math.imul(al2, bh2) | 0;
      mid = mid + Math.imul(ah2, bl2) | 0;
      hi = hi + Math.imul(ah2, bh2) | 0;
      lo = lo + Math.imul(al1, bl3) | 0;
      mid = mid + Math.imul(al1, bh3) | 0;
      mid = mid + Math.imul(ah1, bl3) | 0;
      hi = hi + Math.imul(ah1, bh3) | 0;
      lo = lo + Math.imul(al0, bl4) | 0;
      mid = mid + Math.imul(al0, bh4) | 0;
      mid = mid + Math.imul(ah0, bl4) | 0;
      hi = hi + Math.imul(ah0, bh4) | 0;
      var w4 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
      w4 &= 67108863;
      lo = Math.imul(al5, bl0);
      mid = Math.imul(al5, bh0);
      mid = mid + Math.imul(ah5, bl0) | 0;
      hi = Math.imul(ah5, bh0);
      lo = lo + Math.imul(al4, bl1) | 0;
      mid = mid + Math.imul(al4, bh1) | 0;
      mid = mid + Math.imul(ah4, bl1) | 0;
      hi = hi + Math.imul(ah4, bh1) | 0;
      lo = lo + Math.imul(al3, bl2) | 0;
      mid = mid + Math.imul(al3, bh2) | 0;
      mid = mid + Math.imul(ah3, bl2) | 0;
      hi = hi + Math.imul(ah3, bh2) | 0;
      lo = lo + Math.imul(al2, bl3) | 0;
      mid = mid + Math.imul(al2, bh3) | 0;
      mid = mid + Math.imul(ah2, bl3) | 0;
      hi = hi + Math.imul(ah2, bh3) | 0;
      lo = lo + Math.imul(al1, bl4) | 0;
      mid = mid + Math.imul(al1, bh4) | 0;
      mid = mid + Math.imul(ah1, bl4) | 0;
      hi = hi + Math.imul(ah1, bh4) | 0;
      lo = lo + Math.imul(al0, bl5) | 0;
      mid = mid + Math.imul(al0, bh5) | 0;
      mid = mid + Math.imul(ah0, bl5) | 0;
      hi = hi + Math.imul(ah0, bh5) | 0;
      var w5 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
      w5 &= 67108863;
      lo = Math.imul(al6, bl0);
      mid = Math.imul(al6, bh0);
      mid = mid + Math.imul(ah6, bl0) | 0;
      hi = Math.imul(ah6, bh0);
      lo = lo + Math.imul(al5, bl1) | 0;
      mid = mid + Math.imul(al5, bh1) | 0;
      mid = mid + Math.imul(ah5, bl1) | 0;
      hi = hi + Math.imul(ah5, bh1) | 0;
      lo = lo + Math.imul(al4, bl2) | 0;
      mid = mid + Math.imul(al4, bh2) | 0;
      mid = mid + Math.imul(ah4, bl2) | 0;
      hi = hi + Math.imul(ah4, bh2) | 0;
      lo = lo + Math.imul(al3, bl3) | 0;
      mid = mid + Math.imul(al3, bh3) | 0;
      mid = mid + Math.imul(ah3, bl3) | 0;
      hi = hi + Math.imul(ah3, bh3) | 0;
      lo = lo + Math.imul(al2, bl4) | 0;
      mid = mid + Math.imul(al2, bh4) | 0;
      mid = mid + Math.imul(ah2, bl4) | 0;
      hi = hi + Math.imul(ah2, bh4) | 0;
      lo = lo + Math.imul(al1, bl5) | 0;
      mid = mid + Math.imul(al1, bh5) | 0;
      mid = mid + Math.imul(ah1, bl5) | 0;
      hi = hi + Math.imul(ah1, bh5) | 0;
      lo = lo + Math.imul(al0, bl6) | 0;
      mid = mid + Math.imul(al0, bh6) | 0;
      mid = mid + Math.imul(ah0, bl6) | 0;
      hi = hi + Math.imul(ah0, bh6) | 0;
      var w6 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
      w6 &= 67108863;
      lo = Math.imul(al7, bl0);
      mid = Math.imul(al7, bh0);
      mid = mid + Math.imul(ah7, bl0) | 0;
      hi = Math.imul(ah7, bh0);
      lo = lo + Math.imul(al6, bl1) | 0;
      mid = mid + Math.imul(al6, bh1) | 0;
      mid = mid + Math.imul(ah6, bl1) | 0;
      hi = hi + Math.imul(ah6, bh1) | 0;
      lo = lo + Math.imul(al5, bl2) | 0;
      mid = mid + Math.imul(al5, bh2) | 0;
      mid = mid + Math.imul(ah5, bl2) | 0;
      hi = hi + Math.imul(ah5, bh2) | 0;
      lo = lo + Math.imul(al4, bl3) | 0;
      mid = mid + Math.imul(al4, bh3) | 0;
      mid = mid + Math.imul(ah4, bl3) | 0;
      hi = hi + Math.imul(ah4, bh3) | 0;
      lo = lo + Math.imul(al3, bl4) | 0;
      mid = mid + Math.imul(al3, bh4) | 0;
      mid = mid + Math.imul(ah3, bl4) | 0;
      hi = hi + Math.imul(ah3, bh4) | 0;
      lo = lo + Math.imul(al2, bl5) | 0;
      mid = mid + Math.imul(al2, bh5) | 0;
      mid = mid + Math.imul(ah2, bl5) | 0;
      hi = hi + Math.imul(ah2, bh5) | 0;
      lo = lo + Math.imul(al1, bl6) | 0;
      mid = mid + Math.imul(al1, bh6) | 0;
      mid = mid + Math.imul(ah1, bl6) | 0;
      hi = hi + Math.imul(ah1, bh6) | 0;
      lo = lo + Math.imul(al0, bl7) | 0;
      mid = mid + Math.imul(al0, bh7) | 0;
      mid = mid + Math.imul(ah0, bl7) | 0;
      hi = hi + Math.imul(ah0, bh7) | 0;
      var w7 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
      w7 &= 67108863;
      lo = Math.imul(al8, bl0);
      mid = Math.imul(al8, bh0);
      mid = mid + Math.imul(ah8, bl0) | 0;
      hi = Math.imul(ah8, bh0);
      lo = lo + Math.imul(al7, bl1) | 0;
      mid = mid + Math.imul(al7, bh1) | 0;
      mid = mid + Math.imul(ah7, bl1) | 0;
      hi = hi + Math.imul(ah7, bh1) | 0;
      lo = lo + Math.imul(al6, bl2) | 0;
      mid = mid + Math.imul(al6, bh2) | 0;
      mid = mid + Math.imul(ah6, bl2) | 0;
      hi = hi + Math.imul(ah6, bh2) | 0;
      lo = lo + Math.imul(al5, bl3) | 0;
      mid = mid + Math.imul(al5, bh3) | 0;
      mid = mid + Math.imul(ah5, bl3) | 0;
      hi = hi + Math.imul(ah5, bh3) | 0;
      lo = lo + Math.imul(al4, bl4) | 0;
      mid = mid + Math.imul(al4, bh4) | 0;
      mid = mid + Math.imul(ah4, bl4) | 0;
      hi = hi + Math.imul(ah4, bh4) | 0;
      lo = lo + Math.imul(al3, bl5) | 0;
      mid = mid + Math.imul(al3, bh5) | 0;
      mid = mid + Math.imul(ah3, bl5) | 0;
      hi = hi + Math.imul(ah3, bh5) | 0;
      lo = lo + Math.imul(al2, bl6) | 0;
      mid = mid + Math.imul(al2, bh6) | 0;
      mid = mid + Math.imul(ah2, bl6) | 0;
      hi = hi + Math.imul(ah2, bh6) | 0;
      lo = lo + Math.imul(al1, bl7) | 0;
      mid = mid + Math.imul(al1, bh7) | 0;
      mid = mid + Math.imul(ah1, bl7) | 0;
      hi = hi + Math.imul(ah1, bh7) | 0;
      lo = lo + Math.imul(al0, bl8) | 0;
      mid = mid + Math.imul(al0, bh8) | 0;
      mid = mid + Math.imul(ah0, bl8) | 0;
      hi = hi + Math.imul(ah0, bh8) | 0;
      var w8 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
      w8 &= 67108863;
      lo = Math.imul(al9, bl0);
      mid = Math.imul(al9, bh0);
      mid = mid + Math.imul(ah9, bl0) | 0;
      hi = Math.imul(ah9, bh0);
      lo = lo + Math.imul(al8, bl1) | 0;
      mid = mid + Math.imul(al8, bh1) | 0;
      mid = mid + Math.imul(ah8, bl1) | 0;
      hi = hi + Math.imul(ah8, bh1) | 0;
      lo = lo + Math.imul(al7, bl2) | 0;
      mid = mid + Math.imul(al7, bh2) | 0;
      mid = mid + Math.imul(ah7, bl2) | 0;
      hi = hi + Math.imul(ah7, bh2) | 0;
      lo = lo + Math.imul(al6, bl3) | 0;
      mid = mid + Math.imul(al6, bh3) | 0;
      mid = mid + Math.imul(ah6, bl3) | 0;
      hi = hi + Math.imul(ah6, bh3) | 0;
      lo = lo + Math.imul(al5, bl4) | 0;
      mid = mid + Math.imul(al5, bh4) | 0;
      mid = mid + Math.imul(ah5, bl4) | 0;
      hi = hi + Math.imul(ah5, bh4) | 0;
      lo = lo + Math.imul(al4, bl5) | 0;
      mid = mid + Math.imul(al4, bh5) | 0;
      mid = mid + Math.imul(ah4, bl5) | 0;
      hi = hi + Math.imul(ah4, bh5) | 0;
      lo = lo + Math.imul(al3, bl6) | 0;
      mid = mid + Math.imul(al3, bh6) | 0;
      mid = mid + Math.imul(ah3, bl6) | 0;
      hi = hi + Math.imul(ah3, bh6) | 0;
      lo = lo + Math.imul(al2, bl7) | 0;
      mid = mid + Math.imul(al2, bh7) | 0;
      mid = mid + Math.imul(ah2, bl7) | 0;
      hi = hi + Math.imul(ah2, bh7) | 0;
      lo = lo + Math.imul(al1, bl8) | 0;
      mid = mid + Math.imul(al1, bh8) | 0;
      mid = mid + Math.imul(ah1, bl8) | 0;
      hi = hi + Math.imul(ah1, bh8) | 0;
      lo = lo + Math.imul(al0, bl9) | 0;
      mid = mid + Math.imul(al0, bh9) | 0;
      mid = mid + Math.imul(ah0, bl9) | 0;
      hi = hi + Math.imul(ah0, bh9) | 0;
      var w9 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
      w9 &= 67108863;
      lo = Math.imul(al9, bl1);
      mid = Math.imul(al9, bh1);
      mid = mid + Math.imul(ah9, bl1) | 0;
      hi = Math.imul(ah9, bh1);
      lo = lo + Math.imul(al8, bl2) | 0;
      mid = mid + Math.imul(al8, bh2) | 0;
      mid = mid + Math.imul(ah8, bl2) | 0;
      hi = hi + Math.imul(ah8, bh2) | 0;
      lo = lo + Math.imul(al7, bl3) | 0;
      mid = mid + Math.imul(al7, bh3) | 0;
      mid = mid + Math.imul(ah7, bl3) | 0;
      hi = hi + Math.imul(ah7, bh3) | 0;
      lo = lo + Math.imul(al6, bl4) | 0;
      mid = mid + Math.imul(al6, bh4) | 0;
      mid = mid + Math.imul(ah6, bl4) | 0;
      hi = hi + Math.imul(ah6, bh4) | 0;
      lo = lo + Math.imul(al5, bl5) | 0;
      mid = mid + Math.imul(al5, bh5) | 0;
      mid = mid + Math.imul(ah5, bl5) | 0;
      hi = hi + Math.imul(ah5, bh5) | 0;
      lo = lo + Math.imul(al4, bl6) | 0;
      mid = mid + Math.imul(al4, bh6) | 0;
      mid = mid + Math.imul(ah4, bl6) | 0;
      hi = hi + Math.imul(ah4, bh6) | 0;
      lo = lo + Math.imul(al3, bl7) | 0;
      mid = mid + Math.imul(al3, bh7) | 0;
      mid = mid + Math.imul(ah3, bl7) | 0;
      hi = hi + Math.imul(ah3, bh7) | 0;
      lo = lo + Math.imul(al2, bl8) | 0;
      mid = mid + Math.imul(al2, bh8) | 0;
      mid = mid + Math.imul(ah2, bl8) | 0;
      hi = hi + Math.imul(ah2, bh8) | 0;
      lo = lo + Math.imul(al1, bl9) | 0;
      mid = mid + Math.imul(al1, bh9) | 0;
      mid = mid + Math.imul(ah1, bl9) | 0;
      hi = hi + Math.imul(ah1, bh9) | 0;
      var w10 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
      w10 &= 67108863;
      lo = Math.imul(al9, bl2);
      mid = Math.imul(al9, bh2);
      mid = mid + Math.imul(ah9, bl2) | 0;
      hi = Math.imul(ah9, bh2);
      lo = lo + Math.imul(al8, bl3) | 0;
      mid = mid + Math.imul(al8, bh3) | 0;
      mid = mid + Math.imul(ah8, bl3) | 0;
      hi = hi + Math.imul(ah8, bh3) | 0;
      lo = lo + Math.imul(al7, bl4) | 0;
      mid = mid + Math.imul(al7, bh4) | 0;
      mid = mid + Math.imul(ah7, bl4) | 0;
      hi = hi + Math.imul(ah7, bh4) | 0;
      lo = lo + Math.imul(al6, bl5) | 0;
      mid = mid + Math.imul(al6, bh5) | 0;
      mid = mid + Math.imul(ah6, bl5) | 0;
      hi = hi + Math.imul(ah6, bh5) | 0;
      lo = lo + Math.imul(al5, bl6) | 0;
      mid = mid + Math.imul(al5, bh6) | 0;
      mid = mid + Math.imul(ah5, bl6) | 0;
      hi = hi + Math.imul(ah5, bh6) | 0;
      lo = lo + Math.imul(al4, bl7) | 0;
      mid = mid + Math.imul(al4, bh7) | 0;
      mid = mid + Math.imul(ah4, bl7) | 0;
      hi = hi + Math.imul(ah4, bh7) | 0;
      lo = lo + Math.imul(al3, bl8) | 0;
      mid = mid + Math.imul(al3, bh8) | 0;
      mid = mid + Math.imul(ah3, bl8) | 0;
      hi = hi + Math.imul(ah3, bh8) | 0;
      lo = lo + Math.imul(al2, bl9) | 0;
      mid = mid + Math.imul(al2, bh9) | 0;
      mid = mid + Math.imul(ah2, bl9) | 0;
      hi = hi + Math.imul(ah2, bh9) | 0;
      var w11 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
      w11 &= 67108863;
      lo = Math.imul(al9, bl3);
      mid = Math.imul(al9, bh3);
      mid = mid + Math.imul(ah9, bl3) | 0;
      hi = Math.imul(ah9, bh3);
      lo = lo + Math.imul(al8, bl4) | 0;
      mid = mid + Math.imul(al8, bh4) | 0;
      mid = mid + Math.imul(ah8, bl4) | 0;
      hi = hi + Math.imul(ah8, bh4) | 0;
      lo = lo + Math.imul(al7, bl5) | 0;
      mid = mid + Math.imul(al7, bh5) | 0;
      mid = mid + Math.imul(ah7, bl5) | 0;
      hi = hi + Math.imul(ah7, bh5) | 0;
      lo = lo + Math.imul(al6, bl6) | 0;
      mid = mid + Math.imul(al6, bh6) | 0;
      mid = mid + Math.imul(ah6, bl6) | 0;
      hi = hi + Math.imul(ah6, bh6) | 0;
      lo = lo + Math.imul(al5, bl7) | 0;
      mid = mid + Math.imul(al5, bh7) | 0;
      mid = mid + Math.imul(ah5, bl7) | 0;
      hi = hi + Math.imul(ah5, bh7) | 0;
      lo = lo + Math.imul(al4, bl8) | 0;
      mid = mid + Math.imul(al4, bh8) | 0;
      mid = mid + Math.imul(ah4, bl8) | 0;
      hi = hi + Math.imul(ah4, bh8) | 0;
      lo = lo + Math.imul(al3, bl9) | 0;
      mid = mid + Math.imul(al3, bh9) | 0;
      mid = mid + Math.imul(ah3, bl9) | 0;
      hi = hi + Math.imul(ah3, bh9) | 0;
      var w12 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
      w12 &= 67108863;
      lo = Math.imul(al9, bl4);
      mid = Math.imul(al9, bh4);
      mid = mid + Math.imul(ah9, bl4) | 0;
      hi = Math.imul(ah9, bh4);
      lo = lo + Math.imul(al8, bl5) | 0;
      mid = mid + Math.imul(al8, bh5) | 0;
      mid = mid + Math.imul(ah8, bl5) | 0;
      hi = hi + Math.imul(ah8, bh5) | 0;
      lo = lo + Math.imul(al7, bl6) | 0;
      mid = mid + Math.imul(al7, bh6) | 0;
      mid = mid + Math.imul(ah7, bl6) | 0;
      hi = hi + Math.imul(ah7, bh6) | 0;
      lo = lo + Math.imul(al6, bl7) | 0;
      mid = mid + Math.imul(al6, bh7) | 0;
      mid = mid + Math.imul(ah6, bl7) | 0;
      hi = hi + Math.imul(ah6, bh7) | 0;
      lo = lo + Math.imul(al5, bl8) | 0;
      mid = mid + Math.imul(al5, bh8) | 0;
      mid = mid + Math.imul(ah5, bl8) | 0;
      hi = hi + Math.imul(ah5, bh8) | 0;
      lo = lo + Math.imul(al4, bl9) | 0;
      mid = mid + Math.imul(al4, bh9) | 0;
      mid = mid + Math.imul(ah4, bl9) | 0;
      hi = hi + Math.imul(ah4, bh9) | 0;
      var w13 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
      w13 &= 67108863;
      lo = Math.imul(al9, bl5);
      mid = Math.imul(al9, bh5);
      mid = mid + Math.imul(ah9, bl5) | 0;
      hi = Math.imul(ah9, bh5);
      lo = lo + Math.imul(al8, bl6) | 0;
      mid = mid + Math.imul(al8, bh6) | 0;
      mid = mid + Math.imul(ah8, bl6) | 0;
      hi = hi + Math.imul(ah8, bh6) | 0;
      lo = lo + Math.imul(al7, bl7) | 0;
      mid = mid + Math.imul(al7, bh7) | 0;
      mid = mid + Math.imul(ah7, bl7) | 0;
      hi = hi + Math.imul(ah7, bh7) | 0;
      lo = lo + Math.imul(al6, bl8) | 0;
      mid = mid + Math.imul(al6, bh8) | 0;
      mid = mid + Math.imul(ah6, bl8) | 0;
      hi = hi + Math.imul(ah6, bh8) | 0;
      lo = lo + Math.imul(al5, bl9) | 0;
      mid = mid + Math.imul(al5, bh9) | 0;
      mid = mid + Math.imul(ah5, bl9) | 0;
      hi = hi + Math.imul(ah5, bh9) | 0;
      var w14 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
      w14 &= 67108863;
      lo = Math.imul(al9, bl6);
      mid = Math.imul(al9, bh6);
      mid = mid + Math.imul(ah9, bl6) | 0;
      hi = Math.imul(ah9, bh6);
      lo = lo + Math.imul(al8, bl7) | 0;
      mid = mid + Math.imul(al8, bh7) | 0;
      mid = mid + Math.imul(ah8, bl7) | 0;
      hi = hi + Math.imul(ah8, bh7) | 0;
      lo = lo + Math.imul(al7, bl8) | 0;
      mid = mid + Math.imul(al7, bh8) | 0;
      mid = mid + Math.imul(ah7, bl8) | 0;
      hi = hi + Math.imul(ah7, bh8) | 0;
      lo = lo + Math.imul(al6, bl9) | 0;
      mid = mid + Math.imul(al6, bh9) | 0;
      mid = mid + Math.imul(ah6, bl9) | 0;
      hi = hi + Math.imul(ah6, bh9) | 0;
      var w15 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
      w15 &= 67108863;
      lo = Math.imul(al9, bl7);
      mid = Math.imul(al9, bh7);
      mid = mid + Math.imul(ah9, bl7) | 0;
      hi = Math.imul(ah9, bh7);
      lo = lo + Math.imul(al8, bl8) | 0;
      mid = mid + Math.imul(al8, bh8) | 0;
      mid = mid + Math.imul(ah8, bl8) | 0;
      hi = hi + Math.imul(ah8, bh8) | 0;
      lo = lo + Math.imul(al7, bl9) | 0;
      mid = mid + Math.imul(al7, bh9) | 0;
      mid = mid + Math.imul(ah7, bl9) | 0;
      hi = hi + Math.imul(ah7, bh9) | 0;
      var w16 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
      w16 &= 67108863;
      lo = Math.imul(al9, bl8);
      mid = Math.imul(al9, bh8);
      mid = mid + Math.imul(ah9, bl8) | 0;
      hi = Math.imul(ah9, bh8);
      lo = lo + Math.imul(al8, bl9) | 0;
      mid = mid + Math.imul(al8, bh9) | 0;
      mid = mid + Math.imul(ah8, bl9) | 0;
      hi = hi + Math.imul(ah8, bh9) | 0;
      var w17 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
      w17 &= 67108863;
      lo = Math.imul(al9, bl9);
      mid = Math.imul(al9, bh9);
      mid = mid + Math.imul(ah9, bl9) | 0;
      hi = Math.imul(ah9, bh9);
      var w18 = (c8 + lo | 0) + ((mid & 8191) << 13) | 0;
      c8 = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
      w18 &= 67108863;
      o9[0] = w0;
      o9[1] = w1;
      o9[2] = w22;
      o9[3] = w32;
      o9[4] = w4;
      o9[5] = w5;
      o9[6] = w6;
      o9[7] = w7;
      o9[8] = w8;
      o9[9] = w9;
      o9[10] = w10;
      o9[11] = w11;
      o9[12] = w12;
      o9[13] = w13;
      o9[14] = w14;
      o9[15] = w15;
      o9[16] = w16;
      o9[17] = w17;
      o9[18] = w18;
      if (c8 !== 0) {
        o9[19] = c8;
        out.length++;
      }
      return out;
    };
    if (!Math.imul) {
      comb10MulTo = smallMulTo;
    }
    function bigMulTo(self2, num, out) {
      out.negative = num.negative ^ self2.negative;
      out.length = self2.length + num.length;
      var carry = 0;
      var hncarry = 0;
      for (var k4 = 0; k4 < out.length - 1; k4++) {
        var ncarry = hncarry;
        hncarry = 0;
        var rword = carry & 67108863;
        var maxJ = Math.min(k4, num.length - 1);
        for (var j4 = Math.max(0, k4 - self2.length + 1); j4 <= maxJ; j4++) {
          var i8 = k4 - j4;
          var a8 = self2.words[i8] | 0;
          var b5 = num.words[j4] | 0;
          var r9 = a8 * b5;
          var lo = r9 & 67108863;
          ncarry = ncarry + (r9 / 67108864 | 0) | 0;
          lo = lo + rword | 0;
          rword = lo & 67108863;
          ncarry = ncarry + (lo >>> 26) | 0;
          hncarry += ncarry >>> 26;
          ncarry &= 67108863;
        }
        out.words[k4] = rword;
        carry = ncarry;
        ncarry = hncarry;
      }
      if (carry !== 0) {
        out.words[k4] = carry;
      } else {
        out.length--;
      }
      return out.strip();
    }
    function jumboMulTo(self2, num, out) {
      var fftm = new FFTM();
      return fftm.mulp(self2, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
      var res;
      var len = (this || _global$12).length + num.length;
      if ((this || _global$12).length === 10 && num.length === 10) {
        res = comb10MulTo(this || _global$12, num, out);
      } else if (len < 63) {
        res = smallMulTo(this || _global$12, num, out);
      } else if (len < 1024) {
        res = bigMulTo(this || _global$12, num, out);
      } else {
        res = jumboMulTo(this || _global$12, num, out);
      }
      return res;
    };
    function FFTM(x4, y6) {
      (this || _global$12).x = x4;
      (this || _global$12).y = y6;
    }
    FFTM.prototype.makeRBT = function makeRBT(N4) {
      var t8 = new Array(N4);
      var l8 = BN.prototype._countBits(N4) - 1;
      for (var i8 = 0; i8 < N4; i8++) {
        t8[i8] = this.revBin(i8, l8, N4);
      }
      return t8;
    };
    FFTM.prototype.revBin = function revBin(x4, l8, N4) {
      if (x4 === 0 || x4 === N4 - 1)
        return x4;
      var rb = 0;
      for (var i8 = 0; i8 < l8; i8++) {
        rb |= (x4 & 1) << l8 - i8 - 1;
        x4 >>= 1;
      }
      return rb;
    };
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N4) {
      for (var i8 = 0; i8 < N4; i8++) {
        rtws[i8] = rws[rbt[i8]];
        itws[i8] = iws[rbt[i8]];
      }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N4, rbt) {
      this.permute(rbt, rws, iws, rtws, itws, N4);
      for (var s7 = 1; s7 < N4; s7 <<= 1) {
        var l8 = s7 << 1;
        var rtwdf = Math.cos(2 * Math.PI / l8);
        var itwdf = Math.sin(2 * Math.PI / l8);
        for (var p8 = 0; p8 < N4; p8 += l8) {
          var rtwdf_ = rtwdf;
          var itwdf_ = itwdf;
          for (var j4 = 0; j4 < s7; j4++) {
            var re3 = rtws[p8 + j4];
            var ie2 = itws[p8 + j4];
            var ro = rtws[p8 + j4 + s7];
            var io = itws[p8 + j4 + s7];
            var rx = rtwdf_ * ro - itwdf_ * io;
            io = rtwdf_ * io + itwdf_ * ro;
            ro = rx;
            rtws[p8 + j4] = re3 + ro;
            itws[p8 + j4] = ie2 + io;
            rtws[p8 + j4 + s7] = re3 - ro;
            itws[p8 + j4 + s7] = ie2 - io;
            if (j4 !== l8) {
              rx = rtwdf * rtwdf_ - itwdf * itwdf_;
              itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
              rtwdf_ = rx;
            }
          }
        }
      }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n9, m6) {
      var N4 = Math.max(m6, n9) | 1;
      var odd = N4 & 1;
      var i8 = 0;
      for (N4 = N4 / 2 | 0; N4; N4 = N4 >>> 1) {
        i8++;
      }
      return 1 << i8 + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N4) {
      if (N4 <= 1)
        return;
      for (var i8 = 0; i8 < N4 / 2; i8++) {
        var t8 = rws[i8];
        rws[i8] = rws[N4 - i8 - 1];
        rws[N4 - i8 - 1] = t8;
        t8 = iws[i8];
        iws[i8] = -iws[N4 - i8 - 1];
        iws[N4 - i8 - 1] = -t8;
      }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N4) {
      var carry = 0;
      for (var i8 = 0; i8 < N4 / 2; i8++) {
        var w4 = Math.round(ws[2 * i8 + 1] / N4) * 8192 + Math.round(ws[2 * i8] / N4) + carry;
        ws[i8] = w4 & 67108863;
        if (w4 < 67108864) {
          carry = 0;
        } else {
          carry = w4 / 67108864 | 0;
        }
      }
      return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N4) {
      var carry = 0;
      for (var i8 = 0; i8 < len; i8++) {
        carry = carry + (ws[i8] | 0);
        rws[2 * i8] = carry & 8191;
        carry = carry >>> 13;
        rws[2 * i8 + 1] = carry & 8191;
        carry = carry >>> 13;
      }
      for (i8 = 2 * len; i8 < N4; ++i8) {
        rws[i8] = 0;
      }
      assert2(carry === 0);
      assert2((carry & ~8191) === 0);
    };
    FFTM.prototype.stub = function stub(N4) {
      var ph = new Array(N4);
      for (var i8 = 0; i8 < N4; i8++) {
        ph[i8] = 0;
      }
      return ph;
    };
    FFTM.prototype.mulp = function mulp(x4, y6, out) {
      var N4 = 2 * this.guessLen13b(x4.length, y6.length);
      var rbt = this.makeRBT(N4);
      var _4 = this.stub(N4);
      var rws = new Array(N4);
      var rwst = new Array(N4);
      var iwst = new Array(N4);
      var nrws = new Array(N4);
      var nrwst = new Array(N4);
      var niwst = new Array(N4);
      var rmws = out.words;
      rmws.length = N4;
      this.convert13b(x4.words, x4.length, rws, N4);
      this.convert13b(y6.words, y6.length, nrws, N4);
      this.transform(rws, _4, rwst, iwst, N4, rbt);
      this.transform(nrws, _4, nrwst, niwst, N4, rbt);
      for (var i8 = 0; i8 < N4; i8++) {
        var rx = rwst[i8] * nrwst[i8] - iwst[i8] * niwst[i8];
        iwst[i8] = rwst[i8] * niwst[i8] + iwst[i8] * nrwst[i8];
        rwst[i8] = rx;
      }
      this.conjugate(rwst, iwst, N4);
      this.transform(rwst, iwst, rmws, _4, N4, rbt);
      this.conjugate(rmws, _4, N4);
      this.normalize13b(rmws, N4);
      out.negative = x4.negative ^ y6.negative;
      out.length = x4.length + y6.length;
      return out.strip();
    };
    BN.prototype.mul = function mul(num) {
      var out = new BN(null);
      out.words = new Array((this || _global$12).length + num.length);
      return this.mulTo(num, out);
    };
    BN.prototype.mulf = function mulf(num) {
      var out = new BN(null);
      out.words = new Array((this || _global$12).length + num.length);
      return jumboMulTo(this || _global$12, num, out);
    };
    BN.prototype.imul = function imul(num) {
      return this.clone().mulTo(num, this || _global$12);
    };
    BN.prototype.imuln = function imuln(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      var carry = 0;
      for (var i8 = 0; i8 < (this || _global$12).length; i8++) {
        var w4 = ((this || _global$12).words[i8] | 0) * num;
        var lo = (w4 & 67108863) + (carry & 67108863);
        carry >>= 26;
        carry += w4 / 67108864 | 0;
        carry += lo >>> 26;
        (this || _global$12).words[i8] = lo & 67108863;
      }
      if (carry !== 0) {
        (this || _global$12).words[i8] = carry;
        (this || _global$12).length++;
      }
      return this || _global$12;
    };
    BN.prototype.muln = function muln(num) {
      return this.clone().imuln(num);
    };
    BN.prototype.sqr = function sqr() {
      return this.mul(this || _global$12);
    };
    BN.prototype.isqr = function isqr() {
      return this.imul(this.clone());
    };
    BN.prototype.pow = function pow(num) {
      var w4 = toBitArray(num);
      if (w4.length === 0)
        return new BN(1);
      var res = this || _global$12;
      for (var i8 = 0; i8 < w4.length; i8++, res = res.sqr()) {
        if (w4[i8] !== 0)
          break;
      }
      if (++i8 < w4.length) {
        for (var q3 = res.sqr(); i8 < w4.length; i8++, q3 = q3.sqr()) {
          if (w4[i8] === 0)
            continue;
          res = res.mul(q3);
        }
      }
      return res;
    };
    BN.prototype.iushln = function iushln(bits) {
      assert2(typeof bits === "number" && bits >= 0);
      var r9 = bits % 26;
      var s7 = (bits - r9) / 26;
      var carryMask = 67108863 >>> 26 - r9 << 26 - r9;
      var i8;
      if (r9 !== 0) {
        var carry = 0;
        for (i8 = 0; i8 < (this || _global$12).length; i8++) {
          var newCarry = (this || _global$12).words[i8] & carryMask;
          var c8 = ((this || _global$12).words[i8] | 0) - newCarry << r9;
          (this || _global$12).words[i8] = c8 | carry;
          carry = newCarry >>> 26 - r9;
        }
        if (carry) {
          (this || _global$12).words[i8] = carry;
          (this || _global$12).length++;
        }
      }
      if (s7 !== 0) {
        for (i8 = (this || _global$12).length - 1; i8 >= 0; i8--) {
          (this || _global$12).words[i8 + s7] = (this || _global$12).words[i8];
        }
        for (i8 = 0; i8 < s7; i8++) {
          (this || _global$12).words[i8] = 0;
        }
        (this || _global$12).length += s7;
      }
      return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
      assert2((this || _global$12).negative === 0);
      return this.iushln(bits);
    };
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
      assert2(typeof bits === "number" && bits >= 0);
      var h8;
      if (hint) {
        h8 = (hint - hint % 26) / 26;
      } else {
        h8 = 0;
      }
      var r9 = bits % 26;
      var s7 = Math.min((bits - r9) / 26, (this || _global$12).length);
      var mask = 67108863 ^ 67108863 >>> r9 << r9;
      var maskedWords = extended;
      h8 -= s7;
      h8 = Math.max(0, h8);
      if (maskedWords) {
        for (var i8 = 0; i8 < s7; i8++) {
          maskedWords.words[i8] = (this || _global$12).words[i8];
        }
        maskedWords.length = s7;
      }
      if (s7 === 0)
        ;
      else if ((this || _global$12).length > s7) {
        (this || _global$12).length -= s7;
        for (i8 = 0; i8 < (this || _global$12).length; i8++) {
          (this || _global$12).words[i8] = (this || _global$12).words[i8 + s7];
        }
      } else {
        (this || _global$12).words[0] = 0;
        (this || _global$12).length = 1;
      }
      var carry = 0;
      for (i8 = (this || _global$12).length - 1; i8 >= 0 && (carry !== 0 || i8 >= h8); i8--) {
        var word = (this || _global$12).words[i8] | 0;
        (this || _global$12).words[i8] = carry << 26 - r9 | word >>> r9;
        carry = word & mask;
      }
      if (maskedWords && carry !== 0) {
        maskedWords.words[maskedWords.length++] = carry;
      }
      if ((this || _global$12).length === 0) {
        (this || _global$12).words[0] = 0;
        (this || _global$12).length = 1;
      }
      return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
      assert2((this || _global$12).negative === 0);
      return this.iushrn(bits, hint, extended);
    };
    BN.prototype.shln = function shln(bits) {
      return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
      return this.clone().iushln(bits);
    };
    BN.prototype.shrn = function shrn(bits) {
      return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
      return this.clone().iushrn(bits);
    };
    BN.prototype.testn = function testn(bit) {
      assert2(typeof bit === "number" && bit >= 0);
      var r9 = bit % 26;
      var s7 = (bit - r9) / 26;
      var q3 = 1 << r9;
      if ((this || _global$12).length <= s7)
        return false;
      var w4 = (this || _global$12).words[s7];
      return !!(w4 & q3);
    };
    BN.prototype.imaskn = function imaskn(bits) {
      assert2(typeof bits === "number" && bits >= 0);
      var r9 = bits % 26;
      var s7 = (bits - r9) / 26;
      assert2((this || _global$12).negative === 0, "imaskn works only with positive numbers");
      if ((this || _global$12).length <= s7) {
        return this || _global$12;
      }
      if (r9 !== 0) {
        s7++;
      }
      (this || _global$12).length = Math.min(s7, (this || _global$12).length);
      if (r9 !== 0) {
        var mask = 67108863 ^ 67108863 >>> r9 << r9;
        (this || _global$12).words[(this || _global$12).length - 1] &= mask;
      }
      return this.strip();
    };
    BN.prototype.maskn = function maskn(bits) {
      return this.clone().imaskn(bits);
    };
    BN.prototype.iaddn = function iaddn(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      if (num < 0)
        return this.isubn(-num);
      if ((this || _global$12).negative !== 0) {
        if ((this || _global$12).length === 1 && ((this || _global$12).words[0] | 0) < num) {
          (this || _global$12).words[0] = num - ((this || _global$12).words[0] | 0);
          (this || _global$12).negative = 0;
          return this || _global$12;
        }
        (this || _global$12).negative = 0;
        this.isubn(num);
        (this || _global$12).negative = 1;
        return this || _global$12;
      }
      return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
      (this || _global$12).words[0] += num;
      for (var i8 = 0; i8 < (this || _global$12).length && (this || _global$12).words[i8] >= 67108864; i8++) {
        (this || _global$12).words[i8] -= 67108864;
        if (i8 === (this || _global$12).length - 1) {
          (this || _global$12).words[i8 + 1] = 1;
        } else {
          (this || _global$12).words[i8 + 1]++;
        }
      }
      (this || _global$12).length = Math.max((this || _global$12).length, i8 + 1);
      return this || _global$12;
    };
    BN.prototype.isubn = function isubn(num) {
      assert2(typeof num === "number");
      assert2(num < 67108864);
      if (num < 0)
        return this.iaddn(-num);
      if ((this || _global$12).negative !== 0) {
        (this || _global$12).negative = 0;
        this.iaddn(num);
        (this || _global$12).negative = 1;
        return this || _global$12;
      }
      (this || _global$12).words[0] -= num;
      if ((this || _global$12).length === 1 && (this || _global$12).words[0] < 0) {
        (this || _global$12).words[0] = -(this || _global$12).words[0];
        (this || _global$12).negative = 1;
      } else {
        for (var i8 = 0; i8 < (this || _global$12).length && (this || _global$12).words[i8] < 0; i8++) {
          (this || _global$12).words[i8] += 67108864;
          (this || _global$12).words[i8 + 1] -= 1;
        }
      }
      return this.strip();
    };
    BN.prototype.addn = function addn(num) {
      return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
      return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
      (this || _global$12).negative = 0;
      return this || _global$12;
    };
    BN.prototype.abs = function abs() {
      return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
      var len = num.length + shift;
      var i8;
      this._expand(len);
      var w4;
      var carry = 0;
      for (i8 = 0; i8 < num.length; i8++) {
        w4 = ((this || _global$12).words[i8 + shift] | 0) + carry;
        var right = (num.words[i8] | 0) * mul;
        w4 -= right & 67108863;
        carry = (w4 >> 26) - (right / 67108864 | 0);
        (this || _global$12).words[i8 + shift] = w4 & 67108863;
      }
      for (; i8 < (this || _global$12).length - shift; i8++) {
        w4 = ((this || _global$12).words[i8 + shift] | 0) + carry;
        carry = w4 >> 26;
        (this || _global$12).words[i8 + shift] = w4 & 67108863;
      }
      if (carry === 0)
        return this.strip();
      assert2(carry === -1);
      carry = 0;
      for (i8 = 0; i8 < (this || _global$12).length; i8++) {
        w4 = -((this || _global$12).words[i8] | 0) + carry;
        carry = w4 >> 26;
        (this || _global$12).words[i8] = w4 & 67108863;
      }
      (this || _global$12).negative = 1;
      return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
      var shift = (this || _global$12).length - num.length;
      var a8 = this.clone();
      var b5 = num;
      var bhi = b5.words[b5.length - 1] | 0;
      var bhiBits = this._countBits(bhi);
      shift = 26 - bhiBits;
      if (shift !== 0) {
        b5 = b5.ushln(shift);
        a8.iushln(shift);
        bhi = b5.words[b5.length - 1] | 0;
      }
      var m6 = a8.length - b5.length;
      var q3;
      if (mode !== "mod") {
        q3 = new BN(null);
        q3.length = m6 + 1;
        q3.words = new Array(q3.length);
        for (var i8 = 0; i8 < q3.length; i8++) {
          q3.words[i8] = 0;
        }
      }
      var diff = a8.clone()._ishlnsubmul(b5, 1, m6);
      if (diff.negative === 0) {
        a8 = diff;
        if (q3) {
          q3.words[m6] = 1;
        }
      }
      for (var j4 = m6 - 1; j4 >= 0; j4--) {
        var qj = (a8.words[b5.length + j4] | 0) * 67108864 + (a8.words[b5.length + j4 - 1] | 0);
        qj = Math.min(qj / bhi | 0, 67108863);
        a8._ishlnsubmul(b5, qj, j4);
        while (a8.negative !== 0) {
          qj--;
          a8.negative = 0;
          a8._ishlnsubmul(b5, 1, j4);
          if (!a8.isZero()) {
            a8.negative ^= 1;
          }
        }
        if (q3) {
          q3.words[j4] = qj;
        }
      }
      if (q3) {
        q3.strip();
      }
      a8.strip();
      if (mode !== "div" && shift !== 0) {
        a8.iushrn(shift);
      }
      return {
        div: q3 || null,
        mod: a8
      };
    };
    BN.prototype.divmod = function divmod(num, mode, positive) {
      assert2(!num.isZero());
      if (this.isZero()) {
        return {
          div: new BN(0),
          mod: new BN(0)
        };
      }
      var div, mod, res;
      if ((this || _global$12).negative !== 0 && num.negative === 0) {
        res = this.neg().divmod(num, mode);
        if (mode !== "mod") {
          div = res.div.neg();
        }
        if (mode !== "div") {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.iadd(num);
          }
        }
        return {
          div,
          mod
        };
      }
      if ((this || _global$12).negative === 0 && num.negative !== 0) {
        res = this.divmod(num.neg(), mode);
        if (mode !== "mod") {
          div = res.div.neg();
        }
        return {
          div,
          mod: res.mod
        };
      }
      if (((this || _global$12).negative & num.negative) !== 0) {
        res = this.neg().divmod(num.neg(), mode);
        if (mode !== "div") {
          mod = res.mod.neg();
          if (positive && mod.negative !== 0) {
            mod.isub(num);
          }
        }
        return {
          div: res.div,
          mod
        };
      }
      if (num.length > (this || _global$12).length || this.cmp(num) < 0) {
        return {
          div: new BN(0),
          mod: this || _global$12
        };
      }
      if (num.length === 1) {
        if (mode === "div") {
          return {
            div: this.divn(num.words[0]),
            mod: null
          };
        }
        if (mode === "mod") {
          return {
            div: null,
            mod: new BN(this.modn(num.words[0]))
          };
        }
        return {
          div: this.divn(num.words[0]),
          mod: new BN(this.modn(num.words[0]))
        };
      }
      return this._wordDiv(num, mode);
    };
    BN.prototype.div = function div(num) {
      return this.divmod(num, "div", false).div;
    };
    BN.prototype.mod = function mod(num) {
      return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
      return this.divmod(num, "mod", true).mod;
    };
    BN.prototype.divRound = function divRound(num) {
      var dm = this.divmod(num);
      if (dm.mod.isZero())
        return dm.div;
      var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
      var half = num.ushrn(1);
      var r22 = num.andln(1);
      var cmp = mod.cmp(half);
      if (cmp < 0 || r22 === 1 && cmp === 0)
        return dm.div;
      return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
      assert2(num <= 67108863);
      var p8 = (1 << 26) % num;
      var acc = 0;
      for (var i8 = (this || _global$12).length - 1; i8 >= 0; i8--) {
        acc = (p8 * acc + ((this || _global$12).words[i8] | 0)) % num;
      }
      return acc;
    };
    BN.prototype.idivn = function idivn(num) {
      assert2(num <= 67108863);
      var carry = 0;
      for (var i8 = (this || _global$12).length - 1; i8 >= 0; i8--) {
        var w4 = ((this || _global$12).words[i8] | 0) + carry * 67108864;
        (this || _global$12).words[i8] = w4 / num | 0;
        carry = w4 % num;
      }
      return this.strip();
    };
    BN.prototype.divn = function divn(num) {
      return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p8) {
      assert2(p8.negative === 0);
      assert2(!p8.isZero());
      var x4 = this || _global$12;
      var y6 = p8.clone();
      if (x4.negative !== 0) {
        x4 = x4.umod(p8);
      } else {
        x4 = x4.clone();
      }
      var A4 = new BN(1);
      var B4 = new BN(0);
      var C4 = new BN(0);
      var D4 = new BN(1);
      var g5 = 0;
      while (x4.isEven() && y6.isEven()) {
        x4.iushrn(1);
        y6.iushrn(1);
        ++g5;
      }
      var yp = y6.clone();
      var xp = x4.clone();
      while (!x4.isZero()) {
        for (var i8 = 0, im = 1; (x4.words[0] & im) === 0 && i8 < 26; ++i8, im <<= 1)
          ;
        if (i8 > 0) {
          x4.iushrn(i8);
          while (i8-- > 0) {
            if (A4.isOdd() || B4.isOdd()) {
              A4.iadd(yp);
              B4.isub(xp);
            }
            A4.iushrn(1);
            B4.iushrn(1);
          }
        }
        for (var j4 = 0, jm = 1; (y6.words[0] & jm) === 0 && j4 < 26; ++j4, jm <<= 1)
          ;
        if (j4 > 0) {
          y6.iushrn(j4);
          while (j4-- > 0) {
            if (C4.isOdd() || D4.isOdd()) {
              C4.iadd(yp);
              D4.isub(xp);
            }
            C4.iushrn(1);
            D4.iushrn(1);
          }
        }
        if (x4.cmp(y6) >= 0) {
          x4.isub(y6);
          A4.isub(C4);
          B4.isub(D4);
        } else {
          y6.isub(x4);
          C4.isub(A4);
          D4.isub(B4);
        }
      }
      return {
        a: C4,
        b: D4,
        gcd: y6.iushln(g5)
      };
    };
    BN.prototype._invmp = function _invmp(p8) {
      assert2(p8.negative === 0);
      assert2(!p8.isZero());
      var a8 = this || _global$12;
      var b5 = p8.clone();
      if (a8.negative !== 0) {
        a8 = a8.umod(p8);
      } else {
        a8 = a8.clone();
      }
      var x1 = new BN(1);
      var x22 = new BN(0);
      var delta = b5.clone();
      while (a8.cmpn(1) > 0 && b5.cmpn(1) > 0) {
        for (var i8 = 0, im = 1; (a8.words[0] & im) === 0 && i8 < 26; ++i8, im <<= 1)
          ;
        if (i8 > 0) {
          a8.iushrn(i8);
          while (i8-- > 0) {
            if (x1.isOdd()) {
              x1.iadd(delta);
            }
            x1.iushrn(1);
          }
        }
        for (var j4 = 0, jm = 1; (b5.words[0] & jm) === 0 && j4 < 26; ++j4, jm <<= 1)
          ;
        if (j4 > 0) {
          b5.iushrn(j4);
          while (j4-- > 0) {
            if (x22.isOdd()) {
              x22.iadd(delta);
            }
            x22.iushrn(1);
          }
        }
        if (a8.cmp(b5) >= 0) {
          a8.isub(b5);
          x1.isub(x22);
        } else {
          b5.isub(a8);
          x22.isub(x1);
        }
      }
      var res;
      if (a8.cmpn(1) === 0) {
        res = x1;
      } else {
        res = x22;
      }
      if (res.cmpn(0) < 0) {
        res.iadd(p8);
      }
      return res;
    };
    BN.prototype.gcd = function gcd(num) {
      if (this.isZero())
        return num.abs();
      if (num.isZero())
        return this.abs();
      var a8 = this.clone();
      var b5 = num.clone();
      a8.negative = 0;
      b5.negative = 0;
      for (var shift = 0; a8.isEven() && b5.isEven(); shift++) {
        a8.iushrn(1);
        b5.iushrn(1);
      }
      do {
        while (a8.isEven()) {
          a8.iushrn(1);
        }
        while (b5.isEven()) {
          b5.iushrn(1);
        }
        var r9 = a8.cmp(b5);
        if (r9 < 0) {
          var t8 = a8;
          a8 = b5;
          b5 = t8;
        } else if (r9 === 0 || b5.cmpn(1) === 0) {
          break;
        }
        a8.isub(b5);
      } while (true);
      return b5.iushln(shift);
    };
    BN.prototype.invm = function invm(num) {
      return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
      return ((this || _global$12).words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
      return ((this || _global$12).words[0] & 1) === 1;
    };
    BN.prototype.andln = function andln(num) {
      return (this || _global$12).words[0] & num;
    };
    BN.prototype.bincn = function bincn(bit) {
      assert2(typeof bit === "number");
      var r9 = bit % 26;
      var s7 = (bit - r9) / 26;
      var q3 = 1 << r9;
      if ((this || _global$12).length <= s7) {
        this._expand(s7 + 1);
        (this || _global$12).words[s7] |= q3;
        return this || _global$12;
      }
      var carry = q3;
      for (var i8 = s7; carry !== 0 && i8 < (this || _global$12).length; i8++) {
        var w4 = (this || _global$12).words[i8] | 0;
        w4 += carry;
        carry = w4 >>> 26;
        w4 &= 67108863;
        (this || _global$12).words[i8] = w4;
      }
      if (carry !== 0) {
        (this || _global$12).words[i8] = carry;
        (this || _global$12).length++;
      }
      return this || _global$12;
    };
    BN.prototype.isZero = function isZero() {
      return (this || _global$12).length === 1 && (this || _global$12).words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
      var negative = num < 0;
      if ((this || _global$12).negative !== 0 && !negative)
        return -1;
      if ((this || _global$12).negative === 0 && negative)
        return 1;
      this.strip();
      var res;
      if ((this || _global$12).length > 1) {
        res = 1;
      } else {
        if (negative) {
          num = -num;
        }
        assert2(num <= 67108863, "Number is too big");
        var w4 = (this || _global$12).words[0] | 0;
        res = w4 === num ? 0 : w4 < num ? -1 : 1;
      }
      if ((this || _global$12).negative !== 0)
        return -res | 0;
      return res;
    };
    BN.prototype.cmp = function cmp(num) {
      if ((this || _global$12).negative !== 0 && num.negative === 0)
        return -1;
      if ((this || _global$12).negative === 0 && num.negative !== 0)
        return 1;
      var res = this.ucmp(num);
      if ((this || _global$12).negative !== 0)
        return -res | 0;
      return res;
    };
    BN.prototype.ucmp = function ucmp(num) {
      if ((this || _global$12).length > num.length)
        return 1;
      if ((this || _global$12).length < num.length)
        return -1;
      var res = 0;
      for (var i8 = (this || _global$12).length - 1; i8 >= 0; i8--) {
        var a8 = (this || _global$12).words[i8] | 0;
        var b5 = num.words[i8] | 0;
        if (a8 === b5)
          continue;
        if (a8 < b5) {
          res = -1;
        } else if (a8 > b5) {
          res = 1;
        }
        break;
      }
      return res;
    };
    BN.prototype.gtn = function gtn(num) {
      return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
      return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
      return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
      return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
      return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
      return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
      return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
      return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
      return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
      return this.cmp(num) === 0;
    };
    BN.red = function red(num) {
      return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
      assert2(!(this || _global$12).red, "Already a number in reduction context");
      assert2((this || _global$12).negative === 0, "red works only with positives");
      return ctx.convertTo(this || _global$12)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
      assert2((this || _global$12).red, "fromRed works only with numbers in reduction context");
      return (this || _global$12).red.convertFrom(this || _global$12);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
      (this || _global$12).red = ctx;
      return this || _global$12;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
      assert2(!(this || _global$12).red, "Already a number in reduction context");
      return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
      assert2((this || _global$12).red, "redAdd works only with red numbers");
      return (this || _global$12).red.add(this || _global$12, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
      assert2((this || _global$12).red, "redIAdd works only with red numbers");
      return (this || _global$12).red.iadd(this || _global$12, num);
    };
    BN.prototype.redSub = function redSub(num) {
      assert2((this || _global$12).red, "redSub works only with red numbers");
      return (this || _global$12).red.sub(this || _global$12, num);
    };
    BN.prototype.redISub = function redISub(num) {
      assert2((this || _global$12).red, "redISub works only with red numbers");
      return (this || _global$12).red.isub(this || _global$12, num);
    };
    BN.prototype.redShl = function redShl(num) {
      assert2((this || _global$12).red, "redShl works only with red numbers");
      return (this || _global$12).red.shl(this || _global$12, num);
    };
    BN.prototype.redMul = function redMul(num) {
      assert2((this || _global$12).red, "redMul works only with red numbers");
      (this || _global$12).red._verify2(this || _global$12, num);
      return (this || _global$12).red.mul(this || _global$12, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
      assert2((this || _global$12).red, "redMul works only with red numbers");
      (this || _global$12).red._verify2(this || _global$12, num);
      return (this || _global$12).red.imul(this || _global$12, num);
    };
    BN.prototype.redSqr = function redSqr() {
      assert2((this || _global$12).red, "redSqr works only with red numbers");
      (this || _global$12).red._verify1(this || _global$12);
      return (this || _global$12).red.sqr(this || _global$12);
    };
    BN.prototype.redISqr = function redISqr() {
      assert2((this || _global$12).red, "redISqr works only with red numbers");
      (this || _global$12).red._verify1(this || _global$12);
      return (this || _global$12).red.isqr(this || _global$12);
    };
    BN.prototype.redSqrt = function redSqrt() {
      assert2((this || _global$12).red, "redSqrt works only with red numbers");
      (this || _global$12).red._verify1(this || _global$12);
      return (this || _global$12).red.sqrt(this || _global$12);
    };
    BN.prototype.redInvm = function redInvm() {
      assert2((this || _global$12).red, "redInvm works only with red numbers");
      (this || _global$12).red._verify1(this || _global$12);
      return (this || _global$12).red.invm(this || _global$12);
    };
    BN.prototype.redNeg = function redNeg() {
      assert2((this || _global$12).red, "redNeg works only with red numbers");
      (this || _global$12).red._verify1(this || _global$12);
      return (this || _global$12).red.neg(this || _global$12);
    };
    BN.prototype.redPow = function redPow(num) {
      assert2((this || _global$12).red && !num.red, "redPow(normalNum)");
      (this || _global$12).red._verify1(this || _global$12);
      return (this || _global$12).red.pow(this || _global$12, num);
    };
    var primes = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };
    function MPrime(name2, p8) {
      (this || _global$12).name = name2;
      (this || _global$12).p = new BN(p8, 16);
      (this || _global$12).n = (this || _global$12).p.bitLength();
      (this || _global$12).k = new BN(1).iushln((this || _global$12).n).isub((this || _global$12).p);
      (this || _global$12).tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
      var tmp = new BN(null);
      tmp.words = new Array(Math.ceil((this || _global$12).n / 13));
      return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
      var r9 = num;
      var rlen;
      do {
        this.split(r9, (this || _global$12).tmp);
        r9 = this.imulK(r9);
        r9 = r9.iadd((this || _global$12).tmp);
        rlen = r9.bitLength();
      } while (rlen > (this || _global$12).n);
      var cmp = rlen < (this || _global$12).n ? -1 : r9.ucmp((this || _global$12).p);
      if (cmp === 0) {
        r9.words[0] = 0;
        r9.length = 1;
      } else if (cmp > 0) {
        r9.isub((this || _global$12).p);
      } else {
        if (r9.strip !== void 0) {
          r9.strip();
        } else {
          r9._strip();
        }
      }
      return r9;
    };
    MPrime.prototype.split = function split(input, out) {
      input.iushrn((this || _global$12).n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
      return num.imul((this || _global$12).k);
    };
    function K256() {
      MPrime.call(this || _global$12, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits4(K256, MPrime);
    K256.prototype.split = function split(input, output) {
      var mask = 4194303;
      var outLen = Math.min(input.length, 9);
      for (var i8 = 0; i8 < outLen; i8++) {
        output.words[i8] = input.words[i8];
      }
      output.length = outLen;
      if (input.length <= 9) {
        input.words[0] = 0;
        input.length = 1;
        return;
      }
      var prev = input.words[9];
      output.words[output.length++] = prev & mask;
      for (i8 = 10; i8 < input.length; i8++) {
        var next = input.words[i8] | 0;
        input.words[i8 - 10] = (next & mask) << 4 | prev >>> 22;
        prev = next;
      }
      prev >>>= 22;
      input.words[i8 - 10] = prev;
      if (prev === 0 && input.length > 10) {
        input.length -= 10;
      } else {
        input.length -= 9;
      }
    };
    K256.prototype.imulK = function imulK(num) {
      num.words[num.length] = 0;
      num.words[num.length + 1] = 0;
      num.length += 2;
      var lo = 0;
      for (var i8 = 0; i8 < num.length; i8++) {
        var w4 = num.words[i8] | 0;
        lo += w4 * 977;
        num.words[i8] = lo & 67108863;
        lo = w4 * 64 + (lo / 67108864 | 0);
      }
      if (num.words[num.length - 1] === 0) {
        num.length--;
        if (num.words[num.length - 1] === 0) {
          num.length--;
        }
      }
      return num;
    };
    function P224() {
      MPrime.call(this || _global$12, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits4(P224, MPrime);
    function P192() {
      MPrime.call(this || _global$12, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits4(P192, MPrime);
    function P25519() {
      MPrime.call(this || _global$12, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits4(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
      var carry = 0;
      for (var i8 = 0; i8 < num.length; i8++) {
        var hi = (num.words[i8] | 0) * 19 + carry;
        var lo = hi & 67108863;
        hi >>>= 26;
        num.words[i8] = lo;
        carry = hi;
      }
      if (carry !== 0) {
        num.words[num.length++] = carry;
      }
      return num;
    };
    BN._prime = function prime(name2) {
      if (primes[name2])
        return primes[name2];
      var prime2;
      if (name2 === "k256") {
        prime2 = new K256();
      } else if (name2 === "p224") {
        prime2 = new P224();
      } else if (name2 === "p192") {
        prime2 = new P192();
      } else if (name2 === "p25519") {
        prime2 = new P25519();
      } else {
        throw new Error("Unknown prime " + name2);
      }
      primes[name2] = prime2;
      return prime2;
    };
    function Red(m6) {
      if (typeof m6 === "string") {
        var prime = BN._prime(m6);
        (this || _global$12).m = prime.p;
        (this || _global$12).prime = prime;
      } else {
        assert2(m6.gtn(1), "modulus must be greater than 1");
        (this || _global$12).m = m6;
        (this || _global$12).prime = null;
      }
    }
    Red.prototype._verify1 = function _verify1(a8) {
      assert2(a8.negative === 0, "red works only with positives");
      assert2(a8.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a8, b5) {
      assert2((a8.negative | b5.negative) === 0, "red works only with positives");
      assert2(a8.red && a8.red === b5.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a8) {
      if ((this || _global$12).prime)
        return (this || _global$12).prime.ireduce(a8)._forceRed(this || _global$12);
      return a8.umod((this || _global$12).m)._forceRed(this || _global$12);
    };
    Red.prototype.neg = function neg(a8) {
      if (a8.isZero()) {
        return a8.clone();
      }
      return (this || _global$12).m.sub(a8)._forceRed(this || _global$12);
    };
    Red.prototype.add = function add(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.add(b5);
      if (res.cmp((this || _global$12).m) >= 0) {
        res.isub((this || _global$12).m);
      }
      return res._forceRed(this || _global$12);
    };
    Red.prototype.iadd = function iadd(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.iadd(b5);
      if (res.cmp((this || _global$12).m) >= 0) {
        res.isub((this || _global$12).m);
      }
      return res;
    };
    Red.prototype.sub = function sub(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.sub(b5);
      if (res.cmpn(0) < 0) {
        res.iadd((this || _global$12).m);
      }
      return res._forceRed(this || _global$12);
    };
    Red.prototype.isub = function isub(a8, b5) {
      this._verify2(a8, b5);
      var res = a8.isub(b5);
      if (res.cmpn(0) < 0) {
        res.iadd((this || _global$12).m);
      }
      return res;
    };
    Red.prototype.shl = function shl(a8, num) {
      this._verify1(a8);
      return this.imod(a8.ushln(num));
    };
    Red.prototype.imul = function imul(a8, b5) {
      this._verify2(a8, b5);
      return this.imod(a8.imul(b5));
    };
    Red.prototype.mul = function mul(a8, b5) {
      this._verify2(a8, b5);
      return this.imod(a8.mul(b5));
    };
    Red.prototype.isqr = function isqr(a8) {
      return this.imul(a8, a8.clone());
    };
    Red.prototype.sqr = function sqr(a8) {
      return this.mul(a8, a8);
    };
    Red.prototype.sqrt = function sqrt(a8) {
      if (a8.isZero())
        return a8.clone();
      var mod3 = (this || _global$12).m.andln(3);
      assert2(mod3 % 2 === 1);
      if (mod3 === 3) {
        var pow = (this || _global$12).m.add(new BN(1)).iushrn(2);
        return this.pow(a8, pow);
      }
      var q3 = (this || _global$12).m.subn(1);
      var s7 = 0;
      while (!q3.isZero() && q3.andln(1) === 0) {
        s7++;
        q3.iushrn(1);
      }
      assert2(!q3.isZero());
      var one = new BN(1).toRed(this || _global$12);
      var nOne = one.redNeg();
      var lpow = (this || _global$12).m.subn(1).iushrn(1);
      var z5 = (this || _global$12).m.bitLength();
      z5 = new BN(2 * z5 * z5).toRed(this || _global$12);
      while (this.pow(z5, lpow).cmp(nOne) !== 0) {
        z5.redIAdd(nOne);
      }
      var c8 = this.pow(z5, q3);
      var r9 = this.pow(a8, q3.addn(1).iushrn(1));
      var t8 = this.pow(a8, q3);
      var m6 = s7;
      while (t8.cmp(one) !== 0) {
        var tmp = t8;
        for (var i8 = 0; tmp.cmp(one) !== 0; i8++) {
          tmp = tmp.redSqr();
        }
        assert2(i8 < m6);
        var b5 = this.pow(c8, new BN(1).iushln(m6 - i8 - 1));
        r9 = r9.redMul(b5);
        c8 = b5.redSqr();
        t8 = t8.redMul(c8);
        m6 = i8;
      }
      return r9;
    };
    Red.prototype.invm = function invm(a8) {
      var inv = a8._invmp((this || _global$12).m);
      if (inv.negative !== 0) {
        inv.negative = 0;
        return this.imod(inv).redNeg();
      } else {
        return this.imod(inv);
      }
    };
    Red.prototype.pow = function pow(a8, num) {
      if (num.isZero())
        return new BN(1).toRed(this || _global$12);
      if (num.cmpn(1) === 0)
        return a8.clone();
      var windowSize = 4;
      var wnd = new Array(1 << windowSize);
      wnd[0] = new BN(1).toRed(this || _global$12);
      wnd[1] = a8;
      for (var i8 = 2; i8 < wnd.length; i8++) {
        wnd[i8] = this.mul(wnd[i8 - 1], a8);
      }
      var res = wnd[0];
      var current = 0;
      var currentLen = 0;
      var start = num.bitLength() % 26;
      if (start === 0) {
        start = 26;
      }
      for (i8 = num.length - 1; i8 >= 0; i8--) {
        var word = num.words[i8];
        for (var j4 = start - 1; j4 >= 0; j4--) {
          var bit = word >> j4 & 1;
          if (res !== wnd[0]) {
            res = this.sqr(res);
          }
          if (bit === 0 && current === 0) {
            currentLen = 0;
            continue;
          }
          current <<= 1;
          current |= bit;
          currentLen++;
          if (currentLen !== windowSize && (i8 !== 0 || j4 !== 0))
            continue;
          res = this.mul(res, wnd[current]);
          currentLen = 0;
          current = 0;
        }
        start = 26;
      }
      return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
      var r9 = num.umod((this || _global$12).m);
      return r9 === num ? r9.clone() : r9;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
      var res = num.clone();
      res.red = null;
      return res;
    };
    BN.mont = function mont(num) {
      return new Mont(num);
    };
    function Mont(m6) {
      Red.call(this || _global$12, m6);
      (this || _global$12).shift = (this || _global$12).m.bitLength();
      if ((this || _global$12).shift % 26 !== 0) {
        (this || _global$12).shift += 26 - (this || _global$12).shift % 26;
      }
      (this || _global$12).r = new BN(1).iushln((this || _global$12).shift);
      (this || _global$12).r2 = this.imod((this || _global$12).r.sqr());
      (this || _global$12).rinv = (this || _global$12).r._invmp((this || _global$12).m);
      (this || _global$12).minv = (this || _global$12).rinv.mul((this || _global$12).r).isubn(1).div((this || _global$12).m);
      (this || _global$12).minv = (this || _global$12).minv.umod((this || _global$12).r);
      (this || _global$12).minv = (this || _global$12).r.sub((this || _global$12).minv);
    }
    inherits4(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
      return this.imod(num.ushln((this || _global$12).shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
      var r9 = this.imod(num.mul((this || _global$12).rinv));
      r9.red = null;
      return r9;
    };
    Mont.prototype.imul = function imul(a8, b5) {
      if (a8.isZero() || b5.isZero()) {
        a8.words[0] = 0;
        a8.length = 1;
        return a8;
      }
      var t8 = a8.imul(b5);
      var c8 = t8.maskn((this || _global$12).shift).mul((this || _global$12).minv).imaskn((this || _global$12).shift).mul((this || _global$12).m);
      var u8 = t8.isub(c8).iushrn((this || _global$12).shift);
      var res = u8;
      if (u8.cmp((this || _global$12).m) >= 0) {
        res = u8.isub((this || _global$12).m);
      } else if (u8.cmpn(0) < 0) {
        res = u8.iadd((this || _global$12).m);
      }
      return res._forceRed(this || _global$12);
    };
    Mont.prototype.mul = function mul(a8, b5) {
      if (a8.isZero() || b5.isZero())
        return new BN(0)._forceRed(this || _global$12);
      var t8 = a8.mul(b5);
      var c8 = t8.maskn((this || _global$12).shift).mul((this || _global$12).minv).imaskn((this || _global$12).shift).mul((this || _global$12).m);
      var u8 = t8.isub(c8).iushrn((this || _global$12).shift);
      var res = u8;
      if (u8.cmp((this || _global$12).m) >= 0) {
        res = u8.isub((this || _global$12).m);
      } else if (u8.cmpn(0) < 0) {
        res = u8.iadd((this || _global$12).m);
      }
      return res._forceRed(this || _global$12);
    };
    Mont.prototype.invm = function invm(a8) {
      var res = this.imod(a8._invmp((this || _global$12).m).mul((this || _global$12).r2));
      return res._forceRed(this || _global$12);
    };
  })(module, exports$72);
  return module.exports;
}
function dew$52() {
  if (_dewExec$52)
    return exports$62;
  _dewExec$52 = true;
  var BN = dew$62();
  var Buffer3 = dew$2P().Buffer;
  function withPublic(paddedMsg, key) {
    return Buffer3.from(paddedMsg.toRed(BN.mont(key.modulus)).redPow(new BN(key.publicExponent)).fromRed().toArray());
  }
  exports$62 = withPublic;
  return exports$62;
}
function dew$42() {
  if (_dewExec$42)
    return exports$52;
  _dewExec$42 = true;
  var parseKeys = dew$e2();
  var randomBytes2 = dew$2O();
  var createHash2 = dew$2y();
  var mgf = dew$82();
  var xor = dew$72();
  var BN = dew$62();
  var withPublic = dew$52();
  var crt = dew$W();
  var Buffer3 = dew$2P().Buffer;
  exports$52 = function publicEncrypt2(publicKey, msg, reverse) {
    var padding;
    if (publicKey.padding) {
      padding = publicKey.padding;
    } else if (reverse) {
      padding = 1;
    } else {
      padding = 4;
    }
    var key = parseKeys(publicKey);
    var paddedMsg;
    if (padding === 4) {
      paddedMsg = oaep(key, msg);
    } else if (padding === 1) {
      paddedMsg = pkcs1(key, msg, reverse);
    } else if (padding === 3) {
      paddedMsg = new BN(msg);
      if (paddedMsg.cmp(key.modulus) >= 0) {
        throw new Error("data too long for modulus");
      }
    } else {
      throw new Error("unknown padding");
    }
    if (reverse) {
      return crt(paddedMsg, key);
    } else {
      return withPublic(paddedMsg, key);
    }
  };
  function oaep(key, msg) {
    var k4 = key.modulus.byteLength();
    var mLen = msg.length;
    var iHash = createHash2("sha1").update(Buffer3.alloc(0)).digest();
    var hLen = iHash.length;
    var hLen2 = 2 * hLen;
    if (mLen > k4 - hLen2 - 2) {
      throw new Error("message too long");
    }
    var ps = Buffer3.alloc(k4 - mLen - hLen2 - 2);
    var dblen = k4 - hLen - 1;
    var seed = randomBytes2(hLen);
    var maskedDb = xor(Buffer3.concat([iHash, ps, Buffer3.alloc(1, 1), msg], dblen), mgf(seed, dblen));
    var maskedSeed = xor(seed, mgf(maskedDb, hLen));
    return new BN(Buffer3.concat([Buffer3.alloc(1), maskedSeed, maskedDb], k4));
  }
  function pkcs1(key, msg, reverse) {
    var mLen = msg.length;
    var k4 = key.modulus.byteLength();
    if (mLen > k4 - 11) {
      throw new Error("message too long");
    }
    var ps;
    if (reverse) {
      ps = Buffer3.alloc(k4 - mLen - 3, 255);
    } else {
      ps = nonZero(k4 - mLen - 3);
    }
    return new BN(Buffer3.concat([Buffer3.from([0, reverse ? 1 : 2]), ps, Buffer3.alloc(1), msg], k4));
  }
  function nonZero(len) {
    var out = Buffer3.allocUnsafe(len);
    var i8 = 0;
    var cache = randomBytes2(len * 2);
    var cur = 0;
    var num;
    while (i8 < len) {
      if (cur === cache.length) {
        cache = randomBytes2(len * 2);
        cur = 0;
      }
      num = cache[cur++];
      if (num) {
        out[i8++] = num;
      }
    }
    return out;
  }
  return exports$52;
}
function dew$32() {
  if (_dewExec$32)
    return exports$42;
  _dewExec$32 = true;
  var parseKeys = dew$e2();
  var mgf = dew$82();
  var xor = dew$72();
  var BN = dew$62();
  var crt = dew$W();
  var createHash2 = dew$2y();
  var withPublic = dew$52();
  var Buffer3 = dew$2P().Buffer;
  exports$42 = function privateDecrypt2(privateKey, enc, reverse) {
    var padding;
    if (privateKey.padding) {
      padding = privateKey.padding;
    } else if (reverse) {
      padding = 1;
    } else {
      padding = 4;
    }
    var key = parseKeys(privateKey);
    var k4 = key.modulus.byteLength();
    if (enc.length > k4 || new BN(enc).cmp(key.modulus) >= 0) {
      throw new Error("decryption error");
    }
    var msg;
    if (reverse) {
      msg = withPublic(new BN(enc), key);
    } else {
      msg = crt(enc, key);
    }
    var zBuffer = Buffer3.alloc(k4 - msg.length);
    msg = Buffer3.concat([zBuffer, msg], k4);
    if (padding === 4) {
      return oaep(key, msg);
    } else if (padding === 1) {
      return pkcs1(key, msg, reverse);
    } else if (padding === 3) {
      return msg;
    } else {
      throw new Error("unknown padding");
    }
  };
  function oaep(key, msg) {
    var k4 = key.modulus.byteLength();
    var iHash = createHash2("sha1").update(Buffer3.alloc(0)).digest();
    var hLen = iHash.length;
    if (msg[0] !== 0) {
      throw new Error("decryption error");
    }
    var maskedSeed = msg.slice(1, hLen + 1);
    var maskedDb = msg.slice(hLen + 1);
    var seed = xor(maskedSeed, mgf(maskedDb, hLen));
    var db = xor(maskedDb, mgf(seed, k4 - hLen - 1));
    if (compare(iHash, db.slice(0, hLen))) {
      throw new Error("decryption error");
    }
    var i8 = hLen;
    while (db[i8] === 0) {
      i8++;
    }
    if (db[i8++] !== 1) {
      throw new Error("decryption error");
    }
    return db.slice(i8);
  }
  function pkcs1(key, msg, reverse) {
    var p1 = msg.slice(0, 2);
    var i8 = 2;
    var status = 0;
    while (msg[i8++] !== 0) {
      if (i8 >= msg.length) {
        status++;
        break;
      }
    }
    var ps = msg.slice(2, i8 - 1);
    if (p1.toString("hex") !== "0002" && !reverse || p1.toString("hex") !== "0001" && reverse) {
      status++;
    }
    if (ps.length < 8) {
      status++;
    }
    if (status) {
      throw new Error("decryption error");
    }
    return msg.slice(i8);
  }
  function compare(a8, b5) {
    a8 = Buffer3.from(a8);
    b5 = Buffer3.from(b5);
    var dif = 0;
    var len = a8.length;
    if (a8.length !== b5.length) {
      dif++;
      len = Math.min(a8.length, b5.length);
    }
    var i8 = -1;
    while (++i8 < len) {
      dif += a8[i8] ^ b5[i8];
    }
    return dif;
  }
  return exports$42;
}
function dew$210() {
  if (_dewExec$210)
    return exports$33;
  _dewExec$210 = true;
  exports$33.publicEncrypt = dew$42();
  exports$33.privateDecrypt = dew$32();
  exports$33.privateEncrypt = function privateEncrypt2(key, buf) {
    return exports$33.publicEncrypt(key, buf, true);
  };
  exports$33.publicDecrypt = function publicDecrypt2(key, buf) {
    return exports$33.privateDecrypt(key, buf, true);
  };
  return exports$33;
}
function dew$110() {
  if (_dewExec$110)
    return exports$210;
  _dewExec$110 = true;
  var process$1 = process2;
  function oldBrowser() {
    throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11");
  }
  var safeBuffer = dew$2P();
  var randombytes = dew$2O();
  var Buffer3 = safeBuffer.Buffer;
  var kBufferMaxLength = safeBuffer.kMaxLength;
  var crypto2 = _global4.crypto || _global4.msCrypto;
  var kMaxUint32 = Math.pow(2, 32) - 1;
  function assertOffset(offset, length) {
    if (typeof offset !== "number" || offset !== offset) {
      throw new TypeError("offset must be a number");
    }
    if (offset > kMaxUint32 || offset < 0) {
      throw new TypeError("offset must be a uint32");
    }
    if (offset > kBufferMaxLength || offset > length) {
      throw new RangeError("offset out of range");
    }
  }
  function assertSize(size, offset, length) {
    if (typeof size !== "number" || size !== size) {
      throw new TypeError("size must be a number");
    }
    if (size > kMaxUint32 || size < 0) {
      throw new TypeError("size must be a uint32");
    }
    if (size + offset > length || size > kBufferMaxLength) {
      throw new RangeError("buffer too small");
    }
  }
  if (crypto2 && crypto2.getRandomValues || !process$1.browser) {
    exports$210.randomFill = randomFill2;
    exports$210.randomFillSync = randomFillSync2;
  } else {
    exports$210.randomFill = oldBrowser;
    exports$210.randomFillSync = oldBrowser;
  }
  function randomFill2(buf, offset, size, cb) {
    if (!Buffer3.isBuffer(buf) && !(buf instanceof _global4.Uint8Array)) {
      throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
    }
    if (typeof offset === "function") {
      cb = offset;
      offset = 0;
      size = buf.length;
    } else if (typeof size === "function") {
      cb = size;
      size = buf.length - offset;
    } else if (typeof cb !== "function") {
      throw new TypeError('"cb" argument must be a function');
    }
    assertOffset(offset, buf.length);
    assertSize(size, offset, buf.length);
    return actualFill(buf, offset, size, cb);
  }
  function actualFill(buf, offset, size, cb) {
    if (process$1.browser) {
      var ourBuf = buf.buffer;
      var uint = new Uint8Array(ourBuf, offset, size);
      crypto2.getRandomValues(uint);
      if (cb) {
        process$1.nextTick(function() {
          cb(null, buf);
        });
        return;
      }
      return buf;
    }
    if (cb) {
      randombytes(size, function(err, bytes2) {
        if (err) {
          return cb(err);
        }
        bytes2.copy(buf, offset);
        cb(null, buf);
      });
      return;
    }
    var bytes = randombytes(size);
    bytes.copy(buf, offset);
    return buf;
  }
  function randomFillSync2(buf, offset, size) {
    if (typeof offset === "undefined") {
      offset = 0;
    }
    if (!Buffer3.isBuffer(buf) && !(buf instanceof _global4.Uint8Array)) {
      throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
    }
    assertOffset(offset, buf.length);
    if (size === void 0)
      size = buf.length - offset;
    assertSize(size, offset, buf.length);
    return actualFill(buf, offset, size);
  }
  return exports$210;
}
function dew5() {
  if (_dewExec5)
    return exports$110;
  _dewExec5 = true;
  exports$110.randomBytes = exports$110.rng = exports$110.pseudoRandomBytes = exports$110.prng = dew$2O();
  exports$110.createHash = exports$110.Hash = dew$2y();
  exports$110.createHmac = exports$110.Hmac = dew$2v();
  var algos = dew$2u();
  var algoKeys = Object.keys(algos);
  var hashes = ["sha1", "sha224", "sha256", "sha384", "sha512", "md5", "rmd160"].concat(algoKeys);
  exports$110.getHashes = function() {
    return hashes;
  };
  var p8 = dew$2o();
  exports$110.pbkdf2 = p8.pbkdf2;
  exports$110.pbkdf2Sync = p8.pbkdf2Sync;
  var aes = dew$1Y();
  exports$110.Cipher = aes.Cipher;
  exports$110.createCipher = aes.createCipher;
  exports$110.Cipheriv = aes.Cipheriv;
  exports$110.createCipheriv = aes.createCipheriv;
  exports$110.Decipher = aes.Decipher;
  exports$110.createDecipher = aes.createDecipher;
  exports$110.Decipheriv = aes.Decipheriv;
  exports$110.createDecipheriv = aes.createDecipheriv;
  exports$110.getCiphers = aes.getCiphers;
  exports$110.listCiphers = aes.listCiphers;
  var dh = dew$Z();
  exports$110.DiffieHellmanGroup = dh.DiffieHellmanGroup;
  exports$110.createDiffieHellmanGroup = dh.createDiffieHellmanGroup;
  exports$110.getDiffieHellman = dh.getDiffieHellman;
  exports$110.createDiffieHellman = dh.createDiffieHellman;
  exports$110.DiffieHellman = dh.DiffieHellman;
  var sign = dew$b2();
  exports$110.createSign = sign.createSign;
  exports$110.Sign = sign.Sign;
  exports$110.createVerify = sign.createVerify;
  exports$110.Verify = sign.Verify;
  exports$110.createECDH = dew$92();
  var publicEncrypt2 = dew$210();
  exports$110.publicEncrypt = publicEncrypt2.publicEncrypt;
  exports$110.privateEncrypt = publicEncrypt2.privateEncrypt;
  exports$110.publicDecrypt = publicEncrypt2.publicDecrypt;
  exports$110.privateDecrypt = publicEncrypt2.privateDecrypt;
  var rf = dew$110();
  exports$110.randomFill = rf.randomFill;
  exports$110.randomFillSync = rf.randomFillSync;
  exports$110.createCredentials = function() {
    throw new Error(["sorry, createCredentials is not implemented yet", "we accept pull requests", "https://github.com/crypto-browserify/crypto-browserify"].join("\n"));
  };
  exports$110.constants = {
    "DH_CHECK_P_NOT_SAFE_PRIME": 2,
    "DH_CHECK_P_NOT_PRIME": 1,
    "DH_UNABLE_TO_CHECK_GENERATOR": 4,
    "DH_NOT_SUITABLE_GENERATOR": 8,
    "NPN_ENABLED": 1,
    "ALPN_ENABLED": 1,
    "RSA_PKCS1_PADDING": 1,
    "RSA_SSLV23_PADDING": 2,
    "RSA_NO_PADDING": 3,
    "RSA_PKCS1_OAEP_PADDING": 4,
    "RSA_X931_PADDING": 5,
    "RSA_PKCS1_PSS_PADDING": 6,
    "POINT_CONVERSION_COMPRESSED": 2,
    "POINT_CONVERSION_UNCOMPRESSED": 4,
    "POINT_CONVERSION_HYBRID": 6
  };
  return exports$110;
}
var exports$2Q, _dewExec$2P, exports$2P, _dewExec$2O, _global$U, exports$2O, _dewExec$2N, exports$2N, _dewExec$2M, exports$2M, _dewExec$2L, exports$2L, _dewExec$2K, exports$2K, _dewExec$2J, _global$T, exports$2J, _dewExec$2I, _global$S, exports$2I, _dewExec$2H, _global$R, exports$2H, _dewExec$2G, _global$Q, exports$2G, _dewExec$2F, _global$P, exports$2F, _dewExec$2E, _global$O, exports$2E, _dewExec$2D, _global$N, exports$2D, _dewExec$2C, module$b, exports$f$2, _dewExec$f$2, exports$e$2, _dewExec$e$2, exports$d$2, _dewExec$d$2, exports$c$2, _dewExec$c$2, exports$b$2, _dewExec$b$2, exports$a$2, _dewExec$a$2, exports$9$2, _dewExec$9$2, _global$2$2, exports$8$2, _dewExec$8$2, _global$1$2, exports$7$2, _dewExec$7$2, exports$6$2, _dewExec$6$2, exports$5$2, _dewExec$5$2, exports$4$2, _dewExec$4$2, exports$3$2, _dewExec$3$2, _global$M, exports$2$2, _dewExec$2$2, exports$1$2, _dewExec$1$2, exports$2C, _dewExec$2B, exports$2B, _dewExec$2A, _global$L, stream, exports$2A, _dewExec$2z, _global$K, exports$2z, _dewExec$2y, exports$2y, _dewExec$2x, exports$2x, _dewExec$2w, exports$2w, _dewExec$2v, _algorithms$1, exports$2v, _dewExec$2u, exports$2u, _dewExec$2t, exports$2t, _dewExec$2s, _global$J, exports$2s, _dewExec$2r, exports$2r, _dewExec$2q, _global$I, exports$2q, _dewExec$2p, _global$H, exports$2p, _dewExec$2o, exports$2o, _dewExec$2n, exports$2n, _dewExec$2m, exports$2m, _dewExec$2l, exports$2l, _dewExec$2k, exports$2k, _dewExec$2j, exports$2j, _dewExec$2i, exports$2i, _dewExec$2h, exports$2h, _dewExec$2g, _global$G, exports$2g, _dewExec$2f, exports$2f, _dewExec$2e, exports$2e, _dewExec$2d, exports$2d, _dewExec$2c, exports$2c, _dewExec$2b, exports$2b, _dewExec$2a, exports$2a, _dewExec$29, exports$29, _dewExec$28, exports$28, _dewExec$27, _list$1, exports$27, _dewExec$26, exports$26, _dewExec$25, _global$F, exports$25, _dewExec$24, _global$E, exports$24, _dewExec$23, _global$D, exports$23, _dewExec$222, _global$C, exports$222, _dewExec$21, exports$21, _dewExec$20, _global$B, exports$20, _dewExec$1$, _global$A, exports$1$, _dewExec$1_, exports$1_, _dewExec$1Z, exports$1Z, _dewExec$1Y, exports$1Y, _dewExec$1X, module$a, _global$z, exports$1X, _dewExec$1W, module$9, _global$y, exports$1W, _dewExec$1V, exports$1U, _dewExec$1T, exports$1T, _dewExec$1S, _global$w, exports$1S, _dewExec$1R, exports$1R, _dewExec$1Q, exports$1Q, _dewExec$1P, exports$1P, _dewExec$1O, _global$v, exports$1O, _dewExec$1N, _global$u, exports$1N, _dewExec$1M, _global$t, exports$1M, _dewExec$1L, _global$s, exports$1L, _dewExec$1K, _global$r, exports$1K, _dewExec$1J, _global$q, exports$1J, _dewExec$1I, _global$p, exports$1I, _dewExec$1H, module$7, e$g, e$1$12, t$c, r$1$1, r$2$1, t$1$1, c$n, b$j, p$s, g$h, y$n, m$m, S$e, R$7, k$g, M$a, j$a, O$8, P$8, x$a, L$8, D$9, C$9, A$c, q$8, W$5, U$a, H$7, F$8, V$6, G$5, Y$4, z$9, J$5, Q$4, Z$3, $$3, t$2$1, r$3$1, n$1$12, b$1$1, p$1$1, g$1$1, y$1$1, w$1$1, S$1$1, R$1$1, k$1$1, E$1$1, M$1$1, O$1$1, T$1$1, x$1$1, P$1$1, D$1$1, L$1$1, C$1$1, A$1$1, I$1$1, N$1$1, U$1$1, H$1$1, F$1$1, V$1$1, Y$1$1, K$1$1, z$1$1, Q$1$1, X$1$1, t$4$1, t$5$1, n$2$1, i$e, a$p, o$s, s$q, f$2$1, h$2$1, p$2$1, o$1$12, e$3$1, s$1$1, t$6$1, o$2$1, e$4$1, f$3$1, v$2$1, l$r, d$n, f$u, b$i, exports$1H, _dewExec$1G, _global$o, exports$1G, _dewExec$1F, exports$1F, _dewExec$1E, exports$1E, _dewExec$1D, exports$1D, _dewExec$1C, _algorithms, exports$1C, _dewExec$1B, exports$1B, _dewExec$1A, exports$1A, _dewExec$1z, _global$n, exports$1z, _dewExec$1y, exports$1y, _dewExec$1x, _global$m, exports$1x, _dewExec$1w, _global$l, exports$1w, _dewExec$1v, exports$1v, _dewExec$1u, exports$1u, _dewExec$1t, exports$1t, _dewExec$1s, exports$1s, _dewExec$1r, exports$1r, _dewExec$1q, exports$1q, _dewExec$1p, exports$1p, _dewExec$1o, exports$1o, _dewExec$1n, _global$k, exports$1n, _dewExec$1m, exports$1m, _dewExec$1l, exports$1l, _dewExec$1k, exports$1k, _dewExec$1j, exports$1j, _dewExec$1i, exports$1i, _dewExec$1h, exports$1h, _dewExec$1g, exports$1g, _dewExec$1f, exports$1f, _dewExec$1e, _list, exports$1e, _dewExec$1d, exports$1d, _dewExec$1c, _global$j, exports$1c, _dewExec$1b, _global$i, exports$1b, _dewExec$1a, _global$h, exports$1a, _dewExec$19, _global$g, exports$19, _dewExec$18, exports$18, _dewExec$17, _global$f, exports$17, _dewExec$16, _global$e, exports$16, _dewExec$15, exports$15, _dewExec$14, exports$14, _dewExec$13, exports$13, _dewExec$122, module$6, _global$d, exports$12$1, _dewExec$11$1, module$5, _global$c, _global$b, exports$11$1, indexOf, Object_keys, forEach2, defineProp, globals, Script, o5, n5, t5, f5, a5, e7, o$13, f$12, h5, r5, _3, e$13, u5, h$1, _$1, r$12, e$2, n$2, o$3, f$3, c$13, a$22, l$13, I3, s$12, h$2, _$2, n$3, r$2, o$4, f$4, l$2, a$3, w$1, _$3, e$4, n$4, r$3, l$3, o$5, c$3, d$2, p$2, b$2, w$2, g3, B3, T4, m4, A3, U3, x3, j3, q2, L3, k$2, z3, D3, F3, G2, H2, W2, X2, Y3, Z2, $2, tt, it, st, _t, et, nt, e$5, n$5, s$2, h$3, f$6, m$1, n$6, p$3, s$3, h$4, e$6, r$4, o$6, h$5, n$7, p$4, l$4, d$3, c$4, _$4, m$2, u$4, g$1, v$1, w$3, s$4, f$8, a$7, u$5, h$6, c$5, l$5, p$5, d$4, m$3, y$2, b$3, v$2, w$4, g$2, B$1, k$3, S$1, A$1, H$1, E$2, P$1, U$1, K$1, x$1, z$1, I$2, F$1, M$1, r$5, o$7, r$6, i5, n$8, f$9, o$8, p$6, s$6, a$8, h$7, c$6, l$6, d$5, _$5, b$4, k$4, g$3, m$4, z$2, w$5, E$3, I$3, A$2, U$2, d$6, i$13, f$a, o$9, a$9, c$7, n$9, l$7, e$8, f$b, t$12, a$a, p$8, n$a, i$2, o$a, h$8, y$4, f$c, l$8, m$5, B$3, u$7, C$1, d$7, b$5, A$3, S$3, F$2, U$3, w$6, I$4, M$2, a$b, h$9, o$b, f$d, u$8, _$7, d$8, y$5, S$4, v$5, I$5, U$4, w$7, m$6, E$5, b$6, k$6, T$2, O$2, A$4, M$3, V$1, t$22, f$e, a$c, c$9, s$9, f$f, p$a, u$9, l$a, d$9, y$6, m$7, c$a, s$a, f$g, p$b, l$b, u$a, d$a, m$8, y$7, _$8, t$3, p$c, c$b, o$c, e$9, p$d, n$b, s$b, v$8, y$8, a$d, t$4, i$3, r$7, h$a, n$c, t$5, e$a, r$8, n$d, a$e, f$i, n$e, t$6, o$e, a$f, i$4, b$7, d$c, r$9, t$7, n$f, i$5, o$f, p$e, s$c, m$9, u$b, h$b, w$a, y$9, P$2, B$5, K$2, R$1, S$5, x$2, C$2, D$2, G$1, H$2, T$3, j$1, M$4, q$1, O$3, z$3, F$3, I$6, J$1, N$2, m$a, u$c, n$g, d$d, l$d, r$a, e$b, n$i, a$g, i$7, o$g, c$d, s$d, l$e, u$d, h$c, d$e, r$b, i$8, e$c, a$h, l$f, g$9, r$c, n$j, s$f, o$i, e$d, u$f, a$i, c$f, f$k, v$b, _$a, l$g, p$g, m$c, g$a, k$8, d$f, C$3, s$g, n$k, u$g, a$j, c$g, f$l, _$b, g$b, m$d, p$h, l$h, v$c, d$g, k$9, b$9, j$3, x$4, y$c, w$c, r$e, o$k, a$k, u$h, l$i, c$h, p$i, f$m, g$c, d$h, S$8, _$c, b$a, z$5, k$a, y$d, H$4, w$d, L$3, j$4, A$7, B$7, W$2, q$3, C$4, D$3, E$7, F$4, M$5, N$3, O$4, P$3, Q$1, R$2, T$4, V$2, X$2, Y$1, s$h, h$e, r$f, n$l, a$l, b$b, i$9, n$m, s$i, o$m, u$i, l$j, v$e, y$e, m$f, S$9, g$d, M$6, x$6, _$d, z$6, q$4, R$3, N$4, E$8, k$b, O$5, L$4, B$8, T$5, J$3, X$3, D$4, Y$2, W$3, K$4, U$6, G$3, H$5, Z$1, $$1, ee2, de2, ce2, te2, ae2, re2, be2, ie, ne2, se2, ue2, he2, pe2, le2, ve2, me2, Se2, ge2, Ae2, Ie, we2, xe, _e, ze, qe, Re, Pe, je2, Ne, Ee2, Oe2, Le, Be2, o$n, s$j, a$m, u$j, c$i, f$n, p$k, d$i, g$e, _$e, v$f, b$c, m$g, S$a, j$6, w$f, B$9, k$c, D$5, U$7, N$5, O$6, A$9, x$7, I$9, q$5, F$6, K$5, R$4, G$4, L$5, M$7, J$4, V$4, z$7, H$6, Q$3, e$f, t$a, s$k, n$n, o$o, h$h, y$g, r$g, u$k, a$n, c$j, k$d, f$o, b$d, l$l, d$j, p$l, j$7, v$g, m$h, q$6, K$6, P$6, s$l, i$a, o$p, d$k, n$o, p$m, u$l, y$h, m$i, f$p, b$e, E$a, h$i, v$h, p$n, d$l, f$q, c$k, g$f, w$g, l$n, m$j, v$i, E$b, L$6, R$5, j$8, T$7, P$7, K$7, W$4, x$8, B$a, S$b, q$7, U$8, V$5, C$7, z$8, i$b, n$p, p$o, s$m, u$m, o$q, f$r, i$c, l$o, u$n, c$m, p$p, d$m, h$j, s$n, g$g, m$k, w$h, v$j, y$k, E$c, b$g, B$b, x$9, L$7, k$f, D$7, U$9, R$6, S$c, j$9, A$b, I$a, M$9, o$r, t$b, f$t, u$o, a$o, s$o, l$p, m$l, p$q, l$q, D$8, s$p, _$g, h$k, y$m, E$d, S$d, C$8, N$6, exports$10$1, _dewExec$10$1, _global$a$1, exports$$$1, _dewExec$$$1, _global$9$1, exports$_$1, _dewExec$_$1, _primes$1, exports$Z$1, _dewExec$Z$1, _global$8$1, exports$Y$1, _dewExec$Y$1, exports$X$1, _dewExec$X$1, module$4$1, _global$7$1, exports$W$1, _dewExec$W$1, _package$1, exports$V$1, _dewExec$V$1, module$3$1, _global$6$1, exports$U$1, _dewExec$U$1, exports$T$1, _dewExec$T$1, exports$S$1, _dewExec$S$1, exports$R$1, _dewExec$R$1, exports$Q$1, _dewExec$Q$1, exports$P$1, _dewExec$P$1, exports$O$1, _dewExec$O$1, exports$N$1, _dewExec$N$1, exports$M$1, _dewExec$M$1, exports$L$1, _dewExec$L$1, exports$K$1, _dewExec$K$1, exports$J$1, _dewExec$J$1, exports$I$1, _dewExec$I$1, exports$H$1, _dewExec$H$1, exports$G$1, _dewExec$G$1, exports$F$1, _dewExec$F$1, exports$E$1, _dewExec$E$1, exports$D$1, _dewExec$D$1, exports$C$1, _dewExec$C$1, exports$B$1, _dewExec$B$1, exports$A$1, _dewExec$A$1, exports$z$1, _dewExec$z$1, exports$y$1, _dewExec$y$1, exports$x$1, _dewExec$x$1, module$2$1, _global$5$1, exports$w$1, _dewExec$w$1, exports$v$1, _dewExec$v$1, exports$u$1, _dewExec$u$1, exports$t$1, _dewExec$t$1, exports$s$1, _dewExec$s$1, exports$r$1, _dewExec$r$1, exports$q$1, _dewExec$q$1, exports$p$1, _dewExec$p$1, exports$o$1, _dewExec$o$1, exports$n$1, _dewExec$n$1, exports$m$1, _dewExec$m$1, exports$l$1, _dewExec$l$1, exports$k$1, _dewExec$k$1, exports$j$1, _dewExec$j$1, exports$i$1, _dewExec$i$1, exports$h$1, _dewExec$h$1, exports$g$1, _dewExec$g$1, _aesid$1, exports$f$1, _dewExec$f$1, exports$e$1, _dewExec$e$1, _curves$1, exports$d$1, _dewExec$d$1, exports$c$1, _dewExec$c$1, exports$b$1, _dewExec$b$1, _global$4$1, exports$a$1, _dewExec$a$1, module$1$1, _global$3$1, exports$9$1, _dewExec$9$1, _global$2$1, exports$8$1, _dewExec$8$1, exports$7$1, _dewExec$7$1, exports$6$1, _dewExec$6$1, module$8, _global$1$1, exports$5$1, _dewExec$5$1, exports$4$1, _dewExec$4$1, exports$3$1, _dewExec$3$1, exports$2$12, _dewExec$2$12, exports$1$12, _dewExec$1$12, _global$x, exports$1V, _dewExec$1U, crypto, exports$122, _dewExec$11, _global$a, exports$11, _dewExec$10, _global$9, exports$10, _dewExec$$, _primes, exports$$, _dewExec$_, _global$8, exports$_, _dewExec$Z, exports$Z, _dewExec$Y, exports$Y, _dewExec$X, module$4, _global$7, exports$X, _dewExec$W, _package, exports$W, _dewExec$V, module$3, _global$6, exports$V, _dewExec$U, exports$U, _dewExec$T, exports$T, _dewExec$S, exports$S, _dewExec$R, exports$R, _dewExec$Q, exports$Q, _dewExec$P, exports$P, _dewExec$O, exports$O, _dewExec$N, exports$N, _dewExec$M, exports$M, _dewExec$L, exports$L, _dewExec$K, exports$K, _dewExec$J, exports$J, _dewExec$I, exports$I, _dewExec$H, exports$H, _dewExec$G, exports$G, _dewExec$F, exports$F, _dewExec$E, exports$E, _dewExec$D, exports$D, _dewExec$C, exports$C, _dewExec$B, exports$B, _dewExec$A, exports$A, _dewExec$z, exports$z, _dewExec$y, exports$y, _dewExec$x, module$2, _global$5, exports$x, _dewExec$w, exports$w, _dewExec$v, exports$v, _dewExec$u, exports$u, _dewExec$t, exports$t, _dewExec$s, exports$s, _dewExec$r, exports$r, _dewExec$q, exports$q, _dewExec$p, exports$p, _dewExec$o, exports$o, _dewExec$n, exports$n, _dewExec$m, exports$m, _dewExec$l, exports$l, _dewExec$k, exports$k, _dewExec$j, exports$j, _dewExec$i, exports$i, _dewExec$h, exports$h, _dewExec$g2, _aesid, exports$g2, _dewExec$f2, exports$f2, _dewExec$e2, _curves, exports$e2, _dewExec$d2, exports$d2, _dewExec$c2, exports$c2, _dewExec$b2, _global$4, exports$b2, _dewExec$a2, module$1, _global$3, exports$a2, _dewExec$92, _global$22, exports$92, _dewExec$82, exports$82, _dewExec$72, exports$72, _dewExec$62, module, _global$12, exports$62, _dewExec$52, exports$52, _dewExec$42, exports$42, _dewExec$32, exports$33, _dewExec$210, exports$210, _dewExec$110, _global4, exports$110, _dewExec5, exports5, Cipher, Cipheriv, Decipher, Decipheriv, DiffieHellman, DiffieHellmanGroup, Hash, Hmac, Sign, Verify, constants, createCipher, createCipheriv, createCredentials, createDecipher, createDecipheriv, createDiffieHellman, createDiffieHellmanGroup, createECDH, createHash, createHmac, createSign, createVerify, getCiphers, getDiffieHellman, getHashes, listCiphers, pbkdf2, pbkdf2Sync, privateDecrypt, privateEncrypt, prng, pseudoRandomBytes, publicDecrypt, publicEncrypt, randomBytes, randomFill, randomFillSync, rng, webcrypto;
var init_crypto = __esm({
  "../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/crypto.js"() {
    init_dirname();
    init_buffer2();
    init_process2();
    init_chunk_44e51b61();
    init_chunk_2eac56ff();
    init_chunk_c3d025d9();
    init_chunk_4bd36a8f();
    init_chunk_4ccc3a29();
    init_chunk_ce0fbc82();
    init_chunk_b4205b57();
    init_chunk_5decc758();
    exports$2Q = {};
    _dewExec$2P = false;
    exports$2P = {};
    _dewExec$2O = false;
    _global$U = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$2O = {};
    _dewExec$2N = false;
    exports$2N = {};
    _dewExec$2M = false;
    exports$2M = {};
    _dewExec$2L = false;
    exports$2L = {};
    _dewExec$2K = false;
    exports$2K = {};
    _dewExec$2J = false;
    _global$T = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$2J = {};
    _dewExec$2I = false;
    _global$S = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$2I = {};
    _dewExec$2H = false;
    _global$R = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$2H = {};
    _dewExec$2G = false;
    _global$Q = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$2G = {};
    _dewExec$2F = false;
    _global$P = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$2F = {};
    _dewExec$2E = false;
    _global$O = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$2E = {};
    _dewExec$2D = false;
    _global$N = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$2D = {};
    _dewExec$2C = false;
    module$b = {
      exports: exports$2D
    };
    exports$f$2 = {};
    _dewExec$f$2 = false;
    exports$e$2 = {};
    _dewExec$e$2 = false;
    exports$d$2 = {};
    _dewExec$d$2 = false;
    exports$c$2 = {};
    _dewExec$c$2 = false;
    exports$b$2 = {};
    _dewExec$b$2 = false;
    exports$a$2 = {};
    _dewExec$a$2 = false;
    exports$9$2 = {};
    _dewExec$9$2 = false;
    _global$2$2 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$8$2 = {};
    _dewExec$8$2 = false;
    _global$1$2 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$7$2 = {};
    _dewExec$7$2 = false;
    exports$6$2 = {};
    _dewExec$6$2 = false;
    exports$5$2 = {};
    _dewExec$5$2 = false;
    exports$4$2 = {};
    _dewExec$4$2 = false;
    exports$3$2 = {};
    _dewExec$3$2 = false;
    _global$M = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$2$2 = {};
    _dewExec$2$2 = false;
    exports$1$2 = {};
    _dewExec$1$2 = false;
    exports$2C = {};
    _dewExec$2B = false;
    exports$2B = {};
    _dewExec$2A = false;
    _global$L = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    stream = dew$2A();
    stream.Readable;
    stream.Writable;
    stream.Duplex;
    stream.Transform;
    stream.PassThrough;
    stream.finished;
    stream.pipeline;
    stream.Stream;
    ({
      finished: promisify(stream.finished),
      pipeline: promisify(stream.pipeline)
    });
    exports$2A = {};
    _dewExec$2z = false;
    _global$K = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$2z = {};
    _dewExec$2y = false;
    exports$2y = {};
    _dewExec$2x = false;
    exports$2x = {};
    _dewExec$2w = false;
    exports$2w = {};
    _dewExec$2v = false;
    _algorithms$1 = {
      "sha224WithRSAEncryption": {
        "sign": "rsa",
        "hash": "sha224",
        "id": "302d300d06096086480165030402040500041c"
      },
      "RSA-SHA224": {
        "sign": "ecdsa/rsa",
        "hash": "sha224",
        "id": "302d300d06096086480165030402040500041c"
      },
      "sha256WithRSAEncryption": {
        "sign": "rsa",
        "hash": "sha256",
        "id": "3031300d060960864801650304020105000420"
      },
      "RSA-SHA256": {
        "sign": "ecdsa/rsa",
        "hash": "sha256",
        "id": "3031300d060960864801650304020105000420"
      },
      "sha384WithRSAEncryption": {
        "sign": "rsa",
        "hash": "sha384",
        "id": "3041300d060960864801650304020205000430"
      },
      "RSA-SHA384": {
        "sign": "ecdsa/rsa",
        "hash": "sha384",
        "id": "3041300d060960864801650304020205000430"
      },
      "sha512WithRSAEncryption": {
        "sign": "rsa",
        "hash": "sha512",
        "id": "3051300d060960864801650304020305000440"
      },
      "RSA-SHA512": {
        "sign": "ecdsa/rsa",
        "hash": "sha512",
        "id": "3051300d060960864801650304020305000440"
      },
      "RSA-SHA1": {
        "sign": "rsa",
        "hash": "sha1",
        "id": "3021300906052b0e03021a05000414"
      },
      "ecdsa-with-SHA1": {
        "sign": "ecdsa",
        "hash": "sha1",
        "id": ""
      },
      "sha256": {
        "sign": "ecdsa",
        "hash": "sha256",
        "id": ""
      },
      "sha224": {
        "sign": "ecdsa",
        "hash": "sha224",
        "id": ""
      },
      "sha384": {
        "sign": "ecdsa",
        "hash": "sha384",
        "id": ""
      },
      "sha512": {
        "sign": "ecdsa",
        "hash": "sha512",
        "id": ""
      },
      "DSA-SHA": {
        "sign": "dsa",
        "hash": "sha1",
        "id": ""
      },
      "DSA-SHA1": {
        "sign": "dsa",
        "hash": "sha1",
        "id": ""
      },
      "DSA": {
        "sign": "dsa",
        "hash": "sha1",
        "id": ""
      },
      "DSA-WITH-SHA224": {
        "sign": "dsa",
        "hash": "sha224",
        "id": ""
      },
      "DSA-SHA224": {
        "sign": "dsa",
        "hash": "sha224",
        "id": ""
      },
      "DSA-WITH-SHA256": {
        "sign": "dsa",
        "hash": "sha256",
        "id": ""
      },
      "DSA-SHA256": {
        "sign": "dsa",
        "hash": "sha256",
        "id": ""
      },
      "DSA-WITH-SHA384": {
        "sign": "dsa",
        "hash": "sha384",
        "id": ""
      },
      "DSA-SHA384": {
        "sign": "dsa",
        "hash": "sha384",
        "id": ""
      },
      "DSA-WITH-SHA512": {
        "sign": "dsa",
        "hash": "sha512",
        "id": ""
      },
      "DSA-SHA512": {
        "sign": "dsa",
        "hash": "sha512",
        "id": ""
      },
      "DSA-RIPEMD160": {
        "sign": "dsa",
        "hash": "rmd160",
        "id": ""
      },
      "ripemd160WithRSA": {
        "sign": "rsa",
        "hash": "rmd160",
        "id": "3021300906052b2403020105000414"
      },
      "RSA-RIPEMD160": {
        "sign": "rsa",
        "hash": "rmd160",
        "id": "3021300906052b2403020105000414"
      },
      "md5WithRSAEncryption": {
        "sign": "rsa",
        "hash": "md5",
        "id": "3020300c06082a864886f70d020505000410"
      },
      "RSA-MD5": {
        "sign": "rsa",
        "hash": "md5",
        "id": "3020300c06082a864886f70d020505000410"
      }
    };
    exports$2v = {};
    _dewExec$2u = false;
    exports$2u = {};
    _dewExec$2t = false;
    exports$2t = {};
    _dewExec$2s = false;
    _global$J = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$2s = {};
    _dewExec$2r = false;
    exports$2r = {};
    _dewExec$2q = false;
    _global$I = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$2q = {};
    _dewExec$2p = false;
    _global$H = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$2p = {};
    _dewExec$2o = false;
    exports$2o = {};
    _dewExec$2n = false;
    exports$2n = {};
    _dewExec$2m = false;
    exports$2m = {};
    _dewExec$2l = false;
    exports$2l = {};
    _dewExec$2k = false;
    exports$2k = {};
    _dewExec$2j = false;
    exports$2j = {};
    _dewExec$2i = false;
    exports$2i = {};
    _dewExec$2h = false;
    exports$2h = {};
    _dewExec$2g = false;
    _global$G = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$2g = {};
    _dewExec$2f = false;
    exports$2f = {};
    _dewExec$2e = false;
    exports$2e = {};
    _dewExec$2d = false;
    exports$2d = {};
    _dewExec$2c = false;
    exports$2c = {};
    _dewExec$2b = false;
    exports$2b = {};
    _dewExec$2a = false;
    exports$2a = {};
    _dewExec$29 = false;
    exports$29 = {};
    _dewExec$28 = false;
    exports$28 = {};
    _dewExec$27 = false;
    _list$1 = {
      "aes-128-ecb": {
        "cipher": "AES",
        "key": 128,
        "iv": 0,
        "mode": "ECB",
        "type": "block"
      },
      "aes-192-ecb": {
        "cipher": "AES",
        "key": 192,
        "iv": 0,
        "mode": "ECB",
        "type": "block"
      },
      "aes-256-ecb": {
        "cipher": "AES",
        "key": 256,
        "iv": 0,
        "mode": "ECB",
        "type": "block"
      },
      "aes-128-cbc": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes-192-cbc": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes-256-cbc": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes128": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes192": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes256": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes-128-cfb": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CFB",
        "type": "stream"
      },
      "aes-192-cfb": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CFB",
        "type": "stream"
      },
      "aes-256-cfb": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CFB",
        "type": "stream"
      },
      "aes-128-cfb8": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CFB8",
        "type": "stream"
      },
      "aes-192-cfb8": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CFB8",
        "type": "stream"
      },
      "aes-256-cfb8": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CFB8",
        "type": "stream"
      },
      "aes-128-cfb1": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CFB1",
        "type": "stream"
      },
      "aes-192-cfb1": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CFB1",
        "type": "stream"
      },
      "aes-256-cfb1": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CFB1",
        "type": "stream"
      },
      "aes-128-ofb": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "OFB",
        "type": "stream"
      },
      "aes-192-ofb": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "OFB",
        "type": "stream"
      },
      "aes-256-ofb": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "OFB",
        "type": "stream"
      },
      "aes-128-ctr": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CTR",
        "type": "stream"
      },
      "aes-192-ctr": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CTR",
        "type": "stream"
      },
      "aes-256-ctr": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CTR",
        "type": "stream"
      },
      "aes-128-gcm": {
        "cipher": "AES",
        "key": 128,
        "iv": 12,
        "mode": "GCM",
        "type": "auth"
      },
      "aes-192-gcm": {
        "cipher": "AES",
        "key": 192,
        "iv": 12,
        "mode": "GCM",
        "type": "auth"
      },
      "aes-256-gcm": {
        "cipher": "AES",
        "key": 256,
        "iv": 12,
        "mode": "GCM",
        "type": "auth"
      }
    };
    exports$27 = {};
    _dewExec$26 = false;
    exports$26 = {};
    _dewExec$25 = false;
    _global$F = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$25 = {};
    _dewExec$24 = false;
    _global$E = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$24 = {};
    _dewExec$23 = false;
    _global$D = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$23 = {};
    _dewExec$222 = false;
    _global$C = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$222 = {};
    _dewExec$21 = false;
    exports$21 = {};
    _dewExec$20 = false;
    _global$B = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$20 = {};
    _dewExec$1$ = false;
    _global$A = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$1$ = {};
    _dewExec$1_ = false;
    exports$1_ = {};
    _dewExec$1Z = false;
    exports$1Z = {};
    _dewExec$1Y = false;
    exports$1Y = {};
    _dewExec$1X = false;
    module$a = {
      exports: exports$1Y
    };
    _global$z = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$1X = {};
    _dewExec$1W = false;
    module$9 = {
      exports: exports$1X
    };
    _global$y = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$1W = {};
    _dewExec$1V = false;
    exports$1U = {};
    _dewExec$1T = false;
    exports$1T = {};
    _dewExec$1S = false;
    _global$w = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$1S = {};
    _dewExec$1R = false;
    exports$1R = {};
    _dewExec$1Q = false;
    exports$1Q = {};
    _dewExec$1P = false;
    exports$1P = {};
    _dewExec$1O = false;
    _global$v = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$1O = {};
    _dewExec$1N = false;
    _global$u = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$1N = {};
    _dewExec$1M = false;
    _global$t = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$1M = {};
    _dewExec$1L = false;
    _global$s = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$1L = {};
    _dewExec$1K = false;
    _global$r = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$1K = {};
    _dewExec$1J = false;
    _global$q = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$1J = {};
    _dewExec$1I = false;
    _global$p = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$1I = {};
    _dewExec$1H = false;
    module$7 = {
      exports: exports$1I
    };
    e$g = y.EventEmitter;
    e$1$12 = {};
    t$c = {};
    n$q("ERR_INVALID_OPT_VALUE", function(e11, t8) {
      return 'The value "' + t8 + '" is invalid for option "' + e11 + '"';
    }, TypeError), n$q("ERR_INVALID_ARG_TYPE", function(e11, t8, n9) {
      let o9;
      var E4;
      let u8;
      if ("string" == typeof t8 && (E4 = "not ", t8.substr(0, E4.length) === E4) ? (o9 = "must not be", t8 = t8.replace(/^not /, "")) : o9 = "must be", function(e12, t9, n10) {
        return (void 0 === n10 || n10 > e12.length) && (n10 = e12.length), e12.substring(n10 - t9.length, n10) === t9;
      }(e11, " argument"))
        u8 = `The ${e11} ${o9} ${r$h(t8, "type")}`;
      else {
        u8 = `The "${e11}" ${function(e12, t9, n10) {
          return "number" != typeof n10 && (n10 = 0), !(n10 + t9.length > e12.length) && -1 !== e12.indexOf(t9, n10);
        }(e11, ".") ? "property" : "argument"} ${o9} ${r$h(t8, "type")}`;
      }
      return u8 += `. Received type ${typeof n9}`, u8;
    }, TypeError), n$q("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF"), n$q("ERR_METHOD_NOT_IMPLEMENTED", function(e11) {
      return "The " + e11 + " method is not implemented";
    }), n$q("ERR_STREAM_PREMATURE_CLOSE", "Premature close"), n$q("ERR_STREAM_DESTROYED", function(e11) {
      return "Cannot call " + e11 + " after a stream was destroyed";
    }), n$q("ERR_MULTIPLE_CALLBACK", "Callback called multiple times"), n$q("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable"), n$q("ERR_STREAM_WRITE_AFTER_END", "write after end"), n$q("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError), n$q("ERR_UNKNOWN_ENCODING", function(e11) {
      return "Unknown encoding: " + e11;
    }, TypeError), n$q("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event"), e$1$12.codes = t$c;
    r$1$1 = function() {
      throw new Error("Readable.from is not available in the browser");
    };
    r$2$1 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    t$1$1 = function(t8, n9) {
      if (e$2$1("noDeprecation"))
        return t8;
      var o9 = false;
      return function() {
        if (!o9) {
          if (e$2$1("throwDeprecation"))
            throw new Error(n9);
          e$2$1("traceDeprecation") ? console.trace(n9) : console.warn(n9), o9 = true;
        }
        return t8.apply(this || r$2$1, arguments);
      };
    };
    c$n = e$1$1.Buffer;
    b$j = X.inspect;
    p$s = b$j && b$j.custom || "inspect";
    g$h = function() {
      function e11() {
        !function(e12, t9) {
          if (!(e12 instanceof t9))
            throw new TypeError("Cannot call a class as a function");
        }(this, e11), this.head = null, this.tail = null, this.length = 0;
      }
      var t8, n9;
      return t8 = e11, (n9 = [{ key: "push", value: function(e12) {
        var t9 = { data: e12, next: null };
        this.length > 0 ? this.tail.next = t9 : this.head = t9, this.tail = t9, ++this.length;
      } }, { key: "unshift", value: function(e12) {
        var t9 = { data: e12, next: this.head };
        0 === this.length && (this.tail = t9), this.head = t9, ++this.length;
      } }, { key: "shift", value: function() {
        if (0 !== this.length) {
          var e12 = this.head.data;
          return 1 === this.length ? this.head = this.tail = null : this.head = this.head.next, --this.length, e12;
        }
      } }, { key: "clear", value: function() {
        this.head = this.tail = null, this.length = 0;
      } }, { key: "join", value: function(e12) {
        if (0 === this.length)
          return "";
        for (var t9 = this.head, n10 = "" + t9.data; t9 = t9.next; )
          n10 += e12 + t9.data;
        return n10;
      } }, { key: "concat", value: function(e12) {
        if (0 === this.length)
          return c$n.alloc(0);
        for (var t9, n10, r9, i8 = c$n.allocUnsafe(e12 >>> 0), a8 = this.head, o9 = 0; a8; )
          t9 = a8.data, n10 = i8, r9 = o9, void c$n.prototype.copy.call(t9, n10, r9), o9 += a8.data.length, a8 = a8.next;
        return i8;
      } }, { key: "consume", value: function(e12, t9) {
        var n10;
        return e12 < this.head.data.length ? (n10 = this.head.data.slice(0, e12), this.head.data = this.head.data.slice(e12)) : n10 = e12 === this.head.data.length ? this.shift() : t9 ? this._getString(e12) : this._getBuffer(e12), n10;
      } }, { key: "first", value: function() {
        return this.head.data;
      } }, { key: "_getString", value: function(e12) {
        var t9 = this.head, n10 = 1, r9 = t9.data;
        for (e12 -= r9.length; t9 = t9.next; ) {
          var i8 = t9.data, a8 = e12 > i8.length ? i8.length : e12;
          if (a8 === i8.length ? r9 += i8 : r9 += i8.slice(0, e12), 0 == (e12 -= a8)) {
            a8 === i8.length ? (++n10, t9.next ? this.head = t9.next : this.head = this.tail = null) : (this.head = t9, t9.data = i8.slice(a8));
            break;
          }
          ++n10;
        }
        return this.length -= n10, r9;
      } }, { key: "_getBuffer", value: function(e12) {
        var t9 = c$n.allocUnsafe(e12), n10 = this.head, r9 = 1;
        for (n10.data.copy(t9), e12 -= n10.data.length; n10 = n10.next; ) {
          var i8 = n10.data, a8 = e12 > i8.length ? i8.length : e12;
          if (i8.copy(t9, t9.length - e12, 0, a8), 0 == (e12 -= a8)) {
            a8 === i8.length ? (++r9, n10.next ? this.head = n10.next : this.head = this.tail = null) : (this.head = n10, n10.data = i8.slice(a8));
            break;
          }
          ++r9;
        }
        return this.length -= r9, t9;
      } }, { key: p$s, value: function(e12, t9) {
        return b$j(this, function(e13) {
          for (var t10 = 1; t10 < arguments.length; t10++) {
            var n10 = null != arguments[t10] ? arguments[t10] : {};
            t10 % 2 ? u$p(Object(n10), true).forEach(function(t11) {
              f$v(e13, t11, n10[t11]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e13, Object.getOwnPropertyDescriptors(n10)) : u$p(Object(n10)).forEach(function(t11) {
              Object.defineProperty(e13, t11, Object.getOwnPropertyDescriptor(n10, t11));
            });
          }
          return e13;
        }({}, t9, { depth: 0, customInspect: false }));
      } }]) && h$l(t8.prototype, n9), e11;
    }();
    y$n = T;
    m$m = { destroy: function(e11, t8) {
      var n9 = this, r9 = this._readableState && this._readableState.destroyed, i8 = this._writableState && this._writableState.destroyed;
      return r9 || i8 ? (t8 ? t8(e11) : e11 && (this._writableState ? this._writableState.errorEmitted || (this._writableState.errorEmitted = true, y$n.nextTick(_$h, this, e11)) : y$n.nextTick(_$h, this, e11)), this) : (this._readableState && (this._readableState.destroyed = true), this._writableState && (this._writableState.destroyed = true), this._destroy(e11 || null, function(e12) {
        !t8 && e12 ? n9._writableState ? n9._writableState.errorEmitted ? y$n.nextTick(v$k, n9) : (n9._writableState.errorEmitted = true, y$n.nextTick(w$j, n9, e12)) : y$n.nextTick(w$j, n9, e12) : t8 ? (y$n.nextTick(v$k, n9), t8(e12)) : y$n.nextTick(v$k, n9);
      }), this);
    }, undestroy: function() {
      this._readableState && (this._readableState.destroyed = false, this._readableState.reading = false, this._readableState.ended = false, this._readableState.endEmitted = false), this._writableState && (this._writableState.destroyed = false, this._writableState.ended = false, this._writableState.ending = false, this._writableState.finalCalled = false, this._writableState.prefinished = false, this._writableState.finished = false, this._writableState.errorEmitted = false);
    }, errorOrDestroy: function(e11, t8) {
      var n9 = e11._readableState, r9 = e11._writableState;
      n9 && n9.autoDestroy || r9 && r9.autoDestroy ? e11.destroy(t8) : e11.emit("error", t8);
    } };
    S$e = e$1$12.codes.ERR_INVALID_OPT_VALUE;
    R$7 = { getHighWaterMark: function(e11, t8, n9, r9) {
      var i8 = function(e12, t9, n10) {
        return null != e12.highWaterMark ? e12.highWaterMark : t9 ? e12[n10] : null;
      }(t8, r9, n9);
      if (null != i8) {
        if (!isFinite(i8) || Math.floor(i8) !== i8 || i8 < 0)
          throw new S$e(r9 ? n9 : "highWaterMark", i8);
        return Math.floor(i8);
      }
      return e11.objectMode ? 16 : 16384;
    } };
    k$g = e$1$12.codes.ERR_STREAM_PREMATURE_CLOSE;
    j$a = function e5(t8, n9, r9) {
      if ("function" == typeof n9)
        return e5(t8, null, n9);
      n9 || (n9 = {}), r9 = function(e11) {
        var t9 = false;
        return function() {
          if (!t9) {
            t9 = true;
            for (var n10 = arguments.length, r10 = new Array(n10), i9 = 0; i9 < n10; i9++)
              r10[i9] = arguments[i9];
            e11.apply(this, r10);
          }
        };
      }(r9 || E$e);
      var i8 = n9.readable || false !== n9.readable && t8.readable, a8 = n9.writable || false !== n9.writable && t8.writable, o9 = function() {
        t8.writable || l8();
      }, s7 = t8._writableState && t8._writableState.finished, l8 = function() {
        a8 = false, s7 = true, i8 || r9.call(t8);
      }, d6 = t8._readableState && t8._readableState.endEmitted, u8 = function() {
        i8 = false, d6 = true, a8 || r9.call(t8);
      }, f9 = function(e11) {
        r9.call(t8, e11);
      }, h8 = function() {
        var e11;
        return i8 && !d6 ? (t8._readableState && t8._readableState.ended || (e11 = new k$g()), r9.call(t8, e11)) : a8 && !s7 ? (t8._writableState && t8._writableState.ended || (e11 = new k$g()), r9.call(t8, e11)) : void 0;
      }, c8 = function() {
        t8.req.on("finish", l8);
      };
      return !function(e11) {
        return e11.setHeader && "function" == typeof e11.abort;
      }(t8) ? a8 && !t8._writableState && (t8.on("end", o9), t8.on("close", o9)) : (t8.on("complete", l8), t8.on("abort", h8), t8.req ? c8() : t8.on("request", c8)), t8.on("end", u8), t8.on("finish", l8), false !== n9.error && t8.on("error", f9), t8.on("close", h8), function() {
        t8.removeListener("complete", l8), t8.removeListener("abort", h8), t8.removeListener("request", c8), t8.req && t8.req.removeListener("finish", l8), t8.removeListener("end", o9), t8.removeListener("close", o9), t8.removeListener("finish", l8), t8.removeListener("end", u8), t8.removeListener("error", f9), t8.removeListener("close", h8);
      };
    };
    O$8 = T;
    P$8 = j$a;
    x$a = Symbol("lastResolve");
    L$8 = Symbol("lastReject");
    D$9 = Symbol("error");
    C$9 = Symbol("ended");
    A$c = Symbol("lastPromise");
    q$8 = Symbol("handlePromise");
    W$5 = Symbol("stream");
    U$a = Object.getPrototypeOf(function() {
    });
    H$7 = Object.setPrototypeOf((T$8(M$a = { get stream() {
      return this[W$5];
    }, next: function() {
      var e11 = this, t8 = this[D$9];
      if (null !== t8)
        return Promise.reject(t8);
      if (this[C$9])
        return Promise.resolve(B$c(void 0, true));
      if (this[W$5].destroyed)
        return new Promise(function(t9, n10) {
          O$8.nextTick(function() {
            e11[D$9] ? n10(e11[D$9]) : t9(B$c(void 0, true));
          });
        });
      var n9, r9 = this[A$c];
      if (r9)
        n9 = new Promise(function(e12, t9) {
          return function(n10, r10) {
            e12.then(function() {
              if (t9[C$9])
                return n10(B$c(void 0, true)), void 0;
              t9[q$8](n10, r10);
            }, r10);
          };
        }(r9, this));
      else {
        var i8 = this[W$5].read();
        if (null !== i8)
          return Promise.resolve(B$c(i8, false));
        n9 = new Promise(this[q$8]);
      }
      return this[A$c] = n9, n9;
    } }, Symbol.asyncIterator, function() {
      return this;
    }), T$8(M$a, "return", function() {
      var e11 = this;
      return new Promise(function(t8, n9) {
        e11[W$5].destroy(null, function(e12) {
          if (e12)
            return n9(e12), void 0;
          t8(B$c(void 0, true));
        });
      });
    }), M$a), U$a);
    F$8 = function(e11) {
      var t8, n9 = Object.create(H$7, (T$8(t8 = {}, W$5, { value: e11, writable: true }), T$8(t8, x$a, { value: null, writable: true }), T$8(t8, L$8, { value: null, writable: true }), T$8(t8, D$9, { value: null, writable: true }), T$8(t8, C$9, { value: e11._readableState.endEmitted, writable: true }), T$8(t8, q$8, { value: function(e12, t9) {
        var r9 = n9[W$5].read();
        r9 ? (n9[A$c] = null, n9[x$a] = null, n9[L$8] = null, e12(B$c(r9, false))) : (n9[x$a] = e12, n9[L$8] = t9);
      }, writable: true }), t8));
      return n9[A$c] = null, P$8(e11, function(e12) {
        if (e12 && "ERR_STREAM_PREMATURE_CLOSE" !== e12.code) {
          var t9 = n9[L$8];
          return null !== t9 && (n9[A$c] = null, n9[x$a] = null, n9[L$8] = null, t9(e12)), n9[D$9] = e12, void 0;
        }
        var r9 = n9[x$a];
        null !== r9 && (n9[A$c] = null, n9[x$a] = null, n9[L$8] = null, r9(B$c(void 0, true))), n9[C$9] = true;
      }), e11.on("readable", N$7.bind(null, n9)), n9;
    };
    V$6 = {};
    G$5 = false;
    Y$4 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    z$9 = {};
    J$5 = false;
    Q$4 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    Z$3 = {};
    $$3 = false;
    t$2$1 = K$8();
    r$3$1 = e$1$12.codes.ERR_STREAM_PREMATURE_CLOSE;
    n$1$12 = function e6(n9, o9, a8) {
      if ("function" == typeof o9)
        return e6(n9, null, o9);
      o9 || (o9 = {}), a8 = function(e11) {
        var r9 = false;
        return function() {
          if (!r9) {
            r9 = true;
            for (var t8 = arguments.length, n10 = new Array(t8), o10 = 0; o10 < t8; o10++)
              n10[o10] = arguments[o10];
            e11.apply(this, n10);
          }
        };
      }(a8 || t$3$1);
      var i8 = o9.readable || false !== o9.readable && n9.readable, l8 = o9.writable || false !== o9.writable && n9.writable, c8 = function() {
        n9.writable || s7();
      }, f9 = n9._writableState && n9._writableState.finished, s7 = function() {
        l8 = false, f9 = true, i8 || a8.call(n9);
      }, u8 = n9._readableState && n9._readableState.endEmitted, d6 = function() {
        i8 = false, u8 = true, l8 || a8.call(n9);
      }, b5 = function(e11) {
        a8.call(n9, e11);
      }, v6 = function() {
        var e11;
        return i8 && !u8 ? (n9._readableState && n9._readableState.ended || (e11 = new r$3$1()), a8.call(n9, e11)) : l8 && !f9 ? (n9._writableState && n9._writableState.ended || (e11 = new r$3$1()), a8.call(n9, e11)) : void 0;
      }, m6 = function() {
        n9.req.on("finish", s7);
      };
      return !function(e11) {
        return e11.setHeader && "function" == typeof e11.abort;
      }(n9) ? l8 && !n9._writableState && (n9.on("end", c8), n9.on("close", c8)) : (n9.on("complete", s7), n9.on("abort", v6), n9.req ? m6() : n9.on("request", m6)), n9.on("end", d6), n9.on("finish", s7), false !== o9.error && n9.on("error", b5), n9.on("close", v6), function() {
        n9.removeListener("complete", s7), n9.removeListener("abort", v6), n9.removeListener("request", m6), n9.req && n9.req.removeListener("finish", s7), n9.removeListener("end", c8), n9.removeListener("close", c8), n9.removeListener("finish", s7), n9.removeListener("end", d6), n9.removeListener("error", b5), n9.removeListener("close", v6);
      };
    };
    b$1$1 = e$1$1.Buffer;
    p$1$1 = X.inspect;
    g$1$1 = p$1$1 && p$1$1.custom || "inspect";
    y$1$1 = function() {
      function e11() {
        !function(e12, t9) {
          if (!(e12 instanceof t9))
            throw new TypeError("Cannot call a class as a function");
        }(this, e11), this.head = null, this.tail = null, this.length = 0;
      }
      var t8, n9;
      return t8 = e11, (n9 = [{ key: "push", value: function(e12) {
        var t9 = { data: e12, next: null };
        this.length > 0 ? this.tail.next = t9 : this.head = t9, this.tail = t9, ++this.length;
      } }, { key: "unshift", value: function(e12) {
        var t9 = { data: e12, next: this.head };
        0 === this.length && (this.tail = t9), this.head = t9, ++this.length;
      } }, { key: "shift", value: function() {
        if (0 !== this.length) {
          var e12 = this.head.data;
          return 1 === this.length ? this.head = this.tail = null : this.head = this.head.next, --this.length, e12;
        }
      } }, { key: "clear", value: function() {
        this.head = this.tail = null, this.length = 0;
      } }, { key: "join", value: function(e12) {
        if (0 === this.length)
          return "";
        for (var t9 = this.head, n10 = "" + t9.data; t9 = t9.next; )
          n10 += e12 + t9.data;
        return n10;
      } }, { key: "concat", value: function(e12) {
        if (0 === this.length)
          return b$1$1.alloc(0);
        for (var t9, n10, r9, i8 = b$1$1.allocUnsafe(e12 >>> 0), a8 = this.head, o9 = 0; a8; )
          t9 = a8.data, n10 = i8, r9 = o9, void b$1$1.prototype.copy.call(t9, n10, r9), o9 += a8.data.length, a8 = a8.next;
        return i8;
      } }, { key: "consume", value: function(e12, t9) {
        var n10;
        return e12 < this.head.data.length ? (n10 = this.head.data.slice(0, e12), this.head.data = this.head.data.slice(e12)) : n10 = e12 === this.head.data.length ? this.shift() : t9 ? this._getString(e12) : this._getBuffer(e12), n10;
      } }, { key: "first", value: function() {
        return this.head.data;
      } }, { key: "_getString", value: function(e12) {
        var t9 = this.head, n10 = 1, r9 = t9.data;
        for (e12 -= r9.length; t9 = t9.next; ) {
          var i8 = t9.data, a8 = e12 > i8.length ? i8.length : e12;
          if (a8 === i8.length ? r9 += i8 : r9 += i8.slice(0, e12), 0 == (e12 -= a8)) {
            a8 === i8.length ? (++n10, t9.next ? this.head = t9.next : this.head = this.tail = null) : (this.head = t9, t9.data = i8.slice(a8));
            break;
          }
          ++n10;
        }
        return this.length -= n10, r9;
      } }, { key: "_getBuffer", value: function(e12) {
        var t9 = b$1$1.allocUnsafe(e12), n10 = this.head, r9 = 1;
        for (n10.data.copy(t9), e12 -= n10.data.length; n10 = n10.next; ) {
          var i8 = n10.data, a8 = e12 > i8.length ? i8.length : e12;
          if (i8.copy(t9, t9.length - e12, 0, a8), 0 == (e12 -= a8)) {
            a8 === i8.length ? (++r9, n10.next ? this.head = n10.next : this.head = this.tail = null) : (this.head = n10, n10.data = i8.slice(a8));
            break;
          }
          ++r9;
        }
        return this.length -= r9, t9;
      } }, { key: g$1$1, value: function(e12, t9) {
        return p$1$1(this, function(e13) {
          for (var t10 = 1; t10 < arguments.length; t10++) {
            var n10 = null != arguments[t10] ? arguments[t10] : {};
            t10 % 2 ? f$1$1(Object(n10), true).forEach(function(t11) {
              h$1$12(e13, t11, n10[t11]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e13, Object.getOwnPropertyDescriptors(n10)) : f$1$1(Object(n10)).forEach(function(t11) {
              Object.defineProperty(e13, t11, Object.getOwnPropertyDescriptor(n10, t11));
            });
          }
          return e13;
        }({}, t9, { depth: 0, customInspect: false }));
      } }]) && c$1$12(t8.prototype, n9), e11;
    }();
    w$1$1 = T;
    S$1$1 = { destroy: function(e11, t8) {
      var n9 = this, r9 = this._readableState && this._readableState.destroyed, i8 = this._writableState && this._writableState.destroyed;
      return r9 || i8 ? (t8 ? t8(e11) : e11 && (this._writableState ? this._writableState.errorEmitted || (this._writableState.errorEmitted = true, w$1$1.nextTick(m$1$1, this, e11)) : w$1$1.nextTick(m$1$1, this, e11)), this) : (this._readableState && (this._readableState.destroyed = true), this._writableState && (this._writableState.destroyed = true), this._destroy(e11 || null, function(e12) {
        !t8 && e12 ? n9._writableState ? n9._writableState.errorEmitted ? w$1$1.nextTick(v$1$1, n9) : (n9._writableState.errorEmitted = true, w$1$1.nextTick(_$1$1, n9, e12)) : w$1$1.nextTick(_$1$1, n9, e12) : t8 ? (w$1$1.nextTick(v$1$1, n9), t8(e12)) : w$1$1.nextTick(v$1$1, n9);
      }), this);
    }, undestroy: function() {
      this._readableState && (this._readableState.destroyed = false, this._readableState.reading = false, this._readableState.ended = false, this._readableState.endEmitted = false), this._writableState && (this._writableState.destroyed = false, this._writableState.ended = false, this._writableState.ending = false, this._writableState.finalCalled = false, this._writableState.prefinished = false, this._writableState.finished = false, this._writableState.errorEmitted = false);
    }, errorOrDestroy: function(e11, t8) {
      var n9 = e11._readableState, r9 = e11._writableState;
      n9 && n9.autoDestroy || r9 && r9.autoDestroy ? e11.destroy(t8) : e11.emit("error", t8);
    } };
    R$1$1 = e$1$12.codes.ERR_INVALID_OPT_VALUE;
    E$1$1 = { getHighWaterMark: function(e11, t8, n9, r9) {
      var i8 = function(e12, t9, n10) {
        return null != e12.highWaterMark ? e12.highWaterMark : t9 ? e12[n10] : null;
      }(t8, r9, n9);
      if (null != i8) {
        if (!isFinite(i8) || Math.floor(i8) !== i8 || i8 < 0)
          throw new R$1$1(r9 ? n9 : "highWaterMark", i8);
        return Math.floor(i8);
      }
      return e11.objectMode ? 16 : 16384;
    } };
    M$1$1 = T;
    O$1$1 = n$1$12;
    T$1$1 = Symbol("lastResolve");
    x$1$1 = Symbol("lastReject");
    P$1$1 = Symbol("error");
    D$1$1 = Symbol("ended");
    L$1$1 = Symbol("lastPromise");
    C$1$1 = Symbol("handlePromise");
    A$1$1 = Symbol("stream");
    I$1$1 = Object.getPrototypeOf(function() {
    });
    N$1$1 = Object.setPrototypeOf((j$1$1(k$1$1 = { get stream() {
      return this[A$1$1];
    }, next: function() {
      var e11 = this, t8 = this[P$1$1];
      if (null !== t8)
        return Promise.reject(t8);
      if (this[D$1$1])
        return Promise.resolve(W$1$1(void 0, true));
      if (this[A$1$1].destroyed)
        return new Promise(function(t9, n10) {
          M$1$1.nextTick(function() {
            e11[P$1$1] ? n10(e11[P$1$1]) : t9(W$1$1(void 0, true));
          });
        });
      var n9, r9 = this[L$1$1];
      if (r9)
        n9 = new Promise(function(e12, t9) {
          return function(n10, r10) {
            e12.then(function() {
              if (t9[D$1$1])
                return n10(W$1$1(void 0, true)), void 0;
              t9[C$1$1](n10, r10);
            }, r10);
          };
        }(r9, this));
      else {
        var i8 = this[A$1$1].read();
        if (null !== i8)
          return Promise.resolve(W$1$1(i8, false));
        n9 = new Promise(this[C$1$1]);
      }
      return this[L$1$1] = n9, n9;
    } }, Symbol.asyncIterator, function() {
      return this;
    }), j$1$1(k$1$1, "return", function() {
      var e11 = this;
      return new Promise(function(t8, n9) {
        e11[A$1$1].destroy(null, function(e12) {
          if (e12)
            return n9(e12), void 0;
          t8(W$1$1(void 0, true));
        });
      });
    }), k$1$1), I$1$1);
    U$1$1 = function(e11) {
      var t8, n9 = Object.create(N$1$1, (j$1$1(t8 = {}, A$1$1, { value: e11, writable: true }), j$1$1(t8, T$1$1, { value: null, writable: true }), j$1$1(t8, x$1$1, { value: null, writable: true }), j$1$1(t8, P$1$1, { value: null, writable: true }), j$1$1(t8, D$1$1, { value: e11._readableState.endEmitted, writable: true }), j$1$1(t8, C$1$1, { value: function(e12, t9) {
        var r9 = n9[A$1$1].read();
        r9 ? (n9[L$1$1] = null, n9[T$1$1] = null, n9[x$1$1] = null, e12(W$1$1(r9, false))) : (n9[T$1$1] = e12, n9[x$1$1] = t9);
      }, writable: true }), t8));
      return n9[L$1$1] = null, O$1$1(e11, function(e12) {
        if (e12 && "ERR_STREAM_PREMATURE_CLOSE" !== e12.code) {
          var t9 = n9[x$1$1];
          return null !== t9 && (n9[L$1$1] = null, n9[T$1$1] = null, n9[x$1$1] = null, t9(e12)), n9[P$1$1] = e12, void 0;
        }
        var r9 = n9[T$1$1];
        null !== r9 && (n9[L$1$1] = null, n9[T$1$1] = null, n9[x$1$1] = null, r9(W$1$1(void 0, true))), n9[D$1$1] = true;
      }), e11.on("readable", q$1$1.bind(null, n9)), n9;
    };
    H$1$1 = {};
    F$1$1 = false;
    V$1$1 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    Y$1$1 = {};
    K$1$1 = false;
    z$1$1 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    Q$1$1 = {};
    X$1$1 = false;
    t$4$1 = J$1$1();
    t$5$1 = ee$1();
    n$2$1 = u$1$12;
    i$e = e$1$12.codes;
    a$p = i$e.ERR_METHOD_NOT_IMPLEMENTED;
    o$s = i$e.ERR_MULTIPLE_CALLBACK;
    s$q = i$e.ERR_TRANSFORM_ALREADY_TRANSFORMING;
    f$2$1 = i$e.ERR_TRANSFORM_WITH_LENGTH_0;
    h$2$1 = t$5$1;
    t$2(u$1$12, h$2$1), u$1$12.prototype.push = function(t8, r9) {
      return this._transformState.needTransform = false, h$2$1.prototype.push.call(this, t8, r9);
    }, u$1$12.prototype._transform = function(t8, r9, e11) {
      e11(new a$p("_transform()"));
    }, u$1$12.prototype._write = function(t8, r9, e11) {
      var n9 = this._transformState;
      if (n9.writecb = e11, n9.writechunk = t8, n9.writeencoding = r9, !n9.transforming) {
        var i8 = this._readableState;
        (n9.needTransform || i8.needReadable || i8.length < i8.highWaterMark) && this._read(i8.highWaterMark);
      }
    }, u$1$12.prototype._read = function(t8) {
      var r9 = this._transformState;
      null === r9.writechunk || r9.transforming ? r9.needTransform = true : (r9.transforming = true, this._transform(r9.writechunk, r9.writeencoding, r9.afterTransform));
    }, u$1$12.prototype._destroy = function(t8, r9) {
      h$2$1.prototype._destroy.call(this, t8, function(t9) {
        r9(t9);
      });
    };
    p$2$1 = n$2$1;
    o$1$12 = i$1$1;
    e$3$1 = p$2$1;
    t$2(i$1$1, e$3$1), i$1$1.prototype._transform = function(r9, t8, o9) {
      o9(null, r9);
    };
    s$1$1 = o$1$12;
    o$2$1 = e$1$12.codes;
    e$4$1 = o$2$1.ERR_MISSING_ARGS;
    f$3$1 = o$2$1.ERR_STREAM_DESTROYED;
    v$2$1 = function() {
      for (var r9 = arguments.length, n9 = new Array(r9), t8 = 0; t8 < r9; t8++)
        n9[t8] = arguments[t8];
      var o9, f9 = p$3$1(n9);
      if (Array.isArray(n9[0]) && (n9 = n9[0]), n9.length < 2)
        throw new e$4$1("streams");
      var i8 = n9.map(function(r10, t9) {
        var e11 = t9 < n9.length - 1;
        return u$2$1(r10, e11, t9 > 0, function(r11) {
          o9 || (o9 = r11), r11 && i8.forEach(a$1$12), e11 || (i8.forEach(a$1$12), f9(o9));
        });
      });
      return n9.reduce(c$2$1);
    };
    d$n = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    l$r = p$r;
    f$u = y.EventEmitter;
    t$2(p$r, f$u), p$r.Readable = t$2$1, p$r.Writable = t$4$1, p$r.Duplex = t$5$1, p$r.Transform = p$2$1, p$r.PassThrough = s$1$1, p$r.finished = n$1$12, p$r.pipeline = v$2$1, p$r.Stream = p$r, p$r.prototype.pipe = function(e11, r9) {
      var t8 = this || d$n;
      function o9(r10) {
        e11.writable && false === e11.write(r10) && t8.pause && t8.pause();
      }
      function i8() {
        t8.readable && t8.resume && t8.resume();
      }
      t8.on("data", o9), e11.on("drain", i8), e11._isStdio || r9 && false === r9.end || (t8.on("end", a8), t8.on("close", s7));
      var n9 = false;
      function a8() {
        n9 || (n9 = true, e11.end());
      }
      function s7() {
        n9 || (n9 = true, "function" == typeof e11.destroy && e11.destroy());
      }
      function m6(e12) {
        if (l8(), 0 === f$u.listenerCount(this || d$n, "error"))
          throw e12;
      }
      function l8() {
        t8.removeListener("data", o9), e11.removeListener("drain", i8), t8.removeListener("end", a8), t8.removeListener("close", s7), t8.removeListener("error", m6), e11.removeListener("error", m6), t8.removeListener("end", l8), t8.removeListener("close", l8), e11.removeListener("close", l8);
      }
      return t8.on("error", m6), e11.on("error", m6), t8.on("end", l8), t8.on("close", l8), e11.on("close", l8), e11.emit("pipe", t8), e11;
    };
    b$i = l$r;
    b$i.Readable;
    b$i.Writable;
    b$i.Duplex;
    b$i.Transform;
    b$i.PassThrough;
    b$i.finished;
    b$i.pipeline;
    b$i.Stream;
    exports$1H = {};
    _dewExec$1G = false;
    _global$o = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$1G = {};
    _dewExec$1F = false;
    exports$1F = {};
    _dewExec$1E = false;
    exports$1E = {};
    _dewExec$1D = false;
    exports$1D = {};
    _dewExec$1C = false;
    _algorithms = {
      "sha224WithRSAEncryption": {
        "sign": "rsa",
        "hash": "sha224",
        "id": "302d300d06096086480165030402040500041c"
      },
      "RSA-SHA224": {
        "sign": "ecdsa/rsa",
        "hash": "sha224",
        "id": "302d300d06096086480165030402040500041c"
      },
      "sha256WithRSAEncryption": {
        "sign": "rsa",
        "hash": "sha256",
        "id": "3031300d060960864801650304020105000420"
      },
      "RSA-SHA256": {
        "sign": "ecdsa/rsa",
        "hash": "sha256",
        "id": "3031300d060960864801650304020105000420"
      },
      "sha384WithRSAEncryption": {
        "sign": "rsa",
        "hash": "sha384",
        "id": "3041300d060960864801650304020205000430"
      },
      "RSA-SHA384": {
        "sign": "ecdsa/rsa",
        "hash": "sha384",
        "id": "3041300d060960864801650304020205000430"
      },
      "sha512WithRSAEncryption": {
        "sign": "rsa",
        "hash": "sha512",
        "id": "3051300d060960864801650304020305000440"
      },
      "RSA-SHA512": {
        "sign": "ecdsa/rsa",
        "hash": "sha512",
        "id": "3051300d060960864801650304020305000440"
      },
      "RSA-SHA1": {
        "sign": "rsa",
        "hash": "sha1",
        "id": "3021300906052b0e03021a05000414"
      },
      "ecdsa-with-SHA1": {
        "sign": "ecdsa",
        "hash": "sha1",
        "id": ""
      },
      "sha256": {
        "sign": "ecdsa",
        "hash": "sha256",
        "id": ""
      },
      "sha224": {
        "sign": "ecdsa",
        "hash": "sha224",
        "id": ""
      },
      "sha384": {
        "sign": "ecdsa",
        "hash": "sha384",
        "id": ""
      },
      "sha512": {
        "sign": "ecdsa",
        "hash": "sha512",
        "id": ""
      },
      "DSA-SHA": {
        "sign": "dsa",
        "hash": "sha1",
        "id": ""
      },
      "DSA-SHA1": {
        "sign": "dsa",
        "hash": "sha1",
        "id": ""
      },
      "DSA": {
        "sign": "dsa",
        "hash": "sha1",
        "id": ""
      },
      "DSA-WITH-SHA224": {
        "sign": "dsa",
        "hash": "sha224",
        "id": ""
      },
      "DSA-SHA224": {
        "sign": "dsa",
        "hash": "sha224",
        "id": ""
      },
      "DSA-WITH-SHA256": {
        "sign": "dsa",
        "hash": "sha256",
        "id": ""
      },
      "DSA-SHA256": {
        "sign": "dsa",
        "hash": "sha256",
        "id": ""
      },
      "DSA-WITH-SHA384": {
        "sign": "dsa",
        "hash": "sha384",
        "id": ""
      },
      "DSA-SHA384": {
        "sign": "dsa",
        "hash": "sha384",
        "id": ""
      },
      "DSA-WITH-SHA512": {
        "sign": "dsa",
        "hash": "sha512",
        "id": ""
      },
      "DSA-SHA512": {
        "sign": "dsa",
        "hash": "sha512",
        "id": ""
      },
      "DSA-RIPEMD160": {
        "sign": "dsa",
        "hash": "rmd160",
        "id": ""
      },
      "ripemd160WithRSA": {
        "sign": "rsa",
        "hash": "rmd160",
        "id": "3021300906052b2403020105000414"
      },
      "RSA-RIPEMD160": {
        "sign": "rsa",
        "hash": "rmd160",
        "id": "3021300906052b2403020105000414"
      },
      "md5WithRSAEncryption": {
        "sign": "rsa",
        "hash": "md5",
        "id": "3020300c06082a864886f70d020505000410"
      },
      "RSA-MD5": {
        "sign": "rsa",
        "hash": "md5",
        "id": "3020300c06082a864886f70d020505000410"
      }
    };
    exports$1C = {};
    _dewExec$1B = false;
    exports$1B = {};
    _dewExec$1A = false;
    exports$1A = {};
    _dewExec$1z = false;
    _global$n = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$1z = {};
    _dewExec$1y = false;
    exports$1y = {};
    _dewExec$1x = false;
    _global$m = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$1x = {};
    _dewExec$1w = false;
    _global$l = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$1w = {};
    _dewExec$1v = false;
    exports$1v = {};
    _dewExec$1u = false;
    exports$1u = {};
    _dewExec$1t = false;
    exports$1t = {};
    _dewExec$1s = false;
    exports$1s = {};
    _dewExec$1r = false;
    exports$1r = {};
    _dewExec$1q = false;
    exports$1q = {};
    _dewExec$1p = false;
    exports$1p = {};
    _dewExec$1o = false;
    exports$1o = {};
    _dewExec$1n = false;
    _global$k = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$1n = {};
    _dewExec$1m = false;
    exports$1m = {};
    _dewExec$1l = false;
    exports$1l = {};
    _dewExec$1k = false;
    exports$1k = {};
    _dewExec$1j = false;
    exports$1j = {};
    _dewExec$1i = false;
    exports$1i = {};
    _dewExec$1h = false;
    exports$1h = {};
    _dewExec$1g = false;
    exports$1g = {};
    _dewExec$1f = false;
    exports$1f = {};
    _dewExec$1e = false;
    _list = {
      "aes-128-ecb": {
        "cipher": "AES",
        "key": 128,
        "iv": 0,
        "mode": "ECB",
        "type": "block"
      },
      "aes-192-ecb": {
        "cipher": "AES",
        "key": 192,
        "iv": 0,
        "mode": "ECB",
        "type": "block"
      },
      "aes-256-ecb": {
        "cipher": "AES",
        "key": 256,
        "iv": 0,
        "mode": "ECB",
        "type": "block"
      },
      "aes-128-cbc": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes-192-cbc": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes-256-cbc": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes128": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes192": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes256": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes-128-cfb": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CFB",
        "type": "stream"
      },
      "aes-192-cfb": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CFB",
        "type": "stream"
      },
      "aes-256-cfb": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CFB",
        "type": "stream"
      },
      "aes-128-cfb8": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CFB8",
        "type": "stream"
      },
      "aes-192-cfb8": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CFB8",
        "type": "stream"
      },
      "aes-256-cfb8": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CFB8",
        "type": "stream"
      },
      "aes-128-cfb1": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CFB1",
        "type": "stream"
      },
      "aes-192-cfb1": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CFB1",
        "type": "stream"
      },
      "aes-256-cfb1": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CFB1",
        "type": "stream"
      },
      "aes-128-ofb": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "OFB",
        "type": "stream"
      },
      "aes-192-ofb": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "OFB",
        "type": "stream"
      },
      "aes-256-ofb": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "OFB",
        "type": "stream"
      },
      "aes-128-ctr": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CTR",
        "type": "stream"
      },
      "aes-192-ctr": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CTR",
        "type": "stream"
      },
      "aes-256-ctr": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CTR",
        "type": "stream"
      },
      "aes-128-gcm": {
        "cipher": "AES",
        "key": 128,
        "iv": 12,
        "mode": "GCM",
        "type": "auth"
      },
      "aes-192-gcm": {
        "cipher": "AES",
        "key": 192,
        "iv": 12,
        "mode": "GCM",
        "type": "auth"
      },
      "aes-256-gcm": {
        "cipher": "AES",
        "key": 256,
        "iv": 12,
        "mode": "GCM",
        "type": "auth"
      }
    };
    exports$1e = {};
    _dewExec$1d = false;
    exports$1d = {};
    _dewExec$1c = false;
    _global$j = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$1c = {};
    _dewExec$1b = false;
    _global$i = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$1b = {};
    _dewExec$1a = false;
    _global$h = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$1a = {};
    _dewExec$19 = false;
    _global$g = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$19 = {};
    _dewExec$18 = false;
    exports$18 = {};
    _dewExec$17 = false;
    _global$f = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$17 = {};
    _dewExec$16 = false;
    _global$e = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$16 = {};
    _dewExec$15 = false;
    exports$15 = {};
    _dewExec$14 = false;
    exports$14 = {};
    _dewExec$13 = false;
    exports$13 = {};
    _dewExec$122 = false;
    module$6 = {
      exports: exports$13
    };
    _global$d = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$12$1 = {};
    _dewExec$11$1 = false;
    module$5 = {
      exports: exports$12$1
    };
    _global$c = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    _global$b = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    exports$11$1 = {};
    indexOf = function(e11, t8) {
      if (e11.indexOf)
        return e11.indexOf(t8);
      for (var n9 = 0; n9 < e11.length; n9++)
        if (e11[n9] === t8)
          return n9;
      return -1;
    };
    Object_keys = function(e11) {
      if (Object.keys)
        return Object.keys(e11);
      var t8 = [];
      for (var n9 in e11)
        t8.push(n9);
      return t8;
    };
    forEach2 = function(e11, t8) {
      if (e11.forEach)
        return e11.forEach(t8);
      for (var n9 = 0; n9 < e11.length; n9++)
        t8(e11[n9], n9, e11);
    };
    defineProp = function() {
      try {
        return Object.defineProperty({}, "_", {}), function(e11, t8, n9) {
          Object.defineProperty(e11, t8, { writable: true, enumerable: false, configurable: true, value: n9 });
        };
      } catch (e11) {
        return function(e12, t8, n9) {
          e12[t8] = n9;
        };
      }
    }();
    globals = ["Array", "Boolean", "Date", "Error", "EvalError", "Function", "Infinity", "JSON", "Math", "NaN", "Number", "Object", "RangeError", "ReferenceError", "RegExp", "String", "SyntaxError", "TypeError", "URIError", "decodeURI", "decodeURIComponent", "encodeURI", "encodeURIComponent", "escape", "eval", "isFinite", "isNaN", "parseFloat", "parseInt", "undefined", "unescape"];
    Context.prototype = {};
    Script = exports$11$1.Script = function(e11) {
      if (!((this || _global$b) instanceof Script))
        return new Script(e11);
      (this || _global$b).code = e11;
    };
    Script.prototype.runInContext = function(e11) {
      if (!(e11 instanceof Context))
        throw new TypeError("needs a 'context' argument.");
      var t8 = document.createElement("iframe");
      t8.style || (t8.style = {}), t8.style.display = "none", document.body.appendChild(t8);
      var n9 = t8.contentWindow, r9 = n9.eval, o9 = n9.execScript;
      !r9 && o9 && (o9.call(n9, "null"), r9 = n9.eval), forEach2(Object_keys(e11), function(t9) {
        n9[t9] = e11[t9];
      }), forEach2(globals, function(t9) {
        e11[t9] && (n9[t9] = e11[t9]);
      });
      var c8 = Object_keys(n9), i8 = r9.call(n9, (this || _global$b).code);
      return forEach2(Object_keys(n9), function(t9) {
        (t9 in e11 || -1 === indexOf(c8, t9)) && (e11[t9] = n9[t9]);
      }), forEach2(globals, function(t9) {
        t9 in e11 || defineProp(e11, t9, n9[t9]);
      }), document.body.removeChild(t8), i8;
    }, Script.prototype.runInThisContext = function() {
      return eval((this || _global$b).code);
    }, Script.prototype.runInNewContext = function(e11) {
      var t8 = Script.createContext(e11), n9 = this.runInContext(t8);
      return e11 && forEach2(Object_keys(t8), function(n10) {
        e11[n10] = t8[n10];
      }), n9;
    }, forEach2(Object_keys(Script.prototype), function(e11) {
      exports$11$1[e11] = Script[e11] = function(t8) {
        var n9 = Script(t8);
        return n9[e11].apply(n9, [].slice.call(arguments, 1));
      };
    }), exports$11$1.isContext = function(e11) {
      return e11 instanceof Context;
    }, exports$11$1.createScript = function(e11) {
      return exports$11$1.Script(e11);
    }, exports$11$1.createContext = Script.createContext = function(e11) {
      var t8 = new Context();
      return "object" == typeof e11 && forEach2(Object_keys(e11), function(n9) {
        t8[n9] = e11[n9];
      }), t8;
    };
    exports$11$1.Script;
    exports$11$1.createContext;
    exports$11$1.createScript;
    exports$11$1.isContext;
    exports$11$1.runInContext;
    exports$11$1.runInNewContext;
    exports$11$1.runInThisContext;
    o5 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    n5 = T;
    t5 = u4.Buffer;
    f5 = o5.crypto || o5.msCrypto;
    a5 = f5 && f5.getRandomValues ? function(e11, r9) {
      if (e11 > 4294967295)
        throw new RangeError("requested too many random bytes");
      var o9 = t5.allocUnsafe(e11);
      if (e11 > 0)
        if (e11 > 65536)
          for (var a8 = 0; a8 < e11; a8 += 65536)
            f5.getRandomValues(o9.slice(a8, a8 + 65536));
        else
          f5.getRandomValues(o9);
      if ("function" == typeof r9)
        return n5.nextTick(function() {
          r9(null, o9);
        });
      return o9;
    } : function() {
      throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11");
    };
    e7 = u4.Buffer;
    o$13 = b$i.Transform;
    t$2(s5, o$13), s5.prototype._transform = function(t8, i8, r9) {
      var e11 = null;
      try {
        this.update(t8, i8);
      } catch (t9) {
        e11 = t9;
      }
      r9(e11);
    }, s5.prototype._flush = function(t8) {
      var i8 = null;
      try {
        this.push(this.digest());
      } catch (t9) {
        i8 = t9;
      }
      t8(i8);
    }, s5.prototype.update = function(t8, i8) {
      if (!function(t9, i9) {
        if (!e7.isBuffer(t9) && "string" != typeof t9)
          throw new TypeError(i9 + " must be a string or a buffer");
      }(t8, "Data"), this._finalized)
        throw new Error("Digest already called");
      e7.isBuffer(t8) || (t8 = e7.from(t8, i8));
      for (var r9 = this._block, o9 = 0; this._blockOffset + t8.length - o9 >= this._blockSize; ) {
        for (var s7 = this._blockOffset; s7 < this._blockSize; )
          r9[s7++] = t8[o9++];
        this._update(), this._blockOffset = 0;
      }
      for (; o9 < t8.length; )
        r9[this._blockOffset++] = t8[o9++];
      for (var f9 = 0, n9 = 8 * t8.length; n9 > 0; ++f9)
        this._length[f9] += n9, (n9 = this._length[f9] / 4294967296 | 0) > 0 && (this._length[f9] -= 4294967296 * n9);
      return this;
    }, s5.prototype._update = function() {
      throw new Error("_update is not implemented");
    }, s5.prototype.digest = function(t8) {
      if (this._finalized)
        throw new Error("Digest already called");
      this._finalized = true;
      var i8 = this._digest();
      void 0 !== t8 && (i8 = i8.toString(t8)), this._block.fill(0), this._blockOffset = 0;
      for (var r9 = 0; r9 < 4; ++r9)
        this._length[r9] = 0;
      return i8;
    }, s5.prototype._digest = function() {
      throw new Error("_digest is not implemented");
    };
    f$12 = s5;
    h5 = t$2;
    r5 = f$12;
    _3 = u4.Buffer;
    e$13 = new Array(16);
    h5(n$13, r5), n$13.prototype._update = function() {
      for (var t8 = e$13, i8 = 0; i8 < 16; ++i8)
        t8[i8] = this._block.readInt32LE(4 * i8);
      var s7 = this._a, h8 = this._b, r9 = this._c, _4 = this._d;
      s7 = f$22(s7, h8, r9, _4, t8[0], 3614090360, 7), _4 = f$22(_4, s7, h8, r9, t8[1], 3905402710, 12), r9 = f$22(r9, _4, s7, h8, t8[2], 606105819, 17), h8 = f$22(h8, r9, _4, s7, t8[3], 3250441966, 22), s7 = f$22(s7, h8, r9, _4, t8[4], 4118548399, 7), _4 = f$22(_4, s7, h8, r9, t8[5], 1200080426, 12), r9 = f$22(r9, _4, s7, h8, t8[6], 2821735955, 17), h8 = f$22(h8, r9, _4, s7, t8[7], 4249261313, 22), s7 = f$22(s7, h8, r9, _4, t8[8], 1770035416, 7), _4 = f$22(_4, s7, h8, r9, t8[9], 2336552879, 12), r9 = f$22(r9, _4, s7, h8, t8[10], 4294925233, 17), h8 = f$22(h8, r9, _4, s7, t8[11], 2304563134, 22), s7 = f$22(s7, h8, r9, _4, t8[12], 1804603682, 7), _4 = f$22(_4, s7, h8, r9, t8[13], 4254626195, 12), r9 = f$22(r9, _4, s7, h8, t8[14], 2792965006, 17), s7 = c5(s7, h8 = f$22(h8, r9, _4, s7, t8[15], 1236535329, 22), r9, _4, t8[1], 4129170786, 5), _4 = c5(_4, s7, h8, r9, t8[6], 3225465664, 9), r9 = c5(r9, _4, s7, h8, t8[11], 643717713, 14), h8 = c5(h8, r9, _4, s7, t8[0], 3921069994, 20), s7 = c5(s7, h8, r9, _4, t8[5], 3593408605, 5), _4 = c5(_4, s7, h8, r9, t8[10], 38016083, 9), r9 = c5(r9, _4, s7, h8, t8[15], 3634488961, 14), h8 = c5(h8, r9, _4, s7, t8[4], 3889429448, 20), s7 = c5(s7, h8, r9, _4, t8[9], 568446438, 5), _4 = c5(_4, s7, h8, r9, t8[14], 3275163606, 9), r9 = c5(r9, _4, s7, h8, t8[3], 4107603335, 14), h8 = c5(h8, r9, _4, s7, t8[8], 1163531501, 20), s7 = c5(s7, h8, r9, _4, t8[13], 2850285829, 5), _4 = c5(_4, s7, h8, r9, t8[2], 4243563512, 9), r9 = c5(r9, _4, s7, h8, t8[7], 1735328473, 14), s7 = a$1(s7, h8 = c5(h8, r9, _4, s7, t8[12], 2368359562, 20), r9, _4, t8[5], 4294588738, 4), _4 = a$1(_4, s7, h8, r9, t8[8], 2272392833, 11), r9 = a$1(r9, _4, s7, h8, t8[11], 1839030562, 16), h8 = a$1(h8, r9, _4, s7, t8[14], 4259657740, 23), s7 = a$1(s7, h8, r9, _4, t8[1], 2763975236, 4), _4 = a$1(_4, s7, h8, r9, t8[4], 1272893353, 11), r9 = a$1(r9, _4, s7, h8, t8[7], 4139469664, 16), h8 = a$1(h8, r9, _4, s7, t8[10], 3200236656, 23), s7 = a$1(s7, h8, r9, _4, t8[13], 681279174, 4), _4 = a$1(_4, s7, h8, r9, t8[0], 3936430074, 11), r9 = a$1(r9, _4, s7, h8, t8[3], 3572445317, 16), h8 = a$1(h8, r9, _4, s7, t8[6], 76029189, 23), s7 = a$1(s7, h8, r9, _4, t8[9], 3654602809, 4), _4 = a$1(_4, s7, h8, r9, t8[12], 3873151461, 11), r9 = a$1(r9, _4, s7, h8, t8[15], 530742520, 16), s7 = l5(s7, h8 = a$1(h8, r9, _4, s7, t8[2], 3299628645, 23), r9, _4, t8[0], 4096336452, 6), _4 = l5(_4, s7, h8, r9, t8[7], 1126891415, 10), r9 = l5(r9, _4, s7, h8, t8[14], 2878612391, 15), h8 = l5(h8, r9, _4, s7, t8[5], 4237533241, 21), s7 = l5(s7, h8, r9, _4, t8[12], 1700485571, 6), _4 = l5(_4, s7, h8, r9, t8[3], 2399980690, 10), r9 = l5(r9, _4, s7, h8, t8[10], 4293915773, 15), h8 = l5(h8, r9, _4, s7, t8[1], 2240044497, 21), s7 = l5(s7, h8, r9, _4, t8[8], 1873313359, 6), _4 = l5(_4, s7, h8, r9, t8[15], 4264355552, 10), r9 = l5(r9, _4, s7, h8, t8[6], 2734768916, 15), h8 = l5(h8, r9, _4, s7, t8[13], 1309151649, 21), s7 = l5(s7, h8, r9, _4, t8[4], 4149444226, 6), _4 = l5(_4, s7, h8, r9, t8[11], 3174756917, 10), r9 = l5(r9, _4, s7, h8, t8[2], 718787259, 15), h8 = l5(h8, r9, _4, s7, t8[9], 3951481745, 21), this._a = this._a + s7 | 0, this._b = this._b + h8 | 0, this._c = this._c + r9 | 0, this._d = this._d + _4 | 0;
    }, n$13.prototype._digest = function() {
      this._block[this._blockOffset++] = 128, this._blockOffset > 56 && (this._block.fill(0, this._blockOffset, 64), this._update(), this._blockOffset = 0), this._block.fill(0, this._blockOffset, 56), this._block.writeUInt32LE(this._length[0], 56), this._block.writeUInt32LE(this._length[1], 60), this._update();
      var t8 = _3.allocUnsafe(16);
      return t8.writeInt32LE(this._a, 0), t8.writeInt32LE(this._b, 4), t8.writeInt32LE(this._c, 8), t8.writeInt32LE(this._d, 12), t8;
    };
    u5 = n$13;
    h$1 = e$1$1.Buffer;
    _$1 = t$2;
    r$12 = f$12;
    e$2 = new Array(16);
    n$2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];
    o$3 = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];
    f$3 = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];
    c$13 = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];
    a$22 = [0, 1518500249, 1859775393, 2400959708, 2840853838];
    l$13 = [1352829926, 1548603684, 1836072691, 2053994217, 0];
    _$1(u$13, r$12), u$13.prototype._update = function() {
      for (var t8 = e$2, i8 = 0; i8 < 16; ++i8)
        t8[i8] = this._block.readInt32LE(4 * i8);
      for (var s7 = 0 | this._a, h8 = 0 | this._b, _4 = 0 | this._c, r9 = 0 | this._d, u8 = 0 | this._e, I4 = 0 | this._a, L4 = 0 | this._b, v6 = 0 | this._c, m6 = 0 | this._d, O5 = 0 | this._e, g5 = 0; g5 < 80; g5 += 1) {
        var y6, U4;
        g5 < 16 ? (y6 = d4(s7, h8, _4, r9, u8, t8[n$2[g5]], a$22[0], f$3[g5]), U4 = E3(I4, L4, v6, m6, O5, t8[o$3[g5]], l$13[0], c$13[g5])) : g5 < 32 ? (y6 = k3(s7, h8, _4, r9, u8, t8[n$2[g5]], a$22[1], f$3[g5]), U4 = w3(I4, L4, v6, m6, O5, t8[o$3[g5]], l$13[1], c$13[g5])) : g5 < 48 ? (y6 = p5(s7, h8, _4, r9, u8, t8[n$2[g5]], a$22[2], f$3[g5]), U4 = p5(I4, L4, v6, m6, O5, t8[o$3[g5]], l$13[2], c$13[g5])) : g5 < 64 ? (y6 = w3(s7, h8, _4, r9, u8, t8[n$2[g5]], a$22[3], f$3[g5]), U4 = k3(I4, L4, v6, m6, O5, t8[o$3[g5]], l$13[3], c$13[g5])) : (y6 = E3(s7, h8, _4, r9, u8, t8[n$2[g5]], a$22[4], f$3[g5]), U4 = d4(I4, L4, v6, m6, O5, t8[o$3[g5]], l$13[4], c$13[g5])), s7 = u8, u8 = r9, r9 = b3(_4, 10), _4 = h8, h8 = y6, I4 = O5, O5 = m6, m6 = b3(v6, 10), v6 = L4, L4 = U4;
      }
      var x4 = this._b + _4 + m6 | 0;
      this._b = this._c + r9 + O5 | 0, this._c = this._d + u8 + I4 | 0, this._d = this._e + s7 + L4 | 0, this._e = this._a + h8 + v6 | 0, this._a = x4;
    }, u$13.prototype._digest = function() {
      this._block[this._blockOffset++] = 128, this._blockOffset > 56 && (this._block.fill(0, this._blockOffset, 64), this._update(), this._blockOffset = 0), this._block.fill(0, this._blockOffset, 56), this._block.writeUInt32LE(this._length[0], 56), this._block.writeUInt32LE(this._length[1], 60), this._update();
      var t8 = h$1.alloc ? h$1.alloc(20) : new h$1(20);
      return t8.writeInt32LE(this._a, 0), t8.writeInt32LE(this._b, 4), t8.writeInt32LE(this._c, 8), t8.writeInt32LE(this._d, 12), t8.writeInt32LE(this._e, 16), t8;
    };
    I3 = u$13;
    s$12 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    h$2 = u4.Buffer;
    e$3.prototype.update = function(t8, i8) {
      "string" == typeof t8 && (i8 = i8 || "utf8", t8 = h$2.from(t8, i8));
      for (var e11 = (this || s$12)._block, _4 = (this || s$12)._blockSize, n9 = t8.length, r9 = (this || s$12)._len, o9 = 0; o9 < n9; ) {
        for (var f9 = r9 % _4, l8 = Math.min(n9 - o9, _4 - f9), a8 = 0; a8 < l8; a8++)
          e11[f9 + a8] = t8[o9 + a8];
        o9 += l8, (r9 += l8) % _4 == 0 && this._update(e11);
      }
      return (this || s$12)._len += n9, this || s$12;
    }, e$3.prototype.digest = function(t8) {
      var i8 = (this || s$12)._len % (this || s$12)._blockSize;
      (this || s$12)._block[i8] = 128, (this || s$12)._block.fill(0, i8 + 1), i8 >= (this || s$12)._finalSize && (this._update((this || s$12)._block), (this || s$12)._block.fill(0));
      var h8 = 8 * (this || s$12)._len;
      if (h8 <= 4294967295)
        (this || s$12)._block.writeUInt32BE(h8, (this || s$12)._blockSize - 4);
      else {
        var e11 = (4294967295 & h8) >>> 0, _4 = (h8 - e11) / 4294967296;
        (this || s$12)._block.writeUInt32BE(_4, (this || s$12)._blockSize - 8), (this || s$12)._block.writeUInt32BE(e11, (this || s$12)._blockSize - 4);
      }
      this._update((this || s$12)._block);
      var n9 = this._hash();
      return t8 ? n9.toString(t8) : n9;
    }, e$3.prototype._update = function() {
      throw new Error("_update must be implemented by subclass");
    };
    _$2 = e$3;
    n$3 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    r$2 = t$2;
    o$4 = _$2;
    f$4 = u4.Buffer;
    l$2 = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298];
    a$3 = new Array(64);
    r$2(u$22, o$4), u$22.prototype.init = function() {
      return (this || n$3)._a = 1779033703, (this || n$3)._b = 3144134277, (this || n$3)._c = 1013904242, (this || n$3)._d = 2773480762, (this || n$3)._e = 1359893119, (this || n$3)._f = 2600822924, (this || n$3)._g = 528734635, (this || n$3)._h = 1541459225, this || n$3;
    }, u$22.prototype._update = function(t8) {
      for (var i8, s7 = (this || n$3)._w, h8 = 0 | (this || n$3)._a, e11 = 0 | (this || n$3)._b, _4 = 0 | (this || n$3)._c, r9 = 0 | (this || n$3)._d, o9 = 0 | (this || n$3)._e, f9 = 0 | (this || n$3)._f, a8 = 0 | (this || n$3)._g, u8 = 0 | (this || n$3)._h, w4 = 0; w4 < 16; ++w4)
        s7[w4] = t8.readInt32BE(4 * w4);
      for (; w4 < 64; ++w4)
        s7[w4] = 0 | (((i8 = s7[w4 - 2]) >>> 17 | i8 << 15) ^ (i8 >>> 19 | i8 << 13) ^ i8 >>> 10) + s7[w4 - 7] + k$1(s7[w4 - 15]) + s7[w4 - 16];
      for (var g5 = 0; g5 < 64; ++g5) {
        var B4 = u8 + d$1(o9) + c$2(o9, f9, a8) + l$2[g5] + s7[g5] | 0, v6 = p$1(h8) + b$1(h8, e11, _4) | 0;
        u8 = a8, a8 = f9, f9 = o9, o9 = r9 + B4 | 0, r9 = _4, _4 = e11, e11 = h8, h8 = B4 + v6 | 0;
      }
      (this || n$3)._a = h8 + (this || n$3)._a | 0, (this || n$3)._b = e11 + (this || n$3)._b | 0, (this || n$3)._c = _4 + (this || n$3)._c | 0, (this || n$3)._d = r9 + (this || n$3)._d | 0, (this || n$3)._e = o9 + (this || n$3)._e | 0, (this || n$3)._f = f9 + (this || n$3)._f | 0, (this || n$3)._g = a8 + (this || n$3)._g | 0, (this || n$3)._h = u8 + (this || n$3)._h | 0;
    }, u$22.prototype._hash = function() {
      var t8 = f$4.allocUnsafe(32);
      return t8.writeInt32BE((this || n$3)._a, 0), t8.writeInt32BE((this || n$3)._b, 4), t8.writeInt32BE((this || n$3)._c, 8), t8.writeInt32BE((this || n$3)._d, 12), t8.writeInt32BE((this || n$3)._e, 16), t8.writeInt32BE((this || n$3)._f, 20), t8.writeInt32BE((this || n$3)._g, 24), t8.writeInt32BE((this || n$3)._h, 28), t8;
    };
    w$1 = u$22;
    _$3 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    e$4 = t$2;
    n$4 = _$2;
    r$3 = u4.Buffer;
    l$3 = [1518500249, 1859775393, -1894007588, -899497514];
    o$5 = new Array(80);
    e$4(f$5, n$4), f$5.prototype.init = function() {
      return (this || _$3)._a = 1732584193, (this || _$3)._b = 4023233417, (this || _$3)._c = 2562383102, (this || _$3)._d = 271733878, (this || _$3)._e = 3285377520, this || _$3;
    }, f$5.prototype._update = function(t8) {
      for (var i8, h8 = (this || _$3)._w, s7 = 0 | (this || _$3)._a, e11 = 0 | (this || _$3)._b, n9 = 0 | (this || _$3)._c, r9 = 0 | (this || _$3)._d, o9 = 0 | (this || _$3)._e, f9 = 0; f9 < 16; ++f9)
        h8[f9] = t8.readInt32BE(4 * f9);
      for (; f9 < 80; ++f9)
        h8[f9] = h8[f9 - 3] ^ h8[f9 - 8] ^ h8[f9 - 14] ^ h8[f9 - 16];
      for (var c8 = 0; c8 < 80; ++c8) {
        var d6 = ~~(c8 / 20), p8 = 0 | ((i8 = s7) << 5 | i8 >>> 27) + u$3(d6, e11, n9, r9) + o9 + h8[c8] + l$3[d6];
        o9 = r9, r9 = n9, n9 = a$4(e11), e11 = s7, s7 = p8;
      }
      (this || _$3)._a = s7 + (this || _$3)._a | 0, (this || _$3)._b = e11 + (this || _$3)._b | 0, (this || _$3)._c = n9 + (this || _$3)._c | 0, (this || _$3)._d = r9 + (this || _$3)._d | 0, (this || _$3)._e = o9 + (this || _$3)._e | 0;
    }, f$5.prototype._hash = function() {
      var t8 = r$3.allocUnsafe(20);
      return t8.writeInt32BE(0 | (this || _$3)._a, 0), t8.writeInt32BE(0 | (this || _$3)._b, 4), t8.writeInt32BE(0 | (this || _$3)._c, 8), t8.writeInt32BE(0 | (this || _$3)._d, 12), t8.writeInt32BE(0 | (this || _$3)._e, 16), t8;
    };
    c$3 = f$5;
    d$2 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    p$2 = t$2;
    b$2 = _$2;
    w$2 = u4.Buffer;
    g3 = [1518500249, 1859775393, -1894007588, -899497514];
    B3 = new Array(80);
    p$2(y4, b$2), y4.prototype.init = function() {
      return (this || d$2)._a = 1732584193, (this || d$2)._b = 4023233417, (this || d$2)._c = 2562383102, (this || d$2)._d = 271733878, (this || d$2)._e = 3285377520, this || d$2;
    }, y4.prototype._update = function(t8) {
      for (var i8, h8 = (this || d$2)._w, s7 = 0 | (this || d$2)._a, _4 = 0 | (this || d$2)._b, e11 = 0 | (this || d$2)._c, n9 = 0 | (this || d$2)._d, r9 = 0 | (this || d$2)._e, l8 = 0; l8 < 16; ++l8)
        h8[l8] = t8.readInt32BE(4 * l8);
      for (; l8 < 80; ++l8)
        h8[l8] = (i8 = h8[l8 - 3] ^ h8[l8 - 8] ^ h8[l8 - 14] ^ h8[l8 - 16]) << 1 | i8 >>> 31;
      for (var o9 = 0; o9 < 80; ++o9) {
        var f9 = ~~(o9 / 20), a8 = E$1(s7) + v4(f9, _4, e11, n9) + r9 + h8[o9] + g3[f9] | 0;
        r9 = n9, n9 = e11, e11 = I$1(_4), _4 = s7, s7 = a8;
      }
      (this || d$2)._a = s7 + (this || d$2)._a | 0, (this || d$2)._b = _4 + (this || d$2)._b | 0, (this || d$2)._c = e11 + (this || d$2)._c | 0, (this || d$2)._d = n9 + (this || d$2)._d | 0, (this || d$2)._e = r9 + (this || d$2)._e | 0;
    }, y4.prototype._hash = function() {
      var t8 = w$2.allocUnsafe(20);
      return t8.writeInt32BE(0 | (this || d$2)._a, 0), t8.writeInt32BE(0 | (this || d$2)._b, 4), t8.writeInt32BE(0 | (this || d$2)._c, 8), t8.writeInt32BE(0 | (this || d$2)._d, 12), t8.writeInt32BE(0 | (this || d$2)._e, 16), t8;
    };
    T4 = y4;
    m4 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    A3 = t$2;
    U3 = w$1;
    x3 = _$2;
    j3 = u4.Buffer;
    q2 = new Array(64);
    A3(C3, U3), C3.prototype.init = function() {
      return (this || m4)._a = 3238371032, (this || m4)._b = 914150663, (this || m4)._c = 812702999, (this || m4)._d = 4144912697, (this || m4)._e = 4290775857, (this || m4)._f = 1750603025, (this || m4)._g = 1694076839, (this || m4)._h = 3204075428, this || m4;
    }, C3.prototype._hash = function() {
      var t8 = j3.allocUnsafe(28);
      return t8.writeInt32BE((this || m4)._a, 0), t8.writeInt32BE((this || m4)._b, 4), t8.writeInt32BE((this || m4)._c, 8), t8.writeInt32BE((this || m4)._d, 12), t8.writeInt32BE((this || m4)._e, 16), t8.writeInt32BE((this || m4)._f, 20), t8.writeInt32BE((this || m4)._g, 24), t8;
    };
    L3 = C3;
    k$2 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    z3 = t$2;
    D3 = _$2;
    F3 = u4.Buffer;
    G2 = [1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591];
    H2 = new Array(160);
    z3(J2, D3), J2.prototype.init = function() {
      return (this || k$2)._ah = 1779033703, (this || k$2)._bh = 3144134277, (this || k$2)._ch = 1013904242, (this || k$2)._dh = 2773480762, (this || k$2)._eh = 1359893119, (this || k$2)._fh = 2600822924, (this || k$2)._gh = 528734635, (this || k$2)._hh = 1541459225, (this || k$2)._al = 4089235720, (this || k$2)._bl = 2227873595, (this || k$2)._cl = 4271175723, (this || k$2)._dl = 1595750129, (this || k$2)._el = 2917565137, (this || k$2)._fl = 725511199, (this || k$2)._gl = 4215389547, (this || k$2)._hl = 327033209, this || k$2;
    }, J2.prototype._update = function(t8) {
      for (var i8 = (this || k$2)._w, h8 = 0 | (this || k$2)._ah, s7 = 0 | (this || k$2)._bh, _4 = 0 | (this || k$2)._ch, e11 = 0 | (this || k$2)._dh, n9 = 0 | (this || k$2)._eh, r9 = 0 | (this || k$2)._fh, l8 = 0 | (this || k$2)._gh, o9 = 0 | (this || k$2)._hh, f9 = 0 | (this || k$2)._al, a8 = 0 | (this || k$2)._bl, u8 = 0 | (this || k$2)._cl, c8 = 0 | (this || k$2)._dl, d6 = 0 | (this || k$2)._el, p8 = 0 | (this || k$2)._fl, b5 = 0 | (this || k$2)._gl, w4 = 0 | (this || k$2)._hl, g5 = 0; g5 < 32; g5 += 2)
        i8[g5] = t8.readInt32BE(4 * g5), i8[g5 + 1] = t8.readInt32BE(4 * g5 + 4);
      for (; g5 < 160; g5 += 2) {
        var B4 = i8[g5 - 30], y6 = i8[g5 - 30 + 1], E4 = P3(B4, y6), I4 = Q2(y6, B4), v6 = R3(B4 = i8[g5 - 4], y6 = i8[g5 - 4 + 1]), T5 = S3(y6, B4), m6 = i8[g5 - 14], A4 = i8[g5 - 14 + 1], U4 = i8[g5 - 32], x4 = i8[g5 - 32 + 1], j4 = I4 + A4 | 0, q3 = E4 + m6 + V2(j4, I4) | 0;
        q3 = (q3 = q3 + v6 + V2(j4 = j4 + T5 | 0, T5) | 0) + U4 + V2(j4 = j4 + x4 | 0, x4) | 0, i8[g5] = q3, i8[g5 + 1] = j4;
      }
      for (var C4 = 0; C4 < 160; C4 += 2) {
        q3 = i8[C4], j4 = i8[C4 + 1];
        var L4 = M3(h8, s7, _4), z5 = M3(f9, a8, u8), D4 = N3(h8, f9), F4 = N3(f9, h8), H3 = O3(n9, d6), J3 = O3(d6, n9), W3 = G2[C4], X3 = G2[C4 + 1], Y4 = K2(n9, r9, l8), Z3 = K2(d6, p8, b5), $3 = w4 + J3 | 0, tt2 = o9 + H3 + V2($3, w4) | 0;
        tt2 = (tt2 = (tt2 = tt2 + Y4 + V2($3 = $3 + Z3 | 0, Z3) | 0) + W3 + V2($3 = $3 + X3 | 0, X3) | 0) + q3 + V2($3 = $3 + j4 | 0, j4) | 0;
        var it2 = F4 + z5 | 0, ht2 = D4 + L4 + V2(it2, F4) | 0;
        o9 = l8, w4 = b5, l8 = r9, b5 = p8, r9 = n9, p8 = d6, n9 = e11 + tt2 + V2(d6 = c8 + $3 | 0, c8) | 0, e11 = _4, c8 = u8, _4 = s7, u8 = a8, s7 = h8, a8 = f9, h8 = tt2 + ht2 + V2(f9 = $3 + it2 | 0, $3) | 0;
      }
      (this || k$2)._al = (this || k$2)._al + f9 | 0, (this || k$2)._bl = (this || k$2)._bl + a8 | 0, (this || k$2)._cl = (this || k$2)._cl + u8 | 0, (this || k$2)._dl = (this || k$2)._dl + c8 | 0, (this || k$2)._el = (this || k$2)._el + d6 | 0, (this || k$2)._fl = (this || k$2)._fl + p8 | 0, (this || k$2)._gl = (this || k$2)._gl + b5 | 0, (this || k$2)._hl = (this || k$2)._hl + w4 | 0, (this || k$2)._ah = (this || k$2)._ah + h8 + V2((this || k$2)._al, f9) | 0, (this || k$2)._bh = (this || k$2)._bh + s7 + V2((this || k$2)._bl, a8) | 0, (this || k$2)._ch = (this || k$2)._ch + _4 + V2((this || k$2)._cl, u8) | 0, (this || k$2)._dh = (this || k$2)._dh + e11 + V2((this || k$2)._dl, c8) | 0, (this || k$2)._eh = (this || k$2)._eh + n9 + V2((this || k$2)._el, d6) | 0, (this || k$2)._fh = (this || k$2)._fh + r9 + V2((this || k$2)._fl, p8) | 0, (this || k$2)._gh = (this || k$2)._gh + l8 + V2((this || k$2)._gl, b5) | 0, (this || k$2)._hh = (this || k$2)._hh + o9 + V2((this || k$2)._hl, w4) | 0;
    }, J2.prototype._hash = function() {
      var t8 = F3.allocUnsafe(64);
      function i8(i9, h8, s7) {
        t8.writeInt32BE(i9, s7), t8.writeInt32BE(h8, s7 + 4);
      }
      return i8((this || k$2)._ah, (this || k$2)._al, 0), i8((this || k$2)._bh, (this || k$2)._bl, 8), i8((this || k$2)._ch, (this || k$2)._cl, 16), i8((this || k$2)._dh, (this || k$2)._dl, 24), i8((this || k$2)._eh, (this || k$2)._el, 32), i8((this || k$2)._fh, (this || k$2)._fl, 40), i8((this || k$2)._gh, (this || k$2)._gl, 48), i8((this || k$2)._hh, (this || k$2)._hl, 56), t8;
    };
    W2 = J2;
    X2 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    Y3 = t$2;
    Z2 = W2;
    $2 = _$2;
    tt = u4.Buffer;
    it = new Array(160);
    Y3(ht, Z2), ht.prototype.init = function() {
      return (this || X2)._ah = 3418070365, (this || X2)._bh = 1654270250, (this || X2)._ch = 2438529370, (this || X2)._dh = 355462360, (this || X2)._eh = 1731405415, (this || X2)._fh = 2394180231, (this || X2)._gh = 3675008525, (this || X2)._hh = 1203062813, (this || X2)._al = 3238371032, (this || X2)._bl = 914150663, (this || X2)._cl = 812702999, (this || X2)._dl = 4144912697, (this || X2)._el = 4290775857, (this || X2)._fl = 1750603025, (this || X2)._gl = 1694076839, (this || X2)._hl = 3204075428, this || X2;
    }, ht.prototype._hash = function() {
      var t8 = tt.allocUnsafe(48);
      function i8(i9, h8, s7) {
        t8.writeInt32BE(i9, s7), t8.writeInt32BE(h8, s7 + 4);
      }
      return i8((this || X2)._ah, (this || X2)._al, 0), i8((this || X2)._bh, (this || X2)._bl, 8), i8((this || X2)._ch, (this || X2)._cl, 16), i8((this || X2)._dh, (this || X2)._dl, 24), i8((this || X2)._eh, (this || X2)._el, 32), i8((this || X2)._fh, (this || X2)._fl, 40), t8;
    };
    _t = ht;
    et = { exports: st = {} };
    (st = et.exports = function(t8) {
      t8 = t8.toLowerCase();
      var i8 = st[t8];
      if (!i8)
        throw new Error(t8 + " is not supported (we accept pull requests)");
      return new i8();
    }).sha = c$3, st.sha1 = T4, st.sha224 = L3, st.sha256 = w$1, st.sha384 = _t, st.sha512 = W2;
    nt = et.exports;
    e$5 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    n$5 = u4.Buffer;
    s$2 = b$i.Transform;
    h$3 = e$12.StringDecoder;
    t$2(a$5, s$2), a$5.prototype.update = function(t8, i8, r9) {
      "string" == typeof t8 && (t8 = n$5.from(t8, i8));
      var o9 = this._update(t8);
      return (this || e$5).hashMode ? this || e$5 : (r9 && (o9 = this._toString(o9, r9)), o9);
    }, a$5.prototype.setAutoPadding = function() {
    }, a$5.prototype.getAuthTag = function() {
      throw new Error("trying to get auth tag in unsupported state");
    }, a$5.prototype.setAuthTag = function() {
      throw new Error("trying to set auth tag in unsupported state");
    }, a$5.prototype.setAAD = function() {
      throw new Error("trying to set aad in unsupported state");
    }, a$5.prototype._transform = function(t8, i8, r9) {
      var o9;
      try {
        (this || e$5).hashMode ? this._update(t8) : this.push(this._update(t8));
      } catch (t9) {
        o9 = t9;
      } finally {
        r9(o9);
      }
    }, a$5.prototype._flush = function(t8) {
      var i8;
      try {
        this.push(this.__final());
      } catch (t9) {
        i8 = t9;
      }
      t8(i8);
    }, a$5.prototype._finalOrDigest = function(t8) {
      var i8 = this.__final() || n$5.alloc(0);
      return t8 && (i8 = this._toString(i8, t8, true)), i8;
    }, a$5.prototype._toString = function(t8, i8, r9) {
      if ((this || e$5)._decoder || ((this || e$5)._decoder = new h$3(i8), (this || e$5)._encoding = i8), (this || e$5)._encoding !== i8)
        throw new Error("can't switch encodings");
      var o9 = (this || e$5)._decoder.write(t8);
      return r9 && (o9 += (this || e$5)._decoder.end()), o9;
    };
    f$6 = a$5;
    m$1 = u5;
    n$6 = I3;
    p$3 = nt;
    s$3 = f$6;
    t$2(a$6, s$3), a$6.prototype._update = function(t8) {
      this._hash.update(t8);
    }, a$6.prototype._final = function() {
      return this._hash.digest();
    };
    h$4 = function(t8) {
      return "md5" === (t8 = t8.toLowerCase()) ? new m$1() : "rmd160" === t8 || "ripemd160" === t8 ? new n$6() : new a$6(p$3(t8));
    };
    e$6 = u5;
    r$4 = function(t8) {
      return new e$6().update(t8).digest();
    };
    o$6 = t$2;
    h$5 = u4.Buffer;
    n$7 = f$6;
    p$4 = h$5.alloc(128);
    o$6(f$7, n$7), f$7.prototype._update = function(t8) {
      this._hash.push(t8);
    }, f$7.prototype._final = function() {
      var t8 = this._alg(h$5.concat(this._hash));
      return this._alg(h$5.concat([this._opad, t8]));
    };
    l$4 = t$2;
    d$3 = f$7;
    c$4 = f$6;
    _$4 = u4.Buffer;
    m$2 = r$4;
    u$4 = I3;
    g$1 = nt;
    v$1 = _$4.alloc(128);
    l$4(y$1, c$4), y$1.prototype._update = function(t8) {
      this._hash.update(t8);
    }, y$1.prototype._final = function() {
      var t8 = this._hash.digest();
      return ("rmd160" === this._alg ? new u$4() : g$1(this._alg)).update(this._opad).update(t8).digest();
    };
    w$3 = function(t8, a8) {
      return "rmd160" === (t8 = t8.toLowerCase()) || "ripemd160" === t8 ? new y$1("rmd160", a8) : "md5" === t8 ? new d$3(m$2, a8) : new y$1(t8, a8);
    };
    s$4 = { sha224WithRSAEncryption: { sign: "rsa", hash: "sha224", id: "302d300d06096086480165030402040500041c" }, "RSA-SHA224": { sign: "ecdsa/rsa", hash: "sha224", id: "302d300d06096086480165030402040500041c" }, sha256WithRSAEncryption: { sign: "rsa", hash: "sha256", id: "3031300d060960864801650304020105000420" }, "RSA-SHA256": { sign: "ecdsa/rsa", hash: "sha256", id: "3031300d060960864801650304020105000420" }, sha384WithRSAEncryption: { sign: "rsa", hash: "sha384", id: "3041300d060960864801650304020205000430" }, "RSA-SHA384": { sign: "ecdsa/rsa", hash: "sha384", id: "3041300d060960864801650304020205000430" }, sha512WithRSAEncryption: { sign: "rsa", hash: "sha512", id: "3051300d060960864801650304020305000440" }, "RSA-SHA512": { sign: "ecdsa/rsa", hash: "sha512", id: "3051300d060960864801650304020305000440" }, "RSA-SHA1": { sign: "rsa", hash: "sha1", id: "3021300906052b0e03021a05000414" }, "ecdsa-with-SHA1": { sign: "ecdsa", hash: "sha1", id: "" }, sha256: { sign: "ecdsa", hash: "sha256", id: "" }, sha224: { sign: "ecdsa", hash: "sha224", id: "" }, sha384: { sign: "ecdsa", hash: "sha384", id: "" }, sha512: { sign: "ecdsa", hash: "sha512", id: "" }, "DSA-SHA": { sign: "dsa", hash: "sha1", id: "" }, "DSA-SHA1": { sign: "dsa", hash: "sha1", id: "" }, DSA: { sign: "dsa", hash: "sha1", id: "" }, "DSA-WITH-SHA224": { sign: "dsa", hash: "sha224", id: "" }, "DSA-SHA224": { sign: "dsa", hash: "sha224", id: "" }, "DSA-WITH-SHA256": { sign: "dsa", hash: "sha256", id: "" }, "DSA-SHA256": { sign: "dsa", hash: "sha256", id: "" }, "DSA-WITH-SHA384": { sign: "dsa", hash: "sha384", id: "" }, "DSA-SHA384": { sign: "dsa", hash: "sha384", id: "" }, "DSA-WITH-SHA512": { sign: "dsa", hash: "sha512", id: "" }, "DSA-SHA512": { sign: "dsa", hash: "sha512", id: "" }, "DSA-RIPEMD160": { sign: "dsa", hash: "rmd160", id: "" }, ripemd160WithRSA: { sign: "rsa", hash: "rmd160", id: "3021300906052b2403020105000414" }, "RSA-RIPEMD160": { sign: "rsa", hash: "rmd160", id: "3021300906052b2403020105000414" }, md5WithRSAEncryption: { sign: "rsa", hash: "md5", id: "3020300c06082a864886f70d020505000410" }, "RSA-MD5": { sign: "rsa", hash: "md5", id: "3020300c06082a864886f70d020505000410" } };
    f$8 = e$1$1.Buffer;
    a$7 = Math.pow(2, 30) - 1;
    h$6 = function(r9, e11, t8, n9) {
      if (s$5(r9, "Password"), s$5(e11, "Salt"), "number" != typeof t8)
        throw new TypeError("Iterations not a number");
      if (t8 < 0)
        throw new TypeError("Bad iterations");
      if ("number" != typeof n9)
        throw new TypeError("Key length not a number");
      if (n9 < 0 || n9 > a$7 || n9 != n9)
        throw new TypeError("Bad key length");
    };
    c$5 = T;
    c$5.browser ? u$5 = "utf-8" : u$5 = parseInt(c$5.version.split(".")[0].slice(1), 10) >= 6 ? "utf-8" : "binary";
    l$5 = u$5;
    p$5 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    d$4 = r$4;
    m$3 = I3;
    y$2 = nt;
    b$3 = h$6;
    v$2 = l$5;
    w$4 = u4.Buffer;
    g$2 = w$4.alloc(128);
    B$1 = { md5: 16, sha1: 20, sha224: 28, sha256: 32, sha384: 48, sha512: 64, rmd160: 20, ripemd160: 20 };
    T$1.prototype.run = function(r9, e11) {
      return r9.copy(e11, (this || p$5).blocksize), this.hash(e11).copy((this || p$5).opad, (this || p$5).blocksize), this.hash((this || p$5).opad);
    };
    S$1 = function(r9, e11, t8, n9, o9) {
      b$3(r9, e11, t8, n9), w$4.isBuffer(r9) || (r9 = w$4.from(r9, v$2)), w$4.isBuffer(e11) || (e11 = w$4.from(e11, v$2));
      var i8 = new T$1(o9 = o9 || "sha1", r9, e11.length), f9 = w$4.allocUnsafe(n9), a8 = w$4.allocUnsafe(e11.length + 4);
      e11.copy(a8, 0, 0, e11.length);
      for (var s7 = 0, u8 = B$1[o9], h8 = Math.ceil(n9 / u8), c8 = 1; c8 <= h8; c8++) {
        a8.writeUInt32BE(c8, e11.length);
        for (var l8 = i8.run(a8, i8.ipad1), p8 = l8, d6 = 1; d6 < t8; d6++) {
          p8 = i8.run(p8, i8.ipad2);
          for (var m6 = 0; m6 < u8; m6++)
            l8[m6] ^= p8[m6];
        }
        l8.copy(f9, s7), s7 += u8;
      }
      return f9;
    };
    A$1 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    H$1 = T;
    E$2 = h$6;
    P$1 = l$5;
    U$1 = S$1;
    K$1 = u4.Buffer;
    x$1 = A$1.crypto && A$1.crypto.subtle;
    z$1 = { sha: "SHA-1", "sha-1": "SHA-1", sha1: "SHA-1", sha256: "SHA-256", "sha-256": "SHA-256", sha384: "SHA-384", "sha-384": "SHA-384", "sha-512": "SHA-512", sha512: "SHA-512" };
    I$2 = [];
    F$1 = function(r9, e11, t8, n9, o9, i8) {
      "function" == typeof o9 && (i8 = o9, o9 = void 0);
      var f9 = z$1[(o9 = o9 || "sha1").toLowerCase()];
      if (!f9 || "function" != typeof A$1.Promise)
        return H$1.nextTick(function() {
          var f10;
          try {
            f10 = U$1(r9, e11, t8, n9, o9);
          } catch (r10) {
            return i8(r10);
          }
          i8(null, f10);
        });
      if (E$2(r9, e11, t8, n9), "function" != typeof i8)
        throw new Error("No callback provided to pbkdf2");
      K$1.isBuffer(r9) || (r9 = K$1.from(r9, P$1)), K$1.isBuffer(e11) || (e11 = K$1.from(e11, P$1)), function(r10, e12) {
        r10.then(function(r11) {
          H$1.nextTick(function() {
            e12(null, r11);
          });
        }, function(r11) {
          H$1.nextTick(function() {
            e12(r11);
          });
        });
      }(function(r10) {
        if (A$1.process && !A$1.process.browser)
          return Promise.resolve(false);
        if (!x$1 || !x$1.importKey || !x$1.deriveBits)
          return Promise.resolve(false);
        if (void 0 !== I$2[r10])
          return I$2[r10];
        var e12 = D$1(k$3 = k$3 || K$1.alloc(8), k$3, 10, 128, r10).then(function() {
          return true;
        }).catch(function() {
          return false;
        });
        return I$2[r10] = e12, e12;
      }(f9).then(function(i9) {
        return i9 ? D$1(r9, e11, t8, n9, f9) : U$1(r9, e11, t8, n9, o9);
      }), i8);
    };
    M$1 = {};
    M$1.pbkdf2 = F$1, M$1.pbkdf2Sync = S$1;
    r$5 = e$7, e$7.equal = function(r9, e11, o9) {
      if (r9 != e11)
        throw new Error(o9 || "Assertion failed: " + r9 + " != " + e11);
    };
    o$7 = r$5;
    r$6 = { readUInt32BE: function(t8, e11) {
      return (t8[0 + e11] << 24 | t8[1 + e11] << 16 | t8[2 + e11] << 8 | t8[3 + e11]) >>> 0;
    }, writeUInt32BE: function(t8, e11, r9) {
      t8[0 + r9] = e11 >>> 24, t8[1 + r9] = e11 >>> 16 & 255, t8[2 + r9] = e11 >>> 8 & 255, t8[3 + r9] = 255 & e11;
    }, ip: function(t8, e11, r9, i8) {
      for (var n9 = 0, f9 = 0, o9 = 6; o9 >= 0; o9 -= 2) {
        for (var p8 = 0; p8 <= 24; p8 += 8)
          n9 <<= 1, n9 |= e11 >>> p8 + o9 & 1;
        for (p8 = 0; p8 <= 24; p8 += 8)
          n9 <<= 1, n9 |= t8 >>> p8 + o9 & 1;
      }
      for (o9 = 6; o9 >= 0; o9 -= 2) {
        for (p8 = 1; p8 <= 25; p8 += 8)
          f9 <<= 1, f9 |= e11 >>> p8 + o9 & 1;
        for (p8 = 1; p8 <= 25; p8 += 8)
          f9 <<= 1, f9 |= t8 >>> p8 + o9 & 1;
      }
      r9[i8 + 0] = n9 >>> 0, r9[i8 + 1] = f9 >>> 0;
    }, rip: function(t8, e11, r9, i8) {
      for (var n9 = 0, f9 = 0, o9 = 0; o9 < 4; o9++)
        for (var p8 = 24; p8 >= 0; p8 -= 8)
          n9 <<= 1, n9 |= e11 >>> p8 + o9 & 1, n9 <<= 1, n9 |= t8 >>> p8 + o9 & 1;
      for (o9 = 4; o9 < 8; o9++)
        for (p8 = 24; p8 >= 0; p8 -= 8)
          f9 <<= 1, f9 |= e11 >>> p8 + o9 & 1, f9 <<= 1, f9 |= t8 >>> p8 + o9 & 1;
      r9[i8 + 0] = n9 >>> 0, r9[i8 + 1] = f9 >>> 0;
    }, pc1: function(t8, e11, r9, i8) {
      for (var n9 = 0, f9 = 0, o9 = 7; o9 >= 5; o9--) {
        for (var p8 = 0; p8 <= 24; p8 += 8)
          n9 <<= 1, n9 |= e11 >> p8 + o9 & 1;
        for (p8 = 0; p8 <= 24; p8 += 8)
          n9 <<= 1, n9 |= t8 >> p8 + o9 & 1;
      }
      for (p8 = 0; p8 <= 24; p8 += 8)
        n9 <<= 1, n9 |= e11 >> p8 + o9 & 1;
      for (o9 = 1; o9 <= 3; o9++) {
        for (p8 = 0; p8 <= 24; p8 += 8)
          f9 <<= 1, f9 |= e11 >> p8 + o9 & 1;
        for (p8 = 0; p8 <= 24; p8 += 8)
          f9 <<= 1, f9 |= t8 >> p8 + o9 & 1;
      }
      for (p8 = 0; p8 <= 24; p8 += 8)
        f9 <<= 1, f9 |= t8 >> p8 + o9 & 1;
      r9[i8 + 0] = n9 >>> 0, r9[i8 + 1] = f9 >>> 0;
    }, r28shl: function(t8, e11) {
      return t8 << e11 & 268435455 | t8 >>> 28 - e11;
    } };
    i5 = [14, 11, 17, 4, 27, 23, 25, 0, 13, 22, 7, 18, 5, 9, 16, 24, 2, 20, 12, 21, 1, 8, 15, 26, 15, 4, 25, 19, 9, 1, 26, 16, 5, 11, 23, 8, 12, 7, 17, 0, 22, 3, 10, 14, 6, 20, 27, 24];
    r$6.pc2 = function(t8, e11, r9, n9) {
      for (var f9 = 0, o9 = 0, p8 = i5.length >>> 1, u8 = 0; u8 < p8; u8++)
        f9 <<= 1, f9 |= t8 >>> i5[u8] & 1;
      for (u8 = p8; u8 < i5.length; u8++)
        o9 <<= 1, o9 |= e11 >>> i5[u8] & 1;
      r9[n9 + 0] = f9 >>> 0, r9[n9 + 1] = o9 >>> 0;
    }, r$6.expand = function(t8, e11, r9) {
      var i8 = 0, n9 = 0;
      i8 = (1 & t8) << 5 | t8 >>> 27;
      for (var f9 = 23; f9 >= 15; f9 -= 4)
        i8 <<= 6, i8 |= t8 >>> f9 & 63;
      for (f9 = 11; f9 >= 3; f9 -= 4)
        n9 |= t8 >>> f9 & 63, n9 <<= 6;
      n9 |= (31 & t8) << 1 | t8 >>> 31, e11[r9 + 0] = i8 >>> 0, e11[r9 + 1] = n9 >>> 0;
    };
    n$8 = [14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1, 3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8, 4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7, 15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13, 15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14, 9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5, 0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2, 5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9, 10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10, 1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1, 13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7, 11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12, 7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3, 1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9, 10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8, 15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14, 2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1, 8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6, 4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13, 15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3, 12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5, 0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8, 9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10, 7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13, 4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10, 3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6, 1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7, 10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12, 13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4, 10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2, 7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13, 0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11];
    r$6.substitute = function(t8, e11) {
      for (var r9 = 0, i8 = 0; i8 < 4; i8++) {
        r9 <<= 4, r9 |= n$8[64 * i8 + (t8 >>> 18 - 6 * i8 & 63)];
      }
      for (i8 = 0; i8 < 4; i8++) {
        r9 <<= 4, r9 |= n$8[256 + 64 * i8 + (e11 >>> 18 - 6 * i8 & 63)];
      }
      return r9 >>> 0;
    };
    f$9 = [16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22, 30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7];
    r$6.permute = function(t8) {
      for (var e11 = 0, r9 = 0; r9 < f$9.length; r9++)
        e11 <<= 1, e11 |= t8 >>> f$9[r9] & 1;
      return e11 >>> 0;
    }, r$6.padSplit = function(t8, e11, r9) {
      for (var i8 = t8.toString(2); i8.length < e11; )
        i8 = "0" + i8;
      for (var n9 = [], f9 = 0; f9 < e11; f9 += r9)
        n9.push(i8.slice(f9, f9 + r9));
      return n9.join(" ");
    };
    p$6 = o$7;
    o$8 = u$6, u$6.prototype._init = function() {
    }, u$6.prototype.update = function(t8) {
      return 0 === t8.length ? [] : "decrypt" === this.type ? this._updateDecrypt(t8) : this._updateEncrypt(t8);
    }, u$6.prototype._buffer = function(t8, e11) {
      for (var r9 = Math.min(this.buffer.length - this.bufferOff, t8.length - e11), i8 = 0; i8 < r9; i8++)
        this.buffer[this.bufferOff + i8] = t8[e11 + i8];
      return this.bufferOff += r9, r9;
    }, u$6.prototype._flushBuffer = function(t8, e11) {
      return this._update(this.buffer, 0, t8, e11), this.bufferOff = 0, this.blockSize;
    }, u$6.prototype._updateEncrypt = function(t8) {
      var e11 = 0, r9 = 0, i8 = (this.bufferOff + t8.length) / this.blockSize | 0, n9 = new Array(i8 * this.blockSize);
      0 !== this.bufferOff && (e11 += this._buffer(t8, e11), this.bufferOff === this.buffer.length && (r9 += this._flushBuffer(n9, r9)));
      for (var f9 = t8.length - (t8.length - e11) % this.blockSize; e11 < f9; e11 += this.blockSize)
        this._update(t8, e11, n9, r9), r9 += this.blockSize;
      for (; e11 < t8.length; e11++, this.bufferOff++)
        this.buffer[this.bufferOff] = t8[e11];
      return n9;
    }, u$6.prototype._updateDecrypt = function(t8) {
      for (var e11 = 0, r9 = 0, i8 = Math.ceil((this.bufferOff + t8.length) / this.blockSize) - 1, n9 = new Array(i8 * this.blockSize); i8 > 0; i8--)
        e11 += this._buffer(t8, e11), r9 += this._flushBuffer(n9, r9);
      return e11 += this._buffer(t8, e11), n9;
    }, u$6.prototype.final = function(t8) {
      var e11, r9;
      return t8 && (e11 = this.update(t8)), r9 = "encrypt" === this.type ? this._finalEncrypt() : this._finalDecrypt(), e11 ? e11.concat(r9) : r9;
    }, u$6.prototype._pad = function(t8, e11) {
      if (0 === e11)
        return false;
      for (; e11 < t8.length; )
        t8[e11++] = 0;
      return true;
    }, u$6.prototype._finalEncrypt = function() {
      if (!this._pad(this.buffer, this.bufferOff))
        return [];
      var t8 = new Array(this.blockSize);
      return this._update(this.buffer, 0, t8, 0), t8;
    }, u$6.prototype._unpad = function(t8) {
      return t8;
    }, u$6.prototype._finalDecrypt = function() {
      p$6.equal(this.bufferOff, this.blockSize, "Not enough data to decrypt");
      var t8 = new Array(this.blockSize);
      return this._flushBuffer(t8, 0), this._unpad(t8);
    };
    a$8 = o$8;
    h$7 = o$7;
    c$6 = r$6;
    l$6 = a$8;
    t$2(v$3, l$6), s$6 = v$3, v$3.create = function(t8) {
      return new v$3(t8);
    };
    d$5 = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1];
    v$3.prototype.deriveKeys = function(t8, e11) {
      t8.keys = new Array(32), h$7.equal(e11.length, this.blockSize, "Invalid key length");
      var r9 = c$6.readUInt32BE(e11, 0), i8 = c$6.readUInt32BE(e11, 4);
      c$6.pc1(r9, i8, t8.tmp, 0), r9 = t8.tmp[0], i8 = t8.tmp[1];
      for (var n9 = 0; n9 < t8.keys.length; n9 += 2) {
        var f9 = d$5[n9 >>> 1];
        r9 = c$6.r28shl(r9, f9), i8 = c$6.r28shl(i8, f9), c$6.pc2(r9, i8, t8.keys, n9);
      }
    }, v$3.prototype._update = function(t8, e11, r9, i8) {
      var n9 = this._desState, f9 = c$6.readUInt32BE(t8, e11), o9 = c$6.readUInt32BE(t8, e11 + 4);
      c$6.ip(f9, o9, n9.tmp, 0), f9 = n9.tmp[0], o9 = n9.tmp[1], "encrypt" === this.type ? this._encrypt(n9, f9, o9, n9.tmp, 0) : this._decrypt(n9, f9, o9, n9.tmp, 0), f9 = n9.tmp[0], o9 = n9.tmp[1], c$6.writeUInt32BE(r9, f9, i8), c$6.writeUInt32BE(r9, o9, i8 + 4);
    }, v$3.prototype._pad = function(t8, e11) {
      for (var r9 = t8.length - e11, i8 = e11; i8 < t8.length; i8++)
        t8[i8] = r9;
      return true;
    }, v$3.prototype._unpad = function(t8) {
      for (var e11 = t8[t8.length - 1], r9 = t8.length - e11; r9 < t8.length; r9++)
        h$7.equal(t8[r9], e11);
      return t8.slice(0, t8.length - e11);
    }, v$3.prototype._encrypt = function(t8, e11, r9, i8, n9) {
      for (var f9 = e11, o9 = r9, p8 = 0; p8 < t8.keys.length; p8 += 2) {
        var u8 = t8.keys[p8], s7 = t8.keys[p8 + 1];
        c$6.expand(o9, t8.tmp, 0), u8 ^= t8.tmp[0], s7 ^= t8.tmp[1];
        var a8 = c$6.substitute(u8, s7), h8 = o9;
        o9 = (f9 ^ c$6.permute(a8)) >>> 0, f9 = h8;
      }
      c$6.rip(o9, f9, i8, n9);
    }, v$3.prototype._decrypt = function(t8, e11, r9, i8, n9) {
      for (var f9 = r9, o9 = e11, p8 = t8.keys.length - 2; p8 >= 0; p8 -= 2) {
        var u8 = t8.keys[p8], s7 = t8.keys[p8 + 1];
        c$6.expand(f9, t8.tmp, 0), u8 ^= t8.tmp[0], s7 ^= t8.tmp[1];
        var a8 = c$6.substitute(u8, s7), h8 = f9;
        f9 = (o9 ^ c$6.permute(a8)) >>> 0, o9 = h8;
      }
      c$6.rip(f9, o9, i8, n9);
    };
    _$5 = s$6;
    b$4 = {};
    k$4 = o$7;
    g$3 = t$2;
    m$4 = {};
    b$4.instantiate = function(t8) {
      function e11(e12) {
        t8.call(this, e12), this._cbcInit();
      }
      g$3(e11, t8);
      for (var r9 = Object.keys(m$4), i8 = 0; i8 < r9.length; i8++) {
        var n9 = r9[i8];
        e11.prototype[n9] = m$4[n9];
      }
      return e11.create = function(t9) {
        return new e11(t9);
      }, e11;
    }, m$4._cbcInit = function() {
      var t8 = new S$2(this.options.iv);
      this._cbcState = t8;
    }, m$4._update = function(t8, e11, r9, i8) {
      var n9 = this._cbcState, f9 = this.constructor.super_.prototype, o9 = n9.iv;
      if ("encrypt" === this.type) {
        for (var p8 = 0; p8 < this.blockSize; p8++)
          o9[p8] ^= t8[e11 + p8];
        f9._update.call(this, o9, 0, r9, i8);
        for (p8 = 0; p8 < this.blockSize; p8++)
          o9[p8] = r9[i8 + p8];
      } else {
        f9._update.call(this, t8, e11, r9, i8);
        for (p8 = 0; p8 < this.blockSize; p8++)
          r9[i8 + p8] ^= o9[p8];
        for (p8 = 0; p8 < this.blockSize; p8++)
          o9[p8] = t8[e11 + p8];
      }
    };
    w$5 = o$7;
    E$3 = a$8;
    I$3 = _$5;
    t$2(B$2, E$3), z$2 = B$2, B$2.create = function(t8) {
      return new B$2(t8);
    }, B$2.prototype._update = function(t8, e11, r9, i8) {
      var n9 = this._edeState;
      n9.ciphers[0]._update(t8, e11, r9, i8), n9.ciphers[1]._update(r9, i8, r9, i8), n9.ciphers[2]._update(r9, i8, r9, i8);
    }, B$2.prototype._pad = I$3.prototype._pad, B$2.prototype._unpad = I$3.prototype._unpad;
    A$2 = z$2;
    U$2 = {};
    U$2.utils = r$6, U$2.Cipher = a$8, U$2.DES = _$5, U$2.CBC = b$4, U$2.EDE = A$2;
    i$13 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    f$a = f$6;
    o$9 = U$2;
    a$9 = t$2;
    c$7 = u4.Buffer;
    n$9 = { "des-ede3-cbc": o$9.CBC.instantiate(o$9.EDE), "des-ede3": o$9.EDE, "des-ede-cbc": o$9.CBC.instantiate(o$9.EDE), "des-ede": o$9.EDE, "des-cbc": o$9.CBC.instantiate(o$9.DES), "des-ecb": o$9.DES };
    n$9.des = n$9["des-cbc"], n$9.des3 = n$9["des-ede3-cbc"], d$6 = p$7, a$9(p$7, f$a), p$7.prototype._update = function(e11) {
      return c$7.from((this || i$13)._des.update(e11));
    }, p$7.prototype._final = function() {
      return c$7.from((this || i$13)._des.final());
    };
    l$7 = d$6;
    e$8 = e$1$1.Buffer;
    f$b = function(r9, f9) {
      for (var t8 = Math.min(r9.length, f9.length), n9 = new e$8(t8), o9 = 0; o9 < t8; ++o9)
        n9[o9] = r9[o9] ^ f9[o9];
      return n9;
    };
    t$12 = function(e11) {
      for (var c8, r9 = e11.length; r9--; ) {
        if (255 !== (c8 = e11.readUInt8(r9))) {
          c8++, e11.writeUInt8(c8, r9);
          break;
        }
        e11.writeUInt8(0, r9);
      }
    };
    a$a = { encrypt: function(e11, c8) {
      return e11._cipher.encryptBlock(c8);
    }, decrypt: function(e11, c8) {
      return e11._cipher.decryptBlock(c8);
    } };
    p$8 = {};
    n$a = f$b;
    p$8.encrypt = function(e11, c8) {
      var r9 = n$a(c8, e11._prev);
      return e11._prev = e11._cipher.encryptBlock(r9), e11._prev;
    }, p$8.decrypt = function(e11, c8) {
      var r9 = e11._prev;
      e11._prev = c8;
      var t8 = e11._cipher.decryptBlock(c8);
      return n$a(t8, r9);
    };
    i$2 = {};
    o$a = u4.Buffer;
    h$8 = f$b;
    i$2.encrypt = function(e11, c8, r9) {
      for (var t8, a8 = o$a.allocUnsafe(0); c8.length; ) {
        if (0 === e11._cache.length && (e11._cache = e11._cipher.encryptBlock(e11._prev), e11._prev = o$a.allocUnsafe(0)), !(e11._cache.length <= c8.length)) {
          a8 = o$a.concat([a8, v$4(e11, c8, r9)]);
          break;
        }
        t8 = e11._cache.length, a8 = o$a.concat([a8, v$4(e11, c8.slice(0, t8), r9)]), c8 = c8.slice(t8);
      }
      return a8;
    };
    y$4 = {};
    f$c = u4.Buffer;
    y$4.encrypt = function(e11, c8, r9) {
      for (var t8 = c8.length, a8 = f$c.allocUnsafe(t8), p8 = -1; ++p8 < t8; )
        a8[p8] = s$7(e11, c8[p8], r9);
      return a8;
    };
    l$8 = {};
    m$5 = u4.Buffer;
    l$8.encrypt = function(e11, c8, r9) {
      for (var t8 = c8.length, a8 = m$5.allocUnsafe(t8), p8 = -1; ++p8 < t8; )
        a8[p8] = _$6(e11, c8[p8], r9);
      return a8;
    };
    B$3 = {};
    u$7 = e$1$1.Buffer;
    C$1 = f$b;
    B$3.encrypt = function(e11, c8) {
      for (; e11._cache.length < c8.length; )
        e11._cache = u$7.concat([e11._cache, E$4(e11)]);
      var r9 = e11._cache.slice(0, c8.length);
      return e11._cache = e11._cache.slice(c8.length), C$1(c8, r9);
    };
    d$7 = {};
    b$5 = f$b;
    A$3 = u4.Buffer;
    S$3 = t$12;
    d$7.encrypt = function(e11, c8) {
      var r9 = Math.ceil(c8.length / 16), t8 = e11._cache.length;
      e11._cache = A$3.concat([e11._cache, A$3.allocUnsafe(16 * r9)]);
      for (var a8 = 0; a8 < r9; a8++) {
        var p8 = g$4(e11), n9 = t8 + 16 * a8;
        e11._cache.writeUInt32BE(p8[0], n9 + 0), e11._cache.writeUInt32BE(p8[1], n9 + 4), e11._cache.writeUInt32BE(p8[2], n9 + 8), e11._cache.writeUInt32BE(p8[3], n9 + 12);
      }
      var i8 = e11._cache.slice(0, c8.length);
      return e11._cache = e11._cache.slice(c8.length), b$5(c8, i8);
    };
    F$2 = { "aes-128-ecb": { cipher: "AES", key: 128, iv: 0, mode: "ECB", type: "block" }, "aes-192-ecb": { cipher: "AES", key: 192, iv: 0, mode: "ECB", type: "block" }, "aes-256-ecb": { cipher: "AES", key: 256, iv: 0, mode: "ECB", type: "block" }, "aes-128-cbc": { cipher: "AES", key: 128, iv: 16, mode: "CBC", type: "block" }, "aes-192-cbc": { cipher: "AES", key: 192, iv: 16, mode: "CBC", type: "block" }, "aes-256-cbc": { cipher: "AES", key: 256, iv: 16, mode: "CBC", type: "block" }, aes128: { cipher: "AES", key: 128, iv: 16, mode: "CBC", type: "block" }, aes192: { cipher: "AES", key: 192, iv: 16, mode: "CBC", type: "block" }, aes256: { cipher: "AES", key: 256, iv: 16, mode: "CBC", type: "block" }, "aes-128-cfb": { cipher: "AES", key: 128, iv: 16, mode: "CFB", type: "stream" }, "aes-192-cfb": { cipher: "AES", key: 192, iv: 16, mode: "CFB", type: "stream" }, "aes-256-cfb": { cipher: "AES", key: 256, iv: 16, mode: "CFB", type: "stream" }, "aes-128-cfb8": { cipher: "AES", key: 128, iv: 16, mode: "CFB8", type: "stream" }, "aes-192-cfb8": { cipher: "AES", key: 192, iv: 16, mode: "CFB8", type: "stream" }, "aes-256-cfb8": { cipher: "AES", key: 256, iv: 16, mode: "CFB8", type: "stream" }, "aes-128-cfb1": { cipher: "AES", key: 128, iv: 16, mode: "CFB1", type: "stream" }, "aes-192-cfb1": { cipher: "AES", key: 192, iv: 16, mode: "CFB1", type: "stream" }, "aes-256-cfb1": { cipher: "AES", key: 256, iv: 16, mode: "CFB1", type: "stream" }, "aes-128-ofb": { cipher: "AES", key: 128, iv: 16, mode: "OFB", type: "stream" }, "aes-192-ofb": { cipher: "AES", key: 192, iv: 16, mode: "OFB", type: "stream" }, "aes-256-ofb": { cipher: "AES", key: 256, iv: 16, mode: "OFB", type: "stream" }, "aes-128-ctr": { cipher: "AES", key: 128, iv: 16, mode: "CTR", type: "stream" }, "aes-192-ctr": { cipher: "AES", key: 192, iv: 16, mode: "CTR", type: "stream" }, "aes-256-ctr": { cipher: "AES", key: 256, iv: 16, mode: "CTR", type: "stream" }, "aes-128-gcm": { cipher: "AES", key: 128, iv: 12, mode: "GCM", type: "auth" }, "aes-192-gcm": { cipher: "AES", key: 192, iv: 12, mode: "GCM", type: "auth" }, "aes-256-gcm": { cipher: "AES", key: 256, iv: 12, mode: "GCM", type: "auth" } };
    U$3 = { ECB: a$a, CBC: p$8, CFB: i$2, CFB8: y$4, CFB1: l$8, OFB: B$3, CTR: d$7, GCM: d$7 };
    w$6 = F$2;
    for (I$4 in w$6)
      w$6[I$4].module = U$3[w$6[I$4].mode];
    M$2 = w$6;
    a$b = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    h$9 = {};
    o$b = u4.Buffer;
    f$d = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
    u$8 = function() {
      for (var t8 = new Array(256), e11 = 0; e11 < 256; e11++)
        t8[e11] = e11 < 128 ? e11 << 1 : e11 << 1 ^ 283;
      for (var i8 = [], r9 = [], n9 = [[], [], [], []], a8 = [[], [], [], []], h8 = 0, o9 = 0, s7 = 0; s7 < 256; ++s7) {
        var c8 = o9 ^ o9 << 1 ^ o9 << 2 ^ o9 << 3 ^ o9 << 4;
        c8 = c8 >>> 8 ^ 255 & c8 ^ 99, i8[h8] = c8, r9[c8] = h8;
        var l8 = t8[h8], f9 = t8[l8], u8 = t8[f9], p8 = 257 * t8[c8] ^ 16843008 * c8;
        n9[0][h8] = p8 << 24 | p8 >>> 8, n9[1][h8] = p8 << 16 | p8 >>> 16, n9[2][h8] = p8 << 8 | p8 >>> 24, n9[3][h8] = p8, p8 = 16843009 * u8 ^ 65537 * f9 ^ 257 * l8 ^ 16843008 * h8, a8[0][c8] = p8 << 24 | p8 >>> 8, a8[1][c8] = p8 << 16 | p8 >>> 16, a8[2][c8] = p8 << 8 | p8 >>> 24, a8[3][c8] = p8, 0 === h8 ? h8 = o9 = 1 : (h8 = l8 ^ t8[t8[t8[u8 ^ l8]]], o9 ^= t8[t8[o9]]);
      }
      return { SBOX: i8, INV_SBOX: r9, SUB_MIX: n9, INV_SUB_MIX: a8 };
    }();
    p$9.blockSize = 16, p$9.keySize = 32, p$9.prototype.blockSize = p$9.blockSize, p$9.prototype.keySize = p$9.keySize, p$9.prototype._reset = function() {
      for (var t8 = (this || a$b)._key, e11 = t8.length, i8 = e11 + 6, r9 = 4 * (i8 + 1), n9 = [], h8 = 0; h8 < e11; h8++)
        n9[h8] = t8[h8];
      for (h8 = e11; h8 < r9; h8++) {
        var o9 = n9[h8 - 1];
        h8 % e11 == 0 ? (o9 = o9 << 8 | o9 >>> 24, o9 = u$8.SBOX[o9 >>> 24] << 24 | u$8.SBOX[o9 >>> 16 & 255] << 16 | u$8.SBOX[o9 >>> 8 & 255] << 8 | u$8.SBOX[255 & o9], o9 ^= f$d[h8 / e11 | 0] << 24) : e11 > 6 && h8 % e11 == 4 && (o9 = u$8.SBOX[o9 >>> 24] << 24 | u$8.SBOX[o9 >>> 16 & 255] << 16 | u$8.SBOX[o9 >>> 8 & 255] << 8 | u$8.SBOX[255 & o9]), n9[h8] = n9[h8 - e11] ^ o9;
      }
      for (var s7 = [], c8 = 0; c8 < r9; c8++) {
        var l8 = r9 - c8, p8 = n9[l8 - (c8 % 4 ? 0 : 4)];
        s7[c8] = c8 < 4 || l8 <= 4 ? p8 : u$8.INV_SUB_MIX[0][u$8.SBOX[p8 >>> 24]] ^ u$8.INV_SUB_MIX[1][u$8.SBOX[p8 >>> 16 & 255]] ^ u$8.INV_SUB_MIX[2][u$8.SBOX[p8 >>> 8 & 255]] ^ u$8.INV_SUB_MIX[3][u$8.SBOX[255 & p8]];
      }
      (this || a$b)._nRounds = i8, (this || a$b)._keySchedule = n9, (this || a$b)._invKeySchedule = s7;
    }, p$9.prototype.encryptBlockRaw = function(t8) {
      return l$9(t8 = s$8(t8), (this || a$b)._keySchedule, u$8.SUB_MIX, u$8.SBOX, (this || a$b)._nRounds);
    }, p$9.prototype.encryptBlock = function(t8) {
      var e11 = this.encryptBlockRaw(t8), i8 = o$b.allocUnsafe(16);
      return i8.writeUInt32BE(e11[0], 0), i8.writeUInt32BE(e11[1], 4), i8.writeUInt32BE(e11[2], 8), i8.writeUInt32BE(e11[3], 12), i8;
    }, p$9.prototype.decryptBlock = function(t8) {
      var e11 = (t8 = s$8(t8))[1];
      t8[1] = t8[3], t8[3] = e11;
      var i8 = l$9(t8, (this || a$b)._invKeySchedule, u$8.INV_SUB_MIX, u$8.INV_SBOX, (this || a$b)._nRounds), r9 = o$b.allocUnsafe(16);
      return r9.writeUInt32BE(i8[0], 0), r9.writeUInt32BE(i8[3], 4), r9.writeUInt32BE(i8[2], 8), r9.writeUInt32BE(i8[1], 12), r9;
    }, p$9.prototype.scrub = function() {
      c$8((this || a$b)._keySchedule), c$8((this || a$b)._invKeySchedule), c$8((this || a$b)._key);
    }, h$9.AES = p$9;
    _$7 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    d$8 = u4.Buffer;
    y$5 = d$8.alloc(16, 0);
    g$5.prototype.ghash = function(t8) {
      for (var e11 = -1; ++e11 < t8.length; )
        (this || _$7).state[e11] ^= t8[e11];
      this._multiply();
    }, g$5.prototype._multiply = function() {
      for (var t8, e11, i8, r9 = [(t8 = (this || _$7).h).readUInt32BE(0), t8.readUInt32BE(4), t8.readUInt32BE(8), t8.readUInt32BE(12)], n9 = [0, 0, 0, 0], a8 = -1; ++a8 < 128; ) {
        for (0 != ((this || _$7).state[~~(a8 / 8)] & 1 << 7 - a8 % 8) && (n9[0] ^= r9[0], n9[1] ^= r9[1], n9[2] ^= r9[2], n9[3] ^= r9[3]), i8 = 0 != (1 & r9[3]), e11 = 3; e11 > 0; e11--)
          r9[e11] = r9[e11] >>> 1 | (1 & r9[e11 - 1]) << 31;
        r9[0] = r9[0] >>> 1, i8 && (r9[0] = r9[0] ^ 225 << 24);
      }
      (this || _$7).state = B$4(n9);
    }, g$5.prototype.update = function(t8) {
      var e11;
      for ((this || _$7).cache = d$8.concat([(this || _$7).cache, t8]); (this || _$7).cache.length >= 16; )
        e11 = (this || _$7).cache.slice(0, 16), (this || _$7).cache = (this || _$7).cache.slice(16), this.ghash(e11);
    }, g$5.prototype.final = function(t8, e11) {
      return (this || _$7).cache.length && this.ghash(d$8.concat([(this || _$7).cache, y$5], 16)), this.ghash(B$4([0, t8, 0, e11])), (this || _$7).state;
    };
    S$4 = g$5;
    v$5 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    I$5 = h$9;
    U$4 = u4.Buffer;
    w$7 = f$6;
    m$6 = S$4;
    E$5 = f$b;
    b$6 = t$12;
    t$2(X$1, w$7), X$1.prototype._update = function(t8) {
      if (!(this || v$5)._called && (this || v$5)._alen) {
        var e11 = 16 - (this || v$5)._alen % 16;
        e11 < 16 && (e11 = U$4.alloc(e11, 0), (this || v$5)._ghash.update(e11));
      }
      (this || v$5)._called = true;
      var i8 = (this || v$5)._mode.encrypt(this || v$5, t8);
      return (this || v$5)._decrypt ? (this || v$5)._ghash.update(t8) : (this || v$5)._ghash.update(i8), (this || v$5)._len += t8.length, i8;
    }, X$1.prototype._final = function() {
      if ((this || v$5)._decrypt && !(this || v$5)._authTag)
        throw new Error("Unsupported state or unable to authenticate data");
      var t8 = E$5((this || v$5)._ghash.final(8 * (this || v$5)._alen, 8 * (this || v$5)._len), (this || v$5)._cipher.encryptBlock((this || v$5)._finID));
      if ((this || v$5)._decrypt && function(t9, e11) {
        var i8 = 0;
        t9.length !== e11.length && i8++;
        for (var r9 = Math.min(t9.length, e11.length), n9 = 0; n9 < r9; ++n9)
          i8 += t9[n9] ^ e11[n9];
        return i8;
      }(t8, (this || v$5)._authTag))
        throw new Error("Unsupported state or unable to authenticate data");
      (this || v$5)._authTag = t8, (this || v$5)._cipher.scrub();
    }, X$1.prototype.getAuthTag = function() {
      if ((this || v$5)._decrypt || !U$4.isBuffer((this || v$5)._authTag))
        throw new Error("Attempting to get auth tag in unsupported state");
      return (this || v$5)._authTag;
    }, X$1.prototype.setAuthTag = function(t8) {
      if (!(this || v$5)._decrypt)
        throw new Error("Attempting to set auth tag in unsupported state");
      (this || v$5)._authTag = t8;
    }, X$1.prototype.setAAD = function(t8) {
      if ((this || v$5)._called)
        throw new Error("Attempting to set AAD in unsupported state");
      (this || v$5)._ghash.update(t8), (this || v$5)._alen += t8.length;
    };
    k$6 = X$1;
    T$2 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    O$2 = h$9;
    A$4 = u4.Buffer;
    M$3 = f$6;
    t$2(N$1, M$3), N$1.prototype._update = function(t8) {
      return (this || T$2)._mode.encrypt(this || T$2, t8, (this || T$2)._decrypt);
    }, N$1.prototype._final = function() {
      (this || T$2)._cipher.scrub();
    };
    V$1 = N$1;
    t$22 = u4.Buffer;
    f$e = u5;
    a$c = function(r9, e11, a8, l8) {
      if (t$22.isBuffer(r9) || (r9 = t$22.from(r9, "binary")), e11 && (t$22.isBuffer(e11) || (e11 = t$22.from(e11, "binary")), 8 !== e11.length))
        throw new RangeError("salt should be Buffer with 8 byte length");
      for (var n9 = a8 / 8, o9 = t$22.alloc(n9), i8 = t$22.alloc(l8 || 0), h8 = t$22.alloc(0); n9 > 0 || l8 > 0; ) {
        var u8 = new f$e();
        u8.update(h8), u8.update(r9), e11 && u8.update(e11), h8 = u8.digest();
        var g5 = 0;
        if (n9 > 0) {
          var m6 = o9.length - n9;
          g5 = Math.min(n9, h8.length), h8.copy(o9, m6, 0, g5), n9 -= g5;
        }
        if (g5 < h8.length && l8 > 0) {
          var p8 = i8.length - l8, v6 = Math.min(l8, h8.length - g5);
          h8.copy(i8, p8, g5, g5 + v6), l8 -= v6;
        }
      }
      return h8.fill(0), { key: o9, iv: i8 };
    };
    c$9 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    s$9 = {};
    f$f = k$6;
    p$a = u4.Buffer;
    u$9 = M$2;
    l$a = V$1;
    d$9 = f$6;
    y$6 = h$9;
    m$7 = a$c;
    t$2(g$6, d$9), g$6.prototype._update = function(t8) {
      var e11, r9;
      (this || c$9)._cache.add(t8);
      for (var i8 = []; e11 = (this || c$9)._cache.get((this || c$9)._autopadding); )
        r9 = (this || c$9)._mode.decrypt(this || c$9, e11), i8.push(r9);
      return p$a.concat(i8);
    }, g$6.prototype._final = function() {
      var t8 = (this || c$9)._cache.flush();
      if ((this || c$9)._autopadding)
        return function(t9) {
          var e11 = t9[15];
          if (e11 < 1 || e11 > 16)
            throw new Error("unable to decrypt data");
          var r9 = -1;
          for (; ++r9 < e11; )
            if (t9[r9 + (16 - e11)] !== e11)
              throw new Error("unable to decrypt data");
          if (16 === e11)
            return;
          return t9.slice(0, 16 - e11);
        }((this || c$9)._mode.decrypt(this || c$9, t8));
      if (t8)
        throw new Error("data not multiple of block length");
    }, g$6.prototype.setAutoPadding = function(t8) {
      return (this || c$9)._autopadding = !!t8, this || c$9;
    }, v$6.prototype.add = function(t8) {
      (this || c$9).cache = p$a.concat([(this || c$9).cache, t8]);
    }, v$6.prototype.get = function(t8) {
      var e11;
      if (t8) {
        if ((this || c$9).cache.length > 16)
          return e11 = (this || c$9).cache.slice(0, 16), (this || c$9).cache = (this || c$9).cache.slice(16), e11;
      } else if ((this || c$9).cache.length >= 16)
        return e11 = (this || c$9).cache.slice(0, 16), (this || c$9).cache = (this || c$9).cache.slice(16), e11;
      return null;
    }, v$6.prototype.flush = function() {
      if ((this || c$9).cache.length)
        return (this || c$9).cache;
    }, s$9.createDecipher = function(t8, e11) {
      var r9 = u$9[t8.toLowerCase()];
      if (!r9)
        throw new TypeError("invalid suite type");
      var i8 = m$7(e11, false, r9.key, r9.iv);
      return w$8(t8, i8.key, i8.iv);
    }, s$9.createDecipheriv = w$8;
    c$a = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    s$a = {};
    f$g = M$2;
    p$b = k$6;
    l$b = u4.Buffer;
    u$a = V$1;
    d$a = f$6;
    m$8 = h$9;
    y$7 = a$c;
    t$2(v$7, d$a), v$7.prototype._update = function(t8) {
      var e11, r9;
      (this || c$a)._cache.add(t8);
      for (var i8 = []; e11 = (this || c$a)._cache.get(); )
        r9 = (this || c$a)._mode.encrypt(this || c$a, e11), i8.push(r9);
      return l$b.concat(i8);
    };
    _$8 = l$b.alloc(16, 16);
    v$7.prototype._final = function() {
      var t8 = (this || c$a)._cache.flush();
      if ((this || c$a)._autopadding)
        return t8 = (this || c$a)._mode.encrypt(this || c$a, t8), (this || c$a)._cipher.scrub(), t8;
      if (!t8.equals(_$8))
        throw (this || c$a)._cipher.scrub(), new Error("data not multiple of block length");
    }, v$7.prototype.setAutoPadding = function(t8) {
      return (this || c$a)._autopadding = !!t8, this || c$a;
    }, g$7.prototype.add = function(t8) {
      (this || c$a).cache = l$b.concat([(this || c$a).cache, t8]);
    }, g$7.prototype.get = function() {
      if ((this || c$a).cache.length > 15) {
        var t8 = (this || c$a).cache.slice(0, 16);
        return (this || c$a).cache = (this || c$a).cache.slice(16), t8;
      }
      return null;
    }, g$7.prototype.flush = function() {
      for (var t8 = 16 - (this || c$a).cache.length, e11 = l$b.allocUnsafe(t8), r9 = -1; ++r9 < t8; )
        e11.writeUInt8(t8, r9);
      return l$b.concat([(this || c$a).cache, e11]);
    }, s$a.createCipheriv = w$9, s$a.createCipher = function(t8, e11) {
      var r9 = f$g[t8.toLowerCase()];
      if (!r9)
        throw new TypeError("invalid suite type");
      var i8 = y$7(e11, false, r9.key, r9.iv);
      return w$9(t8, i8.key, i8.iv);
    };
    t$3 = {};
    p$c = s$a;
    c$b = s$9;
    o$c = F$2;
    t$3.createCipher = t$3.Cipher = p$c.createCipher, t$3.createCipheriv = t$3.Cipheriv = p$c.createCipheriv, t$3.createDecipher = t$3.Decipher = c$b.createDecipher, t$3.createDecipheriv = t$3.Decipheriv = c$b.createDecipheriv, t$3.listCiphers = t$3.getCiphers = function() {
      return Object.keys(o$c);
    };
    e$9 = { "des-ecb": { key: 8, iv: 0 } };
    e$9["des-cbc"] = e$9.des = { key: 8, iv: 8 }, e$9["des-ede3-cbc"] = e$9.des3 = { key: 24, iv: 8 }, e$9["des-ede3"] = { key: 24, iv: 0 }, e$9["des-ede-cbc"] = { key: 16, iv: 8 }, e$9["des-ede"] = { key: 16, iv: 0 };
    p$d = {};
    n$b = l$7;
    s$b = t$3;
    v$8 = M$2;
    y$8 = e$9;
    a$d = a$c;
    p$d.createCipher = p$d.Cipher = function(e11, r9) {
      var i8, t8;
      if (e11 = e11.toLowerCase(), v$8[e11])
        i8 = v$8[e11].key, t8 = v$8[e11].iv;
      else {
        if (!y$8[e11])
          throw new TypeError("invalid suite type");
        i8 = 8 * y$8[e11].key, t8 = y$8[e11].iv;
      }
      var o9 = a$d(r9, false, i8, t8);
      return f$h(e11, o9.key, o9.iv);
    }, p$d.createCipheriv = p$d.Cipheriv = f$h, p$d.createDecipher = p$d.Decipher = function(e11, r9) {
      var i8, t8;
      if (e11 = e11.toLowerCase(), v$8[e11])
        i8 = v$8[e11].key, t8 = v$8[e11].iv;
      else {
        if (!y$8[e11])
          throw new TypeError("invalid suite type");
        i8 = 8 * y$8[e11].key, t8 = y$8[e11].iv;
      }
      var o9 = a$d(r9, false, i8, t8);
      return c$c(e11, o9.key, o9.iv);
    }, p$d.createDecipheriv = p$d.Decipheriv = c$c, p$d.listCiphers = p$d.getCiphers = function() {
      return Object.keys(y$8).concat(s$b.getCiphers());
    };
    t$4 = Object.freeze({});
    i$3 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    r$7 = {};
    h$a = { exports: r$7 };
    !function(r9, h8) {
      function n9(t8, i8) {
        if (!t8)
          throw new Error(i8 || "Assertion failed");
      }
      function e11(t8, i8) {
        t8.super_ = i8;
        var r10 = function() {
        };
        r10.prototype = i8.prototype, t8.prototype = new r10(), t8.prototype.constructor = t8;
      }
      function o9(t8, r10, h9) {
        if (o9.isBN(t8))
          return t8;
        (this || i$3).negative = 0, (this || i$3).words = null, (this || i$3).length = 0, (this || i$3).red = null, null !== t8 && ("le" !== r10 && "be" !== r10 || (h9 = r10, r10 = 10), this._init(t8 || 0, r10 || 10, h9 || "be"));
      }
      var s7;
      "object" == typeof r9 ? r9.exports = o9 : h8.BN = o9, o9.BN = o9, o9.wordSize = 26;
      try {
        s7 = t$4.Buffer;
      } catch (t8) {
      }
      function u8(t8, i8, r10) {
        for (var h9 = 0, n10 = Math.min(t8.length, r10), e12 = i8; e12 < n10; e12++) {
          var o10 = t8.charCodeAt(e12) - 48;
          h9 <<= 4, h9 |= o10 >= 49 && o10 <= 54 ? o10 - 49 + 10 : o10 >= 17 && o10 <= 22 ? o10 - 17 + 10 : 15 & o10;
        }
        return h9;
      }
      function a8(t8, i8, r10, h9) {
        for (var n10 = 0, e12 = Math.min(t8.length, r10), o10 = i8; o10 < e12; o10++) {
          var s8 = t8.charCodeAt(o10) - 48;
          n10 *= h9, n10 += s8 >= 49 ? s8 - 49 + 10 : s8 >= 17 ? s8 - 17 + 10 : s8;
        }
        return n10;
      }
      o9.isBN = function(t8) {
        return t8 instanceof o9 || null !== t8 && "object" == typeof t8 && t8.constructor.wordSize === o9.wordSize && Array.isArray(t8.words);
      }, o9.max = function(t8, i8) {
        return t8.cmp(i8) > 0 ? t8 : i8;
      }, o9.min = function(t8, i8) {
        return t8.cmp(i8) < 0 ? t8 : i8;
      }, o9.prototype._init = function(t8, r10, h9) {
        if ("number" == typeof t8)
          return this._initNumber(t8, r10, h9);
        if ("object" == typeof t8)
          return this._initArray(t8, r10, h9);
        "hex" === r10 && (r10 = 16), n9(r10 === (0 | r10) && r10 >= 2 && r10 <= 36);
        var e12 = 0;
        "-" === (t8 = t8.toString().replace(/\s+/g, ""))[0] && e12++, 16 === r10 ? this._parseHex(t8, e12) : this._parseBase(t8, r10, e12), "-" === t8[0] && ((this || i$3).negative = 1), this.strip(), "le" === h9 && this._initArray(this.toArray(), r10, h9);
      }, o9.prototype._initNumber = function(t8, r10, h9) {
        t8 < 0 && ((this || i$3).negative = 1, t8 = -t8), t8 < 67108864 ? ((this || i$3).words = [67108863 & t8], (this || i$3).length = 1) : t8 < 4503599627370496 ? ((this || i$3).words = [67108863 & t8, t8 / 67108864 & 67108863], (this || i$3).length = 2) : (n9(t8 < 9007199254740992), (this || i$3).words = [67108863 & t8, t8 / 67108864 & 67108863, 1], (this || i$3).length = 3), "le" === h9 && this._initArray(this.toArray(), r10, h9);
      }, o9.prototype._initArray = function(t8, r10, h9) {
        if (n9("number" == typeof t8.length), t8.length <= 0)
          return (this || i$3).words = [0], (this || i$3).length = 1, this || i$3;
        (this || i$3).length = Math.ceil(t8.length / 3), (this || i$3).words = new Array((this || i$3).length);
        for (var e12 = 0; e12 < (this || i$3).length; e12++)
          (this || i$3).words[e12] = 0;
        var o10, s8, u9 = 0;
        if ("be" === h9)
          for (e12 = t8.length - 1, o10 = 0; e12 >= 0; e12 -= 3)
            s8 = t8[e12] | t8[e12 - 1] << 8 | t8[e12 - 2] << 16, (this || i$3).words[o10] |= s8 << u9 & 67108863, (this || i$3).words[o10 + 1] = s8 >>> 26 - u9 & 67108863, (u9 += 24) >= 26 && (u9 -= 26, o10++);
        else if ("le" === h9)
          for (e12 = 0, o10 = 0; e12 < t8.length; e12 += 3)
            s8 = t8[e12] | t8[e12 + 1] << 8 | t8[e12 + 2] << 16, (this || i$3).words[o10] |= s8 << u9 & 67108863, (this || i$3).words[o10 + 1] = s8 >>> 26 - u9 & 67108863, (u9 += 24) >= 26 && (u9 -= 26, o10++);
        return this.strip();
      }, o9.prototype._parseHex = function(t8, r10) {
        (this || i$3).length = Math.ceil((t8.length - r10) / 6), (this || i$3).words = new Array((this || i$3).length);
        for (var h9 = 0; h9 < (this || i$3).length; h9++)
          (this || i$3).words[h9] = 0;
        var n10, e12, o10 = 0;
        for (h9 = t8.length - 6, n10 = 0; h9 >= r10; h9 -= 6)
          e12 = u8(t8, h9, h9 + 6), (this || i$3).words[n10] |= e12 << o10 & 67108863, (this || i$3).words[n10 + 1] |= e12 >>> 26 - o10 & 4194303, (o10 += 24) >= 26 && (o10 -= 26, n10++);
        h9 + 6 !== r10 && (e12 = u8(t8, r10, h9 + 6), (this || i$3).words[n10] |= e12 << o10 & 67108863, (this || i$3).words[n10 + 1] |= e12 >>> 26 - o10 & 4194303), this.strip();
      }, o9.prototype._parseBase = function(t8, r10, h9) {
        (this || i$3).words = [0], (this || i$3).length = 1;
        for (var n10 = 0, e12 = 1; e12 <= 67108863; e12 *= r10)
          n10++;
        n10--, e12 = e12 / r10 | 0;
        for (var o10 = t8.length - h9, s8 = o10 % n10, u9 = Math.min(o10, o10 - s8) + h9, l9 = 0, m7 = h9; m7 < u9; m7 += n10)
          l9 = a8(t8, m7, m7 + n10, r10), this.imuln(e12), (this || i$3).words[0] + l9 < 67108864 ? (this || i$3).words[0] += l9 : this._iaddn(l9);
        if (0 !== s8) {
          var f10 = 1;
          for (l9 = a8(t8, m7, t8.length, r10), m7 = 0; m7 < s8; m7++)
            f10 *= r10;
          this.imuln(f10), (this || i$3).words[0] + l9 < 67108864 ? (this || i$3).words[0] += l9 : this._iaddn(l9);
        }
      }, o9.prototype.copy = function(t8) {
        t8.words = new Array((this || i$3).length);
        for (var r10 = 0; r10 < (this || i$3).length; r10++)
          t8.words[r10] = (this || i$3).words[r10];
        t8.length = (this || i$3).length, t8.negative = (this || i$3).negative, t8.red = (this || i$3).red;
      }, o9.prototype.clone = function() {
        var t8 = new o9(null);
        return this.copy(t8), t8;
      }, o9.prototype._expand = function(t8) {
        for (; (this || i$3).length < t8; )
          (this || i$3).words[(this || i$3).length++] = 0;
        return this || i$3;
      }, o9.prototype.strip = function() {
        for (; (this || i$3).length > 1 && 0 === (this || i$3).words[(this || i$3).length - 1]; )
          (this || i$3).length--;
        return this._normSign();
      }, o9.prototype._normSign = function() {
        return 1 === (this || i$3).length && 0 === (this || i$3).words[0] && ((this || i$3).negative = 0), this || i$3;
      }, o9.prototype.inspect = function() {
        return ((this || i$3).red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var l8 = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"], m6 = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], f9 = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
      function d6(t8, i8, r10) {
        r10.negative = i8.negative ^ t8.negative;
        var h9 = t8.length + i8.length | 0;
        r10.length = h9, h9 = h9 - 1 | 0;
        var n10 = 0 | t8.words[0], e12 = 0 | i8.words[0], o10 = n10 * e12, s8 = 67108863 & o10, u9 = o10 / 67108864 | 0;
        r10.words[0] = s8;
        for (var a9 = 1; a9 < h9; a9++) {
          for (var l9 = u9 >>> 26, m7 = 67108863 & u9, f10 = Math.min(a9, i8.length - 1), d7 = Math.max(0, a9 - t8.length + 1); d7 <= f10; d7++) {
            var p9 = a9 - d7 | 0;
            l9 += (o10 = (n10 = 0 | t8.words[p9]) * (e12 = 0 | i8.words[d7]) + m7) / 67108864 | 0, m7 = 67108863 & o10;
          }
          r10.words[a9] = 0 | m7, u9 = 0 | l9;
        }
        return 0 !== u9 ? r10.words[a9] = 0 | u9 : r10.length--, r10.strip();
      }
      o9.prototype.toString = function(t8, r10) {
        var h9;
        if (r10 = 0 | r10 || 1, 16 === (t8 = t8 || 10) || "hex" === t8) {
          h9 = "";
          for (var e12 = 0, o10 = 0, s8 = 0; s8 < (this || i$3).length; s8++) {
            var u9 = (this || i$3).words[s8], a9 = (16777215 & (u9 << e12 | o10)).toString(16);
            h9 = 0 !== (o10 = u9 >>> 24 - e12 & 16777215) || s8 !== (this || i$3).length - 1 ? l8[6 - a9.length] + a9 + h9 : a9 + h9, (e12 += 2) >= 26 && (e12 -= 26, s8--);
          }
          for (0 !== o10 && (h9 = o10.toString(16) + h9); h9.length % r10 != 0; )
            h9 = "0" + h9;
          return 0 !== (this || i$3).negative && (h9 = "-" + h9), h9;
        }
        if (t8 === (0 | t8) && t8 >= 2 && t8 <= 36) {
          var d7 = m6[t8], p9 = f9[t8];
          h9 = "";
          var M5 = this.clone();
          for (M5.negative = 0; !M5.isZero(); ) {
            var v7 = M5.modn(p9).toString(t8);
            h9 = (M5 = M5.idivn(p9)).isZero() ? v7 + h9 : l8[d7 - v7.length] + v7 + h9;
          }
          for (this.isZero() && (h9 = "0" + h9); h9.length % r10 != 0; )
            h9 = "0" + h9;
          return 0 !== (this || i$3).negative && (h9 = "-" + h9), h9;
        }
        n9(false, "Base should be between 2 and 36");
      }, o9.prototype.toNumber = function() {
        var t8 = (this || i$3).words[0];
        return 2 === (this || i$3).length ? t8 += 67108864 * (this || i$3).words[1] : 3 === (this || i$3).length && 1 === (this || i$3).words[2] ? t8 += 4503599627370496 + 67108864 * (this || i$3).words[1] : (this || i$3).length > 2 && n9(false, "Number can only safely store up to 53 bits"), 0 !== (this || i$3).negative ? -t8 : t8;
      }, o9.prototype.toJSON = function() {
        return this.toString(16);
      }, o9.prototype.toBuffer = function(t8, i8) {
        return n9(void 0 !== s7), this.toArrayLike(s7, t8, i8);
      }, o9.prototype.toArray = function(t8, i8) {
        return this.toArrayLike(Array, t8, i8);
      }, o9.prototype.toArrayLike = function(t8, i8, r10) {
        var h9 = this.byteLength(), e12 = r10 || Math.max(1, h9);
        n9(h9 <= e12, "byte array longer than desired length"), n9(e12 > 0, "Requested array length <= 0"), this.strip();
        var o10, s8, u9 = "le" === i8, a9 = new t8(e12), l9 = this.clone();
        if (u9) {
          for (s8 = 0; !l9.isZero(); s8++)
            o10 = l9.andln(255), l9.iushrn(8), a9[s8] = o10;
          for (; s8 < e12; s8++)
            a9[s8] = 0;
        } else {
          for (s8 = 0; s8 < e12 - h9; s8++)
            a9[s8] = 0;
          for (s8 = 0; !l9.isZero(); s8++)
            o10 = l9.andln(255), l9.iushrn(8), a9[e12 - s8 - 1] = o10;
        }
        return a9;
      }, Math.clz32 ? o9.prototype._countBits = function(t8) {
        return 32 - Math.clz32(t8);
      } : o9.prototype._countBits = function(t8) {
        var i8 = t8, r10 = 0;
        return i8 >= 4096 && (r10 += 13, i8 >>>= 13), i8 >= 64 && (r10 += 7, i8 >>>= 7), i8 >= 8 && (r10 += 4, i8 >>>= 4), i8 >= 2 && (r10 += 2, i8 >>>= 2), r10 + i8;
      }, o9.prototype._zeroBits = function(t8) {
        if (0 === t8)
          return 26;
        var i8 = t8, r10 = 0;
        return 0 == (8191 & i8) && (r10 += 13, i8 >>>= 13), 0 == (127 & i8) && (r10 += 7, i8 >>>= 7), 0 == (15 & i8) && (r10 += 4, i8 >>>= 4), 0 == (3 & i8) && (r10 += 2, i8 >>>= 2), 0 == (1 & i8) && r10++, r10;
      }, o9.prototype.bitLength = function() {
        var t8 = (this || i$3).words[(this || i$3).length - 1], r10 = this._countBits(t8);
        return 26 * ((this || i$3).length - 1) + r10;
      }, o9.prototype.zeroBits = function() {
        if (this.isZero())
          return 0;
        for (var t8 = 0, r10 = 0; r10 < (this || i$3).length; r10++) {
          var h9 = this._zeroBits((this || i$3).words[r10]);
          if (t8 += h9, 26 !== h9)
            break;
        }
        return t8;
      }, o9.prototype.byteLength = function() {
        return Math.ceil(this.bitLength() / 8);
      }, o9.prototype.toTwos = function(t8) {
        return 0 !== (this || i$3).negative ? this.abs().inotn(t8).iaddn(1) : this.clone();
      }, o9.prototype.fromTwos = function(t8) {
        return this.testn(t8 - 1) ? this.notn(t8).iaddn(1).ineg() : this.clone();
      }, o9.prototype.isNeg = function() {
        return 0 !== (this || i$3).negative;
      }, o9.prototype.neg = function() {
        return this.clone().ineg();
      }, o9.prototype.ineg = function() {
        return this.isZero() || ((this || i$3).negative ^= 1), this || i$3;
      }, o9.prototype.iuor = function(t8) {
        for (; (this || i$3).length < t8.length; )
          (this || i$3).words[(this || i$3).length++] = 0;
        for (var r10 = 0; r10 < t8.length; r10++)
          (this || i$3).words[r10] = (this || i$3).words[r10] | t8.words[r10];
        return this.strip();
      }, o9.prototype.ior = function(t8) {
        return n9(0 == ((this || i$3).negative | t8.negative)), this.iuor(t8);
      }, o9.prototype.or = function(t8) {
        return (this || i$3).length > t8.length ? this.clone().ior(t8) : t8.clone().ior(this || i$3);
      }, o9.prototype.uor = function(t8) {
        return (this || i$3).length > t8.length ? this.clone().iuor(t8) : t8.clone().iuor(this || i$3);
      }, o9.prototype.iuand = function(t8) {
        var r10;
        r10 = (this || i$3).length > t8.length ? t8 : this || i$3;
        for (var h9 = 0; h9 < r10.length; h9++)
          (this || i$3).words[h9] = (this || i$3).words[h9] & t8.words[h9];
        return (this || i$3).length = r10.length, this.strip();
      }, o9.prototype.iand = function(t8) {
        return n9(0 == ((this || i$3).negative | t8.negative)), this.iuand(t8);
      }, o9.prototype.and = function(t8) {
        return (this || i$3).length > t8.length ? this.clone().iand(t8) : t8.clone().iand(this || i$3);
      }, o9.prototype.uand = function(t8) {
        return (this || i$3).length > t8.length ? this.clone().iuand(t8) : t8.clone().iuand(this || i$3);
      }, o9.prototype.iuxor = function(t8) {
        var r10, h9;
        (this || i$3).length > t8.length ? (r10 = this || i$3, h9 = t8) : (r10 = t8, h9 = this || i$3);
        for (var n10 = 0; n10 < h9.length; n10++)
          (this || i$3).words[n10] = r10.words[n10] ^ h9.words[n10];
        if ((this || i$3) !== r10)
          for (; n10 < r10.length; n10++)
            (this || i$3).words[n10] = r10.words[n10];
        return (this || i$3).length = r10.length, this.strip();
      }, o9.prototype.ixor = function(t8) {
        return n9(0 == ((this || i$3).negative | t8.negative)), this.iuxor(t8);
      }, o9.prototype.xor = function(t8) {
        return (this || i$3).length > t8.length ? this.clone().ixor(t8) : t8.clone().ixor(this || i$3);
      }, o9.prototype.uxor = function(t8) {
        return (this || i$3).length > t8.length ? this.clone().iuxor(t8) : t8.clone().iuxor(this || i$3);
      }, o9.prototype.inotn = function(t8) {
        n9("number" == typeof t8 && t8 >= 0);
        var r10 = 0 | Math.ceil(t8 / 26), h9 = t8 % 26;
        this._expand(r10), h9 > 0 && r10--;
        for (var e12 = 0; e12 < r10; e12++)
          (this || i$3).words[e12] = 67108863 & ~(this || i$3).words[e12];
        return h9 > 0 && ((this || i$3).words[e12] = ~(this || i$3).words[e12] & 67108863 >> 26 - h9), this.strip();
      }, o9.prototype.notn = function(t8) {
        return this.clone().inotn(t8);
      }, o9.prototype.setn = function(t8, r10) {
        n9("number" == typeof t8 && t8 >= 0);
        var h9 = t8 / 26 | 0, e12 = t8 % 26;
        return this._expand(h9 + 1), (this || i$3).words[h9] = r10 ? (this || i$3).words[h9] | 1 << e12 : (this || i$3).words[h9] & ~(1 << e12), this.strip();
      }, o9.prototype.iadd = function(t8) {
        var r10, h9, n10;
        if (0 !== (this || i$3).negative && 0 === t8.negative)
          return (this || i$3).negative = 0, r10 = this.isub(t8), (this || i$3).negative ^= 1, this._normSign();
        if (0 === (this || i$3).negative && 0 !== t8.negative)
          return t8.negative = 0, r10 = this.isub(t8), t8.negative = 1, r10._normSign();
        (this || i$3).length > t8.length ? (h9 = this || i$3, n10 = t8) : (h9 = t8, n10 = this || i$3);
        for (var e12 = 0, o10 = 0; o10 < n10.length; o10++)
          r10 = (0 | h9.words[o10]) + (0 | n10.words[o10]) + e12, (this || i$3).words[o10] = 67108863 & r10, e12 = r10 >>> 26;
        for (; 0 !== e12 && o10 < h9.length; o10++)
          r10 = (0 | h9.words[o10]) + e12, (this || i$3).words[o10] = 67108863 & r10, e12 = r10 >>> 26;
        if ((this || i$3).length = h9.length, 0 !== e12)
          (this || i$3).words[(this || i$3).length] = e12, (this || i$3).length++;
        else if (h9 !== (this || i$3))
          for (; o10 < h9.length; o10++)
            (this || i$3).words[o10] = h9.words[o10];
        return this || i$3;
      }, o9.prototype.add = function(t8) {
        var r10;
        return 0 !== t8.negative && 0 === (this || i$3).negative ? (t8.negative = 0, r10 = this.sub(t8), t8.negative ^= 1, r10) : 0 === t8.negative && 0 !== (this || i$3).negative ? ((this || i$3).negative = 0, r10 = t8.sub(this || i$3), (this || i$3).negative = 1, r10) : (this || i$3).length > t8.length ? this.clone().iadd(t8) : t8.clone().iadd(this || i$3);
      }, o9.prototype.isub = function(t8) {
        if (0 !== t8.negative) {
          t8.negative = 0;
          var r10 = this.iadd(t8);
          return t8.negative = 1, r10._normSign();
        }
        if (0 !== (this || i$3).negative)
          return (this || i$3).negative = 0, this.iadd(t8), (this || i$3).negative = 1, this._normSign();
        var h9, n10, e12 = this.cmp(t8);
        if (0 === e12)
          return (this || i$3).negative = 0, (this || i$3).length = 1, (this || i$3).words[0] = 0, this || i$3;
        e12 > 0 ? (h9 = this || i$3, n10 = t8) : (h9 = t8, n10 = this || i$3);
        for (var o10 = 0, s8 = 0; s8 < n10.length; s8++)
          o10 = (r10 = (0 | h9.words[s8]) - (0 | n10.words[s8]) + o10) >> 26, (this || i$3).words[s8] = 67108863 & r10;
        for (; 0 !== o10 && s8 < h9.length; s8++)
          o10 = (r10 = (0 | h9.words[s8]) + o10) >> 26, (this || i$3).words[s8] = 67108863 & r10;
        if (0 === o10 && s8 < h9.length && h9 !== (this || i$3))
          for (; s8 < h9.length; s8++)
            (this || i$3).words[s8] = h9.words[s8];
        return (this || i$3).length = Math.max((this || i$3).length, s8), h9 !== (this || i$3) && ((this || i$3).negative = 1), this.strip();
      }, o9.prototype.sub = function(t8) {
        return this.clone().isub(t8);
      };
      var p8 = function(t8, i8, r10) {
        var h9, n10, e12, o10 = t8.words, s8 = i8.words, u9 = r10.words, a9 = 0, l9 = 0 | o10[0], m7 = 8191 & l9, f10 = l9 >>> 13, d7 = 0 | o10[1], p9 = 8191 & d7, M5 = d7 >>> 13, v7 = 0 | o10[2], g6 = 8191 & v7, c9 = v7 >>> 13, w5 = 0 | o10[3], y7 = 8191 & w5, b6 = w5 >>> 13, _5 = 0 | o10[4], k5 = 8191 & _5, A5 = _5 >>> 13, x4 = 0 | o10[5], S4 = 8191 & x4, Z3 = x4 >>> 13, R4 = 0 | o10[6], q3 = 8191 & R4, B4 = R4 >>> 13, N4 = 0 | o10[7], L4 = 8191 & N4, I4 = N4 >>> 13, T5 = 0 | o10[8], z5 = 8191 & T5, E4 = T5 >>> 13, O5 = 0 | o10[9], j4 = 8191 & O5, K3 = O5 >>> 13, P4 = 0 | s8[0], F4 = 8191 & P4, C4 = P4 >>> 13, D4 = 0 | s8[1], H3 = 8191 & D4, J3 = D4 >>> 13, U4 = 0 | s8[2], G3 = 8191 & U4, Q3 = U4 >>> 13, V3 = 0 | s8[3], W3 = 8191 & V3, X3 = V3 >>> 13, Y4 = 0 | s8[4], $3 = 8191 & Y4, tt2 = Y4 >>> 13, it2 = 0 | s8[5], rt = 8191 & it2, ht2 = it2 >>> 13, nt2 = 0 | s8[6], et2 = 8191 & nt2, ot = nt2 >>> 13, st2 = 0 | s8[7], ut = 8191 & st2, at = st2 >>> 13, lt = 0 | s8[8], mt = 8191 & lt, ft = lt >>> 13, dt = 0 | s8[9], pt = 8191 & dt, Mt = dt >>> 13;
        r10.negative = t8.negative ^ i8.negative, r10.length = 19;
        var vt = (a9 + (h9 = Math.imul(m7, F4)) | 0) + ((8191 & (n10 = (n10 = Math.imul(m7, C4)) + Math.imul(f10, F4) | 0)) << 13) | 0;
        a9 = ((e12 = Math.imul(f10, C4)) + (n10 >>> 13) | 0) + (vt >>> 26) | 0, vt &= 67108863, h9 = Math.imul(p9, F4), n10 = (n10 = Math.imul(p9, C4)) + Math.imul(M5, F4) | 0, e12 = Math.imul(M5, C4);
        var gt = (a9 + (h9 = h9 + Math.imul(m7, H3) | 0) | 0) + ((8191 & (n10 = (n10 = n10 + Math.imul(m7, J3) | 0) + Math.imul(f10, H3) | 0)) << 13) | 0;
        a9 = ((e12 = e12 + Math.imul(f10, J3) | 0) + (n10 >>> 13) | 0) + (gt >>> 26) | 0, gt &= 67108863, h9 = Math.imul(g6, F4), n10 = (n10 = Math.imul(g6, C4)) + Math.imul(c9, F4) | 0, e12 = Math.imul(c9, C4), h9 = h9 + Math.imul(p9, H3) | 0, n10 = (n10 = n10 + Math.imul(p9, J3) | 0) + Math.imul(M5, H3) | 0, e12 = e12 + Math.imul(M5, J3) | 0;
        var ct = (a9 + (h9 = h9 + Math.imul(m7, G3) | 0) | 0) + ((8191 & (n10 = (n10 = n10 + Math.imul(m7, Q3) | 0) + Math.imul(f10, G3) | 0)) << 13) | 0;
        a9 = ((e12 = e12 + Math.imul(f10, Q3) | 0) + (n10 >>> 13) | 0) + (ct >>> 26) | 0, ct &= 67108863, h9 = Math.imul(y7, F4), n10 = (n10 = Math.imul(y7, C4)) + Math.imul(b6, F4) | 0, e12 = Math.imul(b6, C4), h9 = h9 + Math.imul(g6, H3) | 0, n10 = (n10 = n10 + Math.imul(g6, J3) | 0) + Math.imul(c9, H3) | 0, e12 = e12 + Math.imul(c9, J3) | 0, h9 = h9 + Math.imul(p9, G3) | 0, n10 = (n10 = n10 + Math.imul(p9, Q3) | 0) + Math.imul(M5, G3) | 0, e12 = e12 + Math.imul(M5, Q3) | 0;
        var wt = (a9 + (h9 = h9 + Math.imul(m7, W3) | 0) | 0) + ((8191 & (n10 = (n10 = n10 + Math.imul(m7, X3) | 0) + Math.imul(f10, W3) | 0)) << 13) | 0;
        a9 = ((e12 = e12 + Math.imul(f10, X3) | 0) + (n10 >>> 13) | 0) + (wt >>> 26) | 0, wt &= 67108863, h9 = Math.imul(k5, F4), n10 = (n10 = Math.imul(k5, C4)) + Math.imul(A5, F4) | 0, e12 = Math.imul(A5, C4), h9 = h9 + Math.imul(y7, H3) | 0, n10 = (n10 = n10 + Math.imul(y7, J3) | 0) + Math.imul(b6, H3) | 0, e12 = e12 + Math.imul(b6, J3) | 0, h9 = h9 + Math.imul(g6, G3) | 0, n10 = (n10 = n10 + Math.imul(g6, Q3) | 0) + Math.imul(c9, G3) | 0, e12 = e12 + Math.imul(c9, Q3) | 0, h9 = h9 + Math.imul(p9, W3) | 0, n10 = (n10 = n10 + Math.imul(p9, X3) | 0) + Math.imul(M5, W3) | 0, e12 = e12 + Math.imul(M5, X3) | 0;
        var yt = (a9 + (h9 = h9 + Math.imul(m7, $3) | 0) | 0) + ((8191 & (n10 = (n10 = n10 + Math.imul(m7, tt2) | 0) + Math.imul(f10, $3) | 0)) << 13) | 0;
        a9 = ((e12 = e12 + Math.imul(f10, tt2) | 0) + (n10 >>> 13) | 0) + (yt >>> 26) | 0, yt &= 67108863, h9 = Math.imul(S4, F4), n10 = (n10 = Math.imul(S4, C4)) + Math.imul(Z3, F4) | 0, e12 = Math.imul(Z3, C4), h9 = h9 + Math.imul(k5, H3) | 0, n10 = (n10 = n10 + Math.imul(k5, J3) | 0) + Math.imul(A5, H3) | 0, e12 = e12 + Math.imul(A5, J3) | 0, h9 = h9 + Math.imul(y7, G3) | 0, n10 = (n10 = n10 + Math.imul(y7, Q3) | 0) + Math.imul(b6, G3) | 0, e12 = e12 + Math.imul(b6, Q3) | 0, h9 = h9 + Math.imul(g6, W3) | 0, n10 = (n10 = n10 + Math.imul(g6, X3) | 0) + Math.imul(c9, W3) | 0, e12 = e12 + Math.imul(c9, X3) | 0, h9 = h9 + Math.imul(p9, $3) | 0, n10 = (n10 = n10 + Math.imul(p9, tt2) | 0) + Math.imul(M5, $3) | 0, e12 = e12 + Math.imul(M5, tt2) | 0;
        var bt = (a9 + (h9 = h9 + Math.imul(m7, rt) | 0) | 0) + ((8191 & (n10 = (n10 = n10 + Math.imul(m7, ht2) | 0) + Math.imul(f10, rt) | 0)) << 13) | 0;
        a9 = ((e12 = e12 + Math.imul(f10, ht2) | 0) + (n10 >>> 13) | 0) + (bt >>> 26) | 0, bt &= 67108863, h9 = Math.imul(q3, F4), n10 = (n10 = Math.imul(q3, C4)) + Math.imul(B4, F4) | 0, e12 = Math.imul(B4, C4), h9 = h9 + Math.imul(S4, H3) | 0, n10 = (n10 = n10 + Math.imul(S4, J3) | 0) + Math.imul(Z3, H3) | 0, e12 = e12 + Math.imul(Z3, J3) | 0, h9 = h9 + Math.imul(k5, G3) | 0, n10 = (n10 = n10 + Math.imul(k5, Q3) | 0) + Math.imul(A5, G3) | 0, e12 = e12 + Math.imul(A5, Q3) | 0, h9 = h9 + Math.imul(y7, W3) | 0, n10 = (n10 = n10 + Math.imul(y7, X3) | 0) + Math.imul(b6, W3) | 0, e12 = e12 + Math.imul(b6, X3) | 0, h9 = h9 + Math.imul(g6, $3) | 0, n10 = (n10 = n10 + Math.imul(g6, tt2) | 0) + Math.imul(c9, $3) | 0, e12 = e12 + Math.imul(c9, tt2) | 0, h9 = h9 + Math.imul(p9, rt) | 0, n10 = (n10 = n10 + Math.imul(p9, ht2) | 0) + Math.imul(M5, rt) | 0, e12 = e12 + Math.imul(M5, ht2) | 0;
        var _t2 = (a9 + (h9 = h9 + Math.imul(m7, et2) | 0) | 0) + ((8191 & (n10 = (n10 = n10 + Math.imul(m7, ot) | 0) + Math.imul(f10, et2) | 0)) << 13) | 0;
        a9 = ((e12 = e12 + Math.imul(f10, ot) | 0) + (n10 >>> 13) | 0) + (_t2 >>> 26) | 0, _t2 &= 67108863, h9 = Math.imul(L4, F4), n10 = (n10 = Math.imul(L4, C4)) + Math.imul(I4, F4) | 0, e12 = Math.imul(I4, C4), h9 = h9 + Math.imul(q3, H3) | 0, n10 = (n10 = n10 + Math.imul(q3, J3) | 0) + Math.imul(B4, H3) | 0, e12 = e12 + Math.imul(B4, J3) | 0, h9 = h9 + Math.imul(S4, G3) | 0, n10 = (n10 = n10 + Math.imul(S4, Q3) | 0) + Math.imul(Z3, G3) | 0, e12 = e12 + Math.imul(Z3, Q3) | 0, h9 = h9 + Math.imul(k5, W3) | 0, n10 = (n10 = n10 + Math.imul(k5, X3) | 0) + Math.imul(A5, W3) | 0, e12 = e12 + Math.imul(A5, X3) | 0, h9 = h9 + Math.imul(y7, $3) | 0, n10 = (n10 = n10 + Math.imul(y7, tt2) | 0) + Math.imul(b6, $3) | 0, e12 = e12 + Math.imul(b6, tt2) | 0, h9 = h9 + Math.imul(g6, rt) | 0, n10 = (n10 = n10 + Math.imul(g6, ht2) | 0) + Math.imul(c9, rt) | 0, e12 = e12 + Math.imul(c9, ht2) | 0, h9 = h9 + Math.imul(p9, et2) | 0, n10 = (n10 = n10 + Math.imul(p9, ot) | 0) + Math.imul(M5, et2) | 0, e12 = e12 + Math.imul(M5, ot) | 0;
        var kt = (a9 + (h9 = h9 + Math.imul(m7, ut) | 0) | 0) + ((8191 & (n10 = (n10 = n10 + Math.imul(m7, at) | 0) + Math.imul(f10, ut) | 0)) << 13) | 0;
        a9 = ((e12 = e12 + Math.imul(f10, at) | 0) + (n10 >>> 13) | 0) + (kt >>> 26) | 0, kt &= 67108863, h9 = Math.imul(z5, F4), n10 = (n10 = Math.imul(z5, C4)) + Math.imul(E4, F4) | 0, e12 = Math.imul(E4, C4), h9 = h9 + Math.imul(L4, H3) | 0, n10 = (n10 = n10 + Math.imul(L4, J3) | 0) + Math.imul(I4, H3) | 0, e12 = e12 + Math.imul(I4, J3) | 0, h9 = h9 + Math.imul(q3, G3) | 0, n10 = (n10 = n10 + Math.imul(q3, Q3) | 0) + Math.imul(B4, G3) | 0, e12 = e12 + Math.imul(B4, Q3) | 0, h9 = h9 + Math.imul(S4, W3) | 0, n10 = (n10 = n10 + Math.imul(S4, X3) | 0) + Math.imul(Z3, W3) | 0, e12 = e12 + Math.imul(Z3, X3) | 0, h9 = h9 + Math.imul(k5, $3) | 0, n10 = (n10 = n10 + Math.imul(k5, tt2) | 0) + Math.imul(A5, $3) | 0, e12 = e12 + Math.imul(A5, tt2) | 0, h9 = h9 + Math.imul(y7, rt) | 0, n10 = (n10 = n10 + Math.imul(y7, ht2) | 0) + Math.imul(b6, rt) | 0, e12 = e12 + Math.imul(b6, ht2) | 0, h9 = h9 + Math.imul(g6, et2) | 0, n10 = (n10 = n10 + Math.imul(g6, ot) | 0) + Math.imul(c9, et2) | 0, e12 = e12 + Math.imul(c9, ot) | 0, h9 = h9 + Math.imul(p9, ut) | 0, n10 = (n10 = n10 + Math.imul(p9, at) | 0) + Math.imul(M5, ut) | 0, e12 = e12 + Math.imul(M5, at) | 0;
        var At = (a9 + (h9 = h9 + Math.imul(m7, mt) | 0) | 0) + ((8191 & (n10 = (n10 = n10 + Math.imul(m7, ft) | 0) + Math.imul(f10, mt) | 0)) << 13) | 0;
        a9 = ((e12 = e12 + Math.imul(f10, ft) | 0) + (n10 >>> 13) | 0) + (At >>> 26) | 0, At &= 67108863, h9 = Math.imul(j4, F4), n10 = (n10 = Math.imul(j4, C4)) + Math.imul(K3, F4) | 0, e12 = Math.imul(K3, C4), h9 = h9 + Math.imul(z5, H3) | 0, n10 = (n10 = n10 + Math.imul(z5, J3) | 0) + Math.imul(E4, H3) | 0, e12 = e12 + Math.imul(E4, J3) | 0, h9 = h9 + Math.imul(L4, G3) | 0, n10 = (n10 = n10 + Math.imul(L4, Q3) | 0) + Math.imul(I4, G3) | 0, e12 = e12 + Math.imul(I4, Q3) | 0, h9 = h9 + Math.imul(q3, W3) | 0, n10 = (n10 = n10 + Math.imul(q3, X3) | 0) + Math.imul(B4, W3) | 0, e12 = e12 + Math.imul(B4, X3) | 0, h9 = h9 + Math.imul(S4, $3) | 0, n10 = (n10 = n10 + Math.imul(S4, tt2) | 0) + Math.imul(Z3, $3) | 0, e12 = e12 + Math.imul(Z3, tt2) | 0, h9 = h9 + Math.imul(k5, rt) | 0, n10 = (n10 = n10 + Math.imul(k5, ht2) | 0) + Math.imul(A5, rt) | 0, e12 = e12 + Math.imul(A5, ht2) | 0, h9 = h9 + Math.imul(y7, et2) | 0, n10 = (n10 = n10 + Math.imul(y7, ot) | 0) + Math.imul(b6, et2) | 0, e12 = e12 + Math.imul(b6, ot) | 0, h9 = h9 + Math.imul(g6, ut) | 0, n10 = (n10 = n10 + Math.imul(g6, at) | 0) + Math.imul(c9, ut) | 0, e12 = e12 + Math.imul(c9, at) | 0, h9 = h9 + Math.imul(p9, mt) | 0, n10 = (n10 = n10 + Math.imul(p9, ft) | 0) + Math.imul(M5, mt) | 0, e12 = e12 + Math.imul(M5, ft) | 0;
        var xt = (a9 + (h9 = h9 + Math.imul(m7, pt) | 0) | 0) + ((8191 & (n10 = (n10 = n10 + Math.imul(m7, Mt) | 0) + Math.imul(f10, pt) | 0)) << 13) | 0;
        a9 = ((e12 = e12 + Math.imul(f10, Mt) | 0) + (n10 >>> 13) | 0) + (xt >>> 26) | 0, xt &= 67108863, h9 = Math.imul(j4, H3), n10 = (n10 = Math.imul(j4, J3)) + Math.imul(K3, H3) | 0, e12 = Math.imul(K3, J3), h9 = h9 + Math.imul(z5, G3) | 0, n10 = (n10 = n10 + Math.imul(z5, Q3) | 0) + Math.imul(E4, G3) | 0, e12 = e12 + Math.imul(E4, Q3) | 0, h9 = h9 + Math.imul(L4, W3) | 0, n10 = (n10 = n10 + Math.imul(L4, X3) | 0) + Math.imul(I4, W3) | 0, e12 = e12 + Math.imul(I4, X3) | 0, h9 = h9 + Math.imul(q3, $3) | 0, n10 = (n10 = n10 + Math.imul(q3, tt2) | 0) + Math.imul(B4, $3) | 0, e12 = e12 + Math.imul(B4, tt2) | 0, h9 = h9 + Math.imul(S4, rt) | 0, n10 = (n10 = n10 + Math.imul(S4, ht2) | 0) + Math.imul(Z3, rt) | 0, e12 = e12 + Math.imul(Z3, ht2) | 0, h9 = h9 + Math.imul(k5, et2) | 0, n10 = (n10 = n10 + Math.imul(k5, ot) | 0) + Math.imul(A5, et2) | 0, e12 = e12 + Math.imul(A5, ot) | 0, h9 = h9 + Math.imul(y7, ut) | 0, n10 = (n10 = n10 + Math.imul(y7, at) | 0) + Math.imul(b6, ut) | 0, e12 = e12 + Math.imul(b6, at) | 0, h9 = h9 + Math.imul(g6, mt) | 0, n10 = (n10 = n10 + Math.imul(g6, ft) | 0) + Math.imul(c9, mt) | 0, e12 = e12 + Math.imul(c9, ft) | 0;
        var St = (a9 + (h9 = h9 + Math.imul(p9, pt) | 0) | 0) + ((8191 & (n10 = (n10 = n10 + Math.imul(p9, Mt) | 0) + Math.imul(M5, pt) | 0)) << 13) | 0;
        a9 = ((e12 = e12 + Math.imul(M5, Mt) | 0) + (n10 >>> 13) | 0) + (St >>> 26) | 0, St &= 67108863, h9 = Math.imul(j4, G3), n10 = (n10 = Math.imul(j4, Q3)) + Math.imul(K3, G3) | 0, e12 = Math.imul(K3, Q3), h9 = h9 + Math.imul(z5, W3) | 0, n10 = (n10 = n10 + Math.imul(z5, X3) | 0) + Math.imul(E4, W3) | 0, e12 = e12 + Math.imul(E4, X3) | 0, h9 = h9 + Math.imul(L4, $3) | 0, n10 = (n10 = n10 + Math.imul(L4, tt2) | 0) + Math.imul(I4, $3) | 0, e12 = e12 + Math.imul(I4, tt2) | 0, h9 = h9 + Math.imul(q3, rt) | 0, n10 = (n10 = n10 + Math.imul(q3, ht2) | 0) + Math.imul(B4, rt) | 0, e12 = e12 + Math.imul(B4, ht2) | 0, h9 = h9 + Math.imul(S4, et2) | 0, n10 = (n10 = n10 + Math.imul(S4, ot) | 0) + Math.imul(Z3, et2) | 0, e12 = e12 + Math.imul(Z3, ot) | 0, h9 = h9 + Math.imul(k5, ut) | 0, n10 = (n10 = n10 + Math.imul(k5, at) | 0) + Math.imul(A5, ut) | 0, e12 = e12 + Math.imul(A5, at) | 0, h9 = h9 + Math.imul(y7, mt) | 0, n10 = (n10 = n10 + Math.imul(y7, ft) | 0) + Math.imul(b6, mt) | 0, e12 = e12 + Math.imul(b6, ft) | 0;
        var Zt = (a9 + (h9 = h9 + Math.imul(g6, pt) | 0) | 0) + ((8191 & (n10 = (n10 = n10 + Math.imul(g6, Mt) | 0) + Math.imul(c9, pt) | 0)) << 13) | 0;
        a9 = ((e12 = e12 + Math.imul(c9, Mt) | 0) + (n10 >>> 13) | 0) + (Zt >>> 26) | 0, Zt &= 67108863, h9 = Math.imul(j4, W3), n10 = (n10 = Math.imul(j4, X3)) + Math.imul(K3, W3) | 0, e12 = Math.imul(K3, X3), h9 = h9 + Math.imul(z5, $3) | 0, n10 = (n10 = n10 + Math.imul(z5, tt2) | 0) + Math.imul(E4, $3) | 0, e12 = e12 + Math.imul(E4, tt2) | 0, h9 = h9 + Math.imul(L4, rt) | 0, n10 = (n10 = n10 + Math.imul(L4, ht2) | 0) + Math.imul(I4, rt) | 0, e12 = e12 + Math.imul(I4, ht2) | 0, h9 = h9 + Math.imul(q3, et2) | 0, n10 = (n10 = n10 + Math.imul(q3, ot) | 0) + Math.imul(B4, et2) | 0, e12 = e12 + Math.imul(B4, ot) | 0, h9 = h9 + Math.imul(S4, ut) | 0, n10 = (n10 = n10 + Math.imul(S4, at) | 0) + Math.imul(Z3, ut) | 0, e12 = e12 + Math.imul(Z3, at) | 0, h9 = h9 + Math.imul(k5, mt) | 0, n10 = (n10 = n10 + Math.imul(k5, ft) | 0) + Math.imul(A5, mt) | 0, e12 = e12 + Math.imul(A5, ft) | 0;
        var Rt = (a9 + (h9 = h9 + Math.imul(y7, pt) | 0) | 0) + ((8191 & (n10 = (n10 = n10 + Math.imul(y7, Mt) | 0) + Math.imul(b6, pt) | 0)) << 13) | 0;
        a9 = ((e12 = e12 + Math.imul(b6, Mt) | 0) + (n10 >>> 13) | 0) + (Rt >>> 26) | 0, Rt &= 67108863, h9 = Math.imul(j4, $3), n10 = (n10 = Math.imul(j4, tt2)) + Math.imul(K3, $3) | 0, e12 = Math.imul(K3, tt2), h9 = h9 + Math.imul(z5, rt) | 0, n10 = (n10 = n10 + Math.imul(z5, ht2) | 0) + Math.imul(E4, rt) | 0, e12 = e12 + Math.imul(E4, ht2) | 0, h9 = h9 + Math.imul(L4, et2) | 0, n10 = (n10 = n10 + Math.imul(L4, ot) | 0) + Math.imul(I4, et2) | 0, e12 = e12 + Math.imul(I4, ot) | 0, h9 = h9 + Math.imul(q3, ut) | 0, n10 = (n10 = n10 + Math.imul(q3, at) | 0) + Math.imul(B4, ut) | 0, e12 = e12 + Math.imul(B4, at) | 0, h9 = h9 + Math.imul(S4, mt) | 0, n10 = (n10 = n10 + Math.imul(S4, ft) | 0) + Math.imul(Z3, mt) | 0, e12 = e12 + Math.imul(Z3, ft) | 0;
        var qt = (a9 + (h9 = h9 + Math.imul(k5, pt) | 0) | 0) + ((8191 & (n10 = (n10 = n10 + Math.imul(k5, Mt) | 0) + Math.imul(A5, pt) | 0)) << 13) | 0;
        a9 = ((e12 = e12 + Math.imul(A5, Mt) | 0) + (n10 >>> 13) | 0) + (qt >>> 26) | 0, qt &= 67108863, h9 = Math.imul(j4, rt), n10 = (n10 = Math.imul(j4, ht2)) + Math.imul(K3, rt) | 0, e12 = Math.imul(K3, ht2), h9 = h9 + Math.imul(z5, et2) | 0, n10 = (n10 = n10 + Math.imul(z5, ot) | 0) + Math.imul(E4, et2) | 0, e12 = e12 + Math.imul(E4, ot) | 0, h9 = h9 + Math.imul(L4, ut) | 0, n10 = (n10 = n10 + Math.imul(L4, at) | 0) + Math.imul(I4, ut) | 0, e12 = e12 + Math.imul(I4, at) | 0, h9 = h9 + Math.imul(q3, mt) | 0, n10 = (n10 = n10 + Math.imul(q3, ft) | 0) + Math.imul(B4, mt) | 0, e12 = e12 + Math.imul(B4, ft) | 0;
        var Bt = (a9 + (h9 = h9 + Math.imul(S4, pt) | 0) | 0) + ((8191 & (n10 = (n10 = n10 + Math.imul(S4, Mt) | 0) + Math.imul(Z3, pt) | 0)) << 13) | 0;
        a9 = ((e12 = e12 + Math.imul(Z3, Mt) | 0) + (n10 >>> 13) | 0) + (Bt >>> 26) | 0, Bt &= 67108863, h9 = Math.imul(j4, et2), n10 = (n10 = Math.imul(j4, ot)) + Math.imul(K3, et2) | 0, e12 = Math.imul(K3, ot), h9 = h9 + Math.imul(z5, ut) | 0, n10 = (n10 = n10 + Math.imul(z5, at) | 0) + Math.imul(E4, ut) | 0, e12 = e12 + Math.imul(E4, at) | 0, h9 = h9 + Math.imul(L4, mt) | 0, n10 = (n10 = n10 + Math.imul(L4, ft) | 0) + Math.imul(I4, mt) | 0, e12 = e12 + Math.imul(I4, ft) | 0;
        var Nt = (a9 + (h9 = h9 + Math.imul(q3, pt) | 0) | 0) + ((8191 & (n10 = (n10 = n10 + Math.imul(q3, Mt) | 0) + Math.imul(B4, pt) | 0)) << 13) | 0;
        a9 = ((e12 = e12 + Math.imul(B4, Mt) | 0) + (n10 >>> 13) | 0) + (Nt >>> 26) | 0, Nt &= 67108863, h9 = Math.imul(j4, ut), n10 = (n10 = Math.imul(j4, at)) + Math.imul(K3, ut) | 0, e12 = Math.imul(K3, at), h9 = h9 + Math.imul(z5, mt) | 0, n10 = (n10 = n10 + Math.imul(z5, ft) | 0) + Math.imul(E4, mt) | 0, e12 = e12 + Math.imul(E4, ft) | 0;
        var Lt = (a9 + (h9 = h9 + Math.imul(L4, pt) | 0) | 0) + ((8191 & (n10 = (n10 = n10 + Math.imul(L4, Mt) | 0) + Math.imul(I4, pt) | 0)) << 13) | 0;
        a9 = ((e12 = e12 + Math.imul(I4, Mt) | 0) + (n10 >>> 13) | 0) + (Lt >>> 26) | 0, Lt &= 67108863, h9 = Math.imul(j4, mt), n10 = (n10 = Math.imul(j4, ft)) + Math.imul(K3, mt) | 0, e12 = Math.imul(K3, ft);
        var It = (a9 + (h9 = h9 + Math.imul(z5, pt) | 0) | 0) + ((8191 & (n10 = (n10 = n10 + Math.imul(z5, Mt) | 0) + Math.imul(E4, pt) | 0)) << 13) | 0;
        a9 = ((e12 = e12 + Math.imul(E4, Mt) | 0) + (n10 >>> 13) | 0) + (It >>> 26) | 0, It &= 67108863;
        var Tt = (a9 + (h9 = Math.imul(j4, pt)) | 0) + ((8191 & (n10 = (n10 = Math.imul(j4, Mt)) + Math.imul(K3, pt) | 0)) << 13) | 0;
        return a9 = ((e12 = Math.imul(K3, Mt)) + (n10 >>> 13) | 0) + (Tt >>> 26) | 0, Tt &= 67108863, u9[0] = vt, u9[1] = gt, u9[2] = ct, u9[3] = wt, u9[4] = yt, u9[5] = bt, u9[6] = _t2, u9[7] = kt, u9[8] = At, u9[9] = xt, u9[10] = St, u9[11] = Zt, u9[12] = Rt, u9[13] = qt, u9[14] = Bt, u9[15] = Nt, u9[16] = Lt, u9[17] = It, u9[18] = Tt, 0 !== a9 && (u9[19] = a9, r10.length++), r10;
      };
      function M4(t8, i8, r10) {
        return new v6().mulp(t8, i8, r10);
      }
      function v6(t8, r10) {
        (this || i$3).x = t8, (this || i$3).y = r10;
      }
      Math.imul || (p8 = d6), o9.prototype.mulTo = function(t8, r10) {
        var h9 = (this || i$3).length + t8.length;
        return 10 === (this || i$3).length && 10 === t8.length ? p8(this || i$3, t8, r10) : h9 < 63 ? d6(this || i$3, t8, r10) : h9 < 1024 ? function(t9, i8, r11) {
          r11.negative = i8.negative ^ t9.negative, r11.length = t9.length + i8.length;
          for (var h10 = 0, n10 = 0, e12 = 0; e12 < r11.length - 1; e12++) {
            var o10 = n10;
            n10 = 0;
            for (var s8 = 67108863 & h10, u9 = Math.min(e12, i8.length - 1), a9 = Math.max(0, e12 - t9.length + 1); a9 <= u9; a9++) {
              var l9 = e12 - a9, m7 = (0 | t9.words[l9]) * (0 | i8.words[a9]), f10 = 67108863 & m7;
              s8 = 67108863 & (f10 = f10 + s8 | 0), n10 += (o10 = (o10 = o10 + (m7 / 67108864 | 0) | 0) + (f10 >>> 26) | 0) >>> 26, o10 &= 67108863;
            }
            r11.words[e12] = s8, h10 = o10, o10 = n10;
          }
          return 0 !== h10 ? r11.words[e12] = h10 : r11.length--, r11.strip();
        }(this || i$3, t8, r10) : M4(this || i$3, t8, r10);
      }, v6.prototype.makeRBT = function(t8) {
        for (var i8 = new Array(t8), r10 = o9.prototype._countBits(t8) - 1, h9 = 0; h9 < t8; h9++)
          i8[h9] = this.revBin(h9, r10, t8);
        return i8;
      }, v6.prototype.revBin = function(t8, i8, r10) {
        if (0 === t8 || t8 === r10 - 1)
          return t8;
        for (var h9 = 0, n10 = 0; n10 < i8; n10++)
          h9 |= (1 & t8) << i8 - n10 - 1, t8 >>= 1;
        return h9;
      }, v6.prototype.permute = function(t8, i8, r10, h9, n10, e12) {
        for (var o10 = 0; o10 < e12; o10++)
          h9[o10] = i8[t8[o10]], n10[o10] = r10[t8[o10]];
      }, v6.prototype.transform = function(t8, i8, r10, h9, n10, e12) {
        this.permute(e12, t8, i8, r10, h9, n10);
        for (var o10 = 1; o10 < n10; o10 <<= 1)
          for (var s8 = o10 << 1, u9 = Math.cos(2 * Math.PI / s8), a9 = Math.sin(2 * Math.PI / s8), l9 = 0; l9 < n10; l9 += s8)
            for (var m7 = u9, f10 = a9, d7 = 0; d7 < o10; d7++) {
              var p9 = r10[l9 + d7], M5 = h9[l9 + d7], v7 = r10[l9 + d7 + o10], g6 = h9[l9 + d7 + o10], c9 = m7 * v7 - f10 * g6;
              g6 = m7 * g6 + f10 * v7, v7 = c9, r10[l9 + d7] = p9 + v7, h9[l9 + d7] = M5 + g6, r10[l9 + d7 + o10] = p9 - v7, h9[l9 + d7 + o10] = M5 - g6, d7 !== s8 && (c9 = u9 * m7 - a9 * f10, f10 = u9 * f10 + a9 * m7, m7 = c9);
            }
      }, v6.prototype.guessLen13b = function(t8, i8) {
        var r10 = 1 | Math.max(i8, t8), h9 = 1 & r10, n10 = 0;
        for (r10 = r10 / 2 | 0; r10; r10 >>>= 1)
          n10++;
        return 1 << n10 + 1 + h9;
      }, v6.prototype.conjugate = function(t8, i8, r10) {
        if (!(r10 <= 1))
          for (var h9 = 0; h9 < r10 / 2; h9++) {
            var n10 = t8[h9];
            t8[h9] = t8[r10 - h9 - 1], t8[r10 - h9 - 1] = n10, n10 = i8[h9], i8[h9] = -i8[r10 - h9 - 1], i8[r10 - h9 - 1] = -n10;
          }
      }, v6.prototype.normalize13b = function(t8, i8) {
        for (var r10 = 0, h9 = 0; h9 < i8 / 2; h9++) {
          var n10 = 8192 * Math.round(t8[2 * h9 + 1] / i8) + Math.round(t8[2 * h9] / i8) + r10;
          t8[h9] = 67108863 & n10, r10 = n10 < 67108864 ? 0 : n10 / 67108864 | 0;
        }
        return t8;
      }, v6.prototype.convert13b = function(t8, i8, r10, h9) {
        for (var e12 = 0, o10 = 0; o10 < i8; o10++)
          e12 += 0 | t8[o10], r10[2 * o10] = 8191 & e12, e12 >>>= 13, r10[2 * o10 + 1] = 8191 & e12, e12 >>>= 13;
        for (o10 = 2 * i8; o10 < h9; ++o10)
          r10[o10] = 0;
        n9(0 === e12), n9(0 == (-8192 & e12));
      }, v6.prototype.stub = function(t8) {
        for (var i8 = new Array(t8), r10 = 0; r10 < t8; r10++)
          i8[r10] = 0;
        return i8;
      }, v6.prototype.mulp = function(t8, i8, r10) {
        var h9 = 2 * this.guessLen13b(t8.length, i8.length), n10 = this.makeRBT(h9), e12 = this.stub(h9), o10 = new Array(h9), s8 = new Array(h9), u9 = new Array(h9), a9 = new Array(h9), l9 = new Array(h9), m7 = new Array(h9), f10 = r10.words;
        f10.length = h9, this.convert13b(t8.words, t8.length, o10, h9), this.convert13b(i8.words, i8.length, a9, h9), this.transform(o10, e12, s8, u9, h9, n10), this.transform(a9, e12, l9, m7, h9, n10);
        for (var d7 = 0; d7 < h9; d7++) {
          var p9 = s8[d7] * l9[d7] - u9[d7] * m7[d7];
          u9[d7] = s8[d7] * m7[d7] + u9[d7] * l9[d7], s8[d7] = p9;
        }
        return this.conjugate(s8, u9, h9), this.transform(s8, u9, f10, e12, h9, n10), this.conjugate(f10, e12, h9), this.normalize13b(f10, h9), r10.negative = t8.negative ^ i8.negative, r10.length = t8.length + i8.length, r10.strip();
      }, o9.prototype.mul = function(t8) {
        var r10 = new o9(null);
        return r10.words = new Array((this || i$3).length + t8.length), this.mulTo(t8, r10);
      }, o9.prototype.mulf = function(t8) {
        var r10 = new o9(null);
        return r10.words = new Array((this || i$3).length + t8.length), M4(this || i$3, t8, r10);
      }, o9.prototype.imul = function(t8) {
        return this.clone().mulTo(t8, this || i$3);
      }, o9.prototype.imuln = function(t8) {
        n9("number" == typeof t8), n9(t8 < 67108864);
        for (var r10 = 0, h9 = 0; h9 < (this || i$3).length; h9++) {
          var e12 = (0 | (this || i$3).words[h9]) * t8, o10 = (67108863 & e12) + (67108863 & r10);
          r10 >>= 26, r10 += e12 / 67108864 | 0, r10 += o10 >>> 26, (this || i$3).words[h9] = 67108863 & o10;
        }
        return 0 !== r10 && ((this || i$3).words[h9] = r10, (this || i$3).length++), this || i$3;
      }, o9.prototype.muln = function(t8) {
        return this.clone().imuln(t8);
      }, o9.prototype.sqr = function() {
        return this.mul(this || i$3);
      }, o9.prototype.isqr = function() {
        return this.imul(this.clone());
      }, o9.prototype.pow = function(t8) {
        var r10 = function(t9) {
          for (var i8 = new Array(t9.bitLength()), r11 = 0; r11 < i8.length; r11++) {
            var h10 = r11 / 26 | 0, n11 = r11 % 26;
            i8[r11] = (t9.words[h10] & 1 << n11) >>> n11;
          }
          return i8;
        }(t8);
        if (0 === r10.length)
          return new o9(1);
        for (var h9 = this || i$3, n10 = 0; n10 < r10.length && 0 === r10[n10]; n10++, h9 = h9.sqr())
          ;
        if (++n10 < r10.length)
          for (var e12 = h9.sqr(); n10 < r10.length; n10++, e12 = e12.sqr())
            0 !== r10[n10] && (h9 = h9.mul(e12));
        return h9;
      }, o9.prototype.iushln = function(t8) {
        n9("number" == typeof t8 && t8 >= 0);
        var r10, h9 = t8 % 26, e12 = (t8 - h9) / 26, o10 = 67108863 >>> 26 - h9 << 26 - h9;
        if (0 !== h9) {
          var s8 = 0;
          for (r10 = 0; r10 < (this || i$3).length; r10++) {
            var u9 = (this || i$3).words[r10] & o10, a9 = (0 | (this || i$3).words[r10]) - u9 << h9;
            (this || i$3).words[r10] = a9 | s8, s8 = u9 >>> 26 - h9;
          }
          s8 && ((this || i$3).words[r10] = s8, (this || i$3).length++);
        }
        if (0 !== e12) {
          for (r10 = (this || i$3).length - 1; r10 >= 0; r10--)
            (this || i$3).words[r10 + e12] = (this || i$3).words[r10];
          for (r10 = 0; r10 < e12; r10++)
            (this || i$3).words[r10] = 0;
          (this || i$3).length += e12;
        }
        return this.strip();
      }, o9.prototype.ishln = function(t8) {
        return n9(0 === (this || i$3).negative), this.iushln(t8);
      }, o9.prototype.iushrn = function(t8, r10, h9) {
        var e12;
        n9("number" == typeof t8 && t8 >= 0), e12 = r10 ? (r10 - r10 % 26) / 26 : 0;
        var o10 = t8 % 26, s8 = Math.min((t8 - o10) / 26, (this || i$3).length), u9 = 67108863 ^ 67108863 >>> o10 << o10, a9 = h9;
        if (e12 -= s8, e12 = Math.max(0, e12), a9) {
          for (var l9 = 0; l9 < s8; l9++)
            a9.words[l9] = (this || i$3).words[l9];
          a9.length = s8;
        }
        if (0 === s8)
          ;
        else if ((this || i$3).length > s8)
          for ((this || i$3).length -= s8, l9 = 0; l9 < (this || i$3).length; l9++)
            (this || i$3).words[l9] = (this || i$3).words[l9 + s8];
        else
          (this || i$3).words[0] = 0, (this || i$3).length = 1;
        var m7 = 0;
        for (l9 = (this || i$3).length - 1; l9 >= 0 && (0 !== m7 || l9 >= e12); l9--) {
          var f10 = 0 | (this || i$3).words[l9];
          (this || i$3).words[l9] = m7 << 26 - o10 | f10 >>> o10, m7 = f10 & u9;
        }
        return a9 && 0 !== m7 && (a9.words[a9.length++] = m7), 0 === (this || i$3).length && ((this || i$3).words[0] = 0, (this || i$3).length = 1), this.strip();
      }, o9.prototype.ishrn = function(t8, r10, h9) {
        return n9(0 === (this || i$3).negative), this.iushrn(t8, r10, h9);
      }, o9.prototype.shln = function(t8) {
        return this.clone().ishln(t8);
      }, o9.prototype.ushln = function(t8) {
        return this.clone().iushln(t8);
      }, o9.prototype.shrn = function(t8) {
        return this.clone().ishrn(t8);
      }, o9.prototype.ushrn = function(t8) {
        return this.clone().iushrn(t8);
      }, o9.prototype.testn = function(t8) {
        n9("number" == typeof t8 && t8 >= 0);
        var r10 = t8 % 26, h9 = (t8 - r10) / 26, e12 = 1 << r10;
        return !((this || i$3).length <= h9) && !!((this || i$3).words[h9] & e12);
      }, o9.prototype.imaskn = function(t8) {
        n9("number" == typeof t8 && t8 >= 0);
        var r10 = t8 % 26, h9 = (t8 - r10) / 26;
        if (n9(0 === (this || i$3).negative, "imaskn works only with positive numbers"), (this || i$3).length <= h9)
          return this || i$3;
        if (0 !== r10 && h9++, (this || i$3).length = Math.min(h9, (this || i$3).length), 0 !== r10) {
          var e12 = 67108863 ^ 67108863 >>> r10 << r10;
          (this || i$3).words[(this || i$3).length - 1] &= e12;
        }
        return this.strip();
      }, o9.prototype.maskn = function(t8) {
        return this.clone().imaskn(t8);
      }, o9.prototype.iaddn = function(t8) {
        return n9("number" == typeof t8), n9(t8 < 67108864), t8 < 0 ? this.isubn(-t8) : 0 !== (this || i$3).negative ? 1 === (this || i$3).length && (0 | (this || i$3).words[0]) < t8 ? ((this || i$3).words[0] = t8 - (0 | (this || i$3).words[0]), (this || i$3).negative = 0, this || i$3) : ((this || i$3).negative = 0, this.isubn(t8), (this || i$3).negative = 1, this || i$3) : this._iaddn(t8);
      }, o9.prototype._iaddn = function(t8) {
        (this || i$3).words[0] += t8;
        for (var r10 = 0; r10 < (this || i$3).length && (this || i$3).words[r10] >= 67108864; r10++)
          (this || i$3).words[r10] -= 67108864, r10 === (this || i$3).length - 1 ? (this || i$3).words[r10 + 1] = 1 : (this || i$3).words[r10 + 1]++;
        return (this || i$3).length = Math.max((this || i$3).length, r10 + 1), this || i$3;
      }, o9.prototype.isubn = function(t8) {
        if (n9("number" == typeof t8), n9(t8 < 67108864), t8 < 0)
          return this.iaddn(-t8);
        if (0 !== (this || i$3).negative)
          return (this || i$3).negative = 0, this.iaddn(t8), (this || i$3).negative = 1, this || i$3;
        if ((this || i$3).words[0] -= t8, 1 === (this || i$3).length && (this || i$3).words[0] < 0)
          (this || i$3).words[0] = -(this || i$3).words[0], (this || i$3).negative = 1;
        else
          for (var r10 = 0; r10 < (this || i$3).length && (this || i$3).words[r10] < 0; r10++)
            (this || i$3).words[r10] += 67108864, (this || i$3).words[r10 + 1] -= 1;
        return this.strip();
      }, o9.prototype.addn = function(t8) {
        return this.clone().iaddn(t8);
      }, o9.prototype.subn = function(t8) {
        return this.clone().isubn(t8);
      }, o9.prototype.iabs = function() {
        return (this || i$3).negative = 0, this || i$3;
      }, o9.prototype.abs = function() {
        return this.clone().iabs();
      }, o9.prototype._ishlnsubmul = function(t8, r10, h9) {
        var e12, o10, s8 = t8.length + h9;
        this._expand(s8);
        var u9 = 0;
        for (e12 = 0; e12 < t8.length; e12++) {
          o10 = (0 | (this || i$3).words[e12 + h9]) + u9;
          var a9 = (0 | t8.words[e12]) * r10;
          u9 = ((o10 -= 67108863 & a9) >> 26) - (a9 / 67108864 | 0), (this || i$3).words[e12 + h9] = 67108863 & o10;
        }
        for (; e12 < (this || i$3).length - h9; e12++)
          u9 = (o10 = (0 | (this || i$3).words[e12 + h9]) + u9) >> 26, (this || i$3).words[e12 + h9] = 67108863 & o10;
        if (0 === u9)
          return this.strip();
        for (n9(-1 === u9), u9 = 0, e12 = 0; e12 < (this || i$3).length; e12++)
          u9 = (o10 = -(0 | (this || i$3).words[e12]) + u9) >> 26, (this || i$3).words[e12] = 67108863 & o10;
        return (this || i$3).negative = 1, this.strip();
      }, o9.prototype._wordDiv = function(t8, r10) {
        var h9 = ((this || i$3).length, t8.length), n10 = this.clone(), e12 = t8, s8 = 0 | e12.words[e12.length - 1];
        0 !== (h9 = 26 - this._countBits(s8)) && (e12 = e12.ushln(h9), n10.iushln(h9), s8 = 0 | e12.words[e12.length - 1]);
        var u9, a9 = n10.length - e12.length;
        if ("mod" !== r10) {
          (u9 = new o9(null)).length = a9 + 1, u9.words = new Array(u9.length);
          for (var l9 = 0; l9 < u9.length; l9++)
            u9.words[l9] = 0;
        }
        var m7 = n10.clone()._ishlnsubmul(e12, 1, a9);
        0 === m7.negative && (n10 = m7, u9 && (u9.words[a9] = 1));
        for (var f10 = a9 - 1; f10 >= 0; f10--) {
          var d7 = 67108864 * (0 | n10.words[e12.length + f10]) + (0 | n10.words[e12.length + f10 - 1]);
          for (d7 = Math.min(d7 / s8 | 0, 67108863), n10._ishlnsubmul(e12, d7, f10); 0 !== n10.negative; )
            d7--, n10.negative = 0, n10._ishlnsubmul(e12, 1, f10), n10.isZero() || (n10.negative ^= 1);
          u9 && (u9.words[f10] = d7);
        }
        return u9 && u9.strip(), n10.strip(), "div" !== r10 && 0 !== h9 && n10.iushrn(h9), { div: u9 || null, mod: n10 };
      }, o9.prototype.divmod = function(t8, r10, h9) {
        return n9(!t8.isZero()), this.isZero() ? { div: new o9(0), mod: new o9(0) } : 0 !== (this || i$3).negative && 0 === t8.negative ? (u9 = this.neg().divmod(t8, r10), "mod" !== r10 && (e12 = u9.div.neg()), "div" !== r10 && (s8 = u9.mod.neg(), h9 && 0 !== s8.negative && s8.iadd(t8)), { div: e12, mod: s8 }) : 0 === (this || i$3).negative && 0 !== t8.negative ? (u9 = this.divmod(t8.neg(), r10), "mod" !== r10 && (e12 = u9.div.neg()), { div: e12, mod: u9.mod }) : 0 != ((this || i$3).negative & t8.negative) ? (u9 = this.neg().divmod(t8.neg(), r10), "div" !== r10 && (s8 = u9.mod.neg(), h9 && 0 !== s8.negative && s8.isub(t8)), { div: u9.div, mod: s8 }) : t8.length > (this || i$3).length || this.cmp(t8) < 0 ? { div: new o9(0), mod: this || i$3 } : 1 === t8.length ? "div" === r10 ? { div: this.divn(t8.words[0]), mod: null } : "mod" === r10 ? { div: null, mod: new o9(this.modn(t8.words[0])) } : { div: this.divn(t8.words[0]), mod: new o9(this.modn(t8.words[0])) } : this._wordDiv(t8, r10);
        var e12, s8, u9;
      }, o9.prototype.div = function(t8) {
        return this.divmod(t8, "div", false).div;
      }, o9.prototype.mod = function(t8) {
        return this.divmod(t8, "mod", false).mod;
      }, o9.prototype.umod = function(t8) {
        return this.divmod(t8, "mod", true).mod;
      }, o9.prototype.divRound = function(t8) {
        var i8 = this.divmod(t8);
        if (i8.mod.isZero())
          return i8.div;
        var r10 = 0 !== i8.div.negative ? i8.mod.isub(t8) : i8.mod, h9 = t8.ushrn(1), n10 = t8.andln(1), e12 = r10.cmp(h9);
        return e12 < 0 || 1 === n10 && 0 === e12 ? i8.div : 0 !== i8.div.negative ? i8.div.isubn(1) : i8.div.iaddn(1);
      }, o9.prototype.modn = function(t8) {
        n9(t8 <= 67108863);
        for (var r10 = (1 << 26) % t8, h9 = 0, e12 = (this || i$3).length - 1; e12 >= 0; e12--)
          h9 = (r10 * h9 + (0 | (this || i$3).words[e12])) % t8;
        return h9;
      }, o9.prototype.idivn = function(t8) {
        n9(t8 <= 67108863);
        for (var r10 = 0, h9 = (this || i$3).length - 1; h9 >= 0; h9--) {
          var e12 = (0 | (this || i$3).words[h9]) + 67108864 * r10;
          (this || i$3).words[h9] = e12 / t8 | 0, r10 = e12 % t8;
        }
        return this.strip();
      }, o9.prototype.divn = function(t8) {
        return this.clone().idivn(t8);
      }, o9.prototype.egcd = function(t8) {
        n9(0 === t8.negative), n9(!t8.isZero());
        var r10 = this || i$3, h9 = t8.clone();
        r10 = 0 !== r10.negative ? r10.umod(t8) : r10.clone();
        for (var e12 = new o9(1), s8 = new o9(0), u9 = new o9(0), a9 = new o9(1), l9 = 0; r10.isEven() && h9.isEven(); )
          r10.iushrn(1), h9.iushrn(1), ++l9;
        for (var m7 = h9.clone(), f10 = r10.clone(); !r10.isZero(); ) {
          for (var d7 = 0, p9 = 1; 0 == (r10.words[0] & p9) && d7 < 26; ++d7, p9 <<= 1)
            ;
          if (d7 > 0)
            for (r10.iushrn(d7); d7-- > 0; )
              (e12.isOdd() || s8.isOdd()) && (e12.iadd(m7), s8.isub(f10)), e12.iushrn(1), s8.iushrn(1);
          for (var M5 = 0, v7 = 1; 0 == (h9.words[0] & v7) && M5 < 26; ++M5, v7 <<= 1)
            ;
          if (M5 > 0)
            for (h9.iushrn(M5); M5-- > 0; )
              (u9.isOdd() || a9.isOdd()) && (u9.iadd(m7), a9.isub(f10)), u9.iushrn(1), a9.iushrn(1);
          r10.cmp(h9) >= 0 ? (r10.isub(h9), e12.isub(u9), s8.isub(a9)) : (h9.isub(r10), u9.isub(e12), a9.isub(s8));
        }
        return { a: u9, b: a9, gcd: h9.iushln(l9) };
      }, o9.prototype._invmp = function(t8) {
        n9(0 === t8.negative), n9(!t8.isZero());
        var r10 = this || i$3, h9 = t8.clone();
        r10 = 0 !== r10.negative ? r10.umod(t8) : r10.clone();
        for (var e12, s8 = new o9(1), u9 = new o9(0), a9 = h9.clone(); r10.cmpn(1) > 0 && h9.cmpn(1) > 0; ) {
          for (var l9 = 0, m7 = 1; 0 == (r10.words[0] & m7) && l9 < 26; ++l9, m7 <<= 1)
            ;
          if (l9 > 0)
            for (r10.iushrn(l9); l9-- > 0; )
              s8.isOdd() && s8.iadd(a9), s8.iushrn(1);
          for (var f10 = 0, d7 = 1; 0 == (h9.words[0] & d7) && f10 < 26; ++f10, d7 <<= 1)
            ;
          if (f10 > 0)
            for (h9.iushrn(f10); f10-- > 0; )
              u9.isOdd() && u9.iadd(a9), u9.iushrn(1);
          r10.cmp(h9) >= 0 ? (r10.isub(h9), s8.isub(u9)) : (h9.isub(r10), u9.isub(s8));
        }
        return (e12 = 0 === r10.cmpn(1) ? s8 : u9).cmpn(0) < 0 && e12.iadd(t8), e12;
      }, o9.prototype.gcd = function(t8) {
        if (this.isZero())
          return t8.abs();
        if (t8.isZero())
          return this.abs();
        var i8 = this.clone(), r10 = t8.clone();
        i8.negative = 0, r10.negative = 0;
        for (var h9 = 0; i8.isEven() && r10.isEven(); h9++)
          i8.iushrn(1), r10.iushrn(1);
        for (; ; ) {
          for (; i8.isEven(); )
            i8.iushrn(1);
          for (; r10.isEven(); )
            r10.iushrn(1);
          var n10 = i8.cmp(r10);
          if (n10 < 0) {
            var e12 = i8;
            i8 = r10, r10 = e12;
          } else if (0 === n10 || 0 === r10.cmpn(1))
            break;
          i8.isub(r10);
        }
        return r10.iushln(h9);
      }, o9.prototype.invm = function(t8) {
        return this.egcd(t8).a.umod(t8);
      }, o9.prototype.isEven = function() {
        return 0 == (1 & (this || i$3).words[0]);
      }, o9.prototype.isOdd = function() {
        return 1 == (1 & (this || i$3).words[0]);
      }, o9.prototype.andln = function(t8) {
        return (this || i$3).words[0] & t8;
      }, o9.prototype.bincn = function(t8) {
        n9("number" == typeof t8);
        var r10 = t8 % 26, h9 = (t8 - r10) / 26, e12 = 1 << r10;
        if ((this || i$3).length <= h9)
          return this._expand(h9 + 1), (this || i$3).words[h9] |= e12, this || i$3;
        for (var o10 = e12, s8 = h9; 0 !== o10 && s8 < (this || i$3).length; s8++) {
          var u9 = 0 | (this || i$3).words[s8];
          o10 = (u9 += o10) >>> 26, u9 &= 67108863, (this || i$3).words[s8] = u9;
        }
        return 0 !== o10 && ((this || i$3).words[s8] = o10, (this || i$3).length++), this || i$3;
      }, o9.prototype.isZero = function() {
        return 1 === (this || i$3).length && 0 === (this || i$3).words[0];
      }, o9.prototype.cmpn = function(t8) {
        var r10, h9 = t8 < 0;
        if (0 !== (this || i$3).negative && !h9)
          return -1;
        if (0 === (this || i$3).negative && h9)
          return 1;
        if (this.strip(), (this || i$3).length > 1)
          r10 = 1;
        else {
          h9 && (t8 = -t8), n9(t8 <= 67108863, "Number is too big");
          var e12 = 0 | (this || i$3).words[0];
          r10 = e12 === t8 ? 0 : e12 < t8 ? -1 : 1;
        }
        return 0 !== (this || i$3).negative ? 0 | -r10 : r10;
      }, o9.prototype.cmp = function(t8) {
        if (0 !== (this || i$3).negative && 0 === t8.negative)
          return -1;
        if (0 === (this || i$3).negative && 0 !== t8.negative)
          return 1;
        var r10 = this.ucmp(t8);
        return 0 !== (this || i$3).negative ? 0 | -r10 : r10;
      }, o9.prototype.ucmp = function(t8) {
        if ((this || i$3).length > t8.length)
          return 1;
        if ((this || i$3).length < t8.length)
          return -1;
        for (var r10 = 0, h9 = (this || i$3).length - 1; h9 >= 0; h9--) {
          var n10 = 0 | (this || i$3).words[h9], e12 = 0 | t8.words[h9];
          if (n10 !== e12) {
            n10 < e12 ? r10 = -1 : n10 > e12 && (r10 = 1);
            break;
          }
        }
        return r10;
      }, o9.prototype.gtn = function(t8) {
        return 1 === this.cmpn(t8);
      }, o9.prototype.gt = function(t8) {
        return 1 === this.cmp(t8);
      }, o9.prototype.gten = function(t8) {
        return this.cmpn(t8) >= 0;
      }, o9.prototype.gte = function(t8) {
        return this.cmp(t8) >= 0;
      }, o9.prototype.ltn = function(t8) {
        return -1 === this.cmpn(t8);
      }, o9.prototype.lt = function(t8) {
        return -1 === this.cmp(t8);
      }, o9.prototype.lten = function(t8) {
        return this.cmpn(t8) <= 0;
      }, o9.prototype.lte = function(t8) {
        return this.cmp(t8) <= 0;
      }, o9.prototype.eqn = function(t8) {
        return 0 === this.cmpn(t8);
      }, o9.prototype.eq = function(t8) {
        return 0 === this.cmp(t8);
      }, o9.red = function(t8) {
        return new k4(t8);
      }, o9.prototype.toRed = function(t8) {
        return n9(!(this || i$3).red, "Already a number in reduction context"), n9(0 === (this || i$3).negative, "red works only with positives"), t8.convertTo(this || i$3)._forceRed(t8);
      }, o9.prototype.fromRed = function() {
        return n9((this || i$3).red, "fromRed works only with numbers in reduction context"), (this || i$3).red.convertFrom(this || i$3);
      }, o9.prototype._forceRed = function(t8) {
        return (this || i$3).red = t8, this || i$3;
      }, o9.prototype.forceRed = function(t8) {
        return n9(!(this || i$3).red, "Already a number in reduction context"), this._forceRed(t8);
      }, o9.prototype.redAdd = function(t8) {
        return n9((this || i$3).red, "redAdd works only with red numbers"), (this || i$3).red.add(this || i$3, t8);
      }, o9.prototype.redIAdd = function(t8) {
        return n9((this || i$3).red, "redIAdd works only with red numbers"), (this || i$3).red.iadd(this || i$3, t8);
      }, o9.prototype.redSub = function(t8) {
        return n9((this || i$3).red, "redSub works only with red numbers"), (this || i$3).red.sub(this || i$3, t8);
      }, o9.prototype.redISub = function(t8) {
        return n9((this || i$3).red, "redISub works only with red numbers"), (this || i$3).red.isub(this || i$3, t8);
      }, o9.prototype.redShl = function(t8) {
        return n9((this || i$3).red, "redShl works only with red numbers"), (this || i$3).red.shl(this || i$3, t8);
      }, o9.prototype.redMul = function(t8) {
        return n9((this || i$3).red, "redMul works only with red numbers"), (this || i$3).red._verify2(this || i$3, t8), (this || i$3).red.mul(this || i$3, t8);
      }, o9.prototype.redIMul = function(t8) {
        return n9((this || i$3).red, "redMul works only with red numbers"), (this || i$3).red._verify2(this || i$3, t8), (this || i$3).red.imul(this || i$3, t8);
      }, o9.prototype.redSqr = function() {
        return n9((this || i$3).red, "redSqr works only with red numbers"), (this || i$3).red._verify1(this || i$3), (this || i$3).red.sqr(this || i$3);
      }, o9.prototype.redISqr = function() {
        return n9((this || i$3).red, "redISqr works only with red numbers"), (this || i$3).red._verify1(this || i$3), (this || i$3).red.isqr(this || i$3);
      }, o9.prototype.redSqrt = function() {
        return n9((this || i$3).red, "redSqrt works only with red numbers"), (this || i$3).red._verify1(this || i$3), (this || i$3).red.sqrt(this || i$3);
      }, o9.prototype.redInvm = function() {
        return n9((this || i$3).red, "redInvm works only with red numbers"), (this || i$3).red._verify1(this || i$3), (this || i$3).red.invm(this || i$3);
      }, o9.prototype.redNeg = function() {
        return n9((this || i$3).red, "redNeg works only with red numbers"), (this || i$3).red._verify1(this || i$3), (this || i$3).red.neg(this || i$3);
      }, o9.prototype.redPow = function(t8) {
        return n9((this || i$3).red && !t8.red, "redPow(normalNum)"), (this || i$3).red._verify1(this || i$3), (this || i$3).red.pow(this || i$3, t8);
      };
      var g5 = { k256: null, p224: null, p192: null, p25519: null };
      function c8(t8, r10) {
        (this || i$3).name = t8, (this || i$3).p = new o9(r10, 16), (this || i$3).n = (this || i$3).p.bitLength(), (this || i$3).k = new o9(1).iushln((this || i$3).n).isub((this || i$3).p), (this || i$3).tmp = this._tmp();
      }
      function w4() {
        c8.call(this || i$3, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
      }
      function y6() {
        c8.call(this || i$3, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
      }
      function b5() {
        c8.call(this || i$3, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
      }
      function _4() {
        c8.call(this || i$3, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
      }
      function k4(t8) {
        if ("string" == typeof t8) {
          var r10 = o9._prime(t8);
          (this || i$3).m = r10.p, (this || i$3).prime = r10;
        } else
          n9(t8.gtn(1), "modulus must be greater than 1"), (this || i$3).m = t8, (this || i$3).prime = null;
      }
      function A4(t8) {
        k4.call(this || i$3, t8), (this || i$3).shift = (this || i$3).m.bitLength(), (this || i$3).shift % 26 != 0 && ((this || i$3).shift += 26 - (this || i$3).shift % 26), (this || i$3).r = new o9(1).iushln((this || i$3).shift), (this || i$3).r2 = this.imod((this || i$3).r.sqr()), (this || i$3).rinv = (this || i$3).r._invmp((this || i$3).m), (this || i$3).minv = (this || i$3).rinv.mul((this || i$3).r).isubn(1).div((this || i$3).m), (this || i$3).minv = (this || i$3).minv.umod((this || i$3).r), (this || i$3).minv = (this || i$3).r.sub((this || i$3).minv);
      }
      c8.prototype._tmp = function() {
        var t8 = new o9(null);
        return t8.words = new Array(Math.ceil((this || i$3).n / 13)), t8;
      }, c8.prototype.ireduce = function(t8) {
        var r10, h9 = t8;
        do {
          this.split(h9, (this || i$3).tmp), r10 = (h9 = (h9 = this.imulK(h9)).iadd((this || i$3).tmp)).bitLength();
        } while (r10 > (this || i$3).n);
        var n10 = r10 < (this || i$3).n ? -1 : h9.ucmp((this || i$3).p);
        return 0 === n10 ? (h9.words[0] = 0, h9.length = 1) : n10 > 0 ? h9.isub((this || i$3).p) : h9.strip(), h9;
      }, c8.prototype.split = function(t8, r10) {
        t8.iushrn((this || i$3).n, 0, r10);
      }, c8.prototype.imulK = function(t8) {
        return t8.imul((this || i$3).k);
      }, e11(w4, c8), w4.prototype.split = function(t8, i8) {
        for (var r10 = Math.min(t8.length, 9), h9 = 0; h9 < r10; h9++)
          i8.words[h9] = t8.words[h9];
        if (i8.length = r10, t8.length <= 9)
          return t8.words[0] = 0, t8.length = 1, void 0;
        var n10 = t8.words[9];
        for (i8.words[i8.length++] = 4194303 & n10, h9 = 10; h9 < t8.length; h9++) {
          var e12 = 0 | t8.words[h9];
          t8.words[h9 - 10] = (4194303 & e12) << 4 | n10 >>> 22, n10 = e12;
        }
        n10 >>>= 22, t8.words[h9 - 10] = n10, 0 === n10 && t8.length > 10 ? t8.length -= 10 : t8.length -= 9;
      }, w4.prototype.imulK = function(t8) {
        t8.words[t8.length] = 0, t8.words[t8.length + 1] = 0, t8.length += 2;
        for (var i8 = 0, r10 = 0; r10 < t8.length; r10++) {
          var h9 = 0 | t8.words[r10];
          i8 += 977 * h9, t8.words[r10] = 67108863 & i8, i8 = 64 * h9 + (i8 / 67108864 | 0);
        }
        return 0 === t8.words[t8.length - 1] && (t8.length--, 0 === t8.words[t8.length - 1] && t8.length--), t8;
      }, e11(y6, c8), e11(b5, c8), e11(_4, c8), _4.prototype.imulK = function(t8) {
        for (var i8 = 0, r10 = 0; r10 < t8.length; r10++) {
          var h9 = 19 * (0 | t8.words[r10]) + i8, n10 = 67108863 & h9;
          h9 >>>= 26, t8.words[r10] = n10, i8 = h9;
        }
        return 0 !== i8 && (t8.words[t8.length++] = i8), t8;
      }, o9._prime = function(t8) {
        if (g5[t8])
          return g5[t8];
        var i8;
        if ("k256" === t8)
          i8 = new w4();
        else if ("p224" === t8)
          i8 = new y6();
        else if ("p192" === t8)
          i8 = new b5();
        else {
          if ("p25519" !== t8)
            throw new Error("Unknown prime " + t8);
          i8 = new _4();
        }
        return g5[t8] = i8, i8;
      }, k4.prototype._verify1 = function(t8) {
        n9(0 === t8.negative, "red works only with positives"), n9(t8.red, "red works only with red numbers");
      }, k4.prototype._verify2 = function(t8, i8) {
        n9(0 == (t8.negative | i8.negative), "red works only with positives"), n9(t8.red && t8.red === i8.red, "red works only with red numbers");
      }, k4.prototype.imod = function(t8) {
        return (this || i$3).prime ? (this || i$3).prime.ireduce(t8)._forceRed(this || i$3) : t8.umod((this || i$3).m)._forceRed(this || i$3);
      }, k4.prototype.neg = function(t8) {
        return t8.isZero() ? t8.clone() : (this || i$3).m.sub(t8)._forceRed(this || i$3);
      }, k4.prototype.add = function(t8, r10) {
        this._verify2(t8, r10);
        var h9 = t8.add(r10);
        return h9.cmp((this || i$3).m) >= 0 && h9.isub((this || i$3).m), h9._forceRed(this || i$3);
      }, k4.prototype.iadd = function(t8, r10) {
        this._verify2(t8, r10);
        var h9 = t8.iadd(r10);
        return h9.cmp((this || i$3).m) >= 0 && h9.isub((this || i$3).m), h9;
      }, k4.prototype.sub = function(t8, r10) {
        this._verify2(t8, r10);
        var h9 = t8.sub(r10);
        return h9.cmpn(0) < 0 && h9.iadd((this || i$3).m), h9._forceRed(this || i$3);
      }, k4.prototype.isub = function(t8, r10) {
        this._verify2(t8, r10);
        var h9 = t8.isub(r10);
        return h9.cmpn(0) < 0 && h9.iadd((this || i$3).m), h9;
      }, k4.prototype.shl = function(t8, i8) {
        return this._verify1(t8), this.imod(t8.ushln(i8));
      }, k4.prototype.imul = function(t8, i8) {
        return this._verify2(t8, i8), this.imod(t8.imul(i8));
      }, k4.prototype.mul = function(t8, i8) {
        return this._verify2(t8, i8), this.imod(t8.mul(i8));
      }, k4.prototype.isqr = function(t8) {
        return this.imul(t8, t8.clone());
      }, k4.prototype.sqr = function(t8) {
        return this.mul(t8, t8);
      }, k4.prototype.sqrt = function(t8) {
        if (t8.isZero())
          return t8.clone();
        var r10 = (this || i$3).m.andln(3);
        if (n9(r10 % 2 == 1), 3 === r10) {
          var h9 = (this || i$3).m.add(new o9(1)).iushrn(2);
          return this.pow(t8, h9);
        }
        for (var e12 = (this || i$3).m.subn(1), s8 = 0; !e12.isZero() && 0 === e12.andln(1); )
          s8++, e12.iushrn(1);
        n9(!e12.isZero());
        var u9 = new o9(1).toRed(this || i$3), a9 = u9.redNeg(), l9 = (this || i$3).m.subn(1).iushrn(1), m7 = (this || i$3).m.bitLength();
        for (m7 = new o9(2 * m7 * m7).toRed(this || i$3); 0 !== this.pow(m7, l9).cmp(a9); )
          m7.redIAdd(a9);
        for (var f10 = this.pow(m7, e12), d7 = this.pow(t8, e12.addn(1).iushrn(1)), p9 = this.pow(t8, e12), M5 = s8; 0 !== p9.cmp(u9); ) {
          for (var v7 = p9, g6 = 0; 0 !== v7.cmp(u9); g6++)
            v7 = v7.redSqr();
          n9(g6 < M5);
          var c9 = this.pow(f10, new o9(1).iushln(M5 - g6 - 1));
          d7 = d7.redMul(c9), f10 = c9.redSqr(), p9 = p9.redMul(f10), M5 = g6;
        }
        return d7;
      }, k4.prototype.invm = function(t8) {
        var r10 = t8._invmp((this || i$3).m);
        return 0 !== r10.negative ? (r10.negative = 0, this.imod(r10).redNeg()) : this.imod(r10);
      }, k4.prototype.pow = function(t8, r10) {
        if (r10.isZero())
          return new o9(1).toRed(this || i$3);
        if (0 === r10.cmpn(1))
          return t8.clone();
        var h9 = new Array(16);
        h9[0] = new o9(1).toRed(this || i$3), h9[1] = t8;
        for (var n10 = 2; n10 < h9.length; n10++)
          h9[n10] = this.mul(h9[n10 - 1], t8);
        var e12 = h9[0], s8 = 0, u9 = 0, a9 = r10.bitLength() % 26;
        for (0 === a9 && (a9 = 26), n10 = r10.length - 1; n10 >= 0; n10--) {
          for (var l9 = r10.words[n10], m7 = a9 - 1; m7 >= 0; m7--) {
            var f10 = l9 >> m7 & 1;
            e12 !== h9[0] && (e12 = this.sqr(e12)), 0 !== f10 || 0 !== s8 ? (s8 <<= 1, s8 |= f10, (4 === ++u9 || 0 === n10 && 0 === m7) && (e12 = this.mul(e12, h9[s8]), u9 = 0, s8 = 0)) : u9 = 0;
          }
          a9 = 26;
        }
        return e12;
      }, k4.prototype.convertTo = function(t8) {
        var r10 = t8.umod((this || i$3).m);
        return r10 === t8 ? r10.clone() : r10;
      }, k4.prototype.convertFrom = function(t8) {
        var i8 = t8.clone();
        return i8.red = null, i8;
      }, o9.mont = function(t8) {
        return new A4(t8);
      }, e11(A4, k4), A4.prototype.convertTo = function(t8) {
        return this.imod(t8.ushln((this || i$3).shift));
      }, A4.prototype.convertFrom = function(t8) {
        var r10 = this.imod(t8.mul((this || i$3).rinv));
        return r10.red = null, r10;
      }, A4.prototype.imul = function(t8, r10) {
        if (t8.isZero() || r10.isZero())
          return t8.words[0] = 0, t8.length = 1, t8;
        var h9 = t8.imul(r10), n10 = h9.maskn((this || i$3).shift).mul((this || i$3).minv).imaskn((this || i$3).shift).mul((this || i$3).m), e12 = h9.isub(n10).iushrn((this || i$3).shift), o10 = e12;
        return e12.cmp((this || i$3).m) >= 0 ? o10 = e12.isub((this || i$3).m) : e12.cmpn(0) < 0 && (o10 = e12.iadd((this || i$3).m)), o10._forceRed(this || i$3);
      }, A4.prototype.mul = function(t8, r10) {
        if (t8.isZero() || r10.isZero())
          return new o9(0)._forceRed(this || i$3);
        var h9 = t8.mul(r10), n10 = h9.maskn((this || i$3).shift).mul((this || i$3).minv).imaskn((this || i$3).shift).mul((this || i$3).m), e12 = h9.isub(n10).iushrn((this || i$3).shift), s8 = e12;
        return e12.cmp((this || i$3).m) >= 0 ? s8 = e12.isub((this || i$3).m) : e12.cmpn(0) < 0 && (s8 = e12.iadd((this || i$3).m)), s8._forceRed(this || i$3);
      }, A4.prototype.invm = function(t8) {
        return this.imod(t8._invmp((this || i$3).m).mul((this || i$3).r2))._forceRed(this || i$3);
      };
    }(h$a, r$7);
    n$c = h$a.exports;
    r$8 = Object.freeze({});
    n$d = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    if ((t$5 = function(t8) {
      return e$a || (e$a = new o$d(null)), e$a.generate(t8);
    }).Rand = o$d, o$d.prototype.generate = function(t8) {
      return this._rand(t8);
    }, o$d.prototype._rand = function(t8) {
      if ((this || n$d).rand.getBytes)
        return (this || n$d).rand.getBytes(t8);
      for (var e11 = new Uint8Array(t8), r9 = 0; r9 < e11.length; r9++)
        e11[r9] = (this || n$d).rand.getByte();
      return e11;
    }, "object" == typeof self)
      self.crypto && self.crypto.getRandomValues ? o$d.prototype._rand = function(t8) {
        var e11 = new Uint8Array(t8);
        return self.crypto.getRandomValues(e11), e11;
      } : self.msCrypto && self.msCrypto.getRandomValues ? o$d.prototype._rand = function(t8) {
        var e11 = new Uint8Array(t8);
        return self.msCrypto.getRandomValues(e11), e11;
      } : "object" == typeof window && (o$d.prototype._rand = function() {
        throw new Error("Not implemented yet");
      });
    else
      try {
        a$e = r$8;
        if ("function" != typeof a$e.randomBytes)
          throw new Error("Not supported");
        o$d.prototype._rand = function(t8) {
          return a$e.randomBytes(t8);
        };
      } catch (t8) {
      }
    f$i = t$5;
    t$6 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    o$e = n$c;
    a$f = f$i;
    n$e = d$b, d$b.create = function(r9) {
      return new d$b(r9);
    }, d$b.prototype._randbelow = function(r9) {
      var e11 = r9.bitLength(), n9 = Math.ceil(e11 / 8);
      do {
        var a8 = new o$e((this || t$6).rand.generate(n9));
      } while (a8.cmp(r9) >= 0);
      return a8;
    }, d$b.prototype._randrange = function(r9, e11) {
      var n9 = e11.sub(r9);
      return r9.add(this._randbelow(n9));
    }, d$b.prototype.test = function(r9, e11, n9) {
      var t8 = r9.bitLength(), a8 = o$e.mont(r9), d6 = new o$e(1).toRed(a8);
      e11 || (e11 = Math.max(1, t8 / 48 | 0));
      for (var i8 = r9.subn(1), f9 = 0; !i8.testn(f9); f9++)
        ;
      for (var u8 = r9.shrn(f9), p8 = i8.toRed(a8); e11 > 0; e11--) {
        var c8 = this._randrange(new o$e(2), i8);
        n9 && n9(c8);
        var s7 = c8.toRed(a8).redPow(u8);
        if (0 !== s7.cmp(d6) && 0 !== s7.cmp(p8)) {
          for (var m6 = 1; m6 < f9; m6++) {
            if (0 === (s7 = s7.redSqr()).cmp(d6))
              return false;
            if (0 === s7.cmp(p8))
              break;
          }
          if (m6 === f9)
            return false;
        }
      }
      return true;
    }, d$b.prototype.getDivisor = function(r9, e11) {
      var n9 = r9.bitLength(), t8 = o$e.mont(r9), a8 = new o$e(1).toRed(t8);
      e11 || (e11 = Math.max(1, n9 / 48 | 0));
      for (var d6 = r9.subn(1), i8 = 0; !d6.testn(i8); i8++)
        ;
      for (var f9 = r9.shrn(i8), u8 = d6.toRed(t8); e11 > 0; e11--) {
        var p8 = this._randrange(new o$e(2), d6), c8 = r9.gcd(p8);
        if (0 !== c8.cmpn(1))
          return c8;
        var s7 = p8.toRed(t8).redPow(f9);
        if (0 !== s7.cmp(a8) && 0 !== s7.cmp(u8)) {
          for (var m6 = 1; m6 < i8; m6++) {
            if (0 === (s7 = s7.redSqr()).cmp(a8))
              return s7.fromRed().subn(1).gcd(r9);
            if (0 === s7.cmp(u8))
              break;
          }
          if (m6 === i8)
            return (s7 = s7.redSqr()).fromRed().subn(1).gcd(r9);
        }
      }
      return false;
    };
    i$4 = n$e;
    d$c = a5;
    b$7 = v$9, v$9.simpleSieve = _$9, v$9.fermatTest = g$8;
    r$9 = n$c;
    t$7 = new r$9(24);
    n$f = new i$4();
    i$5 = new r$9(1);
    o$f = new r$9(2);
    p$e = new r$9(5);
    s$c = (new r$9(16), new r$9(8), new r$9(10));
    m$9 = new r$9(3);
    u$b = (new r$9(7), new r$9(11));
    h$b = new r$9(4);
    w$a = (new r$9(12), null);
    P$2 = b$7;
    B$5 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    K$2 = e$1$1.Buffer;
    R$1 = n$c;
    S$5 = new i$4();
    x$2 = new R$1(24);
    C$2 = new R$1(11);
    D$2 = new R$1(10);
    G$1 = new R$1(3);
    H$2 = new R$1(7);
    T$3 = P$2;
    j$1 = a5;
    y$9 = k$7;
    M$4 = {};
    Object.defineProperty(k$7.prototype, "verifyError", { enumerable: true, get: function() {
      return "number" != typeof (this || B$5)._primeCode && ((this || B$5)._primeCode = function(f9, e11) {
        var c8 = e11.toString("hex"), a8 = [c8, f9.toString(16)].join("_");
        if (a8 in M$4)
          return M$4[a8];
        var b5, d6 = 0;
        if (f9.isEven() || !T$3.simpleSieve || !T$3.fermatTest(f9) || !S$5.test(f9))
          return d6 += 1, d6 += "02" === c8 || "05" === c8 ? 8 : 4, M$4[a8] = d6, d6;
        switch (S$5.test(f9.shrn(1)) || (d6 += 2), c8) {
          case "02":
            f9.mod(x$2).cmp(C$2) && (d6 += 8);
            break;
          case "05":
            (b5 = f9.mod(D$2)).cmp(G$1) && b5.cmp(H$2) && (d6 += 8);
            break;
          default:
            d6 += 4;
        }
        return M$4[a8] = d6, d6;
      }((this || B$5).__prime, (this || B$5).__gen)), (this || B$5)._primeCode;
    } }), k$7.prototype.generateKeys = function() {
      return (this || B$5)._priv || ((this || B$5)._priv = new R$1(j$1((this || B$5)._primeLen))), (this || B$5)._pub = (this || B$5)._gen.toRed((this || B$5)._prime).redPow((this || B$5)._priv).fromRed(), this.getPublicKey();
    }, k$7.prototype.computeSecret = function(f9) {
      var e11 = (f9 = (f9 = new R$1(f9)).toRed((this || B$5)._prime)).redPow((this || B$5)._priv).fromRed(), c8 = new K$2(e11.toArray()), a8 = this.getPrime();
      if (c8.length < a8.length) {
        var b5 = new K$2(a8.length - c8.length);
        b5.fill(0), c8 = K$2.concat([b5, c8]);
      }
      return c8;
    }, k$7.prototype.getPublicKey = function(f9) {
      return A$5((this || B$5)._pub, f9);
    }, k$7.prototype.getPrivateKey = function(f9) {
      return A$5((this || B$5)._priv, f9);
    }, k$7.prototype.getPrime = function(f9) {
      return A$5((this || B$5).__prime, f9);
    }, k$7.prototype.getGenerator = function(f9) {
      return A$5((this || B$5)._gen, f9);
    }, k$7.prototype.setGenerator = function(f9, e11) {
      return e11 = e11 || "utf8", K$2.isBuffer(f9) || (f9 = new K$2(f9, e11)), (this || B$5).__gen = f9, (this || B$5)._gen = new R$1(f9), this || B$5;
    };
    q$1 = y$9;
    O$3 = {};
    z$3 = e$1$1.Buffer;
    F$3 = P$2;
    I$6 = { modp1: { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff" }, modp2: { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff" }, modp5: { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff" }, modp14: { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff" }, modp15: { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff" }, modp16: { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff" }, modp17: { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff" }, modp18: { gen: "02", prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff" } };
    J$1 = q$1;
    N$2 = { binary: true, hex: true, base64: true };
    O$3.DiffieHellmanGroup = O$3.createDiffieHellmanGroup = O$3.getDiffieHellman = function(f9) {
      var e11 = new z$3(I$6[f9].prime, "hex"), c8 = new z$3(I$6[f9].gen, "hex");
      return new J$1(e11, c8);
    }, O$3.createDiffieHellman = O$3.DiffieHellman = function f6(e11, c8, a8, b5) {
      return z$3.isBuffer(c8) || void 0 === N$2[c8] ? f6(e11, "binary", c8, a8) : (c8 = c8 || "binary", b5 = b5 || "binary", a8 = a8 || new z$3([2]), z$3.isBuffer(a8) || (a8 = new z$3(a8, b5)), "number" == typeof e11 ? new J$1(F$3(e11, a8), a8, true) : (z$3.isBuffer(e11) || (e11 = new z$3(e11, c8)), new J$1(e11, a8, true)));
    };
    u$c = e$1$1.Buffer;
    n$g = n$c;
    d$d = a5;
    m$a = t$8, t$8.getr = i$6;
    l$d = m$a;
    r$a = {};
    e$b = r$a;
    e$b.toArray = function(r9, e11) {
      if (Array.isArray(r9))
        return r9.slice();
      if (!r9)
        return [];
      var t8 = [];
      if ("string" != typeof r9) {
        for (var n9 = 0; n9 < r9.length; n9++)
          t8[n9] = 0 | r9[n9];
        return t8;
      }
      if ("hex" === e11) {
        (r9 = r9.replace(/[^a-z0-9]+/gi, "")).length % 2 != 0 && (r9 = "0" + r9);
        for (n9 = 0; n9 < r9.length; n9 += 2)
          t8.push(parseInt(r9[n9] + r9[n9 + 1], 16));
      } else
        for (n9 = 0; n9 < r9.length; n9++) {
          var o9 = r9.charCodeAt(n9), u8 = o9 >> 8, f9 = 255 & o9;
          u8 ? t8.push(u8, f9) : t8.push(f9);
        }
      return t8;
    }, e$b.zero2 = t$9, e$b.toHex = n$h, e$b.encode = function(r9, e11) {
      return "hex" === e11 ? n$h(r9) : r9;
    };
    n$i = {};
    a$g = n$i;
    i$7 = n$c;
    o$g = o$7;
    c$d = r$a;
    a$g.assert = o$g, a$g.toArray = c$d.toArray, a$g.zero2 = c$d.zero2, a$g.toHex = c$d.toHex, a$g.encode = c$d.encode, a$g.getNAF = function(r9, t8, e11) {
      var n9 = new Array(Math.max(r9.bitLength(), e11) + 1);
      n9.fill(0);
      for (var a8 = 1 << t8 + 1, i8 = r9.clone(), o9 = 0; o9 < n9.length; o9++) {
        var c8, s7 = i8.andln(a8 - 1);
        i8.isOdd() ? (c8 = s7 > (a8 >> 1) - 1 ? (a8 >> 1) - s7 : s7, i8.isubn(c8)) : c8 = 0, n9[o9] = c8, i8.iushrn(1);
      }
      return n9;
    }, a$g.getJSF = function(r9, t8) {
      var e11 = [[], []];
      r9 = r9.clone(), t8 = t8.clone();
      for (var n9 = 0, a8 = 0; r9.cmpn(-n9) > 0 || t8.cmpn(-a8) > 0; ) {
        var i8, o9, c8, s7 = r9.andln(3) + n9 & 3, l8 = t8.andln(3) + a8 & 3;
        if (3 === s7 && (s7 = -1), 3 === l8 && (l8 = -1), 0 == (1 & s7))
          i8 = 0;
        else
          i8 = 3 !== (c8 = r9.andln(7) + n9 & 7) && 5 !== c8 || 2 !== l8 ? s7 : -s7;
        if (e11[0].push(i8), 0 == (1 & l8))
          o9 = 0;
        else
          o9 = 3 !== (c8 = t8.andln(7) + a8 & 7) && 5 !== c8 || 2 !== s7 ? l8 : -l8;
        e11[1].push(o9), 2 * n9 === i8 + 1 && (n9 = 1 - n9), 2 * a8 === o9 + 1 && (a8 = 1 - a8), r9.iushrn(1), t8.iushrn(1);
      }
      return e11;
    }, a$g.cachedProperty = function(r9, t8, e11) {
      var n9 = "_" + t8;
      r9.prototype[t8] = function() {
        return void 0 !== this[n9] ? this[n9] : this[n9] = e11.call(this);
      };
    }, a$g.parseBytes = function(r9) {
      return "string" == typeof r9 ? a$g.toArray(r9, "hex") : r9;
    }, a$g.intFromLE = function(r9) {
      return new i$7(r9, "hex", "le");
    };
    l$e = n$c;
    u$d = n$i;
    h$c = u$d.assert;
    s$d = p$f, p$f.prototype._importDER = function(r9, t8) {
      r9 = u$d.toArray(r9, t8);
      var e11 = new f$j();
      if (48 !== r9[e11.place++])
        return false;
      if (v$a(r9, e11) + e11.place !== r9.length)
        return false;
      if (2 !== r9[e11.place++])
        return false;
      var n9 = v$a(r9, e11), a8 = r9.slice(e11.place, n9 + e11.place);
      if (e11.place += n9, 2 !== r9[e11.place++])
        return false;
      var i8 = v$a(r9, e11);
      if (r9.length !== i8 + e11.place)
        return false;
      var o9 = r9.slice(e11.place, i8 + e11.place);
      return 0 === a8[0] && 128 & a8[1] && (a8 = a8.slice(1)), 0 === o9[0] && 128 & o9[1] && (o9 = o9.slice(1)), this.r = new l$e(a8), this.s = new l$e(o9), this.recoveryParam = null, true;
    }, p$f.prototype.toDER = function(r9) {
      var t8 = this.r.toArray(), e11 = this.s.toArray();
      for (128 & t8[0] && (t8 = [0].concat(t8)), 128 & e11[0] && (e11 = [0].concat(e11)), t8 = m$b(t8), e11 = m$b(e11); !(e11[0] || 128 & e11[1]); )
        e11 = e11.slice(1);
      var n9 = [2];
      y$a(n9, t8.length), (n9 = n9.concat(t8)).push(2), y$a(n9, e11.length);
      var a8 = n9.concat(e11), i8 = [48];
      return y$a(i8, a8.length), i8 = i8.concat(a8), u$d.encode(i8, r9);
    };
    d$e = s$d;
    r$b = {};
    i$8 = o$7;
    e$c = t$2;
    r$b.inherits = e$c, r$b.toArray = function(t8, n9) {
      if (Array.isArray(t8))
        return t8.slice();
      if (!t8)
        return [];
      var r9 = [];
      if ("string" == typeof t8)
        if (n9) {
          if ("hex" === n9)
            for ((t8 = t8.replace(/[^a-z0-9]+/gi, "")).length % 2 != 0 && (t8 = "0" + t8), e11 = 0; e11 < t8.length; e11 += 2)
              r9.push(parseInt(t8[e11] + t8[e11 + 1], 16));
        } else
          for (var i8 = 0, e11 = 0; e11 < t8.length; e11++) {
            var o9 = t8.charCodeAt(e11);
            o9 < 128 ? r9[i8++] = o9 : o9 < 2048 ? (r9[i8++] = o9 >> 6 | 192, r9[i8++] = 63 & o9 | 128) : h$d(t8, e11) ? (o9 = 65536 + ((1023 & o9) << 10) + (1023 & t8.charCodeAt(++e11)), r9[i8++] = o9 >> 18 | 240, r9[i8++] = o9 >> 12 & 63 | 128, r9[i8++] = o9 >> 6 & 63 | 128, r9[i8++] = 63 & o9 | 128) : (r9[i8++] = o9 >> 12 | 224, r9[i8++] = o9 >> 6 & 63 | 128, r9[i8++] = 63 & o9 | 128);
          }
      else
        for (e11 = 0; e11 < t8.length; e11++)
          r9[e11] = 0 | t8[e11];
      return r9;
    }, r$b.toHex = function(t8) {
      for (var n9 = "", r9 = 0; r9 < t8.length; r9++)
        n9 += u$e(t8[r9].toString(16));
      return n9;
    }, r$b.htonl = o$h, r$b.toHex32 = function(t8, n9) {
      for (var r9 = "", i8 = 0; i8 < t8.length; i8++) {
        var e11 = t8[i8];
        "little" === n9 && (e11 = o$h(e11)), r9 += s$e(e11.toString(16));
      }
      return r9;
    }, r$b.zero2 = u$e, r$b.zero8 = s$e, r$b.join32 = function(t8, n9, r9, e11) {
      var h8 = r9 - n9;
      i$8(h8 % 4 == 0);
      for (var o9 = new Array(h8 / 4), u8 = 0, s7 = n9; u8 < o9.length; u8++, s7 += 4) {
        var a8;
        a8 = "big" === e11 ? t8[s7] << 24 | t8[s7 + 1] << 16 | t8[s7 + 2] << 8 | t8[s7 + 3] : t8[s7 + 3] << 24 | t8[s7 + 2] << 16 | t8[s7 + 1] << 8 | t8[s7], o9[u8] = a8 >>> 0;
      }
      return o9;
    }, r$b.split32 = function(t8, n9) {
      for (var r9 = new Array(4 * t8.length), i8 = 0, e11 = 0; i8 < t8.length; i8++, e11 += 4) {
        var h8 = t8[i8];
        "big" === n9 ? (r9[e11] = h8 >>> 24, r9[e11 + 1] = h8 >>> 16 & 255, r9[e11 + 2] = h8 >>> 8 & 255, r9[e11 + 3] = 255 & h8) : (r9[e11 + 3] = h8 >>> 24, r9[e11 + 2] = h8 >>> 16 & 255, r9[e11 + 1] = h8 >>> 8 & 255, r9[e11] = 255 & h8);
      }
      return r9;
    }, r$b.rotr32 = function(t8, n9) {
      return t8 >>> n9 | t8 << 32 - n9;
    }, r$b.rotl32 = function(t8, n9) {
      return t8 << n9 | t8 >>> 32 - n9;
    }, r$b.sum32 = function(t8, n9) {
      return t8 + n9 >>> 0;
    }, r$b.sum32_3 = function(t8, n9, r9) {
      return t8 + n9 + r9 >>> 0;
    }, r$b.sum32_4 = function(t8, n9, r9, i8) {
      return t8 + n9 + r9 + i8 >>> 0;
    }, r$b.sum32_5 = function(t8, n9, r9, i8, e11) {
      return t8 + n9 + r9 + i8 + e11 >>> 0;
    }, r$b.sum64 = function(t8, n9, r9, i8) {
      var e11 = t8[n9], h8 = i8 + t8[n9 + 1] >>> 0, o9 = (h8 < i8 ? 1 : 0) + r9 + e11;
      t8[n9] = o9 >>> 0, t8[n9 + 1] = h8;
    }, r$b.sum64_hi = function(t8, n9, r9, i8) {
      return (n9 + i8 >>> 0 < n9 ? 1 : 0) + t8 + r9 >>> 0;
    }, r$b.sum64_lo = function(t8, n9, r9, i8) {
      return n9 + i8 >>> 0;
    }, r$b.sum64_4_hi = function(t8, n9, r9, i8, e11, h8, o9, u8) {
      var s7 = 0, a8 = n9;
      return s7 += (a8 = a8 + i8 >>> 0) < n9 ? 1 : 0, s7 += (a8 = a8 + h8 >>> 0) < h8 ? 1 : 0, t8 + r9 + e11 + o9 + (s7 += (a8 = a8 + u8 >>> 0) < u8 ? 1 : 0) >>> 0;
    }, r$b.sum64_4_lo = function(t8, n9, r9, i8, e11, h8, o9, u8) {
      return n9 + i8 + h8 + u8 >>> 0;
    }, r$b.sum64_5_hi = function(t8, n9, r9, i8, e11, h8, o9, u8, s7, a8) {
      var l8 = 0, g5 = n9;
      return l8 += (g5 = g5 + i8 >>> 0) < n9 ? 1 : 0, l8 += (g5 = g5 + h8 >>> 0) < h8 ? 1 : 0, l8 += (g5 = g5 + u8 >>> 0) < u8 ? 1 : 0, t8 + r9 + e11 + o9 + s7 + (l8 += (g5 = g5 + a8 >>> 0) < a8 ? 1 : 0) >>> 0;
    }, r$b.sum64_5_lo = function(t8, n9, r9, i8, e11, h8, o9, u8, s7, a8) {
      return n9 + i8 + h8 + u8 + a8 >>> 0;
    }, r$b.rotr64_hi = function(t8, n9, r9) {
      return (n9 << 32 - r9 | t8 >>> r9) >>> 0;
    }, r$b.rotr64_lo = function(t8, n9, r9) {
      return (t8 << 32 - r9 | n9 >>> r9) >>> 0;
    }, r$b.shr64_hi = function(t8, n9, r9) {
      return t8 >>> r9;
    }, r$b.shr64_lo = function(t8, n9, r9) {
      return (t8 << 32 - r9 | n9 >>> r9) >>> 0;
    };
    a$h = {};
    l$f = r$b;
    g$9 = o$7;
    a$h.BlockHash = c$e, c$e.prototype.update = function(t8, n9) {
      if (t8 = l$f.toArray(t8, n9), this.pending ? this.pending = this.pending.concat(t8) : this.pending = t8, this.pendingTotal += t8.length, this.pending.length >= this._delta8) {
        var r9 = (t8 = this.pending).length % this._delta8;
        this.pending = t8.slice(t8.length - r9, t8.length), 0 === this.pending.length && (this.pending = null), t8 = l$f.join32(t8, 0, t8.length - r9, this.endian);
        for (var i8 = 0; i8 < t8.length; i8 += this._delta32)
          this._update(t8, i8, i8 + this._delta32);
      }
      return this;
    }, c$e.prototype.digest = function(t8) {
      return this.update(this._pad()), g$9(null === this.pending), this._digest(t8);
    }, c$e.prototype._pad = function() {
      var t8 = this.pendingTotal, n9 = this._delta8, r9 = n9 - (t8 + this.padLength) % n9, i8 = new Array(r9 + this.padLength);
      i8[0] = 128;
      for (var e11 = 1; e11 < r9; e11++)
        i8[e11] = 0;
      if (t8 <<= 3, "big" === this.endian) {
        for (var h8 = 8; h8 < this.padLength; h8++)
          i8[e11++] = 0;
        i8[e11++] = 0, i8[e11++] = 0, i8[e11++] = 0, i8[e11++] = 0, i8[e11++] = t8 >>> 24 & 255, i8[e11++] = t8 >>> 16 & 255, i8[e11++] = t8 >>> 8 & 255, i8[e11++] = 255 & t8;
      } else
        for (i8[e11++] = 255 & t8, i8[e11++] = t8 >>> 8 & 255, i8[e11++] = t8 >>> 16 & 255, i8[e11++] = t8 >>> 24 & 255, i8[e11++] = 0, i8[e11++] = 0, i8[e11++] = 0, i8[e11++] = 0, h8 = 8; h8 < this.padLength; h8++)
          i8[e11++] = 0;
      return i8;
    };
    n$j = r$b;
    s$f = a$h;
    o$i = o$7;
    e$d = n$j.rotr64_hi;
    u$f = n$j.rotr64_lo;
    a$i = n$j.shr64_hi;
    c$f = n$j.shr64_lo;
    f$k = n$j.sum64;
    v$b = n$j.sum64_hi;
    _$a = n$j.sum64_lo;
    l$g = n$j.sum64_4_hi;
    p$g = n$j.sum64_4_lo;
    m$c = n$j.sum64_5_hi;
    g$a = n$j.sum64_5_lo;
    k$8 = s$f.BlockHash;
    d$f = [1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591];
    n$j.inherits(y$b, k$8), r$c = y$b, y$b.blockSize = 1024, y$b.outSize = 512, y$b.hmacStrength = 192, y$b.padLength = 128, y$b.prototype._prepareBlock = function(t8, h8) {
      for (var i8 = this.W, r9 = 0; r9 < 32; r9++)
        i8[r9] = t8[h8 + r9];
      for (; r9 < i8.length; r9 += 2) {
        var n9 = L$2(i8[r9 - 4], i8[r9 - 3]), s7 = q$2(i8[r9 - 4], i8[r9 - 3]), o9 = i8[r9 - 14], e11 = i8[r9 - 13], u8 = j$2(i8[r9 - 30], i8[r9 - 29]), a8 = A$6(i8[r9 - 30], i8[r9 - 29]), c8 = i8[r9 - 32], f9 = i8[r9 - 31];
        i8[r9] = l$g(n9, s7, o9, e11, u8, a8, c8, f9), i8[r9 + 1] = p$g(n9, s7, o9, e11, u8, a8, c8, f9);
      }
    }, y$b.prototype._update = function(t8, h8) {
      this._prepareBlock(t8, h8);
      var i8 = this.W, r9 = this.h[0], n9 = this.h[1], s7 = this.h[2], e11 = this.h[3], u8 = this.h[4], a8 = this.h[5], c8 = this.h[6], l8 = this.h[7], p8 = this.h[8], k4 = this.h[9], d6 = this.h[10], y6 = this.h[11], j4 = this.h[12], A4 = this.h[13], L4 = this.h[14], q3 = this.h[15];
      o$i(this.k.length === i8.length);
      for (var C4 = 0; C4 < i8.length; C4 += 2) {
        var D4 = L4, E4 = q3, F4 = z$4(p8, k4), G3 = H$3(p8, k4), I4 = b$8(p8, k4, d6, y6, j4), J3 = x$3(p8, k4, d6, y6, j4, A4), K3 = this.k[C4], M4 = this.k[C4 + 1], N4 = i8[C4], O5 = i8[C4 + 1], P4 = m$c(D4, E4, F4, G3, I4, J3, K3, M4, N4, O5), Q3 = g$a(D4, E4, F4, G3, I4, J3, K3, M4, N4, O5);
        D4 = W$1(r9, n9), E4 = w$b(r9, n9), F4 = B$6(r9, n9, s7, e11, u8), G3 = S$6(r9, n9, s7, e11, u8, a8);
        var R4 = v$b(D4, E4, F4, G3), T5 = _$a(D4, E4, F4, G3);
        L4 = j4, q3 = A4, j4 = d6, A4 = y6, d6 = p8, y6 = k4, p8 = v$b(c8, l8, P4, Q3), k4 = _$a(l8, l8, P4, Q3), c8 = u8, l8 = a8, u8 = s7, a8 = e11, s7 = r9, e11 = n9, r9 = v$b(P4, Q3, R4, T5), n9 = _$a(P4, Q3, R4, T5);
      }
      f$k(this.h, 0, r9, n9), f$k(this.h, 2, s7, e11), f$k(this.h, 4, u8, a8), f$k(this.h, 6, c8, l8), f$k(this.h, 8, p8, k4), f$k(this.h, 10, d6, y6), f$k(this.h, 12, j4, A4), f$k(this.h, 14, L4, q3);
    }, y$b.prototype._digest = function(t8) {
      return "hex" === t8 ? n$j.toHex32(this.h, "big") : n$j.split32(this.h, "big");
    };
    C$3 = r$c;
    s$g = {};
    n$k = r$b.rotr32;
    s$g.ft_1 = function(t8, h8, i8, s7) {
      return 0 === t8 ? r$d(h8, i8, s7) : 1 === t8 || 3 === t8 ? o$j(h8, i8, s7) : 2 === t8 ? e$e(h8, i8, s7) : void 0;
    }, s$g.ch32 = r$d, s$g.maj32 = e$e, s$g.p32 = o$j, s$g.s0_256 = function(t8) {
      return n$k(t8, 2) ^ n$k(t8, 13) ^ n$k(t8, 22);
    }, s$g.s1_256 = function(t8) {
      return n$k(t8, 6) ^ n$k(t8, 11) ^ n$k(t8, 25);
    }, s$g.g0_256 = function(t8) {
      return n$k(t8, 7) ^ n$k(t8, 18) ^ t8 >>> 3;
    }, s$g.g1_256 = function(t8) {
      return n$k(t8, 17) ^ n$k(t8, 19) ^ t8 >>> 10;
    };
    a$j = r$b;
    c$g = a$h;
    f$l = s$g;
    _$b = o$7;
    g$b = a$j.sum32;
    m$d = a$j.sum32_4;
    p$h = a$j.sum32_5;
    l$h = f$l.ch32;
    v$c = f$l.maj32;
    d$g = f$l.s0_256;
    k$9 = f$l.s1_256;
    b$9 = f$l.g0_256;
    j$3 = f$l.g1_256;
    x$4 = c$g.BlockHash;
    y$c = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298];
    a$j.inherits(S$7, x$4), u$g = S$7, S$7.blockSize = 512, S$7.outSize = 256, S$7.hmacStrength = 192, S$7.padLength = 64, S$7.prototype._update = function(t8, h8) {
      for (var i8 = this.W, s7 = 0; s7 < 16; s7++)
        i8[s7] = t8[h8 + s7];
      for (; s7 < i8.length; s7++)
        i8[s7] = m$d(j$3(i8[s7 - 2]), i8[s7 - 7], b$9(i8[s7 - 15]), i8[s7 - 16]);
      var n9 = this.h[0], r9 = this.h[1], e11 = this.h[2], o9 = this.h[3], u8 = this.h[4], a8 = this.h[5], c8 = this.h[6], f9 = this.h[7];
      for (_$b(this.k.length === i8.length), s7 = 0; s7 < i8.length; s7++) {
        var x4 = p$h(f9, k$9(u8), l$h(u8, a8, c8), this.k[s7], i8[s7]), y6 = g$b(d$g(n9), v$c(n9, r9, e11));
        f9 = c8, c8 = a8, a8 = u8, u8 = g$b(o9, x4), o9 = e11, e11 = r9, r9 = n9, n9 = g$b(x4, y6);
      }
      this.h[0] = g$b(this.h[0], n9), this.h[1] = g$b(this.h[1], r9), this.h[2] = g$b(this.h[2], e11), this.h[3] = g$b(this.h[3], o9), this.h[4] = g$b(this.h[4], u8), this.h[5] = g$b(this.h[5], a8), this.h[6] = g$b(this.h[6], c8), this.h[7] = g$b(this.h[7], f9);
    }, S$7.prototype._digest = function(t8) {
      return "hex" === t8 ? a$j.toHex32(this.h, "big") : a$j.split32(this.h, "big");
    };
    w$c = u$g;
    o$k = r$b;
    a$k = a$h;
    u$h = s$g;
    l$i = o$k.rotl32;
    c$h = o$k.sum32;
    p$i = o$k.sum32_5;
    f$m = u$h.ft_1;
    g$c = a$k.BlockHash;
    d$h = [1518500249, 1859775393, 2400959708, 3395469782];
    o$k.inherits(m$e, g$c), r$e = m$e, m$e.blockSize = 512, m$e.outSize = 160, m$e.hmacStrength = 80, m$e.padLength = 64, m$e.prototype._update = function(t8, h8) {
      for (var i8 = this.W, s7 = 0; s7 < 16; s7++)
        i8[s7] = t8[h8 + s7];
      for (; s7 < i8.length; s7++)
        i8[s7] = l$i(i8[s7 - 3] ^ i8[s7 - 8] ^ i8[s7 - 14] ^ i8[s7 - 16], 1);
      var e11 = this.h[0], n9 = this.h[1], r9 = this.h[2], o9 = this.h[3], a8 = this.h[4];
      for (s7 = 0; s7 < i8.length; s7++) {
        var u8 = ~~(s7 / 20), g5 = p$i(l$i(e11, 5), f$m(u8, n9, r9, o9), a8, i8[s7], d$h[u8]);
        a8 = o9, o9 = r9, r9 = l$i(n9, 30), n9 = e11, e11 = g5;
      }
      this.h[0] = c$h(this.h[0], e11), this.h[1] = c$h(this.h[1], n9), this.h[2] = c$h(this.h[2], r9), this.h[3] = c$h(this.h[3], o9), this.h[4] = c$h(this.h[4], a8);
    }, m$e.prototype._digest = function(t8) {
      return "hex" === t8 ? o$k.toHex32(this.h, "big") : o$k.split32(this.h, "big");
    };
    _$c = r$e;
    b$a = r$b;
    z$5 = w$c;
    b$a.inherits(v$d, z$5), S$8 = v$d, v$d.blockSize = 512, v$d.outSize = 224, v$d.hmacStrength = 192, v$d.padLength = 64, v$d.prototype._digest = function(t8) {
      return "hex" === t8 ? b$a.toHex32(this.h.slice(0, 7), "big") : b$a.split32(this.h.slice(0, 7), "big");
    };
    y$d = S$8;
    H$4 = r$b;
    w$d = C$3;
    H$4.inherits(x$5, w$d), k$a = x$5, x$5.blockSize = 1024, x$5.outSize = 384, x$5.hmacStrength = 192, x$5.padLength = 128, x$5.prototype._digest = function(t8) {
      return "hex" === t8 ? H$4.toHex32(this.h.slice(0, 12), "big") : H$4.split32(this.h.slice(0, 12), "big");
    };
    L$3 = k$a;
    j$4 = {};
    j$4.sha1 = _$c, j$4.sha224 = y$d, j$4.sha256 = w$c, j$4.sha384 = L$3, j$4.sha512 = C$3;
    A$7 = {};
    B$7 = r$b;
    W$2 = a$h;
    q$3 = B$7.rotl32;
    C$4 = B$7.sum32;
    D$3 = B$7.sum32_3;
    E$7 = B$7.sum32_4;
    F$4 = W$2.BlockHash;
    B$7.inherits(G$2, F$4), A$7.ripemd160 = G$2, G$2.blockSize = 512, G$2.outSize = 160, G$2.hmacStrength = 192, G$2.padLength = 64, G$2.prototype._update = function(t8, h8) {
      for (var i8 = this.h[0], s7 = this.h[1], e11 = this.h[2], n9 = this.h[3], r9 = this.h[4], o9 = i8, a8 = s7, u8 = e11, l8 = n9, c8 = r9, p8 = 0; p8 < 80; p8++) {
        var f9 = C$4(q$3(E$7(i8, I$7(p8, s7, e11, n9), t8[N$3[p8] + h8], J$2(p8)), P$3[p8]), r9);
        i8 = r9, r9 = n9, n9 = q$3(e11, 10), e11 = s7, s7 = f9, f9 = C$4(q$3(E$7(o9, I$7(79 - p8, a8, u8, l8), t8[O$4[p8] + h8], K$3(p8)), Q$1[p8]), c8), o9 = c8, c8 = l8, l8 = q$3(u8, 10), u8 = a8, a8 = f9;
      }
      f9 = D$3(this.h[1], e11, l8), this.h[1] = D$3(this.h[2], n9, c8), this.h[2] = D$3(this.h[3], r9, o9), this.h[3] = D$3(this.h[4], i8, a8), this.h[4] = D$3(this.h[0], s7, u8), this.h[0] = f9;
    }, G$2.prototype._digest = function(t8) {
      return "hex" === t8 ? B$7.toHex32(this.h, "little") : B$7.split32(this.h, "little");
    };
    N$3 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];
    O$4 = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];
    P$3 = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];
    Q$1 = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];
    R$2 = r$b;
    T$4 = o$7;
    M$5 = U$5, U$5.prototype._init = function(t8) {
      t8.length > this.blockSize && (t8 = new this.Hash().update(t8).digest()), T$4(t8.length <= this.blockSize);
      for (var h8 = t8.length; h8 < this.blockSize; h8++)
        t8.push(0);
      for (h8 = 0; h8 < t8.length; h8++)
        t8[h8] ^= 54;
      for (this.inner = new this.Hash().update(t8), h8 = 0; h8 < t8.length; h8++)
        t8[h8] ^= 106;
      this.outer = new this.Hash().update(t8);
    }, U$5.prototype.update = function(t8, h8) {
      return this.inner.update(t8, h8), this;
    }, U$5.prototype.digest = function(t8) {
      return this.outer.update(this.inner.digest()), this.outer.digest(t8);
    };
    V$2 = M$5;
    X$2 = {};
    Y$1 = X$2;
    Y$1.utils = r$b, Y$1.common = a$h, Y$1.sha = j$4, Y$1.ripemd = A$7, Y$1.hmac = V$2, Y$1.sha1 = Y$1.sha.sha1, Y$1.sha256 = Y$1.sha.sha256, Y$1.sha224 = Y$1.sha.sha224, Y$1.sha384 = Y$1.sha.sha384, Y$1.sha512 = Y$1.sha.sha512, Y$1.ripemd160 = Y$1.ripemd.ripemd160;
    h$e = X$2;
    r$f = r$a;
    n$l = o$7;
    s$h = o$l, o$l.prototype._init = function(t8, e11, i8) {
      var s7 = t8.concat(e11).concat(i8);
      this.K = new Array(this.outLen / 8), this.V = new Array(this.outLen / 8);
      for (var h8 = 0; h8 < this.V.length; h8++)
        this.K[h8] = 0, this.V[h8] = 1;
      this._update(s7), this._reseed = 1, this.reseedInterval = 281474976710656;
    }, o$l.prototype._hmac = function() {
      return new h$e.hmac(this.hash, this.K);
    }, o$l.prototype._update = function(t8) {
      var e11 = this._hmac().update(this.V).update([0]);
      t8 && (e11 = e11.update(t8)), this.K = e11.digest(), this.V = this._hmac().update(this.V).digest(), t8 && (this.K = this._hmac().update(this.V).update([1]).update(t8).digest(), this.V = this._hmac().update(this.V).digest());
    }, o$l.prototype.reseed = function(t8, e11, i8, s7) {
      "string" != typeof e11 && (s7 = i8, i8 = e11, e11 = null), t8 = r$f.toArray(t8, e11), i8 = r$f.toArray(i8, s7), n$l(t8.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._update(t8.concat(i8 || [])), this._reseed = 1;
    }, o$l.prototype.generate = function(t8, e11, i8, s7) {
      if (this._reseed > this.reseedInterval)
        throw new Error("Reseed is required");
      "string" != typeof e11 && (s7 = i8, i8 = e11, e11 = null), i8 && (i8 = r$f.toArray(i8, s7 || "hex"), this._update(i8));
      for (var h8 = []; h8.length < t8; )
        this.V = this._hmac().update(this.V).digest(), h8 = h8.concat(this.V);
      var n9 = h8.slice(0, t8);
      return this._update(i8), this._reseed++, r$f.encode(n9, e11);
    };
    a$l = s$h;
    i$9 = n$c;
    n$m = n$i;
    s$i = n$m.getNAF;
    o$m = n$m.getJSF;
    u$i = n$m.assert;
    b$b = h$f, h$f.prototype.point = function() {
      throw new Error("Not implemented");
    }, h$f.prototype.validate = function() {
      throw new Error("Not implemented");
    }, h$f.prototype._fixedNafMul = function(e11, f9) {
      u$i(e11.precomputed);
      var d6 = e11._getDoubles(), c8 = s$i(f9, 1, this._bitLength), t8 = (1 << d6.step + 1) - (d6.step % 2 == 0 ? 2 : 1);
      t8 /= 3;
      for (var a8 = [], r9 = 0; r9 < c8.length; r9 += d6.step) {
        var b5 = 0;
        for (f9 = r9 + d6.step - 1; f9 >= r9; f9--)
          b5 = (b5 << 1) + c8[f9];
        a8.push(b5);
      }
      for (var i8 = this.jpoint(null, null, null), n9 = this.jpoint(null, null, null), o9 = t8; o9 > 0; o9--) {
        for (r9 = 0; r9 < a8.length; r9++) {
          (b5 = a8[r9]) === o9 ? n9 = n9.mixedAdd(d6.points[r9]) : b5 === -o9 && (n9 = n9.mixedAdd(d6.points[r9].neg()));
        }
        i8 = i8.add(n9);
      }
      return i8.toP();
    }, h$f.prototype._wnafMul = function(e11, f9) {
      var d6 = 4, c8 = e11._getNAFPoints(d6);
      d6 = c8.wnd;
      for (var t8 = c8.points, a8 = s$i(f9, d6, this._bitLength), r9 = this.jpoint(null, null, null), b5 = a8.length - 1; b5 >= 0; b5--) {
        for (f9 = 0; b5 >= 0 && 0 === a8[b5]; b5--)
          f9++;
        if (b5 >= 0 && f9++, r9 = r9.dblp(f9), b5 < 0)
          break;
        var i8 = a8[b5];
        u$i(0 !== i8), r9 = "affine" === e11.type ? i8 > 0 ? r9.mixedAdd(t8[i8 - 1 >> 1]) : r9.mixedAdd(t8[-i8 - 1 >> 1].neg()) : i8 > 0 ? r9.add(t8[i8 - 1 >> 1]) : r9.add(t8[-i8 - 1 >> 1].neg());
      }
      return "affine" === e11.type ? r9.toP() : r9;
    }, h$f.prototype._wnafMulAdd = function(e11, f9, d6, c8, t8) {
      for (var a8 = this._wnafT1, r9 = this._wnafT2, b5 = this._wnafT3, i8 = 0, n9 = 0; n9 < c8; n9++) {
        var u8 = (x4 = f9[n9])._getNAFPoints(e11);
        a8[n9] = u8.wnd, r9[n9] = u8.points;
      }
      for (n9 = c8 - 1; n9 >= 1; n9 -= 2) {
        var h8 = n9 - 1, p8 = n9;
        if (1 === a8[h8] && 1 === a8[p8]) {
          var l8 = [f9[h8], null, null, f9[p8]];
          0 === f9[h8].y.cmp(f9[p8].y) ? (l8[1] = f9[h8].add(f9[p8]), l8[2] = f9[h8].toJ().mixedAdd(f9[p8].neg())) : 0 === f9[h8].y.cmp(f9[p8].y.redNeg()) ? (l8[1] = f9[h8].toJ().mixedAdd(f9[p8]), l8[2] = f9[h8].add(f9[p8].neg())) : (l8[1] = f9[h8].toJ().mixedAdd(f9[p8]), l8[2] = f9[h8].toJ().mixedAdd(f9[p8].neg()));
          var v6 = [-3, -1, -5, -7, 0, 7, 5, 1, 3], y6 = o$m(d6[h8], d6[p8]);
          i8 = Math.max(y6[0].length, i8), b5[h8] = new Array(i8), b5[p8] = new Array(i8);
          for (var m6 = 0; m6 < i8; m6++) {
            var S4 = 0 | y6[0][m6], g5 = 0 | y6[1][m6];
            b5[h8][m6] = v6[3 * (S4 + 1) + (g5 + 1)], b5[p8][m6] = 0, r9[h8] = l8;
          }
        } else
          b5[h8] = s$i(d6[h8], a8[h8], this._bitLength), b5[p8] = s$i(d6[p8], a8[p8], this._bitLength), i8 = Math.max(b5[h8].length, i8), i8 = Math.max(b5[p8].length, i8);
      }
      var A4 = this.jpoint(null, null, null), I4 = this._wnafT4;
      for (n9 = i8; n9 >= 0; n9--) {
        for (var w4 = 0; n9 >= 0; ) {
          var M4 = true;
          for (m6 = 0; m6 < c8; m6++)
            I4[m6] = 0 | b5[m6][n9], 0 !== I4[m6] && (M4 = false);
          if (!M4)
            break;
          w4++, n9--;
        }
        if (n9 >= 0 && w4++, A4 = A4.dblp(w4), n9 < 0)
          break;
        for (m6 = 0; m6 < c8; m6++) {
          var x4, _4 = I4[m6];
          0 !== _4 && (_4 > 0 ? x4 = r9[m6][_4 - 1 >> 1] : _4 < 0 && (x4 = r9[m6][-_4 - 1 >> 1].neg()), A4 = "affine" === x4.type ? A4.mixedAdd(x4) : A4.add(x4));
        }
      }
      for (n9 = 0; n9 < c8; n9++)
        r9[n9] = null;
      return t8 ? A4 : A4.toP();
    }, h$f.BasePoint = p$j, p$j.prototype.eq = function() {
      throw new Error("Not implemented");
    }, p$j.prototype.validate = function() {
      return this.curve.validate(this);
    }, h$f.prototype.decodePoint = function(e11, f9) {
      e11 = n$m.toArray(e11, f9);
      var d6 = this.p.byteLength();
      if ((4 === e11[0] || 6 === e11[0] || 7 === e11[0]) && e11.length - 1 == 2 * d6)
        return 6 === e11[0] ? u$i(e11[e11.length - 1] % 2 == 0) : 7 === e11[0] && u$i(e11[e11.length - 1] % 2 == 1), this.point(e11.slice(1, 1 + d6), e11.slice(1 + d6, 1 + 2 * d6));
      if ((2 === e11[0] || 3 === e11[0]) && e11.length - 1 === d6)
        return this.pointFromX(e11.slice(1, 1 + d6), 3 === e11[0]);
      throw new Error("Unknown point format");
    }, p$j.prototype.encodeCompressed = function(e11) {
      return this.encode(e11, true);
    }, p$j.prototype._encode = function(e11) {
      var f9 = this.curve.p.byteLength(), d6 = this.getX().toArray("be", f9);
      return e11 ? [this.getY().isEven() ? 2 : 3].concat(d6) : [4].concat(d6, this.getY().toArray("be", f9));
    }, p$j.prototype.encode = function(e11, f9) {
      return n$m.encode(this._encode(f9), e11);
    }, p$j.prototype.precompute = function(e11) {
      if (this.precomputed)
        return this;
      var f9 = { doubles: null, naf: null, beta: null };
      return f9.naf = this._getNAFPoints(8), f9.doubles = this._getDoubles(4, e11), f9.beta = this._getBeta(), this.precomputed = f9, this;
    }, p$j.prototype._hasDoubles = function(e11) {
      if (!this.precomputed)
        return false;
      var f9 = this.precomputed.doubles;
      return !!f9 && f9.points.length >= Math.ceil((e11.bitLength() + 1) / f9.step);
    }, p$j.prototype._getDoubles = function(e11, f9) {
      if (this.precomputed && this.precomputed.doubles)
        return this.precomputed.doubles;
      for (var d6 = [this], c8 = this, t8 = 0; t8 < f9; t8 += e11) {
        for (var a8 = 0; a8 < e11; a8++)
          c8 = c8.dbl();
        d6.push(c8);
      }
      return { step: e11, points: d6 };
    }, p$j.prototype._getNAFPoints = function(e11) {
      if (this.precomputed && this.precomputed.naf)
        return this.precomputed.naf;
      for (var f9 = [this], d6 = (1 << e11) - 1, c8 = 1 === d6 ? null : this.dbl(), t8 = 1; t8 < d6; t8++)
        f9[t8] = f9[t8 - 1].add(c8);
      return { wnd: e11, points: f9 };
    }, p$j.prototype._getBeta = function() {
      return null;
    }, p$j.prototype.dblp = function(e11) {
      for (var f9 = this, d6 = 0; d6 < e11; d6++)
        f9 = f9.dbl();
      return f9;
    };
    v$e = b$b;
    y$e = n$c;
    m$f = t$2;
    S$9 = v$e;
    g$d = n$i.assert;
    m$f(A$8, S$9), l$j = A$8, A$8.prototype._getEndomorphism = function(e11) {
      if (this.zeroA && this.g && this.n && 1 === this.p.modn(3)) {
        var f9, d6;
        if (e11.beta)
          f9 = new y$e(e11.beta, 16).toRed(this.red);
        else {
          var c8 = this._getEndoRoots(this.p);
          f9 = (f9 = c8[0].cmp(c8[1]) < 0 ? c8[0] : c8[1]).toRed(this.red);
        }
        if (e11.lambda)
          d6 = new y$e(e11.lambda, 16);
        else {
          var t8 = this._getEndoRoots(this.n);
          0 === this.g.mul(t8[0]).x.cmp(this.g.x.redMul(f9)) ? d6 = t8[0] : (d6 = t8[1], g$d(0 === this.g.mul(d6).x.cmp(this.g.x.redMul(f9))));
        }
        return { beta: f9, lambda: d6, basis: e11.basis ? e11.basis.map(function(e12) {
          return { a: new y$e(e12.a, 16), b: new y$e(e12.b, 16) };
        }) : this._getEndoBasis(d6) };
      }
    }, A$8.prototype._getEndoRoots = function(e11) {
      var f9 = e11 === this.p ? this.red : y$e.mont(e11), d6 = new y$e(2).toRed(f9).redInvm(), c8 = d6.redNeg(), t8 = new y$e(3).toRed(f9).redNeg().redSqrt().redMul(d6);
      return [c8.redAdd(t8).fromRed(), c8.redSub(t8).fromRed()];
    }, A$8.prototype._getEndoBasis = function(e11) {
      for (var f9, d6, c8, t8, a8, r9, b5, i8, n9, s7 = this.n.ushrn(Math.floor(this.n.bitLength() / 2)), o9 = e11, u8 = this.n.clone(), h8 = new y$e(1), p8 = new y$e(0), l8 = new y$e(0), v6 = new y$e(1), m6 = 0; 0 !== o9.cmpn(0); ) {
        var S4 = u8.div(o9);
        i8 = u8.sub(S4.mul(o9)), n9 = l8.sub(S4.mul(h8));
        var g5 = v6.sub(S4.mul(p8));
        if (!c8 && i8.cmp(s7) < 0)
          f9 = b5.neg(), d6 = h8, c8 = i8.neg(), t8 = n9;
        else if (c8 && 2 == ++m6)
          break;
        b5 = i8, u8 = o9, o9 = i8, l8 = h8, h8 = n9, v6 = p8, p8 = g5;
      }
      a8 = i8.neg(), r9 = n9;
      var A4 = c8.sqr().add(t8.sqr());
      return a8.sqr().add(r9.sqr()).cmp(A4) >= 0 && (a8 = f9, r9 = d6), c8.negative && (c8 = c8.neg(), t8 = t8.neg()), a8.negative && (a8 = a8.neg(), r9 = r9.neg()), [{ a: c8, b: t8 }, { a: a8, b: r9 }];
    }, A$8.prototype._endoSplit = function(e11) {
      var f9 = this.endo.basis, d6 = f9[0], c8 = f9[1], t8 = c8.b.mul(e11).divRound(this.n), a8 = d6.b.neg().mul(e11).divRound(this.n), r9 = t8.mul(d6.a), b5 = a8.mul(c8.a), i8 = t8.mul(d6.b), n9 = a8.mul(c8.b);
      return { k1: e11.sub(r9).sub(b5), k2: i8.add(n9).neg() };
    }, A$8.prototype.pointFromX = function(e11, f9) {
      (e11 = new y$e(e11, 16)).red || (e11 = e11.toRed(this.red));
      var d6 = e11.redSqr().redMul(e11).redIAdd(e11.redMul(this.a)).redIAdd(this.b), c8 = d6.redSqrt();
      if (0 !== c8.redSqr().redSub(d6).cmp(this.zero))
        throw new Error("invalid point");
      var t8 = c8.fromRed().isOdd();
      return (f9 && !t8 || !f9 && t8) && (c8 = c8.redNeg()), this.point(e11, c8);
    }, A$8.prototype.validate = function(e11) {
      if (e11.inf)
        return true;
      var f9 = e11.x, d6 = e11.y, c8 = this.a.redMul(f9), t8 = f9.redSqr().redMul(f9).redIAdd(c8).redIAdd(this.b);
      return 0 === d6.redSqr().redISub(t8).cmpn(0);
    }, A$8.prototype._endoWnafMulAdd = function(e11, f9, d6) {
      for (var c8 = this._endoWnafT1, t8 = this._endoWnafT2, a8 = 0; a8 < e11.length; a8++) {
        var r9 = this._endoSplit(f9[a8]), b5 = e11[a8], i8 = b5._getBeta();
        r9.k1.negative && (r9.k1.ineg(), b5 = b5.neg(true)), r9.k2.negative && (r9.k2.ineg(), i8 = i8.neg(true)), c8[2 * a8] = b5, c8[2 * a8 + 1] = i8, t8[2 * a8] = r9.k1, t8[2 * a8 + 1] = r9.k2;
      }
      for (var n9 = this._wnafMulAdd(1, c8, t8, 2 * a8, d6), s7 = 0; s7 < 2 * a8; s7++)
        c8[s7] = null, t8[s7] = null;
      return n9;
    }, m$f(I$8, S$9.BasePoint), A$8.prototype.point = function(e11, f9, d6) {
      return new I$8(this, e11, f9, d6);
    }, A$8.prototype.pointFromJSON = function(e11, f9) {
      return I$8.fromJSON(this, e11, f9);
    }, I$8.prototype._getBeta = function() {
      if (this.curve.endo) {
        var e11 = this.precomputed;
        if (e11 && e11.beta)
          return e11.beta;
        var f9 = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
        if (e11) {
          var d6 = this.curve, c8 = function(e12) {
            return d6.point(e12.x.redMul(d6.endo.beta), e12.y);
          };
          e11.beta = f9, f9.precomputed = { beta: null, naf: e11.naf && { wnd: e11.naf.wnd, points: e11.naf.points.map(c8) }, doubles: e11.doubles && { step: e11.doubles.step, points: e11.doubles.points.map(c8) } };
        }
        return f9;
      }
    }, I$8.prototype.toJSON = function() {
      return this.precomputed ? [this.x, this.y, this.precomputed && { doubles: this.precomputed.doubles && { step: this.precomputed.doubles.step, points: this.precomputed.doubles.points.slice(1) }, naf: this.precomputed.naf && { wnd: this.precomputed.naf.wnd, points: this.precomputed.naf.points.slice(1) } }] : [this.x, this.y];
    }, I$8.fromJSON = function(e11, f9, d6) {
      "string" == typeof f9 && (f9 = JSON.parse(f9));
      var c8 = e11.point(f9[0], f9[1], d6);
      if (!f9[2])
        return c8;
      function t8(f10) {
        return e11.point(f10[0], f10[1], d6);
      }
      var a8 = f9[2];
      return c8.precomputed = { beta: null, doubles: a8.doubles && { step: a8.doubles.step, points: [c8].concat(a8.doubles.points.map(t8)) }, naf: a8.naf && { wnd: a8.naf.wnd, points: [c8].concat(a8.naf.points.map(t8)) } }, c8;
    }, I$8.prototype.inspect = function() {
      return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
    }, I$8.prototype.isInfinity = function() {
      return this.inf;
    }, I$8.prototype.add = function(e11) {
      if (this.inf)
        return e11;
      if (e11.inf)
        return this;
      if (this.eq(e11))
        return this.dbl();
      if (this.neg().eq(e11))
        return this.curve.point(null, null);
      if (0 === this.x.cmp(e11.x))
        return this.curve.point(null, null);
      var f9 = this.y.redSub(e11.y);
      0 !== f9.cmpn(0) && (f9 = f9.redMul(this.x.redSub(e11.x).redInvm()));
      var d6 = f9.redSqr().redISub(this.x).redISub(e11.x), c8 = f9.redMul(this.x.redSub(d6)).redISub(this.y);
      return this.curve.point(d6, c8);
    }, I$8.prototype.dbl = function() {
      if (this.inf)
        return this;
      var e11 = this.y.redAdd(this.y);
      if (0 === e11.cmpn(0))
        return this.curve.point(null, null);
      var f9 = this.curve.a, d6 = this.x.redSqr(), c8 = e11.redInvm(), t8 = d6.redAdd(d6).redIAdd(d6).redIAdd(f9).redMul(c8), a8 = t8.redSqr().redISub(this.x.redAdd(this.x)), r9 = t8.redMul(this.x.redSub(a8)).redISub(this.y);
      return this.curve.point(a8, r9);
    }, I$8.prototype.getX = function() {
      return this.x.fromRed();
    }, I$8.prototype.getY = function() {
      return this.y.fromRed();
    }, I$8.prototype.mul = function(e11) {
      return e11 = new y$e(e11, 16), this.isInfinity() ? this : this._hasDoubles(e11) ? this.curve._fixedNafMul(this, e11) : this.curve.endo ? this.curve._endoWnafMulAdd([this], [e11]) : this.curve._wnafMul(this, e11);
    }, I$8.prototype.mulAdd = function(e11, f9, d6) {
      var c8 = [this, f9], t8 = [e11, d6];
      return this.curve.endo ? this.curve._endoWnafMulAdd(c8, t8) : this.curve._wnafMulAdd(1, c8, t8, 2);
    }, I$8.prototype.jmulAdd = function(e11, f9, d6) {
      var c8 = [this, f9], t8 = [e11, d6];
      return this.curve.endo ? this.curve._endoWnafMulAdd(c8, t8, true) : this.curve._wnafMulAdd(1, c8, t8, 2, true);
    }, I$8.prototype.eq = function(e11) {
      return this === e11 || this.inf === e11.inf && (this.inf || 0 === this.x.cmp(e11.x) && 0 === this.y.cmp(e11.y));
    }, I$8.prototype.neg = function(e11) {
      if (this.inf)
        return this;
      var f9 = this.curve.point(this.x, this.y.redNeg());
      if (e11 && this.precomputed) {
        var d6 = this.precomputed, c8 = function(e12) {
          return e12.neg();
        };
        f9.precomputed = { naf: d6.naf && { wnd: d6.naf.wnd, points: d6.naf.points.map(c8) }, doubles: d6.doubles && { step: d6.doubles.step, points: d6.doubles.points.map(c8) } };
      }
      return f9;
    }, I$8.prototype.toJ = function() {
      return this.inf ? this.curve.jpoint(null, null, null) : this.curve.jpoint(this.x, this.y, this.curve.one);
    }, m$f(w$e, S$9.BasePoint), A$8.prototype.jpoint = function(e11, f9, d6) {
      return new w$e(this, e11, f9, d6);
    }, w$e.prototype.toP = function() {
      if (this.isInfinity())
        return this.curve.point(null, null);
      var e11 = this.z.redInvm(), f9 = e11.redSqr(), d6 = this.x.redMul(f9), c8 = this.y.redMul(f9).redMul(e11);
      return this.curve.point(d6, c8);
    }, w$e.prototype.neg = function() {
      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    }, w$e.prototype.add = function(e11) {
      if (this.isInfinity())
        return e11;
      if (e11.isInfinity())
        return this;
      var f9 = e11.z.redSqr(), d6 = this.z.redSqr(), c8 = this.x.redMul(f9), t8 = e11.x.redMul(d6), a8 = this.y.redMul(f9.redMul(e11.z)), r9 = e11.y.redMul(d6.redMul(this.z)), b5 = c8.redSub(t8), i8 = a8.redSub(r9);
      if (0 === b5.cmpn(0))
        return 0 !== i8.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
      var n9 = b5.redSqr(), s7 = n9.redMul(b5), o9 = c8.redMul(n9), u8 = i8.redSqr().redIAdd(s7).redISub(o9).redISub(o9), h8 = i8.redMul(o9.redISub(u8)).redISub(a8.redMul(s7)), p8 = this.z.redMul(e11.z).redMul(b5);
      return this.curve.jpoint(u8, h8, p8);
    }, w$e.prototype.mixedAdd = function(e11) {
      if (this.isInfinity())
        return e11.toJ();
      if (e11.isInfinity())
        return this;
      var f9 = this.z.redSqr(), d6 = this.x, c8 = e11.x.redMul(f9), t8 = this.y, a8 = e11.y.redMul(f9).redMul(this.z), r9 = d6.redSub(c8), b5 = t8.redSub(a8);
      if (0 === r9.cmpn(0))
        return 0 !== b5.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
      var i8 = r9.redSqr(), n9 = i8.redMul(r9), s7 = d6.redMul(i8), o9 = b5.redSqr().redIAdd(n9).redISub(s7).redISub(s7), u8 = b5.redMul(s7.redISub(o9)).redISub(t8.redMul(n9)), h8 = this.z.redMul(r9);
      return this.curve.jpoint(o9, u8, h8);
    }, w$e.prototype.dblp = function(e11) {
      if (0 === e11)
        return this;
      if (this.isInfinity())
        return this;
      if (!e11)
        return this.dbl();
      if (this.curve.zeroA || this.curve.threeA) {
        for (var f9 = this, d6 = 0; d6 < e11; d6++)
          f9 = f9.dbl();
        return f9;
      }
      var c8 = this.curve.a, t8 = this.curve.tinv, a8 = this.x, r9 = this.y, b5 = this.z, i8 = b5.redSqr().redSqr(), n9 = r9.redAdd(r9);
      for (d6 = 0; d6 < e11; d6++) {
        var s7 = a8.redSqr(), o9 = n9.redSqr(), u8 = o9.redSqr(), h8 = s7.redAdd(s7).redIAdd(s7).redIAdd(c8.redMul(i8)), p8 = a8.redMul(o9), l8 = h8.redSqr().redISub(p8.redAdd(p8)), v6 = p8.redISub(l8), y6 = h8.redMul(v6);
        y6 = y6.redIAdd(y6).redISub(u8);
        var m6 = n9.redMul(b5);
        d6 + 1 < e11 && (i8 = i8.redMul(u8)), a8 = l8, b5 = m6, n9 = y6;
      }
      return this.curve.jpoint(a8, n9.redMul(t8), b5);
    }, w$e.prototype.dbl = function() {
      return this.isInfinity() ? this : this.curve.zeroA ? this._zeroDbl() : this.curve.threeA ? this._threeDbl() : this._dbl();
    }, w$e.prototype._zeroDbl = function() {
      var e11, f9, d6;
      if (this.zOne) {
        var c8 = this.x.redSqr(), t8 = this.y.redSqr(), a8 = t8.redSqr(), r9 = this.x.redAdd(t8).redSqr().redISub(c8).redISub(a8);
        r9 = r9.redIAdd(r9);
        var b5 = c8.redAdd(c8).redIAdd(c8), i8 = b5.redSqr().redISub(r9).redISub(r9), n9 = a8.redIAdd(a8);
        n9 = (n9 = n9.redIAdd(n9)).redIAdd(n9), e11 = i8, f9 = b5.redMul(r9.redISub(i8)).redISub(n9), d6 = this.y.redAdd(this.y);
      } else {
        var s7 = this.x.redSqr(), o9 = this.y.redSqr(), u8 = o9.redSqr(), h8 = this.x.redAdd(o9).redSqr().redISub(s7).redISub(u8);
        h8 = h8.redIAdd(h8);
        var p8 = s7.redAdd(s7).redIAdd(s7), l8 = p8.redSqr(), v6 = u8.redIAdd(u8);
        v6 = (v6 = v6.redIAdd(v6)).redIAdd(v6), e11 = l8.redISub(h8).redISub(h8), f9 = p8.redMul(h8.redISub(e11)).redISub(v6), d6 = (d6 = this.y.redMul(this.z)).redIAdd(d6);
      }
      return this.curve.jpoint(e11, f9, d6);
    }, w$e.prototype._threeDbl = function() {
      var e11, f9, d6;
      if (this.zOne) {
        var c8 = this.x.redSqr(), t8 = this.y.redSqr(), a8 = t8.redSqr(), r9 = this.x.redAdd(t8).redSqr().redISub(c8).redISub(a8);
        r9 = r9.redIAdd(r9);
        var b5 = c8.redAdd(c8).redIAdd(c8).redIAdd(this.curve.a), i8 = b5.redSqr().redISub(r9).redISub(r9);
        e11 = i8;
        var n9 = a8.redIAdd(a8);
        n9 = (n9 = n9.redIAdd(n9)).redIAdd(n9), f9 = b5.redMul(r9.redISub(i8)).redISub(n9), d6 = this.y.redAdd(this.y);
      } else {
        var s7 = this.z.redSqr(), o9 = this.y.redSqr(), u8 = this.x.redMul(o9), h8 = this.x.redSub(s7).redMul(this.x.redAdd(s7));
        h8 = h8.redAdd(h8).redIAdd(h8);
        var p8 = u8.redIAdd(u8), l8 = (p8 = p8.redIAdd(p8)).redAdd(p8);
        e11 = h8.redSqr().redISub(l8), d6 = this.y.redAdd(this.z).redSqr().redISub(o9).redISub(s7);
        var v6 = o9.redSqr();
        v6 = (v6 = (v6 = v6.redIAdd(v6)).redIAdd(v6)).redIAdd(v6), f9 = h8.redMul(p8.redISub(e11)).redISub(v6);
      }
      return this.curve.jpoint(e11, f9, d6);
    }, w$e.prototype._dbl = function() {
      var e11 = this.curve.a, f9 = this.x, d6 = this.y, c8 = this.z, t8 = c8.redSqr().redSqr(), a8 = f9.redSqr(), r9 = d6.redSqr(), b5 = a8.redAdd(a8).redIAdd(a8).redIAdd(e11.redMul(t8)), i8 = f9.redAdd(f9), n9 = (i8 = i8.redIAdd(i8)).redMul(r9), s7 = b5.redSqr().redISub(n9.redAdd(n9)), o9 = n9.redISub(s7), u8 = r9.redSqr();
      u8 = (u8 = (u8 = u8.redIAdd(u8)).redIAdd(u8)).redIAdd(u8);
      var h8 = b5.redMul(o9).redISub(u8), p8 = d6.redAdd(d6).redMul(c8);
      return this.curve.jpoint(s7, h8, p8);
    }, w$e.prototype.trpl = function() {
      if (!this.curve.zeroA)
        return this.dbl().add(this);
      var e11 = this.x.redSqr(), f9 = this.y.redSqr(), d6 = this.z.redSqr(), c8 = f9.redSqr(), t8 = e11.redAdd(e11).redIAdd(e11), a8 = t8.redSqr(), r9 = this.x.redAdd(f9).redSqr().redISub(e11).redISub(c8), b5 = (r9 = (r9 = (r9 = r9.redIAdd(r9)).redAdd(r9).redIAdd(r9)).redISub(a8)).redSqr(), i8 = c8.redIAdd(c8);
      i8 = (i8 = (i8 = i8.redIAdd(i8)).redIAdd(i8)).redIAdd(i8);
      var n9 = t8.redIAdd(r9).redSqr().redISub(a8).redISub(b5).redISub(i8), s7 = f9.redMul(n9);
      s7 = (s7 = s7.redIAdd(s7)).redIAdd(s7);
      var o9 = this.x.redMul(b5).redISub(s7);
      o9 = (o9 = o9.redIAdd(o9)).redIAdd(o9);
      var u8 = this.y.redMul(n9.redMul(i8.redISub(n9)).redISub(r9.redMul(b5)));
      u8 = (u8 = (u8 = u8.redIAdd(u8)).redIAdd(u8)).redIAdd(u8);
      var h8 = this.z.redAdd(r9).redSqr().redISub(d6).redISub(b5);
      return this.curve.jpoint(o9, u8, h8);
    }, w$e.prototype.mul = function(e11, f9) {
      return e11 = new y$e(e11, f9), this.curve._wnafMul(this, e11);
    }, w$e.prototype.eq = function(e11) {
      if ("affine" === e11.type)
        return this.eq(e11.toJ());
      if (this === e11)
        return true;
      var f9 = this.z.redSqr(), d6 = e11.z.redSqr();
      if (0 !== this.x.redMul(d6).redISub(e11.x.redMul(f9)).cmpn(0))
        return false;
      var c8 = f9.redMul(this.z), t8 = d6.redMul(e11.z);
      return 0 === this.y.redMul(t8).redISub(e11.y.redMul(c8)).cmpn(0);
    }, w$e.prototype.eqXToP = function(e11) {
      var f9 = this.z.redSqr(), d6 = e11.toRed(this.curve.red).redMul(f9);
      if (0 === this.x.cmp(d6))
        return true;
      for (var c8 = e11.clone(), t8 = this.curve.redN.redMul(f9); ; ) {
        if (c8.iadd(this.curve.n), c8.cmp(this.curve.p) >= 0)
          return false;
        if (d6.redIAdd(t8), 0 === this.x.cmp(d6))
          return true;
      }
    }, w$e.prototype.inspect = function() {
      return this.isInfinity() ? "<EC JPoint Infinity>" : "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
    }, w$e.prototype.isInfinity = function() {
      return 0 === this.z.cmpn(0);
    };
    x$6 = l$j;
    _$d = n$c;
    z$6 = t$2;
    q$4 = v$e;
    R$3 = n$i;
    z$6(P$4, q$4), M$6 = P$4, P$4.prototype.validate = function(e11) {
      var f9 = e11.normalize().x, d6 = f9.redSqr(), c8 = d6.redMul(f9).redAdd(d6.redMul(this.a)).redAdd(f9);
      return 0 === c8.redSqrt().redSqr().cmp(c8);
    }, z$6(j$5, q$4.BasePoint), P$4.prototype.decodePoint = function(e11, f9) {
      return this.point(R$3.toArray(e11, f9), 1);
    }, P$4.prototype.point = function(e11, f9) {
      return new j$5(this, e11, f9);
    }, P$4.prototype.pointFromJSON = function(e11) {
      return j$5.fromJSON(this, e11);
    }, j$5.prototype.precompute = function() {
    }, j$5.prototype._encode = function() {
      return this.getX().toArray("be", this.curve.p.byteLength());
    }, j$5.fromJSON = function(e11, f9) {
      return new j$5(e11, f9[0], f9[1] || e11.one);
    }, j$5.prototype.inspect = function() {
      return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
    }, j$5.prototype.isInfinity = function() {
      return 0 === this.z.cmpn(0);
    }, j$5.prototype.dbl = function() {
      var e11 = this.x.redAdd(this.z).redSqr(), f9 = this.x.redSub(this.z).redSqr(), d6 = e11.redSub(f9), c8 = e11.redMul(f9), t8 = d6.redMul(f9.redAdd(this.curve.a24.redMul(d6)));
      return this.curve.point(c8, t8);
    }, j$5.prototype.add = function() {
      throw new Error("Not supported on Montgomery curve");
    }, j$5.prototype.diffAdd = function(e11, f9) {
      var d6 = this.x.redAdd(this.z), c8 = this.x.redSub(this.z), t8 = e11.x.redAdd(e11.z), a8 = e11.x.redSub(e11.z).redMul(d6), r9 = t8.redMul(c8), b5 = f9.z.redMul(a8.redAdd(r9).redSqr()), i8 = f9.x.redMul(a8.redISub(r9).redSqr());
      return this.curve.point(b5, i8);
    }, j$5.prototype.mul = function(e11) {
      for (var f9 = e11.clone(), d6 = this, c8 = this.curve.point(null, null), t8 = []; 0 !== f9.cmpn(0); f9.iushrn(1))
        t8.push(f9.andln(1));
      for (var a8 = t8.length - 1; a8 >= 0; a8--)
        0 === t8[a8] ? (d6 = d6.diffAdd(c8, this), c8 = c8.dbl()) : (c8 = d6.diffAdd(c8, this), d6 = d6.dbl());
      return c8;
    }, j$5.prototype.mulAdd = function() {
      throw new Error("Not supported on Montgomery curve");
    }, j$5.prototype.jumlAdd = function() {
      throw new Error("Not supported on Montgomery curve");
    }, j$5.prototype.eq = function(e11) {
      return 0 === this.getX().cmp(e11.getX());
    }, j$5.prototype.normalize = function() {
      return this.x = this.x.redMul(this.z.redInvm()), this.z = this.curve.one, this;
    }, j$5.prototype.getX = function() {
      return this.normalize(), this.x.fromRed();
    };
    E$8 = M$6;
    k$b = n$c;
    O$5 = t$2;
    L$4 = v$e;
    B$8 = n$i.assert;
    O$5(F$5, L$4), N$4 = F$5, F$5.prototype._mulA = function(e11) {
      return this.mOneA ? e11.redNeg() : this.a.redMul(e11);
    }, F$5.prototype._mulC = function(e11) {
      return this.oneC ? e11 : this.c.redMul(e11);
    }, F$5.prototype.jpoint = function(e11, f9, d6, c8) {
      return this.point(e11, f9, d6, c8);
    }, F$5.prototype.pointFromX = function(e11, f9) {
      (e11 = new k$b(e11, 16)).red || (e11 = e11.toRed(this.red));
      var d6 = e11.redSqr(), c8 = this.c2.redSub(this.a.redMul(d6)), t8 = this.one.redSub(this.c2.redMul(this.d).redMul(d6)), a8 = c8.redMul(t8.redInvm()), r9 = a8.redSqrt();
      if (0 !== r9.redSqr().redSub(a8).cmp(this.zero))
        throw new Error("invalid point");
      var b5 = r9.fromRed().isOdd();
      return (f9 && !b5 || !f9 && b5) && (r9 = r9.redNeg()), this.point(e11, r9);
    }, F$5.prototype.pointFromY = function(e11, f9) {
      (e11 = new k$b(e11, 16)).red || (e11 = e11.toRed(this.red));
      var d6 = e11.redSqr(), c8 = d6.redSub(this.c2), t8 = d6.redMul(this.d).redMul(this.c2).redSub(this.a), a8 = c8.redMul(t8.redInvm());
      if (0 === a8.cmp(this.zero)) {
        if (f9)
          throw new Error("invalid point");
        return this.point(this.zero, e11);
      }
      var r9 = a8.redSqrt();
      if (0 !== r9.redSqr().redSub(a8).cmp(this.zero))
        throw new Error("invalid point");
      return r9.fromRed().isOdd() !== f9 && (r9 = r9.redNeg()), this.point(r9, e11);
    }, F$5.prototype.validate = function(e11) {
      if (e11.isInfinity())
        return true;
      e11.normalize();
      var f9 = e11.x.redSqr(), d6 = e11.y.redSqr(), c8 = f9.redMul(this.a).redAdd(d6), t8 = this.c2.redMul(this.one.redAdd(this.d.redMul(f9).redMul(d6)));
      return 0 === c8.cmp(t8);
    }, O$5(C$5, L$4.BasePoint), F$5.prototype.pointFromJSON = function(e11) {
      return C$5.fromJSON(this, e11);
    }, F$5.prototype.point = function(e11, f9, d6, c8) {
      return new C$5(this, e11, f9, d6, c8);
    }, C$5.fromJSON = function(e11, f9) {
      return new C$5(e11, f9[0], f9[1], f9[2]);
    }, C$5.prototype.inspect = function() {
      return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
    }, C$5.prototype.isInfinity = function() {
      return 0 === this.x.cmpn(0) && (0 === this.y.cmp(this.z) || this.zOne && 0 === this.y.cmp(this.curve.c));
    }, C$5.prototype._extDbl = function() {
      var e11 = this.x.redSqr(), f9 = this.y.redSqr(), d6 = this.z.redSqr();
      d6 = d6.redIAdd(d6);
      var c8 = this.curve._mulA(e11), t8 = this.x.redAdd(this.y).redSqr().redISub(e11).redISub(f9), a8 = c8.redAdd(f9), r9 = a8.redSub(d6), b5 = c8.redSub(f9), i8 = t8.redMul(r9), n9 = a8.redMul(b5), s7 = t8.redMul(b5), o9 = r9.redMul(a8);
      return this.curve.point(i8, n9, o9, s7);
    }, C$5.prototype._projDbl = function() {
      var e11, f9, d6, c8 = this.x.redAdd(this.y).redSqr(), t8 = this.x.redSqr(), a8 = this.y.redSqr();
      if (this.curve.twisted) {
        var r9 = (n9 = this.curve._mulA(t8)).redAdd(a8);
        if (this.zOne)
          e11 = c8.redSub(t8).redSub(a8).redMul(r9.redSub(this.curve.two)), f9 = r9.redMul(n9.redSub(a8)), d6 = r9.redSqr().redSub(r9).redSub(r9);
        else {
          var b5 = this.z.redSqr(), i8 = r9.redSub(b5).redISub(b5);
          e11 = c8.redSub(t8).redISub(a8).redMul(i8), f9 = r9.redMul(n9.redSub(a8)), d6 = r9.redMul(i8);
        }
      } else {
        var n9 = t8.redAdd(a8);
        b5 = this.curve._mulC(this.z).redSqr(), i8 = n9.redSub(b5).redSub(b5);
        e11 = this.curve._mulC(c8.redISub(n9)).redMul(i8), f9 = this.curve._mulC(n9).redMul(t8.redISub(a8)), d6 = n9.redMul(i8);
      }
      return this.curve.point(e11, f9, d6);
    }, C$5.prototype.dbl = function() {
      return this.isInfinity() ? this : this.curve.extended ? this._extDbl() : this._projDbl();
    }, C$5.prototype._extAdd = function(e11) {
      var f9 = this.y.redSub(this.x).redMul(e11.y.redSub(e11.x)), d6 = this.y.redAdd(this.x).redMul(e11.y.redAdd(e11.x)), c8 = this.t.redMul(this.curve.dd).redMul(e11.t), t8 = this.z.redMul(e11.z.redAdd(e11.z)), a8 = d6.redSub(f9), r9 = t8.redSub(c8), b5 = t8.redAdd(c8), i8 = d6.redAdd(f9), n9 = a8.redMul(r9), s7 = b5.redMul(i8), o9 = a8.redMul(i8), u8 = r9.redMul(b5);
      return this.curve.point(n9, s7, u8, o9);
    }, C$5.prototype._projAdd = function(e11) {
      var f9, d6, c8 = this.z.redMul(e11.z), t8 = c8.redSqr(), a8 = this.x.redMul(e11.x), r9 = this.y.redMul(e11.y), b5 = this.curve.d.redMul(a8).redMul(r9), i8 = t8.redSub(b5), n9 = t8.redAdd(b5), s7 = this.x.redAdd(this.y).redMul(e11.x.redAdd(e11.y)).redISub(a8).redISub(r9), o9 = c8.redMul(i8).redMul(s7);
      return this.curve.twisted ? (f9 = c8.redMul(n9).redMul(r9.redSub(this.curve._mulA(a8))), d6 = i8.redMul(n9)) : (f9 = c8.redMul(n9).redMul(r9.redSub(a8)), d6 = this.curve._mulC(i8).redMul(n9)), this.curve.point(o9, f9, d6);
    }, C$5.prototype.add = function(e11) {
      return this.isInfinity() ? e11 : e11.isInfinity() ? this : this.curve.extended ? this._extAdd(e11) : this._projAdd(e11);
    }, C$5.prototype.mul = function(e11) {
      return this._hasDoubles(e11) ? this.curve._fixedNafMul(this, e11) : this.curve._wnafMul(this, e11);
    }, C$5.prototype.mulAdd = function(e11, f9, d6) {
      return this.curve._wnafMulAdd(1, [this, f9], [e11, d6], 2, false);
    }, C$5.prototype.jmulAdd = function(e11, f9, d6) {
      return this.curve._wnafMulAdd(1, [this, f9], [e11, d6], 2, true);
    }, C$5.prototype.normalize = function() {
      if (this.zOne)
        return this;
      var e11 = this.z.redInvm();
      return this.x = this.x.redMul(e11), this.y = this.y.redMul(e11), this.t && (this.t = this.t.redMul(e11)), this.z = this.curve.one, this.zOne = true, this;
    }, C$5.prototype.neg = function() {
      return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
    }, C$5.prototype.getX = function() {
      return this.normalize(), this.x.fromRed();
    }, C$5.prototype.getY = function() {
      return this.normalize(), this.y.fromRed();
    }, C$5.prototype.eq = function(e11) {
      return this === e11 || 0 === this.getX().cmp(e11.getX()) && 0 === this.getY().cmp(e11.getY());
    }, C$5.prototype.eqXToP = function(e11) {
      var f9 = e11.toRed(this.curve.red).redMul(this.z);
      if (0 === this.x.cmp(f9))
        return true;
      for (var d6 = e11.clone(), c8 = this.curve.redN.redMul(this.z); ; ) {
        if (d6.iadd(this.curve.n), d6.cmp(this.curve.p) >= 0)
          return false;
        if (f9.redIAdd(c8), 0 === this.x.cmp(f9))
          return true;
      }
    }, C$5.prototype.toP = C$5.prototype.normalize, C$5.prototype.mixedAdd = C$5.prototype.add;
    T$5 = N$4;
    J$3 = {};
    X$3 = J$3;
    X$3.base = v$e, X$3.short = x$6, X$3.mont = E$8, X$3.edwards = T$5;
    Y$2 = { doubles: { step: 4, points: [["e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a", "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"], ["8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508", "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"], ["175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739", "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"], ["363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640", "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"], ["8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c", "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"], ["723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda", "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"], ["eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa", "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"], ["100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0", "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"], ["e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d", "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"], ["feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d", "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"], ["da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1", "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"], ["53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0", "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"], ["8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047", "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"], ["385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862", "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"], ["6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7", "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"], ["3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd", "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"], ["85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83", "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"], ["948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a", "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"], ["6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8", "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"], ["e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d", "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"], ["e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725", "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"], ["213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754", "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"], ["4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c", "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"], ["fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6", "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"], ["76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39", "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"], ["c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891", "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"], ["d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b", "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"], ["b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03", "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"], ["e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d", "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"], ["a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070", "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"], ["90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4", "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"], ["8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da", "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"], ["e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11", "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"], ["8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e", "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"], ["e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41", "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"], ["b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef", "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"], ["d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8", "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"], ["324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d", "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"], ["4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96", "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"], ["9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd", "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"], ["6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5", "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"], ["a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266", "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"], ["7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71", "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"], ["928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac", "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"], ["85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751", "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"], ["ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e", "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"], ["827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241", "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"], ["eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3", "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"], ["e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f", "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"], ["1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19", "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"], ["146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be", "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"], ["fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9", "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"], ["da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2", "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"], ["a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13", "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"], ["174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c", "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"], ["959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba", "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"], ["d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151", "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"], ["64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073", "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"], ["8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458", "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"], ["13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b", "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"], ["bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366", "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"], ["8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa", "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"], ["8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0", "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"], ["dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787", "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"], ["f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e", "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"]] }, naf: { wnd: 7, points: [["f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9", "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"], ["2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4", "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"], ["5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc", "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"], ["acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe", "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"], ["774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb", "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"], ["f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8", "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"], ["d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e", "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"], ["defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34", "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"], ["2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c", "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"], ["352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5", "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"], ["2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f", "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"], ["9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714", "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"], ["daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729", "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"], ["c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db", "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"], ["6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4", "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"], ["1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5", "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"], ["605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479", "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"], ["62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d", "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"], ["80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f", "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"], ["7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb", "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"], ["d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9", "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"], ["49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963", "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"], ["77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74", "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"], ["f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530", "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"], ["463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b", "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"], ["f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247", "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"], ["caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1", "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"], ["2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120", "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"], ["7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435", "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"], ["754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18", "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"], ["e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8", "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"], ["186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb", "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"], ["df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f", "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"], ["5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143", "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"], ["290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba", "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"], ["af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45", "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"], ["766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a", "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"], ["59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e", "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"], ["f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8", "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"], ["7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c", "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"], ["948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519", "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"], ["7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab", "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"], ["3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca", "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"], ["d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf", "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"], ["1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610", "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"], ["733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4", "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"], ["15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c", "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"], ["a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940", "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"], ["e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980", "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"], ["311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3", "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"], ["34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf", "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"], ["f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63", "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"], ["d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448", "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"], ["32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf", "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"], ["7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5", "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"], ["ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6", "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"], ["16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5", "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"], ["eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99", "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"], ["78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51", "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"], ["494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5", "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"], ["a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5", "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"], ["c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997", "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"], ["841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881", "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"], ["5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5", "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"], ["36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66", "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"], ["336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726", "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"], ["8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede", "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"], ["1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94", "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"], ["85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31", "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"], ["29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51", "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"], ["a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252", "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"], ["4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5", "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"], ["d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b", "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"], ["ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4", "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"], ["af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f", "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"], ["e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889", "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"], ["591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246", "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"], ["11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984", "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"], ["3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a", "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"], ["cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030", "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"], ["c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197", "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"], ["c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593", "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"], ["a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef", "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"], ["347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38", "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"], ["da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a", "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"], ["c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111", "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"], ["4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502", "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"], ["3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea", "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"], ["cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26", "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"], ["b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986", "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"], ["d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e", "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"], ["48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4", "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"], ["dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda", "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"], ["6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859", "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"], ["e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f", "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"], ["eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c", "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"], ["13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942", "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"], ["ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a", "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"], ["b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80", "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"], ["ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d", "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"], ["8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1", "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"], ["52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63", "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"], ["e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352", "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"], ["7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193", "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"], ["5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00", "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"], ["32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58", "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"], ["e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7", "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"], ["8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8", "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"], ["4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e", "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"], ["3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d", "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"], ["674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b", "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"], ["d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f", "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"], ["30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6", "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"], ["be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297", "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"], ["93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a", "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"], ["b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c", "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"], ["d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52", "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"], ["d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb", "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"], ["463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065", "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"], ["7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917", "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"], ["74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9", "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"], ["30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3", "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"], ["9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57", "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"], ["176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66", "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"], ["75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8", "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"], ["809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721", "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"], ["1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180", "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"]] } };
    W$3 = {};
    K$4 = W$3;
    U$6 = X$2;
    G$3 = J$3;
    H$5 = n$i.assert;
    K$4.PresetCurve = Q$2, V$3("p192", { type: "short", prime: "p192", p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff", a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc", b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1", n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831", hash: U$6.sha256, gRed: false, g: ["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012", "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"] }), V$3("p224", { type: "short", prime: "p224", p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001", a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe", b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4", n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d", hash: U$6.sha256, gRed: false, g: ["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21", "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"] }), V$3("p256", { type: "short", prime: null, p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff", a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc", b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b", n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551", hash: U$6.sha256, gRed: false, g: ["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296", "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"] }), V$3("p384", { type: "short", prime: null, p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff", a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc", b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef", n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973", hash: U$6.sha384, gRed: false, g: ["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7", "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"] }), V$3("p521", { type: "short", prime: null, p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff", a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc", b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00", n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409", hash: U$6.sha512, gRed: false, g: ["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66", "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"] }), V$3("curve25519", { type: "mont", prime: "p25519", p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed", a: "76d06", b: "1", n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed", hash: U$6.sha256, gRed: false, g: ["9"] }), V$3("ed25519", { type: "edwards", prime: "p25519", p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed", a: "-1", c: "1", d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3", n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed", hash: U$6.sha256, gRed: false, g: ["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a", "6666666666666666666666666666666666666666666666666666666666666658"] });
    try {
      D$4 = Y$2;
    } catch (e11) {
      D$4 = void 0;
    }
    V$3("secp256k1", { type: "short", prime: "k256", p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f", a: "0", b: "7", n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141", h: "1", hash: U$6.sha256, beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee", lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72", basis: [{ a: "3086d221a7d46bcde86c90e49284eb15", b: "-e4437ed6010e88286f547fa90abfe4c3" }, { a: "114ca50f7a8e2f3f657c1108d9d44cfd8", b: "3086d221a7d46bcde86c90e49284eb15" }], gRed: false, g: ["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8", D$4] });
    $$1 = n$c;
    ee2 = n$i.assert;
    Z$1 = fe2, fe2.fromPublic = function(e11, f9, d6) {
      return f9 instanceof fe2 ? f9 : new fe2(e11, { pub: f9, pubEnc: d6 });
    }, fe2.fromPrivate = function(e11, f9, d6) {
      return f9 instanceof fe2 ? f9 : new fe2(e11, { priv: f9, privEnc: d6 });
    }, fe2.prototype.validate = function() {
      var e11 = this.getPublic();
      return e11.isInfinity() ? { result: false, reason: "Invalid public key" } : e11.validate() ? e11.mul(this.ec.curve.n).isInfinity() ? { result: true, reason: null } : { result: false, reason: "Public key * N != O" } : { result: false, reason: "Public key is not a point" };
    }, fe2.prototype.getPublic = function(e11, f9) {
      return "string" == typeof e11 && (f9 = e11, e11 = null), this.pub || (this.pub = this.ec.g.mul(this.priv)), f9 ? this.pub.encode(f9, e11) : this.pub;
    }, fe2.prototype.getPrivate = function(e11) {
      return "hex" === e11 ? this.priv.toString(16, 2) : this.priv;
    }, fe2.prototype._importPrivate = function(e11, f9) {
      this.priv = new $$1(e11, f9 || 16), this.priv = this.priv.umod(this.ec.curve.n);
    }, fe2.prototype._importPublic = function(e11, f9) {
      if (e11.x || e11.y)
        return "mont" === this.ec.curve.type ? ee2(e11.x, "Need x coordinate") : "short" !== this.ec.curve.type && "edwards" !== this.ec.curve.type || ee2(e11.x && e11.y, "Need both x and y coordinate"), this.pub = this.ec.curve.point(e11.x, e11.y), void 0;
      this.pub = this.ec.curve.decodePoint(e11, f9);
    }, fe2.prototype.derive = function(e11) {
      return e11.mul(this.priv).getX();
    }, fe2.prototype.sign = function(e11, f9, d6) {
      return this.ec.sign(e11, this, f9, d6);
    }, fe2.prototype.verify = function(e11, f9) {
      return this.ec.verify(e11, f9, this);
    }, fe2.prototype.inspect = function() {
      return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
    };
    ce2 = Z$1;
    te2 = n$c;
    ae2 = a$l;
    re2 = W$3;
    be2 = f$i;
    ie = n$i.assert;
    ne2 = ce2;
    se2 = d$e;
    de2 = oe2, oe2.prototype.keyPair = function(e11) {
      return new ne2(this, e11);
    }, oe2.prototype.keyFromPrivate = function(e11, f9) {
      return ne2.fromPrivate(this, e11, f9);
    }, oe2.prototype.keyFromPublic = function(e11, f9) {
      return ne2.fromPublic(this, e11, f9);
    }, oe2.prototype.genKeyPair = function(e11) {
      e11 || (e11 = {});
      for (var f9 = new ae2({ hash: this.hash, pers: e11.pers, persEnc: e11.persEnc || "utf8", entropy: e11.entropy || be2(this.hash.hmacStrength), entropyEnc: e11.entropy && e11.entropyEnc || "utf8", nonce: this.n.toArray() }), d6 = this.n.byteLength(), c8 = this.n.sub(new te2(2)); ; ) {
        var t8 = new te2(f9.generate(d6));
        if (!(t8.cmp(c8) > 0))
          return t8.iaddn(1), this.keyFromPrivate(t8);
      }
    }, oe2.prototype._truncateToN = function(e11, f9) {
      var d6 = 8 * e11.byteLength() - this.n.bitLength();
      return d6 > 0 && (e11 = e11.ushrn(d6)), !f9 && e11.cmp(this.n) >= 0 ? e11.sub(this.n) : e11;
    }, oe2.prototype.sign = function(e11, f9, d6, c8) {
      "object" == typeof d6 && (c8 = d6, d6 = null), c8 || (c8 = {}), f9 = this.keyFromPrivate(f9, d6), e11 = this._truncateToN(new te2(e11, 16));
      for (var t8 = this.n.byteLength(), a8 = f9.getPrivate().toArray("be", t8), r9 = e11.toArray("be", t8), b5 = new ae2({ hash: this.hash, entropy: a8, nonce: r9, pers: c8.pers, persEnc: c8.persEnc || "utf8" }), i8 = this.n.sub(new te2(1)), n9 = 0; ; n9++) {
        var s7 = c8.k ? c8.k(n9) : new te2(b5.generate(this.n.byteLength()));
        if (!((s7 = this._truncateToN(s7, true)).cmpn(1) <= 0 || s7.cmp(i8) >= 0)) {
          var o9 = this.g.mul(s7);
          if (!o9.isInfinity()) {
            var u8 = o9.getX(), h8 = u8.umod(this.n);
            if (0 !== h8.cmpn(0)) {
              var p8 = s7.invm(this.n).mul(h8.mul(f9.getPrivate()).iadd(e11));
              if (0 !== (p8 = p8.umod(this.n)).cmpn(0)) {
                var l8 = (o9.getY().isOdd() ? 1 : 0) | (0 !== u8.cmp(h8) ? 2 : 0);
                return c8.canonical && p8.cmp(this.nh) > 0 && (p8 = this.n.sub(p8), l8 ^= 1), new se2({ r: h8, s: p8, recoveryParam: l8 });
              }
            }
          }
        }
      }
    }, oe2.prototype.verify = function(e11, f9, d6, c8) {
      e11 = this._truncateToN(new te2(e11, 16)), d6 = this.keyFromPublic(d6, c8);
      var t8 = (f9 = new se2(f9, "hex")).r, a8 = f9.s;
      if (t8.cmpn(1) < 0 || t8.cmp(this.n) >= 0)
        return false;
      if (a8.cmpn(1) < 0 || a8.cmp(this.n) >= 0)
        return false;
      var r9, b5 = a8.invm(this.n), i8 = b5.mul(e11).umod(this.n), n9 = b5.mul(t8).umod(this.n);
      return this.curve._maxwellTrick ? !(r9 = this.g.jmulAdd(i8, d6.getPublic(), n9)).isInfinity() && r9.eqXToP(t8) : !(r9 = this.g.mulAdd(i8, d6.getPublic(), n9)).isInfinity() && 0 === r9.getX().umod(this.n).cmp(t8);
    }, oe2.prototype.recoverPubKey = function(e11, f9, d6, c8) {
      ie((3 & d6) === d6, "The recovery param is more than two bits"), f9 = new se2(f9, c8);
      var t8 = this.n, a8 = new te2(e11), r9 = f9.r, b5 = f9.s, i8 = 1 & d6, n9 = d6 >> 1;
      if (r9.cmp(this.curve.p.umod(this.curve.n)) >= 0 && n9)
        throw new Error("Unable to find sencond key candinate");
      r9 = n9 ? this.curve.pointFromX(r9.add(this.curve.n), i8) : this.curve.pointFromX(r9, i8);
      var s7 = f9.r.invm(t8), o9 = t8.sub(a8).mul(s7).umod(t8), u8 = b5.mul(s7).umod(t8);
      return this.g.mulAdd(o9, r9, u8);
    }, oe2.prototype.getKeyRecoveryParam = function(e11, f9, d6, c8) {
      if (null !== (f9 = new se2(f9, c8)).recoveryParam)
        return f9.recoveryParam;
      for (var t8 = 0; t8 < 4; t8++) {
        var a8;
        try {
          a8 = this.recoverPubKey(e11, f9, t8);
        } catch (e12) {
          continue;
        }
        if (a8.eq(d6))
          return t8;
      }
      throw new Error("Unable to find valid recovery factor");
    };
    ue2 = de2;
    he2 = n$i;
    pe2 = he2.assert;
    le2 = he2.parseBytes;
    ve2 = he2.cachedProperty;
    ye2.fromPublic = function(e11, f9) {
      return f9 instanceof ye2 ? f9 : new ye2(e11, { pub: f9 });
    }, ye2.fromSecret = function(e11, f9) {
      return f9 instanceof ye2 ? f9 : new ye2(e11, { secret: f9 });
    }, ye2.prototype.secret = function() {
      return this._secret;
    }, ve2(ye2, "pubBytes", function() {
      return this.eddsa.encodePoint(this.pub());
    }), ve2(ye2, "pub", function() {
      return this._pubBytes ? this.eddsa.decodePoint(this._pubBytes) : this.eddsa.g.mul(this.priv());
    }), ve2(ye2, "privBytes", function() {
      var e11 = this.eddsa, f9 = this.hash(), d6 = e11.encodingLength - 1, c8 = f9.slice(0, e11.encodingLength);
      return c8[0] &= 248, c8[d6] &= 127, c8[d6] |= 64, c8;
    }), ve2(ye2, "priv", function() {
      return this.eddsa.decodeInt(this.privBytes());
    }), ve2(ye2, "hash", function() {
      return this.eddsa.hash().update(this.secret()).digest();
    }), ve2(ye2, "messagePrefix", function() {
      return this.hash().slice(this.eddsa.encodingLength);
    }), ye2.prototype.sign = function(e11) {
      return pe2(this._secret, "KeyPair can only verify"), this.eddsa.sign(e11, this);
    }, ye2.prototype.verify = function(e11, f9) {
      return this.eddsa.verify(e11, f9, this);
    }, ye2.prototype.getSecret = function(e11) {
      return pe2(this._secret, "KeyPair is public only"), he2.encode(this.secret(), e11);
    }, ye2.prototype.getPublic = function(e11) {
      return he2.encode(this.pubBytes(), e11);
    };
    me2 = ye2;
    Se2 = n$c;
    ge2 = n$i;
    Ae2 = ge2.assert;
    Ie = ge2.cachedProperty;
    we2 = ge2.parseBytes;
    Ie(Me, "S", function() {
      return this.eddsa.decodeInt(this.Sencoded());
    }), Ie(Me, "R", function() {
      return this.eddsa.decodePoint(this.Rencoded());
    }), Ie(Me, "Rencoded", function() {
      return this.eddsa.encodePoint(this.R());
    }), Ie(Me, "Sencoded", function() {
      return this.eddsa.encodeInt(this.S());
    }), Me.prototype.toBytes = function() {
      return this.Rencoded().concat(this.Sencoded());
    }, Me.prototype.toHex = function() {
      return ge2.encode(this.toBytes(), "hex").toUpperCase();
    };
    _e = Me;
    ze = X$2;
    qe = W$3;
    Re = n$i;
    Pe = Re.assert;
    je2 = Re.parseBytes;
    Ne = me2;
    Ee2 = _e;
    xe = ke2, ke2.prototype.sign = function(e11, f9) {
      e11 = je2(e11);
      var d6 = this.keyFromSecret(f9), c8 = this.hashInt(d6.messagePrefix(), e11), t8 = this.g.mul(c8), a8 = this.encodePoint(t8), r9 = this.hashInt(a8, d6.pubBytes(), e11).mul(d6.priv()), b5 = c8.add(r9).umod(this.curve.n);
      return this.makeSignature({ R: t8, S: b5, Rencoded: a8 });
    }, ke2.prototype.verify = function(e11, f9, d6) {
      e11 = je2(e11), f9 = this.makeSignature(f9);
      var c8 = this.keyFromPublic(d6), t8 = this.hashInt(f9.Rencoded(), c8.pubBytes(), e11), a8 = this.g.mul(f9.S());
      return f9.R().add(c8.pub().mul(t8)).eq(a8);
    }, ke2.prototype.hashInt = function() {
      for (var e11 = this.hash(), f9 = 0; f9 < arguments.length; f9++)
        e11.update(arguments[f9]);
      return Re.intFromLE(e11.digest()).umod(this.curve.n);
    }, ke2.prototype.keyFromPublic = function(e11) {
      return Ne.fromPublic(this, e11);
    }, ke2.prototype.keyFromSecret = function(e11) {
      return Ne.fromSecret(this, e11);
    }, ke2.prototype.makeSignature = function(e11) {
      return e11 instanceof Ee2 ? e11 : new Ee2(this, e11);
    }, ke2.prototype.encodePoint = function(e11) {
      var f9 = e11.getY().toArray("le", this.encodingLength);
      return f9[this.encodingLength - 1] |= e11.getX().isOdd() ? 128 : 0, f9;
    }, ke2.prototype.decodePoint = function(e11) {
      var f9 = (e11 = Re.parseBytes(e11)).length - 1, d6 = e11.slice(0, f9).concat(-129 & e11[f9]), c8 = 0 != (128 & e11[f9]), t8 = Re.intFromLE(d6);
      return this.curve.pointFromY(t8, c8);
    }, ke2.prototype.encodeInt = function(e11) {
      return e11.toArray("le", this.encodingLength);
    }, ke2.prototype.decodeInt = function(e11) {
      return Re.intFromLE(e11);
    }, ke2.prototype.isPoint = function(e11) {
      return e11 instanceof this.pointClass;
    };
    Oe2 = xe;
    Le = {};
    Be2 = Le;
    Be2.version = ["elliptic", "6.5.2", "EC cryptography", "lib/elliptic.js", ["lib"], { jscs: "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js", jshint: "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js", lint: "npm run jscs && npm run jshint", unit: "istanbul test _mocha --reporter=spec test/index.js", test: "npm run lint && npm run unit", version: "grunt dist && git add dist/" }, { type: "git", url: "git@github.com:indutny/elliptic" }, ["EC", "Elliptic", "curve", "Cryptography"], "Fedor Indutny <fedor@indutny.com>", "MIT", { url: "https://github.com/indutny/elliptic/issues" }, "https://github.com/indutny/elliptic", { brfs: "^1.4.3", coveralls: "^3.0.8", grunt: "^1.0.4", "grunt-browserify": "^5.0.0", "grunt-cli": "^1.2.0", "grunt-contrib-connect": "^1.0.0", "grunt-contrib-copy": "^1.0.0", "grunt-contrib-uglify": "^1.0.1", "grunt-mocha-istanbul": "^3.0.1", "grunt-saucelabs": "^9.0.1", istanbul: "^0.4.2", jscs: "^3.0.7", jshint: "^2.10.3", mocha: "^6.2.2" }, { "bn.js": "^4.4.0", brorand: "^1.0.1", "hash.js": "^1.0.0", "hmac-drbg": "^1.0.0", inherits: "^2.0.1", "minimalistic-assert": "^1.0.0", "minimalistic-crypto-utils": "^1.0.0" }][1], Be2.utils = n$i, Be2.rand = f$i, Be2.curve = J$3, Be2.curves = W$3, Be2.ec = ue2, Be2.eddsa = Oe2;
    o$n = {};
    s$j = false;
    a$m = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    u$j = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    c$i = {};
    f$n = t$2;
    c$i.Reporter = l$k, l$k.prototype.isError = function(e11) {
      return e11 instanceof h$g;
    }, l$k.prototype.save = function() {
      var e11 = (this || u$j)._reporterState;
      return { obj: e11.obj, pathLen: e11.path.length };
    }, l$k.prototype.restore = function(e11) {
      var t8 = (this || u$j)._reporterState;
      t8.obj = e11.obj, t8.path = t8.path.slice(0, e11.pathLen);
    }, l$k.prototype.enterKey = function(e11) {
      return (this || u$j)._reporterState.path.push(e11);
    }, l$k.prototype.exitKey = function(e11) {
      var t8 = (this || u$j)._reporterState;
      t8.path = t8.path.slice(0, e11 - 1);
    }, l$k.prototype.leaveKey = function(e11, t8, r9) {
      var n9 = (this || u$j)._reporterState;
      this.exitKey(e11), null !== n9.obj && (n9.obj[t8] = r9);
    }, l$k.prototype.path = function() {
      return (this || u$j)._reporterState.path.join("/");
    }, l$k.prototype.enterObject = function() {
      var e11 = (this || u$j)._reporterState, t8 = e11.obj;
      return e11.obj = {}, t8;
    }, l$k.prototype.leaveObject = function(e11) {
      var t8 = (this || u$j)._reporterState, r9 = t8.obj;
      return t8.obj = e11, r9;
    }, l$k.prototype.error = function(e11) {
      var t8, r9 = (this || u$j)._reporterState, n9 = e11 instanceof h$g;
      if (t8 = n9 ? e11 : new h$g(r9.path.map(function(e12) {
        return "[" + JSON.stringify(e12) + "]";
      }).join(""), e11.message || e11, e11.stack), !r9.options.partial)
        throw t8;
      return n9 || r9.errors.push(t8), t8;
    }, l$k.prototype.wrapResult = function(e11) {
      var t8 = (this || u$j)._reporterState;
      return t8.options.partial ? { result: this.isError(e11) ? null : e11, errors: t8.errors } : e11;
    }, f$n(h$g, Error), h$g.prototype.rethrow = function(e11) {
      if ((this || u$j).message = e11 + " at: " + ((this || u$j).path || "(shallow)"), Error.captureStackTrace && Error.captureStackTrace(this || u$j, h$g), !(this || u$j).stack)
        try {
          throw new Error((this || u$j).message);
        } catch (e12) {
          (this || u$j).stack = e12.stack;
        }
      return this || u$j;
    };
    p$k = {};
    d$i = false;
    g$e = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    _$e = {};
    v$f = false;
    b$c = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    m$g = {};
    S$a = false;
    j$6 = {};
    w$f = false;
    B$9 = {};
    k$c = false;
    D$5 = {};
    U$7 = false;
    N$5 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    O$6 = {};
    A$9 = false;
    x$7 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    I$9 = {};
    q$5 = false;
    F$6 = {};
    K$5 = false;
    R$4 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    G$4 = {};
    L$5 = false;
    M$7 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    J$4 = {};
    V$4 = false;
    z$7 = {};
    H$6 = false;
    Q$3 = Y$3();
    e$f = Q$3;
    t$a = e$f.define("Time", function() {
      this.choice({ utcTime: this.utctime(), generalTime: this.gentime() });
    });
    s$k = e$f.define("AttributeTypeValue", function() {
      this.seq().obj(this.key("type").objid(), this.key("value").any());
    });
    n$n = e$f.define("AlgorithmIdentifier", function() {
      this.seq().obj(this.key("algorithm").objid(), this.key("parameters").optional(), this.key("curve").objid().optional());
    });
    o$o = e$f.define("SubjectPublicKeyInfo", function() {
      this.seq().obj(this.key("algorithm").use(n$n), this.key("subjectPublicKey").bitstr());
    });
    h$h = e$f.define("RelativeDistinguishedName", function() {
      this.setof(s$k);
    });
    y$g = e$f.define("RDNSequence", function() {
      this.seqof(h$h);
    });
    r$g = e$f.define("Name", function() {
      this.choice({ rdnSequence: this.use(y$g) });
    });
    u$k = e$f.define("Validity", function() {
      this.seq().obj(this.key("notBefore").use(t$a), this.key("notAfter").use(t$a));
    });
    a$n = e$f.define("Extension", function() {
      this.seq().obj(this.key("extnID").objid(), this.key("critical").bool().def(false), this.key("extnValue").octstr());
    });
    c$j = e$f.define("TBSCertificate", function() {
      this.seq().obj(this.key("version").explicit(0).int().optional(), this.key("serialNumber").int(), this.key("signature").use(n$n), this.key("issuer").use(r$g), this.key("validity").use(u$k), this.key("subject").use(r$g), this.key("subjectPublicKeyInfo").use(o$o), this.key("issuerUniqueID").implicit(1).bitstr().optional(), this.key("subjectUniqueID").implicit(2).bitstr().optional(), this.key("extensions").explicit(3).seqof(a$n).optional());
    });
    k$d = e$f.define("X509Certificate", function() {
      this.seq().obj(this.key("tbsCertificate").use(c$j), this.key("signatureAlgorithm").use(n$n), this.key("signatureValue").bitstr());
    });
    f$o = {};
    b$d = Q$3;
    f$o.certificate = k$d;
    l$l = b$d.define("RSAPrivateKey", function() {
      this.seq().obj(this.key("version").int(), this.key("modulus").int(), this.key("publicExponent").int(), this.key("privateExponent").int(), this.key("prime1").int(), this.key("prime2").int(), this.key("exponent1").int(), this.key("exponent2").int(), this.key("coefficient").int());
    });
    f$o.RSAPrivateKey = l$l;
    d$j = b$d.define("RSAPublicKey", function() {
      this.seq().obj(this.key("modulus").int(), this.key("publicExponent").int());
    });
    f$o.RSAPublicKey = d$j;
    p$l = b$d.define("SubjectPublicKeyInfo", function() {
      this.seq().obj(this.key("algorithm").use(j$7), this.key("subjectPublicKey").bitstr());
    });
    f$o.PublicKey = p$l;
    j$7 = b$d.define("AlgorithmIdentifier", function() {
      this.seq().obj(this.key("algorithm").objid(), this.key("none").null_().optional(), this.key("curve").objid().optional(), this.key("params").seq().obj(this.key("p").int(), this.key("q").int(), this.key("g").int()).optional());
    });
    v$g = b$d.define("PrivateKeyInfo", function() {
      this.seq().obj(this.key("version").int(), this.key("algorithm").use(j$7), this.key("subjectPrivateKey").octstr());
    });
    f$o.PrivateKey = v$g;
    m$h = b$d.define("EncryptedPrivateKeyInfo", function() {
      this.seq().obj(this.key("algorithm").seq().obj(this.key("id").objid(), this.key("decrypt").seq().obj(this.key("kde").seq().obj(this.key("id").objid(), this.key("kdeparams").seq().obj(this.key("salt").octstr(), this.key("iters").int())), this.key("cipher").seq().obj(this.key("algo").objid(), this.key("iv").octstr()))), this.key("subjectPrivateKey").octstr());
    });
    f$o.EncryptedPrivateKey = m$h;
    q$6 = b$d.define("DSAPrivateKey", function() {
      this.seq().obj(this.key("version").int(), this.key("p").int(), this.key("q").int(), this.key("g").int(), this.key("pub_key").int(), this.key("priv_key").int());
    });
    f$o.DSAPrivateKey = q$6, f$o.DSAparam = b$d.define("DSAparam", function() {
      this.int();
    });
    K$6 = b$d.define("ECPrivateKey", function() {
      this.seq().obj(this.key("version").int(), this.key("privateKey").octstr(), this.key("parameters").optional().explicit(0).use(P$6), this.key("publicKey").optional().explicit(1).bitstr());
    });
    f$o.ECPrivateKey = K$6;
    P$6 = b$d.define("ECParameters", function() {
      this.choice({ namedCurve: this.objid() });
    });
    f$o.signature = b$d.define("signature", function() {
      this.seq().obj(this.key("r").int(), this.key("s").int());
    });
    i$a = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r\+\/\=]+)[\n\r]+/m;
    o$p = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m;
    d$k = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r\+\/\=]+)-----END \1-----$/m;
    n$o = a$c;
    p$m = t$3;
    u$l = u4.Buffer;
    y$h = f$o;
    m$i = { "2.16.840.1.101.3.4.1.1": "aes-128-ecb", "2.16.840.1.101.3.4.1.2": "aes-128-cbc", "2.16.840.1.101.3.4.1.3": "aes-128-ofb", "2.16.840.1.101.3.4.1.4": "aes-128-cfb", "2.16.840.1.101.3.4.1.21": "aes-192-ecb", "2.16.840.1.101.3.4.1.22": "aes-192-cbc", "2.16.840.1.101.3.4.1.23": "aes-192-ofb", "2.16.840.1.101.3.4.1.24": "aes-192-cfb", "2.16.840.1.101.3.4.1.41": "aes-256-ecb", "2.16.840.1.101.3.4.1.42": "aes-256-cbc", "2.16.840.1.101.3.4.1.43": "aes-256-ofb", "2.16.840.1.101.3.4.1.44": "aes-256-cfb" };
    f$p = function(e11, r9) {
      var a8, t8 = e11.toString(), c8 = t8.match(i$a);
      if (c8) {
        var s7 = "aes" + c8[1], y6 = u$l.from(c8[2], "hex"), m6 = u$l.from(c8[3].replace(/[\r\n]/g, ""), "base64"), f9 = n$o(r9, y6.slice(0, 8), parseInt(c8[1], 10)).key, b5 = [], E4 = p$m.createDecipheriv(s7, f9, y6);
        b5.push(E4.update(m6)), b5.push(E4.final()), a8 = u$l.concat(b5);
      } else {
        var h8 = t8.match(d$k);
        a8 = new u$l(h8[2].replace(/[\r\n]/g, ""), "base64");
      }
      return { tag: t8.match(o$p)[1], data: a8 };
    };
    b$e = t$3;
    E$a = M$1;
    h$i = u4.Buffer;
    s$l = l$m, l$m.signature = y$h.signature;
    v$h = s$l;
    p$n = { "1.3.132.0.10": "secp256k1", "1.3.132.0.33": "p224", "1.2.840.10045.3.1.1": "p192", "1.2.840.10045.3.1.7": "p256", "1.3.132.0.34": "p384", "1.3.132.0.35": "p521" };
    d$l = {};
    f$q = e$1$1.Buffer;
    c$k = w$3;
    g$f = l$d;
    w$g = Le.ec;
    l$n = n$c;
    m$j = v$h;
    v$i = p$n;
    (d$l = function(e11, t8, r9, n9, a8) {
      var o9 = m$j(t8);
      if (o9.curve) {
        if ("ecdsa" !== n9 && "ecdsa/rsa" !== n9)
          throw new Error("wrong private key type");
        return function(e12, t9) {
          var r10 = v$i[t9.curve.join(".")];
          if (!r10)
            throw new Error("unknown curve " + t9.curve.join("."));
          var n10 = new w$g(r10).keyFromPrivate(t9.privateKey).sign(e12);
          return new f$q(n10.toDER());
        }(e11, o9);
      }
      if ("dsa" === o9.type) {
        if ("dsa" !== n9)
          throw new Error("wrong private key type");
        return function(e12, t9, r10) {
          var n10, a9 = t9.params.priv_key, o10 = t9.params.p, i9 = t9.params.q, s8 = t9.params.g, h9 = new l$n(0), u8 = b$f(e12, i9).mod(i9), p8 = false, d6 = y$i(a9, i9, e12, r10);
          for (; false === p8; )
            n10 = _$f(i9, d6, r10), h9 = k$e(s8, n10, o10, i9), 0 === (p8 = n10.invm(i9).imul(u8.add(a9.mul(h9))).mod(i9)).cmpn(0) && (p8 = false, h9 = new l$n(0));
          return function(e13, t10) {
            e13 = e13.toArray(), t10 = t10.toArray(), 128 & e13[0] && (e13 = [0].concat(e13));
            128 & t10[0] && (t10 = [0].concat(t10));
            var r11 = [48, e13.length + t10.length + 4, 2, e13.length];
            return r11 = r11.concat(e13, [2, t10.length], t10), new f$q(r11);
          }(h9, p8);
        }(e11, o9, r9);
      }
      if ("rsa" !== n9 && "ecdsa/rsa" !== n9)
        throw new Error("wrong private key type");
      e11 = f$q.concat([a8, e11]);
      for (var i8 = o9.modulus.byteLength(), s7 = [0, 1]; e11.length + s7.length + 1 < i8; )
        s7.push(255);
      s7.push(0);
      for (var h8 = -1; ++h8 < e11.length; )
        s7.push(e11[h8]);
      return g$f(s7, o9);
    }).getKey = y$i, d$l.makeKey = _$f;
    E$b = d$l;
    L$6 = e$1$1.Buffer;
    R$5 = n$c;
    j$8 = Le.ec;
    T$7 = v$h;
    P$7 = p$n;
    K$7 = function(e11, t8, r9, n9, a8) {
      var o9 = T$7(r9);
      if ("ec" === o9.type) {
        if ("ecdsa" !== n9 && "ecdsa/rsa" !== n9)
          throw new Error("wrong public key type");
        return function(e12, t9, r10) {
          var n10 = P$7[r10.data.algorithm.curve.join(".")];
          if (!n10)
            throw new Error("unknown curve " + r10.data.algorithm.curve.join("."));
          var a9 = new j$8(n10), o10 = r10.data.subjectPrivateKey.data;
          return a9.verify(t9, e12, o10);
        }(e11, t8, o9);
      }
      if ("dsa" === o9.type) {
        if ("dsa" !== n9)
          throw new Error("wrong public key type");
        return function(e12, t9, r10) {
          var n10 = r10.data.p, a9 = r10.data.q, o10 = r10.data.g, i9 = r10.data.pub_key, s8 = T$7.signature.decode(e12, "der"), h9 = s8.s, u9 = s8.r;
          A$a(h9, a9), A$a(u9, a9);
          var p9 = R$5.mont(n10), d7 = h9.invm(a9);
          return 0 === o10.toRed(p9).redPow(new R$5(t9).mul(d7).mod(a9)).fromRed().mul(i9.toRed(p9).redPow(u9.mul(d7).mod(a9)).fromRed()).mod(n10).mod(a9).cmp(u9);
        }(e11, t8, o9);
      }
      if ("rsa" !== n9 && "ecdsa/rsa" !== n9)
        throw new Error("wrong public key type");
      t8 = L$6.concat([a8, t8]);
      for (var i8 = o9.modulus.byteLength(), s7 = [1], h8 = 0; t8.length + s7.length + 2 < i8; )
        s7.push(255), h8++;
      s7.push(0);
      for (var u8 = -1; ++u8 < t8.length; )
        s7.push(t8[u8]);
      s7 = new L$6(s7);
      var p8 = R$5.mont(o9.modulus);
      e11 = (e11 = new R$5(e11).toRed(p8)).redPow(new R$5(o9.publicExponent)), e11 = new L$6(e11.fromRed().toArray());
      var d6 = h8 < 8 ? 1 : 0;
      for (i8 = Math.min(e11.length, s7.length), e11.length !== s7.length && (d6 = 1), u8 = -1; ++u8 < i8; )
        d6 |= e11[u8] ^ s7[u8];
      return 0 === d6;
    };
    W$4 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    x$8 = e$1$1.Buffer;
    B$a = h$4;
    S$b = b$i;
    q$7 = t$2;
    U$8 = E$b;
    V$5 = K$7;
    C$7 = s$4;
    Object.keys(C$7).forEach(function(e11) {
      C$7[e11].id = new x$8(C$7[e11].id, "hex"), C$7[e11.toLowerCase()] = C$7[e11];
    }), q$7(D$6, S$b.Writable), D$6.prototype._write = function(e11, t8, r9) {
      (this || W$4)._hash.update(e11), r9();
    }, D$6.prototype.update = function(e11, t8) {
      return "string" == typeof e11 && (e11 = new x$8(e11, t8)), (this || W$4)._hash.update(e11), this || W$4;
    }, D$6.prototype.sign = function(e11, t8) {
      this.end();
      var r9 = (this || W$4)._hash.digest(), n9 = U$8(r9, e11, (this || W$4)._hashType, (this || W$4)._signType, (this || W$4)._tag);
      return t8 ? n9.toString(t8) : n9;
    }, q$7(F$7, S$b.Writable), F$7.prototype._write = function(e11, t8, r9) {
      (this || W$4)._hash.update(e11), r9();
    }, F$7.prototype.update = function(e11, t8) {
      return "string" == typeof e11 && (e11 = new x$8(e11, t8)), (this || W$4)._hash.update(e11), this || W$4;
    }, F$7.prototype.verify = function(e11, t8, r9) {
      "string" == typeof t8 && (t8 = new x$8(t8, r9)), this.end();
      var n9 = (this || W$4)._hash.digest();
      return V$5(t8, n9, e11, (this || W$4)._signType, (this || W$4)._tag);
    };
    z$8 = { Sign: M$8, Verify: O$7, createSign: M$8, createVerify: O$7 };
    n$p = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    p$o = e$1$1.Buffer;
    s$m = Le;
    u$m = n$c;
    i$b = function(e11) {
      return new c$l(e11);
    };
    o$q = { secp256k1: { name: "secp256k1", byteLength: 32 }, secp224r1: { name: "p224", byteLength: 28 }, prime256v1: { name: "p256", byteLength: 32 }, prime192v1: { name: "p192", byteLength: 24 }, ed25519: { name: "ed25519", byteLength: 32 }, secp384r1: { name: "p384", byteLength: 48 }, secp521r1: { name: "p521", byteLength: 66 } };
    o$q.p224 = o$q.secp224r1, o$q.p256 = o$q.secp256r1 = o$q.prime256v1, o$q.p192 = o$q.secp192r1 = o$q.prime192v1, o$q.p384 = o$q.secp384r1, o$q.p521 = o$q.secp521r1, c$l.prototype.generateKeys = function(e11, t8) {
      return (this || n$p).keys = (this || n$p).curve.genKeyPair(), this.getPublicKey(e11, t8);
    }, c$l.prototype.computeSecret = function(e11, t8, r9) {
      return t8 = t8 || "utf8", p$o.isBuffer(e11) || (e11 = new p$o(e11, t8)), y$j((this || n$p).curve.keyFromPublic(e11).getPublic().mul((this || n$p).keys.getPrivate()).getX(), r9, (this || n$p).curveType.byteLength);
    }, c$l.prototype.getPublicKey = function(e11, t8) {
      var r9 = (this || n$p).keys.getPublic("compressed" === t8, true);
      return "hybrid" === t8 && (r9[r9.length - 1] % 2 ? r9[0] = 7 : r9[0] = 6), y$j(r9, e11);
    }, c$l.prototype.getPrivateKey = function(e11) {
      return y$j((this || n$p).keys.getPrivate(), e11);
    }, c$l.prototype.setPublicKey = function(e11, t8) {
      return t8 = t8 || "utf8", p$o.isBuffer(e11) || (e11 = new p$o(e11, t8)), (this || n$p).keys._importPublic(e11), this || n$p;
    }, c$l.prototype.setPrivateKey = function(e11, t8) {
      t8 = t8 || "utf8", p$o.isBuffer(e11) || (e11 = new p$o(e11, t8));
      var r9 = new u$m(e11);
      return r9 = r9.toString(16), (this || n$p).keys = (this || n$p).curve.genKeyPair(), (this || n$p).keys._importPrivate(r9), this || n$p;
    };
    f$r = i$b;
    i$c = h$4;
    l$o = u4.Buffer;
    u$n = function(r9, n9) {
      for (var e11, t8 = l$o.alloc(0), o9 = 0; t8.length < n9; )
        e11 = f$s(o9++), t8 = l$o.concat([t8, i$c("sha1").update(r9).update(e11).digest()]);
      return t8.slice(0, n9);
    };
    c$m = function(r9, n9) {
      for (var e11 = r9.length, t8 = -1; ++t8 < e11; )
        r9[t8] ^= n9[t8];
      return r9;
    };
    p$p = n$c;
    d$m = u4.Buffer;
    h$j = function(r9, n9) {
      return d$m.from(r9.toRed(p$p.mont(n9.modulus)).redPow(new p$p(n9.publicExponent)).fromRed().toArray());
    };
    s$n = v$h;
    g$g = a5;
    m$k = h$4;
    w$h = u$n;
    v$j = c$m;
    y$k = n$c;
    E$c = h$j;
    b$g = l$d;
    B$b = u4.Buffer;
    x$9 = function(r9, n9, e11) {
      var t8;
      t8 = r9.padding ? r9.padding : e11 ? 1 : 4;
      var o9, a8 = s$n(r9);
      if (4 === t8)
        o9 = function(r10, n10) {
          var e12 = r10.modulus.byteLength(), t9 = n10.length, o10 = m$k("sha1").update(B$b.alloc(0)).digest(), a9 = o10.length, i8 = 2 * a9;
          if (t9 > e12 - i8 - 2)
            throw new Error("message too long");
          var l8 = B$b.alloc(e12 - t9 - i8 - 2), f9 = e12 - a9 - 1, u8 = g$g(a9), c8 = v$j(B$b.concat([o10, l8, B$b.alloc(1, 1), n10], f9), w$h(u8, f9)), p8 = v$j(u8, w$h(c8, a9));
          return new y$k(B$b.concat([B$b.alloc(1), p8, c8], e12));
        }(a8, n9);
      else if (1 === t8)
        o9 = function(r10, n10, e12) {
          var t9, o10 = n10.length, a9 = r10.modulus.byteLength();
          if (o10 > a9 - 11)
            throw new Error("message too long");
          t9 = e12 ? B$b.alloc(a9 - o10 - 3, 255) : function(r11) {
            var n11, e13 = B$b.allocUnsafe(r11), t10 = 0, o11 = g$g(2 * r11), a10 = 0;
            for (; t10 < r11; )
              a10 === o11.length && (o11 = g$g(2 * r11), a10 = 0), (n11 = o11[a10++]) && (e13[t10++] = n11);
            return e13;
          }(a9 - o10 - 3);
          return new y$k(B$b.concat([B$b.from([0, e12 ? 1 : 2]), t9, B$b.alloc(1), n10], a9));
        }(a8, n9, e11);
      else {
        if (3 !== t8)
          throw new Error("unknown padding");
        if ((o9 = new y$k(n9)).cmp(a8.modulus) >= 0)
          throw new Error("data too long for modulus");
      }
      return e11 ? b$g(o9, a8) : E$c(o9, a8);
    };
    L$7 = v$h;
    k$f = u$n;
    D$7 = c$m;
    U$9 = n$c;
    R$6 = l$d;
    S$c = h$4;
    j$9 = h$j;
    A$b = u4.Buffer;
    I$a = function(r9, n9, e11) {
      var t8;
      t8 = r9.padding ? r9.padding : e11 ? 1 : 4;
      var o9, a8 = L$7(r9), i8 = a8.modulus.byteLength();
      if (n9.length > i8 || new U$9(n9).cmp(a8.modulus) >= 0)
        throw new Error("decryption error");
      o9 = e11 ? j$9(new U$9(n9), a8) : R$6(n9, a8);
      var l8 = A$b.alloc(i8 - o9.length);
      if (o9 = A$b.concat([l8, o9], i8), 4 === t8)
        return function(r10, n10) {
          var e12 = r10.modulus.byteLength(), t9 = S$c("sha1").update(A$b.alloc(0)).digest(), o10 = t9.length;
          if (0 !== n10[0])
            throw new Error("decryption error");
          var a9 = n10.slice(1, o10 + 1), i9 = n10.slice(o10 + 1), l9 = D$7(a9, k$f(i9, o10)), f9 = D$7(i9, k$f(l9, e12 - o10 - 1));
          if (function(r11, n11) {
            r11 = A$b.from(r11), n11 = A$b.from(n11);
            var e13 = 0, t10 = r11.length;
            r11.length !== n11.length && (e13++, t10 = Math.min(r11.length, n11.length));
            var o11 = -1;
            for (; ++o11 < t10; )
              e13 += r11[o11] ^ n11[o11];
            return e13;
          }(t9, f9.slice(0, o10)))
            throw new Error("decryption error");
          var u8 = o10;
          for (; 0 === f9[u8]; )
            u8++;
          if (1 !== f9[u8++])
            throw new Error("decryption error");
          return f9.slice(u8);
        }(a8, o9);
      if (1 === t8)
        return function(r10, n10, e12) {
          var t9 = n10.slice(0, 2), o10 = 2, a9 = 0;
          for (; 0 !== n10[o10++]; )
            if (o10 >= n10.length) {
              a9++;
              break;
            }
          var i9 = n10.slice(2, o10 - 1);
          ("0002" !== t9.toString("hex") && !e12 || "0001" !== t9.toString("hex") && e12) && a9++;
          i9.length < 8 && a9++;
          if (a9)
            throw new Error("decryption error");
          return n10.slice(o10);
        }(0, o9, e11);
      if (3 === t8)
        return o9;
      throw new Error("unknown padding");
    };
    M$9 = {};
    M$9.publicEncrypt = x$9, M$9.privateDecrypt = I$a, M$9.privateEncrypt = function(r9, n9) {
      return M$9.publicEncrypt(r9, n9, true);
    }, M$9.publicDecrypt = function(r9, n9) {
      return M$9.privateDecrypt(r9, n9, true);
    };
    o$r = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : global;
    t$b = {};
    f$t = T;
    u$o = u4;
    a$o = a5;
    s$o = u$o.Buffer;
    l$p = u$o.kMaxLength;
    m$l = o$r.crypto || o$r.msCrypto;
    p$q = Math.pow(2, 32) - 1;
    m$l && m$l.getRandomValues || !f$t.browser ? (t$b.randomFill = function(r9, e11, n9, t8) {
      if (!(s$o.isBuffer(r9) || r9 instanceof o$r.Uint8Array))
        throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
      if ("function" == typeof e11)
        t8 = e11, e11 = 0, n9 = r9.length;
      else if ("function" == typeof n9)
        t8 = n9, n9 = r9.length - e11;
      else if ("function" != typeof t8)
        throw new TypeError('"cb" argument must be a function');
      return y$l(e11, r9.length), b$h(n9, e11, r9.length), w$i(r9, e11, n9, t8);
    }, t$b.randomFillSync = function(r9, e11, n9) {
      void 0 === e11 && (e11 = 0);
      if (!(s$o.isBuffer(r9) || r9 instanceof o$r.Uint8Array))
        throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
      y$l(e11, r9.length), void 0 === n9 && (n9 = r9.length - e11);
      return b$h(n9, e11, r9.length), w$i(r9, e11, n9);
    }) : (t$b.randomFill = i$d, t$b.randomFillSync = i$d);
    l$q = {};
    l$q.randomBytes = l$q.rng = l$q.pseudoRandomBytes = l$q.prng = a5, l$q.createHash = l$q.Hash = h$4, l$q.createHmac = l$q.Hmac = w$3;
    D$8 = s$4;
    s$p = Object.keys(D$8);
    _$g = ["sha1", "sha224", "sha256", "sha384", "sha512", "md5", "rmd160"].concat(s$p);
    l$q.getHashes = function() {
      return _$g;
    };
    h$k = M$1;
    l$q.pbkdf2 = h$k.pbkdf2, l$q.pbkdf2Sync = h$k.pbkdf2Sync;
    y$m = p$d;
    l$q.Cipher = y$m.Cipher, l$q.createCipher = y$m.createCipher, l$q.Cipheriv = y$m.Cipheriv, l$q.createCipheriv = y$m.createCipheriv, l$q.Decipher = y$m.Decipher, l$q.createDecipher = y$m.createDecipher, l$q.Decipheriv = y$m.Decipheriv, l$q.createDecipheriv = y$m.createDecipheriv, l$q.getCiphers = y$m.getCiphers, l$q.listCiphers = y$m.listCiphers;
    E$d = O$3;
    l$q.DiffieHellmanGroup = E$d.DiffieHellmanGroup, l$q.createDiffieHellmanGroup = E$d.createDiffieHellmanGroup, l$q.getDiffieHellman = E$d.getDiffieHellman, l$q.createDiffieHellman = E$d.createDiffieHellman, l$q.DiffieHellman = E$d.DiffieHellman;
    S$d = z$8;
    l$q.createSign = S$d.createSign, l$q.Sign = S$d.Sign, l$q.createVerify = S$d.createVerify, l$q.Verify = S$d.Verify, l$q.createECDH = f$r;
    C$8 = M$9;
    l$q.publicEncrypt = C$8.publicEncrypt, l$q.privateEncrypt = C$8.privateEncrypt, l$q.publicDecrypt = C$8.publicDecrypt, l$q.privateDecrypt = C$8.privateDecrypt;
    N$6 = t$b;
    l$q.randomFill = N$6.randomFill, l$q.randomFillSync = N$6.randomFillSync, l$q.createCredentials = function() {
      throw new Error(["sorry, createCredentials is not implemented yet", "we accept pull requests", "https://github.com/crypto-browserify/crypto-browserify"].join("\n"));
    }, l$q.constants = { DH_CHECK_P_NOT_SAFE_PRIME: 2, DH_CHECK_P_NOT_PRIME: 1, DH_UNABLE_TO_CHECK_GENERATOR: 4, DH_NOT_SUITABLE_GENERATOR: 8, NPN_ENABLED: 1, ALPN_ENABLED: 1, RSA_PKCS1_PADDING: 1, RSA_SSLV23_PADDING: 2, RSA_NO_PADDING: 3, RSA_PKCS1_OAEP_PADDING: 4, RSA_X931_PADDING: 5, RSA_PKCS1_PSS_PADDING: 6, POINT_CONVERSION_COMPRESSED: 2, POINT_CONVERSION_UNCOMPRESSED: 4, POINT_CONVERSION_HYBRID: 6 };
    exports$10$1 = {};
    _dewExec$10$1 = false;
    _global$a$1 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$$$1 = {};
    _dewExec$$$1 = false;
    _global$9$1 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$_$1 = {};
    _dewExec$_$1 = false;
    _primes$1 = {
      "modp1": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
      },
      "modp2": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
      },
      "modp5": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
      },
      "modp14": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
      },
      "modp15": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
      },
      "modp16": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
      },
      "modp17": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
      },
      "modp18": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
      }
    };
    exports$Z$1 = {};
    _dewExec$Z$1 = false;
    _global$8$1 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$Y$1 = {};
    _dewExec$Y$1 = false;
    exports$X$1 = {};
    _dewExec$X$1 = false;
    module$4$1 = {
      exports: exports$X$1
    };
    _global$7$1 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$W$1 = {};
    _dewExec$W$1 = false;
    _package$1 = {
      "_args": [
        [
          "elliptic@6.5.4",
          "C:\\Users\\guybe\\Projects\\rollup-plugin-jspm"
        ]
      ],
      "_from": "elliptic@6.5.4",
      "_id": "elliptic@6.5.4",
      "_inBundle": false,
      "_integrity": "sha512-iLhC6ULemrljPZb+QutR5TQGB+pdW6KGD5RSegS+8sorOZT+rdQFbsQFJgvN3eRqNALqJer4oQ16YvJHlU8hzQ==",
      "_location": "/@jspm/core/elliptic",
      "_phantomChildren": {},
      "_requested": {
        "type": "version",
        "registry": true,
        "raw": "elliptic@6.5.4",
        "name": "elliptic",
        "escapedName": "elliptic",
        "rawSpec": "6.5.4",
        "saveSpec": null,
        "fetchSpec": "6.5.4"
      },
      "_requiredBy": [
        "/@jspm/core/browserify-sign",
        "/@jspm/core/create-ecdh"
      ],
      "_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-6.5.4.tgz",
      "_spec": "6.5.4",
      "_where": "C:\\Users\\guybe\\Projects\\rollup-plugin-jspm",
      "author": {
        "name": "Fedor Indutny",
        "email": "fedor@indutny.com"
      },
      "bugs": {
        "url": "https://github.com/indutny/elliptic/issues"
      },
      "dependencies": {
        "bn.js": "^4.11.9",
        "brorand": "^1.1.0",
        "hash.js": "^1.0.0",
        "hmac-drbg": "^1.0.1",
        "inherits": "^2.0.4",
        "minimalistic-assert": "^1.0.1",
        "minimalistic-crypto-utils": "^1.0.1"
      },
      "description": "EC cryptography",
      "devDependencies": {
        "brfs": "^2.0.2",
        "coveralls": "^3.1.0",
        "eslint": "^7.6.0",
        "grunt": "^1.2.1",
        "grunt-browserify": "^5.3.0",
        "grunt-cli": "^1.3.2",
        "grunt-contrib-connect": "^3.0.0",
        "grunt-contrib-copy": "^1.0.0",
        "grunt-contrib-uglify": "^5.0.0",
        "grunt-mocha-istanbul": "^5.0.2",
        "grunt-saucelabs": "^9.0.1",
        "istanbul": "^0.4.5",
        "mocha": "^8.0.1"
      },
      "files": [
        "lib"
      ],
      "homepage": "https://github.com/indutny/elliptic",
      "keywords": [
        "EC",
        "Elliptic",
        "curve",
        "Cryptography"
      ],
      "license": "MIT",
      "main": "lib/elliptic.js",
      "name": "elliptic",
      "repository": {
        "type": "git",
        "url": "git+ssh://git@github.com/indutny/elliptic.git"
      },
      "scripts": {
        "lint": "eslint lib test",
        "lint:fix": "npm run lint -- --fix",
        "test": "npm run lint && npm run unit",
        "unit": "istanbul test _mocha --reporter=spec test/index.js",
        "version": "grunt dist && git add dist/"
      },
      "version": "6.5.4"
    };
    exports$V$1 = {};
    _dewExec$V$1 = false;
    module$3$1 = {
      exports: exports$V$1
    };
    _global$6$1 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$U$1 = {};
    _dewExec$U$1 = false;
    exports$T$1 = {};
    _dewExec$T$1 = false;
    exports$S$1 = {};
    _dewExec$S$1 = false;
    exports$R$1 = {};
    _dewExec$R$1 = false;
    exports$Q$1 = {};
    _dewExec$Q$1 = false;
    exports$P$1 = {};
    _dewExec$P$1 = false;
    exports$O$1 = {};
    _dewExec$O$1 = false;
    exports$N$1 = {};
    _dewExec$N$1 = false;
    exports$M$1 = {};
    _dewExec$M$1 = false;
    exports$L$1 = {};
    _dewExec$L$1 = false;
    exports$K$1 = {};
    _dewExec$K$1 = false;
    exports$J$1 = {};
    _dewExec$J$1 = false;
    exports$I$1 = {};
    _dewExec$I$1 = false;
    exports$H$1 = {};
    _dewExec$H$1 = false;
    exports$G$1 = {};
    _dewExec$G$1 = false;
    exports$F$1 = {};
    _dewExec$F$1 = false;
    exports$E$1 = {};
    _dewExec$E$1 = false;
    exports$D$1 = {};
    _dewExec$D$1 = false;
    exports$C$1 = {};
    _dewExec$C$1 = false;
    exports$B$1 = {};
    _dewExec$B$1 = false;
    exports$A$1 = {};
    _dewExec$A$1 = false;
    exports$z$1 = {};
    _dewExec$z$1 = false;
    exports$y$1 = {};
    _dewExec$y$1 = false;
    exports$x$1 = {};
    _dewExec$x$1 = false;
    module$2$1 = {
      exports: exports$x$1
    };
    _global$5$1 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$w$1 = {};
    _dewExec$w$1 = false;
    exports$v$1 = {};
    _dewExec$v$1 = false;
    exports$u$1 = {};
    _dewExec$u$1 = false;
    exports$t$1 = {};
    _dewExec$t$1 = false;
    exports$s$1 = {};
    _dewExec$s$1 = false;
    exports$r$1 = {};
    _dewExec$r$1 = false;
    exports$q$1 = {};
    _dewExec$q$1 = false;
    exports$p$1 = {};
    _dewExec$p$1 = false;
    exports$o$1 = {};
    _dewExec$o$1 = false;
    exports$n$1 = {};
    _dewExec$n$1 = false;
    exports$m$1 = {};
    _dewExec$m$1 = false;
    exports$l$1 = {};
    _dewExec$l$1 = false;
    exports$k$1 = {};
    _dewExec$k$1 = false;
    exports$j$1 = {};
    _dewExec$j$1 = false;
    exports$i$1 = {};
    _dewExec$i$1 = false;
    exports$h$1 = {};
    _dewExec$h$1 = false;
    exports$g$1 = {};
    _dewExec$g$1 = false;
    _aesid$1 = {
      "2.16.840.1.101.3.4.1.1": "aes-128-ecb",
      "2.16.840.1.101.3.4.1.2": "aes-128-cbc",
      "2.16.840.1.101.3.4.1.3": "aes-128-ofb",
      "2.16.840.1.101.3.4.1.4": "aes-128-cfb",
      "2.16.840.1.101.3.4.1.21": "aes-192-ecb",
      "2.16.840.1.101.3.4.1.22": "aes-192-cbc",
      "2.16.840.1.101.3.4.1.23": "aes-192-ofb",
      "2.16.840.1.101.3.4.1.24": "aes-192-cfb",
      "2.16.840.1.101.3.4.1.41": "aes-256-ecb",
      "2.16.840.1.101.3.4.1.42": "aes-256-cbc",
      "2.16.840.1.101.3.4.1.43": "aes-256-ofb",
      "2.16.840.1.101.3.4.1.44": "aes-256-cfb"
    };
    exports$f$1 = {};
    _dewExec$f$1 = false;
    exports$e$1 = {};
    _dewExec$e$1 = false;
    _curves$1 = {
      "1.3.132.0.10": "secp256k1",
      "1.3.132.0.33": "p224",
      "1.2.840.10045.3.1.1": "p192",
      "1.2.840.10045.3.1.7": "p256",
      "1.3.132.0.34": "p384",
      "1.3.132.0.35": "p521"
    };
    exports$d$1 = {};
    _dewExec$d$1 = false;
    exports$c$1 = {};
    _dewExec$c$1 = false;
    exports$b$1 = {};
    _dewExec$b$1 = false;
    _global$4$1 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$a$1 = {};
    _dewExec$a$1 = false;
    module$1$1 = {
      exports: exports$a$1
    };
    _global$3$1 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$9$1 = {};
    _dewExec$9$1 = false;
    _global$2$1 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$8$1 = {};
    _dewExec$8$1 = false;
    exports$7$1 = {};
    _dewExec$7$1 = false;
    exports$6$1 = {};
    _dewExec$6$1 = false;
    module$8 = {
      exports: exports$6$1
    };
    _global$1$1 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$5$1 = {};
    _dewExec$5$1 = false;
    exports$4$1 = {};
    _dewExec$4$1 = false;
    exports$3$1 = {};
    _dewExec$3$1 = false;
    exports$2$12 = {};
    _dewExec$2$12 = false;
    exports$1$12 = {};
    _dewExec$1$12 = false;
    _global$x = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$1V = {};
    _dewExec$1U = false;
    crypto = dew$1U();
    crypto.Cipher;
    crypto.Cipheriv;
    crypto.Decipher;
    crypto.Decipheriv;
    crypto.DiffieHellman;
    crypto.DiffieHellmanGroup;
    crypto.Hash;
    crypto.Hmac;
    crypto.Sign;
    crypto.Verify;
    crypto.constants;
    crypto.createCipher;
    crypto.createCipheriv;
    crypto.createCredentials;
    crypto.createDecipher;
    crypto.createDecipheriv;
    crypto.createDiffieHellman;
    crypto.createDiffieHellmanGroup;
    crypto.createECDH;
    crypto.createHash;
    crypto.createHmac;
    crypto.createSign;
    crypto.createVerify;
    crypto.getCiphers;
    crypto.getDiffieHellman;
    crypto.getHashes;
    crypto.listCiphers;
    crypto.pbkdf2;
    crypto.pbkdf2Sync;
    crypto.privateDecrypt;
    crypto.privateEncrypt;
    crypto.prng;
    crypto.pseudoRandomBytes;
    crypto.publicDecrypt;
    crypto.publicEncrypt;
    crypto.randomBytes;
    crypto.randomFill;
    crypto.randomFillSync;
    crypto.rng;
    exports$122 = {};
    _dewExec$11 = false;
    _global$a = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$11 = {};
    _dewExec$10 = false;
    _global$9 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$10 = {};
    _dewExec$$ = false;
    _primes = {
      "modp1": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
      },
      "modp2": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
      },
      "modp5": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
      },
      "modp14": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
      },
      "modp15": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
      },
      "modp16": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
      },
      "modp17": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
      },
      "modp18": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
      }
    };
    exports$$ = {};
    _dewExec$_ = false;
    _global$8 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$_ = {};
    _dewExec$Z = false;
    exports$Z = {};
    _dewExec$Y = false;
    exports$Y = {};
    _dewExec$X = false;
    module$4 = {
      exports: exports$Y
    };
    _global$7 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$X = {};
    _dewExec$W = false;
    _package = {
      "name": "elliptic",
      "version": "6.5.4",
      "description": "EC cryptography",
      "main": "lib/elliptic.js",
      "files": [
        "lib"
      ],
      "scripts": {
        "lint": "eslint lib test",
        "lint:fix": "npm run lint -- --fix",
        "unit": "istanbul test _mocha --reporter=spec test/index.js",
        "test": "npm run lint && npm run unit",
        "version": "grunt dist && git add dist/"
      },
      "repository": {
        "type": "git",
        "url": "git@github.com:indutny/elliptic"
      },
      "keywords": [
        "EC",
        "Elliptic",
        "curve",
        "Cryptography"
      ],
      "author": "Fedor Indutny <fedor@indutny.com>",
      "license": "MIT",
      "bugs": {
        "url": "https://github.com/indutny/elliptic/issues"
      },
      "homepage": "https://github.com/indutny/elliptic",
      "devDependencies": {
        "brfs": "^2.0.2",
        "coveralls": "^3.1.0",
        "eslint": "^7.6.0",
        "grunt": "^1.2.1",
        "grunt-browserify": "^5.3.0",
        "grunt-cli": "^1.3.2",
        "grunt-contrib-connect": "^3.0.0",
        "grunt-contrib-copy": "^1.0.0",
        "grunt-contrib-uglify": "^5.0.0",
        "grunt-mocha-istanbul": "^5.0.2",
        "grunt-saucelabs": "^9.0.1",
        "istanbul": "^0.4.5",
        "mocha": "^8.0.1"
      },
      "dependencies": {
        "bn.js": "^4.11.9",
        "brorand": "^1.1.0",
        "hash.js": "^1.0.0",
        "hmac-drbg": "^1.0.1",
        "inherits": "^2.0.4",
        "minimalistic-assert": "^1.0.1",
        "minimalistic-crypto-utils": "^1.0.1"
      }
    };
    exports$W = {};
    _dewExec$V = false;
    module$3 = {
      exports: exports$W
    };
    _global$6 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$V = {};
    _dewExec$U = false;
    exports$U = {};
    _dewExec$T = false;
    exports$T = {};
    _dewExec$S = false;
    exports$S = {};
    _dewExec$R = false;
    exports$R = {};
    _dewExec$Q = false;
    exports$Q = {};
    _dewExec$P = false;
    exports$P = {};
    _dewExec$O = false;
    exports$O = {};
    _dewExec$N = false;
    exports$N = {};
    _dewExec$M = false;
    exports$M = {};
    _dewExec$L = false;
    exports$L = {};
    _dewExec$K = false;
    exports$K = {};
    _dewExec$J = false;
    exports$J = {};
    _dewExec$I = false;
    exports$I = {};
    _dewExec$H = false;
    exports$H = {};
    _dewExec$G = false;
    exports$G = {};
    _dewExec$F = false;
    exports$F = {};
    _dewExec$E = false;
    exports$E = {};
    _dewExec$D = false;
    exports$D = {};
    _dewExec$C = false;
    exports$C = {};
    _dewExec$B = false;
    exports$B = {};
    _dewExec$A = false;
    exports$A = {};
    _dewExec$z = false;
    exports$z = {};
    _dewExec$y = false;
    exports$y = {};
    _dewExec$x = false;
    module$2 = {
      exports: exports$y
    };
    _global$5 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$x = {};
    _dewExec$w = false;
    exports$w = {};
    _dewExec$v = false;
    exports$v = {};
    _dewExec$u = false;
    exports$u = {};
    _dewExec$t = false;
    exports$t = {};
    _dewExec$s = false;
    exports$s = {};
    _dewExec$r = false;
    exports$r = {};
    _dewExec$q = false;
    exports$q = {};
    _dewExec$p = false;
    exports$p = {};
    _dewExec$o = false;
    exports$o = {};
    _dewExec$n = false;
    exports$n = {};
    _dewExec$m = false;
    exports$m = {};
    _dewExec$l = false;
    exports$l = {};
    _dewExec$k = false;
    exports$k = {};
    _dewExec$j = false;
    exports$j = {};
    _dewExec$i = false;
    exports$i = {};
    _dewExec$h = false;
    exports$h = {};
    _dewExec$g2 = false;
    _aesid = {
      "2.16.840.1.101.3.4.1.1": "aes-128-ecb",
      "2.16.840.1.101.3.4.1.2": "aes-128-cbc",
      "2.16.840.1.101.3.4.1.3": "aes-128-ofb",
      "2.16.840.1.101.3.4.1.4": "aes-128-cfb",
      "2.16.840.1.101.3.4.1.21": "aes-192-ecb",
      "2.16.840.1.101.3.4.1.22": "aes-192-cbc",
      "2.16.840.1.101.3.4.1.23": "aes-192-ofb",
      "2.16.840.1.101.3.4.1.24": "aes-192-cfb",
      "2.16.840.1.101.3.4.1.41": "aes-256-ecb",
      "2.16.840.1.101.3.4.1.42": "aes-256-cbc",
      "2.16.840.1.101.3.4.1.43": "aes-256-ofb",
      "2.16.840.1.101.3.4.1.44": "aes-256-cfb"
    };
    exports$g2 = {};
    _dewExec$f2 = false;
    exports$f2 = {};
    _dewExec$e2 = false;
    _curves = {
      "1.3.132.0.10": "secp256k1",
      "1.3.132.0.33": "p224",
      "1.2.840.10045.3.1.1": "p192",
      "1.2.840.10045.3.1.7": "p256",
      "1.3.132.0.34": "p384",
      "1.3.132.0.35": "p521"
    };
    exports$e2 = {};
    _dewExec$d2 = false;
    exports$d2 = {};
    _dewExec$c2 = false;
    exports$c2 = {};
    _dewExec$b2 = false;
    _global$4 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$b2 = {};
    _dewExec$a2 = false;
    module$1 = {
      exports: exports$b2
    };
    _global$3 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$a2 = {};
    _dewExec$92 = false;
    _global$22 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$92 = {};
    _dewExec$82 = false;
    exports$82 = {};
    _dewExec$72 = false;
    exports$72 = {};
    _dewExec$62 = false;
    module = {
      exports: exports$72
    };
    _global$12 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$62 = {};
    _dewExec$52 = false;
    exports$52 = {};
    _dewExec$42 = false;
    exports$42 = {};
    _dewExec$32 = false;
    exports$33 = {};
    _dewExec$210 = false;
    exports$210 = {};
    _dewExec$110 = false;
    _global4 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$110 = {};
    _dewExec5 = false;
    exports5 = dew5();
    exports5["randomBytes"];
    exports5["rng"];
    exports5["pseudoRandomBytes"];
    exports5["prng"];
    exports5["createHash"];
    exports5["Hash"];
    exports5["createHmac"];
    exports5["Hmac"];
    exports5["getHashes"];
    exports5["pbkdf2"];
    exports5["pbkdf2Sync"];
    exports5["Cipher"];
    exports5["createCipher"];
    exports5["Cipheriv"];
    exports5["createCipheriv"];
    exports5["Decipher"];
    exports5["createDecipher"];
    exports5["Decipheriv"];
    exports5["createDecipheriv"];
    exports5["getCiphers"];
    exports5["listCiphers"];
    exports5["DiffieHellmanGroup"];
    exports5["createDiffieHellmanGroup"];
    exports5["getDiffieHellman"];
    exports5["createDiffieHellman"];
    exports5["DiffieHellman"];
    exports5["createSign"];
    exports5["Sign"];
    exports5["createVerify"];
    exports5["Verify"];
    exports5["createECDH"];
    exports5["publicEncrypt"];
    exports5["privateEncrypt"];
    exports5["publicDecrypt"];
    exports5["privateDecrypt"];
    exports5["randomFill"];
    exports5["randomFillSync"];
    exports5["createCredentials"];
    exports5["constants"];
    exports5.webcrypto = globalThis.crypto;
    Cipher = exports5.Cipher;
    Cipheriv = exports5.Cipheriv;
    Decipher = exports5.Decipher;
    Decipheriv = exports5.Decipheriv;
    DiffieHellman = exports5.DiffieHellman;
    DiffieHellmanGroup = exports5.DiffieHellmanGroup;
    Hash = exports5.Hash;
    Hmac = exports5.Hmac;
    Sign = exports5.Sign;
    Verify = exports5.Verify;
    constants = exports5.constants;
    createCipher = exports5.createCipher;
    createCipheriv = exports5.createCipheriv;
    createCredentials = exports5.createCredentials;
    createDecipher = exports5.createDecipher;
    createDecipheriv = exports5.createDecipheriv;
    createDiffieHellman = exports5.createDiffieHellman;
    createDiffieHellmanGroup = exports5.createDiffieHellmanGroup;
    createECDH = exports5.createECDH;
    createHash = exports5.createHash;
    createHmac = exports5.createHmac;
    createSign = exports5.createSign;
    createVerify = exports5.createVerify;
    getCiphers = exports5.getCiphers;
    getDiffieHellman = exports5.getDiffieHellman;
    getHashes = exports5.getHashes;
    listCiphers = exports5.listCiphers;
    pbkdf2 = exports5.pbkdf2;
    pbkdf2Sync = exports5.pbkdf2Sync;
    privateDecrypt = exports5.privateDecrypt;
    privateEncrypt = exports5.privateEncrypt;
    prng = exports5.prng;
    pseudoRandomBytes = exports5.pseudoRandomBytes;
    publicDecrypt = exports5.publicDecrypt;
    publicEncrypt = exports5.publicEncrypt;
    randomBytes = exports5.randomBytes;
    randomFill = exports5.randomFill;
    randomFillSync = exports5.randomFillSync;
    rng = exports5.rng;
    webcrypto = exports5.webcrypto;
  }
});

// ../../node_modules/.pnpm/browser-or-node@2.1.1/node_modules/browser-or-node/lib/index.js
var require_lib = __commonJS({
  "../../node_modules/.pnpm/browser-or-node@2.1.1/node_modules/browser-or-node/lib/index.js"(exports11) {
    "use strict";
    init_dirname();
    init_buffer2();
    init_process2();
    Object.defineProperty(exports11, "__esModule", {
      value: true
    });
    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
      return typeof obj;
    } : function(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    var isBrowser4 = typeof window !== "undefined" && typeof window.document !== "undefined";
    var isNode = typeof process_exports !== "undefined" && process_exports.versions != null && process_exports.versions.node != null;
    var isWebWorker = (typeof self === "undefined" ? "undefined" : _typeof(self)) === "object" && self.constructor && self.constructor.name === "DedicatedWorkerGlobalScope";
    var isJsDom = typeof window !== "undefined" && window.name === "nodejs" || typeof navigator !== "undefined" && (navigator.userAgent.includes("Node.js") || navigator.userAgent.includes("jsdom"));
    var isDeno = typeof Deno !== "undefined" && typeof Deno.version !== "undefined" && typeof Deno.version.deno !== "undefined";
    exports11.isBrowser = isBrowser4;
    exports11.isWebWorker = isWebWorker;
    exports11.isNode = isNode;
    exports11.isJsDom = isJsDom;
    exports11.isDeno = isDeno;
  }
});

// ../../node_modules/.pnpm/has-symbols@1.0.3/node_modules/has-symbols/shams.js
var require_shams = __commonJS({
  "../../node_modules/.pnpm/has-symbols@1.0.3/node_modules/has-symbols/shams.js"(exports11, module3) {
    "use strict";
    init_dirname();
    init_buffer2();
    init_process2();
    module3.exports = function hasSymbols() {
      if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
        return false;
      }
      if (typeof Symbol.iterator === "symbol") {
        return true;
      }
      var obj = {};
      var sym = Symbol("test");
      var symObj = Object(sym);
      if (typeof sym === "string") {
        return false;
      }
      if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
        return false;
      }
      if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
        return false;
      }
      var symVal = 42;
      obj[sym] = symVal;
      for (sym in obj) {
        return false;
      }
      if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
        return false;
      }
      if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
        return false;
      }
      var syms = Object.getOwnPropertySymbols(obj);
      if (syms.length !== 1 || syms[0] !== sym) {
        return false;
      }
      if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
        return false;
      }
      if (typeof Object.getOwnPropertyDescriptor === "function") {
        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
        if (descriptor.value !== symVal || descriptor.enumerable !== true) {
          return false;
        }
      }
      return true;
    };
  }
});

// ../../node_modules/.pnpm/has-symbols@1.0.3/node_modules/has-symbols/index.js
var require_has_symbols = __commonJS({
  "../../node_modules/.pnpm/has-symbols@1.0.3/node_modules/has-symbols/index.js"(exports11, module3) {
    "use strict";
    init_dirname();
    init_buffer2();
    init_process2();
    var origSymbol = typeof Symbol !== "undefined" && Symbol;
    var hasSymbolSham = require_shams();
    module3.exports = function hasNativeSymbols() {
      if (typeof origSymbol !== "function") {
        return false;
      }
      if (typeof Symbol !== "function") {
        return false;
      }
      if (typeof origSymbol("foo") !== "symbol") {
        return false;
      }
      if (typeof Symbol("bar") !== "symbol") {
        return false;
      }
      return hasSymbolSham();
    };
  }
});

// ../../node_modules/.pnpm/has-proto@1.0.3/node_modules/has-proto/index.js
var require_has_proto = __commonJS({
  "../../node_modules/.pnpm/has-proto@1.0.3/node_modules/has-proto/index.js"(exports11, module3) {
    "use strict";
    init_dirname();
    init_buffer2();
    init_process2();
    var test = {
      __proto__: null,
      foo: {}
    };
    var $Object = Object;
    module3.exports = function hasProto() {
      return { __proto__: test }.foo === test.foo && !(test instanceof $Object);
    };
  }
});

// ../../node_modules/.pnpm/function-bind@1.1.2/node_modules/function-bind/implementation.js
var require_implementation = __commonJS({
  "../../node_modules/.pnpm/function-bind@1.1.2/node_modules/function-bind/implementation.js"(exports11, module3) {
    "use strict";
    init_dirname();
    init_buffer2();
    init_process2();
    var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
    var toStr = Object.prototype.toString;
    var max = Math.max;
    var funcType = "[object Function]";
    var concatty = function concatty2(a8, b5) {
      var arr = [];
      for (var i8 = 0; i8 < a8.length; i8 += 1) {
        arr[i8] = a8[i8];
      }
      for (var j4 = 0; j4 < b5.length; j4 += 1) {
        arr[j4 + a8.length] = b5[j4];
      }
      return arr;
    };
    var slicy = function slicy2(arrLike, offset) {
      var arr = [];
      for (var i8 = offset || 0, j4 = 0; i8 < arrLike.length; i8 += 1, j4 += 1) {
        arr[j4] = arrLike[i8];
      }
      return arr;
    };
    var joiny = function(arr, joiner) {
      var str = "";
      for (var i8 = 0; i8 < arr.length; i8 += 1) {
        str += arr[i8];
        if (i8 + 1 < arr.length) {
          str += joiner;
        }
      }
      return str;
    };
    module3.exports = function bind2(that) {
      var target = this;
      if (typeof target !== "function" || toStr.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
      }
      var args = slicy(arguments, 1);
      var bound;
      var binder = function() {
        if (this instanceof bound) {
          var result = target.apply(
            this,
            concatty(args, arguments)
          );
          if (Object(result) === result) {
            return result;
          }
          return this;
        }
        return target.apply(
          that,
          concatty(args, arguments)
        );
      };
      var boundLength = max(0, target.length - args.length);
      var boundArgs = [];
      for (var i8 = 0; i8 < boundLength; i8++) {
        boundArgs[i8] = "$" + i8;
      }
      bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
      if (target.prototype) {
        var Empty = function Empty2() {
        };
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
      }
      return bound;
    };
  }
});

// ../../node_modules/.pnpm/function-bind@1.1.2/node_modules/function-bind/index.js
var require_function_bind = __commonJS({
  "../../node_modules/.pnpm/function-bind@1.1.2/node_modules/function-bind/index.js"(exports11, module3) {
    "use strict";
    init_dirname();
    init_buffer2();
    init_process2();
    var implementation = require_implementation();
    module3.exports = Function.prototype.bind || implementation;
  }
});

// ../../node_modules/.pnpm/has@1.0.3/node_modules/has/src/index.js
var require_src = __commonJS({
  "../../node_modules/.pnpm/has@1.0.3/node_modules/has/src/index.js"(exports11, module3) {
    "use strict";
    init_dirname();
    init_buffer2();
    init_process2();
    var bind2 = require_function_bind();
    module3.exports = bind2.call(Function.call, Object.prototype.hasOwnProperty);
  }
});

// ../../node_modules/.pnpm/get-intrinsic@1.2.1/node_modules/get-intrinsic/index.js
var require_get_intrinsic = __commonJS({
  "../../node_modules/.pnpm/get-intrinsic@1.2.1/node_modules/get-intrinsic/index.js"(exports11, module3) {
    "use strict";
    init_dirname();
    init_buffer2();
    init_process2();
    var undefined2;
    var $SyntaxError = SyntaxError;
    var $Function = Function;
    var $TypeError = TypeError;
    var getEvalledConstructor = function(expressionSyntax) {
      try {
        return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
      } catch (e11) {
      }
    };
    var $gOPD = Object.getOwnPropertyDescriptor;
    if ($gOPD) {
      try {
        $gOPD({}, "");
      } catch (e11) {
        $gOPD = null;
      }
    }
    var throwTypeError = function() {
      throw new $TypeError();
    };
    var ThrowTypeError = $gOPD ? function() {
      try {
        arguments.callee;
        return throwTypeError;
      } catch (calleeThrows) {
        try {
          return $gOPD(arguments, "callee").get;
        } catch (gOPDthrows) {
          return throwTypeError;
        }
      }
    }() : throwTypeError;
    var hasSymbols = require_has_symbols()();
    var hasProto = require_has_proto()();
    var getProto = Object.getPrototypeOf || (hasProto ? function(x4) {
      return x4.__proto__;
    } : null);
    var needsEval = {};
    var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined2 : getProto(Uint8Array);
    var INTRINSICS = {
      "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
      "%Array%": Array,
      "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
      "%ArrayIteratorPrototype%": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined2,
      "%AsyncFromSyncIteratorPrototype%": undefined2,
      "%AsyncFunction%": needsEval,
      "%AsyncGenerator%": needsEval,
      "%AsyncGeneratorFunction%": needsEval,
      "%AsyncIteratorPrototype%": needsEval,
      "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
      "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
      "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined2 : BigInt64Array,
      "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined2 : BigUint64Array,
      "%Boolean%": Boolean,
      "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
      "%Date%": Date,
      "%decodeURI%": decodeURI,
      "%decodeURIComponent%": decodeURIComponent,
      "%encodeURI%": encodeURI,
      "%encodeURIComponent%": encodeURIComponent,
      "%Error%": Error,
      "%eval%": eval,
      "%EvalError%": EvalError,
      "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
      "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
      "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
      "%Function%": $Function,
      "%GeneratorFunction%": needsEval,
      "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
      "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
      "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
      "%isFinite%": isFinite,
      "%isNaN%": isNaN,
      "%IteratorPrototype%": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined2,
      "%JSON%": typeof JSON === "object" ? JSON : undefined2,
      "%Map%": typeof Map === "undefined" ? undefined2 : Map,
      "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
      "%Math%": Math,
      "%Number%": Number,
      "%Object%": Object,
      "%parseFloat%": parseFloat,
      "%parseInt%": parseInt,
      "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
      "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
      "%RangeError%": RangeError,
      "%ReferenceError%": ReferenceError,
      "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
      "%RegExp%": RegExp,
      "%Set%": typeof Set === "undefined" ? undefined2 : Set,
      "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
      "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
      "%String%": String,
      "%StringIteratorPrototype%": hasSymbols && getProto ? getProto(""[Symbol.iterator]()) : undefined2,
      "%Symbol%": hasSymbols ? Symbol : undefined2,
      "%SyntaxError%": $SyntaxError,
      "%ThrowTypeError%": ThrowTypeError,
      "%TypedArray%": TypedArray,
      "%TypeError%": $TypeError,
      "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
      "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
      "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
      "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
      "%URIError%": URIError,
      "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
      "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
      "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet
    };
    if (getProto) {
      try {
        null.error;
      } catch (e11) {
        errorProto = getProto(getProto(e11));
        INTRINSICS["%Error.prototype%"] = errorProto;
      }
    }
    var errorProto;
    var doEval = function doEval2(name2) {
      var value;
      if (name2 === "%AsyncFunction%") {
        value = getEvalledConstructor("async function () {}");
      } else if (name2 === "%GeneratorFunction%") {
        value = getEvalledConstructor("function* () {}");
      } else if (name2 === "%AsyncGeneratorFunction%") {
        value = getEvalledConstructor("async function* () {}");
      } else if (name2 === "%AsyncGenerator%") {
        var fn = doEval2("%AsyncGeneratorFunction%");
        if (fn) {
          value = fn.prototype;
        }
      } else if (name2 === "%AsyncIteratorPrototype%") {
        var gen = doEval2("%AsyncGenerator%");
        if (gen && getProto) {
          value = getProto(gen.prototype);
        }
      }
      INTRINSICS[name2] = value;
      return value;
    };
    var LEGACY_ALIASES = {
      "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
      "%ArrayPrototype%": ["Array", "prototype"],
      "%ArrayProto_entries%": ["Array", "prototype", "entries"],
      "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
      "%ArrayProto_keys%": ["Array", "prototype", "keys"],
      "%ArrayProto_values%": ["Array", "prototype", "values"],
      "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
      "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
      "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
      "%BooleanPrototype%": ["Boolean", "prototype"],
      "%DataViewPrototype%": ["DataView", "prototype"],
      "%DatePrototype%": ["Date", "prototype"],
      "%ErrorPrototype%": ["Error", "prototype"],
      "%EvalErrorPrototype%": ["EvalError", "prototype"],
      "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
      "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
      "%FunctionPrototype%": ["Function", "prototype"],
      "%Generator%": ["GeneratorFunction", "prototype"],
      "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
      "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
      "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
      "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
      "%JSONParse%": ["JSON", "parse"],
      "%JSONStringify%": ["JSON", "stringify"],
      "%MapPrototype%": ["Map", "prototype"],
      "%NumberPrototype%": ["Number", "prototype"],
      "%ObjectPrototype%": ["Object", "prototype"],
      "%ObjProto_toString%": ["Object", "prototype", "toString"],
      "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
      "%PromisePrototype%": ["Promise", "prototype"],
      "%PromiseProto_then%": ["Promise", "prototype", "then"],
      "%Promise_all%": ["Promise", "all"],
      "%Promise_reject%": ["Promise", "reject"],
      "%Promise_resolve%": ["Promise", "resolve"],
      "%RangeErrorPrototype%": ["RangeError", "prototype"],
      "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
      "%RegExpPrototype%": ["RegExp", "prototype"],
      "%SetPrototype%": ["Set", "prototype"],
      "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
      "%StringPrototype%": ["String", "prototype"],
      "%SymbolPrototype%": ["Symbol", "prototype"],
      "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
      "%TypedArrayPrototype%": ["TypedArray", "prototype"],
      "%TypeErrorPrototype%": ["TypeError", "prototype"],
      "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
      "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
      "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
      "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
      "%URIErrorPrototype%": ["URIError", "prototype"],
      "%WeakMapPrototype%": ["WeakMap", "prototype"],
      "%WeakSetPrototype%": ["WeakSet", "prototype"]
    };
    var bind2 = require_function_bind();
    var hasOwn = require_src();
    var $concat = bind2.call(Function.call, Array.prototype.concat);
    var $spliceApply = bind2.call(Function.apply, Array.prototype.splice);
    var $replace = bind2.call(Function.call, String.prototype.replace);
    var $strSlice = bind2.call(Function.call, String.prototype.slice);
    var $exec = bind2.call(Function.call, RegExp.prototype.exec);
    var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = function stringToPath2(string) {
      var first = $strSlice(string, 0, 1);
      var last = $strSlice(string, -1);
      if (first === "%" && last !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
      } else if (last === "%" && first !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
      }
      var result = [];
      $replace(string, rePropName, function(match, number, quote, subString) {
        result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
      });
      return result;
    };
    var getBaseIntrinsic = function getBaseIntrinsic2(name2, allowMissing) {
      var intrinsicName = name2;
      var alias;
      if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = "%" + alias[0] + "%";
      }
      if (hasOwn(INTRINSICS, intrinsicName)) {
        var value = INTRINSICS[intrinsicName];
        if (value === needsEval) {
          value = doEval(intrinsicName);
        }
        if (typeof value === "undefined" && !allowMissing) {
          throw new $TypeError("intrinsic " + name2 + " exists, but is not available. Please file an issue!");
        }
        return {
          alias,
          name: intrinsicName,
          value
        };
      }
      throw new $SyntaxError("intrinsic " + name2 + " does not exist!");
    };
    module3.exports = function GetIntrinsic(name2, allowMissing) {
      if (typeof name2 !== "string" || name2.length === 0) {
        throw new $TypeError("intrinsic name must be a non-empty string");
      }
      if (arguments.length > 1 && typeof allowMissing !== "boolean") {
        throw new $TypeError('"allowMissing" argument must be a boolean');
      }
      if ($exec(/^%?[^%]*%?$/, name2) === null) {
        throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
      }
      var parts = stringToPath(name2);
      var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
      var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
      var intrinsicRealName = intrinsic.name;
      var value = intrinsic.value;
      var skipFurtherCaching = false;
      var alias = intrinsic.alias;
      if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([0, 1], alias));
      }
      for (var i8 = 1, isOwn = true; i8 < parts.length; i8 += 1) {
        var part = parts[i8];
        var first = $strSlice(part, 0, 1);
        var last = $strSlice(part, -1);
        if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
          throw new $SyntaxError("property names with quotes must have matching quotes");
        }
        if (part === "constructor" || !isOwn) {
          skipFurtherCaching = true;
        }
        intrinsicBaseName += "." + part;
        intrinsicRealName = "%" + intrinsicBaseName + "%";
        if (hasOwn(INTRINSICS, intrinsicRealName)) {
          value = INTRINSICS[intrinsicRealName];
        } else if (value != null) {
          if (!(part in value)) {
            if (!allowMissing) {
              throw new $TypeError("base intrinsic for " + name2 + " exists, but the property is not available.");
            }
            return void 0;
          }
          if ($gOPD && i8 + 1 >= parts.length) {
            var desc = $gOPD(value, part);
            isOwn = !!desc;
            if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
              value = desc.get;
            } else {
              value = value[part];
            }
          } else {
            isOwn = hasOwn(value, part);
            value = value[part];
          }
          if (isOwn && !skipFurtherCaching) {
            INTRINSICS[intrinsicRealName] = value;
          }
        }
      }
      return value;
    };
  }
});

// ../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/index.js
var require_es_errors = __commonJS({
  "../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/index.js"(exports11, module3) {
    "use strict";
    init_dirname();
    init_buffer2();
    init_process2();
    module3.exports = Error;
  }
});

// ../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/eval.js
var require_eval = __commonJS({
  "../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/eval.js"(exports11, module3) {
    "use strict";
    init_dirname();
    init_buffer2();
    init_process2();
    module3.exports = EvalError;
  }
});

// ../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/range.js
var require_range = __commonJS({
  "../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/range.js"(exports11, module3) {
    "use strict";
    init_dirname();
    init_buffer2();
    init_process2();
    module3.exports = RangeError;
  }
});

// ../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/ref.js
var require_ref = __commonJS({
  "../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/ref.js"(exports11, module3) {
    "use strict";
    init_dirname();
    init_buffer2();
    init_process2();
    module3.exports = ReferenceError;
  }
});

// ../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/syntax.js
var require_syntax = __commonJS({
  "../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/syntax.js"(exports11, module3) {
    "use strict";
    init_dirname();
    init_buffer2();
    init_process2();
    module3.exports = SyntaxError;
  }
});

// ../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/type.js
var require_type = __commonJS({
  "../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/type.js"(exports11, module3) {
    "use strict";
    init_dirname();
    init_buffer2();
    init_process2();
    module3.exports = TypeError;
  }
});

// ../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/uri.js
var require_uri = __commonJS({
  "../../node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/uri.js"(exports11, module3) {
    "use strict";
    init_dirname();
    init_buffer2();
    init_process2();
    module3.exports = URIError;
  }
});

// ../../node_modules/.pnpm/hasown@2.0.2/node_modules/hasown/index.js
var require_hasown = __commonJS({
  "../../node_modules/.pnpm/hasown@2.0.2/node_modules/hasown/index.js"(exports11, module3) {
    "use strict";
    init_dirname();
    init_buffer2();
    init_process2();
    var call = Function.prototype.call;
    var $hasOwn = Object.prototype.hasOwnProperty;
    var bind2 = require_function_bind();
    module3.exports = bind2.call(call, $hasOwn);
  }
});

// ../../node_modules/.pnpm/get-intrinsic@1.2.4/node_modules/get-intrinsic/index.js
var require_get_intrinsic2 = __commonJS({
  "../../node_modules/.pnpm/get-intrinsic@1.2.4/node_modules/get-intrinsic/index.js"(exports11, module3) {
    "use strict";
    init_dirname();
    init_buffer2();
    init_process2();
    var undefined2;
    var $Error = require_es_errors();
    var $EvalError = require_eval();
    var $RangeError = require_range();
    var $ReferenceError = require_ref();
    var $SyntaxError = require_syntax();
    var $TypeError = require_type();
    var $URIError = require_uri();
    var $Function = Function;
    var getEvalledConstructor = function(expressionSyntax) {
      try {
        return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
      } catch (e11) {
      }
    };
    var $gOPD = Object.getOwnPropertyDescriptor;
    if ($gOPD) {
      try {
        $gOPD({}, "");
      } catch (e11) {
        $gOPD = null;
      }
    }
    var throwTypeError = function() {
      throw new $TypeError();
    };
    var ThrowTypeError = $gOPD ? function() {
      try {
        arguments.callee;
        return throwTypeError;
      } catch (calleeThrows) {
        try {
          return $gOPD(arguments, "callee").get;
        } catch (gOPDthrows) {
          return throwTypeError;
        }
      }
    }() : throwTypeError;
    var hasSymbols = require_has_symbols()();
    var hasProto = require_has_proto()();
    var getProto = Object.getPrototypeOf || (hasProto ? function(x4) {
      return x4.__proto__;
    } : null);
    var needsEval = {};
    var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined2 : getProto(Uint8Array);
    var INTRINSICS = {
      __proto__: null,
      "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
      "%Array%": Array,
      "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
      "%ArrayIteratorPrototype%": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined2,
      "%AsyncFromSyncIteratorPrototype%": undefined2,
      "%AsyncFunction%": needsEval,
      "%AsyncGenerator%": needsEval,
      "%AsyncGeneratorFunction%": needsEval,
      "%AsyncIteratorPrototype%": needsEval,
      "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
      "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
      "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined2 : BigInt64Array,
      "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined2 : BigUint64Array,
      "%Boolean%": Boolean,
      "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
      "%Date%": Date,
      "%decodeURI%": decodeURI,
      "%decodeURIComponent%": decodeURIComponent,
      "%encodeURI%": encodeURI,
      "%encodeURIComponent%": encodeURIComponent,
      "%Error%": $Error,
      "%eval%": eval,
      "%EvalError%": $EvalError,
      "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
      "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
      "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
      "%Function%": $Function,
      "%GeneratorFunction%": needsEval,
      "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
      "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
      "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
      "%isFinite%": isFinite,
      "%isNaN%": isNaN,
      "%IteratorPrototype%": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined2,
      "%JSON%": typeof JSON === "object" ? JSON : undefined2,
      "%Map%": typeof Map === "undefined" ? undefined2 : Map,
      "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
      "%Math%": Math,
      "%Number%": Number,
      "%Object%": Object,
      "%parseFloat%": parseFloat,
      "%parseInt%": parseInt,
      "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
      "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
      "%RangeError%": $RangeError,
      "%ReferenceError%": $ReferenceError,
      "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
      "%RegExp%": RegExp,
      "%Set%": typeof Set === "undefined" ? undefined2 : Set,
      "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
      "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
      "%String%": String,
      "%StringIteratorPrototype%": hasSymbols && getProto ? getProto(""[Symbol.iterator]()) : undefined2,
      "%Symbol%": hasSymbols ? Symbol : undefined2,
      "%SyntaxError%": $SyntaxError,
      "%ThrowTypeError%": ThrowTypeError,
      "%TypedArray%": TypedArray,
      "%TypeError%": $TypeError,
      "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
      "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
      "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
      "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
      "%URIError%": $URIError,
      "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
      "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
      "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet
    };
    if (getProto) {
      try {
        null.error;
      } catch (e11) {
        errorProto = getProto(getProto(e11));
        INTRINSICS["%Error.prototype%"] = errorProto;
      }
    }
    var errorProto;
    var doEval = function doEval2(name2) {
      var value;
      if (name2 === "%AsyncFunction%") {
        value = getEvalledConstructor("async function () {}");
      } else if (name2 === "%GeneratorFunction%") {
        value = getEvalledConstructor("function* () {}");
      } else if (name2 === "%AsyncGeneratorFunction%") {
        value = getEvalledConstructor("async function* () {}");
      } else if (name2 === "%AsyncGenerator%") {
        var fn = doEval2("%AsyncGeneratorFunction%");
        if (fn) {
          value = fn.prototype;
        }
      } else if (name2 === "%AsyncIteratorPrototype%") {
        var gen = doEval2("%AsyncGenerator%");
        if (gen && getProto) {
          value = getProto(gen.prototype);
        }
      }
      INTRINSICS[name2] = value;
      return value;
    };
    var LEGACY_ALIASES = {
      __proto__: null,
      "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
      "%ArrayPrototype%": ["Array", "prototype"],
      "%ArrayProto_entries%": ["Array", "prototype", "entries"],
      "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
      "%ArrayProto_keys%": ["Array", "prototype", "keys"],
      "%ArrayProto_values%": ["Array", "prototype", "values"],
      "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
      "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
      "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
      "%BooleanPrototype%": ["Boolean", "prototype"],
      "%DataViewPrototype%": ["DataView", "prototype"],
      "%DatePrototype%": ["Date", "prototype"],
      "%ErrorPrototype%": ["Error", "prototype"],
      "%EvalErrorPrototype%": ["EvalError", "prototype"],
      "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
      "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
      "%FunctionPrototype%": ["Function", "prototype"],
      "%Generator%": ["GeneratorFunction", "prototype"],
      "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
      "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
      "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
      "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
      "%JSONParse%": ["JSON", "parse"],
      "%JSONStringify%": ["JSON", "stringify"],
      "%MapPrototype%": ["Map", "prototype"],
      "%NumberPrototype%": ["Number", "prototype"],
      "%ObjectPrototype%": ["Object", "prototype"],
      "%ObjProto_toString%": ["Object", "prototype", "toString"],
      "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
      "%PromisePrototype%": ["Promise", "prototype"],
      "%PromiseProto_then%": ["Promise", "prototype", "then"],
      "%Promise_all%": ["Promise", "all"],
      "%Promise_reject%": ["Promise", "reject"],
      "%Promise_resolve%": ["Promise", "resolve"],
      "%RangeErrorPrototype%": ["RangeError", "prototype"],
      "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
      "%RegExpPrototype%": ["RegExp", "prototype"],
      "%SetPrototype%": ["Set", "prototype"],
      "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
      "%StringPrototype%": ["String", "prototype"],
      "%SymbolPrototype%": ["Symbol", "prototype"],
      "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
      "%TypedArrayPrototype%": ["TypedArray", "prototype"],
      "%TypeErrorPrototype%": ["TypeError", "prototype"],
      "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
      "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
      "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
      "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
      "%URIErrorPrototype%": ["URIError", "prototype"],
      "%WeakMapPrototype%": ["WeakMap", "prototype"],
      "%WeakSetPrototype%": ["WeakSet", "prototype"]
    };
    var bind2 = require_function_bind();
    var hasOwn = require_hasown();
    var $concat = bind2.call(Function.call, Array.prototype.concat);
    var $spliceApply = bind2.call(Function.apply, Array.prototype.splice);
    var $replace = bind2.call(Function.call, String.prototype.replace);
    var $strSlice = bind2.call(Function.call, String.prototype.slice);
    var $exec = bind2.call(Function.call, RegExp.prototype.exec);
    var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = function stringToPath2(string) {
      var first = $strSlice(string, 0, 1);
      var last = $strSlice(string, -1);
      if (first === "%" && last !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
      } else if (last === "%" && first !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
      }
      var result = [];
      $replace(string, rePropName, function(match, number, quote, subString) {
        result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
      });
      return result;
    };
    var getBaseIntrinsic = function getBaseIntrinsic2(name2, allowMissing) {
      var intrinsicName = name2;
      var alias;
      if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = "%" + alias[0] + "%";
      }
      if (hasOwn(INTRINSICS, intrinsicName)) {
        var value = INTRINSICS[intrinsicName];
        if (value === needsEval) {
          value = doEval(intrinsicName);
        }
        if (typeof value === "undefined" && !allowMissing) {
          throw new $TypeError("intrinsic " + name2 + " exists, but is not available. Please file an issue!");
        }
        return {
          alias,
          name: intrinsicName,
          value
        };
      }
      throw new $SyntaxError("intrinsic " + name2 + " does not exist!");
    };
    module3.exports = function GetIntrinsic(name2, allowMissing) {
      if (typeof name2 !== "string" || name2.length === 0) {
        throw new $TypeError("intrinsic name must be a non-empty string");
      }
      if (arguments.length > 1 && typeof allowMissing !== "boolean") {
        throw new $TypeError('"allowMissing" argument must be a boolean');
      }
      if ($exec(/^%?[^%]*%?$/, name2) === null) {
        throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
      }
      var parts = stringToPath(name2);
      var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
      var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
      var intrinsicRealName = intrinsic.name;
      var value = intrinsic.value;
      var skipFurtherCaching = false;
      var alias = intrinsic.alias;
      if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([0, 1], alias));
      }
      for (var i8 = 1, isOwn = true; i8 < parts.length; i8 += 1) {
        var part = parts[i8];
        var first = $strSlice(part, 0, 1);
        var last = $strSlice(part, -1);
        if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
          throw new $SyntaxError("property names with quotes must have matching quotes");
        }
        if (part === "constructor" || !isOwn) {
          skipFurtherCaching = true;
        }
        intrinsicBaseName += "." + part;
        intrinsicRealName = "%" + intrinsicBaseName + "%";
        if (hasOwn(INTRINSICS, intrinsicRealName)) {
          value = INTRINSICS[intrinsicRealName];
        } else if (value != null) {
          if (!(part in value)) {
            if (!allowMissing) {
              throw new $TypeError("base intrinsic for " + name2 + " exists, but the property is not available.");
            }
            return void 0;
          }
          if ($gOPD && i8 + 1 >= parts.length) {
            var desc = $gOPD(value, part);
            isOwn = !!desc;
            if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
              value = desc.get;
            } else {
              value = value[part];
            }
          } else {
            isOwn = hasOwn(value, part);
            value = value[part];
          }
          if (isOwn && !skipFurtherCaching) {
            INTRINSICS[intrinsicRealName] = value;
          }
        }
      }
      return value;
    };
  }
});

// ../../node_modules/.pnpm/call-bind@1.0.2/node_modules/call-bind/index.js
var require_call_bind = __commonJS({
  "../../node_modules/.pnpm/call-bind@1.0.2/node_modules/call-bind/index.js"(exports11, module3) {
    "use strict";
    init_dirname();
    init_buffer2();
    init_process2();
    var bind2 = require_function_bind();
    var GetIntrinsic = require_get_intrinsic2();
    var $apply = GetIntrinsic("%Function.prototype.apply%");
    var $call = GetIntrinsic("%Function.prototype.call%");
    var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind2.call($call, $apply);
    var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
    var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
    var $max = GetIntrinsic("%Math.max%");
    if ($defineProperty) {
      try {
        $defineProperty({}, "a", { value: 1 });
      } catch (e11) {
        $defineProperty = null;
      }
    }
    module3.exports = function callBind(originalFunction) {
      var func = $reflectApply(bind2, $call, arguments);
      if ($gOPD && $defineProperty) {
        var desc = $gOPD(func, "length");
        if (desc.configurable) {
          $defineProperty(
            func,
            "length",
            { value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
          );
        }
      }
      return func;
    };
    var applyBind = function applyBind2() {
      return $reflectApply(bind2, $apply, arguments);
    };
    if ($defineProperty) {
      $defineProperty(module3.exports, "apply", { value: applyBind });
    } else {
      module3.exports.apply = applyBind;
    }
  }
});

// ../../node_modules/.pnpm/call-bind@1.0.2/node_modules/call-bind/callBound.js
var require_callBound = __commonJS({
  "../../node_modules/.pnpm/call-bind@1.0.2/node_modules/call-bind/callBound.js"(exports11, module3) {
    "use strict";
    init_dirname();
    init_buffer2();
    init_process2();
    var GetIntrinsic = require_get_intrinsic2();
    var callBind = require_call_bind();
    var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
    module3.exports = function callBoundIntrinsic(name2, allowMissing) {
      var intrinsic = GetIntrinsic(name2, !!allowMissing);
      if (typeof intrinsic === "function" && $indexOf(name2, ".prototype.") > -1) {
        return callBind(intrinsic);
      }
      return intrinsic;
    };
  }
});

// (disabled):../../node_modules/.pnpm/object-inspect@1.12.3/node_modules/object-inspect/util.inspect
var require_util = __commonJS({
  "(disabled):../../node_modules/.pnpm/object-inspect@1.12.3/node_modules/object-inspect/util.inspect"() {
    init_dirname();
    init_buffer2();
    init_process2();
  }
});

// ../../node_modules/.pnpm/object-inspect@1.12.3/node_modules/object-inspect/index.js
var require_object_inspect = __commonJS({
  "../../node_modules/.pnpm/object-inspect@1.12.3/node_modules/object-inspect/index.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var hasMap = typeof Map === "function" && Map.prototype;
    var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, "size") : null;
    var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === "function" ? mapSizeDescriptor.get : null;
    var mapForEach = hasMap && Map.prototype.forEach;
    var hasSet = typeof Set === "function" && Set.prototype;
    var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, "size") : null;
    var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === "function" ? setSizeDescriptor.get : null;
    var setForEach = hasSet && Set.prototype.forEach;
    var hasWeakMap = typeof WeakMap === "function" && WeakMap.prototype;
    var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
    var hasWeakSet = typeof WeakSet === "function" && WeakSet.prototype;
    var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
    var hasWeakRef = typeof WeakRef === "function" && WeakRef.prototype;
    var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
    var booleanValueOf = Boolean.prototype.valueOf;
    var objectToString = Object.prototype.toString;
    var functionToString = Function.prototype.toString;
    var $match = String.prototype.match;
    var $slice = String.prototype.slice;
    var $replace = String.prototype.replace;
    var $toUpperCase = String.prototype.toUpperCase;
    var $toLowerCase = String.prototype.toLowerCase;
    var $test = RegExp.prototype.test;
    var $concat = Array.prototype.concat;
    var $join = Array.prototype.join;
    var $arrSlice = Array.prototype.slice;
    var $floor = Math.floor;
    var bigIntValueOf = typeof BigInt === "function" ? BigInt.prototype.valueOf : null;
    var gOPS = Object.getOwnPropertySymbols;
    var symToString = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? Symbol.prototype.toString : null;
    var hasShammedSymbols = typeof Symbol === "function" && typeof Symbol.iterator === "object";
    var toStringTag = typeof Symbol === "function" && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? "object" : "symbol") ? Symbol.toStringTag : null;
    var isEnumerable = Object.prototype.propertyIsEnumerable;
    var gPO = (typeof Reflect === "function" ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype ? function(O5) {
      return O5.__proto__;
    } : null);
    function addNumericSeparator(num, str) {
      if (num === Infinity || num === -Infinity || num !== num || num && num > -1e3 && num < 1e3 || $test.call(/e/, str)) {
        return str;
      }
      var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
      if (typeof num === "number") {
        var int = num < 0 ? -$floor(-num) : $floor(num);
        if (int !== num) {
          var intStr = String(int);
          var dec = $slice.call(str, intStr.length + 1);
          return $replace.call(intStr, sepRegex, "$&_") + "." + $replace.call($replace.call(dec, /([0-9]{3})/g, "$&_"), /_$/, "");
        }
      }
      return $replace.call(str, sepRegex, "$&_");
    }
    var utilInspect = require_util();
    var inspectCustom = utilInspect.custom;
    var inspectSymbol = isSymbol3(inspectCustom) ? inspectCustom : null;
    module3.exports = function inspect_(obj, options, depth, seen) {
      var opts = options || {};
      if (has(opts, "quoteStyle") && (opts.quoteStyle !== "single" && opts.quoteStyle !== "double")) {
        throw new TypeError('option "quoteStyle" must be "single" or "double"');
      }
      if (has(opts, "maxStringLength") && (typeof opts.maxStringLength === "number" ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {
        throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
      }
      var customInspect = has(opts, "customInspect") ? opts.customInspect : true;
      if (typeof customInspect !== "boolean" && customInspect !== "symbol") {
        throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");
      }
      if (has(opts, "indent") && opts.indent !== null && opts.indent !== "	" && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {
        throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
      }
      if (has(opts, "numericSeparator") && typeof opts.numericSeparator !== "boolean") {
        throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
      }
      var numericSeparator = opts.numericSeparator;
      if (typeof obj === "undefined") {
        return "undefined";
      }
      if (obj === null) {
        return "null";
      }
      if (typeof obj === "boolean") {
        return obj ? "true" : "false";
      }
      if (typeof obj === "string") {
        return inspectString(obj, opts);
      }
      if (typeof obj === "number") {
        if (obj === 0) {
          return Infinity / obj > 0 ? "0" : "-0";
        }
        var str = String(obj);
        return numericSeparator ? addNumericSeparator(obj, str) : str;
      }
      if (typeof obj === "bigint") {
        var bigIntStr = String(obj) + "n";
        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
      }
      var maxDepth = typeof opts.depth === "undefined" ? 5 : opts.depth;
      if (typeof depth === "undefined") {
        depth = 0;
      }
      if (depth >= maxDepth && maxDepth > 0 && typeof obj === "object") {
        return isArray4(obj) ? "[Array]" : "[Object]";
      }
      var indent = getIndent(opts, depth);
      if (typeof seen === "undefined") {
        seen = [];
      } else if (indexOf2(seen, obj) >= 0) {
        return "[Circular]";
      }
      function inspect3(value, from, noIndent) {
        if (from) {
          seen = $arrSlice.call(seen);
          seen.push(from);
        }
        if (noIndent) {
          var newOpts = {
            depth: opts.depth
          };
          if (has(opts, "quoteStyle")) {
            newOpts.quoteStyle = opts.quoteStyle;
          }
          return inspect_(value, newOpts, depth + 1, seen);
        }
        return inspect_(value, opts, depth + 1, seen);
      }
      if (typeof obj === "function" && !isRegExp4(obj)) {
        var name2 = nameOf(obj);
        var keys = arrObjKeys(obj, inspect3);
        return "[Function" + (name2 ? ": " + name2 : " (anonymous)") + "]" + (keys.length > 0 ? " { " + $join.call(keys, ", ") + " }" : "");
      }
      if (isSymbol3(obj)) {
        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, "$1") : symToString.call(obj);
        return typeof obj === "object" && !hasShammedSymbols ? markBoxed(symString) : symString;
      }
      if (isElement(obj)) {
        var s7 = "<" + $toLowerCase.call(String(obj.nodeName));
        var attrs = obj.attributes || [];
        for (var i8 = 0; i8 < attrs.length; i8++) {
          s7 += " " + attrs[i8].name + "=" + wrapQuotes(quote(attrs[i8].value), "double", opts);
        }
        s7 += ">";
        if (obj.childNodes && obj.childNodes.length) {
          s7 += "...";
        }
        s7 += "</" + $toLowerCase.call(String(obj.nodeName)) + ">";
        return s7;
      }
      if (isArray4(obj)) {
        if (obj.length === 0) {
          return "[]";
        }
        var xs = arrObjKeys(obj, inspect3);
        if (indent && !singleLineValues(xs)) {
          return "[" + indentedJoin(xs, indent) + "]";
        }
        return "[ " + $join.call(xs, ", ") + " ]";
      }
      if (isError3(obj)) {
        var parts = arrObjKeys(obj, inspect3);
        if (!("cause" in Error.prototype) && "cause" in obj && !isEnumerable.call(obj, "cause")) {
          return "{ [" + String(obj) + "] " + $join.call($concat.call("[cause]: " + inspect3(obj.cause), parts), ", ") + " }";
        }
        if (parts.length === 0) {
          return "[" + String(obj) + "]";
        }
        return "{ [" + String(obj) + "] " + $join.call(parts, ", ") + " }";
      }
      if (typeof obj === "object" && customInspect) {
        if (inspectSymbol && typeof obj[inspectSymbol] === "function" && utilInspect) {
          return utilInspect(obj, { depth: maxDepth - depth });
        } else if (customInspect !== "symbol" && typeof obj.inspect === "function") {
          return obj.inspect();
        }
      }
      if (isMap(obj)) {
        var mapParts = [];
        if (mapForEach) {
          mapForEach.call(obj, function(value, key) {
            mapParts.push(inspect3(key, obj, true) + " => " + inspect3(value, obj));
          });
        }
        return collectionOf("Map", mapSize.call(obj), mapParts, indent);
      }
      if (isSet(obj)) {
        var setParts = [];
        if (setForEach) {
          setForEach.call(obj, function(value) {
            setParts.push(inspect3(value, obj));
          });
        }
        return collectionOf("Set", setSize.call(obj), setParts, indent);
      }
      if (isWeakMap(obj)) {
        return weakCollectionOf("WeakMap");
      }
      if (isWeakSet(obj)) {
        return weakCollectionOf("WeakSet");
      }
      if (isWeakRef(obj)) {
        return weakCollectionOf("WeakRef");
      }
      if (isNumber4(obj)) {
        return markBoxed(inspect3(Number(obj)));
      }
      if (isBigInt(obj)) {
        return markBoxed(inspect3(bigIntValueOf.call(obj)));
      }
      if (isBoolean4(obj)) {
        return markBoxed(booleanValueOf.call(obj));
      }
      if (isString4(obj)) {
        return markBoxed(inspect3(String(obj)));
      }
      if (!isDate4(obj) && !isRegExp4(obj)) {
        var ys = arrObjKeys(obj, inspect3);
        var isPlainObject2 = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
        var protoTag = obj instanceof Object ? "" : "null prototype";
        var stringTag = !isPlainObject2 && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? "Object" : "";
        var constructorTag = isPlainObject2 || typeof obj.constructor !== "function" ? "" : obj.constructor.name ? obj.constructor.name + " " : "";
        var tag = constructorTag + (stringTag || protoTag ? "[" + $join.call($concat.call([], stringTag || [], protoTag || []), ": ") + "] " : "");
        if (ys.length === 0) {
          return tag + "{}";
        }
        if (indent) {
          return tag + "{" + indentedJoin(ys, indent) + "}";
        }
        return tag + "{ " + $join.call(ys, ", ") + " }";
      }
      return String(obj);
    };
    function wrapQuotes(s7, defaultStyle, opts) {
      var quoteChar = (opts.quoteStyle || defaultStyle) === "double" ? '"' : "'";
      return quoteChar + s7 + quoteChar;
    }
    function quote(s7) {
      return $replace.call(String(s7), /"/g, "&quot;");
    }
    function isArray4(obj) {
      return toStr(obj) === "[object Array]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isDate4(obj) {
      return toStr(obj) === "[object Date]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isRegExp4(obj) {
      return toStr(obj) === "[object RegExp]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isError3(obj) {
      return toStr(obj) === "[object Error]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isString4(obj) {
      return toStr(obj) === "[object String]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isNumber4(obj) {
      return toStr(obj) === "[object Number]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isBoolean4(obj) {
      return toStr(obj) === "[object Boolean]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isSymbol3(obj) {
      if (hasShammedSymbols) {
        return obj && typeof obj === "object" && obj instanceof Symbol;
      }
      if (typeof obj === "symbol") {
        return true;
      }
      if (!obj || typeof obj !== "object" || !symToString) {
        return false;
      }
      try {
        symToString.call(obj);
        return true;
      } catch (e11) {
      }
      return false;
    }
    function isBigInt(obj) {
      if (!obj || typeof obj !== "object" || !bigIntValueOf) {
        return false;
      }
      try {
        bigIntValueOf.call(obj);
        return true;
      } catch (e11) {
      }
      return false;
    }
    var hasOwn = Object.prototype.hasOwnProperty || function(key) {
      return key in this;
    };
    function has(obj, key) {
      return hasOwn.call(obj, key);
    }
    function toStr(obj) {
      return objectToString.call(obj);
    }
    function nameOf(f9) {
      if (f9.name) {
        return f9.name;
      }
      var m6 = $match.call(functionToString.call(f9), /^function\s*([\w$]+)/);
      if (m6) {
        return m6[1];
      }
      return null;
    }
    function indexOf2(xs, x4) {
      if (xs.indexOf) {
        return xs.indexOf(x4);
      }
      for (var i8 = 0, l8 = xs.length; i8 < l8; i8++) {
        if (xs[i8] === x4) {
          return i8;
        }
      }
      return -1;
    }
    function isMap(x4) {
      if (!mapSize || !x4 || typeof x4 !== "object") {
        return false;
      }
      try {
        mapSize.call(x4);
        try {
          setSize.call(x4);
        } catch (s7) {
          return true;
        }
        return x4 instanceof Map;
      } catch (e11) {
      }
      return false;
    }
    function isWeakMap(x4) {
      if (!weakMapHas || !x4 || typeof x4 !== "object") {
        return false;
      }
      try {
        weakMapHas.call(x4, weakMapHas);
        try {
          weakSetHas.call(x4, weakSetHas);
        } catch (s7) {
          return true;
        }
        return x4 instanceof WeakMap;
      } catch (e11) {
      }
      return false;
    }
    function isWeakRef(x4) {
      if (!weakRefDeref || !x4 || typeof x4 !== "object") {
        return false;
      }
      try {
        weakRefDeref.call(x4);
        return true;
      } catch (e11) {
      }
      return false;
    }
    function isSet(x4) {
      if (!setSize || !x4 || typeof x4 !== "object") {
        return false;
      }
      try {
        setSize.call(x4);
        try {
          mapSize.call(x4);
        } catch (m6) {
          return true;
        }
        return x4 instanceof Set;
      } catch (e11) {
      }
      return false;
    }
    function isWeakSet(x4) {
      if (!weakSetHas || !x4 || typeof x4 !== "object") {
        return false;
      }
      try {
        weakSetHas.call(x4, weakSetHas);
        try {
          weakMapHas.call(x4, weakMapHas);
        } catch (s7) {
          return true;
        }
        return x4 instanceof WeakSet;
      } catch (e11) {
      }
      return false;
    }
    function isElement(x4) {
      if (!x4 || typeof x4 !== "object") {
        return false;
      }
      if (typeof HTMLElement !== "undefined" && x4 instanceof HTMLElement) {
        return true;
      }
      return typeof x4.nodeName === "string" && typeof x4.getAttribute === "function";
    }
    function inspectString(str, opts) {
      if (str.length > opts.maxStringLength) {
        var remaining = str.length - opts.maxStringLength;
        var trailer = "... " + remaining + " more character" + (remaining > 1 ? "s" : "");
        return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
      }
      var s7 = $replace.call($replace.call(str, /(['\\])/g, "\\$1"), /[\x00-\x1f]/g, lowbyte);
      return wrapQuotes(s7, "single", opts);
    }
    function lowbyte(c8) {
      var n9 = c8.charCodeAt(0);
      var x4 = {
        8: "b",
        9: "t",
        10: "n",
        12: "f",
        13: "r"
      }[n9];
      if (x4) {
        return "\\" + x4;
      }
      return "\\x" + (n9 < 16 ? "0" : "") + $toUpperCase.call(n9.toString(16));
    }
    function markBoxed(str) {
      return "Object(" + str + ")";
    }
    function weakCollectionOf(type) {
      return type + " { ? }";
    }
    function collectionOf(type, size, entries, indent) {
      var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ", ");
      return type + " (" + size + ") {" + joinedEntries + "}";
    }
    function singleLineValues(xs) {
      for (var i8 = 0; i8 < xs.length; i8++) {
        if (indexOf2(xs[i8], "\n") >= 0) {
          return false;
        }
      }
      return true;
    }
    function getIndent(opts, depth) {
      var baseIndent;
      if (opts.indent === "	") {
        baseIndent = "	";
      } else if (typeof opts.indent === "number" && opts.indent > 0) {
        baseIndent = $join.call(Array(opts.indent + 1), " ");
      } else {
        return null;
      }
      return {
        base: baseIndent,
        prev: $join.call(Array(depth + 1), baseIndent)
      };
    }
    function indentedJoin(xs, indent) {
      if (xs.length === 0) {
        return "";
      }
      var lineJoiner = "\n" + indent.prev + indent.base;
      return lineJoiner + $join.call(xs, "," + lineJoiner) + "\n" + indent.prev;
    }
    function arrObjKeys(obj, inspect3) {
      var isArr = isArray4(obj);
      var xs = [];
      if (isArr) {
        xs.length = obj.length;
        for (var i8 = 0; i8 < obj.length; i8++) {
          xs[i8] = has(obj, i8) ? inspect3(obj[i8], obj) : "";
        }
      }
      var syms = typeof gOPS === "function" ? gOPS(obj) : [];
      var symMap;
      if (hasShammedSymbols) {
        symMap = {};
        for (var k4 = 0; k4 < syms.length; k4++) {
          symMap["$" + syms[k4]] = syms[k4];
        }
      }
      for (var key in obj) {
        if (!has(obj, key)) {
          continue;
        }
        if (isArr && String(Number(key)) === key && key < obj.length) {
          continue;
        }
        if (hasShammedSymbols && symMap["$" + key] instanceof Symbol) {
          continue;
        } else if ($test.call(/[^\w$]/, key)) {
          xs.push(inspect3(key, obj) + ": " + inspect3(obj[key], obj));
        } else {
          xs.push(key + ": " + inspect3(obj[key], obj));
        }
      }
      if (typeof gOPS === "function") {
        for (var j4 = 0; j4 < syms.length; j4++) {
          if (isEnumerable.call(obj, syms[j4])) {
            xs.push("[" + inspect3(syms[j4]) + "]: " + inspect3(obj[syms[j4]], obj));
          }
        }
      }
      return xs;
    }
  }
});

// ../../node_modules/.pnpm/side-channel@1.0.4/node_modules/side-channel/index.js
var require_side_channel = __commonJS({
  "../../node_modules/.pnpm/side-channel@1.0.4/node_modules/side-channel/index.js"(exports11, module3) {
    "use strict";
    init_dirname();
    init_buffer2();
    init_process2();
    var GetIntrinsic = require_get_intrinsic();
    var callBound = require_callBound();
    var inspect3 = require_object_inspect();
    var $TypeError = GetIntrinsic("%TypeError%");
    var $WeakMap = GetIntrinsic("%WeakMap%", true);
    var $Map = GetIntrinsic("%Map%", true);
    var $weakMapGet = callBound("WeakMap.prototype.get", true);
    var $weakMapSet = callBound("WeakMap.prototype.set", true);
    var $weakMapHas = callBound("WeakMap.prototype.has", true);
    var $mapGet = callBound("Map.prototype.get", true);
    var $mapSet = callBound("Map.prototype.set", true);
    var $mapHas = callBound("Map.prototype.has", true);
    var listGetNode = function(list, key) {
      for (var prev = list, curr; (curr = prev.next) !== null; prev = curr) {
        if (curr.key === key) {
          prev.next = curr.next;
          curr.next = list.next;
          list.next = curr;
          return curr;
        }
      }
    };
    var listGet = function(objects, key) {
      var node = listGetNode(objects, key);
      return node && node.value;
    };
    var listSet = function(objects, key, value) {
      var node = listGetNode(objects, key);
      if (node) {
        node.value = value;
      } else {
        objects.next = {
          key,
          next: objects.next,
          value
        };
      }
    };
    var listHas = function(objects, key) {
      return !!listGetNode(objects, key);
    };
    module3.exports = function getSideChannel() {
      var $wm;
      var $m;
      var $o;
      var channel = {
        assert: function(key) {
          if (!channel.has(key)) {
            throw new $TypeError("Side channel does not contain " + inspect3(key));
          }
        },
        get: function(key) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if ($wm) {
              return $weakMapGet($wm, key);
            }
          } else if ($Map) {
            if ($m) {
              return $mapGet($m, key);
            }
          } else {
            if ($o) {
              return listGet($o, key);
            }
          }
        },
        has: function(key) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if ($wm) {
              return $weakMapHas($wm, key);
            }
          } else if ($Map) {
            if ($m) {
              return $mapHas($m, key);
            }
          } else {
            if ($o) {
              return listHas($o, key);
            }
          }
          return false;
        },
        set: function(key, value) {
          if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
            if (!$wm) {
              $wm = new $WeakMap();
            }
            $weakMapSet($wm, key, value);
          } else if ($Map) {
            if (!$m) {
              $m = new $Map();
            }
            $mapSet($m, key, value);
          } else {
            if (!$o) {
              $o = { key: {}, next: null };
            }
            listSet($o, key, value);
          }
        }
      };
      return channel;
    };
  }
});

// ../../node_modules/.pnpm/qs@6.11.2/node_modules/qs/lib/formats.js
var require_formats = __commonJS({
  "../../node_modules/.pnpm/qs@6.11.2/node_modules/qs/lib/formats.js"(exports11, module3) {
    "use strict";
    init_dirname();
    init_buffer2();
    init_process2();
    var replace = String.prototype.replace;
    var percentTwenties = /%20/g;
    var Format = {
      RFC1738: "RFC1738",
      RFC3986: "RFC3986"
    };
    module3.exports = {
      "default": Format.RFC3986,
      formatters: {
        RFC1738: function(value) {
          return replace.call(value, percentTwenties, "+");
        },
        RFC3986: function(value) {
          return String(value);
        }
      },
      RFC1738: Format.RFC1738,
      RFC3986: Format.RFC3986
    };
  }
});

// ../../node_modules/.pnpm/qs@6.11.2/node_modules/qs/lib/utils.js
var require_utils = __commonJS({
  "../../node_modules/.pnpm/qs@6.11.2/node_modules/qs/lib/utils.js"(exports11, module3) {
    "use strict";
    init_dirname();
    init_buffer2();
    init_process2();
    var formats = require_formats();
    var has = Object.prototype.hasOwnProperty;
    var isArray4 = Array.isArray;
    var hexTable = function() {
      var array = [];
      for (var i8 = 0; i8 < 256; ++i8) {
        array.push("%" + ((i8 < 16 ? "0" : "") + i8.toString(16)).toUpperCase());
      }
      return array;
    }();
    var compactQueue = function compactQueue2(queue2) {
      while (queue2.length > 1) {
        var item = queue2.pop();
        var obj = item.obj[item.prop];
        if (isArray4(obj)) {
          var compacted = [];
          for (var j4 = 0; j4 < obj.length; ++j4) {
            if (typeof obj[j4] !== "undefined") {
              compacted.push(obj[j4]);
            }
          }
          item.obj[item.prop] = compacted;
        }
      }
    };
    var arrayToObject2 = function arrayToObject3(source, options) {
      var obj = options && options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      for (var i8 = 0; i8 < source.length; ++i8) {
        if (typeof source[i8] !== "undefined") {
          obj[i8] = source[i8];
        }
      }
      return obj;
    };
    var merge2 = function merge3(target, source, options) {
      if (!source) {
        return target;
      }
      if (typeof source !== "object") {
        if (isArray4(target)) {
          target.push(source);
        } else if (target && typeof target === "object") {
          if (options && (options.plainObjects || options.allowPrototypes) || !has.call(Object.prototype, source)) {
            target[source] = true;
          }
        } else {
          return [target, source];
        }
        return target;
      }
      if (!target || typeof target !== "object") {
        return [target].concat(source);
      }
      var mergeTarget = target;
      if (isArray4(target) && !isArray4(source)) {
        mergeTarget = arrayToObject2(target, options);
      }
      if (isArray4(target) && isArray4(source)) {
        source.forEach(function(item, i8) {
          if (has.call(target, i8)) {
            var targetItem = target[i8];
            if (targetItem && typeof targetItem === "object" && item && typeof item === "object") {
              target[i8] = merge3(targetItem, item, options);
            } else {
              target.push(item);
            }
          } else {
            target[i8] = item;
          }
        });
        return target;
      }
      return Object.keys(source).reduce(function(acc, key) {
        var value = source[key];
        if (has.call(acc, key)) {
          acc[key] = merge3(acc[key], value, options);
        } else {
          acc[key] = value;
        }
        return acc;
      }, mergeTarget);
    };
    var assign = function assignSingleSource(target, source) {
      return Object.keys(source).reduce(function(acc, key) {
        acc[key] = source[key];
        return acc;
      }, target);
    };
    var decode = function(str, decoder, charset) {
      var strWithoutPlus = str.replace(/\+/g, " ");
      if (charset === "iso-8859-1") {
        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
      }
      try {
        return decodeURIComponent(strWithoutPlus);
      } catch (e11) {
        return strWithoutPlus;
      }
    };
    var encode3 = function encode4(str, defaultEncoder, charset, kind, format4) {
      if (str.length === 0) {
        return str;
      }
      var string = str;
      if (typeof str === "symbol") {
        string = Symbol.prototype.toString.call(str);
      } else if (typeof str !== "string") {
        string = String(str);
      }
      if (charset === "iso-8859-1") {
        return escape(string).replace(/%u[0-9a-f]{4}/gi, function($0) {
          return "%26%23" + parseInt($0.slice(2), 16) + "%3B";
        });
      }
      var out = "";
      for (var i8 = 0; i8 < string.length; ++i8) {
        var c8 = string.charCodeAt(i8);
        if (c8 === 45 || c8 === 46 || c8 === 95 || c8 === 126 || c8 >= 48 && c8 <= 57 || c8 >= 65 && c8 <= 90 || c8 >= 97 && c8 <= 122 || format4 === formats.RFC1738 && (c8 === 40 || c8 === 41)) {
          out += string.charAt(i8);
          continue;
        }
        if (c8 < 128) {
          out = out + hexTable[c8];
          continue;
        }
        if (c8 < 2048) {
          out = out + (hexTable[192 | c8 >> 6] + hexTable[128 | c8 & 63]);
          continue;
        }
        if (c8 < 55296 || c8 >= 57344) {
          out = out + (hexTable[224 | c8 >> 12] + hexTable[128 | c8 >> 6 & 63] + hexTable[128 | c8 & 63]);
          continue;
        }
        i8 += 1;
        c8 = 65536 + ((c8 & 1023) << 10 | string.charCodeAt(i8) & 1023);
        out += hexTable[240 | c8 >> 18] + hexTable[128 | c8 >> 12 & 63] + hexTable[128 | c8 >> 6 & 63] + hexTable[128 | c8 & 63];
      }
      return out;
    };
    var compact = function compact2(value) {
      var queue2 = [{ obj: { o: value }, prop: "o" }];
      var refs = [];
      for (var i8 = 0; i8 < queue2.length; ++i8) {
        var item = queue2[i8];
        var obj = item.obj[item.prop];
        var keys = Object.keys(obj);
        for (var j4 = 0; j4 < keys.length; ++j4) {
          var key = keys[j4];
          var val = obj[key];
          if (typeof val === "object" && val !== null && refs.indexOf(val) === -1) {
            queue2.push({ obj, prop: key });
            refs.push(val);
          }
        }
      }
      compactQueue(queue2);
      return value;
    };
    var isRegExp4 = function isRegExp5(obj) {
      return Object.prototype.toString.call(obj) === "[object RegExp]";
    };
    var isBuffer4 = function isBuffer5(obj) {
      if (!obj || typeof obj !== "object") {
        return false;
      }
      return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
    };
    var combine = function combine2(a8, b5) {
      return [].concat(a8, b5);
    };
    var maybeMap = function maybeMap2(val, fn) {
      if (isArray4(val)) {
        var mapped = [];
        for (var i8 = 0; i8 < val.length; i8 += 1) {
          mapped.push(fn(val[i8]));
        }
        return mapped;
      }
      return fn(val);
    };
    module3.exports = {
      arrayToObject: arrayToObject2,
      assign,
      combine,
      compact,
      decode,
      encode: encode3,
      isBuffer: isBuffer4,
      isRegExp: isRegExp4,
      maybeMap,
      merge: merge2
    };
  }
});

// ../../node_modules/.pnpm/qs@6.11.2/node_modules/qs/lib/stringify.js
var require_stringify = __commonJS({
  "../../node_modules/.pnpm/qs@6.11.2/node_modules/qs/lib/stringify.js"(exports11, module3) {
    "use strict";
    init_dirname();
    init_buffer2();
    init_process2();
    var getSideChannel = require_side_channel();
    var utils = require_utils();
    var formats = require_formats();
    var has = Object.prototype.hasOwnProperty;
    var arrayPrefixGenerators = {
      brackets: function brackets(prefix) {
        return prefix + "[]";
      },
      comma: "comma",
      indices: function indices(prefix, key) {
        return prefix + "[" + key + "]";
      },
      repeat: function repeat(prefix) {
        return prefix;
      }
    };
    var isArray4 = Array.isArray;
    var push = Array.prototype.push;
    var pushToArray = function(arr, valueOrArray) {
      push.apply(arr, isArray4(valueOrArray) ? valueOrArray : [valueOrArray]);
    };
    var toISO = Date.prototype.toISOString;
    var defaultFormat = formats["default"];
    var defaults2 = {
      addQueryPrefix: false,
      allowDots: false,
      charset: "utf-8",
      charsetSentinel: false,
      delimiter: "&",
      encode: true,
      encoder: utils.encode,
      encodeValuesOnly: false,
      format: defaultFormat,
      formatter: formats.formatters[defaultFormat],
      indices: false,
      serializeDate: function serializeDate(date) {
        return toISO.call(date);
      },
      skipNulls: false,
      strictNullHandling: false
    };
    var isNonNullishPrimitive = function isNonNullishPrimitive2(v6) {
      return typeof v6 === "string" || typeof v6 === "number" || typeof v6 === "boolean" || typeof v6 === "symbol" || typeof v6 === "bigint";
    };
    var sentinel = {};
    var stringify = function stringify2(object, prefix, generateArrayPrefix, commaRoundTrip, strictNullHandling, skipNulls, encoder, filter2, sort, allowDots, serializeDate, format4, formatter, encodeValuesOnly, charset, sideChannel) {
      var obj = object;
      var tmpSc = sideChannel;
      var step = 0;
      var findFlag = false;
      while ((tmpSc = tmpSc.get(sentinel)) !== void 0 && !findFlag) {
        var pos = tmpSc.get(object);
        step += 1;
        if (typeof pos !== "undefined") {
          if (pos === step) {
            throw new RangeError("Cyclic object value");
          } else {
            findFlag = true;
          }
        }
        if (typeof tmpSc.get(sentinel) === "undefined") {
          step = 0;
        }
      }
      if (typeof filter2 === "function") {
        obj = filter2(prefix, obj);
      } else if (obj instanceof Date) {
        obj = serializeDate(obj);
      } else if (generateArrayPrefix === "comma" && isArray4(obj)) {
        obj = utils.maybeMap(obj, function(value2) {
          if (value2 instanceof Date) {
            return serializeDate(value2);
          }
          return value2;
        });
      }
      if (obj === null) {
        if (strictNullHandling) {
          return encoder && !encodeValuesOnly ? encoder(prefix, defaults2.encoder, charset, "key", format4) : prefix;
        }
        obj = "";
      }
      if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
        if (encoder) {
          var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults2.encoder, charset, "key", format4);
          return [formatter(keyValue) + "=" + formatter(encoder(obj, defaults2.encoder, charset, "value", format4))];
        }
        return [formatter(prefix) + "=" + formatter(String(obj))];
      }
      var values = [];
      if (typeof obj === "undefined") {
        return values;
      }
      var objKeys;
      if (generateArrayPrefix === "comma" && isArray4(obj)) {
        if (encodeValuesOnly && encoder) {
          obj = utils.maybeMap(obj, encoder);
        }
        objKeys = [{ value: obj.length > 0 ? obj.join(",") || null : void 0 }];
      } else if (isArray4(filter2)) {
        objKeys = filter2;
      } else {
        var keys = Object.keys(obj);
        objKeys = sort ? keys.sort(sort) : keys;
      }
      var adjustedPrefix = commaRoundTrip && isArray4(obj) && obj.length === 1 ? prefix + "[]" : prefix;
      for (var j4 = 0; j4 < objKeys.length; ++j4) {
        var key = objKeys[j4];
        var value = typeof key === "object" && typeof key.value !== "undefined" ? key.value : obj[key];
        if (skipNulls && value === null) {
          continue;
        }
        var keyPrefix = isArray4(obj) ? typeof generateArrayPrefix === "function" ? generateArrayPrefix(adjustedPrefix, key) : adjustedPrefix : adjustedPrefix + (allowDots ? "." + key : "[" + key + "]");
        sideChannel.set(object, step);
        var valueSideChannel = getSideChannel();
        valueSideChannel.set(sentinel, sideChannel);
        pushToArray(values, stringify2(
          value,
          keyPrefix,
          generateArrayPrefix,
          commaRoundTrip,
          strictNullHandling,
          skipNulls,
          generateArrayPrefix === "comma" && encodeValuesOnly && isArray4(obj) ? null : encoder,
          filter2,
          sort,
          allowDots,
          serializeDate,
          format4,
          formatter,
          encodeValuesOnly,
          charset,
          valueSideChannel
        ));
      }
      return values;
    };
    var normalizeStringifyOptions = function normalizeStringifyOptions2(opts) {
      if (!opts) {
        return defaults2;
      }
      if (opts.encoder !== null && typeof opts.encoder !== "undefined" && typeof opts.encoder !== "function") {
        throw new TypeError("Encoder has to be a function.");
      }
      var charset = opts.charset || defaults2.charset;
      if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
        throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
      }
      var format4 = formats["default"];
      if (typeof opts.format !== "undefined") {
        if (!has.call(formats.formatters, opts.format)) {
          throw new TypeError("Unknown format option provided.");
        }
        format4 = opts.format;
      }
      var formatter = formats.formatters[format4];
      var filter2 = defaults2.filter;
      if (typeof opts.filter === "function" || isArray4(opts.filter)) {
        filter2 = opts.filter;
      }
      return {
        addQueryPrefix: typeof opts.addQueryPrefix === "boolean" ? opts.addQueryPrefix : defaults2.addQueryPrefix,
        allowDots: typeof opts.allowDots === "undefined" ? defaults2.allowDots : !!opts.allowDots,
        charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults2.charsetSentinel,
        delimiter: typeof opts.delimiter === "undefined" ? defaults2.delimiter : opts.delimiter,
        encode: typeof opts.encode === "boolean" ? opts.encode : defaults2.encode,
        encoder: typeof opts.encoder === "function" ? opts.encoder : defaults2.encoder,
        encodeValuesOnly: typeof opts.encodeValuesOnly === "boolean" ? opts.encodeValuesOnly : defaults2.encodeValuesOnly,
        filter: filter2,
        format: format4,
        formatter,
        serializeDate: typeof opts.serializeDate === "function" ? opts.serializeDate : defaults2.serializeDate,
        skipNulls: typeof opts.skipNulls === "boolean" ? opts.skipNulls : defaults2.skipNulls,
        sort: typeof opts.sort === "function" ? opts.sort : null,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults2.strictNullHandling
      };
    };
    module3.exports = function(object, opts) {
      var obj = object;
      var options = normalizeStringifyOptions(opts);
      var objKeys;
      var filter2;
      if (typeof options.filter === "function") {
        filter2 = options.filter;
        obj = filter2("", obj);
      } else if (isArray4(options.filter)) {
        filter2 = options.filter;
        objKeys = filter2;
      }
      var keys = [];
      if (typeof obj !== "object" || obj === null) {
        return "";
      }
      var arrayFormat;
      if (opts && opts.arrayFormat in arrayPrefixGenerators) {
        arrayFormat = opts.arrayFormat;
      } else if (opts && "indices" in opts) {
        arrayFormat = opts.indices ? "indices" : "repeat";
      } else {
        arrayFormat = "indices";
      }
      var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];
      if (opts && "commaRoundTrip" in opts && typeof opts.commaRoundTrip !== "boolean") {
        throw new TypeError("`commaRoundTrip` must be a boolean, or absent");
      }
      var commaRoundTrip = generateArrayPrefix === "comma" && opts && opts.commaRoundTrip;
      if (!objKeys) {
        objKeys = Object.keys(obj);
      }
      if (options.sort) {
        objKeys.sort(options.sort);
      }
      var sideChannel = getSideChannel();
      for (var i8 = 0; i8 < objKeys.length; ++i8) {
        var key = objKeys[i8];
        if (options.skipNulls && obj[key] === null) {
          continue;
        }
        pushToArray(keys, stringify(
          obj[key],
          key,
          generateArrayPrefix,
          commaRoundTrip,
          options.strictNullHandling,
          options.skipNulls,
          options.encode ? options.encoder : null,
          options.filter,
          options.sort,
          options.allowDots,
          options.serializeDate,
          options.format,
          options.formatter,
          options.encodeValuesOnly,
          options.charset,
          sideChannel
        ));
      }
      var joined = keys.join(options.delimiter);
      var prefix = options.addQueryPrefix === true ? "?" : "";
      if (options.charsetSentinel) {
        if (options.charset === "iso-8859-1") {
          prefix += "utf8=%26%2310003%3B&";
        } else {
          prefix += "utf8=%E2%9C%93&";
        }
      }
      return joined.length > 0 ? prefix + joined : "";
    };
  }
});

// ../../node_modules/.pnpm/qs@6.11.2/node_modules/qs/lib/parse.js
var require_parse = __commonJS({
  "../../node_modules/.pnpm/qs@6.11.2/node_modules/qs/lib/parse.js"(exports11, module3) {
    "use strict";
    init_dirname();
    init_buffer2();
    init_process2();
    var utils = require_utils();
    var has = Object.prototype.hasOwnProperty;
    var isArray4 = Array.isArray;
    var defaults2 = {
      allowDots: false,
      allowPrototypes: false,
      allowSparse: false,
      arrayLimit: 20,
      charset: "utf-8",
      charsetSentinel: false,
      comma: false,
      decoder: utils.decode,
      delimiter: "&",
      depth: 5,
      ignoreQueryPrefix: false,
      interpretNumericEntities: false,
      parameterLimit: 1e3,
      parseArrays: true,
      plainObjects: false,
      strictNullHandling: false
    };
    var interpretNumericEntities = function(str) {
      return str.replace(/&#(\d+);/g, function($0, numberStr) {
        return String.fromCharCode(parseInt(numberStr, 10));
      });
    };
    var parseArrayValue = function(val, options) {
      if (val && typeof val === "string" && options.comma && val.indexOf(",") > -1) {
        return val.split(",");
      }
      return val;
    };
    var isoSentinel = "utf8=%26%2310003%3B";
    var charsetSentinel = "utf8=%E2%9C%93";
    var parseValues = function parseQueryStringValues(str, options) {
      var obj = { __proto__: null };
      var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, "") : str;
      var limit = options.parameterLimit === Infinity ? void 0 : options.parameterLimit;
      var parts = cleanStr.split(options.delimiter, limit);
      var skipIndex = -1;
      var i8;
      var charset = options.charset;
      if (options.charsetSentinel) {
        for (i8 = 0; i8 < parts.length; ++i8) {
          if (parts[i8].indexOf("utf8=") === 0) {
            if (parts[i8] === charsetSentinel) {
              charset = "utf-8";
            } else if (parts[i8] === isoSentinel) {
              charset = "iso-8859-1";
            }
            skipIndex = i8;
            i8 = parts.length;
          }
        }
      }
      for (i8 = 0; i8 < parts.length; ++i8) {
        if (i8 === skipIndex) {
          continue;
        }
        var part = parts[i8];
        var bracketEqualsPos = part.indexOf("]=");
        var pos = bracketEqualsPos === -1 ? part.indexOf("=") : bracketEqualsPos + 1;
        var key, val;
        if (pos === -1) {
          key = options.decoder(part, defaults2.decoder, charset, "key");
          val = options.strictNullHandling ? null : "";
        } else {
          key = options.decoder(part.slice(0, pos), defaults2.decoder, charset, "key");
          val = utils.maybeMap(
            parseArrayValue(part.slice(pos + 1), options),
            function(encodedVal) {
              return options.decoder(encodedVal, defaults2.decoder, charset, "value");
            }
          );
        }
        if (val && options.interpretNumericEntities && charset === "iso-8859-1") {
          val = interpretNumericEntities(val);
        }
        if (part.indexOf("[]=") > -1) {
          val = isArray4(val) ? [val] : val;
        }
        if (has.call(obj, key)) {
          obj[key] = utils.combine(obj[key], val);
        } else {
          obj[key] = val;
        }
      }
      return obj;
    };
    var parseObject = function(chain, val, options, valuesParsed) {
      var leaf = valuesParsed ? val : parseArrayValue(val, options);
      for (var i8 = chain.length - 1; i8 >= 0; --i8) {
        var obj;
        var root = chain[i8];
        if (root === "[]" && options.parseArrays) {
          obj = [].concat(leaf);
        } else {
          obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
          var cleanRoot = root.charAt(0) === "[" && root.charAt(root.length - 1) === "]" ? root.slice(1, -1) : root;
          var index = parseInt(cleanRoot, 10);
          if (!options.parseArrays && cleanRoot === "") {
            obj = { 0: leaf };
          } else if (!isNaN(index) && root !== cleanRoot && String(index) === cleanRoot && index >= 0 && (options.parseArrays && index <= options.arrayLimit)) {
            obj = [];
            obj[index] = leaf;
          } else if (cleanRoot !== "__proto__") {
            obj[cleanRoot] = leaf;
          }
        }
        leaf = obj;
      }
      return leaf;
    };
    var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
      if (!givenKey) {
        return;
      }
      var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, "[$1]") : givenKey;
      var brackets = /(\[[^[\]]*])/;
      var child = /(\[[^[\]]*])/g;
      var segment = options.depth > 0 && brackets.exec(key);
      var parent = segment ? key.slice(0, segment.index) : key;
      var keys = [];
      if (parent) {
        if (!options.plainObjects && has.call(Object.prototype, parent)) {
          if (!options.allowPrototypes) {
            return;
          }
        }
        keys.push(parent);
      }
      var i8 = 0;
      while (options.depth > 0 && (segment = child.exec(key)) !== null && i8 < options.depth) {
        i8 += 1;
        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
          if (!options.allowPrototypes) {
            return;
          }
        }
        keys.push(segment[1]);
      }
      if (segment) {
        keys.push("[" + key.slice(segment.index) + "]");
      }
      return parseObject(keys, val, options, valuesParsed);
    };
    var normalizeParseOptions = function normalizeParseOptions2(opts) {
      if (!opts) {
        return defaults2;
      }
      if (opts.decoder !== null && opts.decoder !== void 0 && typeof opts.decoder !== "function") {
        throw new TypeError("Decoder has to be a function.");
      }
      if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
        throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
      }
      var charset = typeof opts.charset === "undefined" ? defaults2.charset : opts.charset;
      return {
        allowDots: typeof opts.allowDots === "undefined" ? defaults2.allowDots : !!opts.allowDots,
        allowPrototypes: typeof opts.allowPrototypes === "boolean" ? opts.allowPrototypes : defaults2.allowPrototypes,
        allowSparse: typeof opts.allowSparse === "boolean" ? opts.allowSparse : defaults2.allowSparse,
        arrayLimit: typeof opts.arrayLimit === "number" ? opts.arrayLimit : defaults2.arrayLimit,
        charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults2.charsetSentinel,
        comma: typeof opts.comma === "boolean" ? opts.comma : defaults2.comma,
        decoder: typeof opts.decoder === "function" ? opts.decoder : defaults2.decoder,
        delimiter: typeof opts.delimiter === "string" || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults2.delimiter,
        depth: typeof opts.depth === "number" || opts.depth === false ? +opts.depth : defaults2.depth,
        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
        interpretNumericEntities: typeof opts.interpretNumericEntities === "boolean" ? opts.interpretNumericEntities : defaults2.interpretNumericEntities,
        parameterLimit: typeof opts.parameterLimit === "number" ? opts.parameterLimit : defaults2.parameterLimit,
        parseArrays: opts.parseArrays !== false,
        plainObjects: typeof opts.plainObjects === "boolean" ? opts.plainObjects : defaults2.plainObjects,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults2.strictNullHandling
      };
    };
    module3.exports = function(str, opts) {
      var options = normalizeParseOptions(opts);
      if (str === "" || str === null || typeof str === "undefined") {
        return options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      }
      var tempObj = typeof str === "string" ? parseValues(str, options) : str;
      var obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
      var keys = Object.keys(tempObj);
      for (var i8 = 0; i8 < keys.length; ++i8) {
        var key = keys[i8];
        var newObj = parseKeys(key, tempObj[key], options, typeof str === "string");
        obj = utils.merge(obj, newObj, options);
      }
      if (options.allowSparse === true) {
        return obj;
      }
      return utils.compact(obj);
    };
  }
});

// ../../node_modules/.pnpm/qs@6.11.2/node_modules/qs/lib/index.js
var require_lib2 = __commonJS({
  "../../node_modules/.pnpm/qs@6.11.2/node_modules/qs/lib/index.js"(exports11, module3) {
    "use strict";
    init_dirname();
    init_buffer2();
    init_process2();
    var stringify = require_stringify();
    var parse2 = require_parse();
    var formats = require_formats();
    module3.exports = {
      formats,
      parse: parse2,
      stringify
    };
  }
});

// ../../node_modules/.pnpm/event-source-polyfill@1.0.31/node_modules/event-source-polyfill/src/eventsource.js
var require_eventsource = __commonJS({
  "../../node_modules/.pnpm/event-source-polyfill@1.0.31/node_modules/event-source-polyfill/src/eventsource.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    (function(global2) {
      "use strict";
      var setTimeout2 = global2.setTimeout;
      var clearTimeout2 = global2.clearTimeout;
      var XMLHttpRequest2 = global2.XMLHttpRequest;
      var XDomainRequest = global2.XDomainRequest;
      var ActiveXObject = global2.ActiveXObject;
      var NativeEventSource = global2.EventSource;
      var document2 = global2.document;
      var Promise2 = global2.Promise;
      var fetch = global2.fetch;
      var Response = global2.Response;
      var TextDecoder3 = global2.TextDecoder;
      var TextEncoder3 = global2.TextEncoder;
      var AbortController2 = global2.AbortController;
      if (typeof window !== "undefined" && typeof document2 !== "undefined" && !("readyState" in document2) && document2.body == null) {
        document2.readyState = "loading";
        window.addEventListener("load", function(event) {
          document2.readyState = "complete";
        }, false);
      }
      if (XMLHttpRequest2 == null && ActiveXObject != null) {
        XMLHttpRequest2 = function() {
          return new ActiveXObject("Microsoft.XMLHTTP");
        };
      }
      if (Object.create == void 0) {
        Object.create = function(C4) {
          function F4() {
          }
          F4.prototype = C4;
          return new F4();
        };
      }
      if (!Date.now) {
        Date.now = function now() {
          return new Date().getTime();
        };
      }
      if (AbortController2 == void 0) {
        var originalFetch2 = fetch;
        fetch = function(url, options) {
          var signal = options.signal;
          return originalFetch2(url, { headers: options.headers, credentials: options.credentials, cache: options.cache }).then(function(response) {
            var reader = response.body.getReader();
            signal._reader = reader;
            if (signal._aborted) {
              signal._reader.cancel();
            }
            return {
              status: response.status,
              statusText: response.statusText,
              headers: response.headers,
              body: {
                getReader: function() {
                  return reader;
                }
              }
            };
          });
        };
        AbortController2 = function() {
          this.signal = {
            _reader: null,
            _aborted: false
          };
          this.abort = function() {
            if (this.signal._reader != null) {
              this.signal._reader.cancel();
            }
            this.signal._aborted = true;
          };
        };
      }
      function TextDecoderPolyfill() {
        this.bitsNeeded = 0;
        this.codePoint = 0;
      }
      TextDecoderPolyfill.prototype.decode = function(octets) {
        function valid(codePoint2, shift, octetsCount2) {
          if (octetsCount2 === 1) {
            return codePoint2 >= 128 >> shift && codePoint2 << shift <= 2047;
          }
          if (octetsCount2 === 2) {
            return codePoint2 >= 2048 >> shift && codePoint2 << shift <= 55295 || codePoint2 >= 57344 >> shift && codePoint2 << shift <= 65535;
          }
          if (octetsCount2 === 3) {
            return codePoint2 >= 65536 >> shift && codePoint2 << shift <= 1114111;
          }
          throw new Error();
        }
        function octetsCount(bitsNeeded2, codePoint2) {
          if (bitsNeeded2 === 6 * 1) {
            return codePoint2 >> 6 > 15 ? 3 : codePoint2 > 31 ? 2 : 1;
          }
          if (bitsNeeded2 === 6 * 2) {
            return codePoint2 > 15 ? 3 : 2;
          }
          if (bitsNeeded2 === 6 * 3) {
            return 3;
          }
          throw new Error();
        }
        var REPLACER = 65533;
        var string = "";
        var bitsNeeded = this.bitsNeeded;
        var codePoint = this.codePoint;
        for (var i8 = 0; i8 < octets.length; i8 += 1) {
          var octet = octets[i8];
          if (bitsNeeded !== 0) {
            if (octet < 128 || octet > 191 || !valid(codePoint << 6 | octet & 63, bitsNeeded - 6, octetsCount(bitsNeeded, codePoint))) {
              bitsNeeded = 0;
              codePoint = REPLACER;
              string += String.fromCharCode(codePoint);
            }
          }
          if (bitsNeeded === 0) {
            if (octet >= 0 && octet <= 127) {
              bitsNeeded = 0;
              codePoint = octet;
            } else if (octet >= 192 && octet <= 223) {
              bitsNeeded = 6 * 1;
              codePoint = octet & 31;
            } else if (octet >= 224 && octet <= 239) {
              bitsNeeded = 6 * 2;
              codePoint = octet & 15;
            } else if (octet >= 240 && octet <= 247) {
              bitsNeeded = 6 * 3;
              codePoint = octet & 7;
            } else {
              bitsNeeded = 0;
              codePoint = REPLACER;
            }
            if (bitsNeeded !== 0 && !valid(codePoint, bitsNeeded, octetsCount(bitsNeeded, codePoint))) {
              bitsNeeded = 0;
              codePoint = REPLACER;
            }
          } else {
            bitsNeeded -= 6;
            codePoint = codePoint << 6 | octet & 63;
          }
          if (bitsNeeded === 0) {
            if (codePoint <= 65535) {
              string += String.fromCharCode(codePoint);
            } else {
              string += String.fromCharCode(55296 + (codePoint - 65535 - 1 >> 10));
              string += String.fromCharCode(56320 + (codePoint - 65535 - 1 & 1023));
            }
          }
        }
        this.bitsNeeded = bitsNeeded;
        this.codePoint = codePoint;
        return string;
      };
      var supportsStreamOption = function() {
        try {
          return new TextDecoder3().decode(new TextEncoder3().encode("test"), { stream: true }) === "test";
        } catch (error) {
          console.debug("TextDecoder does not support streaming option. Using polyfill instead: " + error);
        }
        return false;
      };
      if (TextDecoder3 == void 0 || TextEncoder3 == void 0 || !supportsStreamOption()) {
        TextDecoder3 = TextDecoderPolyfill;
      }
      var k4 = function() {
      };
      function XHRWrapper(xhr) {
        this.withCredentials = false;
        this.readyState = 0;
        this.status = 0;
        this.statusText = "";
        this.responseText = "";
        this.onprogress = k4;
        this.onload = k4;
        this.onerror = k4;
        this.onreadystatechange = k4;
        this._contentType = "";
        this._xhr = xhr;
        this._sendTimeout = 0;
        this._abort = k4;
      }
      XHRWrapper.prototype.open = function(method, url) {
        this._abort(true);
        var that = this;
        var xhr = this._xhr;
        var state = 1;
        var timeout = 0;
        this._abort = function(silent) {
          if (that._sendTimeout !== 0) {
            clearTimeout2(that._sendTimeout);
            that._sendTimeout = 0;
          }
          if (state === 1 || state === 2 || state === 3) {
            state = 4;
            xhr.onload = k4;
            xhr.onerror = k4;
            xhr.onabort = k4;
            xhr.onprogress = k4;
            xhr.onreadystatechange = k4;
            xhr.abort();
            if (timeout !== 0) {
              clearTimeout2(timeout);
              timeout = 0;
            }
            if (!silent) {
              that.readyState = 4;
              that.onabort(null);
              that.onreadystatechange();
            }
          }
          state = 0;
        };
        var onStart = function() {
          if (state === 1) {
            var status = 0;
            var statusText = "";
            var contentType = void 0;
            if (!("contentType" in xhr)) {
              try {
                status = xhr.status;
                statusText = xhr.statusText;
                contentType = xhr.getResponseHeader("Content-Type");
              } catch (error) {
                status = 0;
                statusText = "";
                contentType = void 0;
              }
            } else {
              status = 200;
              statusText = "OK";
              contentType = xhr.contentType;
            }
            if (status !== 0) {
              state = 2;
              that.readyState = 2;
              that.status = status;
              that.statusText = statusText;
              that._contentType = contentType;
              that.onreadystatechange();
            }
          }
        };
        var onProgress = function() {
          onStart();
          if (state === 2 || state === 3) {
            state = 3;
            var responseText = "";
            try {
              responseText = xhr.responseText;
            } catch (error) {
            }
            that.readyState = 3;
            that.responseText = responseText;
            that.onprogress();
          }
        };
        var onFinish = function(type, event) {
          if (event == null || event.preventDefault == null) {
            event = {
              preventDefault: k4
            };
          }
          onProgress();
          if (state === 1 || state === 2 || state === 3) {
            state = 4;
            if (timeout !== 0) {
              clearTimeout2(timeout);
              timeout = 0;
            }
            that.readyState = 4;
            if (type === "load") {
              that.onload(event);
            } else if (type === "error") {
              that.onerror(event);
            } else if (type === "abort") {
              that.onabort(event);
            } else {
              throw new TypeError();
            }
            that.onreadystatechange();
          }
        };
        var onReadyStateChange = function(event) {
          if (xhr != void 0) {
            if (xhr.readyState === 4) {
              if (!("onload" in xhr) || !("onerror" in xhr) || !("onabort" in xhr)) {
                onFinish(xhr.responseText === "" ? "error" : "load", event);
              }
            } else if (xhr.readyState === 3) {
              if (!("onprogress" in xhr)) {
                onProgress();
              }
            } else if (xhr.readyState === 2) {
              onStart();
            }
          }
        };
        var onTimeout = function() {
          timeout = setTimeout2(function() {
            onTimeout();
          }, 500);
          if (xhr.readyState === 3) {
            onProgress();
          }
        };
        if ("onload" in xhr) {
          xhr.onload = function(event) {
            onFinish("load", event);
          };
        }
        if ("onerror" in xhr) {
          xhr.onerror = function(event) {
            onFinish("error", event);
          };
        }
        if ("onabort" in xhr) {
          xhr.onabort = function(event) {
            onFinish("abort", event);
          };
        }
        if ("onprogress" in xhr) {
          xhr.onprogress = onProgress;
        }
        if ("onreadystatechange" in xhr) {
          xhr.onreadystatechange = function(event) {
            onReadyStateChange(event);
          };
        }
        if ("contentType" in xhr || !("ontimeout" in XMLHttpRequest2.prototype)) {
          url += (url.indexOf("?") === -1 ? "?" : "&") + "padding=true";
        }
        xhr.open(method, url, true);
        if ("readyState" in xhr) {
          timeout = setTimeout2(function() {
            onTimeout();
          }, 0);
        }
      };
      XHRWrapper.prototype.abort = function() {
        this._abort(false);
      };
      XHRWrapper.prototype.getResponseHeader = function(name2) {
        return this._contentType;
      };
      XHRWrapper.prototype.setRequestHeader = function(name2, value) {
        var xhr = this._xhr;
        if ("setRequestHeader" in xhr) {
          xhr.setRequestHeader(name2, value);
        }
      };
      XHRWrapper.prototype.getAllResponseHeaders = function() {
        return this._xhr.getAllResponseHeaders != void 0 ? this._xhr.getAllResponseHeaders() || "" : "";
      };
      XHRWrapper.prototype.send = function() {
        if ((!("ontimeout" in XMLHttpRequest2.prototype) || !("sendAsBinary" in XMLHttpRequest2.prototype) && !("mozAnon" in XMLHttpRequest2.prototype)) && document2 != void 0 && document2.readyState != void 0 && document2.readyState !== "complete") {
          var that = this;
          that._sendTimeout = setTimeout2(function() {
            that._sendTimeout = 0;
            that.send();
          }, 4);
          return;
        }
        var xhr = this._xhr;
        if ("withCredentials" in xhr) {
          xhr.withCredentials = this.withCredentials;
        }
        try {
          xhr.send(void 0);
        } catch (error1) {
          throw error1;
        }
      };
      function toLowerCase(name2) {
        return name2.replace(/[A-Z]/g, function(c8) {
          return String.fromCharCode(c8.charCodeAt(0) + 32);
        });
      }
      function HeadersPolyfill(all3) {
        var map = /* @__PURE__ */ Object.create(null);
        var array = all3.split("\r\n");
        for (var i8 = 0; i8 < array.length; i8 += 1) {
          var line = array[i8];
          var parts = line.split(": ");
          var name2 = parts.shift();
          var value = parts.join(": ");
          map[toLowerCase(name2)] = value;
        }
        this._map = map;
      }
      HeadersPolyfill.prototype.get = function(name2) {
        return this._map[toLowerCase(name2)];
      };
      if (XMLHttpRequest2 != null && XMLHttpRequest2.HEADERS_RECEIVED == null) {
        XMLHttpRequest2.HEADERS_RECEIVED = 2;
      }
      function XHRTransport() {
      }
      XHRTransport.prototype.open = function(xhr, onStartCallback, onProgressCallback, onFinishCallback, url, withCredentials, headers) {
        xhr.open("GET", url);
        var offset = 0;
        xhr.onprogress = function() {
          var responseText = xhr.responseText;
          var chunk = responseText.slice(offset);
          offset += chunk.length;
          onProgressCallback(chunk);
        };
        xhr.onerror = function(event) {
          event.preventDefault();
          onFinishCallback(new Error("NetworkError"));
        };
        xhr.onload = function() {
          onFinishCallback(null);
        };
        xhr.onabort = function() {
          onFinishCallback(null);
        };
        xhr.onreadystatechange = function() {
          if (xhr.readyState === XMLHttpRequest2.HEADERS_RECEIVED) {
            var status = xhr.status;
            var statusText = xhr.statusText;
            var contentType = xhr.getResponseHeader("Content-Type");
            var headers2 = xhr.getAllResponseHeaders();
            onStartCallback(status, statusText, contentType, new HeadersPolyfill(headers2));
          }
        };
        xhr.withCredentials = withCredentials;
        for (var name2 in headers) {
          if (Object.prototype.hasOwnProperty.call(headers, name2)) {
            xhr.setRequestHeader(name2, headers[name2]);
          }
        }
        xhr.send();
        return xhr;
      };
      function HeadersWrapper(headers) {
        this._headers = headers;
      }
      HeadersWrapper.prototype.get = function(name2) {
        return this._headers.get(name2);
      };
      function FetchTransport() {
      }
      FetchTransport.prototype.open = function(xhr, onStartCallback, onProgressCallback, onFinishCallback, url, withCredentials, headers) {
        var reader = null;
        var controller = new AbortController2();
        var signal = controller.signal;
        var textDecoder = new TextDecoder3();
        fetch(url, {
          headers,
          credentials: withCredentials ? "include" : "same-origin",
          signal,
          cache: "no-store"
        }).then(function(response) {
          reader = response.body.getReader();
          onStartCallback(response.status, response.statusText, response.headers.get("Content-Type"), new HeadersWrapper(response.headers));
          return new Promise2(function(resolve2, reject) {
            var readNextChunk = function() {
              reader.read().then(function(result) {
                if (result.done) {
                  resolve2(void 0);
                } else {
                  var chunk = textDecoder.decode(result.value, { stream: true });
                  onProgressCallback(chunk);
                  readNextChunk();
                }
              })["catch"](function(error) {
                reject(error);
              });
            };
            readNextChunk();
          });
        })["catch"](function(error) {
          if (error.name === "AbortError") {
            return void 0;
          } else {
            return error;
          }
        }).then(function(error) {
          onFinishCallback(error);
        });
        return {
          abort: function() {
            if (reader != null) {
              reader.cancel();
            }
            controller.abort();
          }
        };
      };
      function EventTarget() {
        this._listeners = /* @__PURE__ */ Object.create(null);
      }
      function throwError(e11) {
        setTimeout2(function() {
          throw e11;
        }, 0);
      }
      EventTarget.prototype.dispatchEvent = function(event) {
        event.target = this;
        var typeListeners = this._listeners[event.type];
        if (typeListeners != void 0) {
          var length = typeListeners.length;
          for (var i8 = 0; i8 < length; i8 += 1) {
            var listener = typeListeners[i8];
            try {
              if (typeof listener.handleEvent === "function") {
                listener.handleEvent(event);
              } else {
                listener.call(this, event);
              }
            } catch (e11) {
              throwError(e11);
            }
          }
        }
      };
      EventTarget.prototype.addEventListener = function(type, listener) {
        type = String(type);
        var listeners2 = this._listeners;
        var typeListeners = listeners2[type];
        if (typeListeners == void 0) {
          typeListeners = [];
          listeners2[type] = typeListeners;
        }
        var found = false;
        for (var i8 = 0; i8 < typeListeners.length; i8 += 1) {
          if (typeListeners[i8] === listener) {
            found = true;
          }
        }
        if (!found) {
          typeListeners.push(listener);
        }
      };
      EventTarget.prototype.removeEventListener = function(type, listener) {
        type = String(type);
        var listeners2 = this._listeners;
        var typeListeners = listeners2[type];
        if (typeListeners != void 0) {
          var filtered = [];
          for (var i8 = 0; i8 < typeListeners.length; i8 += 1) {
            if (typeListeners[i8] !== listener) {
              filtered.push(typeListeners[i8]);
            }
          }
          if (filtered.length === 0) {
            delete listeners2[type];
          } else {
            listeners2[type] = filtered;
          }
        }
      };
      function Event(type) {
        this.type = type;
        this.target = void 0;
      }
      function MessageEvent2(type, options) {
        Event.call(this, type);
        this.data = options.data;
        this.lastEventId = options.lastEventId;
      }
      MessageEvent2.prototype = Object.create(Event.prototype);
      function ConnectionEvent(type, options) {
        Event.call(this, type);
        this.status = options.status;
        this.statusText = options.statusText;
        this.headers = options.headers;
      }
      ConnectionEvent.prototype = Object.create(Event.prototype);
      function ErrorEvent2(type, options) {
        Event.call(this, type);
        this.error = options.error;
      }
      ErrorEvent2.prototype = Object.create(Event.prototype);
      var WAITING = -1;
      var CONNECTING = 0;
      var OPEN = 1;
      var CLOSED = 2;
      var AFTER_CR = -1;
      var FIELD_START = 0;
      var FIELD = 1;
      var VALUE_START = 2;
      var VALUE = 3;
      var contentTypeRegExp = /^text\/event\-stream(;.*)?$/i;
      var MINIMUM_DURATION = 1e3;
      var MAXIMUM_DURATION = 18e6;
      var parseDuration = function(value, def) {
        var n9 = value == null ? def : parseInt(value, 10);
        if (n9 !== n9) {
          n9 = def;
        }
        return clampDuration(n9);
      };
      var clampDuration = function(n9) {
        return Math.min(Math.max(n9, MINIMUM_DURATION), MAXIMUM_DURATION);
      };
      var fire = function(that, f9, event) {
        try {
          if (typeof f9 === "function") {
            f9.call(that, event);
          }
        } catch (e11) {
          throwError(e11);
        }
      };
      function EventSourcePolyfill(url, options) {
        EventTarget.call(this);
        options = options || {};
        this.onopen = void 0;
        this.onmessage = void 0;
        this.onerror = void 0;
        this.url = void 0;
        this.readyState = void 0;
        this.withCredentials = void 0;
        this.headers = void 0;
        this._close = void 0;
        start(this, url, options);
      }
      function getBestXHRTransport() {
        return XMLHttpRequest2 != void 0 && "withCredentials" in XMLHttpRequest2.prototype || XDomainRequest == void 0 ? new XMLHttpRequest2() : new XDomainRequest();
      }
      var isFetchSupported = fetch != void 0 && Response != void 0 && "body" in Response.prototype;
      function start(es, url, options) {
        url = String(url);
        var withCredentials = Boolean(options.withCredentials);
        var lastEventIdQueryParameterName = options.lastEventIdQueryParameterName || "lastEventId";
        var initialRetry = clampDuration(1e3);
        var heartbeatTimeout = parseDuration(options.heartbeatTimeout, 45e3);
        var lastEventId = "";
        var retry = initialRetry;
        var wasActivity = false;
        var textLength = 0;
        var headers = options.headers || {};
        var TransportOption = options.Transport;
        var xhr = isFetchSupported && TransportOption == void 0 ? void 0 : new XHRWrapper(TransportOption != void 0 ? new TransportOption() : getBestXHRTransport());
        var transport = TransportOption != null && typeof TransportOption !== "string" ? new TransportOption() : xhr == void 0 ? new FetchTransport() : new XHRTransport();
        var abortController = void 0;
        var timeout = 0;
        var currentState = WAITING;
        var dataBuffer = "";
        var lastEventIdBuffer = "";
        var eventTypeBuffer = "";
        var textBuffer = "";
        var state = FIELD_START;
        var fieldStart = 0;
        var valueStart = 0;
        var onStart = function(status, statusText, contentType, headers2) {
          if (currentState === CONNECTING) {
            if (status === 200 && contentType != void 0 && contentTypeRegExp.test(contentType)) {
              currentState = OPEN;
              wasActivity = Date.now();
              retry = initialRetry;
              es.readyState = OPEN;
              var event = new ConnectionEvent("open", {
                status,
                statusText,
                headers: headers2
              });
              es.dispatchEvent(event);
              fire(es, es.onopen, event);
            } else {
              var message = "";
              if (status !== 200) {
                if (statusText) {
                  statusText = statusText.replace(/\s+/g, " ");
                }
                message = "EventSource's response has a status " + status + " " + statusText + " that is not 200. Aborting the connection.";
              } else {
                message = "EventSource's response has a Content-Type specifying an unsupported type: " + (contentType == void 0 ? "-" : contentType.replace(/\s+/g, " ")) + ". Aborting the connection.";
              }
              close();
              var event = new ConnectionEvent("error", {
                status,
                statusText,
                headers: headers2
              });
              es.dispatchEvent(event);
              fire(es, es.onerror, event);
              console.error(message);
            }
          }
        };
        var onProgress = function(textChunk) {
          if (currentState === OPEN) {
            var n9 = -1;
            for (var i8 = 0; i8 < textChunk.length; i8 += 1) {
              var c8 = textChunk.charCodeAt(i8);
              if (c8 === "\n".charCodeAt(0) || c8 === "\r".charCodeAt(0)) {
                n9 = i8;
              }
            }
            var chunk = (n9 !== -1 ? textBuffer : "") + textChunk.slice(0, n9 + 1);
            textBuffer = (n9 === -1 ? textBuffer : "") + textChunk.slice(n9 + 1);
            if (textChunk !== "") {
              wasActivity = Date.now();
              textLength += textChunk.length;
            }
            for (var position = 0; position < chunk.length; position += 1) {
              var c8 = chunk.charCodeAt(position);
              if (state === AFTER_CR && c8 === "\n".charCodeAt(0)) {
                state = FIELD_START;
              } else {
                if (state === AFTER_CR) {
                  state = FIELD_START;
                }
                if (c8 === "\r".charCodeAt(0) || c8 === "\n".charCodeAt(0)) {
                  if (state !== FIELD_START) {
                    if (state === FIELD) {
                      valueStart = position + 1;
                    }
                    var field = chunk.slice(fieldStart, valueStart - 1);
                    var value = chunk.slice(valueStart + (valueStart < position && chunk.charCodeAt(valueStart) === " ".charCodeAt(0) ? 1 : 0), position);
                    if (field === "data") {
                      dataBuffer += "\n";
                      dataBuffer += value;
                    } else if (field === "id") {
                      lastEventIdBuffer = value;
                    } else if (field === "event") {
                      eventTypeBuffer = value;
                    } else if (field === "retry") {
                      initialRetry = parseDuration(value, initialRetry);
                      retry = initialRetry;
                    } else if (field === "heartbeatTimeout") {
                      heartbeatTimeout = parseDuration(value, heartbeatTimeout);
                      if (timeout !== 0) {
                        clearTimeout2(timeout);
                        timeout = setTimeout2(function() {
                          onTimeout();
                        }, heartbeatTimeout);
                      }
                    }
                  }
                  if (state === FIELD_START) {
                    if (dataBuffer !== "") {
                      lastEventId = lastEventIdBuffer;
                      if (eventTypeBuffer === "") {
                        eventTypeBuffer = "message";
                      }
                      var event = new MessageEvent2(eventTypeBuffer, {
                        data: dataBuffer.slice(1),
                        lastEventId: lastEventIdBuffer
                      });
                      es.dispatchEvent(event);
                      if (eventTypeBuffer === "open") {
                        fire(es, es.onopen, event);
                      } else if (eventTypeBuffer === "message") {
                        fire(es, es.onmessage, event);
                      } else if (eventTypeBuffer === "error") {
                        fire(es, es.onerror, event);
                      }
                      if (currentState === CLOSED) {
                        return;
                      }
                    }
                    dataBuffer = "";
                    eventTypeBuffer = "";
                  }
                  state = c8 === "\r".charCodeAt(0) ? AFTER_CR : FIELD_START;
                } else {
                  if (state === FIELD_START) {
                    fieldStart = position;
                    state = FIELD;
                  }
                  if (state === FIELD) {
                    if (c8 === ":".charCodeAt(0)) {
                      valueStart = position + 1;
                      state = VALUE_START;
                    }
                  } else if (state === VALUE_START) {
                    state = VALUE;
                  }
                }
              }
            }
          }
        };
        var onFinish = function(error) {
          if (currentState === OPEN || currentState === CONNECTING) {
            currentState = WAITING;
            if (timeout !== 0) {
              clearTimeout2(timeout);
              timeout = 0;
            }
            timeout = setTimeout2(function() {
              onTimeout();
            }, retry);
            retry = clampDuration(Math.min(initialRetry * 16, retry * 2));
            es.readyState = CONNECTING;
            var event = new ErrorEvent2("error", { error });
            es.dispatchEvent(event);
            fire(es, es.onerror, event);
            if (error != void 0) {
              console.error(error);
            }
          }
        };
        var close = function() {
          currentState = CLOSED;
          if (abortController != void 0) {
            abortController.abort();
            abortController = void 0;
          }
          if (timeout !== 0) {
            clearTimeout2(timeout);
            timeout = 0;
          }
          es.readyState = CLOSED;
        };
        var onTimeout = function() {
          timeout = 0;
          if (currentState !== WAITING) {
            if (!wasActivity && abortController != void 0) {
              onFinish(new Error("No activity within " + heartbeatTimeout + " milliseconds. " + (currentState === CONNECTING ? "No response received." : textLength + " chars received.") + " Reconnecting."));
              if (abortController != void 0) {
                abortController.abort();
                abortController = void 0;
              }
            } else {
              var nextHeartbeat = Math.max((wasActivity || Date.now()) + heartbeatTimeout - Date.now(), 1);
              wasActivity = false;
              timeout = setTimeout2(function() {
                onTimeout();
              }, nextHeartbeat);
            }
            return;
          }
          wasActivity = false;
          textLength = 0;
          timeout = setTimeout2(function() {
            onTimeout();
          }, heartbeatTimeout);
          currentState = CONNECTING;
          dataBuffer = "";
          eventTypeBuffer = "";
          lastEventIdBuffer = lastEventId;
          textBuffer = "";
          fieldStart = 0;
          valueStart = 0;
          state = FIELD_START;
          var requestURL = url;
          if (url.slice(0, 5) !== "data:" && url.slice(0, 5) !== "blob:") {
            if (lastEventId !== "") {
              var i8 = url.indexOf("?");
              requestURL = i8 === -1 ? url : url.slice(0, i8 + 1) + url.slice(i8 + 1).replace(/(?:^|&)([^=&]*)(?:=[^&]*)?/g, function(p8, paramName) {
                return paramName === lastEventIdQueryParameterName ? "" : p8;
              });
              requestURL += (url.indexOf("?") === -1 ? "?" : "&") + lastEventIdQueryParameterName + "=" + encodeURIComponent(lastEventId);
            }
          }
          var withCredentials2 = es.withCredentials;
          var requestHeaders = {};
          requestHeaders["Accept"] = "text/event-stream";
          var headers2 = es.headers;
          if (headers2 != void 0) {
            for (var name2 in headers2) {
              if (Object.prototype.hasOwnProperty.call(headers2, name2)) {
                requestHeaders[name2] = headers2[name2];
              }
            }
          }
          try {
            abortController = transport.open(xhr, onStart, onProgress, onFinish, requestURL, withCredentials2, requestHeaders);
          } catch (error) {
            close();
            throw error;
          }
        };
        es.url = url;
        es.readyState = CONNECTING;
        es.withCredentials = withCredentials;
        es.headers = headers;
        es._close = close;
        onTimeout();
      }
      EventSourcePolyfill.prototype = Object.create(EventTarget.prototype);
      EventSourcePolyfill.prototype.CONNECTING = CONNECTING;
      EventSourcePolyfill.prototype.OPEN = OPEN;
      EventSourcePolyfill.prototype.CLOSED = CLOSED;
      EventSourcePolyfill.prototype.close = function() {
        this._close();
      };
      EventSourcePolyfill.CONNECTING = CONNECTING;
      EventSourcePolyfill.OPEN = OPEN;
      EventSourcePolyfill.CLOSED = CLOSED;
      EventSourcePolyfill.prototype.withCredentials = void 0;
      var R4 = NativeEventSource;
      if (XMLHttpRequest2 != void 0 && (NativeEventSource == void 0 || !("withCredentials" in NativeEventSource.prototype))) {
        R4 = EventSourcePolyfill;
      }
      (function(factory) {
        if (typeof module3 === "object" && typeof module3.exports === "object") {
          var v6 = factory(exports11);
          if (v6 !== void 0)
            module3.exports = v6;
        } else if (typeof define === "function" && define.amd) {
          define(["exports"], factory);
        } else {
          factory(global2);
        }
      })(function(exports12) {
        exports12.EventSourcePolyfill = EventSourcePolyfill;
        exports12.NativeEventSource = NativeEventSource;
        exports12.EventSource = R4;
      });
    })(typeof globalThis === "undefined" ? typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : exports11 : globalThis);
  }
});

// ../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/chunk-924bb2e1.js
function i6(t8) {
  throw new RangeError(r6[t8]);
}
function f7(t8, o9) {
  const n9 = t8.split("@");
  let r9 = "";
  n9.length > 1 && (r9 = n9[0] + "@", t8 = n9[1]);
  const c8 = function(t9, o10) {
    const n10 = [];
    let e11 = t9.length;
    for (; e11--; )
      n10[e11] = o10(t9[e11]);
    return n10;
  }((t8 = t8.replace(e8, ".")).split("."), o9).join(".");
  return r9 + c8;
}
function l6(t8) {
  const o9 = [];
  let n9 = 0;
  const e11 = t8.length;
  for (; n9 < e11; ) {
    const r9 = t8.charCodeAt(n9++);
    if (r9 >= 55296 && r9 <= 56319 && n9 < e11) {
      const e12 = t8.charCodeAt(n9++);
      56320 == (64512 & e12) ? o9.push(((1023 & r9) << 10) + (1023 & e12) + 65536) : (o9.push(r9), n9--);
    } else
      o9.push(r9);
  }
  return o9;
}
var t6, o6, n6, e8, r6, c6, s6, u6, a6, d5, h6, p6;
var init_chunk_924bb2e1 = __esm({
  "../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/chunk-924bb2e1.js"() {
    init_dirname();
    init_buffer2();
    init_process2();
    t6 = 2147483647;
    o6 = /^xn--/;
    n6 = /[^\0-\x7E]/;
    e8 = /[\x2E\u3002\uFF0E\uFF61]/g;
    r6 = { overflow: "Overflow: input needs wider integers to process", "not-basic": "Illegal input >= 0x80 (not a basic code point)", "invalid-input": "Invalid input" };
    c6 = Math.floor;
    s6 = String.fromCharCode;
    u6 = function(t8, o9) {
      return t8 + 22 + 75 * (t8 < 26) - ((0 != o9) << 5);
    };
    a6 = function(t8, o9, n9) {
      let e11 = 0;
      for (t8 = n9 ? c6(t8 / 700) : t8 >> 1, t8 += c6(t8 / o9); t8 > 455; e11 += 36)
        t8 = c6(t8 / 35);
      return c6(e11 + 36 * t8 / (t8 + 38));
    };
    d5 = function(o9) {
      const n9 = [], e11 = o9.length;
      let r9 = 0, s7 = 128, f9 = 72, l8 = o9.lastIndexOf("-");
      l8 < 0 && (l8 = 0);
      for (let t8 = 0; t8 < l8; ++t8)
        o9.charCodeAt(t8) >= 128 && i6("not-basic"), n9.push(o9.charCodeAt(t8));
      for (let d6 = l8 > 0 ? l8 + 1 : 0; d6 < e11; ) {
        let l9 = r9;
        for (let n10 = 1, s8 = 36; ; s8 += 36) {
          d6 >= e11 && i6("invalid-input");
          const l10 = (u8 = o9.charCodeAt(d6++)) - 48 < 10 ? u8 - 22 : u8 - 65 < 26 ? u8 - 65 : u8 - 97 < 26 ? u8 - 97 : 36;
          (l10 >= 36 || l10 > c6((t6 - r9) / n10)) && i6("overflow"), r9 += l10 * n10;
          const a8 = s8 <= f9 ? 1 : s8 >= f9 + 26 ? 26 : s8 - f9;
          if (l10 < a8)
            break;
          const h9 = 36 - a8;
          n10 > c6(t6 / h9) && i6("overflow"), n10 *= h9;
        }
        const h8 = n9.length + 1;
        f9 = a6(r9 - l9, h8, 0 == l9), c6(r9 / h8) > t6 - s7 && i6("overflow"), s7 += c6(r9 / h8), r9 %= h8, n9.splice(r9++, 0, s7);
      }
      var u8;
      return String.fromCodePoint(...n9);
    };
    h6 = function(o9) {
      const n9 = [];
      let e11 = (o9 = l6(o9)).length, r9 = 128, f9 = 0, d6 = 72;
      for (const t8 of o9)
        t8 < 128 && n9.push(s6(t8));
      let h8 = n9.length, p8 = h8;
      for (h8 && n9.push("-"); p8 < e11; ) {
        let e12 = t6;
        for (const t8 of o9)
          t8 >= r9 && t8 < e12 && (e12 = t8);
        const l8 = p8 + 1;
        e12 - r9 > c6((t6 - f9) / l8) && i6("overflow"), f9 += (e12 - r9) * l8, r9 = e12;
        for (const e13 of o9)
          if (e13 < r9 && ++f9 > t6 && i6("overflow"), e13 == r9) {
            let t8 = f9;
            for (let o10 = 36; ; o10 += 36) {
              const e14 = o10 <= d6 ? 1 : o10 >= d6 + 26 ? 26 : o10 - d6;
              if (t8 < e14)
                break;
              const r10 = t8 - e14, i8 = 36 - e14;
              n9.push(s6(u6(e14 + r10 % i8, 0))), t8 = c6(r10 / i8);
            }
            n9.push(s6(u6(t8, 0))), d6 = a6(f9, l8, p8 == h8), f9 = 0, ++p8;
          }
        ++f9, ++r9;
      }
      return n9.join("");
    };
    p6 = { version: "2.1.0", ucs2: { decode: l6, encode: (t8) => String.fromCodePoint(...t8) }, decode: d5, encode: h6, toASCII: function(t8) {
      return f7(t8, function(t9) {
        return n6.test(t9) ? "xn--" + h6(t9) : t9;
      });
    }, toUnicode: function(t8) {
      return f7(t8, function(t9) {
        return o6.test(t9) ? d5(t9.slice(4).toLowerCase()) : t9;
      });
    } };
    p6.decode;
    p6.encode;
    p6.toASCII;
    p6.toUnicode;
    p6.ucs2;
    p6.version;
  }
});

// ../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/chunk-b04e620d.js
function e9(e11, n9) {
  return Object.prototype.hasOwnProperty.call(e11, n9);
}
var n7, r7, t7, o7;
var init_chunk_b04e620d = __esm({
  "../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/chunk-b04e620d.js"() {
    init_dirname();
    init_buffer2();
    init_process2();
    n7 = function(n9, r9, t8, o9) {
      r9 = r9 || "&", t8 = t8 || "=";
      var a8 = {};
      if ("string" != typeof n9 || 0 === n9.length)
        return a8;
      var u8 = /\+/g;
      n9 = n9.split(r9);
      var c8 = 1e3;
      o9 && "number" == typeof o9.maxKeys && (c8 = o9.maxKeys);
      var i8 = n9.length;
      c8 > 0 && i8 > c8 && (i8 = c8);
      for (var s7 = 0; s7 < i8; ++s7) {
        var p8, f9, d6, y6, m6 = n9[s7].replace(u8, "%20"), l8 = m6.indexOf(t8);
        l8 >= 0 ? (p8 = m6.substr(0, l8), f9 = m6.substr(l8 + 1)) : (p8 = m6, f9 = ""), d6 = decodeURIComponent(p8), y6 = decodeURIComponent(f9), e9(a8, d6) ? Array.isArray(a8[d6]) ? a8[d6].push(y6) : a8[d6] = [a8[d6], y6] : a8[d6] = y6;
      }
      return a8;
    };
    r7 = function(e11) {
      switch (typeof e11) {
        case "string":
          return e11;
        case "boolean":
          return e11 ? "true" : "false";
        case "number":
          return isFinite(e11) ? e11 : "";
        default:
          return "";
      }
    };
    t7 = function(e11, n9, t8, o9) {
      return n9 = n9 || "&", t8 = t8 || "=", null === e11 && (e11 = void 0), "object" == typeof e11 ? Object.keys(e11).map(function(o10) {
        var a8 = encodeURIComponent(r7(o10)) + t8;
        return Array.isArray(e11[o10]) ? e11[o10].map(function(e12) {
          return a8 + encodeURIComponent(r7(e12));
        }).join(n9) : a8 + encodeURIComponent(r7(e11[o10]));
      }).join(n9) : o9 ? encodeURIComponent(r7(o9)) + t8 + encodeURIComponent(r7(e11)) : "";
    };
    o7 = {};
    o7.decode = o7.parse = n7, o7.encode = o7.stringify = t7;
    o7.decode;
    o7.encode;
    o7.parse;
    o7.stringify;
  }
});

// ../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/chunk-23dbec7b.js
function dew6() {
  if (_dewExec6)
    return exports$111;
  _dewExec6 = true;
  var process$1 = process2;
  function assertPath(path2) {
    if (typeof path2 !== "string") {
      throw new TypeError("Path must be a string. Received " + JSON.stringify(path2));
    }
  }
  function normalizeStringPosix(path2, allowAboveRoot) {
    var res = "";
    var lastSegmentLength = 0;
    var lastSlash = -1;
    var dots = 0;
    var code;
    for (var i8 = 0; i8 <= path2.length; ++i8) {
      if (i8 < path2.length)
        code = path2.charCodeAt(i8);
      else if (code === 47)
        break;
      else
        code = 47;
      if (code === 47) {
        if (lastSlash === i8 - 1 || dots === 1)
          ;
        else if (lastSlash !== i8 - 1 && dots === 2) {
          if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {
            if (res.length > 2) {
              var lastSlashIndex = res.lastIndexOf("/");
              if (lastSlashIndex !== res.length - 1) {
                if (lastSlashIndex === -1) {
                  res = "";
                  lastSegmentLength = 0;
                } else {
                  res = res.slice(0, lastSlashIndex);
                  lastSegmentLength = res.length - 1 - res.lastIndexOf("/");
                }
                lastSlash = i8;
                dots = 0;
                continue;
              }
            } else if (res.length === 2 || res.length === 1) {
              res = "";
              lastSegmentLength = 0;
              lastSlash = i8;
              dots = 0;
              continue;
            }
          }
          if (allowAboveRoot) {
            if (res.length > 0)
              res += "/..";
            else
              res = "..";
            lastSegmentLength = 2;
          }
        } else {
          if (res.length > 0)
            res += "/" + path2.slice(lastSlash + 1, i8);
          else
            res = path2.slice(lastSlash + 1, i8);
          lastSegmentLength = i8 - lastSlash - 1;
        }
        lastSlash = i8;
        dots = 0;
      } else if (code === 46 && dots !== -1) {
        ++dots;
      } else {
        dots = -1;
      }
    }
    return res;
  }
  function _format(sep, pathObject) {
    var dir = pathObject.dir || pathObject.root;
    var base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
    if (!dir) {
      return base;
    }
    if (dir === pathObject.root) {
      return dir + base;
    }
    return dir + sep + base;
  }
  var posix = {
    resolve: function resolve2() {
      var resolvedPath = "";
      var resolvedAbsolute = false;
      var cwd2;
      for (var i8 = arguments.length - 1; i8 >= -1 && !resolvedAbsolute; i8--) {
        var path2;
        if (i8 >= 0)
          path2 = arguments[i8];
        else {
          if (cwd2 === void 0)
            cwd2 = process$1.cwd();
          path2 = cwd2;
        }
        assertPath(path2);
        if (path2.length === 0) {
          continue;
        }
        resolvedPath = path2 + "/" + resolvedPath;
        resolvedAbsolute = path2.charCodeAt(0) === 47;
      }
      resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);
      if (resolvedAbsolute) {
        if (resolvedPath.length > 0)
          return "/" + resolvedPath;
        else
          return "/";
      } else if (resolvedPath.length > 0) {
        return resolvedPath;
      } else {
        return ".";
      }
    },
    normalize: function normalize(path2) {
      assertPath(path2);
      if (path2.length === 0)
        return ".";
      var isAbsolute = path2.charCodeAt(0) === 47;
      var trailingSeparator = path2.charCodeAt(path2.length - 1) === 47;
      path2 = normalizeStringPosix(path2, !isAbsolute);
      if (path2.length === 0 && !isAbsolute)
        path2 = ".";
      if (path2.length > 0 && trailingSeparator)
        path2 += "/";
      if (isAbsolute)
        return "/" + path2;
      return path2;
    },
    isAbsolute: function isAbsolute(path2) {
      assertPath(path2);
      return path2.length > 0 && path2.charCodeAt(0) === 47;
    },
    join: function join() {
      if (arguments.length === 0)
        return ".";
      var joined;
      for (var i8 = 0; i8 < arguments.length; ++i8) {
        var arg = arguments[i8];
        assertPath(arg);
        if (arg.length > 0) {
          if (joined === void 0)
            joined = arg;
          else
            joined += "/" + arg;
        }
      }
      if (joined === void 0)
        return ".";
      return posix.normalize(joined);
    },
    relative: function relative(from, to) {
      assertPath(from);
      assertPath(to);
      if (from === to)
        return "";
      from = posix.resolve(from);
      to = posix.resolve(to);
      if (from === to)
        return "";
      var fromStart = 1;
      for (; fromStart < from.length; ++fromStart) {
        if (from.charCodeAt(fromStart) !== 47)
          break;
      }
      var fromEnd = from.length;
      var fromLen = fromEnd - fromStart;
      var toStart = 1;
      for (; toStart < to.length; ++toStart) {
        if (to.charCodeAt(toStart) !== 47)
          break;
      }
      var toEnd = to.length;
      var toLen = toEnd - toStart;
      var length = fromLen < toLen ? fromLen : toLen;
      var lastCommonSep = -1;
      var i8 = 0;
      for (; i8 <= length; ++i8) {
        if (i8 === length) {
          if (toLen > length) {
            if (to.charCodeAt(toStart + i8) === 47) {
              return to.slice(toStart + i8 + 1);
            } else if (i8 === 0) {
              return to.slice(toStart + i8);
            }
          } else if (fromLen > length) {
            if (from.charCodeAt(fromStart + i8) === 47) {
              lastCommonSep = i8;
            } else if (i8 === 0) {
              lastCommonSep = 0;
            }
          }
          break;
        }
        var fromCode = from.charCodeAt(fromStart + i8);
        var toCode = to.charCodeAt(toStart + i8);
        if (fromCode !== toCode)
          break;
        else if (fromCode === 47)
          lastCommonSep = i8;
      }
      var out = "";
      for (i8 = fromStart + lastCommonSep + 1; i8 <= fromEnd; ++i8) {
        if (i8 === fromEnd || from.charCodeAt(i8) === 47) {
          if (out.length === 0)
            out += "..";
          else
            out += "/..";
        }
      }
      if (out.length > 0)
        return out + to.slice(toStart + lastCommonSep);
      else {
        toStart += lastCommonSep;
        if (to.charCodeAt(toStart) === 47)
          ++toStart;
        return to.slice(toStart);
      }
    },
    _makeLong: function _makeLong(path2) {
      return path2;
    },
    dirname: function dirname(path2) {
      assertPath(path2);
      if (path2.length === 0)
        return ".";
      var code = path2.charCodeAt(0);
      var hasRoot = code === 47;
      var end = -1;
      var matchedSlash = true;
      for (var i8 = path2.length - 1; i8 >= 1; --i8) {
        code = path2.charCodeAt(i8);
        if (code === 47) {
          if (!matchedSlash) {
            end = i8;
            break;
          }
        } else {
          matchedSlash = false;
        }
      }
      if (end === -1)
        return hasRoot ? "/" : ".";
      if (hasRoot && end === 1)
        return "//";
      return path2.slice(0, end);
    },
    basename: function basename(path2, ext) {
      if (ext !== void 0 && typeof ext !== "string")
        throw new TypeError('"ext" argument must be a string');
      assertPath(path2);
      var start = 0;
      var end = -1;
      var matchedSlash = true;
      var i8;
      if (ext !== void 0 && ext.length > 0 && ext.length <= path2.length) {
        if (ext.length === path2.length && ext === path2)
          return "";
        var extIdx = ext.length - 1;
        var firstNonSlashEnd = -1;
        for (i8 = path2.length - 1; i8 >= 0; --i8) {
          var code = path2.charCodeAt(i8);
          if (code === 47) {
            if (!matchedSlash) {
              start = i8 + 1;
              break;
            }
          } else {
            if (firstNonSlashEnd === -1) {
              matchedSlash = false;
              firstNonSlashEnd = i8 + 1;
            }
            if (extIdx >= 0) {
              if (code === ext.charCodeAt(extIdx)) {
                if (--extIdx === -1) {
                  end = i8;
                }
              } else {
                extIdx = -1;
                end = firstNonSlashEnd;
              }
            }
          }
        }
        if (start === end)
          end = firstNonSlashEnd;
        else if (end === -1)
          end = path2.length;
        return path2.slice(start, end);
      } else {
        for (i8 = path2.length - 1; i8 >= 0; --i8) {
          if (path2.charCodeAt(i8) === 47) {
            if (!matchedSlash) {
              start = i8 + 1;
              break;
            }
          } else if (end === -1) {
            matchedSlash = false;
            end = i8 + 1;
          }
        }
        if (end === -1)
          return "";
        return path2.slice(start, end);
      }
    },
    extname: function extname(path2) {
      assertPath(path2);
      var startDot = -1;
      var startPart = 0;
      var end = -1;
      var matchedSlash = true;
      var preDotState = 0;
      for (var i8 = path2.length - 1; i8 >= 0; --i8) {
        var code = path2.charCodeAt(i8);
        if (code === 47) {
          if (!matchedSlash) {
            startPart = i8 + 1;
            break;
          }
          continue;
        }
        if (end === -1) {
          matchedSlash = false;
          end = i8 + 1;
        }
        if (code === 46) {
          if (startDot === -1)
            startDot = i8;
          else if (preDotState !== 1)
            preDotState = 1;
        } else if (startDot !== -1) {
          preDotState = -1;
        }
      }
      if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        return "";
      }
      return path2.slice(startDot, end);
    },
    format: function format4(pathObject) {
      if (pathObject === null || typeof pathObject !== "object") {
        throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
      }
      return _format("/", pathObject);
    },
    parse: function parse2(path2) {
      assertPath(path2);
      var ret = {
        root: "",
        dir: "",
        base: "",
        ext: "",
        name: ""
      };
      if (path2.length === 0)
        return ret;
      var code = path2.charCodeAt(0);
      var isAbsolute = code === 47;
      var start;
      if (isAbsolute) {
        ret.root = "/";
        start = 1;
      } else {
        start = 0;
      }
      var startDot = -1;
      var startPart = 0;
      var end = -1;
      var matchedSlash = true;
      var i8 = path2.length - 1;
      var preDotState = 0;
      for (; i8 >= start; --i8) {
        code = path2.charCodeAt(i8);
        if (code === 47) {
          if (!matchedSlash) {
            startPart = i8 + 1;
            break;
          }
          continue;
        }
        if (end === -1) {
          matchedSlash = false;
          end = i8 + 1;
        }
        if (code === 46) {
          if (startDot === -1)
            startDot = i8;
          else if (preDotState !== 1)
            preDotState = 1;
        } else if (startDot !== -1) {
          preDotState = -1;
        }
      }
      if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        if (end !== -1) {
          if (startPart === 0 && isAbsolute)
            ret.base = ret.name = path2.slice(1, end);
          else
            ret.base = ret.name = path2.slice(startPart, end);
        }
      } else {
        if (startPart === 0 && isAbsolute) {
          ret.name = path2.slice(1, startDot);
          ret.base = path2.slice(1, end);
        } else {
          ret.name = path2.slice(startPart, startDot);
          ret.base = path2.slice(startPart, end);
        }
        ret.ext = path2.slice(startDot, end);
      }
      if (startPart > 0)
        ret.dir = path2.slice(0, startPart - 1);
      else if (isAbsolute)
        ret.dir = "/";
      return ret;
    },
    sep: "/",
    delimiter: ":",
    win32: null,
    posix: null
  };
  posix.posix = posix;
  exports$111 = posix;
  return exports$111;
}
var exports$111, _dewExec6, exports6;
var init_chunk_23dbec7b = __esm({
  "../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/chunk-23dbec7b.js"() {
    init_dirname();
    init_buffer2();
    init_process2();
    init_chunk_2eac56ff();
    exports$111 = {};
    _dewExec6 = false;
    exports6 = dew6();
  }
});

// ../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/url.js
var url_exports = {};
__export(url_exports, {
  URL: () => _URL,
  Url: () => Url,
  default: () => h7,
  fileURLToPath: () => fileURLToPath,
  format: () => format2,
  parse: () => parse,
  pathToFileURL: () => pathToFileURL,
  resolve: () => resolve,
  resolveObject: () => resolveObject
});
function r8() {
  this.protocol = null, this.slashes = null, this.auth = null, this.host = null, this.port = null, this.hostname = null, this.hash = null, this.search = null, this.query = null, this.pathname = null, this.path = null, this.href = null;
}
function O4(t8, s7, h8) {
  if (t8 && a7.isObject(t8) && t8 instanceof r8)
    return t8;
  var e11 = new r8();
  return e11.parse(t8, s7, h8), e11;
}
function dew7() {
  if (_dewExec7)
    return exports7;
  _dewExec7 = true;
  var process3 = T;
  function assertPath(path2) {
    if (typeof path2 !== "string") {
      throw new TypeError("Path must be a string. Received " + JSON.stringify(path2));
    }
  }
  function normalizeStringPosix(path2, allowAboveRoot) {
    var res = "";
    var lastSegmentLength = 0;
    var lastSlash = -1;
    var dots = 0;
    var code;
    for (var i8 = 0; i8 <= path2.length; ++i8) {
      if (i8 < path2.length)
        code = path2.charCodeAt(i8);
      else if (code === 47)
        break;
      else
        code = 47;
      if (code === 47) {
        if (lastSlash === i8 - 1 || dots === 1)
          ;
        else if (lastSlash !== i8 - 1 && dots === 2) {
          if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {
            if (res.length > 2) {
              var lastSlashIndex = res.lastIndexOf("/");
              if (lastSlashIndex !== res.length - 1) {
                if (lastSlashIndex === -1) {
                  res = "";
                  lastSegmentLength = 0;
                } else {
                  res = res.slice(0, lastSlashIndex);
                  lastSegmentLength = res.length - 1 - res.lastIndexOf("/");
                }
                lastSlash = i8;
                dots = 0;
                continue;
              }
            } else if (res.length === 2 || res.length === 1) {
              res = "";
              lastSegmentLength = 0;
              lastSlash = i8;
              dots = 0;
              continue;
            }
          }
          if (allowAboveRoot) {
            if (res.length > 0)
              res += "/..";
            else
              res = "..";
            lastSegmentLength = 2;
          }
        } else {
          if (res.length > 0)
            res += "/" + path2.slice(lastSlash + 1, i8);
          else
            res = path2.slice(lastSlash + 1, i8);
          lastSegmentLength = i8 - lastSlash - 1;
        }
        lastSlash = i8;
        dots = 0;
      } else if (code === 46 && dots !== -1) {
        ++dots;
      } else {
        dots = -1;
      }
    }
    return res;
  }
  function _format(sep, pathObject) {
    var dir = pathObject.dir || pathObject.root;
    var base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
    if (!dir) {
      return base;
    }
    if (dir === pathObject.root) {
      return dir + base;
    }
    return dir + sep + base;
  }
  var posix = {
    resolve: function resolve2() {
      var resolvedPath = "";
      var resolvedAbsolute = false;
      var cwd2;
      for (var i8 = arguments.length - 1; i8 >= -1 && !resolvedAbsolute; i8--) {
        var path2;
        if (i8 >= 0)
          path2 = arguments[i8];
        else {
          if (cwd2 === void 0)
            cwd2 = process3.cwd();
          path2 = cwd2;
        }
        assertPath(path2);
        if (path2.length === 0) {
          continue;
        }
        resolvedPath = path2 + "/" + resolvedPath;
        resolvedAbsolute = path2.charCodeAt(0) === 47;
      }
      resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);
      if (resolvedAbsolute) {
        if (resolvedPath.length > 0)
          return "/" + resolvedPath;
        else
          return "/";
      } else if (resolvedPath.length > 0) {
        return resolvedPath;
      } else {
        return ".";
      }
    },
    normalize: function normalize(path2) {
      assertPath(path2);
      if (path2.length === 0)
        return ".";
      var isAbsolute = path2.charCodeAt(0) === 47;
      var trailingSeparator = path2.charCodeAt(path2.length - 1) === 47;
      path2 = normalizeStringPosix(path2, !isAbsolute);
      if (path2.length === 0 && !isAbsolute)
        path2 = ".";
      if (path2.length > 0 && trailingSeparator)
        path2 += "/";
      if (isAbsolute)
        return "/" + path2;
      return path2;
    },
    isAbsolute: function isAbsolute(path2) {
      assertPath(path2);
      return path2.length > 0 && path2.charCodeAt(0) === 47;
    },
    join: function join() {
      if (arguments.length === 0)
        return ".";
      var joined;
      for (var i8 = 0; i8 < arguments.length; ++i8) {
        var arg = arguments[i8];
        assertPath(arg);
        if (arg.length > 0) {
          if (joined === void 0)
            joined = arg;
          else
            joined += "/" + arg;
        }
      }
      if (joined === void 0)
        return ".";
      return posix.normalize(joined);
    },
    relative: function relative(from, to) {
      assertPath(from);
      assertPath(to);
      if (from === to)
        return "";
      from = posix.resolve(from);
      to = posix.resolve(to);
      if (from === to)
        return "";
      var fromStart = 1;
      for (; fromStart < from.length; ++fromStart) {
        if (from.charCodeAt(fromStart) !== 47)
          break;
      }
      var fromEnd = from.length;
      var fromLen = fromEnd - fromStart;
      var toStart = 1;
      for (; toStart < to.length; ++toStart) {
        if (to.charCodeAt(toStart) !== 47)
          break;
      }
      var toEnd = to.length;
      var toLen = toEnd - toStart;
      var length = fromLen < toLen ? fromLen : toLen;
      var lastCommonSep = -1;
      var i8 = 0;
      for (; i8 <= length; ++i8) {
        if (i8 === length) {
          if (toLen > length) {
            if (to.charCodeAt(toStart + i8) === 47) {
              return to.slice(toStart + i8 + 1);
            } else if (i8 === 0) {
              return to.slice(toStart + i8);
            }
          } else if (fromLen > length) {
            if (from.charCodeAt(fromStart + i8) === 47) {
              lastCommonSep = i8;
            } else if (i8 === 0) {
              lastCommonSep = 0;
            }
          }
          break;
        }
        var fromCode = from.charCodeAt(fromStart + i8);
        var toCode = to.charCodeAt(toStart + i8);
        if (fromCode !== toCode)
          break;
        else if (fromCode === 47)
          lastCommonSep = i8;
      }
      var out = "";
      for (i8 = fromStart + lastCommonSep + 1; i8 <= fromEnd; ++i8) {
        if (i8 === fromEnd || from.charCodeAt(i8) === 47) {
          if (out.length === 0)
            out += "..";
          else
            out += "/..";
        }
      }
      if (out.length > 0)
        return out + to.slice(toStart + lastCommonSep);
      else {
        toStart += lastCommonSep;
        if (to.charCodeAt(toStart) === 47)
          ++toStart;
        return to.slice(toStart);
      }
    },
    _makeLong: function _makeLong(path2) {
      return path2;
    },
    dirname: function dirname(path2) {
      assertPath(path2);
      if (path2.length === 0)
        return ".";
      var code = path2.charCodeAt(0);
      var hasRoot = code === 47;
      var end = -1;
      var matchedSlash = true;
      for (var i8 = path2.length - 1; i8 >= 1; --i8) {
        code = path2.charCodeAt(i8);
        if (code === 47) {
          if (!matchedSlash) {
            end = i8;
            break;
          }
        } else {
          matchedSlash = false;
        }
      }
      if (end === -1)
        return hasRoot ? "/" : ".";
      if (hasRoot && end === 1)
        return "//";
      return path2.slice(0, end);
    },
    basename: function basename(path2, ext) {
      if (ext !== void 0 && typeof ext !== "string")
        throw new TypeError('"ext" argument must be a string');
      assertPath(path2);
      var start = 0;
      var end = -1;
      var matchedSlash = true;
      var i8;
      if (ext !== void 0 && ext.length > 0 && ext.length <= path2.length) {
        if (ext.length === path2.length && ext === path2)
          return "";
        var extIdx = ext.length - 1;
        var firstNonSlashEnd = -1;
        for (i8 = path2.length - 1; i8 >= 0; --i8) {
          var code = path2.charCodeAt(i8);
          if (code === 47) {
            if (!matchedSlash) {
              start = i8 + 1;
              break;
            }
          } else {
            if (firstNonSlashEnd === -1) {
              matchedSlash = false;
              firstNonSlashEnd = i8 + 1;
            }
            if (extIdx >= 0) {
              if (code === ext.charCodeAt(extIdx)) {
                if (--extIdx === -1) {
                  end = i8;
                }
              } else {
                extIdx = -1;
                end = firstNonSlashEnd;
              }
            }
          }
        }
        if (start === end)
          end = firstNonSlashEnd;
        else if (end === -1)
          end = path2.length;
        return path2.slice(start, end);
      } else {
        for (i8 = path2.length - 1; i8 >= 0; --i8) {
          if (path2.charCodeAt(i8) === 47) {
            if (!matchedSlash) {
              start = i8 + 1;
              break;
            }
          } else if (end === -1) {
            matchedSlash = false;
            end = i8 + 1;
          }
        }
        if (end === -1)
          return "";
        return path2.slice(start, end);
      }
    },
    extname: function extname(path2) {
      assertPath(path2);
      var startDot = -1;
      var startPart = 0;
      var end = -1;
      var matchedSlash = true;
      var preDotState = 0;
      for (var i8 = path2.length - 1; i8 >= 0; --i8) {
        var code = path2.charCodeAt(i8);
        if (code === 47) {
          if (!matchedSlash) {
            startPart = i8 + 1;
            break;
          }
          continue;
        }
        if (end === -1) {
          matchedSlash = false;
          end = i8 + 1;
        }
        if (code === 46) {
          if (startDot === -1)
            startDot = i8;
          else if (preDotState !== 1)
            preDotState = 1;
        } else if (startDot !== -1) {
          preDotState = -1;
        }
      }
      if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        return "";
      }
      return path2.slice(startDot, end);
    },
    format: function format4(pathObject) {
      if (pathObject === null || typeof pathObject !== "object") {
        throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
      }
      return _format("/", pathObject);
    },
    parse: function parse2(path2) {
      assertPath(path2);
      var ret = {
        root: "",
        dir: "",
        base: "",
        ext: "",
        name: ""
      };
      if (path2.length === 0)
        return ret;
      var code = path2.charCodeAt(0);
      var isAbsolute = code === 47;
      var start;
      if (isAbsolute) {
        ret.root = "/";
        start = 1;
      } else {
        start = 0;
      }
      var startDot = -1;
      var startPart = 0;
      var end = -1;
      var matchedSlash = true;
      var i8 = path2.length - 1;
      var preDotState = 0;
      for (; i8 >= start; --i8) {
        code = path2.charCodeAt(i8);
        if (code === 47) {
          if (!matchedSlash) {
            startPart = i8 + 1;
            break;
          }
          continue;
        }
        if (end === -1) {
          matchedSlash = false;
          end = i8 + 1;
        }
        if (code === 46) {
          if (startDot === -1)
            startDot = i8;
          else if (preDotState !== 1)
            preDotState = 1;
        } else if (startDot !== -1) {
          preDotState = -1;
        }
      }
      if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        if (end !== -1) {
          if (startPart === 0 && isAbsolute)
            ret.base = ret.name = path2.slice(1, end);
          else
            ret.base = ret.name = path2.slice(startPart, end);
        }
      } else {
        if (startPart === 0 && isAbsolute) {
          ret.name = path2.slice(1, startDot);
          ret.base = path2.slice(1, end);
        } else {
          ret.name = path2.slice(startPart, startDot);
          ret.base = path2.slice(startPart, end);
        }
        ret.ext = path2.slice(startDot, end);
      }
      if (startPart > 0)
        ret.dir = path2.slice(0, startPart - 1);
      else if (isAbsolute)
        ret.dir = "/";
      return ret;
    },
    sep: "/",
    delimiter: ":",
    win32: null,
    posix: null
  };
  posix.posix = posix;
  exports7 = posix;
  return exports7;
}
function fileURLToPath$1(path2) {
  if (typeof path2 === "string")
    path2 = new URL(path2);
  else if (!(path2 instanceof URL)) {
    throw new Deno.errors.InvalidData(
      "invalid argument path , must be a string or URL"
    );
  }
  if (path2.protocol !== "file:") {
    throw new Deno.errors.InvalidData("invalid url scheme");
  }
  return isWindows$1 ? getPathFromURLWin$1(path2) : getPathFromURLPosix$1(path2);
}
function getPathFromURLWin$1(url) {
  const hostname = url.hostname;
  let pathname = url.pathname;
  for (let n9 = 0; n9 < pathname.length; n9++) {
    if (pathname[n9] === "%") {
      const third = pathname.codePointAt(n9 + 2) || 32;
      if (pathname[n9 + 1] === "2" && third === 102 || pathname[n9 + 1] === "5" && third === 99) {
        throw new Deno.errors.InvalidData(
          "must not include encoded \\ or / characters"
        );
      }
    }
  }
  pathname = pathname.replace(forwardSlashRegEx$1, "\\");
  pathname = decodeURIComponent(pathname);
  if (hostname !== "") {
    return `\\\\${hostname}${pathname}`;
  } else {
    const letter = pathname.codePointAt(1) | 32;
    const sep = pathname[2];
    if (letter < CHAR_LOWERCASE_A$1 || letter > CHAR_LOWERCASE_Z$1 || sep !== ":") {
      throw new Deno.errors.InvalidData("file url path must be absolute");
    }
    return pathname.slice(1);
  }
}
function getPathFromURLPosix$1(url) {
  if (url.hostname !== "") {
    throw new Deno.errors.InvalidData("invalid file url hostname");
  }
  const pathname = url.pathname;
  for (let n9 = 0; n9 < pathname.length; n9++) {
    if (pathname[n9] === "%") {
      const third = pathname.codePointAt(n9 + 2) || 32;
      if (pathname[n9 + 1] === "2" && third === 102) {
        throw new Deno.errors.InvalidData(
          "must not include encoded / characters"
        );
      }
    }
  }
  return decodeURIComponent(pathname);
}
function pathToFileURL$1(filepath) {
  let resolved = path.resolve(filepath);
  const filePathLast = filepath.charCodeAt(filepath.length - 1);
  if ((filePathLast === CHAR_FORWARD_SLASH$1 || isWindows$1 && filePathLast === CHAR_BACKWARD_SLASH$1) && resolved[resolved.length - 1] !== path.sep) {
    resolved += "/";
  }
  const outURL = new URL("file://");
  if (resolved.includes("%"))
    resolved = resolved.replace(percentRegEx$1, "%25");
  if (!isWindows$1 && resolved.includes("\\")) {
    resolved = resolved.replace(backslashRegEx$1, "%5C");
  }
  if (resolved.includes("\n"))
    resolved = resolved.replace(newlineRegEx$1, "%0A");
  if (resolved.includes("\r")) {
    resolved = resolved.replace(carriageReturnRegEx$1, "%0D");
  }
  if (resolved.includes("	"))
    resolved = resolved.replace(tabRegEx$1, "%09");
  outURL.pathname = resolved;
  return outURL;
}
function fileURLToPath(path2) {
  if (typeof path2 === "string")
    path2 = new URL(path2);
  else if (!(path2 instanceof URL)) {
    throw new Deno.errors.InvalidData(
      "invalid argument path , must be a string or URL"
    );
  }
  if (path2.protocol !== "file:") {
    throw new Deno.errors.InvalidData("invalid url scheme");
  }
  return isWindows ? getPathFromURLWin(path2) : getPathFromURLPosix(path2);
}
function getPathFromURLWin(url) {
  const hostname = url.hostname;
  let pathname = url.pathname;
  for (let n9 = 0; n9 < pathname.length; n9++) {
    if (pathname[n9] === "%") {
      const third = pathname.codePointAt(n9 + 2) || 32;
      if (pathname[n9 + 1] === "2" && third === 102 || pathname[n9 + 1] === "5" && third === 99) {
        throw new Deno.errors.InvalidData(
          "must not include encoded \\ or / characters"
        );
      }
    }
  }
  pathname = pathname.replace(forwardSlashRegEx, "\\");
  pathname = decodeURIComponent(pathname);
  if (hostname !== "") {
    return `\\\\${hostname}${pathname}`;
  } else {
    const letter = pathname.codePointAt(1) | 32;
    const sep = pathname[2];
    if (letter < CHAR_LOWERCASE_A || letter > CHAR_LOWERCASE_Z || sep !== ":") {
      throw new Deno.errors.InvalidData("file url path must be absolute");
    }
    return pathname.slice(1);
  }
}
function getPathFromURLPosix(url) {
  if (url.hostname !== "") {
    throw new Deno.errors.InvalidData("invalid file url hostname");
  }
  const pathname = url.pathname;
  for (let n9 = 0; n9 < pathname.length; n9++) {
    if (pathname[n9] === "%") {
      const third = pathname.codePointAt(n9 + 2) || 32;
      if (pathname[n9 + 1] === "2" && third === 102) {
        throw new Deno.errors.InvalidData(
          "must not include encoded / characters"
        );
      }
    }
  }
  return decodeURIComponent(pathname);
}
function pathToFileURL(filepath) {
  let resolved = exports6.resolve(filepath);
  const filePathLast = filepath.charCodeAt(filepath.length - 1);
  if ((filePathLast === CHAR_FORWARD_SLASH || isWindows && filePathLast === CHAR_BACKWARD_SLASH) && resolved[resolved.length - 1] !== exports6.sep) {
    resolved += "/";
  }
  const outURL = new URL("file://");
  if (resolved.includes("%"))
    resolved = resolved.replace(percentRegEx, "%25");
  if (!isWindows && resolved.includes("\\")) {
    resolved = resolved.replace(backslashRegEx, "%5C");
  }
  if (resolved.includes("\n"))
    resolved = resolved.replace(newlineRegEx, "%0A");
  if (resolved.includes("\r")) {
    resolved = resolved.replace(carriageReturnRegEx, "%0D");
  }
  if (resolved.includes("	"))
    resolved = resolved.replace(tabRegEx, "%09");
  outURL.pathname = resolved;
  return outURL;
}
var h7, e10, a7, o8, n8, i7, l7, p7, c7, u7, f8, m5, v5, g4, y5, b4, exports7, _dewExec7, path, processPlatform$1, CHAR_BACKWARD_SLASH$1, CHAR_FORWARD_SLASH$1, CHAR_LOWERCASE_A$1, CHAR_LOWERCASE_Z$1, isWindows$1, forwardSlashRegEx$1, percentRegEx$1, backslashRegEx$1, newlineRegEx$1, carriageReturnRegEx$1, tabRegEx$1, processPlatform, Url, format2, resolve, resolveObject, parse, _URL, CHAR_BACKWARD_SLASH, CHAR_FORWARD_SLASH, CHAR_LOWERCASE_A, CHAR_LOWERCASE_Z, isWindows, forwardSlashRegEx, percentRegEx, backslashRegEx, newlineRegEx, carriageReturnRegEx, tabRegEx;
var init_url = __esm({
  "../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/url.js"() {
    init_dirname();
    init_buffer2();
    init_process2();
    init_chunk_924bb2e1();
    init_chunk_b04e620d();
    init_chunk_5decc758();
    init_chunk_23dbec7b();
    init_chunk_2eac56ff();
    h7 = {};
    e10 = p6;
    a7 = { isString: function(t8) {
      return "string" == typeof t8;
    }, isObject: function(t8) {
      return "object" == typeof t8 && null !== t8;
    }, isNull: function(t8) {
      return null === t8;
    }, isNullOrUndefined: function(t8) {
      return null == t8;
    } };
    h7.parse = O4, h7.resolve = function(t8, s7) {
      return O4(t8, false, true).resolve(s7);
    }, h7.resolveObject = function(t8, s7) {
      return t8 ? O4(t8, false, true).resolveObject(s7) : s7;
    }, h7.format = function(t8) {
      a7.isString(t8) && (t8 = O4(t8));
      return t8 instanceof r8 ? t8.format() : r8.prototype.format.call(t8);
    }, h7.Url = r8;
    o8 = /^([a-z0-9.+-]+:)/i;
    n8 = /:[0-9]*$/;
    i7 = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/;
    l7 = ["{", "}", "|", "\\", "^", "`"].concat(["<", ">", '"', "`", " ", "\r", "\n", "	"]);
    p7 = ["'"].concat(l7);
    c7 = ["%", "/", "?", ";", "#"].concat(p7);
    u7 = ["/", "?", "#"];
    f8 = /^[+a-z0-9A-Z_-]{0,63}$/;
    m5 = /^([+a-z0-9A-Z_-]{0,63})(.*)$/;
    v5 = { javascript: true, "javascript:": true };
    g4 = { javascript: true, "javascript:": true };
    y5 = { http: true, https: true, ftp: true, gopher: true, file: true, "http:": true, "https:": true, "ftp:": true, "gopher:": true, "file:": true };
    b4 = o7;
    r8.prototype.parse = function(t8, s7, h8) {
      if (!a7.isString(t8))
        throw new TypeError("Parameter 'url' must be a string, not " + typeof t8);
      var r9 = t8.indexOf("?"), n9 = -1 !== r9 && r9 < t8.indexOf("#") ? "?" : "#", l8 = t8.split(n9);
      l8[0] = l8[0].replace(/\\/g, "/");
      var O5 = t8 = l8.join(n9);
      if (O5 = O5.trim(), !h8 && 1 === t8.split("#").length) {
        var d6 = i7.exec(O5);
        if (d6)
          return this.path = O5, this.href = O5, this.pathname = d6[1], d6[2] ? (this.search = d6[2], this.query = s7 ? b4.parse(this.search.substr(1)) : this.search.substr(1)) : s7 && (this.search = "", this.query = {}), this;
      }
      var j4 = o8.exec(O5);
      if (j4) {
        var q3 = (j4 = j4[0]).toLowerCase();
        this.protocol = q3, O5 = O5.substr(j4.length);
      }
      if (h8 || j4 || O5.match(/^\/\/[^@\/]+@[^@\/]+/)) {
        var x4 = "//" === O5.substr(0, 2);
        !x4 || j4 && g4[j4] || (O5 = O5.substr(2), this.slashes = true);
      }
      if (!g4[j4] && (x4 || j4 && !y5[j4])) {
        for (var A4, C4, I4 = -1, w4 = 0; w4 < u7.length; w4++) {
          -1 !== (N4 = O5.indexOf(u7[w4])) && (-1 === I4 || N4 < I4) && (I4 = N4);
        }
        -1 !== (C4 = -1 === I4 ? O5.lastIndexOf("@") : O5.lastIndexOf("@", I4)) && (A4 = O5.slice(0, C4), O5 = O5.slice(C4 + 1), this.auth = decodeURIComponent(A4)), I4 = -1;
        for (w4 = 0; w4 < c7.length; w4++) {
          var N4;
          -1 !== (N4 = O5.indexOf(c7[w4])) && (-1 === I4 || N4 < I4) && (I4 = N4);
        }
        -1 === I4 && (I4 = O5.length), this.host = O5.slice(0, I4), O5 = O5.slice(I4), this.parseHost(), this.hostname = this.hostname || "";
        var U4 = "[" === this.hostname[0] && "]" === this.hostname[this.hostname.length - 1];
        if (!U4)
          for (var k4 = this.hostname.split(/\./), S4 = (w4 = 0, k4.length); w4 < S4; w4++) {
            var R4 = k4[w4];
            if (R4 && !R4.match(f8)) {
              for (var $3 = "", z5 = 0, H3 = R4.length; z5 < H3; z5++)
                R4.charCodeAt(z5) > 127 ? $3 += "x" : $3 += R4[z5];
              if (!$3.match(f8)) {
                var L4 = k4.slice(0, w4), Z3 = k4.slice(w4 + 1), _4 = R4.match(m5);
                _4 && (L4.push(_4[1]), Z3.unshift(_4[2])), Z3.length && (O5 = "/" + Z3.join(".") + O5), this.hostname = L4.join(".");
                break;
              }
            }
          }
        this.hostname.length > 255 ? this.hostname = "" : this.hostname = this.hostname.toLowerCase(), U4 || (this.hostname = e10.toASCII(this.hostname));
        var E4 = this.port ? ":" + this.port : "", P4 = this.hostname || "";
        this.host = P4 + E4, this.href += this.host, U4 && (this.hostname = this.hostname.substr(1, this.hostname.length - 2), "/" !== O5[0] && (O5 = "/" + O5));
      }
      if (!v5[q3])
        for (w4 = 0, S4 = p7.length; w4 < S4; w4++) {
          var T5 = p7[w4];
          if (-1 !== O5.indexOf(T5)) {
            var B4 = encodeURIComponent(T5);
            B4 === T5 && (B4 = escape(T5)), O5 = O5.split(T5).join(B4);
          }
        }
      var D4 = O5.indexOf("#");
      -1 !== D4 && (this.hash = O5.substr(D4), O5 = O5.slice(0, D4));
      var F4 = O5.indexOf("?");
      if (-1 !== F4 ? (this.search = O5.substr(F4), this.query = O5.substr(F4 + 1), s7 && (this.query = b4.parse(this.query)), O5 = O5.slice(0, F4)) : s7 && (this.search = "", this.query = {}), O5 && (this.pathname = O5), y5[q3] && this.hostname && !this.pathname && (this.pathname = "/"), this.pathname || this.search) {
        E4 = this.pathname || "";
        var G3 = this.search || "";
        this.path = E4 + G3;
      }
      return this.href = this.format(), this;
    }, r8.prototype.format = function() {
      var t8 = this.auth || "";
      t8 && (t8 = (t8 = encodeURIComponent(t8)).replace(/%3A/i, ":"), t8 += "@");
      var s7 = this.protocol || "", h8 = this.pathname || "", e11 = this.hash || "", r9 = false, o9 = "";
      this.host ? r9 = t8 + this.host : this.hostname && (r9 = t8 + (-1 === this.hostname.indexOf(":") ? this.hostname : "[" + this.hostname + "]"), this.port && (r9 += ":" + this.port)), this.query && a7.isObject(this.query) && Object.keys(this.query).length && (o9 = b4.stringify(this.query));
      var n9 = this.search || o9 && "?" + o9 || "";
      return s7 && ":" !== s7.substr(-1) && (s7 += ":"), this.slashes || (!s7 || y5[s7]) && false !== r9 ? (r9 = "//" + (r9 || ""), h8 && "/" !== h8.charAt(0) && (h8 = "/" + h8)) : r9 || (r9 = ""), e11 && "#" !== e11.charAt(0) && (e11 = "#" + e11), n9 && "?" !== n9.charAt(0) && (n9 = "?" + n9), s7 + r9 + (h8 = h8.replace(/[?#]/g, function(t9) {
        return encodeURIComponent(t9);
      })) + (n9 = n9.replace("#", "%23")) + e11;
    }, r8.prototype.resolve = function(t8) {
      return this.resolveObject(O4(t8, false, true)).format();
    }, r8.prototype.resolveObject = function(t8) {
      if (a7.isString(t8)) {
        var s7 = new r8();
        s7.parse(t8, false, true), t8 = s7;
      }
      for (var h8 = new r8(), e11 = Object.keys(this), o9 = 0; o9 < e11.length; o9++) {
        var n9 = e11[o9];
        h8[n9] = this[n9];
      }
      if (h8.hash = t8.hash, "" === t8.href)
        return h8.href = h8.format(), h8;
      if (t8.slashes && !t8.protocol) {
        for (var i8 = Object.keys(t8), l8 = 0; l8 < i8.length; l8++) {
          var p8 = i8[l8];
          "protocol" !== p8 && (h8[p8] = t8[p8]);
        }
        return y5[h8.protocol] && h8.hostname && !h8.pathname && (h8.path = h8.pathname = "/"), h8.href = h8.format(), h8;
      }
      if (t8.protocol && t8.protocol !== h8.protocol) {
        if (!y5[t8.protocol]) {
          for (var c8 = Object.keys(t8), u8 = 0; u8 < c8.length; u8++) {
            var f9 = c8[u8];
            h8[f9] = t8[f9];
          }
          return h8.href = h8.format(), h8;
        }
        if (h8.protocol = t8.protocol, t8.host || g4[t8.protocol])
          h8.pathname = t8.pathname;
        else {
          for (var m6 = (t8.pathname || "").split("/"); m6.length && !(t8.host = m6.shift()); )
            ;
          t8.host || (t8.host = ""), t8.hostname || (t8.hostname = ""), "" !== m6[0] && m6.unshift(""), m6.length < 2 && m6.unshift(""), h8.pathname = m6.join("/");
        }
        if (h8.search = t8.search, h8.query = t8.query, h8.host = t8.host || "", h8.auth = t8.auth, h8.hostname = t8.hostname || t8.host, h8.port = t8.port, h8.pathname || h8.search) {
          var v6 = h8.pathname || "", b5 = h8.search || "";
          h8.path = v6 + b5;
        }
        return h8.slashes = h8.slashes || t8.slashes, h8.href = h8.format(), h8;
      }
      var O5 = h8.pathname && "/" === h8.pathname.charAt(0), d6 = t8.host || t8.pathname && "/" === t8.pathname.charAt(0), j4 = d6 || O5 || h8.host && t8.pathname, q3 = j4, x4 = h8.pathname && h8.pathname.split("/") || [], A4 = (m6 = t8.pathname && t8.pathname.split("/") || [], h8.protocol && !y5[h8.protocol]);
      if (A4 && (h8.hostname = "", h8.port = null, h8.host && ("" === x4[0] ? x4[0] = h8.host : x4.unshift(h8.host)), h8.host = "", t8.protocol && (t8.hostname = null, t8.port = null, t8.host && ("" === m6[0] ? m6[0] = t8.host : m6.unshift(t8.host)), t8.host = null), j4 = j4 && ("" === m6[0] || "" === x4[0])), d6)
        h8.host = t8.host || "" === t8.host ? t8.host : h8.host, h8.hostname = t8.hostname || "" === t8.hostname ? t8.hostname : h8.hostname, h8.search = t8.search, h8.query = t8.query, x4 = m6;
      else if (m6.length)
        x4 || (x4 = []), x4.pop(), x4 = x4.concat(m6), h8.search = t8.search, h8.query = t8.query;
      else if (!a7.isNullOrUndefined(t8.search)) {
        if (A4)
          h8.hostname = h8.host = x4.shift(), (U4 = !!(h8.host && h8.host.indexOf("@") > 0) && h8.host.split("@")) && (h8.auth = U4.shift(), h8.host = h8.hostname = U4.shift());
        return h8.search = t8.search, h8.query = t8.query, a7.isNull(h8.pathname) && a7.isNull(h8.search) || (h8.path = (h8.pathname ? h8.pathname : "") + (h8.search ? h8.search : "")), h8.href = h8.format(), h8;
      }
      if (!x4.length)
        return h8.pathname = null, h8.search ? h8.path = "/" + h8.search : h8.path = null, h8.href = h8.format(), h8;
      for (var C4 = x4.slice(-1)[0], I4 = (h8.host || t8.host || x4.length > 1) && ("." === C4 || ".." === C4) || "" === C4, w4 = 0, N4 = x4.length; N4 >= 0; N4--)
        "." === (C4 = x4[N4]) ? x4.splice(N4, 1) : ".." === C4 ? (x4.splice(N4, 1), w4++) : w4 && (x4.splice(N4, 1), w4--);
      if (!j4 && !q3)
        for (; w4--; w4)
          x4.unshift("..");
      !j4 || "" === x4[0] || x4[0] && "/" === x4[0].charAt(0) || x4.unshift(""), I4 && "/" !== x4.join("/").substr(-1) && x4.push("");
      var U4, k4 = "" === x4[0] || x4[0] && "/" === x4[0].charAt(0);
      A4 && (h8.hostname = h8.host = k4 ? "" : x4.length ? x4.shift() : "", (U4 = !!(h8.host && h8.host.indexOf("@") > 0) && h8.host.split("@")) && (h8.auth = U4.shift(), h8.host = h8.hostname = U4.shift()));
      return (j4 = j4 || h8.host && x4.length) && !k4 && x4.unshift(""), x4.length ? h8.pathname = x4.join("/") : (h8.pathname = null, h8.path = null), a7.isNull(h8.pathname) && a7.isNull(h8.search) || (h8.path = (h8.pathname ? h8.pathname : "") + (h8.search ? h8.search : "")), h8.auth = t8.auth || h8.auth, h8.slashes = h8.slashes || t8.slashes, h8.href = h8.format(), h8;
    }, r8.prototype.parseHost = function() {
      var t8 = this.host, s7 = n8.exec(t8);
      s7 && (":" !== (s7 = s7[0]) && (this.port = s7.substr(1)), t8 = t8.substr(0, t8.length - s7.length)), t8 && (this.hostname = t8);
    };
    h7.Url;
    h7.format;
    h7.resolve;
    h7.resolveObject;
    exports7 = {};
    _dewExec7 = false;
    path = dew7();
    processPlatform$1 = typeof Deno !== "undefined" ? Deno.build.os === "windows" ? "win32" : Deno.build.os : void 0;
    h7.URL = typeof URL !== "undefined" ? URL : null;
    h7.pathToFileURL = pathToFileURL$1;
    h7.fileURLToPath = fileURLToPath$1;
    h7.Url;
    h7.format;
    h7.resolve;
    h7.resolveObject;
    h7.URL;
    CHAR_BACKWARD_SLASH$1 = 92;
    CHAR_FORWARD_SLASH$1 = 47;
    CHAR_LOWERCASE_A$1 = 97;
    CHAR_LOWERCASE_Z$1 = 122;
    isWindows$1 = processPlatform$1 === "win32";
    forwardSlashRegEx$1 = /\//g;
    percentRegEx$1 = /%/g;
    backslashRegEx$1 = /\\/g;
    newlineRegEx$1 = /\n/g;
    carriageReturnRegEx$1 = /\r/g;
    tabRegEx$1 = /\t/g;
    processPlatform = typeof Deno !== "undefined" ? Deno.build.os === "windows" ? "win32" : Deno.build.os : void 0;
    h7.URL = typeof URL !== "undefined" ? URL : null;
    h7.pathToFileURL = pathToFileURL;
    h7.fileURLToPath = fileURLToPath;
    Url = h7.Url;
    format2 = h7.format;
    resolve = h7.resolve;
    resolveObject = h7.resolveObject;
    parse = h7.parse;
    _URL = h7.URL;
    CHAR_BACKWARD_SLASH = 92;
    CHAR_FORWARD_SLASH = 47;
    CHAR_LOWERCASE_A = 97;
    CHAR_LOWERCASE_Z = 122;
    isWindows = processPlatform === "win32";
    forwardSlashRegEx = /\//g;
    percentRegEx = /%/g;
    backslashRegEx = /\\/g;
    newlineRegEx = /\n/g;
    carriageReturnRegEx = /\r/g;
    tabRegEx = /\t/g;
  }
});

// ../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/events.js
var events_exports = {};
__export(events_exports, {
  EventEmitter: () => EventEmitter2,
  default: () => y,
  defaultMaxListeners: () => defaultMaxListeners,
  init: () => init,
  listenerCount: () => listenerCount,
  on: () => on2,
  once: () => once2
});
var EventEmitter2, defaultMaxListeners, init, listenerCount, on2, once2;
var init_events = __esm({
  "../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/events.js"() {
    init_dirname();
    init_buffer2();
    init_process2();
    init_chunk_4bd36a8f();
    init_chunk_4bd36a8f();
    y.once = function(emitter, event) {
      return new Promise((resolve2, reject) => {
        function eventListener(...args) {
          if (errorListener !== void 0) {
            emitter.removeListener("error", errorListener);
          }
          resolve2(args);
        }
        let errorListener;
        if (event !== "error") {
          errorListener = (err) => {
            emitter.removeListener(name, eventListener);
            reject(err);
          };
          emitter.once("error", errorListener);
        }
        emitter.once(event, eventListener);
      });
    };
    y.on = function(emitter, event) {
      const unconsumedEventValues = [];
      const unconsumedPromises = [];
      let error = null;
      let finished2 = false;
      const iterator = {
        async next() {
          const value = unconsumedEventValues.shift();
          if (value) {
            return createIterResult(value, false);
          }
          if (error) {
            const p8 = Promise.reject(error);
            error = null;
            return p8;
          }
          if (finished2) {
            return createIterResult(void 0, true);
          }
          return new Promise((resolve2, reject) => unconsumedPromises.push({ resolve: resolve2, reject }));
        },
        async return() {
          emitter.removeListener(event, eventHandler);
          emitter.removeListener("error", errorHandler);
          finished2 = true;
          for (const promise of unconsumedPromises) {
            promise.resolve(createIterResult(void 0, true));
          }
          return createIterResult(void 0, true);
        },
        throw(err) {
          error = err;
          emitter.removeListener(event, eventHandler);
          emitter.removeListener("error", errorHandler);
        },
        [Symbol.asyncIterator]() {
          return this;
        }
      };
      emitter.on(event, eventHandler);
      emitter.on("error", errorHandler);
      return iterator;
      function eventHandler(...args) {
        const promise = unconsumedPromises.shift();
        if (promise) {
          promise.resolve(createIterResult(args, false));
        } else {
          unconsumedEventValues.push(args);
        }
      }
      function errorHandler(err) {
        finished2 = true;
        const toError = unconsumedPromises.shift();
        if (toError) {
          toError.reject(err);
        } else {
          error = err;
        }
        iterator.return();
      }
    };
    ({
      EventEmitter: EventEmitter2,
      defaultMaxListeners,
      init,
      listenerCount,
      on: on2,
      once: once2
    } = y);
  }
});

// ../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/http.js
var http_exports = {};
__export(http_exports, {
  Agent: () => Agent,
  ClientRequest: () => ClientRequest,
  IncomingMessage: () => IncomingMessage,
  METHODS: () => METHODS,
  STATUS_CODES: () => STATUS_CODES,
  default: () => exports8,
  get: () => get,
  globalAgent: () => globalAgent,
  request: () => request
});
function dew$53() {
  if (_dewExec$53)
    return exports$63;
  _dewExec$53 = true;
  exports$63.fetch = isFunction4(_global$32.fetch) && isFunction4(_global$32.ReadableStream);
  exports$63.writableStream = isFunction4(_global$32.WritableStream);
  exports$63.abortController = isFunction4(_global$32.AbortController);
  var xhr;
  function getXHR() {
    if (xhr !== void 0)
      return xhr;
    if (_global$32.XMLHttpRequest) {
      xhr = new _global$32.XMLHttpRequest();
      try {
        xhr.open("GET", _global$32.XDomainRequest ? "/" : "https://example.com");
      } catch (e11) {
        xhr = null;
      }
    } else {
      xhr = null;
    }
    return xhr;
  }
  function checkTypeSupport(type) {
    var xhr2 = getXHR();
    if (!xhr2)
      return false;
    try {
      xhr2.responseType = type;
      return xhr2.responseType === type;
    } catch (e11) {
    }
    return false;
  }
  exports$63.arraybuffer = exports$63.fetch || checkTypeSupport("arraybuffer");
  exports$63.msstream = !exports$63.fetch && checkTypeSupport("ms-stream");
  exports$63.mozchunkedarraybuffer = !exports$63.fetch && checkTypeSupport("moz-chunked-arraybuffer");
  exports$63.overrideMimeType = exports$63.fetch || (getXHR() ? isFunction4(getXHR().overrideMimeType) : false);
  function isFunction4(value) {
    return typeof value === "function";
  }
  xhr = null;
  return exports$63;
}
function dew$43() {
  if (_dewExec$43)
    return exports$53;
  _dewExec$43 = true;
  var Buffer3 = buffer.Buffer;
  var process$1 = process2;
  var capability = dew$53();
  var inherits4 = dew$f();
  var stream2 = dew4();
  var rStates = exports$53.readyStates = {
    UNSENT: 0,
    OPENED: 1,
    HEADERS_RECEIVED: 2,
    LOADING: 3,
    DONE: 4
  };
  var IncomingMessage3 = exports$53.IncomingMessage = function(xhr, response, mode, resetTimers) {
    var self2 = this || _global$23;
    stream2.Readable.call(self2);
    self2._mode = mode;
    self2.headers = {};
    self2.rawHeaders = [];
    self2.trailers = {};
    self2.rawTrailers = [];
    self2.on("end", function() {
      process$1.nextTick(function() {
        self2.emit("close");
      });
    });
    if (mode === "fetch") {
      let read = function() {
        reader.read().then(function(result) {
          if (self2._destroyed)
            return;
          resetTimers(result.done);
          if (result.done) {
            self2.push(null);
            return;
          }
          self2.push(Buffer3.from(result.value));
          read();
        }).catch(function(err) {
          resetTimers(true);
          if (!self2._destroyed)
            self2.emit("error", err);
        });
      };
      self2._fetchResponse = response;
      self2.url = response.url;
      self2.statusCode = response.status;
      self2.statusMessage = response.statusText;
      response.headers.forEach(function(header, key) {
        self2.headers[key.toLowerCase()] = header;
        self2.rawHeaders.push(key, header);
      });
      if (capability.writableStream) {
        var writable = new WritableStream({
          write: function(chunk) {
            resetTimers(false);
            return new Promise(function(resolve2, reject) {
              if (self2._destroyed) {
                reject();
              } else if (self2.push(Buffer3.from(chunk))) {
                resolve2();
              } else {
                self2._resumeFetch = resolve2;
              }
            });
          },
          close: function() {
            resetTimers(true);
            if (!self2._destroyed)
              self2.push(null);
          },
          abort: function(err) {
            resetTimers(true);
            if (!self2._destroyed)
              self2.emit("error", err);
          }
        });
        try {
          response.body.pipeTo(writable).catch(function(err) {
            resetTimers(true);
            if (!self2._destroyed)
              self2.emit("error", err);
          });
          return;
        } catch (e11) {
        }
      }
      var reader = response.body.getReader();
      read();
    } else {
      self2._xhr = xhr;
      self2._pos = 0;
      self2.url = xhr.responseURL;
      self2.statusCode = xhr.status;
      self2.statusMessage = xhr.statusText;
      var headers = xhr.getAllResponseHeaders().split(/\r?\n/);
      headers.forEach(function(header) {
        var matches = header.match(/^([^:]+):\s*(.*)/);
        if (matches) {
          var key = matches[1].toLowerCase();
          if (key === "set-cookie") {
            if (self2.headers[key] === void 0) {
              self2.headers[key] = [];
            }
            self2.headers[key].push(matches[2]);
          } else if (self2.headers[key] !== void 0) {
            self2.headers[key] += ", " + matches[2];
          } else {
            self2.headers[key] = matches[2];
          }
          self2.rawHeaders.push(matches[1], matches[2]);
        }
      });
      self2._charset = "x-user-defined";
      if (!capability.overrideMimeType) {
        var mimeType = self2.rawHeaders["mime-type"];
        if (mimeType) {
          var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/);
          if (charsetMatch) {
            self2._charset = charsetMatch[1].toLowerCase();
          }
        }
        if (!self2._charset)
          self2._charset = "utf-8";
      }
    }
  };
  inherits4(IncomingMessage3, stream2.Readable);
  IncomingMessage3.prototype._read = function() {
    var self2 = this || _global$23;
    var resolve2 = self2._resumeFetch;
    if (resolve2) {
      self2._resumeFetch = null;
      resolve2();
    }
  };
  IncomingMessage3.prototype._onXHRProgress = function(resetTimers) {
    var self2 = this || _global$23;
    var xhr = self2._xhr;
    var response = null;
    switch (self2._mode) {
      case "text":
        response = xhr.responseText;
        if (response.length > self2._pos) {
          var newData = response.substr(self2._pos);
          if (self2._charset === "x-user-defined") {
            var buffer2 = Buffer3.alloc(newData.length);
            for (var i8 = 0; i8 < newData.length; i8++)
              buffer2[i8] = newData.charCodeAt(i8) & 255;
            self2.push(buffer2);
          } else {
            self2.push(newData, self2._charset);
          }
          self2._pos = response.length;
        }
        break;
      case "arraybuffer":
        if (xhr.readyState !== rStates.DONE || !xhr.response)
          break;
        response = xhr.response;
        self2.push(Buffer3.from(new Uint8Array(response)));
        break;
      case "moz-chunked-arraybuffer":
        response = xhr.response;
        if (xhr.readyState !== rStates.LOADING || !response)
          break;
        self2.push(Buffer3.from(new Uint8Array(response)));
        break;
      case "ms-stream":
        response = xhr.response;
        if (xhr.readyState !== rStates.LOADING)
          break;
        var reader = new _global$23.MSStreamReader();
        reader.onprogress = function() {
          if (reader.result.byteLength > self2._pos) {
            self2.push(Buffer3.from(new Uint8Array(reader.result.slice(self2._pos))));
            self2._pos = reader.result.byteLength;
          }
        };
        reader.onload = function() {
          resetTimers(true);
          self2.push(null);
        };
        reader.readAsArrayBuffer(response);
        break;
    }
    if (self2._xhr.readyState === rStates.DONE && self2._mode !== "ms-stream") {
      resetTimers(true);
      self2.push(null);
    }
  };
  return exports$53;
}
function dew$33() {
  if (_dewExec$33)
    return exports$43;
  _dewExec$33 = true;
  var Buffer3 = buffer.Buffer;
  var process$1 = process2;
  var capability = dew$53();
  var inherits4 = dew$f();
  var response = dew$43();
  var stream2 = dew4();
  var IncomingMessage3 = response.IncomingMessage;
  var rStates = response.readyStates;
  function decideMode(preferBinary, useFetch) {
    if (capability.fetch && useFetch) {
      return "fetch";
    } else if (capability.mozchunkedarraybuffer) {
      return "moz-chunked-arraybuffer";
    } else if (capability.msstream) {
      return "ms-stream";
    } else if (capability.arraybuffer && preferBinary) {
      return "arraybuffer";
    } else {
      return "text";
    }
  }
  var ClientRequest3 = exports$43 = function(opts) {
    var self2 = this || _global$13;
    stream2.Writable.call(self2);
    self2._opts = opts;
    self2._body = [];
    self2._headers = {};
    if (opts.auth)
      self2.setHeader("Authorization", "Basic " + Buffer3.from(opts.auth).toString("base64"));
    Object.keys(opts.headers).forEach(function(name2) {
      self2.setHeader(name2, opts.headers[name2]);
    });
    var preferBinary;
    var useFetch = true;
    if (opts.mode === "disable-fetch" || "requestTimeout" in opts && !capability.abortController) {
      useFetch = false;
      preferBinary = true;
    } else if (opts.mode === "prefer-streaming") {
      preferBinary = false;
    } else if (opts.mode === "allow-wrong-content-type") {
      preferBinary = !capability.overrideMimeType;
    } else if (!opts.mode || opts.mode === "default" || opts.mode === "prefer-fast") {
      preferBinary = true;
    } else {
      throw new Error("Invalid value for opts.mode");
    }
    self2._mode = decideMode(preferBinary, useFetch);
    self2._fetchTimer = null;
    self2._socketTimeout = null;
    self2._socketTimer = null;
    self2.on("finish", function() {
      self2._onFinish();
    });
  };
  inherits4(ClientRequest3, stream2.Writable);
  ClientRequest3.prototype.setHeader = function(name2, value) {
    var self2 = this || _global$13;
    var lowerName = name2.toLowerCase();
    if (unsafeHeaders.indexOf(lowerName) !== -1)
      return;
    self2._headers[lowerName] = {
      name: name2,
      value
    };
  };
  ClientRequest3.prototype.getHeader = function(name2) {
    var header = (this || _global$13)._headers[name2.toLowerCase()];
    if (header)
      return header.value;
    return null;
  };
  ClientRequest3.prototype.removeHeader = function(name2) {
    var self2 = this || _global$13;
    delete self2._headers[name2.toLowerCase()];
  };
  ClientRequest3.prototype._onFinish = function() {
    var self2 = this || _global$13;
    if (self2._destroyed)
      return;
    var opts = self2._opts;
    if ("timeout" in opts && opts.timeout !== 0) {
      self2.setTimeout(opts.timeout);
    }
    var headersObj = self2._headers;
    var body = null;
    if (opts.method !== "GET" && opts.method !== "HEAD") {
      body = new Blob(self2._body, {
        type: (headersObj["content-type"] || {}).value || ""
      });
    }
    var headersList = [];
    Object.keys(headersObj).forEach(function(keyName) {
      var name2 = headersObj[keyName].name;
      var value = headersObj[keyName].value;
      if (Array.isArray(value)) {
        value.forEach(function(v6) {
          headersList.push([name2, v6]);
        });
      } else {
        headersList.push([name2, value]);
      }
    });
    if (self2._mode === "fetch") {
      var signal = null;
      if (capability.abortController) {
        var controller = new AbortController();
        signal = controller.signal;
        self2._fetchAbortController = controller;
        if ("requestTimeout" in opts && opts.requestTimeout !== 0) {
          self2._fetchTimer = _global$13.setTimeout(function() {
            self2.emit("requestTimeout");
            if (self2._fetchAbortController)
              self2._fetchAbortController.abort();
          }, opts.requestTimeout);
        }
      }
      _global$13.fetch(self2._opts.url, {
        method: self2._opts.method,
        headers: headersList,
        body: body || void 0,
        mode: "cors",
        credentials: opts.withCredentials ? "include" : "same-origin",
        signal
      }).then(function(response2) {
        self2._fetchResponse = response2;
        self2._resetTimers(false);
        self2._connect();
      }, function(reason) {
        self2._resetTimers(true);
        if (!self2._destroyed)
          self2.emit("error", reason);
      });
    } else {
      var xhr = self2._xhr = new _global$13.XMLHttpRequest();
      try {
        xhr.open(self2._opts.method, self2._opts.url, true);
      } catch (err) {
        process$1.nextTick(function() {
          self2.emit("error", err);
        });
        return;
      }
      if ("responseType" in xhr)
        xhr.responseType = self2._mode;
      if ("withCredentials" in xhr)
        xhr.withCredentials = !!opts.withCredentials;
      if (self2._mode === "text" && "overrideMimeType" in xhr)
        xhr.overrideMimeType("text/plain; charset=x-user-defined");
      if ("requestTimeout" in opts) {
        xhr.timeout = opts.requestTimeout;
        xhr.ontimeout = function() {
          self2.emit("requestTimeout");
        };
      }
      headersList.forEach(function(header) {
        xhr.setRequestHeader(header[0], header[1]);
      });
      self2._response = null;
      xhr.onreadystatechange = function() {
        switch (xhr.readyState) {
          case rStates.LOADING:
          case rStates.DONE:
            self2._onXHRProgress();
            break;
        }
      };
      if (self2._mode === "moz-chunked-arraybuffer") {
        xhr.onprogress = function() {
          self2._onXHRProgress();
        };
      }
      xhr.onerror = function() {
        if (self2._destroyed)
          return;
        self2._resetTimers(true);
        self2.emit("error", new Error("XHR error"));
      };
      try {
        xhr.send(body);
      } catch (err) {
        process$1.nextTick(function() {
          self2.emit("error", err);
        });
        return;
      }
    }
  };
  function statusValid(xhr) {
    try {
      var status = xhr.status;
      return status !== null && status !== 0;
    } catch (e11) {
      return false;
    }
  }
  ClientRequest3.prototype._onXHRProgress = function() {
    var self2 = this || _global$13;
    self2._resetTimers(false);
    if (!statusValid(self2._xhr) || self2._destroyed)
      return;
    if (!self2._response)
      self2._connect();
    self2._response._onXHRProgress(self2._resetTimers.bind(self2));
  };
  ClientRequest3.prototype._connect = function() {
    var self2 = this || _global$13;
    if (self2._destroyed)
      return;
    self2._response = new IncomingMessage3(self2._xhr, self2._fetchResponse, self2._mode, self2._resetTimers.bind(self2));
    self2._response.on("error", function(err) {
      self2.emit("error", err);
    });
    self2.emit("response", self2._response);
  };
  ClientRequest3.prototype._write = function(chunk, encoding, cb) {
    var self2 = this || _global$13;
    self2._body.push(chunk);
    cb();
  };
  ClientRequest3.prototype._resetTimers = function(done) {
    var self2 = this || _global$13;
    _global$13.clearTimeout(self2._socketTimer);
    self2._socketTimer = null;
    if (done) {
      _global$13.clearTimeout(self2._fetchTimer);
      self2._fetchTimer = null;
    } else if (self2._socketTimeout) {
      self2._socketTimer = _global$13.setTimeout(function() {
        self2.emit("timeout");
      }, self2._socketTimeout);
    }
  };
  ClientRequest3.prototype.abort = ClientRequest3.prototype.destroy = function(err) {
    var self2 = this || _global$13;
    self2._destroyed = true;
    self2._resetTimers(true);
    if (self2._response)
      self2._response._destroyed = true;
    if (self2._xhr)
      self2._xhr.abort();
    else if (self2._fetchAbortController)
      self2._fetchAbortController.abort();
    if (err)
      self2.emit("error", err);
  };
  ClientRequest3.prototype.end = function(data, encoding, cb) {
    var self2 = this || _global$13;
    if (typeof data === "function") {
      cb = data;
      data = void 0;
    }
    stream2.Writable.prototype.end.call(self2, data, encoding, cb);
  };
  ClientRequest3.prototype.setTimeout = function(timeout, cb) {
    var self2 = this || _global$13;
    if (cb)
      self2.once("timeout", cb);
    self2._socketTimeout = timeout;
    self2._resetTimers(false);
  };
  ClientRequest3.prototype.flushHeaders = function() {
  };
  ClientRequest3.prototype.setNoDelay = function() {
  };
  ClientRequest3.prototype.setSocketKeepAlive = function() {
  };
  var unsafeHeaders = ["accept-charset", "accept-encoding", "access-control-request-headers", "access-control-request-method", "connection", "content-length", "cookie", "cookie2", "date", "dnt", "expect", "host", "keep-alive", "origin", "referer", "te", "trailer", "transfer-encoding", "upgrade", "via"];
  return exports$43;
}
function dew$211() {
  if (_dewExec$211)
    return exports$34;
  _dewExec$211 = true;
  exports$34 = extend2;
  var hasOwnProperty2 = Object.prototype.hasOwnProperty;
  function extend2() {
    var target = {};
    for (var i8 = 0; i8 < arguments.length; i8++) {
      var source = arguments[i8];
      for (var key in source) {
        if (hasOwnProperty2.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  }
  return exports$34;
}
function dew$111() {
  if (_dewExec$111)
    return exports$211;
  _dewExec$111 = true;
  exports$211 = {
    "100": "Continue",
    "101": "Switching Protocols",
    "102": "Processing",
    "200": "OK",
    "201": "Created",
    "202": "Accepted",
    "203": "Non-Authoritative Information",
    "204": "No Content",
    "205": "Reset Content",
    "206": "Partial Content",
    "207": "Multi-Status",
    "208": "Already Reported",
    "226": "IM Used",
    "300": "Multiple Choices",
    "301": "Moved Permanently",
    "302": "Found",
    "303": "See Other",
    "304": "Not Modified",
    "305": "Use Proxy",
    "307": "Temporary Redirect",
    "308": "Permanent Redirect",
    "400": "Bad Request",
    "401": "Unauthorized",
    "402": "Payment Required",
    "403": "Forbidden",
    "404": "Not Found",
    "405": "Method Not Allowed",
    "406": "Not Acceptable",
    "407": "Proxy Authentication Required",
    "408": "Request Timeout",
    "409": "Conflict",
    "410": "Gone",
    "411": "Length Required",
    "412": "Precondition Failed",
    "413": "Payload Too Large",
    "414": "URI Too Long",
    "415": "Unsupported Media Type",
    "416": "Range Not Satisfiable",
    "417": "Expectation Failed",
    "418": "I'm a teapot",
    "421": "Misdirected Request",
    "422": "Unprocessable Entity",
    "423": "Locked",
    "424": "Failed Dependency",
    "425": "Unordered Collection",
    "426": "Upgrade Required",
    "428": "Precondition Required",
    "429": "Too Many Requests",
    "431": "Request Header Fields Too Large",
    "451": "Unavailable For Legal Reasons",
    "500": "Internal Server Error",
    "501": "Not Implemented",
    "502": "Bad Gateway",
    "503": "Service Unavailable",
    "504": "Gateway Timeout",
    "505": "HTTP Version Not Supported",
    "506": "Variant Also Negotiates",
    "507": "Insufficient Storage",
    "508": "Loop Detected",
    "509": "Bandwidth Limit Exceeded",
    "510": "Not Extended",
    "511": "Network Authentication Required"
  };
  return exports$211;
}
function dew8() {
  if (_dewExec8)
    return exports$112;
  _dewExec8 = true;
  var ClientRequest3 = dew$33();
  var response = dew$43();
  var extend2 = dew$211();
  var statusCodes = dew$111();
  var url = h7;
  var http = exports$112;
  http.request = function(opts, cb) {
    if (typeof opts === "string")
      opts = url.parse(opts);
    else
      opts = extend2(opts);
    var defaultProtocol = _global5.location.protocol.search(/^https?:$/) === -1 ? "http:" : "";
    var protocol = opts.protocol || defaultProtocol;
    var host = opts.hostname || opts.host;
    var port = opts.port;
    var path2 = opts.path || "/";
    if (host && host.indexOf(":") !== -1)
      host = "[" + host + "]";
    opts.url = (host ? protocol + "//" + host : "") + (port ? ":" + port : "") + path2;
    opts.method = (opts.method || "GET").toUpperCase();
    opts.headers = opts.headers || {};
    var req = new ClientRequest3(opts);
    if (cb)
      req.on("response", cb);
    return req;
  };
  http.get = function get3(opts, cb) {
    var req = http.request(opts, cb);
    req.end();
    return req;
  };
  http.ClientRequest = ClientRequest3;
  http.IncomingMessage = response.IncomingMessage;
  http.Agent = function() {
  };
  http.Agent.defaultMaxSockets = 4;
  http.globalAgent = new http.Agent();
  http.STATUS_CODES = statusCodes;
  http.METHODS = ["CHECKOUT", "CONNECT", "COPY", "DELETE", "GET", "HEAD", "LOCK", "M-SEARCH", "MERGE", "MKACTIVITY", "MKCOL", "MOVE", "NOTIFY", "OPTIONS", "PATCH", "POST", "PROPFIND", "PROPPATCH", "PURGE", "PUT", "REPORT", "SEARCH", "SUBSCRIBE", "TRACE", "UNLOCK", "UNSUBSCRIBE"];
  return exports$112;
}
var exports$63, _dewExec$53, _global$32, exports$53, _dewExec$43, _global$23, exports$43, _dewExec$33, _global$13, exports$34, _dewExec$211, exports$211, _dewExec$111, exports$112, _dewExec8, _global5, exports8, Agent, ClientRequest, IncomingMessage, METHODS, STATUS_CODES, get, globalAgent, request;
var init_http = __esm({
  "../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/http.js"() {
    init_dirname();
    init_buffer2();
    init_process2();
    init_chunk_44e51b61();
    init_chunk_c3d025d9();
    init_chunk_2eac56ff();
    init_url();
    init_chunk_4bd36a8f();
    init_chunk_ce0fbc82();
    init_chunk_b4205b57();
    init_chunk_5decc758();
    init_chunk_4ccc3a29();
    init_chunk_924bb2e1();
    init_chunk_b04e620d();
    init_chunk_23dbec7b();
    exports$63 = {};
    _dewExec$53 = false;
    _global$32 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$53 = {};
    _dewExec$43 = false;
    _global$23 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$43 = {};
    _dewExec$33 = false;
    _global$13 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports$34 = {};
    _dewExec$211 = false;
    exports$211 = {};
    _dewExec$111 = false;
    exports$112 = {};
    _dewExec8 = false;
    _global5 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports8 = dew8();
    Agent = exports8.Agent;
    ClientRequest = exports8.ClientRequest;
    IncomingMessage = exports8.IncomingMessage;
    METHODS = exports8.METHODS;
    STATUS_CODES = exports8.STATUS_CODES;
    get = exports8.get;
    globalAgent = exports8.globalAgent;
    request = exports8.request;
  }
});

// ../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/https.js
var https_exports = {};
__export(https_exports, {
  Agent: () => Agent2,
  ClientRequest: () => ClientRequest2,
  IncomingMessage: () => IncomingMessage2,
  METHODS: () => METHODS2,
  STATUS_CODES: () => STATUS_CODES2,
  default: () => exports9,
  get: () => get2,
  globalAgent: () => globalAgent2,
  request: () => request2
});
function dew9() {
  if (_dewExec9)
    return exports$113;
  _dewExec9 = true;
  var http = exports8;
  var url = h7;
  var https = exports$113;
  for (var key in http) {
    if (http.hasOwnProperty(key))
      https[key] = http[key];
  }
  https.request = function(params, cb) {
    params = validateParams(params);
    return http.request.call(this || _global6, params, cb);
  };
  https.get = function(params, cb) {
    params = validateParams(params);
    return http.get.call(this || _global6, params, cb);
  };
  function validateParams(params) {
    if (typeof params === "string") {
      params = url.parse(params);
    }
    if (!params.protocol) {
      params.protocol = "https:";
    }
    if (params.protocol !== "https:") {
      throw new Error('Protocol "' + params.protocol + '" not supported. Expected "https:"');
    }
    return params;
  }
  return exports$113;
}
var exports$113, _dewExec9, _global6, exports9, Agent2, ClientRequest2, IncomingMessage2, METHODS2, STATUS_CODES2, get2, globalAgent2, request2;
var init_https = __esm({
  "../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/https.js"() {
    init_dirname();
    init_buffer2();
    init_process2();
    init_http();
    init_url();
    init_chunk_44e51b61();
    init_chunk_4bd36a8f();
    init_chunk_ce0fbc82();
    init_chunk_b4205b57();
    init_chunk_5decc758();
    init_chunk_2eac56ff();
    init_chunk_4ccc3a29();
    init_chunk_c3d025d9();
    init_chunk_924bb2e1();
    init_chunk_b04e620d();
    init_chunk_23dbec7b();
    exports$113 = {};
    _dewExec9 = false;
    _global6 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports9 = dew9();
    Agent2 = exports9.Agent;
    ClientRequest2 = exports9.ClientRequest;
    IncomingMessage2 = exports9.IncomingMessage;
    METHODS2 = exports9.METHODS;
    STATUS_CODES2 = exports9.STATUS_CODES;
    get2 = exports9.get;
    globalAgent2 = exports9.globalAgent;
    request2 = exports9.request;
  }
});

// ../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/util.js
var util_exports = {};
__export(util_exports, {
  TextDecoder: () => TextDecoder2,
  TextEncoder: () => TextEncoder2,
  _extend: () => _extend2,
  callbackify: () => callbackify2,
  debuglog: () => debuglog2,
  default: () => X,
  deprecate: () => deprecate2,
  format: () => format3,
  inherits: () => inherits3,
  inspect: () => inspect2,
  isArray: () => isArray3,
  isBoolean: () => isBoolean3,
  isBuffer: () => isBuffer3,
  isDate: () => isDate3,
  isError: () => isError2,
  isFunction: () => isFunction3,
  isNull: () => isNull2,
  isNullOrUndefined: () => isNullOrUndefined2,
  isNumber: () => isNumber3,
  isObject: () => isObject4,
  isPrimitive: () => isPrimitive2,
  isRegExp: () => isRegExp3,
  isString: () => isString3,
  isSymbol: () => isSymbol2,
  isUndefined: () => isUndefined3,
  log: () => log2,
  promisify: () => promisify2,
  types: () => types2
});
var _extend2, callbackify2, debuglog2, deprecate2, format3, inherits3, inspect2, isArray3, isBoolean3, isBuffer3, isDate3, isError2, isFunction3, isNull2, isNullOrUndefined2, isNumber3, isObject4, isPrimitive2, isRegExp3, isString3, isSymbol2, isUndefined3, log2, promisify2, types2, TextEncoder2, TextDecoder2;
var init_util = __esm({
  "../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/util.js"() {
    init_dirname();
    init_buffer2();
    init_process2();
    init_chunk_ce0fbc82();
    init_chunk_b4205b57();
    init_chunk_b4205b57();
    init_chunk_5decc758();
    _extend2 = X._extend;
    callbackify2 = X.callbackify;
    debuglog2 = X.debuglog;
    deprecate2 = X.deprecate;
    format3 = X.format;
    inherits3 = X.inherits;
    inspect2 = X.inspect;
    isArray3 = X.isArray;
    isBoolean3 = X.isBoolean;
    isBuffer3 = X.isBuffer;
    isDate3 = X.isDate;
    isError2 = X.isError;
    isFunction3 = X.isFunction;
    isNull2 = X.isNull;
    isNullOrUndefined2 = X.isNullOrUndefined;
    isNumber3 = X.isNumber;
    isObject4 = X.isObject;
    isPrimitive2 = X.isPrimitive;
    isRegExp3 = X.isRegExp;
    isString3 = X.isString;
    isSymbol2 = X.isSymbol;
    isUndefined3 = X.isUndefined;
    log2 = X.log;
    promisify2 = X.promisify;
    types2 = X.types;
    TextEncoder2 = X.TextEncoder = globalThis.TextEncoder;
    TextDecoder2 = X.TextDecoder = globalThis.TextDecoder;
  }
});

// ../../node_modules/.pnpm/eventsource@2.0.2/node_modules/eventsource/lib/eventsource.js
var require_eventsource2 = __commonJS({
  "../../node_modules/.pnpm/eventsource@2.0.2/node_modules/eventsource/lib/eventsource.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var parse2 = (init_url(), __toCommonJS(url_exports)).parse;
    var events = (init_events(), __toCommonJS(events_exports));
    var https = (init_https(), __toCommonJS(https_exports));
    var http = (init_http(), __toCommonJS(http_exports));
    var util2 = (init_util(), __toCommonJS(util_exports));
    var httpsOptions = [
      "pfx",
      "key",
      "passphrase",
      "cert",
      "ca",
      "ciphers",
      "rejectUnauthorized",
      "secureProtocol",
      "servername",
      "checkServerIdentity"
    ];
    var bom = [239, 187, 191];
    var colon = 58;
    var space = 32;
    var lineFeed = 10;
    var carriageReturn = 13;
    var maxBufferAheadAllocation = 1024 * 256;
    var reUnsafeHeader = /^(cookie|authorization)$/i;
    function hasBom(buf) {
      return bom.every(function(charCode, index) {
        return buf[index] === charCode;
      });
    }
    function EventSource(url, eventSourceInitDict) {
      var readyState = EventSource.CONNECTING;
      var headers = eventSourceInitDict && eventSourceInitDict.headers;
      var hasNewOrigin = false;
      Object.defineProperty(this, "readyState", {
        get: function() {
          return readyState;
        }
      });
      Object.defineProperty(this, "url", {
        get: function() {
          return url;
        }
      });
      var self2 = this;
      self2.reconnectInterval = 1e3;
      self2.connectionInProgress = false;
      function onConnectionClosed(message) {
        if (readyState === EventSource.CLOSED)
          return;
        readyState = EventSource.CONNECTING;
        _emit("error", new Event("error", { message }));
        if (reconnectUrl) {
          url = reconnectUrl;
          reconnectUrl = null;
          hasNewOrigin = false;
        }
        setTimeout(function() {
          if (readyState !== EventSource.CONNECTING || self2.connectionInProgress) {
            return;
          }
          self2.connectionInProgress = true;
          connect();
        }, self2.reconnectInterval);
      }
      var req;
      var lastEventId = "";
      if (headers && headers["Last-Event-ID"]) {
        lastEventId = headers["Last-Event-ID"];
        delete headers["Last-Event-ID"];
      }
      var discardTrailingNewline = false;
      var data = "";
      var eventName = "";
      var reconnectUrl = null;
      function connect() {
        var options = parse2(url);
        var isSecure = options.protocol === "https:";
        options.headers = { "Cache-Control": "no-cache", "Accept": "text/event-stream" };
        if (lastEventId)
          options.headers["Last-Event-ID"] = lastEventId;
        if (headers) {
          var reqHeaders = hasNewOrigin ? removeUnsafeHeaders(headers) : headers;
          for (var i8 in reqHeaders) {
            var header = reqHeaders[i8];
            if (header) {
              options.headers[i8] = header;
            }
          }
        }
        options.rejectUnauthorized = !(eventSourceInitDict && !eventSourceInitDict.rejectUnauthorized);
        if (eventSourceInitDict && eventSourceInitDict.createConnection !== void 0) {
          options.createConnection = eventSourceInitDict.createConnection;
        }
        var useProxy = eventSourceInitDict && eventSourceInitDict.proxy;
        if (useProxy) {
          var proxy = parse2(eventSourceInitDict.proxy);
          isSecure = proxy.protocol === "https:";
          options.protocol = isSecure ? "https:" : "http:";
          options.path = url;
          options.headers.Host = options.host;
          options.hostname = proxy.hostname;
          options.host = proxy.host;
          options.port = proxy.port;
        }
        if (eventSourceInitDict && eventSourceInitDict.https) {
          for (var optName in eventSourceInitDict.https) {
            if (httpsOptions.indexOf(optName) === -1) {
              continue;
            }
            var option = eventSourceInitDict.https[optName];
            if (option !== void 0) {
              options[optName] = option;
            }
          }
        }
        if (eventSourceInitDict && eventSourceInitDict.withCredentials !== void 0) {
          options.withCredentials = eventSourceInitDict.withCredentials;
        }
        req = (isSecure ? https : http).request(options, function(res) {
          self2.connectionInProgress = false;
          if (res.statusCode === 500 || res.statusCode === 502 || res.statusCode === 503 || res.statusCode === 504) {
            _emit("error", new Event("error", { status: res.statusCode, message: res.statusMessage }));
            onConnectionClosed();
            return;
          }
          if (res.statusCode === 301 || res.statusCode === 302 || res.statusCode === 307) {
            var location = res.headers.location;
            if (!location) {
              _emit("error", new Event("error", { status: res.statusCode, message: res.statusMessage }));
              return;
            }
            var prevOrigin = new URL(url).origin;
            var nextOrigin = new URL(location).origin;
            hasNewOrigin = prevOrigin !== nextOrigin;
            if (res.statusCode === 307)
              reconnectUrl = url;
            url = location;
            process_exports.nextTick(connect);
            return;
          }
          if (res.statusCode !== 200) {
            _emit("error", new Event("error", { status: res.statusCode, message: res.statusMessage }));
            return self2.close();
          }
          readyState = EventSource.OPEN;
          res.on("close", function() {
            res.removeAllListeners("close");
            res.removeAllListeners("end");
            onConnectionClosed();
          });
          res.on("end", function() {
            res.removeAllListeners("close");
            res.removeAllListeners("end");
            onConnectionClosed();
          });
          _emit("open", new Event("open"));
          var buf;
          var newBuffer;
          var startingPos = 0;
          var startingFieldLength = -1;
          var newBufferSize = 0;
          var bytesUsed = 0;
          res.on("data", function(chunk) {
            if (!buf) {
              buf = chunk;
              if (hasBom(buf)) {
                buf = buf.slice(bom.length);
              }
              bytesUsed = buf.length;
            } else {
              if (chunk.length > buf.length - bytesUsed) {
                newBufferSize = buf.length * 2 + chunk.length;
                if (newBufferSize > maxBufferAheadAllocation) {
                  newBufferSize = buf.length + chunk.length + maxBufferAheadAllocation;
                }
                newBuffer = Buffer2.alloc(newBufferSize);
                buf.copy(newBuffer, 0, 0, bytesUsed);
                buf = newBuffer;
              }
              chunk.copy(buf, bytesUsed);
              bytesUsed += chunk.length;
            }
            var pos = 0;
            var length = bytesUsed;
            while (pos < length) {
              if (discardTrailingNewline) {
                if (buf[pos] === lineFeed) {
                  ++pos;
                }
                discardTrailingNewline = false;
              }
              var lineLength = -1;
              var fieldLength = startingFieldLength;
              var c8;
              for (var i9 = startingPos; lineLength < 0 && i9 < length; ++i9) {
                c8 = buf[i9];
                if (c8 === colon) {
                  if (fieldLength < 0) {
                    fieldLength = i9 - pos;
                  }
                } else if (c8 === carriageReturn) {
                  discardTrailingNewline = true;
                  lineLength = i9 - pos;
                } else if (c8 === lineFeed) {
                  lineLength = i9 - pos;
                }
              }
              if (lineLength < 0) {
                startingPos = length - pos;
                startingFieldLength = fieldLength;
                break;
              } else {
                startingPos = 0;
                startingFieldLength = -1;
              }
              parseEventStreamLine(buf, pos, fieldLength, lineLength);
              pos += lineLength + 1;
            }
            if (pos === length) {
              buf = void 0;
              bytesUsed = 0;
            } else if (pos > 0) {
              buf = buf.slice(pos, bytesUsed);
              bytesUsed = buf.length;
            }
          });
        });
        req.on("error", function(err) {
          self2.connectionInProgress = false;
          onConnectionClosed(err.message);
        });
        if (req.setNoDelay)
          req.setNoDelay(true);
        req.end();
      }
      connect();
      function _emit() {
        if (self2.listeners(arguments[0]).length > 0) {
          self2.emit.apply(self2, arguments);
        }
      }
      this._close = function() {
        if (readyState === EventSource.CLOSED)
          return;
        readyState = EventSource.CLOSED;
        if (req.abort)
          req.abort();
        if (req.xhr && req.xhr.abort)
          req.xhr.abort();
      };
      function parseEventStreamLine(buf, pos, fieldLength, lineLength) {
        if (lineLength === 0) {
          if (data.length > 0) {
            var type = eventName || "message";
            _emit(type, new MessageEvent2(type, {
              data: data.slice(0, -1),
              lastEventId,
              origin: new URL(url).origin
            }));
            data = "";
          }
          eventName = void 0;
        } else if (fieldLength > 0) {
          var noValue = fieldLength < 0;
          var step = 0;
          var field = buf.slice(pos, pos + (noValue ? lineLength : fieldLength)).toString();
          if (noValue) {
            step = lineLength;
          } else if (buf[pos + fieldLength + 1] !== space) {
            step = fieldLength + 1;
          } else {
            step = fieldLength + 2;
          }
          pos += step;
          var valueLength = lineLength - step;
          var value = buf.slice(pos, pos + valueLength).toString();
          if (field === "data") {
            data += value + "\n";
          } else if (field === "event") {
            eventName = value;
          } else if (field === "id") {
            lastEventId = value;
          } else if (field === "retry") {
            var retry = parseInt(value, 10);
            if (!Number.isNaN(retry)) {
              self2.reconnectInterval = retry;
            }
          }
        }
      }
    }
    module3.exports = EventSource;
    util2.inherits(EventSource, events.EventEmitter);
    EventSource.prototype.constructor = EventSource;
    ["open", "error", "message"].forEach(function(method) {
      Object.defineProperty(EventSource.prototype, "on" + method, {
        get: function get3() {
          var listener = this.listeners(method)[0];
          return listener ? listener._listener ? listener._listener : listener : void 0;
        },
        set: function set(listener) {
          this.removeAllListeners(method);
          this.addEventListener(method, listener);
        }
      });
    });
    Object.defineProperty(EventSource, "CONNECTING", { enumerable: true, value: 0 });
    Object.defineProperty(EventSource, "OPEN", { enumerable: true, value: 1 });
    Object.defineProperty(EventSource, "CLOSED", { enumerable: true, value: 2 });
    EventSource.prototype.CONNECTING = 0;
    EventSource.prototype.OPEN = 1;
    EventSource.prototype.CLOSED = 2;
    EventSource.prototype.close = function() {
      this._close();
    };
    EventSource.prototype.addEventListener = function addEventListener(type, listener) {
      if (typeof listener === "function") {
        listener._listener = listener;
        this.on(type, listener);
      }
    };
    EventSource.prototype.dispatchEvent = function dispatchEvent(event) {
      if (!event.type) {
        throw new Error("UNSPECIFIED_EVENT_TYPE_ERR");
      }
      this.emit(event.type, event.detail);
    };
    EventSource.prototype.removeEventListener = function removeEventListener(type, listener) {
      if (typeof listener === "function") {
        listener._listener = void 0;
        this.removeListener(type, listener);
      }
    };
    function Event(type, optionalProperties) {
      Object.defineProperty(this, "type", { writable: false, value: type, enumerable: true });
      if (optionalProperties) {
        for (var f9 in optionalProperties) {
          if (optionalProperties.hasOwnProperty(f9)) {
            Object.defineProperty(this, f9, { writable: false, value: optionalProperties[f9], enumerable: true });
          }
        }
      }
    }
    function MessageEvent2(type, eventInitDict) {
      Object.defineProperty(this, "type", { writable: false, value: type, enumerable: true });
      for (var f9 in eventInitDict) {
        if (eventInitDict.hasOwnProperty(f9)) {
          Object.defineProperty(this, f9, { writable: false, value: eventInitDict[f9], enumerable: true });
        }
      }
    }
    function removeUnsafeHeaders(headers) {
      var safe = {};
      for (var key in headers) {
        if (reUnsafeHeader.test(key)) {
          continue;
        }
        safe[key] = headers[key];
      }
      return safe;
    }
  }
});

// ../../node_modules/.pnpm/safe-buffer@5.2.1/node_modules/safe-buffer/index.js
var require_safe_buffer = __commonJS({
  "../../node_modules/.pnpm/safe-buffer@5.2.1/node_modules/safe-buffer/index.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var buffer2 = (init_buffer(), __toCommonJS(buffer_exports));
    var Buffer3 = buffer2.Buffer;
    function copyProps(src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }
    if (Buffer3.from && Buffer3.alloc && Buffer3.allocUnsafe && Buffer3.allocUnsafeSlow) {
      module3.exports = buffer2;
    } else {
      copyProps(buffer2, exports11);
      exports11.Buffer = SafeBuffer;
    }
    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer3(arg, encodingOrOffset, length);
    }
    SafeBuffer.prototype = Object.create(Buffer3.prototype);
    copyProps(Buffer3, SafeBuffer);
    SafeBuffer.from = function(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        throw new TypeError("Argument must not be a number");
      }
      return Buffer3(arg, encodingOrOffset, length);
    };
    SafeBuffer.alloc = function(size, fill, encoding) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      var buf = Buffer3(size);
      if (fill !== void 0) {
        if (typeof encoding === "string") {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf;
    };
    SafeBuffer.allocUnsafe = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return Buffer3(size);
    };
    SafeBuffer.allocUnsafeSlow = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return buffer2.SlowBuffer(size);
    };
  }
});

// ../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/chunk-6c718bbe.js
function dew10() {
  if (_dewExec10)
    return exports$114;
  _dewExec10 = true;
  exports$114 = Stream2;
  var EE = y.EventEmitter;
  var inherits4 = dew$f();
  inherits4(Stream2, EE);
  Stream2.Readable = dew$3();
  Stream2.Writable = dew$8();
  Stream2.Duplex = dew$7();
  Stream2.Transform = dew$22();
  Stream2.PassThrough = dew$12();
  Stream2.finished = dew$6();
  Stream2.pipeline = dew3();
  Stream2.Stream = Stream2;
  function Stream2() {
    EE.call(this || _global7);
  }
  Stream2.prototype.pipe = function(dest, options) {
    var source = this || _global7;
    function ondata(chunk) {
      if (dest.writable) {
        if (false === dest.write(chunk) && source.pause) {
          source.pause();
        }
      }
    }
    source.on("data", ondata);
    function ondrain() {
      if (source.readable && source.resume) {
        source.resume();
      }
    }
    dest.on("drain", ondrain);
    if (!dest._isStdio && (!options || options.end !== false)) {
      source.on("end", onend);
      source.on("close", onclose);
    }
    var didOnEnd = false;
    function onend() {
      if (didOnEnd)
        return;
      didOnEnd = true;
      dest.end();
    }
    function onclose() {
      if (didOnEnd)
        return;
      didOnEnd = true;
      if (typeof dest.destroy === "function")
        dest.destroy();
    }
    function onerror(er) {
      cleanup();
      if (EE.listenerCount(this || _global7, "error") === 0) {
        throw er;
      }
    }
    source.on("error", onerror);
    dest.on("error", onerror);
    function cleanup() {
      source.removeListener("data", ondata);
      dest.removeListener("drain", ondrain);
      source.removeListener("end", onend);
      source.removeListener("close", onclose);
      source.removeListener("error", onerror);
      dest.removeListener("error", onerror);
      source.removeListener("end", cleanup);
      source.removeListener("close", cleanup);
      dest.removeListener("close", cleanup);
    }
    source.on("end", cleanup);
    source.on("close", cleanup);
    dest.on("close", cleanup);
    dest.emit("pipe", source);
    return dest;
  };
  return exports$114;
}
var exports$114, _dewExec10, _global7, exports10;
var init_chunk_6c718bbe = __esm({
  "../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/chunk-6c718bbe.js"() {
    init_dirname();
    init_buffer2();
    init_process2();
    init_events();
    init_chunk_44e51b61();
    init_chunk_4bd36a8f();
    exports$114 = {};
    _dewExec10 = false;
    _global7 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
    exports10 = dew10();
  }
});

// ../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/stream.js
var stream_exports = {};
__export(stream_exports, {
  Duplex: () => Duplex,
  PassThrough: () => PassThrough,
  Readable: () => Readable,
  Stream: () => Stream,
  Transform: () => Transform,
  Writable: () => Writable,
  default: () => exports10,
  finished: () => finished,
  pipeline: () => pipeline,
  promises: () => promises
});
var Readable, Writable, Duplex, Transform, PassThrough, finished, pipeline, Stream, promises;
var init_stream = __esm({
  "../../node_modules/.pnpm/@jspm+core@2.0.1/node_modules/@jspm/core/nodelibs/browser/stream.js"() {
    init_dirname();
    init_buffer2();
    init_process2();
    init_chunk_6c718bbe();
    init_chunk_6c718bbe();
    init_util();
    init_events();
    init_chunk_4bd36a8f();
    init_chunk_44e51b61();
    init_chunk_ce0fbc82();
    init_chunk_b4205b57();
    init_chunk_5decc758();
    init_chunk_2eac56ff();
    init_chunk_4ccc3a29();
    Readable = exports10.Readable;
    Readable.wrap = function(src, options) {
      options = Object.assign({ objectMode: src.readableObjectMode != null || src.objectMode != null || true }, options);
      options.destroy = function(err, callback) {
        src.destroy(err);
        callback(err);
      };
      return new Readable(options).wrap(src);
    };
    Writable = exports10.Writable;
    Duplex = exports10.Duplex;
    Transform = exports10.Transform;
    PassThrough = exports10.PassThrough;
    finished = exports10.finished;
    pipeline = exports10.pipeline;
    Stream = exports10.Stream;
    promises = {
      finished: promisify2(exports10.finished),
      pipeline: promisify2(exports10.pipeline)
    };
  }
});

// ../../node_modules/.pnpm/jws@3.2.2/node_modules/jws/lib/data-stream.js
var require_data_stream = __commonJS({
  "../../node_modules/.pnpm/jws@3.2.2/node_modules/jws/lib/data-stream.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var Buffer3 = require_safe_buffer().Buffer;
    var Stream2 = (init_stream(), __toCommonJS(stream_exports));
    var util2 = (init_util(), __toCommonJS(util_exports));
    function DataStream(data) {
      this.buffer = null;
      this.writable = true;
      this.readable = true;
      if (!data) {
        this.buffer = Buffer3.alloc(0);
        return this;
      }
      if (typeof data.pipe === "function") {
        this.buffer = Buffer3.alloc(0);
        data.pipe(this);
        return this;
      }
      if (data.length || typeof data === "object") {
        this.buffer = data;
        this.writable = false;
        process_exports.nextTick(function() {
          this.emit("end", data);
          this.readable = false;
          this.emit("close");
        }.bind(this));
        return this;
      }
      throw new TypeError("Unexpected data type (" + typeof data + ")");
    }
    util2.inherits(DataStream, Stream2);
    DataStream.prototype.write = function write(data) {
      this.buffer = Buffer3.concat([this.buffer, Buffer3.from(data)]);
      this.emit("data", data);
    };
    DataStream.prototype.end = function end(data) {
      if (data)
        this.write(data);
      this.emit("end", data);
      this.emit("close");
      this.writable = false;
      this.readable = false;
    };
    module3.exports = DataStream;
  }
});

// ../../node_modules/.pnpm/buffer-equal-constant-time@1.0.1/node_modules/buffer-equal-constant-time/index.js
var require_buffer_equal_constant_time = __commonJS({
  "../../node_modules/.pnpm/buffer-equal-constant-time@1.0.1/node_modules/buffer-equal-constant-time/index.js"(exports11, module3) {
    "use strict";
    init_dirname();
    init_buffer2();
    init_process2();
    var Buffer3 = (init_buffer(), __toCommonJS(buffer_exports)).Buffer;
    var SlowBuffer = (init_buffer(), __toCommonJS(buffer_exports)).SlowBuffer;
    module3.exports = bufferEq;
    function bufferEq(a8, b5) {
      if (!Buffer3.isBuffer(a8) || !Buffer3.isBuffer(b5)) {
        return false;
      }
      if (a8.length !== b5.length) {
        return false;
      }
      var c8 = 0;
      for (var i8 = 0; i8 < a8.length; i8++) {
        c8 |= a8[i8] ^ b5[i8];
      }
      return c8 === 0;
    }
    bufferEq.install = function() {
      Buffer3.prototype.equal = SlowBuffer.prototype.equal = function equal(that) {
        return bufferEq(this, that);
      };
    };
    var origBufEqual = Buffer3.prototype.equal;
    var origSlowBufEqual = SlowBuffer.prototype.equal;
    bufferEq.restore = function() {
      Buffer3.prototype.equal = origBufEqual;
      SlowBuffer.prototype.equal = origSlowBufEqual;
    };
  }
});

// ../../node_modules/.pnpm/ecdsa-sig-formatter@1.0.11/node_modules/ecdsa-sig-formatter/src/param-bytes-for-alg.js
var require_param_bytes_for_alg = __commonJS({
  "../../node_modules/.pnpm/ecdsa-sig-formatter@1.0.11/node_modules/ecdsa-sig-formatter/src/param-bytes-for-alg.js"(exports11, module3) {
    "use strict";
    init_dirname();
    init_buffer2();
    init_process2();
    function getParamSize(keySize) {
      var result = (keySize / 8 | 0) + (keySize % 8 === 0 ? 0 : 1);
      return result;
    }
    var paramBytesForAlg = {
      ES256: getParamSize(256),
      ES384: getParamSize(384),
      ES512: getParamSize(521)
    };
    function getParamBytesForAlg(alg) {
      var paramBytes = paramBytesForAlg[alg];
      if (paramBytes) {
        return paramBytes;
      }
      throw new Error('Unknown algorithm "' + alg + '"');
    }
    module3.exports = getParamBytesForAlg;
  }
});

// ../../node_modules/.pnpm/ecdsa-sig-formatter@1.0.11/node_modules/ecdsa-sig-formatter/src/ecdsa-sig-formatter.js
var require_ecdsa_sig_formatter = __commonJS({
  "../../node_modules/.pnpm/ecdsa-sig-formatter@1.0.11/node_modules/ecdsa-sig-formatter/src/ecdsa-sig-formatter.js"(exports11, module3) {
    "use strict";
    init_dirname();
    init_buffer2();
    init_process2();
    var Buffer3 = require_safe_buffer().Buffer;
    var getParamBytesForAlg = require_param_bytes_for_alg();
    var MAX_OCTET = 128;
    var CLASS_UNIVERSAL = 0;
    var PRIMITIVE_BIT = 32;
    var TAG_SEQ = 16;
    var TAG_INT = 2;
    var ENCODED_TAG_SEQ = TAG_SEQ | PRIMITIVE_BIT | CLASS_UNIVERSAL << 6;
    var ENCODED_TAG_INT = TAG_INT | CLASS_UNIVERSAL << 6;
    function base64Url(base64) {
      return base64.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
    }
    function signatureAsBuffer(signature) {
      if (Buffer3.isBuffer(signature)) {
        return signature;
      } else if ("string" === typeof signature) {
        return Buffer3.from(signature, "base64");
      }
      throw new TypeError("ECDSA signature must be a Base64 string or a Buffer");
    }
    function derToJose(signature, alg) {
      signature = signatureAsBuffer(signature);
      var paramBytes = getParamBytesForAlg(alg);
      var maxEncodedParamLength = paramBytes + 1;
      var inputLength = signature.length;
      var offset = 0;
      if (signature[offset++] !== ENCODED_TAG_SEQ) {
        throw new Error('Could not find expected "seq"');
      }
      var seqLength = signature[offset++];
      if (seqLength === (MAX_OCTET | 1)) {
        seqLength = signature[offset++];
      }
      if (inputLength - offset < seqLength) {
        throw new Error('"seq" specified length of "' + seqLength + '", only "' + (inputLength - offset) + '" remaining');
      }
      if (signature[offset++] !== ENCODED_TAG_INT) {
        throw new Error('Could not find expected "int" for "r"');
      }
      var rLength = signature[offset++];
      if (inputLength - offset - 2 < rLength) {
        throw new Error('"r" specified length of "' + rLength + '", only "' + (inputLength - offset - 2) + '" available');
      }
      if (maxEncodedParamLength < rLength) {
        throw new Error('"r" specified length of "' + rLength + '", max of "' + maxEncodedParamLength + '" is acceptable');
      }
      var rOffset = offset;
      offset += rLength;
      if (signature[offset++] !== ENCODED_TAG_INT) {
        throw new Error('Could not find expected "int" for "s"');
      }
      var sLength = signature[offset++];
      if (inputLength - offset !== sLength) {
        throw new Error('"s" specified length of "' + sLength + '", expected "' + (inputLength - offset) + '"');
      }
      if (maxEncodedParamLength < sLength) {
        throw new Error('"s" specified length of "' + sLength + '", max of "' + maxEncodedParamLength + '" is acceptable');
      }
      var sOffset = offset;
      offset += sLength;
      if (offset !== inputLength) {
        throw new Error('Expected to consume entire buffer, but "' + (inputLength - offset) + '" bytes remain');
      }
      var rPadding = paramBytes - rLength, sPadding = paramBytes - sLength;
      var dst = Buffer3.allocUnsafe(rPadding + rLength + sPadding + sLength);
      for (offset = 0; offset < rPadding; ++offset) {
        dst[offset] = 0;
      }
      signature.copy(dst, offset, rOffset + Math.max(-rPadding, 0), rOffset + rLength);
      offset = paramBytes;
      for (var o9 = offset; offset < o9 + sPadding; ++offset) {
        dst[offset] = 0;
      }
      signature.copy(dst, offset, sOffset + Math.max(-sPadding, 0), sOffset + sLength);
      dst = dst.toString("base64");
      dst = base64Url(dst);
      return dst;
    }
    function countPadding(buf, start, stop) {
      var padding = 0;
      while (start + padding < stop && buf[start + padding] === 0) {
        ++padding;
      }
      var needsSign = buf[start + padding] >= MAX_OCTET;
      if (needsSign) {
        --padding;
      }
      return padding;
    }
    function joseToDer(signature, alg) {
      signature = signatureAsBuffer(signature);
      var paramBytes = getParamBytesForAlg(alg);
      var signatureBytes = signature.length;
      if (signatureBytes !== paramBytes * 2) {
        throw new TypeError('"' + alg + '" signatures must be "' + paramBytes * 2 + '" bytes, saw "' + signatureBytes + '"');
      }
      var rPadding = countPadding(signature, 0, paramBytes);
      var sPadding = countPadding(signature, paramBytes, signature.length);
      var rLength = paramBytes - rPadding;
      var sLength = paramBytes - sPadding;
      var rsBytes = 1 + 1 + rLength + 1 + 1 + sLength;
      var shortLength = rsBytes < MAX_OCTET;
      var dst = Buffer3.allocUnsafe((shortLength ? 2 : 3) + rsBytes);
      var offset = 0;
      dst[offset++] = ENCODED_TAG_SEQ;
      if (shortLength) {
        dst[offset++] = rsBytes;
      } else {
        dst[offset++] = MAX_OCTET | 1;
        dst[offset++] = rsBytes & 255;
      }
      dst[offset++] = ENCODED_TAG_INT;
      dst[offset++] = rLength;
      if (rPadding < 0) {
        dst[offset++] = 0;
        offset += signature.copy(dst, offset, 0, paramBytes);
      } else {
        offset += signature.copy(dst, offset, rPadding, paramBytes);
      }
      dst[offset++] = ENCODED_TAG_INT;
      dst[offset++] = sLength;
      if (sPadding < 0) {
        dst[offset++] = 0;
        signature.copy(dst, offset, paramBytes);
      } else {
        signature.copy(dst, offset, paramBytes + sPadding);
      }
      return dst;
    }
    module3.exports = {
      derToJose,
      joseToDer
    };
  }
});

// ../../node_modules/.pnpm/jwa@1.4.1/node_modules/jwa/index.js
var require_jwa = __commonJS({
  "../../node_modules/.pnpm/jwa@1.4.1/node_modules/jwa/index.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var bufferEqual = require_buffer_equal_constant_time();
    var Buffer3 = require_safe_buffer().Buffer;
    var crypto2 = (init_crypto(), __toCommonJS(crypto_exports));
    var formatEcdsa = require_ecdsa_sig_formatter();
    var util2 = (init_util(), __toCommonJS(util_exports));
    var MSG_INVALID_ALGORITHM = '"%s" is not a valid algorithm.\n  Supported algorithms are:\n  "HS256", "HS384", "HS512", "RS256", "RS384", "RS512", "PS256", "PS384", "PS512", "ES256", "ES384", "ES512" and "none".';
    var MSG_INVALID_SECRET = "secret must be a string or buffer";
    var MSG_INVALID_VERIFIER_KEY = "key must be a string or a buffer";
    var MSG_INVALID_SIGNER_KEY = "key must be a string, a buffer or an object";
    var supportsKeyObjects = typeof crypto2.createPublicKey === "function";
    if (supportsKeyObjects) {
      MSG_INVALID_VERIFIER_KEY += " or a KeyObject";
      MSG_INVALID_SECRET += "or a KeyObject";
    }
    function checkIsPublicKey(key) {
      if (Buffer3.isBuffer(key)) {
        return;
      }
      if (typeof key === "string") {
        return;
      }
      if (!supportsKeyObjects) {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
      if (typeof key !== "object") {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
      if (typeof key.type !== "string") {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
      if (typeof key.asymmetricKeyType !== "string") {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
      if (typeof key.export !== "function") {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
    }
    function checkIsPrivateKey(key) {
      if (Buffer3.isBuffer(key)) {
        return;
      }
      if (typeof key === "string") {
        return;
      }
      if (typeof key === "object") {
        return;
      }
      throw typeError(MSG_INVALID_SIGNER_KEY);
    }
    function checkIsSecretKey(key) {
      if (Buffer3.isBuffer(key)) {
        return;
      }
      if (typeof key === "string") {
        return key;
      }
      if (!supportsKeyObjects) {
        throw typeError(MSG_INVALID_SECRET);
      }
      if (typeof key !== "object") {
        throw typeError(MSG_INVALID_SECRET);
      }
      if (key.type !== "secret") {
        throw typeError(MSG_INVALID_SECRET);
      }
      if (typeof key.export !== "function") {
        throw typeError(MSG_INVALID_SECRET);
      }
    }
    function fromBase64(base64) {
      return base64.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
    }
    function toBase64(base64url) {
      base64url = base64url.toString();
      var padding = 4 - base64url.length % 4;
      if (padding !== 4) {
        for (var i8 = 0; i8 < padding; ++i8) {
          base64url += "=";
        }
      }
      return base64url.replace(/\-/g, "+").replace(/_/g, "/");
    }
    function typeError(template) {
      var args = [].slice.call(arguments, 1);
      var errMsg = util2.format.bind(util2, template).apply(null, args);
      return new TypeError(errMsg);
    }
    function bufferOrString(obj) {
      return Buffer3.isBuffer(obj) || typeof obj === "string";
    }
    function normalizeInput(thing) {
      if (!bufferOrString(thing))
        thing = JSON.stringify(thing);
      return thing;
    }
    function createHmacSigner(bits) {
      return function sign(thing, secret) {
        checkIsSecretKey(secret);
        thing = normalizeInput(thing);
        var hmac = crypto2.createHmac("sha" + bits, secret);
        var sig = (hmac.update(thing), hmac.digest("base64"));
        return fromBase64(sig);
      };
    }
    function createHmacVerifier(bits) {
      return function verify(thing, signature, secret) {
        var computedSig = createHmacSigner(bits)(thing, secret);
        return bufferEqual(Buffer3.from(signature), Buffer3.from(computedSig));
      };
    }
    function createKeySigner(bits) {
      return function sign(thing, privateKey) {
        checkIsPrivateKey(privateKey);
        thing = normalizeInput(thing);
        var signer = crypto2.createSign("RSA-SHA" + bits);
        var sig = (signer.update(thing), signer.sign(privateKey, "base64"));
        return fromBase64(sig);
      };
    }
    function createKeyVerifier(bits) {
      return function verify(thing, signature, publicKey) {
        checkIsPublicKey(publicKey);
        thing = normalizeInput(thing);
        signature = toBase64(signature);
        var verifier = crypto2.createVerify("RSA-SHA" + bits);
        verifier.update(thing);
        return verifier.verify(publicKey, signature, "base64");
      };
    }
    function createPSSKeySigner(bits) {
      return function sign(thing, privateKey) {
        checkIsPrivateKey(privateKey);
        thing = normalizeInput(thing);
        var signer = crypto2.createSign("RSA-SHA" + bits);
        var sig = (signer.update(thing), signer.sign({
          key: privateKey,
          padding: crypto2.constants.RSA_PKCS1_PSS_PADDING,
          saltLength: crypto2.constants.RSA_PSS_SALTLEN_DIGEST
        }, "base64"));
        return fromBase64(sig);
      };
    }
    function createPSSKeyVerifier(bits) {
      return function verify(thing, signature, publicKey) {
        checkIsPublicKey(publicKey);
        thing = normalizeInput(thing);
        signature = toBase64(signature);
        var verifier = crypto2.createVerify("RSA-SHA" + bits);
        verifier.update(thing);
        return verifier.verify({
          key: publicKey,
          padding: crypto2.constants.RSA_PKCS1_PSS_PADDING,
          saltLength: crypto2.constants.RSA_PSS_SALTLEN_DIGEST
        }, signature, "base64");
      };
    }
    function createECDSASigner(bits) {
      var inner = createKeySigner(bits);
      return function sign() {
        var signature = inner.apply(null, arguments);
        signature = formatEcdsa.derToJose(signature, "ES" + bits);
        return signature;
      };
    }
    function createECDSAVerifer(bits) {
      var inner = createKeyVerifier(bits);
      return function verify(thing, signature, publicKey) {
        signature = formatEcdsa.joseToDer(signature, "ES" + bits).toString("base64");
        var result = inner(thing, signature, publicKey);
        return result;
      };
    }
    function createNoneSigner() {
      return function sign() {
        return "";
      };
    }
    function createNoneVerifier() {
      return function verify(thing, signature) {
        return signature === "";
      };
    }
    module3.exports = function jwa(algorithm) {
      var signerFactories = {
        hs: createHmacSigner,
        rs: createKeySigner,
        ps: createPSSKeySigner,
        es: createECDSASigner,
        none: createNoneSigner
      };
      var verifierFactories = {
        hs: createHmacVerifier,
        rs: createKeyVerifier,
        ps: createPSSKeyVerifier,
        es: createECDSAVerifer,
        none: createNoneVerifier
      };
      var match = algorithm.match(/^(RS|PS|ES|HS)(256|384|512)$|^(none)$/i);
      if (!match)
        throw typeError(MSG_INVALID_ALGORITHM, algorithm);
      var algo = (match[1] || match[3]).toLowerCase();
      var bits = match[2];
      return {
        sign: signerFactories[algo](bits),
        verify: verifierFactories[algo](bits)
      };
    };
  }
});

// ../../node_modules/.pnpm/jws@3.2.2/node_modules/jws/lib/tostring.js
var require_tostring = __commonJS({
  "../../node_modules/.pnpm/jws@3.2.2/node_modules/jws/lib/tostring.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var Buffer3 = (init_buffer(), __toCommonJS(buffer_exports)).Buffer;
    module3.exports = function toString3(obj) {
      if (typeof obj === "string")
        return obj;
      if (typeof obj === "number" || Buffer3.isBuffer(obj))
        return obj.toString();
      return JSON.stringify(obj);
    };
  }
});

// ../../node_modules/.pnpm/jws@3.2.2/node_modules/jws/lib/sign-stream.js
var require_sign_stream = __commonJS({
  "../../node_modules/.pnpm/jws@3.2.2/node_modules/jws/lib/sign-stream.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var Buffer3 = require_safe_buffer().Buffer;
    var DataStream = require_data_stream();
    var jwa = require_jwa();
    var Stream2 = (init_stream(), __toCommonJS(stream_exports));
    var toString3 = require_tostring();
    var util2 = (init_util(), __toCommonJS(util_exports));
    function base64url(string, encoding) {
      return Buffer3.from(string, encoding).toString("base64").replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
    }
    function jwsSecuredInput(header, payload, encoding) {
      encoding = encoding || "utf8";
      var encodedHeader = base64url(toString3(header), "binary");
      var encodedPayload = base64url(toString3(payload), encoding);
      return util2.format("%s.%s", encodedHeader, encodedPayload);
    }
    function jwsSign(opts) {
      var header = opts.header;
      var payload = opts.payload;
      var secretOrKey = opts.secret || opts.privateKey;
      var encoding = opts.encoding;
      var algo = jwa(header.alg);
      var securedInput = jwsSecuredInput(header, payload, encoding);
      var signature = algo.sign(securedInput, secretOrKey);
      return util2.format("%s.%s", securedInput, signature);
    }
    function SignStream(opts) {
      var secret = opts.secret || opts.privateKey || opts.key;
      var secretStream = new DataStream(secret);
      this.readable = true;
      this.header = opts.header;
      this.encoding = opts.encoding;
      this.secret = this.privateKey = this.key = secretStream;
      this.payload = new DataStream(opts.payload);
      this.secret.once("close", function() {
        if (!this.payload.writable && this.readable)
          this.sign();
      }.bind(this));
      this.payload.once("close", function() {
        if (!this.secret.writable && this.readable)
          this.sign();
      }.bind(this));
    }
    util2.inherits(SignStream, Stream2);
    SignStream.prototype.sign = function sign() {
      try {
        var signature = jwsSign({
          header: this.header,
          payload: this.payload.buffer,
          secret: this.secret.buffer,
          encoding: this.encoding
        });
        this.emit("done", signature);
        this.emit("data", signature);
        this.emit("end");
        this.readable = false;
        return signature;
      } catch (e11) {
        this.readable = false;
        this.emit("error", e11);
        this.emit("close");
      }
    };
    SignStream.sign = jwsSign;
    module3.exports = SignStream;
  }
});

// ../../node_modules/.pnpm/jws@3.2.2/node_modules/jws/lib/verify-stream.js
var require_verify_stream = __commonJS({
  "../../node_modules/.pnpm/jws@3.2.2/node_modules/jws/lib/verify-stream.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var Buffer3 = require_safe_buffer().Buffer;
    var DataStream = require_data_stream();
    var jwa = require_jwa();
    var Stream2 = (init_stream(), __toCommonJS(stream_exports));
    var toString3 = require_tostring();
    var util2 = (init_util(), __toCommonJS(util_exports));
    var JWS_REGEX = /^[a-zA-Z0-9\-_]+?\.[a-zA-Z0-9\-_]+?\.([a-zA-Z0-9\-_]+)?$/;
    function isObject5(thing) {
      return Object.prototype.toString.call(thing) === "[object Object]";
    }
    function safeJsonParse(thing) {
      if (isObject5(thing))
        return thing;
      try {
        return JSON.parse(thing);
      } catch (e11) {
        return void 0;
      }
    }
    function headerFromJWS(jwsSig) {
      var encodedHeader = jwsSig.split(".", 1)[0];
      return safeJsonParse(Buffer3.from(encodedHeader, "base64").toString("binary"));
    }
    function securedInputFromJWS(jwsSig) {
      return jwsSig.split(".", 2).join(".");
    }
    function signatureFromJWS(jwsSig) {
      return jwsSig.split(".")[2];
    }
    function payloadFromJWS(jwsSig, encoding) {
      encoding = encoding || "utf8";
      var payload = jwsSig.split(".")[1];
      return Buffer3.from(payload, "base64").toString(encoding);
    }
    function isValidJws(string) {
      return JWS_REGEX.test(string) && !!headerFromJWS(string);
    }
    function jwsVerify(jwsSig, algorithm, secretOrKey) {
      if (!algorithm) {
        var err = new Error("Missing algorithm parameter for jws.verify");
        err.code = "MISSING_ALGORITHM";
        throw err;
      }
      jwsSig = toString3(jwsSig);
      var signature = signatureFromJWS(jwsSig);
      var securedInput = securedInputFromJWS(jwsSig);
      var algo = jwa(algorithm);
      return algo.verify(securedInput, signature, secretOrKey);
    }
    function jwsDecode(jwsSig, opts) {
      opts = opts || {};
      jwsSig = toString3(jwsSig);
      if (!isValidJws(jwsSig))
        return null;
      var header = headerFromJWS(jwsSig);
      if (!header)
        return null;
      var payload = payloadFromJWS(jwsSig);
      if (header.typ === "JWT" || opts.json)
        payload = JSON.parse(payload, opts.encoding);
      return {
        header,
        payload,
        signature: signatureFromJWS(jwsSig)
      };
    }
    function VerifyStream(opts) {
      opts = opts || {};
      var secretOrKey = opts.secret || opts.publicKey || opts.key;
      var secretStream = new DataStream(secretOrKey);
      this.readable = true;
      this.algorithm = opts.algorithm;
      this.encoding = opts.encoding;
      this.secret = this.publicKey = this.key = secretStream;
      this.signature = new DataStream(opts.signature);
      this.secret.once("close", function() {
        if (!this.signature.writable && this.readable)
          this.verify();
      }.bind(this));
      this.signature.once("close", function() {
        if (!this.secret.writable && this.readable)
          this.verify();
      }.bind(this));
    }
    util2.inherits(VerifyStream, Stream2);
    VerifyStream.prototype.verify = function verify() {
      try {
        var valid = jwsVerify(this.signature.buffer, this.algorithm, this.key.buffer);
        var obj = jwsDecode(this.signature.buffer, this.encoding);
        this.emit("done", valid, obj);
        this.emit("data", valid);
        this.emit("end");
        this.readable = false;
        return valid;
      } catch (e11) {
        this.readable = false;
        this.emit("error", e11);
        this.emit("close");
      }
    };
    VerifyStream.decode = jwsDecode;
    VerifyStream.isValid = isValidJws;
    VerifyStream.verify = jwsVerify;
    module3.exports = VerifyStream;
  }
});

// ../../node_modules/.pnpm/jws@3.2.2/node_modules/jws/index.js
var require_jws = __commonJS({
  "../../node_modules/.pnpm/jws@3.2.2/node_modules/jws/index.js"(exports11) {
    init_dirname();
    init_buffer2();
    init_process2();
    var SignStream = require_sign_stream();
    var VerifyStream = require_verify_stream();
    var ALGORITHMS = [
      "HS256",
      "HS384",
      "HS512",
      "RS256",
      "RS384",
      "RS512",
      "PS256",
      "PS384",
      "PS512",
      "ES256",
      "ES384",
      "ES512"
    ];
    exports11.ALGORITHMS = ALGORITHMS;
    exports11.sign = SignStream.sign;
    exports11.verify = VerifyStream.verify;
    exports11.decode = VerifyStream.decode;
    exports11.isValid = VerifyStream.isValid;
    exports11.createSign = function createSign2(opts) {
      return new SignStream(opts);
    };
    exports11.createVerify = function createVerify2(opts) {
      return new VerifyStream(opts);
    };
  }
});

// ../../node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/decode.js
var require_decode = __commonJS({
  "../../node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/decode.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var jws = require_jws();
    module3.exports = function(jwt, options) {
      options = options || {};
      var decoded = jws.decode(jwt, options);
      if (!decoded) {
        return null;
      }
      var payload = decoded.payload;
      if (typeof payload === "string") {
        try {
          var obj = JSON.parse(payload);
          if (obj !== null && typeof obj === "object") {
            payload = obj;
          }
        } catch (e11) {
        }
      }
      if (options.complete === true) {
        return {
          header: decoded.header,
          payload,
          signature: decoded.signature
        };
      }
      return payload;
    };
  }
});

// ../../node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/JsonWebTokenError.js
var require_JsonWebTokenError = __commonJS({
  "../../node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/JsonWebTokenError.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var JsonWebTokenError = function(message, error) {
      Error.call(this, message);
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      }
      this.name = "JsonWebTokenError";
      this.message = message;
      if (error)
        this.inner = error;
    };
    JsonWebTokenError.prototype = Object.create(Error.prototype);
    JsonWebTokenError.prototype.constructor = JsonWebTokenError;
    module3.exports = JsonWebTokenError;
  }
});

// ../../node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/NotBeforeError.js
var require_NotBeforeError = __commonJS({
  "../../node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/NotBeforeError.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var JsonWebTokenError = require_JsonWebTokenError();
    var NotBeforeError = function(message, date) {
      JsonWebTokenError.call(this, message);
      this.name = "NotBeforeError";
      this.date = date;
    };
    NotBeforeError.prototype = Object.create(JsonWebTokenError.prototype);
    NotBeforeError.prototype.constructor = NotBeforeError;
    module3.exports = NotBeforeError;
  }
});

// ../../node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/TokenExpiredError.js
var require_TokenExpiredError = __commonJS({
  "../../node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/TokenExpiredError.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var JsonWebTokenError = require_JsonWebTokenError();
    var TokenExpiredError = function(message, expiredAt) {
      JsonWebTokenError.call(this, message);
      this.name = "TokenExpiredError";
      this.expiredAt = expiredAt;
    };
    TokenExpiredError.prototype = Object.create(JsonWebTokenError.prototype);
    TokenExpiredError.prototype.constructor = TokenExpiredError;
    module3.exports = TokenExpiredError;
  }
});

// ../../node_modules/.pnpm/ms@2.1.3/node_modules/ms/index.js
var require_ms = __commonJS({
  "../../node_modules/.pnpm/ms@2.1.3/node_modules/ms/index.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var s7 = 1e3;
    var m6 = s7 * 60;
    var h8 = m6 * 60;
    var d6 = h8 * 24;
    var w4 = d6 * 7;
    var y6 = d6 * 365.25;
    module3.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse2(val);
      } else if (type === "number" && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse2(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n9 = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n9 * y6;
        case "weeks":
        case "week":
        case "w":
          return n9 * w4;
        case "days":
        case "day":
        case "d":
          return n9 * d6;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n9 * h8;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n9 * m6;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n9 * s7;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n9;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d6) {
        return Math.round(ms / d6) + "d";
      }
      if (msAbs >= h8) {
        return Math.round(ms / h8) + "h";
      }
      if (msAbs >= m6) {
        return Math.round(ms / m6) + "m";
      }
      if (msAbs >= s7) {
        return Math.round(ms / s7) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d6) {
        return plural(ms, msAbs, d6, "day");
      }
      if (msAbs >= h8) {
        return plural(ms, msAbs, h8, "hour");
      }
      if (msAbs >= m6) {
        return plural(ms, msAbs, m6, "minute");
      }
      if (msAbs >= s7) {
        return plural(ms, msAbs, s7, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n9, name2) {
      var isPlural = msAbs >= n9 * 1.5;
      return Math.round(ms / n9) + " " + name2 + (isPlural ? "s" : "");
    }
  }
});

// ../../node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/timespan.js
var require_timespan = __commonJS({
  "../../node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/timespan.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var ms = require_ms();
    module3.exports = function(time, iat) {
      var timestamp = iat || Math.floor(Date.now() / 1e3);
      if (typeof time === "string") {
        var milliseconds = ms(time);
        if (typeof milliseconds === "undefined") {
          return;
        }
        return Math.floor(timestamp + milliseconds / 1e3);
      } else if (typeof time === "number") {
        return timestamp + time;
      } else {
        return;
      }
    };
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/constants.js
var require_constants = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/constants.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var SEMVER_SPEC_VERSION = "2.0.0";
    var MAX_LENGTH = 256;
    var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
    var MAX_SAFE_COMPONENT_LENGTH = 16;
    var MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6;
    var RELEASE_TYPES = [
      "major",
      "premajor",
      "minor",
      "preminor",
      "patch",
      "prepatch",
      "prerelease"
    ];
    module3.exports = {
      MAX_LENGTH,
      MAX_SAFE_COMPONENT_LENGTH,
      MAX_SAFE_BUILD_LENGTH,
      MAX_SAFE_INTEGER,
      RELEASE_TYPES,
      SEMVER_SPEC_VERSION,
      FLAG_INCLUDE_PRERELEASE: 1,
      FLAG_LOOSE: 2
    };
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/debug.js
var require_debug = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/debug.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var debug = typeof process_exports === "object" && process_exports.env && process_exports.env.NODE_DEBUG && /\bsemver\b/i.test(process_exports.env.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {
    };
    module3.exports = debug;
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/re.js
var require_re = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/re.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var {
      MAX_SAFE_COMPONENT_LENGTH,
      MAX_SAFE_BUILD_LENGTH,
      MAX_LENGTH
    } = require_constants();
    var debug = require_debug();
    exports11 = module3.exports = {};
    var re3 = exports11.re = [];
    var safeRe = exports11.safeRe = [];
    var src = exports11.src = [];
    var t8 = exports11.t = {};
    var R4 = 0;
    var LETTERDASHNUMBER = "[a-zA-Z0-9-]";
    var safeRegexReplacements = [
      ["\\s", 1],
      ["\\d", MAX_LENGTH],
      [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH]
    ];
    var makeSafeRegex = (value) => {
      for (const [token, max] of safeRegexReplacements) {
        value = value.split(`${token}*`).join(`${token}{0,${max}}`).split(`${token}+`).join(`${token}{1,${max}}`);
      }
      return value;
    };
    var createToken = (name2, value, isGlobal) => {
      const safe = makeSafeRegex(value);
      const index = R4++;
      debug(name2, index, value);
      t8[name2] = index;
      src[index] = value;
      re3[index] = new RegExp(value, isGlobal ? "g" : void 0);
      safeRe[index] = new RegExp(safe, isGlobal ? "g" : void 0);
    };
    createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
    createToken("NUMERICIDENTIFIERLOOSE", "\\d+");
    createToken("NONNUMERICIDENTIFIER", `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);
    createToken("MAINVERSION", `(${src[t8.NUMERICIDENTIFIER]})\\.(${src[t8.NUMERICIDENTIFIER]})\\.(${src[t8.NUMERICIDENTIFIER]})`);
    createToken("MAINVERSIONLOOSE", `(${src[t8.NUMERICIDENTIFIERLOOSE]})\\.(${src[t8.NUMERICIDENTIFIERLOOSE]})\\.(${src[t8.NUMERICIDENTIFIERLOOSE]})`);
    createToken("PRERELEASEIDENTIFIER", `(?:${src[t8.NUMERICIDENTIFIER]}|${src[t8.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t8.NUMERICIDENTIFIERLOOSE]}|${src[t8.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASE", `(?:-(${src[t8.PRERELEASEIDENTIFIER]}(?:\\.${src[t8.PRERELEASEIDENTIFIER]})*))`);
    createToken("PRERELEASELOOSE", `(?:-?(${src[t8.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t8.PRERELEASEIDENTIFIERLOOSE]})*))`);
    createToken("BUILDIDENTIFIER", `${LETTERDASHNUMBER}+`);
    createToken("BUILD", `(?:\\+(${src[t8.BUILDIDENTIFIER]}(?:\\.${src[t8.BUILDIDENTIFIER]})*))`);
    createToken("FULLPLAIN", `v?${src[t8.MAINVERSION]}${src[t8.PRERELEASE]}?${src[t8.BUILD]}?`);
    createToken("FULL", `^${src[t8.FULLPLAIN]}$`);
    createToken("LOOSEPLAIN", `[v=\\s]*${src[t8.MAINVERSIONLOOSE]}${src[t8.PRERELEASELOOSE]}?${src[t8.BUILD]}?`);
    createToken("LOOSE", `^${src[t8.LOOSEPLAIN]}$`);
    createToken("GTLT", "((?:<|>)?=?)");
    createToken("XRANGEIDENTIFIERLOOSE", `${src[t8.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
    createToken("XRANGEIDENTIFIER", `${src[t8.NUMERICIDENTIFIER]}|x|X|\\*`);
    createToken("XRANGEPLAIN", `[v=\\s]*(${src[t8.XRANGEIDENTIFIER]})(?:\\.(${src[t8.XRANGEIDENTIFIER]})(?:\\.(${src[t8.XRANGEIDENTIFIER]})(?:${src[t8.PRERELEASE]})?${src[t8.BUILD]}?)?)?`);
    createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t8.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t8.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t8.XRANGEIDENTIFIERLOOSE]})(?:${src[t8.PRERELEASELOOSE]})?${src[t8.BUILD]}?)?)?`);
    createToken("XRANGE", `^${src[t8.GTLT]}\\s*${src[t8.XRANGEPLAIN]}$`);
    createToken("XRANGELOOSE", `^${src[t8.GTLT]}\\s*${src[t8.XRANGEPLAINLOOSE]}$`);
    createToken("COERCE", `${"(^|[^\\d])(\\d{1,"}${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:$|[^\\d])`);
    createToken("COERCERTL", src[t8.COERCE], true);
    createToken("LONETILDE", "(?:~>?)");
    createToken("TILDETRIM", `(\\s*)${src[t8.LONETILDE]}\\s+`, true);
    exports11.tildeTrimReplace = "$1~";
    createToken("TILDE", `^${src[t8.LONETILDE]}${src[t8.XRANGEPLAIN]}$`);
    createToken("TILDELOOSE", `^${src[t8.LONETILDE]}${src[t8.XRANGEPLAINLOOSE]}$`);
    createToken("LONECARET", "(?:\\^)");
    createToken("CARETTRIM", `(\\s*)${src[t8.LONECARET]}\\s+`, true);
    exports11.caretTrimReplace = "$1^";
    createToken("CARET", `^${src[t8.LONECARET]}${src[t8.XRANGEPLAIN]}$`);
    createToken("CARETLOOSE", `^${src[t8.LONECARET]}${src[t8.XRANGEPLAINLOOSE]}$`);
    createToken("COMPARATORLOOSE", `^${src[t8.GTLT]}\\s*(${src[t8.LOOSEPLAIN]})$|^$`);
    createToken("COMPARATOR", `^${src[t8.GTLT]}\\s*(${src[t8.FULLPLAIN]})$|^$`);
    createToken("COMPARATORTRIM", `(\\s*)${src[t8.GTLT]}\\s*(${src[t8.LOOSEPLAIN]}|${src[t8.XRANGEPLAIN]})`, true);
    exports11.comparatorTrimReplace = "$1$2$3";
    createToken("HYPHENRANGE", `^\\s*(${src[t8.XRANGEPLAIN]})\\s+-\\s+(${src[t8.XRANGEPLAIN]})\\s*$`);
    createToken("HYPHENRANGELOOSE", `^\\s*(${src[t8.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t8.XRANGEPLAINLOOSE]})\\s*$`);
    createToken("STAR", "(<|>)?=?\\s*\\*");
    createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$");
    createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/parse-options.js
var require_parse_options = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/parse-options.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var looseOption = Object.freeze({ loose: true });
    var emptyOpts = Object.freeze({});
    var parseOptions = (options) => {
      if (!options) {
        return emptyOpts;
      }
      if (typeof options !== "object") {
        return looseOption;
      }
      return options;
    };
    module3.exports = parseOptions;
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/identifiers.js
var require_identifiers = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/internal/identifiers.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var numeric = /^[0-9]+$/;
    var compareIdentifiers = (a8, b5) => {
      const anum = numeric.test(a8);
      const bnum = numeric.test(b5);
      if (anum && bnum) {
        a8 = +a8;
        b5 = +b5;
      }
      return a8 === b5 ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a8 < b5 ? -1 : 1;
    };
    var rcompareIdentifiers = (a8, b5) => compareIdentifiers(b5, a8);
    module3.exports = {
      compareIdentifiers,
      rcompareIdentifiers
    };
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/semver.js
var require_semver = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/semver.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var debug = require_debug();
    var { MAX_LENGTH, MAX_SAFE_INTEGER } = require_constants();
    var { safeRe: re3, t: t8 } = require_re();
    var parseOptions = require_parse_options();
    var { compareIdentifiers } = require_identifiers();
    var SemVer = class {
      constructor(version2, options) {
        options = parseOptions(options);
        if (version2 instanceof SemVer) {
          if (version2.loose === !!options.loose && version2.includePrerelease === !!options.includePrerelease) {
            return version2;
          } else {
            version2 = version2.version;
          }
        } else if (typeof version2 !== "string") {
          throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version2}".`);
        }
        if (version2.length > MAX_LENGTH) {
          throw new TypeError(
            `version is longer than ${MAX_LENGTH} characters`
          );
        }
        debug("SemVer", version2, options);
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        const m6 = version2.trim().match(options.loose ? re3[t8.LOOSE] : re3[t8.FULL]);
        if (!m6) {
          throw new TypeError(`Invalid Version: ${version2}`);
        }
        this.raw = version2;
        this.major = +m6[1];
        this.minor = +m6[2];
        this.patch = +m6[3];
        if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
          throw new TypeError("Invalid major version");
        }
        if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
          throw new TypeError("Invalid minor version");
        }
        if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
          throw new TypeError("Invalid patch version");
        }
        if (!m6[4]) {
          this.prerelease = [];
        } else {
          this.prerelease = m6[4].split(".").map((id) => {
            if (/^[0-9]+$/.test(id)) {
              const num = +id;
              if (num >= 0 && num < MAX_SAFE_INTEGER) {
                return num;
              }
            }
            return id;
          });
        }
        this.build = m6[5] ? m6[5].split(".") : [];
        this.format();
      }
      format() {
        this.version = `${this.major}.${this.minor}.${this.patch}`;
        if (this.prerelease.length) {
          this.version += `-${this.prerelease.join(".")}`;
        }
        return this.version;
      }
      toString() {
        return this.version;
      }
      compare(other) {
        debug("SemVer.compare", this.version, this.options, other);
        if (!(other instanceof SemVer)) {
          if (typeof other === "string" && other === this.version) {
            return 0;
          }
          other = new SemVer(other, this.options);
        }
        if (other.version === this.version) {
          return 0;
        }
        return this.compareMain(other) || this.comparePre(other);
      }
      compareMain(other) {
        if (!(other instanceof SemVer)) {
          other = new SemVer(other, this.options);
        }
        return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
      }
      comparePre(other) {
        if (!(other instanceof SemVer)) {
          other = new SemVer(other, this.options);
        }
        if (this.prerelease.length && !other.prerelease.length) {
          return -1;
        } else if (!this.prerelease.length && other.prerelease.length) {
          return 1;
        } else if (!this.prerelease.length && !other.prerelease.length) {
          return 0;
        }
        let i8 = 0;
        do {
          const a8 = this.prerelease[i8];
          const b5 = other.prerelease[i8];
          debug("prerelease compare", i8, a8, b5);
          if (a8 === void 0 && b5 === void 0) {
            return 0;
          } else if (b5 === void 0) {
            return 1;
          } else if (a8 === void 0) {
            return -1;
          } else if (a8 === b5) {
            continue;
          } else {
            return compareIdentifiers(a8, b5);
          }
        } while (++i8);
      }
      compareBuild(other) {
        if (!(other instanceof SemVer)) {
          other = new SemVer(other, this.options);
        }
        let i8 = 0;
        do {
          const a8 = this.build[i8];
          const b5 = other.build[i8];
          debug("prerelease compare", i8, a8, b5);
          if (a8 === void 0 && b5 === void 0) {
            return 0;
          } else if (b5 === void 0) {
            return 1;
          } else if (a8 === void 0) {
            return -1;
          } else if (a8 === b5) {
            continue;
          } else {
            return compareIdentifiers(a8, b5);
          }
        } while (++i8);
      }
      inc(release2, identifier, identifierBase) {
        switch (release2) {
          case "premajor":
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor = 0;
            this.major++;
            this.inc("pre", identifier, identifierBase);
            break;
          case "preminor":
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor++;
            this.inc("pre", identifier, identifierBase);
            break;
          case "prepatch":
            this.prerelease.length = 0;
            this.inc("patch", identifier, identifierBase);
            this.inc("pre", identifier, identifierBase);
            break;
          case "prerelease":
            if (this.prerelease.length === 0) {
              this.inc("patch", identifier, identifierBase);
            }
            this.inc("pre", identifier, identifierBase);
            break;
          case "major":
            if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
              this.major++;
            }
            this.minor = 0;
            this.patch = 0;
            this.prerelease = [];
            break;
          case "minor":
            if (this.patch !== 0 || this.prerelease.length === 0) {
              this.minor++;
            }
            this.patch = 0;
            this.prerelease = [];
            break;
          case "patch":
            if (this.prerelease.length === 0) {
              this.patch++;
            }
            this.prerelease = [];
            break;
          case "pre": {
            const base = Number(identifierBase) ? 1 : 0;
            if (!identifier && identifierBase === false) {
              throw new Error("invalid increment argument: identifier is empty");
            }
            if (this.prerelease.length === 0) {
              this.prerelease = [base];
            } else {
              let i8 = this.prerelease.length;
              while (--i8 >= 0) {
                if (typeof this.prerelease[i8] === "number") {
                  this.prerelease[i8]++;
                  i8 = -2;
                }
              }
              if (i8 === -1) {
                if (identifier === this.prerelease.join(".") && identifierBase === false) {
                  throw new Error("invalid increment argument: identifier already exists");
                }
                this.prerelease.push(base);
              }
            }
            if (identifier) {
              let prerelease = [identifier, base];
              if (identifierBase === false) {
                prerelease = [identifier];
              }
              if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
                if (isNaN(this.prerelease[1])) {
                  this.prerelease = prerelease;
                }
              } else {
                this.prerelease = prerelease;
              }
            }
            break;
          }
          default:
            throw new Error(`invalid increment argument: ${release2}`);
        }
        this.raw = this.format();
        if (this.build.length) {
          this.raw += `+${this.build.join(".")}`;
        }
        return this;
      }
    };
    module3.exports = SemVer;
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/parse.js
var require_parse2 = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/parse.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var SemVer = require_semver();
    var parse2 = (version2, options, throwErrors = false) => {
      if (version2 instanceof SemVer) {
        return version2;
      }
      try {
        return new SemVer(version2, options);
      } catch (er) {
        if (!throwErrors) {
          return null;
        }
        throw er;
      }
    };
    module3.exports = parse2;
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/valid.js
var require_valid = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/valid.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var parse2 = require_parse2();
    var valid = (version2, options) => {
      const v6 = parse2(version2, options);
      return v6 ? v6.version : null;
    };
    module3.exports = valid;
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/clean.js
var require_clean = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/clean.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var parse2 = require_parse2();
    var clean = (version2, options) => {
      const s7 = parse2(version2.trim().replace(/^[=v]+/, ""), options);
      return s7 ? s7.version : null;
    };
    module3.exports = clean;
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/inc.js
var require_inc = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/inc.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var SemVer = require_semver();
    var inc = (version2, release2, options, identifier, identifierBase) => {
      if (typeof options === "string") {
        identifierBase = identifier;
        identifier = options;
        options = void 0;
      }
      try {
        return new SemVer(
          version2 instanceof SemVer ? version2.version : version2,
          options
        ).inc(release2, identifier, identifierBase).version;
      } catch (er) {
        return null;
      }
    };
    module3.exports = inc;
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/diff.js
var require_diff = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/diff.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var parse2 = require_parse2();
    var diff = (version1, version2) => {
      const v1 = parse2(version1, null, true);
      const v22 = parse2(version2, null, true);
      const comparison = v1.compare(v22);
      if (comparison === 0) {
        return null;
      }
      const v1Higher = comparison > 0;
      const highVersion = v1Higher ? v1 : v22;
      const lowVersion = v1Higher ? v22 : v1;
      const highHasPre = !!highVersion.prerelease.length;
      const lowHasPre = !!lowVersion.prerelease.length;
      if (lowHasPre && !highHasPre) {
        if (!lowVersion.patch && !lowVersion.minor) {
          return "major";
        }
        if (highVersion.patch) {
          return "patch";
        }
        if (highVersion.minor) {
          return "minor";
        }
        return "major";
      }
      const prefix = highHasPre ? "pre" : "";
      if (v1.major !== v22.major) {
        return prefix + "major";
      }
      if (v1.minor !== v22.minor) {
        return prefix + "minor";
      }
      if (v1.patch !== v22.patch) {
        return prefix + "patch";
      }
      return "prerelease";
    };
    module3.exports = diff;
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/major.js
var require_major = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/major.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var SemVer = require_semver();
    var major = (a8, loose) => new SemVer(a8, loose).major;
    module3.exports = major;
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/minor.js
var require_minor = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/minor.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var SemVer = require_semver();
    var minor = (a8, loose) => new SemVer(a8, loose).minor;
    module3.exports = minor;
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/patch.js
var require_patch = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/patch.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var SemVer = require_semver();
    var patch = (a8, loose) => new SemVer(a8, loose).patch;
    module3.exports = patch;
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/prerelease.js
var require_prerelease = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/prerelease.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var parse2 = require_parse2();
    var prerelease = (version2, options) => {
      const parsed = parse2(version2, options);
      return parsed && parsed.prerelease.length ? parsed.prerelease : null;
    };
    module3.exports = prerelease;
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/compare.js
var require_compare = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/compare.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var SemVer = require_semver();
    var compare = (a8, b5, loose) => new SemVer(a8, loose).compare(new SemVer(b5, loose));
    module3.exports = compare;
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/rcompare.js
var require_rcompare = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/rcompare.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var compare = require_compare();
    var rcompare = (a8, b5, loose) => compare(b5, a8, loose);
    module3.exports = rcompare;
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/compare-loose.js
var require_compare_loose = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/compare-loose.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var compare = require_compare();
    var compareLoose = (a8, b5) => compare(a8, b5, true);
    module3.exports = compareLoose;
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/compare-build.js
var require_compare_build = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/compare-build.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var SemVer = require_semver();
    var compareBuild = (a8, b5, loose) => {
      const versionA = new SemVer(a8, loose);
      const versionB = new SemVer(b5, loose);
      return versionA.compare(versionB) || versionA.compareBuild(versionB);
    };
    module3.exports = compareBuild;
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/sort.js
var require_sort = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/sort.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var compareBuild = require_compare_build();
    var sort = (list, loose) => list.sort((a8, b5) => compareBuild(a8, b5, loose));
    module3.exports = sort;
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/rsort.js
var require_rsort = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/rsort.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var compareBuild = require_compare_build();
    var rsort = (list, loose) => list.sort((a8, b5) => compareBuild(b5, a8, loose));
    module3.exports = rsort;
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/gt.js
var require_gt = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/gt.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var compare = require_compare();
    var gt = (a8, b5, loose) => compare(a8, b5, loose) > 0;
    module3.exports = gt;
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/lt.js
var require_lt = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/lt.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var compare = require_compare();
    var lt = (a8, b5, loose) => compare(a8, b5, loose) < 0;
    module3.exports = lt;
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/eq.js
var require_eq = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/eq.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var compare = require_compare();
    var eq = (a8, b5, loose) => compare(a8, b5, loose) === 0;
    module3.exports = eq;
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/neq.js
var require_neq = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/neq.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var compare = require_compare();
    var neq = (a8, b5, loose) => compare(a8, b5, loose) !== 0;
    module3.exports = neq;
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/gte.js
var require_gte = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/gte.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var compare = require_compare();
    var gte = (a8, b5, loose) => compare(a8, b5, loose) >= 0;
    module3.exports = gte;
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/lte.js
var require_lte = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/lte.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var compare = require_compare();
    var lte = (a8, b5, loose) => compare(a8, b5, loose) <= 0;
    module3.exports = lte;
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/cmp.js
var require_cmp = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/cmp.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var eq = require_eq();
    var neq = require_neq();
    var gt = require_gt();
    var gte = require_gte();
    var lt = require_lt();
    var lte = require_lte();
    var cmp = (a8, op, b5, loose) => {
      switch (op) {
        case "===":
          if (typeof a8 === "object") {
            a8 = a8.version;
          }
          if (typeof b5 === "object") {
            b5 = b5.version;
          }
          return a8 === b5;
        case "!==":
          if (typeof a8 === "object") {
            a8 = a8.version;
          }
          if (typeof b5 === "object") {
            b5 = b5.version;
          }
          return a8 !== b5;
        case "":
        case "=":
        case "==":
          return eq(a8, b5, loose);
        case "!=":
          return neq(a8, b5, loose);
        case ">":
          return gt(a8, b5, loose);
        case ">=":
          return gte(a8, b5, loose);
        case "<":
          return lt(a8, b5, loose);
        case "<=":
          return lte(a8, b5, loose);
        default:
          throw new TypeError(`Invalid operator: ${op}`);
      }
    };
    module3.exports = cmp;
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/coerce.js
var require_coerce = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/coerce.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var SemVer = require_semver();
    var parse2 = require_parse2();
    var { safeRe: re3, t: t8 } = require_re();
    var coerce2 = (version2, options) => {
      if (version2 instanceof SemVer) {
        return version2;
      }
      if (typeof version2 === "number") {
        version2 = String(version2);
      }
      if (typeof version2 !== "string") {
        return null;
      }
      options = options || {};
      let match = null;
      if (!options.rtl) {
        match = version2.match(re3[t8.COERCE]);
      } else {
        let next;
        while ((next = re3[t8.COERCERTL].exec(version2)) && (!match || match.index + match[0].length !== version2.length)) {
          if (!match || next.index + next[0].length !== match.index + match[0].length) {
            match = next;
          }
          re3[t8.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
        }
        re3[t8.COERCERTL].lastIndex = -1;
      }
      if (match === null) {
        return null;
      }
      return parse2(`${match[2]}.${match[3] || "0"}.${match[4] || "0"}`, options);
    };
    module3.exports = coerce2;
  }
});

// ../../node_modules/.pnpm/yallist@4.0.0/node_modules/yallist/iterator.js
var require_iterator = __commonJS({
  "../../node_modules/.pnpm/yallist@4.0.0/node_modules/yallist/iterator.js"(exports11, module3) {
    "use strict";
    init_dirname();
    init_buffer2();
    init_process2();
    module3.exports = function(Yallist) {
      Yallist.prototype[Symbol.iterator] = function* () {
        for (let walker = this.head; walker; walker = walker.next) {
          yield walker.value;
        }
      };
    };
  }
});

// ../../node_modules/.pnpm/yallist@4.0.0/node_modules/yallist/yallist.js
var require_yallist = __commonJS({
  "../../node_modules/.pnpm/yallist@4.0.0/node_modules/yallist/yallist.js"(exports11, module3) {
    "use strict";
    init_dirname();
    init_buffer2();
    init_process2();
    module3.exports = Yallist;
    Yallist.Node = Node;
    Yallist.create = Yallist;
    function Yallist(list) {
      var self2 = this;
      if (!(self2 instanceof Yallist)) {
        self2 = new Yallist();
      }
      self2.tail = null;
      self2.head = null;
      self2.length = 0;
      if (list && typeof list.forEach === "function") {
        list.forEach(function(item) {
          self2.push(item);
        });
      } else if (arguments.length > 0) {
        for (var i8 = 0, l8 = arguments.length; i8 < l8; i8++) {
          self2.push(arguments[i8]);
        }
      }
      return self2;
    }
    Yallist.prototype.removeNode = function(node) {
      if (node.list !== this) {
        throw new Error("removing node which does not belong to this list");
      }
      var next = node.next;
      var prev = node.prev;
      if (next) {
        next.prev = prev;
      }
      if (prev) {
        prev.next = next;
      }
      if (node === this.head) {
        this.head = next;
      }
      if (node === this.tail) {
        this.tail = prev;
      }
      node.list.length--;
      node.next = null;
      node.prev = null;
      node.list = null;
      return next;
    };
    Yallist.prototype.unshiftNode = function(node) {
      if (node === this.head) {
        return;
      }
      if (node.list) {
        node.list.removeNode(node);
      }
      var head = this.head;
      node.list = this;
      node.next = head;
      if (head) {
        head.prev = node;
      }
      this.head = node;
      if (!this.tail) {
        this.tail = node;
      }
      this.length++;
    };
    Yallist.prototype.pushNode = function(node) {
      if (node === this.tail) {
        return;
      }
      if (node.list) {
        node.list.removeNode(node);
      }
      var tail = this.tail;
      node.list = this;
      node.prev = tail;
      if (tail) {
        tail.next = node;
      }
      this.tail = node;
      if (!this.head) {
        this.head = node;
      }
      this.length++;
    };
    Yallist.prototype.push = function() {
      for (var i8 = 0, l8 = arguments.length; i8 < l8; i8++) {
        push(this, arguments[i8]);
      }
      return this.length;
    };
    Yallist.prototype.unshift = function() {
      for (var i8 = 0, l8 = arguments.length; i8 < l8; i8++) {
        unshift(this, arguments[i8]);
      }
      return this.length;
    };
    Yallist.prototype.pop = function() {
      if (!this.tail) {
        return void 0;
      }
      var res = this.tail.value;
      this.tail = this.tail.prev;
      if (this.tail) {
        this.tail.next = null;
      } else {
        this.head = null;
      }
      this.length--;
      return res;
    };
    Yallist.prototype.shift = function() {
      if (!this.head) {
        return void 0;
      }
      var res = this.head.value;
      this.head = this.head.next;
      if (this.head) {
        this.head.prev = null;
      } else {
        this.tail = null;
      }
      this.length--;
      return res;
    };
    Yallist.prototype.forEach = function(fn, thisp) {
      thisp = thisp || this;
      for (var walker = this.head, i8 = 0; walker !== null; i8++) {
        fn.call(thisp, walker.value, i8, this);
        walker = walker.next;
      }
    };
    Yallist.prototype.forEachReverse = function(fn, thisp) {
      thisp = thisp || this;
      for (var walker = this.tail, i8 = this.length - 1; walker !== null; i8--) {
        fn.call(thisp, walker.value, i8, this);
        walker = walker.prev;
      }
    };
    Yallist.prototype.get = function(n9) {
      for (var i8 = 0, walker = this.head; walker !== null && i8 < n9; i8++) {
        walker = walker.next;
      }
      if (i8 === n9 && walker !== null) {
        return walker.value;
      }
    };
    Yallist.prototype.getReverse = function(n9) {
      for (var i8 = 0, walker = this.tail; walker !== null && i8 < n9; i8++) {
        walker = walker.prev;
      }
      if (i8 === n9 && walker !== null) {
        return walker.value;
      }
    };
    Yallist.prototype.map = function(fn, thisp) {
      thisp = thisp || this;
      var res = new Yallist();
      for (var walker = this.head; walker !== null; ) {
        res.push(fn.call(thisp, walker.value, this));
        walker = walker.next;
      }
      return res;
    };
    Yallist.prototype.mapReverse = function(fn, thisp) {
      thisp = thisp || this;
      var res = new Yallist();
      for (var walker = this.tail; walker !== null; ) {
        res.push(fn.call(thisp, walker.value, this));
        walker = walker.prev;
      }
      return res;
    };
    Yallist.prototype.reduce = function(fn, initial) {
      var acc;
      var walker = this.head;
      if (arguments.length > 1) {
        acc = initial;
      } else if (this.head) {
        walker = this.head.next;
        acc = this.head.value;
      } else {
        throw new TypeError("Reduce of empty list with no initial value");
      }
      for (var i8 = 0; walker !== null; i8++) {
        acc = fn(acc, walker.value, i8);
        walker = walker.next;
      }
      return acc;
    };
    Yallist.prototype.reduceReverse = function(fn, initial) {
      var acc;
      var walker = this.tail;
      if (arguments.length > 1) {
        acc = initial;
      } else if (this.tail) {
        walker = this.tail.prev;
        acc = this.tail.value;
      } else {
        throw new TypeError("Reduce of empty list with no initial value");
      }
      for (var i8 = this.length - 1; walker !== null; i8--) {
        acc = fn(acc, walker.value, i8);
        walker = walker.prev;
      }
      return acc;
    };
    Yallist.prototype.toArray = function() {
      var arr = new Array(this.length);
      for (var i8 = 0, walker = this.head; walker !== null; i8++) {
        arr[i8] = walker.value;
        walker = walker.next;
      }
      return arr;
    };
    Yallist.prototype.toArrayReverse = function() {
      var arr = new Array(this.length);
      for (var i8 = 0, walker = this.tail; walker !== null; i8++) {
        arr[i8] = walker.value;
        walker = walker.prev;
      }
      return arr;
    };
    Yallist.prototype.slice = function(from, to) {
      to = to || this.length;
      if (to < 0) {
        to += this.length;
      }
      from = from || 0;
      if (from < 0) {
        from += this.length;
      }
      var ret = new Yallist();
      if (to < from || to < 0) {
        return ret;
      }
      if (from < 0) {
        from = 0;
      }
      if (to > this.length) {
        to = this.length;
      }
      for (var i8 = 0, walker = this.head; walker !== null && i8 < from; i8++) {
        walker = walker.next;
      }
      for (; walker !== null && i8 < to; i8++, walker = walker.next) {
        ret.push(walker.value);
      }
      return ret;
    };
    Yallist.prototype.sliceReverse = function(from, to) {
      to = to || this.length;
      if (to < 0) {
        to += this.length;
      }
      from = from || 0;
      if (from < 0) {
        from += this.length;
      }
      var ret = new Yallist();
      if (to < from || to < 0) {
        return ret;
      }
      if (from < 0) {
        from = 0;
      }
      if (to > this.length) {
        to = this.length;
      }
      for (var i8 = this.length, walker = this.tail; walker !== null && i8 > to; i8--) {
        walker = walker.prev;
      }
      for (; walker !== null && i8 > from; i8--, walker = walker.prev) {
        ret.push(walker.value);
      }
      return ret;
    };
    Yallist.prototype.splice = function(start, deleteCount, ...nodes) {
      if (start > this.length) {
        start = this.length - 1;
      }
      if (start < 0) {
        start = this.length + start;
      }
      for (var i8 = 0, walker = this.head; walker !== null && i8 < start; i8++) {
        walker = walker.next;
      }
      var ret = [];
      for (var i8 = 0; walker && i8 < deleteCount; i8++) {
        ret.push(walker.value);
        walker = this.removeNode(walker);
      }
      if (walker === null) {
        walker = this.tail;
      }
      if (walker !== this.head && walker !== this.tail) {
        walker = walker.prev;
      }
      for (var i8 = 0; i8 < nodes.length; i8++) {
        walker = insert(this, walker, nodes[i8]);
      }
      return ret;
    };
    Yallist.prototype.reverse = function() {
      var head = this.head;
      var tail = this.tail;
      for (var walker = head; walker !== null; walker = walker.prev) {
        var p8 = walker.prev;
        walker.prev = walker.next;
        walker.next = p8;
      }
      this.head = tail;
      this.tail = head;
      return this;
    };
    function insert(self2, node, value) {
      var inserted = node === self2.head ? new Node(value, null, node, self2) : new Node(value, node, node.next, self2);
      if (inserted.next === null) {
        self2.tail = inserted;
      }
      if (inserted.prev === null) {
        self2.head = inserted;
      }
      self2.length++;
      return inserted;
    }
    function push(self2, item) {
      self2.tail = new Node(item, self2.tail, null, self2);
      if (!self2.head) {
        self2.head = self2.tail;
      }
      self2.length++;
    }
    function unshift(self2, item) {
      self2.head = new Node(item, null, self2.head, self2);
      if (!self2.tail) {
        self2.tail = self2.head;
      }
      self2.length++;
    }
    function Node(value, prev, next, list) {
      if (!(this instanceof Node)) {
        return new Node(value, prev, next, list);
      }
      this.list = list;
      this.value = value;
      if (prev) {
        prev.next = this;
        this.prev = prev;
      } else {
        this.prev = null;
      }
      if (next) {
        next.prev = this;
        this.next = next;
      } else {
        this.next = null;
      }
    }
    try {
      require_iterator()(Yallist);
    } catch (er) {
    }
  }
});

// ../../node_modules/.pnpm/lru-cache@6.0.0/node_modules/lru-cache/index.js
var require_lru_cache = __commonJS({
  "../../node_modules/.pnpm/lru-cache@6.0.0/node_modules/lru-cache/index.js"(exports11, module3) {
    "use strict";
    init_dirname();
    init_buffer2();
    init_process2();
    var Yallist = require_yallist();
    var MAX = Symbol("max");
    var LENGTH = Symbol("length");
    var LENGTH_CALCULATOR = Symbol("lengthCalculator");
    var ALLOW_STALE = Symbol("allowStale");
    var MAX_AGE = Symbol("maxAge");
    var DISPOSE = Symbol("dispose");
    var NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet");
    var LRU_LIST = Symbol("lruList");
    var CACHE = Symbol("cache");
    var UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet");
    var naiveLength = () => 1;
    var LRUCache = class {
      constructor(options) {
        if (typeof options === "number")
          options = { max: options };
        if (!options)
          options = {};
        if (options.max && (typeof options.max !== "number" || options.max < 0))
          throw new TypeError("max must be a non-negative number");
        const max = this[MAX] = options.max || Infinity;
        const lc = options.length || naiveLength;
        this[LENGTH_CALCULATOR] = typeof lc !== "function" ? naiveLength : lc;
        this[ALLOW_STALE] = options.stale || false;
        if (options.maxAge && typeof options.maxAge !== "number")
          throw new TypeError("maxAge must be a number");
        this[MAX_AGE] = options.maxAge || 0;
        this[DISPOSE] = options.dispose;
        this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
        this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
        this.reset();
      }
      set max(mL) {
        if (typeof mL !== "number" || mL < 0)
          throw new TypeError("max must be a non-negative number");
        this[MAX] = mL || Infinity;
        trim2(this);
      }
      get max() {
        return this[MAX];
      }
      set allowStale(allowStale) {
        this[ALLOW_STALE] = !!allowStale;
      }
      get allowStale() {
        return this[ALLOW_STALE];
      }
      set maxAge(mA) {
        if (typeof mA !== "number")
          throw new TypeError("maxAge must be a non-negative number");
        this[MAX_AGE] = mA;
        trim2(this);
      }
      get maxAge() {
        return this[MAX_AGE];
      }
      set lengthCalculator(lC) {
        if (typeof lC !== "function")
          lC = naiveLength;
        if (lC !== this[LENGTH_CALCULATOR]) {
          this[LENGTH_CALCULATOR] = lC;
          this[LENGTH] = 0;
          this[LRU_LIST].forEach((hit) => {
            hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);
            this[LENGTH] += hit.length;
          });
        }
        trim2(this);
      }
      get lengthCalculator() {
        return this[LENGTH_CALCULATOR];
      }
      get length() {
        return this[LENGTH];
      }
      get itemCount() {
        return this[LRU_LIST].length;
      }
      rforEach(fn, thisp) {
        thisp = thisp || this;
        for (let walker = this[LRU_LIST].tail; walker !== null; ) {
          const prev = walker.prev;
          forEachStep(this, fn, walker, thisp);
          walker = prev;
        }
      }
      forEach(fn, thisp) {
        thisp = thisp || this;
        for (let walker = this[LRU_LIST].head; walker !== null; ) {
          const next = walker.next;
          forEachStep(this, fn, walker, thisp);
          walker = next;
        }
      }
      keys() {
        return this[LRU_LIST].toArray().map((k4) => k4.key);
      }
      values() {
        return this[LRU_LIST].toArray().map((k4) => k4.value);
      }
      reset() {
        if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {
          this[LRU_LIST].forEach((hit) => this[DISPOSE](hit.key, hit.value));
        }
        this[CACHE] = /* @__PURE__ */ new Map();
        this[LRU_LIST] = new Yallist();
        this[LENGTH] = 0;
      }
      dump() {
        return this[LRU_LIST].map((hit) => isStale(this, hit) ? false : {
          k: hit.key,
          v: hit.value,
          e: hit.now + (hit.maxAge || 0)
        }).toArray().filter((h8) => h8);
      }
      dumpLru() {
        return this[LRU_LIST];
      }
      set(key, value, maxAge) {
        maxAge = maxAge || this[MAX_AGE];
        if (maxAge && typeof maxAge !== "number")
          throw new TypeError("maxAge must be a number");
        const now = maxAge ? Date.now() : 0;
        const len = this[LENGTH_CALCULATOR](value, key);
        if (this[CACHE].has(key)) {
          if (len > this[MAX]) {
            del(this, this[CACHE].get(key));
            return false;
          }
          const node = this[CACHE].get(key);
          const item = node.value;
          if (this[DISPOSE]) {
            if (!this[NO_DISPOSE_ON_SET])
              this[DISPOSE](key, item.value);
          }
          item.now = now;
          item.maxAge = maxAge;
          item.value = value;
          this[LENGTH] += len - item.length;
          item.length = len;
          this.get(key);
          trim2(this);
          return true;
        }
        const hit = new Entry(key, value, len, now, maxAge);
        if (hit.length > this[MAX]) {
          if (this[DISPOSE])
            this[DISPOSE](key, value);
          return false;
        }
        this[LENGTH] += hit.length;
        this[LRU_LIST].unshift(hit);
        this[CACHE].set(key, this[LRU_LIST].head);
        trim2(this);
        return true;
      }
      has(key) {
        if (!this[CACHE].has(key))
          return false;
        const hit = this[CACHE].get(key).value;
        return !isStale(this, hit);
      }
      get(key) {
        return get3(this, key, true);
      }
      peek(key) {
        return get3(this, key, false);
      }
      pop() {
        const node = this[LRU_LIST].tail;
        if (!node)
          return null;
        del(this, node);
        return node.value;
      }
      del(key) {
        del(this, this[CACHE].get(key));
      }
      load(arr) {
        this.reset();
        const now = Date.now();
        for (let l8 = arr.length - 1; l8 >= 0; l8--) {
          const hit = arr[l8];
          const expiresAt = hit.e || 0;
          if (expiresAt === 0)
            this.set(hit.k, hit.v);
          else {
            const maxAge = expiresAt - now;
            if (maxAge > 0) {
              this.set(hit.k, hit.v, maxAge);
            }
          }
        }
      }
      prune() {
        this[CACHE].forEach((value, key) => get3(this, key, false));
      }
    };
    var get3 = (self2, key, doUse) => {
      const node = self2[CACHE].get(key);
      if (node) {
        const hit = node.value;
        if (isStale(self2, hit)) {
          del(self2, node);
          if (!self2[ALLOW_STALE])
            return void 0;
        } else {
          if (doUse) {
            if (self2[UPDATE_AGE_ON_GET])
              node.value.now = Date.now();
            self2[LRU_LIST].unshiftNode(node);
          }
        }
        return hit.value;
      }
    };
    var isStale = (self2, hit) => {
      if (!hit || !hit.maxAge && !self2[MAX_AGE])
        return false;
      const diff = Date.now() - hit.now;
      return hit.maxAge ? diff > hit.maxAge : self2[MAX_AGE] && diff > self2[MAX_AGE];
    };
    var trim2 = (self2) => {
      if (self2[LENGTH] > self2[MAX]) {
        for (let walker = self2[LRU_LIST].tail; self2[LENGTH] > self2[MAX] && walker !== null; ) {
          const prev = walker.prev;
          del(self2, walker);
          walker = prev;
        }
      }
    };
    var del = (self2, node) => {
      if (node) {
        const hit = node.value;
        if (self2[DISPOSE])
          self2[DISPOSE](hit.key, hit.value);
        self2[LENGTH] -= hit.length;
        self2[CACHE].delete(hit.key);
        self2[LRU_LIST].removeNode(node);
      }
    };
    var Entry = class {
      constructor(key, value, length, now, maxAge) {
        this.key = key;
        this.value = value;
        this.length = length;
        this.now = now;
        this.maxAge = maxAge || 0;
      }
    };
    var forEachStep = (self2, fn, node, thisp) => {
      let hit = node.value;
      if (isStale(self2, hit)) {
        del(self2, node);
        if (!self2[ALLOW_STALE])
          hit = void 0;
      }
      if (hit)
        fn.call(thisp, hit.value, hit.key, self2);
    };
    module3.exports = LRUCache;
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/range.js
var require_range2 = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/range.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var Range = class {
      constructor(range, options) {
        options = parseOptions(options);
        if (range instanceof Range) {
          if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
            return range;
          } else {
            return new Range(range.raw, options);
          }
        }
        if (range instanceof Comparator) {
          this.raw = range.value;
          this.set = [[range]];
          this.format();
          return this;
        }
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        this.raw = range.trim().split(/\s+/).join(" ");
        this.set = this.raw.split("||").map((r9) => this.parseRange(r9.trim())).filter((c8) => c8.length);
        if (!this.set.length) {
          throw new TypeError(`Invalid SemVer Range: ${this.raw}`);
        }
        if (this.set.length > 1) {
          const first = this.set[0];
          this.set = this.set.filter((c8) => !isNullSet(c8[0]));
          if (this.set.length === 0) {
            this.set = [first];
          } else if (this.set.length > 1) {
            for (const c8 of this.set) {
              if (c8.length === 1 && isAny(c8[0])) {
                this.set = [c8];
                break;
              }
            }
          }
        }
        this.format();
      }
      format() {
        this.range = this.set.map((comps) => comps.join(" ").trim()).join("||").trim();
        return this.range;
      }
      toString() {
        return this.range;
      }
      parseRange(range) {
        const memoOpts = (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) | (this.options.loose && FLAG_LOOSE);
        const memoKey = memoOpts + ":" + range;
        const cached = cache.get(memoKey);
        if (cached) {
          return cached;
        }
        const loose = this.options.loose;
        const hr = loose ? re3[t8.HYPHENRANGELOOSE] : re3[t8.HYPHENRANGE];
        range = range.replace(hr, hyphenReplace(this.options.includePrerelease));
        debug("hyphen replace", range);
        range = range.replace(re3[t8.COMPARATORTRIM], comparatorTrimReplace);
        debug("comparator trim", range);
        range = range.replace(re3[t8.TILDETRIM], tildeTrimReplace);
        debug("tilde trim", range);
        range = range.replace(re3[t8.CARETTRIM], caretTrimReplace);
        debug("caret trim", range);
        let rangeList = range.split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options));
        if (loose) {
          rangeList = rangeList.filter((comp) => {
            debug("loose invalid filter", comp, this.options);
            return !!comp.match(re3[t8.COMPARATORLOOSE]);
          });
        }
        debug("range list", rangeList);
        const rangeMap = /* @__PURE__ */ new Map();
        const comparators = rangeList.map((comp) => new Comparator(comp, this.options));
        for (const comp of comparators) {
          if (isNullSet(comp)) {
            return [comp];
          }
          rangeMap.set(comp.value, comp);
        }
        if (rangeMap.size > 1 && rangeMap.has("")) {
          rangeMap.delete("");
        }
        const result = [...rangeMap.values()];
        cache.set(memoKey, result);
        return result;
      }
      intersects(range, options) {
        if (!(range instanceof Range)) {
          throw new TypeError("a Range is required");
        }
        return this.set.some((thisComparators) => {
          return isSatisfiable(thisComparators, options) && range.set.some((rangeComparators) => {
            return isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => {
              return rangeComparators.every((rangeComparator) => {
                return thisComparator.intersects(rangeComparator, options);
              });
            });
          });
        });
      }
      test(version2) {
        if (!version2) {
          return false;
        }
        if (typeof version2 === "string") {
          try {
            version2 = new SemVer(version2, this.options);
          } catch (er) {
            return false;
          }
        }
        for (let i8 = 0; i8 < this.set.length; i8++) {
          if (testSet(this.set[i8], version2, this.options)) {
            return true;
          }
        }
        return false;
      }
    };
    module3.exports = Range;
    var LRU = require_lru_cache();
    var cache = new LRU({ max: 1e3 });
    var parseOptions = require_parse_options();
    var Comparator = require_comparator();
    var debug = require_debug();
    var SemVer = require_semver();
    var {
      safeRe: re3,
      t: t8,
      comparatorTrimReplace,
      tildeTrimReplace,
      caretTrimReplace
    } = require_re();
    var { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = require_constants();
    var isNullSet = (c8) => c8.value === "<0.0.0-0";
    var isAny = (c8) => c8.value === "";
    var isSatisfiable = (comparators, options) => {
      let result = true;
      const remainingComparators = comparators.slice();
      let testComparator = remainingComparators.pop();
      while (result && remainingComparators.length) {
        result = remainingComparators.every((otherComparator) => {
          return testComparator.intersects(otherComparator, options);
        });
        testComparator = remainingComparators.pop();
      }
      return result;
    };
    var parseComparator = (comp, options) => {
      debug("comp", comp, options);
      comp = replaceCarets(comp, options);
      debug("caret", comp);
      comp = replaceTildes(comp, options);
      debug("tildes", comp);
      comp = replaceXRanges(comp, options);
      debug("xrange", comp);
      comp = replaceStars(comp, options);
      debug("stars", comp);
      return comp;
    };
    var isX = (id) => !id || id.toLowerCase() === "x" || id === "*";
    var replaceTildes = (comp, options) => {
      return comp.trim().split(/\s+/).map((c8) => replaceTilde(c8, options)).join(" ");
    };
    var replaceTilde = (comp, options) => {
      const r9 = options.loose ? re3[t8.TILDELOOSE] : re3[t8.TILDE];
      return comp.replace(r9, (_4, M4, m6, p8, pr) => {
        debug("tilde", comp, _4, M4, m6, p8, pr);
        let ret;
        if (isX(M4)) {
          ret = "";
        } else if (isX(m6)) {
          ret = `>=${M4}.0.0 <${+M4 + 1}.0.0-0`;
        } else if (isX(p8)) {
          ret = `>=${M4}.${m6}.0 <${M4}.${+m6 + 1}.0-0`;
        } else if (pr) {
          debug("replaceTilde pr", pr);
          ret = `>=${M4}.${m6}.${p8}-${pr} <${M4}.${+m6 + 1}.0-0`;
        } else {
          ret = `>=${M4}.${m6}.${p8} <${M4}.${+m6 + 1}.0-0`;
        }
        debug("tilde return", ret);
        return ret;
      });
    };
    var replaceCarets = (comp, options) => {
      return comp.trim().split(/\s+/).map((c8) => replaceCaret(c8, options)).join(" ");
    };
    var replaceCaret = (comp, options) => {
      debug("caret", comp, options);
      const r9 = options.loose ? re3[t8.CARETLOOSE] : re3[t8.CARET];
      const z5 = options.includePrerelease ? "-0" : "";
      return comp.replace(r9, (_4, M4, m6, p8, pr) => {
        debug("caret", comp, _4, M4, m6, p8, pr);
        let ret;
        if (isX(M4)) {
          ret = "";
        } else if (isX(m6)) {
          ret = `>=${M4}.0.0${z5} <${+M4 + 1}.0.0-0`;
        } else if (isX(p8)) {
          if (M4 === "0") {
            ret = `>=${M4}.${m6}.0${z5} <${M4}.${+m6 + 1}.0-0`;
          } else {
            ret = `>=${M4}.${m6}.0${z5} <${+M4 + 1}.0.0-0`;
          }
        } else if (pr) {
          debug("replaceCaret pr", pr);
          if (M4 === "0") {
            if (m6 === "0") {
              ret = `>=${M4}.${m6}.${p8}-${pr} <${M4}.${m6}.${+p8 + 1}-0`;
            } else {
              ret = `>=${M4}.${m6}.${p8}-${pr} <${M4}.${+m6 + 1}.0-0`;
            }
          } else {
            ret = `>=${M4}.${m6}.${p8}-${pr} <${+M4 + 1}.0.0-0`;
          }
        } else {
          debug("no pr");
          if (M4 === "0") {
            if (m6 === "0") {
              ret = `>=${M4}.${m6}.${p8}${z5} <${M4}.${m6}.${+p8 + 1}-0`;
            } else {
              ret = `>=${M4}.${m6}.${p8}${z5} <${M4}.${+m6 + 1}.0-0`;
            }
          } else {
            ret = `>=${M4}.${m6}.${p8} <${+M4 + 1}.0.0-0`;
          }
        }
        debug("caret return", ret);
        return ret;
      });
    };
    var replaceXRanges = (comp, options) => {
      debug("replaceXRanges", comp, options);
      return comp.split(/\s+/).map((c8) => replaceXRange(c8, options)).join(" ");
    };
    var replaceXRange = (comp, options) => {
      comp = comp.trim();
      const r9 = options.loose ? re3[t8.XRANGELOOSE] : re3[t8.XRANGE];
      return comp.replace(r9, (ret, gtlt, M4, m6, p8, pr) => {
        debug("xRange", comp, ret, gtlt, M4, m6, p8, pr);
        const xM = isX(M4);
        const xm = xM || isX(m6);
        const xp = xm || isX(p8);
        const anyX = xp;
        if (gtlt === "=" && anyX) {
          gtlt = "";
        }
        pr = options.includePrerelease ? "-0" : "";
        if (xM) {
          if (gtlt === ">" || gtlt === "<") {
            ret = "<0.0.0-0";
          } else {
            ret = "*";
          }
        } else if (gtlt && anyX) {
          if (xm) {
            m6 = 0;
          }
          p8 = 0;
          if (gtlt === ">") {
            gtlt = ">=";
            if (xm) {
              M4 = +M4 + 1;
              m6 = 0;
              p8 = 0;
            } else {
              m6 = +m6 + 1;
              p8 = 0;
            }
          } else if (gtlt === "<=") {
            gtlt = "<";
            if (xm) {
              M4 = +M4 + 1;
            } else {
              m6 = +m6 + 1;
            }
          }
          if (gtlt === "<") {
            pr = "-0";
          }
          ret = `${gtlt + M4}.${m6}.${p8}${pr}`;
        } else if (xm) {
          ret = `>=${M4}.0.0${pr} <${+M4 + 1}.0.0-0`;
        } else if (xp) {
          ret = `>=${M4}.${m6}.0${pr} <${M4}.${+m6 + 1}.0-0`;
        }
        debug("xRange return", ret);
        return ret;
      });
    };
    var replaceStars = (comp, options) => {
      debug("replaceStars", comp, options);
      return comp.trim().replace(re3[t8.STAR], "");
    };
    var replaceGTE0 = (comp, options) => {
      debug("replaceGTE0", comp, options);
      return comp.trim().replace(re3[options.includePrerelease ? t8.GTE0PRE : t8.GTE0], "");
    };
    var hyphenReplace = (incPr) => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) => {
      if (isX(fM)) {
        from = "";
      } else if (isX(fm)) {
        from = `>=${fM}.0.0${incPr ? "-0" : ""}`;
      } else if (isX(fp)) {
        from = `>=${fM}.${fm}.0${incPr ? "-0" : ""}`;
      } else if (fpr) {
        from = `>=${from}`;
      } else {
        from = `>=${from}${incPr ? "-0" : ""}`;
      }
      if (isX(tM)) {
        to = "";
      } else if (isX(tm)) {
        to = `<${+tM + 1}.0.0-0`;
      } else if (isX(tp)) {
        to = `<${tM}.${+tm + 1}.0-0`;
      } else if (tpr) {
        to = `<=${tM}.${tm}.${tp}-${tpr}`;
      } else if (incPr) {
        to = `<${tM}.${tm}.${+tp + 1}-0`;
      } else {
        to = `<=${to}`;
      }
      return `${from} ${to}`.trim();
    };
    var testSet = (set, version2, options) => {
      for (let i8 = 0; i8 < set.length; i8++) {
        if (!set[i8].test(version2)) {
          return false;
        }
      }
      if (version2.prerelease.length && !options.includePrerelease) {
        for (let i8 = 0; i8 < set.length; i8++) {
          debug(set[i8].semver);
          if (set[i8].semver === Comparator.ANY) {
            continue;
          }
          if (set[i8].semver.prerelease.length > 0) {
            const allowed = set[i8].semver;
            if (allowed.major === version2.major && allowed.minor === version2.minor && allowed.patch === version2.patch) {
              return true;
            }
          }
        }
        return false;
      }
      return true;
    };
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/comparator.js
var require_comparator = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/classes/comparator.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var ANY = Symbol("SemVer ANY");
    var Comparator = class {
      static get ANY() {
        return ANY;
      }
      constructor(comp, options) {
        options = parseOptions(options);
        if (comp instanceof Comparator) {
          if (comp.loose === !!options.loose) {
            return comp;
          } else {
            comp = comp.value;
          }
        }
        comp = comp.trim().split(/\s+/).join(" ");
        debug("comparator", comp, options);
        this.options = options;
        this.loose = !!options.loose;
        this.parse(comp);
        if (this.semver === ANY) {
          this.value = "";
        } else {
          this.value = this.operator + this.semver.version;
        }
        debug("comp", this);
      }
      parse(comp) {
        const r9 = this.options.loose ? re3[t8.COMPARATORLOOSE] : re3[t8.COMPARATOR];
        const m6 = comp.match(r9);
        if (!m6) {
          throw new TypeError(`Invalid comparator: ${comp}`);
        }
        this.operator = m6[1] !== void 0 ? m6[1] : "";
        if (this.operator === "=") {
          this.operator = "";
        }
        if (!m6[2]) {
          this.semver = ANY;
        } else {
          this.semver = new SemVer(m6[2], this.options.loose);
        }
      }
      toString() {
        return this.value;
      }
      test(version2) {
        debug("Comparator.test", version2, this.options.loose);
        if (this.semver === ANY || version2 === ANY) {
          return true;
        }
        if (typeof version2 === "string") {
          try {
            version2 = new SemVer(version2, this.options);
          } catch (er) {
            return false;
          }
        }
        return cmp(version2, this.operator, this.semver, this.options);
      }
      intersects(comp, options) {
        if (!(comp instanceof Comparator)) {
          throw new TypeError("a Comparator is required");
        }
        if (this.operator === "") {
          if (this.value === "") {
            return true;
          }
          return new Range(comp.value, options).test(this.value);
        } else if (comp.operator === "") {
          if (comp.value === "") {
            return true;
          }
          return new Range(this.value, options).test(comp.semver);
        }
        options = parseOptions(options);
        if (options.includePrerelease && (this.value === "<0.0.0-0" || comp.value === "<0.0.0-0")) {
          return false;
        }
        if (!options.includePrerelease && (this.value.startsWith("<0.0.0") || comp.value.startsWith("<0.0.0"))) {
          return false;
        }
        if (this.operator.startsWith(">") && comp.operator.startsWith(">")) {
          return true;
        }
        if (this.operator.startsWith("<") && comp.operator.startsWith("<")) {
          return true;
        }
        if (this.semver.version === comp.semver.version && this.operator.includes("=") && comp.operator.includes("=")) {
          return true;
        }
        if (cmp(this.semver, "<", comp.semver, options) && this.operator.startsWith(">") && comp.operator.startsWith("<")) {
          return true;
        }
        if (cmp(this.semver, ">", comp.semver, options) && this.operator.startsWith("<") && comp.operator.startsWith(">")) {
          return true;
        }
        return false;
      }
    };
    module3.exports = Comparator;
    var parseOptions = require_parse_options();
    var { safeRe: re3, t: t8 } = require_re();
    var cmp = require_cmp();
    var debug = require_debug();
    var SemVer = require_semver();
    var Range = require_range2();
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/satisfies.js
var require_satisfies = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/functions/satisfies.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var Range = require_range2();
    var satisfies = (version2, range, options) => {
      try {
        range = new Range(range, options);
      } catch (er) {
        return false;
      }
      return range.test(version2);
    };
    module3.exports = satisfies;
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/to-comparators.js
var require_to_comparators = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/to-comparators.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var Range = require_range2();
    var toComparators = (range, options) => new Range(range, options).set.map((comp) => comp.map((c8) => c8.value).join(" ").trim().split(" "));
    module3.exports = toComparators;
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/max-satisfying.js
var require_max_satisfying = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/max-satisfying.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var SemVer = require_semver();
    var Range = require_range2();
    var maxSatisfying = (versions2, range, options) => {
      let max = null;
      let maxSV = null;
      let rangeObj = null;
      try {
        rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions2.forEach((v6) => {
        if (rangeObj.test(v6)) {
          if (!max || maxSV.compare(v6) === -1) {
            max = v6;
            maxSV = new SemVer(max, options);
          }
        }
      });
      return max;
    };
    module3.exports = maxSatisfying;
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/min-satisfying.js
var require_min_satisfying = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/min-satisfying.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var SemVer = require_semver();
    var Range = require_range2();
    var minSatisfying = (versions2, range, options) => {
      let min = null;
      let minSV = null;
      let rangeObj = null;
      try {
        rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions2.forEach((v6) => {
        if (rangeObj.test(v6)) {
          if (!min || minSV.compare(v6) === 1) {
            min = v6;
            minSV = new SemVer(min, options);
          }
        }
      });
      return min;
    };
    module3.exports = minSatisfying;
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/min-version.js
var require_min_version = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/min-version.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var SemVer = require_semver();
    var Range = require_range2();
    var gt = require_gt();
    var minVersion = (range, loose) => {
      range = new Range(range, loose);
      let minver = new SemVer("0.0.0");
      if (range.test(minver)) {
        return minver;
      }
      minver = new SemVer("0.0.0-0");
      if (range.test(minver)) {
        return minver;
      }
      minver = null;
      for (let i8 = 0; i8 < range.set.length; ++i8) {
        const comparators = range.set[i8];
        let setMin = null;
        comparators.forEach((comparator) => {
          const compver = new SemVer(comparator.semver.version);
          switch (comparator.operator) {
            case ">":
              if (compver.prerelease.length === 0) {
                compver.patch++;
              } else {
                compver.prerelease.push(0);
              }
              compver.raw = compver.format();
            case "":
            case ">=":
              if (!setMin || gt(compver, setMin)) {
                setMin = compver;
              }
              break;
            case "<":
            case "<=":
              break;
            default:
              throw new Error(`Unexpected operation: ${comparator.operator}`);
          }
        });
        if (setMin && (!minver || gt(minver, setMin))) {
          minver = setMin;
        }
      }
      if (minver && range.test(minver)) {
        return minver;
      }
      return null;
    };
    module3.exports = minVersion;
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/valid.js
var require_valid2 = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/valid.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var Range = require_range2();
    var validRange = (range, options) => {
      try {
        return new Range(range, options).range || "*";
      } catch (er) {
        return null;
      }
    };
    module3.exports = validRange;
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/outside.js
var require_outside = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/outside.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var SemVer = require_semver();
    var Comparator = require_comparator();
    var { ANY } = Comparator;
    var Range = require_range2();
    var satisfies = require_satisfies();
    var gt = require_gt();
    var lt = require_lt();
    var lte = require_lte();
    var gte = require_gte();
    var outside = (version2, range, hilo, options) => {
      version2 = new SemVer(version2, options);
      range = new Range(range, options);
      let gtfn, ltefn, ltfn, comp, ecomp;
      switch (hilo) {
        case ">":
          gtfn = gt;
          ltefn = lte;
          ltfn = lt;
          comp = ">";
          ecomp = ">=";
          break;
        case "<":
          gtfn = lt;
          ltefn = gte;
          ltfn = gt;
          comp = "<";
          ecomp = "<=";
          break;
        default:
          throw new TypeError('Must provide a hilo val of "<" or ">"');
      }
      if (satisfies(version2, range, options)) {
        return false;
      }
      for (let i8 = 0; i8 < range.set.length; ++i8) {
        const comparators = range.set[i8];
        let high = null;
        let low = null;
        comparators.forEach((comparator) => {
          if (comparator.semver === ANY) {
            comparator = new Comparator(">=0.0.0");
          }
          high = high || comparator;
          low = low || comparator;
          if (gtfn(comparator.semver, high.semver, options)) {
            high = comparator;
          } else if (ltfn(comparator.semver, low.semver, options)) {
            low = comparator;
          }
        });
        if (high.operator === comp || high.operator === ecomp) {
          return false;
        }
        if ((!low.operator || low.operator === comp) && ltefn(version2, low.semver)) {
          return false;
        } else if (low.operator === ecomp && ltfn(version2, low.semver)) {
          return false;
        }
      }
      return true;
    };
    module3.exports = outside;
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/gtr.js
var require_gtr = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/gtr.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var outside = require_outside();
    var gtr = (version2, range, options) => outside(version2, range, ">", options);
    module3.exports = gtr;
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/ltr.js
var require_ltr = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/ltr.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var outside = require_outside();
    var ltr = (version2, range, options) => outside(version2, range, "<", options);
    module3.exports = ltr;
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/intersects.js
var require_intersects = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/intersects.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var Range = require_range2();
    var intersects = (r1, r22, options) => {
      r1 = new Range(r1, options);
      r22 = new Range(r22, options);
      return r1.intersects(r22, options);
    };
    module3.exports = intersects;
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/simplify.js
var require_simplify = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/simplify.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var satisfies = require_satisfies();
    var compare = require_compare();
    module3.exports = (versions2, range, options) => {
      const set = [];
      let first = null;
      let prev = null;
      const v6 = versions2.sort((a8, b5) => compare(a8, b5, options));
      for (const version2 of v6) {
        const included = satisfies(version2, range, options);
        if (included) {
          prev = version2;
          if (!first) {
            first = version2;
          }
        } else {
          if (prev) {
            set.push([first, prev]);
          }
          prev = null;
          first = null;
        }
      }
      if (first) {
        set.push([first, null]);
      }
      const ranges = [];
      for (const [min, max] of set) {
        if (min === max) {
          ranges.push(min);
        } else if (!max && min === v6[0]) {
          ranges.push("*");
        } else if (!max) {
          ranges.push(`>=${min}`);
        } else if (min === v6[0]) {
          ranges.push(`<=${max}`);
        } else {
          ranges.push(`${min} - ${max}`);
        }
      }
      const simplified = ranges.join(" || ");
      const original = typeof range.raw === "string" ? range.raw : String(range);
      return simplified.length < original.length ? simplified : range;
    };
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/subset.js
var require_subset = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/ranges/subset.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var Range = require_range2();
    var Comparator = require_comparator();
    var { ANY } = Comparator;
    var satisfies = require_satisfies();
    var compare = require_compare();
    var subset = (sub, dom, options = {}) => {
      if (sub === dom) {
        return true;
      }
      sub = new Range(sub, options);
      dom = new Range(dom, options);
      let sawNonNull = false;
      OUTER:
        for (const simpleSub of sub.set) {
          for (const simpleDom of dom.set) {
            const isSub = simpleSubset(simpleSub, simpleDom, options);
            sawNonNull = sawNonNull || isSub !== null;
            if (isSub) {
              continue OUTER;
            }
          }
          if (sawNonNull) {
            return false;
          }
        }
      return true;
    };
    var minimumVersionWithPreRelease = [new Comparator(">=0.0.0-0")];
    var minimumVersion = [new Comparator(">=0.0.0")];
    var simpleSubset = (sub, dom, options) => {
      if (sub === dom) {
        return true;
      }
      if (sub.length === 1 && sub[0].semver === ANY) {
        if (dom.length === 1 && dom[0].semver === ANY) {
          return true;
        } else if (options.includePrerelease) {
          sub = minimumVersionWithPreRelease;
        } else {
          sub = minimumVersion;
        }
      }
      if (dom.length === 1 && dom[0].semver === ANY) {
        if (options.includePrerelease) {
          return true;
        } else {
          dom = minimumVersion;
        }
      }
      const eqSet = /* @__PURE__ */ new Set();
      let gt, lt;
      for (const c8 of sub) {
        if (c8.operator === ">" || c8.operator === ">=") {
          gt = higherGT(gt, c8, options);
        } else if (c8.operator === "<" || c8.operator === "<=") {
          lt = lowerLT(lt, c8, options);
        } else {
          eqSet.add(c8.semver);
        }
      }
      if (eqSet.size > 1) {
        return null;
      }
      let gtltComp;
      if (gt && lt) {
        gtltComp = compare(gt.semver, lt.semver, options);
        if (gtltComp > 0) {
          return null;
        } else if (gtltComp === 0 && (gt.operator !== ">=" || lt.operator !== "<=")) {
          return null;
        }
      }
      for (const eq of eqSet) {
        if (gt && !satisfies(eq, String(gt), options)) {
          return null;
        }
        if (lt && !satisfies(eq, String(lt), options)) {
          return null;
        }
        for (const c8 of dom) {
          if (!satisfies(eq, String(c8), options)) {
            return false;
          }
        }
        return true;
      }
      let higher, lower;
      let hasDomLT, hasDomGT;
      let needDomLTPre = lt && !options.includePrerelease && lt.semver.prerelease.length ? lt.semver : false;
      let needDomGTPre = gt && !options.includePrerelease && gt.semver.prerelease.length ? gt.semver : false;
      if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt.operator === "<" && needDomLTPre.prerelease[0] === 0) {
        needDomLTPre = false;
      }
      for (const c8 of dom) {
        hasDomGT = hasDomGT || c8.operator === ">" || c8.operator === ">=";
        hasDomLT = hasDomLT || c8.operator === "<" || c8.operator === "<=";
        if (gt) {
          if (needDomGTPre) {
            if (c8.semver.prerelease && c8.semver.prerelease.length && c8.semver.major === needDomGTPre.major && c8.semver.minor === needDomGTPre.minor && c8.semver.patch === needDomGTPre.patch) {
              needDomGTPre = false;
            }
          }
          if (c8.operator === ">" || c8.operator === ">=") {
            higher = higherGT(gt, c8, options);
            if (higher === c8 && higher !== gt) {
              return false;
            }
          } else if (gt.operator === ">=" && !satisfies(gt.semver, String(c8), options)) {
            return false;
          }
        }
        if (lt) {
          if (needDomLTPre) {
            if (c8.semver.prerelease && c8.semver.prerelease.length && c8.semver.major === needDomLTPre.major && c8.semver.minor === needDomLTPre.minor && c8.semver.patch === needDomLTPre.patch) {
              needDomLTPre = false;
            }
          }
          if (c8.operator === "<" || c8.operator === "<=") {
            lower = lowerLT(lt, c8, options);
            if (lower === c8 && lower !== lt) {
              return false;
            }
          } else if (lt.operator === "<=" && !satisfies(lt.semver, String(c8), options)) {
            return false;
          }
        }
        if (!c8.operator && (lt || gt) && gtltComp !== 0) {
          return false;
        }
      }
      if (gt && hasDomLT && !lt && gtltComp !== 0) {
        return false;
      }
      if (lt && hasDomGT && !gt && gtltComp !== 0) {
        return false;
      }
      if (needDomGTPre || needDomLTPre) {
        return false;
      }
      return true;
    };
    var higherGT = (a8, b5, options) => {
      if (!a8) {
        return b5;
      }
      const comp = compare(a8.semver, b5.semver, options);
      return comp > 0 ? a8 : comp < 0 ? b5 : b5.operator === ">" && a8.operator === ">=" ? b5 : a8;
    };
    var lowerLT = (a8, b5, options) => {
      if (!a8) {
        return b5;
      }
      const comp = compare(a8.semver, b5.semver, options);
      return comp < 0 ? a8 : comp > 0 ? b5 : b5.operator === "<" && a8.operator === "<=" ? b5 : a8;
    };
    module3.exports = subset;
  }
});

// ../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/index.js
var require_semver2 = __commonJS({
  "../../node_modules/.pnpm/semver@7.5.4/node_modules/semver/index.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var internalRe = require_re();
    var constants2 = require_constants();
    var SemVer = require_semver();
    var identifiers = require_identifiers();
    var parse2 = require_parse2();
    var valid = require_valid();
    var clean = require_clean();
    var inc = require_inc();
    var diff = require_diff();
    var major = require_major();
    var minor = require_minor();
    var patch = require_patch();
    var prerelease = require_prerelease();
    var compare = require_compare();
    var rcompare = require_rcompare();
    var compareLoose = require_compare_loose();
    var compareBuild = require_compare_build();
    var sort = require_sort();
    var rsort = require_rsort();
    var gt = require_gt();
    var lt = require_lt();
    var eq = require_eq();
    var neq = require_neq();
    var gte = require_gte();
    var lte = require_lte();
    var cmp = require_cmp();
    var coerce2 = require_coerce();
    var Comparator = require_comparator();
    var Range = require_range2();
    var satisfies = require_satisfies();
    var toComparators = require_to_comparators();
    var maxSatisfying = require_max_satisfying();
    var minSatisfying = require_min_satisfying();
    var minVersion = require_min_version();
    var validRange = require_valid2();
    var outside = require_outside();
    var gtr = require_gtr();
    var ltr = require_ltr();
    var intersects = require_intersects();
    var simplifyRange = require_simplify();
    var subset = require_subset();
    module3.exports = {
      parse: parse2,
      valid,
      clean,
      inc,
      diff,
      major,
      minor,
      patch,
      prerelease,
      compare,
      rcompare,
      compareLoose,
      compareBuild,
      sort,
      rsort,
      gt,
      lt,
      eq,
      neq,
      gte,
      lte,
      cmp,
      coerce: coerce2,
      Comparator,
      Range,
      satisfies,
      toComparators,
      maxSatisfying,
      minSatisfying,
      minVersion,
      validRange,
      outside,
      gtr,
      ltr,
      intersects,
      simplifyRange,
      subset,
      SemVer,
      re: internalRe.re,
      src: internalRe.src,
      tokens: internalRe.t,
      SEMVER_SPEC_VERSION: constants2.SEMVER_SPEC_VERSION,
      RELEASE_TYPES: constants2.RELEASE_TYPES,
      compareIdentifiers: identifiers.compareIdentifiers,
      rcompareIdentifiers: identifiers.rcompareIdentifiers
    };
  }
});

// ../../node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/asymmetricKeyDetailsSupported.js
var require_asymmetricKeyDetailsSupported = __commonJS({
  "../../node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/asymmetricKeyDetailsSupported.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var semver = require_semver2();
    module3.exports = semver.satisfies(process_exports.version, ">=15.7.0");
  }
});

// ../../node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/rsaPssKeyDetailsSupported.js
var require_rsaPssKeyDetailsSupported = __commonJS({
  "../../node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/rsaPssKeyDetailsSupported.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var semver = require_semver2();
    module3.exports = semver.satisfies(process_exports.version, ">=16.9.0");
  }
});

// ../../node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/validateAsymmetricKey.js
var require_validateAsymmetricKey = __commonJS({
  "../../node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/validateAsymmetricKey.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var ASYMMETRIC_KEY_DETAILS_SUPPORTED = require_asymmetricKeyDetailsSupported();
    var RSA_PSS_KEY_DETAILS_SUPPORTED = require_rsaPssKeyDetailsSupported();
    var allowedAlgorithmsForKeys = {
      "ec": ["ES256", "ES384", "ES512"],
      "rsa": ["RS256", "PS256", "RS384", "PS384", "RS512", "PS512"],
      "rsa-pss": ["PS256", "PS384", "PS512"]
    };
    var allowedCurves = {
      ES256: "prime256v1",
      ES384: "secp384r1",
      ES512: "secp521r1"
    };
    module3.exports = function(algorithm, key) {
      if (!algorithm || !key)
        return;
      const keyType = key.asymmetricKeyType;
      if (!keyType)
        return;
      const allowedAlgorithms = allowedAlgorithmsForKeys[keyType];
      if (!allowedAlgorithms) {
        throw new Error(`Unknown key type "${keyType}".`);
      }
      if (!allowedAlgorithms.includes(algorithm)) {
        throw new Error(`"alg" parameter for "${keyType}" key type must be one of: ${allowedAlgorithms.join(", ")}.`);
      }
      if (ASYMMETRIC_KEY_DETAILS_SUPPORTED) {
        switch (keyType) {
          case "ec":
            const keyCurve = key.asymmetricKeyDetails.namedCurve;
            const allowedCurve = allowedCurves[algorithm];
            if (keyCurve !== allowedCurve) {
              throw new Error(`"alg" parameter "${algorithm}" requires curve "${allowedCurve}".`);
            }
            break;
          case "rsa-pss":
            if (RSA_PSS_KEY_DETAILS_SUPPORTED) {
              const length = parseInt(algorithm.slice(-3), 10);
              const { hashAlgorithm, mgf1HashAlgorithm, saltLength } = key.asymmetricKeyDetails;
              if (hashAlgorithm !== `sha${length}` || mgf1HashAlgorithm !== hashAlgorithm) {
                throw new Error(`Invalid key for this operation, its RSA-PSS parameters do not meet the requirements of "alg" ${algorithm}.`);
              }
              if (saltLength !== void 0 && saltLength > length >> 3) {
                throw new Error(`Invalid key for this operation, its RSA-PSS parameter saltLength does not meet the requirements of "alg" ${algorithm}.`);
              }
            }
            break;
        }
      }
    };
  }
});

// ../../node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/psSupported.js
var require_psSupported = __commonJS({
  "../../node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/psSupported.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var semver = require_semver2();
    module3.exports = semver.satisfies(process_exports.version, "^6.12.0 || >=8.0.0");
  }
});

// ../../node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/verify.js
var require_verify = __commonJS({
  "../../node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/verify.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var JsonWebTokenError = require_JsonWebTokenError();
    var NotBeforeError = require_NotBeforeError();
    var TokenExpiredError = require_TokenExpiredError();
    var decode = require_decode();
    var timespan = require_timespan();
    var validateAsymmetricKey = require_validateAsymmetricKey();
    var PS_SUPPORTED = require_psSupported();
    var jws = require_jws();
    var { KeyObject, createSecretKey, createPublicKey } = (init_crypto(), __toCommonJS(crypto_exports));
    var PUB_KEY_ALGS = ["RS256", "RS384", "RS512"];
    var EC_KEY_ALGS = ["ES256", "ES384", "ES512"];
    var RSA_KEY_ALGS = ["RS256", "RS384", "RS512"];
    var HS_ALGS = ["HS256", "HS384", "HS512"];
    if (PS_SUPPORTED) {
      PUB_KEY_ALGS.splice(PUB_KEY_ALGS.length, 0, "PS256", "PS384", "PS512");
      RSA_KEY_ALGS.splice(RSA_KEY_ALGS.length, 0, "PS256", "PS384", "PS512");
    }
    module3.exports = function(jwtString, secretOrPublicKey, options, callback) {
      if (typeof options === "function" && !callback) {
        callback = options;
        options = {};
      }
      if (!options) {
        options = {};
      }
      options = Object.assign({}, options);
      let done;
      if (callback) {
        done = callback;
      } else {
        done = function(err, data) {
          if (err)
            throw err;
          return data;
        };
      }
      if (options.clockTimestamp && typeof options.clockTimestamp !== "number") {
        return done(new JsonWebTokenError("clockTimestamp must be a number"));
      }
      if (options.nonce !== void 0 && (typeof options.nonce !== "string" || options.nonce.trim() === "")) {
        return done(new JsonWebTokenError("nonce must be a non-empty string"));
      }
      if (options.allowInvalidAsymmetricKeyTypes !== void 0 && typeof options.allowInvalidAsymmetricKeyTypes !== "boolean") {
        return done(new JsonWebTokenError("allowInvalidAsymmetricKeyTypes must be a boolean"));
      }
      const clockTimestamp = options.clockTimestamp || Math.floor(Date.now() / 1e3);
      if (!jwtString) {
        return done(new JsonWebTokenError("jwt must be provided"));
      }
      if (typeof jwtString !== "string") {
        return done(new JsonWebTokenError("jwt must be a string"));
      }
      const parts = jwtString.split(".");
      if (parts.length !== 3) {
        return done(new JsonWebTokenError("jwt malformed"));
      }
      let decodedToken;
      try {
        decodedToken = decode(jwtString, { complete: true });
      } catch (err) {
        return done(err);
      }
      if (!decodedToken) {
        return done(new JsonWebTokenError("invalid token"));
      }
      const header = decodedToken.header;
      let getSecret;
      if (typeof secretOrPublicKey === "function") {
        if (!callback) {
          return done(new JsonWebTokenError("verify must be called asynchronous if secret or public key is provided as a callback"));
        }
        getSecret = secretOrPublicKey;
      } else {
        getSecret = function(header2, secretCallback) {
          return secretCallback(null, secretOrPublicKey);
        };
      }
      return getSecret(header, function(err, secretOrPublicKey2) {
        if (err) {
          return done(new JsonWebTokenError("error in secret or public key callback: " + err.message));
        }
        const hasSignature = parts[2].trim() !== "";
        if (!hasSignature && secretOrPublicKey2) {
          return done(new JsonWebTokenError("jwt signature is required"));
        }
        if (hasSignature && !secretOrPublicKey2) {
          return done(new JsonWebTokenError("secret or public key must be provided"));
        }
        if (!hasSignature && !options.algorithms) {
          return done(new JsonWebTokenError('please specify "none" in "algorithms" to verify unsigned tokens'));
        }
        if (secretOrPublicKey2 != null && !(secretOrPublicKey2 instanceof KeyObject)) {
          try {
            secretOrPublicKey2 = createPublicKey(secretOrPublicKey2);
          } catch (_4) {
            try {
              secretOrPublicKey2 = createSecretKey(typeof secretOrPublicKey2 === "string" ? Buffer2.from(secretOrPublicKey2) : secretOrPublicKey2);
            } catch (_5) {
              return done(new JsonWebTokenError("secretOrPublicKey is not valid key material"));
            }
          }
        }
        if (!options.algorithms) {
          if (secretOrPublicKey2.type === "secret") {
            options.algorithms = HS_ALGS;
          } else if (["rsa", "rsa-pss"].includes(secretOrPublicKey2.asymmetricKeyType)) {
            options.algorithms = RSA_KEY_ALGS;
          } else if (secretOrPublicKey2.asymmetricKeyType === "ec") {
            options.algorithms = EC_KEY_ALGS;
          } else {
            options.algorithms = PUB_KEY_ALGS;
          }
        }
        if (options.algorithms.indexOf(decodedToken.header.alg) === -1) {
          return done(new JsonWebTokenError("invalid algorithm"));
        }
        if (header.alg.startsWith("HS") && secretOrPublicKey2.type !== "secret") {
          return done(new JsonWebTokenError(`secretOrPublicKey must be a symmetric key when using ${header.alg}`));
        } else if (/^(?:RS|PS|ES)/.test(header.alg) && secretOrPublicKey2.type !== "public") {
          return done(new JsonWebTokenError(`secretOrPublicKey must be an asymmetric key when using ${header.alg}`));
        }
        if (!options.allowInvalidAsymmetricKeyTypes) {
          try {
            validateAsymmetricKey(header.alg, secretOrPublicKey2);
          } catch (e11) {
            return done(e11);
          }
        }
        let valid;
        try {
          valid = jws.verify(jwtString, decodedToken.header.alg, secretOrPublicKey2);
        } catch (e11) {
          return done(e11);
        }
        if (!valid) {
          return done(new JsonWebTokenError("invalid signature"));
        }
        const payload = decodedToken.payload;
        if (typeof payload.nbf !== "undefined" && !options.ignoreNotBefore) {
          if (typeof payload.nbf !== "number") {
            return done(new JsonWebTokenError("invalid nbf value"));
          }
          if (payload.nbf > clockTimestamp + (options.clockTolerance || 0)) {
            return done(new NotBeforeError("jwt not active", new Date(payload.nbf * 1e3)));
          }
        }
        if (typeof payload.exp !== "undefined" && !options.ignoreExpiration) {
          if (typeof payload.exp !== "number") {
            return done(new JsonWebTokenError("invalid exp value"));
          }
          if (clockTimestamp >= payload.exp + (options.clockTolerance || 0)) {
            return done(new TokenExpiredError("jwt expired", new Date(payload.exp * 1e3)));
          }
        }
        if (options.audience) {
          const audiences = Array.isArray(options.audience) ? options.audience : [options.audience];
          const target = Array.isArray(payload.aud) ? payload.aud : [payload.aud];
          const match = target.some(function(targetAudience) {
            return audiences.some(function(audience) {
              return audience instanceof RegExp ? audience.test(targetAudience) : audience === targetAudience;
            });
          });
          if (!match) {
            return done(new JsonWebTokenError("jwt audience invalid. expected: " + audiences.join(" or ")));
          }
        }
        if (options.issuer) {
          const invalid_issuer = typeof options.issuer === "string" && payload.iss !== options.issuer || Array.isArray(options.issuer) && options.issuer.indexOf(payload.iss) === -1;
          if (invalid_issuer) {
            return done(new JsonWebTokenError("jwt issuer invalid. expected: " + options.issuer));
          }
        }
        if (options.subject) {
          if (payload.sub !== options.subject) {
            return done(new JsonWebTokenError("jwt subject invalid. expected: " + options.subject));
          }
        }
        if (options.jwtid) {
          if (payload.jti !== options.jwtid) {
            return done(new JsonWebTokenError("jwt jwtid invalid. expected: " + options.jwtid));
          }
        }
        if (options.nonce) {
          if (payload.nonce !== options.nonce) {
            return done(new JsonWebTokenError("jwt nonce invalid. expected: " + options.nonce));
          }
        }
        if (options.maxAge) {
          if (typeof payload.iat !== "number") {
            return done(new JsonWebTokenError("iat required when maxAge is specified"));
          }
          const maxAgeTimestamp = timespan(options.maxAge, payload.iat);
          if (typeof maxAgeTimestamp === "undefined") {
            return done(new JsonWebTokenError('"maxAge" should be a number of seconds or string representing a timespan eg: "1d", "20h", 60'));
          }
          if (clockTimestamp >= maxAgeTimestamp + (options.clockTolerance || 0)) {
            return done(new TokenExpiredError("maxAge exceeded", new Date(maxAgeTimestamp * 1e3)));
          }
        }
        if (options.complete === true) {
          const signature = decodedToken.signature;
          return done(null, {
            header,
            payload,
            signature
          });
        }
        return done(null, payload);
      });
    };
  }
});

// ../../node_modules/.pnpm/lodash.includes@4.3.0/node_modules/lodash.includes/index.js
var require_lodash = __commonJS({
  "../../node_modules/.pnpm/lodash.includes@4.3.0/node_modules/lodash.includes/index.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var INFINITY = 1 / 0;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var MAX_INTEGER = 17976931348623157e292;
    var NAN = 0 / 0;
    var argsTag = "[object Arguments]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var reTrim = /^\s+|\s+$/g;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var freeParseInt = parseInt;
    function arrayMap(array, iteratee) {
      var index = -1, length = array ? array.length : 0, result = Array(length);
      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
      while (fromRight ? index-- : ++index < length) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }
    function baseIndexOf(array, value, fromIndex) {
      if (value !== value) {
        return baseFindIndex(array, baseIsNaN, fromIndex);
      }
      var index = fromIndex - 1, length = array.length;
      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }
    function baseIsNaN(value) {
      return value !== value;
    }
    function baseTimes(n9, iteratee) {
      var index = -1, result = Array(n9);
      while (++index < n9) {
        result[index] = iteratee(index);
      }
      return result;
    }
    function baseValues(object, props) {
      return arrayMap(props, function(key) {
        return object[key];
      });
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    var objectProto = Object.prototype;
    var hasOwnProperty2 = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var nativeKeys = overArg(Object.keys, Object);
    var nativeMax = Math.max;
    function arrayLikeKeys(value, inherited) {
      var result = isArray4(value) || isArguments(value) ? baseTimes(value.length, String) : [];
      var length = result.length, skipIndexes = !!length;
      for (var key in value) {
        if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && (key == "length" || isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty2.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString4(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
    }
    function isArguments(value) {
      return isArrayLikeObject(value) && hasOwnProperty2.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
    }
    var isArray4 = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction4(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    function isFunction4(value) {
      var tag = isObject5(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject5(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isString4(value) {
      return typeof value == "string" || !isArray4(value) && isObjectLike(value) && objectToString.call(value) == stringTag;
    }
    function isSymbol3(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = value < 0 ? -1 : 1;
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }
    function toInteger(value) {
      var result = toFinite(value), remainder = result % 1;
      return result === result ? remainder ? result - remainder : result : 0;
    }
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol3(value)) {
        return NAN;
      }
      if (isObject5(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject5(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, "");
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    function values(object) {
      return object ? baseValues(object, keys(object)) : [];
    }
    module3.exports = includes;
  }
});

// ../../node_modules/.pnpm/lodash.isboolean@3.0.3/node_modules/lodash.isboolean/index.js
var require_lodash2 = __commonJS({
  "../../node_modules/.pnpm/lodash.isboolean@3.0.3/node_modules/lodash.isboolean/index.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var boolTag = "[object Boolean]";
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    function isBoolean4(value) {
      return value === true || value === false || isObjectLike(value) && objectToString.call(value) == boolTag;
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    module3.exports = isBoolean4;
  }
});

// ../../node_modules/.pnpm/lodash.isinteger@4.0.4/node_modules/lodash.isinteger/index.js
var require_lodash3 = __commonJS({
  "../../node_modules/.pnpm/lodash.isinteger@4.0.4/node_modules/lodash.isinteger/index.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var INFINITY = 1 / 0;
    var MAX_INTEGER = 17976931348623157e292;
    var NAN = 0 / 0;
    var symbolTag = "[object Symbol]";
    var reTrim = /^\s+|\s+$/g;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    function isInteger(value) {
      return typeof value == "number" && value == toInteger(value);
    }
    function isObject5(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol3(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = value < 0 ? -1 : 1;
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }
    function toInteger(value) {
      var result = toFinite(value), remainder = result % 1;
      return result === result ? remainder ? result - remainder : result : 0;
    }
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol3(value)) {
        return NAN;
      }
      if (isObject5(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject5(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, "");
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module3.exports = isInteger;
  }
});

// ../../node_modules/.pnpm/lodash.isnumber@3.0.3/node_modules/lodash.isnumber/index.js
var require_lodash4 = __commonJS({
  "../../node_modules/.pnpm/lodash.isnumber@3.0.3/node_modules/lodash.isnumber/index.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var numberTag = "[object Number]";
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isNumber4(value) {
      return typeof value == "number" || isObjectLike(value) && objectToString.call(value) == numberTag;
    }
    module3.exports = isNumber4;
  }
});

// ../../node_modules/.pnpm/lodash.isplainobject@4.0.6/node_modules/lodash.isplainobject/index.js
var require_lodash5 = __commonJS({
  "../../node_modules/.pnpm/lodash.isplainobject@4.0.6/node_modules/lodash.isplainobject/index.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var objectTag = "[object Object]";
    function isHostObject(value) {
      var result = false;
      if (value != null && typeof value.toString != "function") {
        try {
          result = !!(value + "");
        } catch (e11) {
        }
      }
      return result;
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty2 = objectProto.hasOwnProperty;
    var objectCtorString = funcToString.call(Object);
    var objectToString = objectProto.toString;
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isPlainObject2(value) {
      if (!isObjectLike(value) || objectToString.call(value) != objectTag || isHostObject(value)) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty2.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    module3.exports = isPlainObject2;
  }
});

// ../../node_modules/.pnpm/lodash.isstring@4.0.1/node_modules/lodash.isstring/index.js
var require_lodash6 = __commonJS({
  "../../node_modules/.pnpm/lodash.isstring@4.0.1/node_modules/lodash.isstring/index.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var stringTag = "[object String]";
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    var isArray4 = Array.isArray;
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isString4(value) {
      return typeof value == "string" || !isArray4(value) && isObjectLike(value) && objectToString.call(value) == stringTag;
    }
    module3.exports = isString4;
  }
});

// ../../node_modules/.pnpm/lodash.once@4.1.1/node_modules/lodash.once/index.js
var require_lodash7 = __commonJS({
  "../../node_modules/.pnpm/lodash.once@4.1.1/node_modules/lodash.once/index.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var FUNC_ERROR_TEXT = "Expected a function";
    var INFINITY = 1 / 0;
    var MAX_INTEGER = 17976931348623157e292;
    var NAN = 0 / 0;
    var symbolTag = "[object Symbol]";
    var reTrim = /^\s+|\s+$/g;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    function before(n9, func) {
      var result;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n9 = toInteger(n9);
      return function() {
        if (--n9 > 0) {
          result = func.apply(this, arguments);
        }
        if (n9 <= 1) {
          func = void 0;
        }
        return result;
      };
    }
    function once3(func) {
      return before(2, func);
    }
    function isObject5(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol3(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = value < 0 ? -1 : 1;
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }
    function toInteger(value) {
      var result = toFinite(value), remainder = result % 1;
      return result === result ? remainder ? result - remainder : result : 0;
    }
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol3(value)) {
        return NAN;
      }
      if (isObject5(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject5(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, "");
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module3.exports = once3;
  }
});

// ../../node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/sign.js
var require_sign = __commonJS({
  "../../node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/sign.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    var timespan = require_timespan();
    var PS_SUPPORTED = require_psSupported();
    var validateAsymmetricKey = require_validateAsymmetricKey();
    var jws = require_jws();
    var includes = require_lodash();
    var isBoolean4 = require_lodash2();
    var isInteger = require_lodash3();
    var isNumber4 = require_lodash4();
    var isPlainObject2 = require_lodash5();
    var isString4 = require_lodash6();
    var once3 = require_lodash7();
    var { KeyObject, createSecretKey, createPrivateKey } = (init_crypto(), __toCommonJS(crypto_exports));
    var SUPPORTED_ALGS = ["RS256", "RS384", "RS512", "ES256", "ES384", "ES512", "HS256", "HS384", "HS512", "none"];
    if (PS_SUPPORTED) {
      SUPPORTED_ALGS.splice(3, 0, "PS256", "PS384", "PS512");
    }
    var sign_options_schema = {
      expiresIn: { isValid: function(value) {
        return isInteger(value) || isString4(value) && value;
      }, message: '"expiresIn" should be a number of seconds or string representing a timespan' },
      notBefore: { isValid: function(value) {
        return isInteger(value) || isString4(value) && value;
      }, message: '"notBefore" should be a number of seconds or string representing a timespan' },
      audience: { isValid: function(value) {
        return isString4(value) || Array.isArray(value);
      }, message: '"audience" must be a string or array' },
      algorithm: { isValid: includes.bind(null, SUPPORTED_ALGS), message: '"algorithm" must be a valid string enum value' },
      header: { isValid: isPlainObject2, message: '"header" must be an object' },
      encoding: { isValid: isString4, message: '"encoding" must be a string' },
      issuer: { isValid: isString4, message: '"issuer" must be a string' },
      subject: { isValid: isString4, message: '"subject" must be a string' },
      jwtid: { isValid: isString4, message: '"jwtid" must be a string' },
      noTimestamp: { isValid: isBoolean4, message: '"noTimestamp" must be a boolean' },
      keyid: { isValid: isString4, message: '"keyid" must be a string' },
      mutatePayload: { isValid: isBoolean4, message: '"mutatePayload" must be a boolean' },
      allowInsecureKeySizes: { isValid: isBoolean4, message: '"allowInsecureKeySizes" must be a boolean' },
      allowInvalidAsymmetricKeyTypes: { isValid: isBoolean4, message: '"allowInvalidAsymmetricKeyTypes" must be a boolean' }
    };
    var registered_claims_schema = {
      iat: { isValid: isNumber4, message: '"iat" should be a number of seconds' },
      exp: { isValid: isNumber4, message: '"exp" should be a number of seconds' },
      nbf: { isValid: isNumber4, message: '"nbf" should be a number of seconds' }
    };
    function validate(schema, allowUnknown, object, parameterName) {
      if (!isPlainObject2(object)) {
        throw new Error('Expected "' + parameterName + '" to be a plain object.');
      }
      Object.keys(object).forEach(function(key) {
        const validator = schema[key];
        if (!validator) {
          if (!allowUnknown) {
            throw new Error('"' + key + '" is not allowed in "' + parameterName + '"');
          }
          return;
        }
        if (!validator.isValid(object[key])) {
          throw new Error(validator.message);
        }
      });
    }
    function validateOptions(options) {
      return validate(sign_options_schema, false, options, "options");
    }
    function validatePayload(payload) {
      return validate(registered_claims_schema, true, payload, "payload");
    }
    var options_to_payload = {
      "audience": "aud",
      "issuer": "iss",
      "subject": "sub",
      "jwtid": "jti"
    };
    var options_for_objects = [
      "expiresIn",
      "notBefore",
      "noTimestamp",
      "audience",
      "issuer",
      "subject",
      "jwtid"
    ];
    module3.exports = function(payload, secretOrPrivateKey, options, callback) {
      if (typeof options === "function") {
        callback = options;
        options = {};
      } else {
        options = options || {};
      }
      const isObjectPayload = typeof payload === "object" && !Buffer2.isBuffer(payload);
      const header = Object.assign({
        alg: options.algorithm || "HS256",
        typ: isObjectPayload ? "JWT" : void 0,
        kid: options.keyid
      }, options.header);
      function failure(err) {
        if (callback) {
          return callback(err);
        }
        throw err;
      }
      if (!secretOrPrivateKey && options.algorithm !== "none") {
        return failure(new Error("secretOrPrivateKey must have a value"));
      }
      if (secretOrPrivateKey != null && !(secretOrPrivateKey instanceof KeyObject)) {
        try {
          secretOrPrivateKey = createPrivateKey(secretOrPrivateKey);
        } catch (_4) {
          try {
            secretOrPrivateKey = createSecretKey(typeof secretOrPrivateKey === "string" ? Buffer2.from(secretOrPrivateKey) : secretOrPrivateKey);
          } catch (_5) {
            return failure(new Error("secretOrPrivateKey is not valid key material"));
          }
        }
      }
      if (header.alg.startsWith("HS") && secretOrPrivateKey.type !== "secret") {
        return failure(new Error(`secretOrPrivateKey must be a symmetric key when using ${header.alg}`));
      } else if (/^(?:RS|PS|ES)/.test(header.alg)) {
        if (secretOrPrivateKey.type !== "private") {
          return failure(new Error(`secretOrPrivateKey must be an asymmetric key when using ${header.alg}`));
        }
        if (!options.allowInsecureKeySizes && !header.alg.startsWith("ES") && secretOrPrivateKey.asymmetricKeyDetails !== void 0 && secretOrPrivateKey.asymmetricKeyDetails.modulusLength < 2048) {
          return failure(new Error(`secretOrPrivateKey has a minimum key size of 2048 bits for ${header.alg}`));
        }
      }
      if (typeof payload === "undefined") {
        return failure(new Error("payload is required"));
      } else if (isObjectPayload) {
        try {
          validatePayload(payload);
        } catch (error) {
          return failure(error);
        }
        if (!options.mutatePayload) {
          payload = Object.assign({}, payload);
        }
      } else {
        const invalid_options = options_for_objects.filter(function(opt) {
          return typeof options[opt] !== "undefined";
        });
        if (invalid_options.length > 0) {
          return failure(new Error("invalid " + invalid_options.join(",") + " option for " + typeof payload + " payload"));
        }
      }
      if (typeof payload.exp !== "undefined" && typeof options.expiresIn !== "undefined") {
        return failure(new Error('Bad "options.expiresIn" option the payload already has an "exp" property.'));
      }
      if (typeof payload.nbf !== "undefined" && typeof options.notBefore !== "undefined") {
        return failure(new Error('Bad "options.notBefore" option the payload already has an "nbf" property.'));
      }
      try {
        validateOptions(options);
      } catch (error) {
        return failure(error);
      }
      if (!options.allowInvalidAsymmetricKeyTypes) {
        try {
          validateAsymmetricKey(header.alg, secretOrPrivateKey);
        } catch (error) {
          return failure(error);
        }
      }
      const timestamp = payload.iat || Math.floor(Date.now() / 1e3);
      if (options.noTimestamp) {
        delete payload.iat;
      } else if (isObjectPayload) {
        payload.iat = timestamp;
      }
      if (typeof options.notBefore !== "undefined") {
        try {
          payload.nbf = timespan(options.notBefore, timestamp);
        } catch (err) {
          return failure(err);
        }
        if (typeof payload.nbf === "undefined") {
          return failure(new Error('"notBefore" should be a number of seconds or string representing a timespan eg: "1d", "20h", 60'));
        }
      }
      if (typeof options.expiresIn !== "undefined" && typeof payload === "object") {
        try {
          payload.exp = timespan(options.expiresIn, timestamp);
        } catch (err) {
          return failure(err);
        }
        if (typeof payload.exp === "undefined") {
          return failure(new Error('"expiresIn" should be a number of seconds or string representing a timespan eg: "1d", "20h", 60'));
        }
      }
      Object.keys(options_to_payload).forEach(function(key) {
        const claim = options_to_payload[key];
        if (typeof options[key] !== "undefined") {
          if (typeof payload[claim] !== "undefined") {
            return failure(new Error('Bad "options.' + key + '" option. The payload already has an "' + claim + '" property.'));
          }
          payload[claim] = options[key];
        }
      });
      const encoding = options.encoding || "utf8";
      if (typeof callback === "function") {
        callback = callback && once3(callback);
        jws.createSign({
          header,
          privateKey: secretOrPrivateKey,
          payload,
          encoding
        }).once("error", callback).once("done", function(signature) {
          if (!options.allowInsecureKeySizes && /^(?:RS|PS)/.test(header.alg) && signature.length < 256) {
            return callback(new Error(`secretOrPrivateKey has a minimum key size of 2048 bits for ${header.alg}`));
          }
          callback(null, signature);
        });
      } else {
        let signature = jws.sign({ header, payload, secret: secretOrPrivateKey, encoding });
        if (!options.allowInsecureKeySizes && /^(?:RS|PS)/.test(header.alg) && signature.length < 256) {
          throw new Error(`secretOrPrivateKey has a minimum key size of 2048 bits for ${header.alg}`);
        }
        return signature;
      }
    };
  }
});

// ../../node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/index.js
var require_jsonwebtoken = __commonJS({
  "../../node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/index.js"(exports11, module3) {
    init_dirname();
    init_buffer2();
    init_process2();
    module3.exports = {
      decode: require_decode(),
      verify: require_verify(),
      sign: require_sign(),
      JsonWebTokenError: require_JsonWebTokenError(),
      NotBeforeError: require_NotBeforeError(),
      TokenExpiredError: require_TokenExpiredError()
    };
  }
});

// src/index.ts
init_dirname();
init_buffer2();
init_process2();

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/index.js
var axios_exports = {};
__export(axios_exports, {
  Axios: () => Axios2,
  AxiosError: () => AxiosError2,
  AxiosHeaders: () => AxiosHeaders2,
  Cancel: () => Cancel,
  CancelToken: () => CancelToken2,
  CanceledError: () => CanceledError2,
  HttpStatusCode: () => HttpStatusCode2,
  VERSION: () => VERSION2,
  all: () => all2,
  default: () => axios_default,
  formToJSON: () => formToJSON,
  isAxiosError: () => isAxiosError2,
  isCancel: () => isCancel2,
  mergeConfig: () => mergeConfig2,
  spread: () => spread2,
  toFormData: () => toFormData2
});
init_dirname();
init_buffer2();
init_process2();

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/axios.js
init_dirname();
init_buffer2();
init_process2();

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/utils.js
init_dirname();
init_buffer2();
init_process2();

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/helpers/bind.js
init_dirname();
init_buffer2();
init_process2();
function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/utils.js
var { toString } = Object.prototype;
var { getPrototypeOf } = Object;
var kindOf = ((cache) => (thing) => {
  const str = toString.call(thing);
  return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
})(/* @__PURE__ */ Object.create(null));
var kindOfTest = (type) => {
  type = type.toLowerCase();
  return (thing) => kindOf(thing) === type;
};
var typeOfTest = (type) => (thing) => typeof thing === type;
var { isArray } = Array;
var isUndefined = typeOfTest("undefined");
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}
var isArrayBuffer = kindOfTest("ArrayBuffer");
function isArrayBufferView(val) {
  let result;
  if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && isArrayBuffer(val.buffer);
  }
  return result;
}
var isString = typeOfTest("string");
var isFunction = typeOfTest("function");
var isNumber = typeOfTest("number");
var isObject = (thing) => thing !== null && typeof thing === "object";
var isBoolean = (thing) => thing === true || thing === false;
var isPlainObject = (val) => {
  if (kindOf(val) !== "object") {
    return false;
  }
  const prototype3 = getPrototypeOf(val);
  return (prototype3 === null || prototype3 === Object.prototype || Object.getPrototypeOf(prototype3) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
};
var isDate = kindOfTest("Date");
var isFile = kindOfTest("File");
var isBlob = kindOfTest("Blob");
var isFileList = kindOfTest("FileList");
var isStream = (val) => isObject(val) && isFunction(val.pipe);
var isFormData = (thing) => {
  const pattern = "[object FormData]";
  return thing && (typeof FormData === "function" && thing instanceof FormData || toString.call(thing) === pattern || isFunction(thing.toString) && thing.toString() === pattern);
};
var isURLSearchParams = kindOfTest("URLSearchParams");
var trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
function forEach(obj, fn, { allOwnKeys = false } = {}) {
  if (obj === null || typeof obj === "undefined") {
    return;
  }
  let i8;
  let l8;
  if (typeof obj !== "object") {
    obj = [obj];
  }
  if (isArray(obj)) {
    for (i8 = 0, l8 = obj.length; i8 < l8; i8++) {
      fn.call(null, obj[i8], i8, obj);
    }
  } else {
    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys.length;
    let key;
    for (i8 = 0; i8 < len; i8++) {
      key = keys[i8];
      fn.call(null, obj[key], key, obj);
    }
  }
}
function findKey(obj, key) {
  key = key.toLowerCase();
  const keys = Object.keys(obj);
  let i8 = keys.length;
  let _key;
  while (i8-- > 0) {
    _key = keys[i8];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}
var _global = (() => {
  if (typeof globalThis !== "undefined")
    return globalThis;
  return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
})();
var isContextDefined = (context) => !isUndefined(context) && context !== _global;
function merge() {
  const { caseless } = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  };
  for (let i8 = 0, l8 = arguments.length; i8 < l8; i8++) {
    arguments[i8] && forEach(arguments[i8], assignValue);
  }
  return result;
}
var extend = (a8, b5, thisArg, { allOwnKeys } = {}) => {
  forEach(b5, (val, key) => {
    if (thisArg && isFunction(val)) {
      a8[key] = bind(val, thisArg);
    } else {
      a8[key] = val;
    }
  }, { allOwnKeys });
  return a8;
};
var stripBOM = (content) => {
  if (content.charCodeAt(0) === 65279) {
    content = content.slice(1);
  }
  return content;
};
var inherits = (constructor, superConstructor, props, descriptors2) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, "super", {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
};
var toFlatObject = (sourceObj, destObj, filter2, propFilter) => {
  let props;
  let i8;
  let prop;
  const merged = {};
  destObj = destObj || {};
  if (sourceObj == null)
    return destObj;
  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i8 = props.length;
    while (i8-- > 0) {
      prop = props[i8];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter2 !== false && getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);
  return destObj;
};
var endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === void 0 || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
};
var toArray = (thing) => {
  if (!thing)
    return null;
  if (isArray(thing))
    return thing;
  let i8 = thing.length;
  if (!isNumber(i8))
    return null;
  const arr = new Array(i8);
  while (i8-- > 0) {
    arr[i8] = thing[i8];
  }
  return arr;
};
var isTypedArray = ((TypedArray) => {
  return (thing) => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
var forEachEntry = (obj, fn) => {
  const generator = obj && obj[Symbol.iterator];
  const iterator = generator.call(obj);
  let result;
  while ((result = iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
};
var matchAll = (regExp, str) => {
  let matches;
  const arr = [];
  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }
  return arr;
};
var isHTMLForm = kindOfTest("HTMLFormElement");
var toCamelCase = (str) => {
  return str.toLowerCase().replace(
    /[_-\s]([a-z\d])(\w*)/g,
    function replacer(m6, p1, p22) {
      return p1.toUpperCase() + p22;
    }
  );
};
var hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
var isRegExp = kindOfTest("RegExp");
var reduceDescriptors = (obj, reducer) => {
  const descriptors2 = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};
  forEach(descriptors2, (descriptor, name2) => {
    if (reducer(descriptor, name2, obj) !== false) {
      reducedDescriptors[name2] = descriptor;
    }
  });
  Object.defineProperties(obj, reducedDescriptors);
};
var freezeMethods = (obj) => {
  reduceDescriptors(obj, (descriptor, name2) => {
    if (isFunction(obj) && ["arguments", "caller", "callee"].indexOf(name2) !== -1) {
      return false;
    }
    const value = obj[name2];
    if (!isFunction(value))
      return;
    descriptor.enumerable = false;
    if ("writable" in descriptor) {
      descriptor.writable = false;
      return;
    }
    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error("Can not rewrite read-only method '" + name2 + "'");
      };
    }
  });
};
var toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};
  const define2 = (arr) => {
    arr.forEach((value) => {
      obj[value] = true;
    });
  };
  isArray(arrayOrString) ? define2(arrayOrString) : define2(String(arrayOrString).split(delimiter));
  return obj;
};
var noop2 = () => {
};
var toFiniteNumber = (value, defaultValue) => {
  value = +value;
  return Number.isFinite(value) ? value : defaultValue;
};
var toJSONObject = (obj) => {
  const stack = new Array(10);
  const visit = (source, i8) => {
    if (isObject(source)) {
      if (stack.indexOf(source) >= 0) {
        return;
      }
      if (!("toJSON" in source)) {
        stack[i8] = source;
        const target = isArray(source) ? [] : {};
        forEach(source, (value, key) => {
          const reducedValue = visit(value, i8 + 1);
          !isUndefined(reducedValue) && (target[key] = reducedValue);
        });
        stack[i8] = void 0;
        return target;
      }
    }
    return source;
  };
  return visit(obj, 0);
};
var utils_default = {
  isArray,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString,
  isNumber,
  isBoolean,
  isObject,
  isPlainObject,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isRegExp,
  isFunction,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge,
  extend,
  trim,
  stripBOM,
  inherits,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty,
  hasOwnProp: hasOwnProperty,
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop: noop2,
  toFiniteNumber,
  findKey,
  global: _global,
  isContextDefined,
  toJSONObject
};

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/core/Axios.js
init_dirname();
init_buffer2();
init_process2();

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/helpers/buildURL.js
init_dirname();
init_buffer2();
init_process2();

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/helpers/AxiosURLSearchParams.js
init_dirname();
init_buffer2();
init_process2();

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/helpers/toFormData.js
init_dirname();
init_buffer2();
init_process2();

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/core/AxiosError.js
init_dirname();
init_buffer2();
init_process2();
function AxiosError(message, code, config2, request3, response) {
  Error.call(this);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack;
  }
  this.message = message;
  this.name = "AxiosError";
  code && (this.code = code);
  config2 && (this.config = config2);
  request3 && (this.request = request3);
  response && (this.response = response);
}
utils_default.inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      message: this.message,
      name: this.name,
      description: this.description,
      number: this.number,
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      config: utils_default.toJSONObject(this.config),
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  }
});
var prototype = AxiosError.prototype;
var descriptors = {};
[
  "ERR_BAD_OPTION_VALUE",
  "ERR_BAD_OPTION",
  "ECONNABORTED",
  "ETIMEDOUT",
  "ERR_NETWORK",
  "ERR_FR_TOO_MANY_REDIRECTS",
  "ERR_DEPRECATED",
  "ERR_BAD_RESPONSE",
  "ERR_BAD_REQUEST",
  "ERR_CANCELED",
  "ERR_NOT_SUPPORT",
  "ERR_INVALID_URL"
].forEach((code) => {
  descriptors[code] = { value: code };
});
Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype, "isAxiosError", { value: true });
AxiosError.from = (error, code, config2, request3, response, customProps) => {
  const axiosError = Object.create(prototype);
  utils_default.toFlatObject(error, axiosError, function filter2(obj) {
    return obj !== Error.prototype;
  }, (prop) => {
    return prop !== "isAxiosError";
  });
  AxiosError.call(axiosError, error.message, code, config2, request3, response);
  axiosError.cause = error;
  axiosError.name = error.name;
  customProps && Object.assign(axiosError, customProps);
  return axiosError;
};
var AxiosError_default = AxiosError;

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/env/classes/FormData.js
init_dirname();
init_buffer2();
init_process2();
var import_form_data = __toESM(require_browser(), 1);
var FormData_default = import_form_data.default;

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/helpers/toFormData.js
function isVisitable(thing) {
  return utils_default.isPlainObject(thing) || utils_default.isArray(thing);
}
function removeBrackets(key) {
  return utils_default.endsWith(key, "[]") ? key.slice(0, -2) : key;
}
function renderKey(path2, key, dots) {
  if (!path2)
    return key;
  return path2.concat(key).map(function each(token, i8) {
    token = removeBrackets(token);
    return !dots && i8 ? "[" + token + "]" : token;
  }).join(dots ? "." : "");
}
function isFlatArray(arr) {
  return utils_default.isArray(arr) && !arr.some(isVisitable);
}
var predicates = utils_default.toFlatObject(utils_default, {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});
function isSpecCompliant(thing) {
  return thing && utils_default.isFunction(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator];
}
function toFormData(obj, formData, options) {
  if (!utils_default.isObject(obj)) {
    throw new TypeError("target must be an object");
  }
  formData = formData || new (FormData_default || FormData)();
  options = utils_default.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    return !utils_default.isUndefined(source[option]);
  });
  const metaTokens = options.metaTokens;
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
  const useBlob = _Blob && isSpecCompliant(formData);
  if (!utils_default.isFunction(visitor)) {
    throw new TypeError("visitor must be a function");
  }
  function convertValue(value) {
    if (value === null)
      return "";
    if (utils_default.isDate(value)) {
      return value.toISOString();
    }
    if (!useBlob && utils_default.isBlob(value)) {
      throw new AxiosError_default("Blob is not supported. Use a Buffer instead.");
    }
    if (utils_default.isArrayBuffer(value) || utils_default.isTypedArray(value)) {
      return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer2.from(value);
    }
    return value;
  }
  function defaultVisitor(value, key, path2) {
    let arr = value;
    if (value && !path2 && typeof value === "object") {
      if (utils_default.endsWith(key, "{}")) {
        key = metaTokens ? key : key.slice(0, -2);
        value = JSON.stringify(value);
      } else if (utils_default.isArray(value) && isFlatArray(value) || (utils_default.isFileList(value) || utils_default.endsWith(key, "[]") && (arr = utils_default.toArray(value)))) {
        key = removeBrackets(key);
        arr.forEach(function each(el, index) {
          !(utils_default.isUndefined(el) || el === null) && formData.append(
            indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]",
            convertValue(el)
          );
        });
        return false;
      }
    }
    if (isVisitable(value)) {
      return true;
    }
    formData.append(renderKey(path2, key, dots), convertValue(value));
    return false;
  }
  const stack = [];
  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });
  function build(value, path2) {
    if (utils_default.isUndefined(value))
      return;
    if (stack.indexOf(value) !== -1) {
      throw Error("Circular reference detected in " + path2.join("."));
    }
    stack.push(value);
    utils_default.forEach(value, function each(el, key) {
      const result = !(utils_default.isUndefined(el) || el === null) && visitor.call(
        formData,
        el,
        utils_default.isString(key) ? key.trim() : key,
        path2,
        exposedHelpers
      );
      if (result === true) {
        build(el, path2 ? path2.concat(key) : [key]);
      }
    });
    stack.pop();
  }
  if (!utils_default.isObject(obj)) {
    throw new TypeError("data must be an object");
  }
  build(obj);
  return formData;
}
var toFormData_default = toFormData;

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/helpers/AxiosURLSearchParams.js
function encode(str) {
  const charMap = {
    "!": "%21",
    "'": "%27",
    "(": "%28",
    ")": "%29",
    "~": "%7E",
    "%20": "+",
    "%00": "\0"
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}
function AxiosURLSearchParams(params, options) {
  this._pairs = [];
  params && toFormData_default(params, this, options);
}
var prototype2 = AxiosURLSearchParams.prototype;
prototype2.append = function append(name2, value) {
  this._pairs.push([name2, value]);
};
prototype2.toString = function toString2(encoder) {
  const _encode = encoder ? function(value) {
    return encoder.call(this, value, encode);
  } : encode;
  return this._pairs.map(function each(pair) {
    return _encode(pair[0]) + "=" + _encode(pair[1]);
  }, "").join("&");
};
var AxiosURLSearchParams_default = AxiosURLSearchParams;

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/helpers/buildURL.js
function encode2(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
function buildURL(url, params, options) {
  if (!params) {
    return url;
  }
  const _encode = options && options.encode || encode2;
  const serializeFn = options && options.serialize;
  let serializedParams;
  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils_default.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams_default(params, options).toString(_encode);
  }
  if (serializedParams) {
    const hashmarkIndex = url.indexOf("#");
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
  }
  return url;
}

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/core/InterceptorManager.js
init_dirname();
init_buffer2();
init_process2();
var InterceptorManager = class {
  constructor() {
    this.handlers = [];
  }
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }
  eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  }
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }
  forEach(fn) {
    utils_default.forEach(this.handlers, function forEachHandler(h8) {
      if (h8 !== null) {
        fn(h8);
      }
    });
  }
};
var InterceptorManager_default = InterceptorManager;

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/core/dispatchRequest.js
init_dirname();
init_buffer2();
init_process2();

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/core/transformData.js
init_dirname();
init_buffer2();
init_process2();

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/defaults/index.js
init_dirname();
init_buffer2();
init_process2();

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/defaults/transitional.js
init_dirname();
init_buffer2();
init_process2();
var transitional_default = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/helpers/toURLEncodedForm.js
init_dirname();
init_buffer2();
init_process2();

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/platform/index.js
init_dirname();
init_buffer2();
init_process2();

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/platform/browser/index.js
init_dirname();
init_buffer2();
init_process2();

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/platform/browser/classes/URLSearchParams.js
init_dirname();
init_buffer2();
init_process2();
var URLSearchParams_default = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams_default;

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/platform/browser/classes/FormData.js
init_dirname();
init_buffer2();
init_process2();
var FormData_default2 = FormData;

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/platform/browser/index.js
var isStandardBrowserEnv = (() => {
  let product;
  if (typeof navigator !== "undefined" && ((product = navigator.product) === "ReactNative" || product === "NativeScript" || product === "NS")) {
    return false;
  }
  return typeof window !== "undefined" && typeof document !== "undefined";
})();
var isStandardBrowserWebWorkerEnv = (() => {
  return typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
})();
var browser_default = {
  isBrowser: true,
  classes: {
    URLSearchParams: URLSearchParams_default,
    FormData: FormData_default2,
    Blob
  },
  isStandardBrowserEnv,
  isStandardBrowserWebWorkerEnv,
  protocols: ["http", "https", "file", "blob", "url", "data"]
};

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/helpers/toURLEncodedForm.js
function toURLEncodedForm(data, options) {
  return toFormData_default(data, new browser_default.classes.URLSearchParams(), Object.assign({
    visitor: function(value, key, path2, helpers) {
      if (browser_default.isNode && utils_default.isBuffer(value)) {
        this.append(key, value.toString("base64"));
        return false;
      }
      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/helpers/formDataToJSON.js
init_dirname();
init_buffer2();
init_process2();
function parsePropPath(name2) {
  return utils_default.matchAll(/\w+|\[(\w*)]/g, name2).map((match) => {
    return match[0] === "[]" ? "" : match[1] || match[0];
  });
}
function arrayToObject(arr) {
  const obj = {};
  const keys = Object.keys(arr);
  let i8;
  const len = keys.length;
  let key;
  for (i8 = 0; i8 < len; i8++) {
    key = keys[i8];
    obj[key] = arr[key];
  }
  return obj;
}
function formDataToJSON(formData) {
  function buildPath(path2, value, target, index) {
    let name2 = path2[index++];
    const isNumericKey = Number.isFinite(+name2);
    const isLast = index >= path2.length;
    name2 = !name2 && utils_default.isArray(target) ? target.length : name2;
    if (isLast) {
      if (utils_default.hasOwnProp(target, name2)) {
        target[name2] = [target[name2], value];
      } else {
        target[name2] = value;
      }
      return !isNumericKey;
    }
    if (!target[name2] || !utils_default.isObject(target[name2])) {
      target[name2] = [];
    }
    const result = buildPath(path2, value, target[name2], index);
    if (result && utils_default.isArray(target[name2])) {
      target[name2] = arrayToObject(target[name2]);
    }
    return !isNumericKey;
  }
  if (utils_default.isFormData(formData) && utils_default.isFunction(formData.entries)) {
    const obj = {};
    utils_default.forEachEntry(formData, (name2, value) => {
      buildPath(parsePropPath(name2), value, obj, 0);
    });
    return obj;
  }
  return null;
}
var formDataToJSON_default = formDataToJSON;

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/defaults/index.js
var DEFAULT_CONTENT_TYPE = {
  "Content-Type": void 0
};
function stringifySafely(rawValue, parser, encoder) {
  if (utils_default.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils_default.trim(rawValue);
    } catch (e11) {
      if (e11.name !== "SyntaxError") {
        throw e11;
      }
    }
  }
  return (encoder || JSON.stringify)(rawValue);
}
var defaults = {
  transitional: transitional_default,
  adapter: ["xhr", "http"],
  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || "";
    const hasJSONContentType = contentType.indexOf("application/json") > -1;
    const isObjectPayload = utils_default.isObject(data);
    if (isObjectPayload && utils_default.isHTMLForm(data)) {
      data = new FormData(data);
    }
    const isFormData2 = utils_default.isFormData(data);
    if (isFormData2) {
      if (!hasJSONContentType) {
        return data;
      }
      return hasJSONContentType ? JSON.stringify(formDataToJSON_default(data)) : data;
    }
    if (utils_default.isArrayBuffer(data) || utils_default.isBuffer(data) || utils_default.isStream(data) || utils_default.isFile(data) || utils_default.isBlob(data)) {
      return data;
    }
    if (utils_default.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils_default.isURLSearchParams(data)) {
      headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
      return data.toString();
    }
    let isFileList2;
    if (isObjectPayload) {
      if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
        return toURLEncodedForm(data, this.formSerializer).toString();
      }
      if ((isFileList2 = utils_default.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
        const _FormData = this.env && this.env.FormData;
        return toFormData_default(
          isFileList2 ? { "files[]": data } : data,
          _FormData && new _FormData(),
          this.formSerializer
        );
      }
    }
    if (isObjectPayload || hasJSONContentType) {
      headers.setContentType("application/json", false);
      return stringifySafely(data);
    }
    return data;
  }],
  transformResponse: [function transformResponse(data) {
    const transitional2 = this.transitional || defaults.transitional;
    const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
    const JSONRequested = this.responseType === "json";
    if (data && utils_default.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
      const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;
      try {
        return JSON.parse(data);
      } catch (e11) {
        if (strictJSONParsing) {
          if (e11.name === "SyntaxError") {
            throw AxiosError_default.from(e11, AxiosError_default.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e11;
        }
      }
    }
    return data;
  }],
  timeout: 0,
  xsrfCookieName: "XSRF-TOKEN",
  xsrfHeaderName: "X-XSRF-TOKEN",
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: browser_default.classes.FormData,
    Blob: browser_default.classes.Blob
  },
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },
  headers: {
    common: {
      "Accept": "application/json, text/plain, */*"
    }
  }
};
utils_default.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});
utils_default.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
  defaults.headers[method] = utils_default.merge(DEFAULT_CONTENT_TYPE);
});
var defaults_default = defaults;

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/core/AxiosHeaders.js
init_dirname();
init_buffer2();
init_process2();

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/helpers/parseHeaders.js
init_dirname();
init_buffer2();
init_process2();
var ignoreDuplicateOf = utils_default.toObjectSet([
  "age",
  "authorization",
  "content-length",
  "content-type",
  "etag",
  "expires",
  "from",
  "host",
  "if-modified-since",
  "if-unmodified-since",
  "last-modified",
  "location",
  "max-forwards",
  "proxy-authorization",
  "referer",
  "retry-after",
  "user-agent"
]);
var parseHeaders_default = (rawHeaders) => {
  const parsed = {};
  let key;
  let val;
  let i8;
  rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
    i8 = line.indexOf(":");
    key = line.substring(0, i8).trim().toLowerCase();
    val = line.substring(i8 + 1).trim();
    if (!key || parsed[key] && ignoreDuplicateOf[key]) {
      return;
    }
    if (key === "set-cookie") {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
    }
  });
  return parsed;
};

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/core/AxiosHeaders.js
var $internals = Symbol("internals");
function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}
function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }
  return utils_default.isArray(value) ? value.map(normalizeValue) : String(value);
}
function parseTokens(str) {
  const tokens = /* @__PURE__ */ Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;
  while (match = tokensRE.exec(str)) {
    tokens[match[1]] = match[2];
  }
  return tokens;
}
function isValidHeaderName(str) {
  return /^[-_a-zA-Z]+$/.test(str.trim());
}
function matchHeaderValue(context, value, header, filter2) {
  if (utils_default.isFunction(filter2)) {
    return filter2.call(this, value, header);
  }
  if (!utils_default.isString(value))
    return;
  if (utils_default.isString(filter2)) {
    return value.indexOf(filter2) !== -1;
  }
  if (utils_default.isRegExp(filter2)) {
    return filter2.test(value);
  }
}
function formatHeader(header) {
  return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w4, char, str) => {
    return char.toUpperCase() + str;
  });
}
function buildAccessors(obj, header) {
  const accessorName = utils_default.toCamelCase(" " + header);
  ["get", "set", "has"].forEach((methodName) => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}
var AxiosHeaders = class {
  constructor(headers) {
    headers && this.set(headers);
  }
  set(header, valueOrRewrite, rewrite) {
    const self2 = this;
    function setHeader(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);
      if (!lHeader) {
        throw new Error("header name must be a non-empty string");
      }
      const key = utils_default.findKey(self2, lHeader);
      if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
        self2[key || _header] = normalizeValue(_value);
      }
    }
    const setHeaders = (headers, _rewrite) => utils_default.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
    if (utils_default.isPlainObject(header) || header instanceof this.constructor) {
      setHeaders(header, valueOrRewrite);
    } else if (utils_default.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
      setHeaders(parseHeaders_default(header), valueOrRewrite);
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }
    return this;
  }
  get(header, parser) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils_default.findKey(this, header);
      if (key) {
        const value = this[key];
        if (!parser) {
          return value;
        }
        if (parser === true) {
          return parseTokens(value);
        }
        if (utils_default.isFunction(parser)) {
          return parser.call(this, value, key);
        }
        if (utils_default.isRegExp(parser)) {
          return parser.exec(value);
        }
        throw new TypeError("parser must be boolean|regexp|function");
      }
    }
  }
  has(header, matcher) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils_default.findKey(this, header);
      return !!(key && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }
    return false;
  }
  delete(header, matcher) {
    const self2 = this;
    let deleted = false;
    function deleteHeader(_header) {
      _header = normalizeHeader(_header);
      if (_header) {
        const key = utils_default.findKey(self2, _header);
        if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
          delete self2[key];
          deleted = true;
        }
      }
    }
    if (utils_default.isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }
    return deleted;
  }
  clear() {
    return Object.keys(this).forEach(this.delete.bind(this));
  }
  normalize(format4) {
    const self2 = this;
    const headers = {};
    utils_default.forEach(this, (value, header) => {
      const key = utils_default.findKey(headers, header);
      if (key) {
        self2[key] = normalizeValue(value);
        delete self2[header];
        return;
      }
      const normalized = format4 ? formatHeader(header) : String(header).trim();
      if (normalized !== header) {
        delete self2[header];
      }
      self2[normalized] = normalizeValue(value);
      headers[normalized] = true;
    });
    return this;
  }
  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }
  toJSON(asStrings) {
    const obj = /* @__PURE__ */ Object.create(null);
    utils_default.forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && utils_default.isArray(value) ? value.join(", ") : value);
    });
    return obj;
  }
  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }
  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
  }
  get [Symbol.toStringTag]() {
    return "AxiosHeaders";
  }
  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }
  static concat(first, ...targets) {
    const computed = new this(first);
    targets.forEach((target) => computed.set(target));
    return computed;
  }
  static accessor(header) {
    const internals = this[$internals] = this[$internals] = {
      accessors: {}
    };
    const accessors = internals.accessors;
    const prototype3 = this.prototype;
    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);
      if (!accessors[lHeader]) {
        buildAccessors(prototype3, _header);
        accessors[lHeader] = true;
      }
    }
    utils_default.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
    return this;
  }
};
AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent"]);
utils_default.freezeMethods(AxiosHeaders.prototype);
utils_default.freezeMethods(AxiosHeaders);
var AxiosHeaders_default = AxiosHeaders;

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/core/transformData.js
function transformData(fns, response) {
  const config2 = this || defaults_default;
  const context = response || config2;
  const headers = AxiosHeaders_default.from(context.headers);
  let data = context.data;
  utils_default.forEach(fns, function transform(fn) {
    data = fn.call(config2, data, headers.normalize(), response ? response.status : void 0);
  });
  headers.normalize();
  return data;
}

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/cancel/isCancel.js
init_dirname();
init_buffer2();
init_process2();
function isCancel(value) {
  return !!(value && value.__CANCEL__);
}

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/cancel/CanceledError.js
init_dirname();
init_buffer2();
init_process2();
function CanceledError(message, config2, request3) {
  AxiosError_default.call(this, message == null ? "canceled" : message, AxiosError_default.ERR_CANCELED, config2, request3);
  this.name = "CanceledError";
}
utils_default.inherits(CanceledError, AxiosError_default, {
  __CANCEL__: true
});
var CanceledError_default = CanceledError;

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/adapters/adapters.js
init_dirname();
init_buffer2();
init_process2();

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/helpers/null.js
init_dirname();
init_buffer2();
init_process2();
var null_default = null;

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/adapters/xhr.js
init_dirname();
init_buffer2();
init_process2();

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/core/settle.js
init_dirname();
init_buffer2();
init_process2();
function settle(resolve2, reject, response) {
  const validateStatus2 = response.config.validateStatus;
  if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
    resolve2(response);
  } else {
    reject(new AxiosError_default(
      "Request failed with status code " + response.status,
      [AxiosError_default.ERR_BAD_REQUEST, AxiosError_default.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/helpers/cookies.js
init_dirname();
init_buffer2();
init_process2();
var cookies_default = browser_default.isStandardBrowserEnv ? function standardBrowserEnv() {
  return {
    write: function write(name2, value, expires, path2, domain2, secure) {
      const cookie = [];
      cookie.push(name2 + "=" + encodeURIComponent(value));
      if (utils_default.isNumber(expires)) {
        cookie.push("expires=" + new Date(expires).toGMTString());
      }
      if (utils_default.isString(path2)) {
        cookie.push("path=" + path2);
      }
      if (utils_default.isString(domain2)) {
        cookie.push("domain=" + domain2);
      }
      if (secure === true) {
        cookie.push("secure");
      }
      document.cookie = cookie.join("; ");
    },
    read: function read(name2) {
      const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name2 + ")=([^;]*)"));
      return match ? decodeURIComponent(match[3]) : null;
    },
    remove: function remove(name2) {
      this.write(name2, "", Date.now() - 864e5);
    }
  };
}() : function nonStandardBrowserEnv() {
  return {
    write: function write() {
    },
    read: function read() {
      return null;
    },
    remove: function remove() {
    }
  };
}();

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/core/buildFullPath.js
init_dirname();
init_buffer2();
init_process2();

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/helpers/isAbsoluteURL.js
init_dirname();
init_buffer2();
init_process2();
function isAbsoluteURL(url) {
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/helpers/combineURLs.js
init_dirname();
init_buffer2();
init_process2();
function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
}

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/core/buildFullPath.js
function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/helpers/isURLSameOrigin.js
init_dirname();
init_buffer2();
init_process2();
var isURLSameOrigin_default = browser_default.isStandardBrowserEnv ? function standardBrowserEnv2() {
  const msie = /(msie|trident)/i.test(navigator.userAgent);
  const urlParsingNode = document.createElement("a");
  let originURL;
  function resolveURL(url) {
    let href = url;
    if (msie) {
      urlParsingNode.setAttribute("href", href);
      href = urlParsingNode.href;
    }
    urlParsingNode.setAttribute("href", href);
    return {
      href: urlParsingNode.href,
      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
      host: urlParsingNode.host,
      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
      hostname: urlParsingNode.hostname,
      port: urlParsingNode.port,
      pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
    };
  }
  originURL = resolveURL(window.location.href);
  return function isURLSameOrigin(requestURL) {
    const parsed = utils_default.isString(requestURL) ? resolveURL(requestURL) : requestURL;
    return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
  };
}() : function nonStandardBrowserEnv2() {
  return function isURLSameOrigin() {
    return true;
  };
}();

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/helpers/parseProtocol.js
init_dirname();
init_buffer2();
init_process2();
function parseProtocol(url) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || "";
}

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/helpers/speedometer.js
init_dirname();
init_buffer2();
init_process2();
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;
  min = min !== void 0 ? min : 1e3;
  return function push(chunkLength) {
    const now = Date.now();
    const startedAt = timestamps[tail];
    if (!firstSampleTS) {
      firstSampleTS = now;
    }
    bytes[head] = chunkLength;
    timestamps[head] = now;
    let i8 = tail;
    let bytesCount = 0;
    while (i8 !== head) {
      bytesCount += bytes[i8++];
      i8 = i8 % samplesCount;
    }
    head = (head + 1) % samplesCount;
    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }
    if (now - firstSampleTS < min) {
      return;
    }
    const passed = startedAt && now - startedAt;
    return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
  };
}
var speedometer_default = speedometer;

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/adapters/xhr.js
function progressEventReducer(listener, isDownloadStream) {
  let bytesNotified = 0;
  const _speedometer = speedometer_default(50, 250);
  return (e11) => {
    const loaded = e11.loaded;
    const total = e11.lengthComputable ? e11.total : void 0;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;
    bytesNotified = loaded;
    const data = {
      loaded,
      total,
      progress: total ? loaded / total : void 0,
      bytes: progressBytes,
      rate: rate ? rate : void 0,
      estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
      event: e11
    };
    data[isDownloadStream ? "download" : "upload"] = true;
    listener(data);
  };
}
var isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
var xhr_default = isXHRAdapterSupported && function(config2) {
  return new Promise(function dispatchXhrRequest(resolve2, reject) {
    let requestData = config2.data;
    const requestHeaders = AxiosHeaders_default.from(config2.headers).normalize();
    const responseType = config2.responseType;
    let onCanceled;
    function done() {
      if (config2.cancelToken) {
        config2.cancelToken.unsubscribe(onCanceled);
      }
      if (config2.signal) {
        config2.signal.removeEventListener("abort", onCanceled);
      }
    }
    if (utils_default.isFormData(requestData) && (browser_default.isStandardBrowserEnv || browser_default.isStandardBrowserWebWorkerEnv)) {
      requestHeaders.setContentType(false);
    }
    let request3 = new XMLHttpRequest();
    if (config2.auth) {
      const username = config2.auth.username || "";
      const password = config2.auth.password ? unescape(encodeURIComponent(config2.auth.password)) : "";
      requestHeaders.set("Authorization", "Basic " + btoa(username + ":" + password));
    }
    const fullPath = buildFullPath(config2.baseURL, config2.url);
    request3.open(config2.method.toUpperCase(), buildURL(fullPath, config2.params, config2.paramsSerializer), true);
    request3.timeout = config2.timeout;
    function onloadend() {
      if (!request3) {
        return;
      }
      const responseHeaders = AxiosHeaders_default.from(
        "getAllResponseHeaders" in request3 && request3.getAllResponseHeaders()
      );
      const responseData = !responseType || responseType === "text" || responseType === "json" ? request3.responseText : request3.response;
      const response = {
        data: responseData,
        status: request3.status,
        statusText: request3.statusText,
        headers: responseHeaders,
        config: config2,
        request: request3
      };
      settle(function _resolve(value) {
        resolve2(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);
      request3 = null;
    }
    if ("onloadend" in request3) {
      request3.onloadend = onloadend;
    } else {
      request3.onreadystatechange = function handleLoad() {
        if (!request3 || request3.readyState !== 4) {
          return;
        }
        if (request3.status === 0 && !(request3.responseURL && request3.responseURL.indexOf("file:") === 0)) {
          return;
        }
        setTimeout(onloadend);
      };
    }
    request3.onabort = function handleAbort() {
      if (!request3) {
        return;
      }
      reject(new AxiosError_default("Request aborted", AxiosError_default.ECONNABORTED, config2, request3));
      request3 = null;
    };
    request3.onerror = function handleError() {
      reject(new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config2, request3));
      request3 = null;
    };
    request3.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = config2.timeout ? "timeout of " + config2.timeout + "ms exceeded" : "timeout exceeded";
      const transitional2 = config2.transitional || transitional_default;
      if (config2.timeoutErrorMessage) {
        timeoutErrorMessage = config2.timeoutErrorMessage;
      }
      reject(new AxiosError_default(
        timeoutErrorMessage,
        transitional2.clarifyTimeoutError ? AxiosError_default.ETIMEDOUT : AxiosError_default.ECONNABORTED,
        config2,
        request3
      ));
      request3 = null;
    };
    if (browser_default.isStandardBrowserEnv) {
      const xsrfValue = (config2.withCredentials || isURLSameOrigin_default(fullPath)) && config2.xsrfCookieName && cookies_default.read(config2.xsrfCookieName);
      if (xsrfValue) {
        requestHeaders.set(config2.xsrfHeaderName, xsrfValue);
      }
    }
    requestData === void 0 && requestHeaders.setContentType(null);
    if ("setRequestHeader" in request3) {
      utils_default.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request3.setRequestHeader(key, val);
      });
    }
    if (!utils_default.isUndefined(config2.withCredentials)) {
      request3.withCredentials = !!config2.withCredentials;
    }
    if (responseType && responseType !== "json") {
      request3.responseType = config2.responseType;
    }
    if (typeof config2.onDownloadProgress === "function") {
      request3.addEventListener("progress", progressEventReducer(config2.onDownloadProgress, true));
    }
    if (typeof config2.onUploadProgress === "function" && request3.upload) {
      request3.upload.addEventListener("progress", progressEventReducer(config2.onUploadProgress));
    }
    if (config2.cancelToken || config2.signal) {
      onCanceled = (cancel) => {
        if (!request3) {
          return;
        }
        reject(!cancel || cancel.type ? new CanceledError_default(null, config2, request3) : cancel);
        request3.abort();
        request3 = null;
      };
      config2.cancelToken && config2.cancelToken.subscribe(onCanceled);
      if (config2.signal) {
        config2.signal.aborted ? onCanceled() : config2.signal.addEventListener("abort", onCanceled);
      }
    }
    const protocol = parseProtocol(fullPath);
    if (protocol && browser_default.protocols.indexOf(protocol) === -1) {
      reject(new AxiosError_default("Unsupported protocol " + protocol + ":", AxiosError_default.ERR_BAD_REQUEST, config2));
      return;
    }
    request3.send(requestData || null);
  });
};

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/adapters/adapters.js
var knownAdapters = {
  http: null_default,
  xhr: xhr_default
};
utils_default.forEach(knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, "name", { value });
    } catch (e11) {
    }
    Object.defineProperty(fn, "adapterName", { value });
  }
});
var adapters_default = {
  getAdapter: (adapters) => {
    adapters = utils_default.isArray(adapters) ? adapters : [adapters];
    const { length } = adapters;
    let nameOrAdapter;
    let adapter;
    for (let i8 = 0; i8 < length; i8++) {
      nameOrAdapter = adapters[i8];
      if (adapter = utils_default.isString(nameOrAdapter) ? knownAdapters[nameOrAdapter.toLowerCase()] : nameOrAdapter) {
        break;
      }
    }
    if (!adapter) {
      if (adapter === false) {
        throw new AxiosError_default(
          `Adapter ${nameOrAdapter} is not supported by the environment`,
          "ERR_NOT_SUPPORT"
        );
      }
      throw new Error(
        utils_default.hasOwnProp(knownAdapters, nameOrAdapter) ? `Adapter '${nameOrAdapter}' is not available in the build` : `Unknown adapter '${nameOrAdapter}'`
      );
    }
    if (!utils_default.isFunction(adapter)) {
      throw new TypeError("adapter is not a function");
    }
    return adapter;
  },
  adapters: knownAdapters
};

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/core/dispatchRequest.js
function throwIfCancellationRequested(config2) {
  if (config2.cancelToken) {
    config2.cancelToken.throwIfRequested();
  }
  if (config2.signal && config2.signal.aborted) {
    throw new CanceledError_default(null, config2);
  }
}
function dispatchRequest(config2) {
  throwIfCancellationRequested(config2);
  config2.headers = AxiosHeaders_default.from(config2.headers);
  config2.data = transformData.call(
    config2,
    config2.transformRequest
  );
  if (["post", "put", "patch"].indexOf(config2.method) !== -1) {
    config2.headers.setContentType("application/x-www-form-urlencoded", false);
  }
  const adapter = adapters_default.getAdapter(config2.adapter || defaults_default.adapter);
  return adapter(config2).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config2);
    response.data = transformData.call(
      config2,
      config2.transformResponse,
      response
    );
    response.headers = AxiosHeaders_default.from(response.headers);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config2);
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config2,
          config2.transformResponse,
          reason.response
        );
        reason.response.headers = AxiosHeaders_default.from(reason.response.headers);
      }
    }
    return Promise.reject(reason);
  });
}

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/core/mergeConfig.js
init_dirname();
init_buffer2();
init_process2();
var headersToObject = (thing) => thing instanceof AxiosHeaders_default ? thing.toJSON() : thing;
function mergeConfig(config1, config2) {
  config2 = config2 || {};
  const config3 = {};
  function getMergedValue(target, source, caseless) {
    if (utils_default.isPlainObject(target) && utils_default.isPlainObject(source)) {
      return utils_default.merge.call({ caseless }, target, source);
    } else if (utils_default.isPlainObject(source)) {
      return utils_default.merge({}, source);
    } else if (utils_default.isArray(source)) {
      return source.slice();
    }
    return source;
  }
  function mergeDeepProperties(a8, b5, caseless) {
    if (!utils_default.isUndefined(b5)) {
      return getMergedValue(a8, b5, caseless);
    } else if (!utils_default.isUndefined(a8)) {
      return getMergedValue(void 0, a8, caseless);
    }
  }
  function valueFromConfig2(a8, b5) {
    if (!utils_default.isUndefined(b5)) {
      return getMergedValue(void 0, b5);
    }
  }
  function defaultToConfig2(a8, b5) {
    if (!utils_default.isUndefined(b5)) {
      return getMergedValue(void 0, b5);
    } else if (!utils_default.isUndefined(a8)) {
      return getMergedValue(void 0, a8);
    }
  }
  function mergeDirectKeys(a8, b5, prop) {
    if (prop in config2) {
      return getMergedValue(a8, b5);
    } else if (prop in config1) {
      return getMergedValue(void 0, a8);
    }
  }
  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a8, b5) => mergeDeepProperties(headersToObject(a8), headersToObject(b5), true)
  };
  utils_default.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
    const merge2 = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge2(config1[prop], config2[prop], prop);
    utils_default.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config3[prop] = configValue);
  });
  return config3;
}

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/helpers/validator.js
init_dirname();
init_buffer2();
init_process2();

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/env/data.js
init_dirname();
init_buffer2();
init_process2();
var VERSION = "1.2.5";

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/helpers/validator.js
var validators = {};
["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i8) => {
  validators[type] = function validator(thing) {
    return typeof thing === type || "a" + (i8 < 1 ? "n " : " ") + type;
  };
});
var deprecatedWarnings = {};
validators.transitional = function transitional(validator, version2, message) {
  function formatMessage(opt, desc) {
    return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
  }
  return (value, opt, opts) => {
    if (validator === false) {
      throw new AxiosError_default(
        formatMessage(opt, " has been removed" + (version2 ? " in " + version2 : "")),
        AxiosError_default.ERR_DEPRECATED
      );
    }
    if (version2 && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      console.warn(
        formatMessage(
          opt,
          " has been deprecated since v" + version2 + " and will be removed in the near future"
        )
      );
    }
    return validator ? validator(value, opt, opts) : true;
  };
};
function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== "object") {
    throw new AxiosError_default("options must be an object", AxiosError_default.ERR_BAD_OPTION_VALUE);
  }
  const keys = Object.keys(options);
  let i8 = keys.length;
  while (i8-- > 0) {
    const opt = keys[i8];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === void 0 || validator(value, opt, options);
      if (result !== true) {
        throw new AxiosError_default("option " + opt + " must be " + result, AxiosError_default.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError_default("Unknown option " + opt, AxiosError_default.ERR_BAD_OPTION);
    }
  }
}
var validator_default = {
  assertOptions,
  validators
};

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/core/Axios.js
var validators2 = validator_default.validators;
var Axios = class {
  constructor(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new InterceptorManager_default(),
      response: new InterceptorManager_default()
    };
  }
  request(configOrUrl, config2) {
    if (typeof configOrUrl === "string") {
      config2 = config2 || {};
      config2.url = configOrUrl;
    } else {
      config2 = configOrUrl || {};
    }
    config2 = mergeConfig(this.defaults, config2);
    const { transitional: transitional2, paramsSerializer, headers } = config2;
    if (transitional2 !== void 0) {
      validator_default.assertOptions(transitional2, {
        silentJSONParsing: validators2.transitional(validators2.boolean),
        forcedJSONParsing: validators2.transitional(validators2.boolean),
        clarifyTimeoutError: validators2.transitional(validators2.boolean)
      }, false);
    }
    if (paramsSerializer !== void 0) {
      validator_default.assertOptions(paramsSerializer, {
        encode: validators2.function,
        serialize: validators2.function
      }, true);
    }
    config2.method = (config2.method || this.defaults.method || "get").toLowerCase();
    let contextHeaders;
    contextHeaders = headers && utils_default.merge(
      headers.common,
      headers[config2.method]
    );
    contextHeaders && utils_default.forEach(
      ["delete", "get", "head", "post", "put", "patch", "common"],
      (method) => {
        delete headers[method];
      }
    );
    config2.headers = AxiosHeaders_default.concat(contextHeaders, headers);
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config2) === false) {
        return;
      }
      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });
    let promise;
    let i8 = 0;
    let len;
    if (!synchronousRequestInterceptors) {
      const chain = [dispatchRequest.bind(this), void 0];
      chain.unshift.apply(chain, requestInterceptorChain);
      chain.push.apply(chain, responseInterceptorChain);
      len = chain.length;
      promise = Promise.resolve(config2);
      while (i8 < len) {
        promise = promise.then(chain[i8++], chain[i8++]);
      }
      return promise;
    }
    len = requestInterceptorChain.length;
    let newConfig = config2;
    i8 = 0;
    while (i8 < len) {
      const onFulfilled = requestInterceptorChain[i8++];
      const onRejected = requestInterceptorChain[i8++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }
    try {
      promise = dispatchRequest.call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }
    i8 = 0;
    len = responseInterceptorChain.length;
    while (i8 < len) {
      promise = promise.then(responseInterceptorChain[i8++], responseInterceptorChain[i8++]);
    }
    return promise;
  }
  getUri(config2) {
    config2 = mergeConfig(this.defaults, config2);
    const fullPath = buildFullPath(config2.baseURL, config2.url);
    return buildURL(fullPath, config2.params, config2.paramsSerializer);
  }
};
utils_default.forEach(["delete", "get", "head", "options"], function forEachMethodNoData2(method) {
  Axios.prototype[method] = function(url, config2) {
    return this.request(mergeConfig(config2 || {}, {
      method,
      url,
      data: (config2 || {}).data
    }));
  };
});
utils_default.forEach(["post", "put", "patch"], function forEachMethodWithData2(method) {
  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config2) {
      return this.request(mergeConfig(config2 || {}, {
        method,
        headers: isForm ? {
          "Content-Type": "multipart/form-data"
        } : {},
        url,
        data
      }));
    };
  }
  Axios.prototype[method] = generateHTTPMethod();
  Axios.prototype[method + "Form"] = generateHTTPMethod(true);
});
var Axios_default = Axios;

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/cancel/CancelToken.js
init_dirname();
init_buffer2();
init_process2();
var CancelToken = class {
  constructor(executor) {
    if (typeof executor !== "function") {
      throw new TypeError("executor must be a function.");
    }
    let resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve2) {
      resolvePromise = resolve2;
    });
    const token = this;
    this.promise.then((cancel) => {
      if (!token._listeners)
        return;
      let i8 = token._listeners.length;
      while (i8-- > 0) {
        token._listeners[i8](cancel);
      }
      token._listeners = null;
    });
    this.promise.then = (onfulfilled) => {
      let _resolve;
      const promise = new Promise((resolve2) => {
        token.subscribe(resolve2);
        _resolve = resolve2;
      }).then(onfulfilled);
      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };
      return promise;
    };
    executor(function cancel(message, config2, request3) {
      if (token.reason) {
        return;
      }
      token.reason = new CanceledError_default(message, config2, request3);
      resolvePromise(token.reason);
    });
  }
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }
  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }
    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }
  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }
  static source() {
    let cancel;
    const token = new CancelToken(function executor(c8) {
      cancel = c8;
    });
    return {
      token,
      cancel
    };
  }
};
var CancelToken_default = CancelToken;

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/helpers/spread.js
init_dirname();
init_buffer2();
init_process2();
function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/helpers/isAxiosError.js
init_dirname();
init_buffer2();
init_process2();
function isAxiosError(payload) {
  return utils_default.isObject(payload) && payload.isAxiosError === true;
}

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/helpers/HttpStatusCode.js
init_dirname();
init_buffer2();
init_process2();
var HttpStatusCode = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511
};
Object.entries(HttpStatusCode).forEach(([key, value]) => {
  HttpStatusCode[value] = key;
});
var HttpStatusCode_default = HttpStatusCode;

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/lib/axios.js
function createInstance(defaultConfig) {
  const context = new Axios_default(defaultConfig);
  const instance = bind(Axios_default.prototype.request, context);
  utils_default.extend(instance, Axios_default.prototype, context, { allOwnKeys: true });
  utils_default.extend(instance, context, null, { allOwnKeys: true });
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };
  return instance;
}
var axios = createInstance(defaults_default);
axios.Axios = Axios_default;
axios.CanceledError = CanceledError_default;
axios.CancelToken = CancelToken_default;
axios.isCancel = isCancel;
axios.VERSION = VERSION;
axios.toFormData = toFormData_default;
axios.AxiosError = AxiosError_default;
axios.Cancel = axios.CanceledError;
axios.all = function all(promises2) {
  return Promise.all(promises2);
};
axios.spread = spread;
axios.isAxiosError = isAxiosError;
axios.mergeConfig = mergeConfig;
axios.AxiosHeaders = AxiosHeaders_default;
axios.formToJSON = (thing) => formDataToJSON_default(utils_default.isHTMLForm(thing) ? new FormData(thing) : thing);
axios.HttpStatusCode = HttpStatusCode_default;
axios.default = axios;
var axios_default = axios;

// ../../node_modules/.pnpm/axios@1.2.5/node_modules/axios/index.js
var {
  Axios: Axios2,
  AxiosError: AxiosError2,
  CanceledError: CanceledError2,
  isCancel: isCancel2,
  CancelToken: CancelToken2,
  VERSION: VERSION2,
  all: all2,
  Cancel,
  isAxiosError: isAxiosError2,
  spread: spread2,
  toFormData: toFormData2,
  AxiosHeaders: AxiosHeaders2,
  HttpStatusCode: HttpStatusCode2,
  formToJSON,
  mergeConfig: mergeConfig2
} = axios_default;

// src/types.ts
init_dirname();
init_buffer2();
init_process2();

// src/gen/client/errors.ts
init_dirname();
init_buffer2();
init_process2();
init_crypto();
var cryptoLibPolyfill = {
  getRandomValues: (array) => new Uint8Array(array.map(() => Math.floor(Math.random() * 256)))
};
var cryptoLib = typeof window !== "undefined" && typeof window.document !== "undefined" ? window.crypto : exports5;
if (!cryptoLib.getRandomValues) {
  cryptoLib = cryptoLibPolyfill;
}
var BaseApiError = class extends Error {
  constructor(code, description, type, message, error, id) {
    super(message);
    this.code = code;
    this.description = description;
    this.type = type;
    this.message = message;
    this.error = error;
    this.id = id;
    if (!this.id) {
      this.id = BaseApiError.generateId();
    }
  }
  isApiError = true;
  format() {
    return `[${this.type}] ${this.message} (Error ID: ${this.id})`;
  }
  toJSON() {
    return {
      id: this.id,
      code: this.code,
      type: this.type,
      message: this.message
    };
  }
  static generateId() {
    const prefix = this.getPrefix();
    const timestamp = new Date().toISOString().replace(/[\-:TZ]/g, "").split(".")[0];
    const randomSuffixByteLength = 4;
    const randomHexSuffix = Array.from(cryptoLib.getRandomValues(new Uint8Array(randomSuffixByteLength))).map((x4) => x4.toString(16).padStart(2, "0")).join("").toUpperCase();
    return `${prefix}_${timestamp}x${randomHexSuffix}`;
  }
  static getPrefix() {
    if (typeof window !== "undefined" && typeof window.document !== "undefined") {
      return "err_bwsr";
    }
    return "err";
  }
};
var isObject3 = (obj) => typeof obj === "object" && !Array.isArray(obj) && obj !== null;
var isApiError = (thrown) => {
  return thrown instanceof BaseApiError || isObject3(thrown) && thrown.isApiError === true;
};
var UnknownError = class extends BaseApiError {
  constructor(message, error, id) {
    super(500, "An unknown error occurred", "Unknown", message, error, id);
  }
};
var InternalError = class extends BaseApiError {
  constructor(message, error, id) {
    super(500, "An internal error occurred", "Internal", message, error, id);
  }
};
var UnauthorizedError = class extends BaseApiError {
  constructor(message, error, id) {
    super(401, "The request requires to be authenticated.", "Unauthorized", message, error, id);
  }
};
var ForbiddenError = class extends BaseApiError {
  constructor(message, error, id) {
    super(403, "The requested action can't be peform by this resource.", "Forbidden", message, error, id);
  }
};
var PayloadTooLargeError = class extends BaseApiError {
  constructor(message, error, id) {
    super(413, "The request payload is too large.", "PayloadTooLarge", message, error, id);
  }
};
var InvalidPayloadError = class extends BaseApiError {
  constructor(message, error, id) {
    super(400, "The request payload is invalid.", "InvalidPayload", message, error, id);
  }
};
var UnsupportedMediaTypeError = class extends BaseApiError {
  constructor(message, error, id) {
    super(415, "The request is invalid because the content-type is not supported.", "UnsupportedMediaType", message, error, id);
  }
};
var MethodNotFoundError = class extends BaseApiError {
  constructor(message, error, id) {
    super(405, "The requested method does not exist.", "MethodNotFound", message, error, id);
  }
};
var ResourceNotFoundError = class extends BaseApiError {
  constructor(message, error, id) {
    super(404, "The requested resource does not exist.", "ResourceNotFound", message, error, id);
  }
};
var InvalidJsonSchemaError = class extends BaseApiError {
  constructor(message, error, id) {
    super(400, "The provided JSON schema is invalid.", "InvalidJsonSchema", message, error, id);
  }
};
var InvalidDataFormatError = class extends BaseApiError {
  constructor(message, error, id) {
    super(400, "The provided data doesn't respect the provided JSON schema.", "InvalidDataFormat", message, error, id);
  }
};
var InvalidIdentifierError = class extends BaseApiError {
  constructor(message, error, id) {
    super(400, "The provided identifier is not valid. An identifier must start with a lowercase letter, be between 2 and 100 characters long and use only alphanumeric characters.", "InvalidIdentifier", message, error, id);
  }
};
var RelationConflictError = class extends BaseApiError {
  constructor(message, error, id) {
    super(409, "The resource is related with a different resource that the one referenced in the request. This is usually caused when providing two resource identifiers that aren't linked together.", "RelationConflict", message, error, id);
  }
};
var ReferenceConstraintError = class extends BaseApiError {
  constructor(message, error, id) {
    super(409, "The resource cannot be deleted because it's referenced by another resource", "ReferenceConstraint", message, error, id);
  }
};
var ResourceLockedConflictError = class extends BaseApiError {
  constructor(message, error, id) {
    super(409, "The resource is current locked and cannot be operated on until the lock is released.", "ResourceLockedConflict", message, error, id);
  }
};
var ReferenceNotFoundError = class extends BaseApiError {
  constructor(message, error, id) {
    super(400, "The provided resource reference is missing. This is usually caused when providing an invalid id inside the payload of a request.", "ReferenceNotFound", message, error, id);
  }
};
var InvalidQueryError = class extends BaseApiError {
  constructor(message, error, id) {
    super(400, "The provided query is invalid. This is usually caused when providing an invalid parameter for querying a resource.", "InvalidQuery", message, error, id);
  }
};
var RuntimeError = class extends BaseApiError {
  constructor(message, error, id) {
    super(400, "An error happened during the execution of a runtime (bot or integration).", "Runtime", message, error, id);
  }
};
var AlreadyExistsError = class extends BaseApiError {
  constructor(message, error, id) {
    super(409, "The record attempted to be created already exists.", "AlreadyExists", message, error, id);
  }
};
var RateLimitedError = class extends BaseApiError {
  constructor(message, error, id) {
    super(429, "The request has been rate limited.", "RateLimited", message, error, id);
  }
};
var PaymentRequiredError = class extends BaseApiError {
  constructor(message, error, id) {
    super(402, "A payment is required to perform this request.", "PaymentRequired", message, error, id);
  }
};
var QuotaExceededError = class extends BaseApiError {
  constructor(message, error, id) {
    super(403, "The request exceeds the allowed quota. Quotas are a soft limit that can be increased.", "QuotaExceeded", message, error, id);
  }
};
var LimitExceededError = class extends BaseApiError {
  constructor(message, error, id) {
    super(413, "The request exceeds the allowed limit. Limits are a hard limit that cannot be increased.", "LimitExceeded", message, error, id);
  }
};
var BreakingChangesError = class extends BaseApiError {
  constructor(message, error, id) {
    super(400, "Request payload contains breaking changes which is not allowed for this resource without a version increment.", "BreakingChanges", message, error, id);
  }
};
var errorTypes = {
  Unknown: UnknownError,
  Internal: InternalError,
  Unauthorized: UnauthorizedError,
  Forbidden: ForbiddenError,
  PayloadTooLarge: PayloadTooLargeError,
  InvalidPayload: InvalidPayloadError,
  UnsupportedMediaType: UnsupportedMediaTypeError,
  MethodNotFound: MethodNotFoundError,
  ResourceNotFound: ResourceNotFoundError,
  InvalidJsonSchema: InvalidJsonSchemaError,
  InvalidDataFormat: InvalidDataFormatError,
  InvalidIdentifier: InvalidIdentifierError,
  RelationConflict: RelationConflictError,
  ReferenceConstraint: ReferenceConstraintError,
  ResourceLockedConflict: ResourceLockedConflictError,
  ReferenceNotFound: ReferenceNotFoundError,
  InvalidQuery: InvalidQueryError,
  Runtime: RuntimeError,
  AlreadyExists: AlreadyExistsError,
  RateLimited: RateLimitedError,
  PaymentRequired: PaymentRequiredError,
  QuotaExceeded: QuotaExceededError,
  LimitExceeded: LimitExceededError,
  BreakingChanges: BreakingChangesError
};
var errorFrom = (err) => {
  if (isApiError(err)) {
    return err;
  } else if (err instanceof Error) {
    return new UnknownError(err.message, err);
  } else if (typeof err === "string") {
    return new UnknownError(err);
  } else {
    return getApiErrorFromObject(err);
  }
};
function getApiErrorFromObject(err) {
  if (typeof err === "object" && "code" in err && "type" in err && "id" in err && "message" in err && typeof err.type === "string" && typeof err.message === "string") {
    const ErrorClass = errorTypes[err.type];
    if (!ErrorClass) {
      return new UnknownError(`An unclassified API error occurred: ${err.message} (Type: ${err.type}, Code: ${err.code})`);
    }
    return new ErrorClass(err.message, void 0, err.id || "UNKNOWN");
  }
  return new UnknownError("An invalid error occurred: " + JSON.stringify(err));
}

// src/client.ts
init_dirname();
init_buffer2();
init_process2();
var import_browser_or_node3 = __toESM(require_lib());

// src/gen/client/index.ts
init_dirname();
init_buffer2();
init_process2();

// src/gen/client/to-axios.ts
init_dirname();
init_buffer2();
init_process2();
var import_qs = __toESM(require_lib2());
var isDefined = (pair) => pair[1] !== void 0;
var toAxiosRequest = (req) => {
  const { method, path: path2, query, headers: headerParams, body: data } = req;
  const headerEntries = Object.entries(headerParams).filter(isDefined);
  const headers = Object.fromEntries(headerEntries);
  const queryString = import_qs.default.stringify(query, { encode: true, arrayFormat: "repeat", allowDots: true });
  const url = queryString ? [path2, queryString].join("?") : path2;
  return {
    method,
    url,
    headers,
    data
  };
};

// src/gen/client/operations/getConversation.ts
init_dirname();
init_buffer2();
init_process2();
var parseReq = (input) => {
  return {
    path: `/conversations/${encodeURIComponent(input["id"])}`,
    headers: { "x-user-key": input["x-user-key"] },
    query: {},
    params: { "id": input["id"] },
    body: {}
  };
};

// src/gen/client/operations/createConversation.ts
init_dirname();
init_buffer2();
init_process2();
var parseReq2 = (input) => {
  return {
    path: `/conversations`,
    headers: { "x-user-key": input["x-user-key"] },
    query: {},
    params: {},
    body: { "id": input["id"] }
  };
};

// src/gen/client/operations/getOrCreateConversation.ts
init_dirname();
init_buffer2();
init_process2();
var parseReq3 = (input) => {
  return {
    path: `/conversations/get-or-create`,
    headers: { "x-user-key": input["x-user-key"] },
    query: {},
    params: {},
    body: { "id": input["id"] }
  };
};

// src/gen/client/operations/deleteConversation.ts
init_dirname();
init_buffer2();
init_process2();
var parseReq4 = (input) => {
  return {
    path: `/conversations/${encodeURIComponent(input["id"])}`,
    headers: { "x-user-key": input["x-user-key"] },
    query: {},
    params: { "id": input["id"] },
    body: {}
  };
};

// src/gen/client/operations/listConversations.ts
init_dirname();
init_buffer2();
init_process2();
var parseReq5 = (input) => {
  return {
    path: `/conversations`,
    headers: { "x-user-key": input["x-user-key"] },
    query: { "nextToken": input["nextToken"] },
    params: {},
    body: {}
  };
};

// src/gen/client/operations/listenConversation.ts
init_dirname();
init_buffer2();
init_process2();
var parseReq6 = (input) => {
  return {
    path: `/conversations/${encodeURIComponent(input["id"])}/listen`,
    headers: { "x-user-key": input["x-user-key"] },
    query: {},
    params: { "id": input["id"] },
    body: {}
  };
};

// src/gen/client/operations/listMessages.ts
init_dirname();
init_buffer2();
init_process2();
var parseReq7 = (input) => {
  return {
    path: `/conversations/${encodeURIComponent(input["conversationId"])}/messages`,
    headers: { "x-user-key": input["x-user-key"] },
    query: { "nextToken": input["nextToken"] },
    params: { "conversationId": input["conversationId"] },
    body: {}
  };
};

// src/gen/client/operations/addParticipant.ts
init_dirname();
init_buffer2();
init_process2();
var parseReq8 = (input) => {
  return {
    path: `/conversations/${encodeURIComponent(input["conversationId"])}/participants`,
    headers: { "x-user-key": input["x-user-key"] },
    query: {},
    params: { "conversationId": input["conversationId"] },
    body: { "userId": input["userId"] }
  };
};

// src/gen/client/operations/removeParticipant.ts
init_dirname();
init_buffer2();
init_process2();
var parseReq9 = (input) => {
  return {
    path: `/conversations/${encodeURIComponent(input["conversationId"])}/participants/${encodeURIComponent(input["userId"])}`,
    headers: { "x-user-key": input["x-user-key"] },
    query: {},
    params: { "conversationId": input["conversationId"], "userId": input["userId"] },
    body: {}
  };
};

// src/gen/client/operations/getParticipant.ts
init_dirname();
init_buffer2();
init_process2();
var parseReq10 = (input) => {
  return {
    path: `/conversations/${encodeURIComponent(input["conversationId"])}/participants/${encodeURIComponent(input["userId"])}`,
    headers: { "x-user-key": input["x-user-key"] },
    query: {},
    params: { "conversationId": input["conversationId"], "userId": input["userId"] },
    body: {}
  };
};

// src/gen/client/operations/listParticipants.ts
init_dirname();
init_buffer2();
init_process2();
var parseReq11 = (input) => {
  return {
    path: `/conversations/${encodeURIComponent(input["conversationId"])}/participants`,
    headers: { "x-user-key": input["x-user-key"] },
    query: { "nextToken": input["nextToken"] },
    params: { "conversationId": input["conversationId"] },
    body: {}
  };
};

// src/gen/client/operations/getMessage.ts
init_dirname();
init_buffer2();
init_process2();
var parseReq12 = (input) => {
  return {
    path: `/messages/${encodeURIComponent(input["id"])}`,
    headers: { "x-user-key": input["x-user-key"] },
    query: {},
    params: { "id": input["id"] },
    body: {}
  };
};

// src/gen/client/operations/createMessage.ts
init_dirname();
init_buffer2();
init_process2();
var parseReq13 = (input) => {
  return {
    path: `/messages`,
    headers: { "x-user-key": input["x-user-key"] },
    query: {},
    params: {},
    body: { "payload": input["payload"], "conversationId": input["conversationId"] }
  };
};

// src/gen/client/operations/deleteMessage.ts
init_dirname();
init_buffer2();
init_process2();
var parseReq14 = (input) => {
  return {
    path: `/messages/${encodeURIComponent(input["id"])}`,
    headers: { "x-user-key": input["x-user-key"] },
    query: {},
    params: { "id": input["id"] },
    body: {}
  };
};

// src/gen/client/operations/getUser.ts
init_dirname();
init_buffer2();
init_process2();
var parseReq15 = (input) => {
  return {
    path: `/users/me`,
    headers: { "x-user-key": input["x-user-key"] },
    query: {},
    params: {},
    body: {}
  };
};

// src/gen/client/operations/createUser.ts
init_dirname();
init_buffer2();
init_process2();
var parseReq16 = (input) => {
  return {
    path: `/users`,
    headers: {},
    query: {},
    params: {},
    body: { "name": input["name"], "pictureUrl": input["pictureUrl"], "profile": input["profile"], "id": input["id"] }
  };
};

// src/gen/client/operations/getOrCreateUser.ts
init_dirname();
init_buffer2();
init_process2();
var parseReq17 = (input) => {
  return {
    path: `/users/get-or-create`,
    headers: { "x-user-key": input["x-user-key"] },
    query: {},
    params: {},
    body: { "name": input["name"], "pictureUrl": input["pictureUrl"], "profile": input["profile"] }
  };
};

// src/gen/client/operations/updateUser.ts
init_dirname();
init_buffer2();
init_process2();
var parseReq18 = (input) => {
  return {
    path: `/users/me`,
    headers: { "x-user-key": input["x-user-key"] },
    query: {},
    params: {},
    body: { "name": input["name"], "pictureUrl": input["pictureUrl"], "profile": input["profile"] }
  };
};

// src/gen/client/operations/deleteUser.ts
init_dirname();
init_buffer2();
init_process2();
var parseReq19 = (input) => {
  return {
    path: `/users/me`,
    headers: { "x-user-key": input["x-user-key"] },
    query: {},
    params: {},
    body: {}
  };
};

// src/gen/client/operations/getEvent.ts
init_dirname();
init_buffer2();
init_process2();
var parseReq20 = (input) => {
  return {
    path: `/events/${encodeURIComponent(input["id"])}`,
    headers: { "x-user-key": input["x-user-key"] },
    query: {},
    params: { "id": input["id"] },
    body: {}
  };
};

// src/gen/client/operations/createEvent.ts
init_dirname();
init_buffer2();
init_process2();
var parseReq21 = (input) => {
  return {
    path: `/events`,
    headers: { "x-user-key": input["x-user-key"] },
    query: {},
    params: {},
    body: { "payload": input["payload"], "conversationId": input["conversationId"] }
  };
};

// src/gen/client/models.ts
init_dirname();
init_buffer2();
init_process2();

// src/gen/client/index.ts
var Client = class {
  constructor(axiosInstance, props = {}) {
    this.axiosInstance = axiosInstance;
    this.props = props;
  }
  getConversation = async (input) => {
    const { path: path2, headers, query, body } = parseReq(input);
    const mapper = this.props.toAxiosRequest ?? toAxiosRequest;
    const axiosReq = mapper({
      method: "get",
      path: path2,
      headers: { ...headers },
      query: { ...query },
      body
    });
    return this.axiosInstance.request(axiosReq).then((res) => res.data).catch((e11) => {
      throw getError(e11);
    });
  };
  createConversation = async (input) => {
    const { path: path2, headers, query, body } = parseReq2(input);
    const mapper = this.props.toAxiosRequest ?? toAxiosRequest;
    const axiosReq = mapper({
      method: "post",
      path: path2,
      headers: { ...headers },
      query: { ...query },
      body
    });
    return this.axiosInstance.request(axiosReq).then((res) => res.data).catch((e11) => {
      throw getError(e11);
    });
  };
  getOrCreateConversation = async (input) => {
    const { path: path2, headers, query, body } = parseReq3(input);
    const mapper = this.props.toAxiosRequest ?? toAxiosRequest;
    const axiosReq = mapper({
      method: "post",
      path: path2,
      headers: { ...headers },
      query: { ...query },
      body
    });
    return this.axiosInstance.request(axiosReq).then((res) => res.data).catch((e11) => {
      throw getError(e11);
    });
  };
  deleteConversation = async (input) => {
    const { path: path2, headers, query, body } = parseReq4(input);
    const mapper = this.props.toAxiosRequest ?? toAxiosRequest;
    const axiosReq = mapper({
      method: "delete",
      path: path2,
      headers: { ...headers },
      query: { ...query },
      body
    });
    return this.axiosInstance.request(axiosReq).then((res) => res.data).catch((e11) => {
      throw getError(e11);
    });
  };
  listConversations = async (input) => {
    const { path: path2, headers, query, body } = parseReq5(input);
    const mapper = this.props.toAxiosRequest ?? toAxiosRequest;
    const axiosReq = mapper({
      method: "get",
      path: path2,
      headers: { ...headers },
      query: { ...query },
      body
    });
    return this.axiosInstance.request(axiosReq).then((res) => res.data).catch((e11) => {
      throw getError(e11);
    });
  };
  listenConversation = async (input) => {
    const { path: path2, headers, query, body } = parseReq6(input);
    const mapper = this.props.toAxiosRequest ?? toAxiosRequest;
    const axiosReq = mapper({
      method: "get",
      path: path2,
      headers: { ...headers },
      query: { ...query },
      body
    });
    return this.axiosInstance.request(axiosReq).then((res) => res.data).catch((e11) => {
      throw getError(e11);
    });
  };
  listMessages = async (input) => {
    const { path: path2, headers, query, body } = parseReq7(input);
    const mapper = this.props.toAxiosRequest ?? toAxiosRequest;
    const axiosReq = mapper({
      method: "get",
      path: path2,
      headers: { ...headers },
      query: { ...query },
      body
    });
    return this.axiosInstance.request(axiosReq).then((res) => res.data).catch((e11) => {
      throw getError(e11);
    });
  };
  addParticipant = async (input) => {
    const { path: path2, headers, query, body } = parseReq8(input);
    const mapper = this.props.toAxiosRequest ?? toAxiosRequest;
    const axiosReq = mapper({
      method: "post",
      path: path2,
      headers: { ...headers },
      query: { ...query },
      body
    });
    return this.axiosInstance.request(axiosReq).then((res) => res.data).catch((e11) => {
      throw getError(e11);
    });
  };
  removeParticipant = async (input) => {
    const { path: path2, headers, query, body } = parseReq9(input);
    const mapper = this.props.toAxiosRequest ?? toAxiosRequest;
    const axiosReq = mapper({
      method: "delete",
      path: path2,
      headers: { ...headers },
      query: { ...query },
      body
    });
    return this.axiosInstance.request(axiosReq).then((res) => res.data).catch((e11) => {
      throw getError(e11);
    });
  };
  getParticipant = async (input) => {
    const { path: path2, headers, query, body } = parseReq10(input);
    const mapper = this.props.toAxiosRequest ?? toAxiosRequest;
    const axiosReq = mapper({
      method: "get",
      path: path2,
      headers: { ...headers },
      query: { ...query },
      body
    });
    return this.axiosInstance.request(axiosReq).then((res) => res.data).catch((e11) => {
      throw getError(e11);
    });
  };
  listParticipants = async (input) => {
    const { path: path2, headers, query, body } = parseReq11(input);
    const mapper = this.props.toAxiosRequest ?? toAxiosRequest;
    const axiosReq = mapper({
      method: "get",
      path: path2,
      headers: { ...headers },
      query: { ...query },
      body
    });
    return this.axiosInstance.request(axiosReq).then((res) => res.data).catch((e11) => {
      throw getError(e11);
    });
  };
  getMessage = async (input) => {
    const { path: path2, headers, query, body } = parseReq12(input);
    const mapper = this.props.toAxiosRequest ?? toAxiosRequest;
    const axiosReq = mapper({
      method: "get",
      path: path2,
      headers: { ...headers },
      query: { ...query },
      body
    });
    return this.axiosInstance.request(axiosReq).then((res) => res.data).catch((e11) => {
      throw getError(e11);
    });
  };
  createMessage = async (input) => {
    const { path: path2, headers, query, body } = parseReq13(input);
    const mapper = this.props.toAxiosRequest ?? toAxiosRequest;
    const axiosReq = mapper({
      method: "post",
      path: path2,
      headers: { ...headers },
      query: { ...query },
      body
    });
    return this.axiosInstance.request(axiosReq).then((res) => res.data).catch((e11) => {
      throw getError(e11);
    });
  };
  deleteMessage = async (input) => {
    const { path: path2, headers, query, body } = parseReq14(input);
    const mapper = this.props.toAxiosRequest ?? toAxiosRequest;
    const axiosReq = mapper({
      method: "delete",
      path: path2,
      headers: { ...headers },
      query: { ...query },
      body
    });
    return this.axiosInstance.request(axiosReq).then((res) => res.data).catch((e11) => {
      throw getError(e11);
    });
  };
  getUser = async (input) => {
    const { path: path2, headers, query, body } = parseReq15(input);
    const mapper = this.props.toAxiosRequest ?? toAxiosRequest;
    const axiosReq = mapper({
      method: "get",
      path: path2,
      headers: { ...headers },
      query: { ...query },
      body
    });
    return this.axiosInstance.request(axiosReq).then((res) => res.data).catch((e11) => {
      throw getError(e11);
    });
  };
  createUser = async (input) => {
    const { path: path2, headers, query, body } = parseReq16(input);
    const mapper = this.props.toAxiosRequest ?? toAxiosRequest;
    const axiosReq = mapper({
      method: "post",
      path: path2,
      headers: { ...headers },
      query: { ...query },
      body
    });
    return this.axiosInstance.request(axiosReq).then((res) => res.data).catch((e11) => {
      throw getError(e11);
    });
  };
  getOrCreateUser = async (input) => {
    const { path: path2, headers, query, body } = parseReq17(input);
    const mapper = this.props.toAxiosRequest ?? toAxiosRequest;
    const axiosReq = mapper({
      method: "post",
      path: path2,
      headers: { ...headers },
      query: { ...query },
      body
    });
    return this.axiosInstance.request(axiosReq).then((res) => res.data).catch((e11) => {
      throw getError(e11);
    });
  };
  updateUser = async (input) => {
    const { path: path2, headers, query, body } = parseReq18(input);
    const mapper = this.props.toAxiosRequest ?? toAxiosRequest;
    const axiosReq = mapper({
      method: "put",
      path: path2,
      headers: { ...headers },
      query: { ...query },
      body
    });
    return this.axiosInstance.request(axiosReq).then((res) => res.data).catch((e11) => {
      throw getError(e11);
    });
  };
  deleteUser = async (input) => {
    const { path: path2, headers, query, body } = parseReq19(input);
    const mapper = this.props.toAxiosRequest ?? toAxiosRequest;
    const axiosReq = mapper({
      method: "delete",
      path: path2,
      headers: { ...headers },
      query: { ...query },
      body
    });
    return this.axiosInstance.request(axiosReq).then((res) => res.data).catch((e11) => {
      throw getError(e11);
    });
  };
  getEvent = async (input) => {
    const { path: path2, headers, query, body } = parseReq20(input);
    const mapper = this.props.toAxiosRequest ?? toAxiosRequest;
    const axiosReq = mapper({
      method: "get",
      path: path2,
      headers: { ...headers },
      query: { ...query },
      body
    });
    return this.axiosInstance.request(axiosReq).then((res) => res.data).catch((e11) => {
      throw getError(e11);
    });
  };
  createEvent = async (input) => {
    const { path: path2, headers, query, body } = parseReq21(input);
    const mapper = this.props.toAxiosRequest ?? toAxiosRequest;
    const axiosReq = mapper({
      method: "post",
      path: path2,
      headers: { ...headers },
      query: { ...query },
      body
    });
    return this.axiosInstance.request(axiosReq).then((res) => res.data).catch((e11) => {
      throw getError(e11);
    });
  };
};
function getError(err) {
  if (axios_default.isAxiosError(err) && err.response?.data) {
    return errorFrom(err.response.data);
  }
  return errorFrom(err);
}

// src/signal-listener.ts
init_dirname();
init_buffer2();
init_process2();

// src/event-emitter.ts
init_dirname();
init_buffer2();
init_process2();
var EventEmitter = class {
  listeners = {};
  emit(type, event) {
    const listeners2 = this.listeners[type];
    if (!listeners2) {
      return;
    }
    for (const listener of [...listeners2]) {
      listener(event);
    }
  }
  onceOrMore(type, listener) {
    const wrapped = (event) => {
      const status = listener(event);
      if (status === "stop-listening") {
        this.off(type, wrapped);
      }
    };
    this.on(type, wrapped);
  }
  once(type, listener) {
    const wrapped = (event) => {
      this.off(type, wrapped);
      listener(event);
    };
    this.on(type, wrapped);
  }
  on(type, listener) {
    if (!this.listeners[type]) {
      this.listeners[type] = [];
    }
    this.listeners[type].push(listener);
  }
  off(type, listener) {
    const listeners2 = this.listeners[type];
    if (!listeners2) {
      return;
    }
    const index = listeners2.indexOf(listener);
    if (index !== -1) {
      listeners2.splice(index, 1);
    }
  }
  cleanup() {
    this.listeners = {};
  }
};

// src/eventsource.ts
init_dirname();
init_buffer2();
init_process2();
var import_browser_or_node = __toESM(require_lib());
var makeEventSource = (url, props = {}) => {
  if (import_browser_or_node.isBrowser) {
    const module3 = require_eventsource();
    const ctor = module3.EventSourcePolyfill;
    const source = new ctor(url, { headers: props.headers });
    const emitter = new EventEmitter();
    source.onopen = (ev) => emitter.emit("open", ev);
    source.onmessage = (ev) => emitter.emit("message", ev);
    source.onerror = (ev) => emitter.emit("error", ev);
    return {
      emitter,
      source
    };
  } else {
    const module3 = require_eventsource2();
    const source = new module3(url, { headers: props.headers });
    const emitter = new EventEmitter();
    source.onopen = (ev) => emitter.emit("open", ev);
    source.onmessage = (ev) => emitter.emit("message", ev);
    source.onerror = (ev) => emitter.emit("error", ev);
    return {
      emitter,
      source
    };
  }
};
var listenEventSource = async (url, props = {}) => {
  const { emitter, source } = makeEventSource(url, props);
  await new Promise((resolve2, reject) => {
    emitter.on("open", () => {
      resolve2();
    });
    emitter.on("error", (thrown) => {
      reject(thrown);
    });
  }).finally(() => emitter.cleanup());
  return {
    on: emitter.on.bind(emitter),
    close: () => {
      emitter.cleanup();
      source.close();
    }
  };
};

// src/gen/signals/index.ts
init_dirname();
init_buffer2();
init_process2();

// src/gen/signals/messageCreated.j.ts
init_dirname();
init_buffer2();
init_process2();

// src/gen/signals/eventCreated.j.ts
init_dirname();
init_buffer2();
init_process2();

// src/gen/signals/participantAdded.j.ts
init_dirname();
init_buffer2();
init_process2();

// src/gen/signals/participantRemoved.j.ts
init_dirname();
init_buffer2();
init_process2();

// src/gen/signals/messageDeleted.j.ts
init_dirname();
init_buffer2();
init_process2();

// src/gen/signals/messageCreated.z.ts
init_dirname();
init_buffer2();
init_process2();

// ../../node_modules/.pnpm/zod@3.21.4/node_modules/zod/lib/index.mjs
init_dirname();
init_buffer2();
init_process2();
var util;
(function(util2) {
  util2.assertEqual = (val) => val;
  function assertIs(_arg) {
  }
  util2.assertIs = assertIs;
  function assertNever(_x) {
    throw new Error();
  }
  util2.assertNever = assertNever;
  util2.arrayToEnum = (items) => {
    const obj = {};
    for (const item of items) {
      obj[item] = item;
    }
    return obj;
  };
  util2.getValidEnumValues = (obj) => {
    const validKeys = util2.objectKeys(obj).filter((k4) => typeof obj[obj[k4]] !== "number");
    const filtered = {};
    for (const k4 of validKeys) {
      filtered[k4] = obj[k4];
    }
    return util2.objectValues(filtered);
  };
  util2.objectValues = (obj) => {
    return util2.objectKeys(obj).map(function(e11) {
      return obj[e11];
    });
  };
  util2.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object) => {
    const keys = [];
    for (const key in object) {
      if (Object.prototype.hasOwnProperty.call(object, key)) {
        keys.push(key);
      }
    }
    return keys;
  };
  util2.find = (arr, checker) => {
    for (const item of arr) {
      if (checker(item))
        return item;
    }
    return void 0;
  };
  util2.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
  function joinValues(array, separator = " | ") {
    return array.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
  }
  util2.joinValues = joinValues;
  util2.jsonStringifyReplacer = (_4, value) => {
    if (typeof value === "bigint") {
      return value.toString();
    }
    return value;
  };
})(util || (util = {}));
var objectUtil;
(function(objectUtil2) {
  objectUtil2.mergeShapes = (first, second) => {
    return {
      ...first,
      ...second
    };
  };
})(objectUtil || (objectUtil = {}));
var ZodParsedType = util.arrayToEnum([
  "string",
  "nan",
  "number",
  "integer",
  "float",
  "boolean",
  "date",
  "bigint",
  "symbol",
  "function",
  "undefined",
  "null",
  "array",
  "object",
  "unknown",
  "promise",
  "void",
  "never",
  "map",
  "set"
]);
var getParsedType = (data) => {
  const t8 = typeof data;
  switch (t8) {
    case "undefined":
      return ZodParsedType.undefined;
    case "string":
      return ZodParsedType.string;
    case "number":
      return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
    case "boolean":
      return ZodParsedType.boolean;
    case "function":
      return ZodParsedType.function;
    case "bigint":
      return ZodParsedType.bigint;
    case "symbol":
      return ZodParsedType.symbol;
    case "object":
      if (Array.isArray(data)) {
        return ZodParsedType.array;
      }
      if (data === null) {
        return ZodParsedType.null;
      }
      if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
        return ZodParsedType.promise;
      }
      if (typeof Map !== "undefined" && data instanceof Map) {
        return ZodParsedType.map;
      }
      if (typeof Set !== "undefined" && data instanceof Set) {
        return ZodParsedType.set;
      }
      if (typeof Date !== "undefined" && data instanceof Date) {
        return ZodParsedType.date;
      }
      return ZodParsedType.object;
    default:
      return ZodParsedType.unknown;
  }
};
var ZodIssueCode = util.arrayToEnum([
  "invalid_type",
  "invalid_literal",
  "custom",
  "invalid_union",
  "invalid_union_discriminator",
  "invalid_enum_value",
  "unrecognized_keys",
  "invalid_arguments",
  "invalid_return_type",
  "invalid_date",
  "invalid_string",
  "too_small",
  "too_big",
  "invalid_intersection_types",
  "not_multiple_of",
  "not_finite"
]);
var quotelessJson = (obj) => {
  const json = JSON.stringify(obj, null, 2);
  return json.replace(/"([^"]+)":/g, "$1:");
};
var ZodError = class extends Error {
  constructor(issues) {
    super();
    this.issues = [];
    this.addIssue = (sub) => {
      this.issues = [...this.issues, sub];
    };
    this.addIssues = (subs = []) => {
      this.issues = [...this.issues, ...subs];
    };
    const actualProto = new.target.prototype;
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(this, actualProto);
    } else {
      this.__proto__ = actualProto;
    }
    this.name = "ZodError";
    this.issues = issues;
  }
  get errors() {
    return this.issues;
  }
  format(_mapper) {
    const mapper = _mapper || function(issue) {
      return issue.message;
    };
    const fieldErrors = { _errors: [] };
    const processError = (error) => {
      for (const issue of error.issues) {
        if (issue.code === "invalid_union") {
          issue.unionErrors.map(processError);
        } else if (issue.code === "invalid_return_type") {
          processError(issue.returnTypeError);
        } else if (issue.code === "invalid_arguments") {
          processError(issue.argumentsError);
        } else if (issue.path.length === 0) {
          fieldErrors._errors.push(mapper(issue));
        } else {
          let curr = fieldErrors;
          let i8 = 0;
          while (i8 < issue.path.length) {
            const el = issue.path[i8];
            const terminal = i8 === issue.path.length - 1;
            if (!terminal) {
              curr[el] = curr[el] || { _errors: [] };
            } else {
              curr[el] = curr[el] || { _errors: [] };
              curr[el]._errors.push(mapper(issue));
            }
            curr = curr[el];
            i8++;
          }
        }
      }
    };
    processError(this);
    return fieldErrors;
  }
  toString() {
    return this.message;
  }
  get message() {
    return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
  }
  get isEmpty() {
    return this.issues.length === 0;
  }
  flatten(mapper = (issue) => issue.message) {
    const fieldErrors = {};
    const formErrors = [];
    for (const sub of this.issues) {
      if (sub.path.length > 0) {
        fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
        fieldErrors[sub.path[0]].push(mapper(sub));
      } else {
        formErrors.push(mapper(sub));
      }
    }
    return { formErrors, fieldErrors };
  }
  get formErrors() {
    return this.flatten();
  }
};
ZodError.create = (issues) => {
  const error = new ZodError(issues);
  return error;
};
var errorMap = (issue, _ctx) => {
  let message;
  switch (issue.code) {
    case ZodIssueCode.invalid_type:
      if (issue.received === ZodParsedType.undefined) {
        message = "Required";
      } else {
        message = `Expected ${issue.expected}, received ${issue.received}`;
      }
      break;
    case ZodIssueCode.invalid_literal:
      message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;
      break;
    case ZodIssueCode.unrecognized_keys:
      message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
      break;
    case ZodIssueCode.invalid_union:
      message = `Invalid input`;
      break;
    case ZodIssueCode.invalid_union_discriminator:
      message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
      break;
    case ZodIssueCode.invalid_enum_value:
      message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
      break;
    case ZodIssueCode.invalid_arguments:
      message = `Invalid function arguments`;
      break;
    case ZodIssueCode.invalid_return_type:
      message = `Invalid function return type`;
      break;
    case ZodIssueCode.invalid_date:
      message = `Invalid date`;
      break;
    case ZodIssueCode.invalid_string:
      if (typeof issue.validation === "object") {
        if ("includes" in issue.validation) {
          message = `Invalid input: must include "${issue.validation.includes}"`;
          if (typeof issue.validation.position === "number") {
            message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
          }
        } else if ("startsWith" in issue.validation) {
          message = `Invalid input: must start with "${issue.validation.startsWith}"`;
        } else if ("endsWith" in issue.validation) {
          message = `Invalid input: must end with "${issue.validation.endsWith}"`;
        } else {
          util.assertNever(issue.validation);
        }
      } else if (issue.validation !== "regex") {
        message = `Invalid ${issue.validation}`;
      } else {
        message = "Invalid";
      }
      break;
    case ZodIssueCode.too_small:
      if (issue.type === "array")
        message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
      else if (issue.type === "string")
        message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
      else if (issue.type === "number")
        message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
      else if (issue.type === "date")
        message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode.too_big:
      if (issue.type === "array")
        message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
      else if (issue.type === "string")
        message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
      else if (issue.type === "number")
        message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
      else if (issue.type === "bigint")
        message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
      else if (issue.type === "date")
        message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode.custom:
      message = `Invalid input`;
      break;
    case ZodIssueCode.invalid_intersection_types:
      message = `Intersection results could not be merged`;
      break;
    case ZodIssueCode.not_multiple_of:
      message = `Number must be a multiple of ${issue.multipleOf}`;
      break;
    case ZodIssueCode.not_finite:
      message = "Number must be finite";
      break;
    default:
      message = _ctx.defaultError;
      util.assertNever(issue);
  }
  return { message };
};
var overrideErrorMap = errorMap;
function setErrorMap(map) {
  overrideErrorMap = map;
}
function getErrorMap() {
  return overrideErrorMap;
}
var makeIssue = (params) => {
  const { data, path: path2, errorMaps, issueData } = params;
  const fullPath = [...path2, ...issueData.path || []];
  const fullIssue = {
    ...issueData,
    path: fullPath
  };
  let errorMessage = "";
  const maps = errorMaps.filter((m6) => !!m6).slice().reverse();
  for (const map of maps) {
    errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
  }
  return {
    ...issueData,
    path: fullPath,
    message: issueData.message || errorMessage
  };
};
var EMPTY_PATH = [];
function addIssueToContext(ctx, issueData) {
  const issue = makeIssue({
    issueData,
    data: ctx.data,
    path: ctx.path,
    errorMaps: [
      ctx.common.contextualErrorMap,
      ctx.schemaErrorMap,
      getErrorMap(),
      errorMap
    ].filter((x4) => !!x4)
  });
  ctx.common.issues.push(issue);
}
var ParseStatus = class {
  constructor() {
    this.value = "valid";
  }
  dirty() {
    if (this.value === "valid")
      this.value = "dirty";
  }
  abort() {
    if (this.value !== "aborted")
      this.value = "aborted";
  }
  static mergeArray(status, results) {
    const arrayValue = [];
    for (const s7 of results) {
      if (s7.status === "aborted")
        return INVALID;
      if (s7.status === "dirty")
        status.dirty();
      arrayValue.push(s7.value);
    }
    return { status: status.value, value: arrayValue };
  }
  static async mergeObjectAsync(status, pairs) {
    const syncPairs = [];
    for (const pair of pairs) {
      syncPairs.push({
        key: await pair.key,
        value: await pair.value
      });
    }
    return ParseStatus.mergeObjectSync(status, syncPairs);
  }
  static mergeObjectSync(status, pairs) {
    const finalObject = {};
    for (const pair of pairs) {
      const { key, value } = pair;
      if (key.status === "aborted")
        return INVALID;
      if (value.status === "aborted")
        return INVALID;
      if (key.status === "dirty")
        status.dirty();
      if (value.status === "dirty")
        status.dirty();
      if (typeof value.value !== "undefined" || pair.alwaysSet) {
        finalObject[key.value] = value.value;
      }
    }
    return { status: status.value, value: finalObject };
  }
};
var INVALID = Object.freeze({
  status: "aborted"
});
var DIRTY = (value) => ({ status: "dirty", value });
var OK = (value) => ({ status: "valid", value });
var isAborted = (x4) => x4.status === "aborted";
var isDirty = (x4) => x4.status === "dirty";
var isValid = (x4) => x4.status === "valid";
var isAsync = (x4) => typeof Promise !== "undefined" && x4 instanceof Promise;
var errorUtil;
(function(errorUtil2) {
  errorUtil2.errToObj = (message) => typeof message === "string" ? { message } : message || {};
  errorUtil2.toString = (message) => typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
})(errorUtil || (errorUtil = {}));
var ParseInputLazyPath = class {
  constructor(parent, value, path2, key) {
    this._cachedPath = [];
    this.parent = parent;
    this.data = value;
    this._path = path2;
    this._key = key;
  }
  get path() {
    if (!this._cachedPath.length) {
      if (this._key instanceof Array) {
        this._cachedPath.push(...this._path, ...this._key);
      } else {
        this._cachedPath.push(...this._path, this._key);
      }
    }
    return this._cachedPath;
  }
};
var handleResult = (ctx, result) => {
  if (isValid(result)) {
    return { success: true, data: result.value };
  } else {
    if (!ctx.common.issues.length) {
      throw new Error("Validation failed but no issues detected.");
    }
    return {
      success: false,
      get error() {
        if (this._error)
          return this._error;
        const error = new ZodError(ctx.common.issues);
        this._error = error;
        return this._error;
      }
    };
  }
};
function processCreateParams(params) {
  if (!params)
    return {};
  const { errorMap: errorMap2, invalid_type_error, required_error, description } = params;
  if (errorMap2 && (invalid_type_error || required_error)) {
    throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
  }
  if (errorMap2)
    return { errorMap: errorMap2, description };
  const customMap = (iss, ctx) => {
    if (iss.code !== "invalid_type")
      return { message: ctx.defaultError };
    if (typeof ctx.data === "undefined") {
      return { message: required_error !== null && required_error !== void 0 ? required_error : ctx.defaultError };
    }
    return { message: invalid_type_error !== null && invalid_type_error !== void 0 ? invalid_type_error : ctx.defaultError };
  };
  return { errorMap: customMap, description };
}
var ZodType = class {
  constructor(def) {
    this.spa = this.safeParseAsync;
    this._def = def;
    this.parse = this.parse.bind(this);
    this.safeParse = this.safeParse.bind(this);
    this.parseAsync = this.parseAsync.bind(this);
    this.safeParseAsync = this.safeParseAsync.bind(this);
    this.spa = this.spa.bind(this);
    this.refine = this.refine.bind(this);
    this.refinement = this.refinement.bind(this);
    this.superRefine = this.superRefine.bind(this);
    this.optional = this.optional.bind(this);
    this.nullable = this.nullable.bind(this);
    this.nullish = this.nullish.bind(this);
    this.array = this.array.bind(this);
    this.promise = this.promise.bind(this);
    this.or = this.or.bind(this);
    this.and = this.and.bind(this);
    this.transform = this.transform.bind(this);
    this.brand = this.brand.bind(this);
    this.default = this.default.bind(this);
    this.catch = this.catch.bind(this);
    this.describe = this.describe.bind(this);
    this.pipe = this.pipe.bind(this);
    this.isNullable = this.isNullable.bind(this);
    this.isOptional = this.isOptional.bind(this);
  }
  get description() {
    return this._def.description;
  }
  _getType(input) {
    return getParsedType(input.data);
  }
  _getOrReturnCtx(input, ctx) {
    return ctx || {
      common: input.parent.common,
      data: input.data,
      parsedType: getParsedType(input.data),
      schemaErrorMap: this._def.errorMap,
      path: input.path,
      parent: input.parent
    };
  }
  _processInputParams(input) {
    return {
      status: new ParseStatus(),
      ctx: {
        common: input.parent.common,
        data: input.data,
        parsedType: getParsedType(input.data),
        schemaErrorMap: this._def.errorMap,
        path: input.path,
        parent: input.parent
      }
    };
  }
  _parseSync(input) {
    const result = this._parse(input);
    if (isAsync(result)) {
      throw new Error("Synchronous parse encountered promise.");
    }
    return result;
  }
  _parseAsync(input) {
    const result = this._parse(input);
    return Promise.resolve(result);
  }
  parse(data, params) {
    const result = this.safeParse(data, params);
    if (result.success)
      return result.data;
    throw result.error;
  }
  safeParse(data, params) {
    var _a2;
    const ctx = {
      common: {
        issues: [],
        async: (_a2 = params === null || params === void 0 ? void 0 : params.async) !== null && _a2 !== void 0 ? _a2 : false,
        contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap
      },
      path: (params === null || params === void 0 ? void 0 : params.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    const result = this._parseSync({ data, path: ctx.path, parent: ctx });
    return handleResult(ctx, result);
  }
  async parseAsync(data, params) {
    const result = await this.safeParseAsync(data, params);
    if (result.success)
      return result.data;
    throw result.error;
  }
  async safeParseAsync(data, params) {
    const ctx = {
      common: {
        issues: [],
        contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
        async: true
      },
      path: (params === null || params === void 0 ? void 0 : params.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
    const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
    return handleResult(ctx, result);
  }
  refine(check, message) {
    const getIssueProperties = (val) => {
      if (typeof message === "string" || typeof message === "undefined") {
        return { message };
      } else if (typeof message === "function") {
        return message(val);
      } else {
        return message;
      }
    };
    return this._refinement((val, ctx) => {
      const result = check(val);
      const setError = () => ctx.addIssue({
        code: ZodIssueCode.custom,
        ...getIssueProperties(val)
      });
      if (typeof Promise !== "undefined" && result instanceof Promise) {
        return result.then((data) => {
          if (!data) {
            setError();
            return false;
          } else {
            return true;
          }
        });
      }
      if (!result) {
        setError();
        return false;
      } else {
        return true;
      }
    });
  }
  refinement(check, refinementData) {
    return this._refinement((val, ctx) => {
      if (!check(val)) {
        ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
        return false;
      } else {
        return true;
      }
    });
  }
  _refinement(refinement) {
    return new ZodEffects({
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "refinement", refinement }
    });
  }
  superRefine(refinement) {
    return this._refinement(refinement);
  }
  optional() {
    return ZodOptional.create(this, this._def);
  }
  nullable() {
    return ZodNullable.create(this, this._def);
  }
  nullish() {
    return this.nullable().optional();
  }
  array() {
    return ZodArray.create(this, this._def);
  }
  promise() {
    return ZodPromise.create(this, this._def);
  }
  or(option) {
    return ZodUnion.create([this, option], this._def);
  }
  and(incoming) {
    return ZodIntersection.create(this, incoming, this._def);
  }
  transform(transform) {
    return new ZodEffects({
      ...processCreateParams(this._def),
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "transform", transform }
    });
  }
  default(def) {
    const defaultValueFunc = typeof def === "function" ? def : () => def;
    return new ZodDefault({
      ...processCreateParams(this._def),
      innerType: this,
      defaultValue: defaultValueFunc,
      typeName: ZodFirstPartyTypeKind.ZodDefault
    });
  }
  brand() {
    return new ZodBranded({
      typeName: ZodFirstPartyTypeKind.ZodBranded,
      type: this,
      ...processCreateParams(this._def)
    });
  }
  catch(def) {
    const catchValueFunc = typeof def === "function" ? def : () => def;
    return new ZodCatch({
      ...processCreateParams(this._def),
      innerType: this,
      catchValue: catchValueFunc,
      typeName: ZodFirstPartyTypeKind.ZodCatch
    });
  }
  describe(description) {
    const This = this.constructor;
    return new This({
      ...this._def,
      description
    });
  }
  pipe(target) {
    return ZodPipeline.create(this, target);
  }
  isOptional() {
    return this.safeParse(void 0).success;
  }
  isNullable() {
    return this.safeParse(null).success;
  }
};
var cuidRegex = /^c[^\s-]{8,}$/i;
var cuid2Regex = /^[a-z][a-z0-9]*$/;
var ulidRegex = /[0-9A-HJKMNP-TV-Z]{26}/;
var uuidRegex = /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;
var emailRegex = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\])|(\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\.[A-Za-z]{2,})+))$/;
var emojiRegex = /^(\p{Extended_Pictographic}|\p{Emoji_Component})+$/u;
var ipv4Regex = /^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/;
var ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;
var datetimeRegex = (args) => {
  if (args.precision) {
    if (args.offset) {
      return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
    } else {
      return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}Z$`);
    }
  } else if (args.precision === 0) {
    if (args.offset) {
      return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
    } else {
      return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$`);
    }
  } else {
    if (args.offset) {
      return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
    } else {
      return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$`);
    }
  }
};
function isValidIP(ip, version2) {
  if ((version2 === "v4" || !version2) && ipv4Regex.test(ip)) {
    return true;
  }
  if ((version2 === "v6" || !version2) && ipv6Regex.test(ip)) {
    return true;
  }
  return false;
}
var ZodString = class extends ZodType {
  constructor() {
    super(...arguments);
    this._regex = (regex, validation, message) => this.refinement((data) => regex.test(data), {
      validation,
      code: ZodIssueCode.invalid_string,
      ...errorUtil.errToObj(message)
    });
    this.nonempty = (message) => this.min(1, errorUtil.errToObj(message));
    this.trim = () => new ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "trim" }]
    });
    this.toLowerCase = () => new ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "toLowerCase" }]
    });
    this.toUpperCase = () => new ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "toUpperCase" }]
    });
  }
  _parse(input) {
    if (this._def.coerce) {
      input.data = String(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.string) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(
        ctx2,
        {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.string,
          received: ctx2.parsedType
        }
      );
      return INVALID;
    }
    const status = new ParseStatus();
    let ctx = void 0;
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        if (input.data.length < check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: check.value,
            type: "string",
            inclusive: true,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        if (input.data.length > check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: check.value,
            type: "string",
            inclusive: true,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "length") {
        const tooBig = input.data.length > check.value;
        const tooSmall = input.data.length < check.value;
        if (tooBig || tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          if (tooBig) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: check.value,
              type: "string",
              inclusive: true,
              exact: true,
              message: check.message
            });
          } else if (tooSmall) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: check.value,
              type: "string",
              inclusive: true,
              exact: true,
              message: check.message
            });
          }
          status.dirty();
        }
      } else if (check.kind === "email") {
        if (!emailRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "email",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "emoji") {
        if (!emojiRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "emoji",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "uuid") {
        if (!uuidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "uuid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cuid") {
        if (!cuidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cuid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cuid2") {
        if (!cuid2Regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cuid2",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "ulid") {
        if (!ulidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "ulid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "url") {
        try {
          new URL(input.data);
        } catch (_a2) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "url",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "regex") {
        check.regex.lastIndex = 0;
        const testResult = check.regex.test(input.data);
        if (!testResult) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "regex",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "trim") {
        input.data = input.data.trim();
      } else if (check.kind === "includes") {
        if (!input.data.includes(check.value, check.position)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { includes: check.value, position: check.position },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "toLowerCase") {
        input.data = input.data.toLowerCase();
      } else if (check.kind === "toUpperCase") {
        input.data = input.data.toUpperCase();
      } else if (check.kind === "startsWith") {
        if (!input.data.startsWith(check.value)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { startsWith: check.value },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "endsWith") {
        if (!input.data.endsWith(check.value)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { endsWith: check.value },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "datetime") {
        const regex = datetimeRegex(check);
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: "datetime",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "ip") {
        if (!isValidIP(input.data, check.version)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "ip",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  _addCheck(check) {
    return new ZodString({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  email(message) {
    return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
  }
  url(message) {
    return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
  }
  emoji(message) {
    return this._addCheck({ kind: "emoji", ...errorUtil.errToObj(message) });
  }
  uuid(message) {
    return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
  }
  cuid(message) {
    return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
  }
  cuid2(message) {
    return this._addCheck({ kind: "cuid2", ...errorUtil.errToObj(message) });
  }
  ulid(message) {
    return this._addCheck({ kind: "ulid", ...errorUtil.errToObj(message) });
  }
  ip(options) {
    return this._addCheck({ kind: "ip", ...errorUtil.errToObj(options) });
  }
  datetime(options) {
    var _a2;
    if (typeof options === "string") {
      return this._addCheck({
        kind: "datetime",
        precision: null,
        offset: false,
        message: options
      });
    }
    return this._addCheck({
      kind: "datetime",
      precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
      offset: (_a2 = options === null || options === void 0 ? void 0 : options.offset) !== null && _a2 !== void 0 ? _a2 : false,
      ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
    });
  }
  regex(regex, message) {
    return this._addCheck({
      kind: "regex",
      regex,
      ...errorUtil.errToObj(message)
    });
  }
  includes(value, options) {
    return this._addCheck({
      kind: "includes",
      value,
      position: options === null || options === void 0 ? void 0 : options.position,
      ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
    });
  }
  startsWith(value, message) {
    return this._addCheck({
      kind: "startsWith",
      value,
      ...errorUtil.errToObj(message)
    });
  }
  endsWith(value, message) {
    return this._addCheck({
      kind: "endsWith",
      value,
      ...errorUtil.errToObj(message)
    });
  }
  min(minLength, message) {
    return this._addCheck({
      kind: "min",
      value: minLength,
      ...errorUtil.errToObj(message)
    });
  }
  max(maxLength, message) {
    return this._addCheck({
      kind: "max",
      value: maxLength,
      ...errorUtil.errToObj(message)
    });
  }
  length(len, message) {
    return this._addCheck({
      kind: "length",
      value: len,
      ...errorUtil.errToObj(message)
    });
  }
  get isDatetime() {
    return !!this._def.checks.find((ch) => ch.kind === "datetime");
  }
  get isEmail() {
    return !!this._def.checks.find((ch) => ch.kind === "email");
  }
  get isURL() {
    return !!this._def.checks.find((ch) => ch.kind === "url");
  }
  get isEmoji() {
    return !!this._def.checks.find((ch) => ch.kind === "emoji");
  }
  get isUUID() {
    return !!this._def.checks.find((ch) => ch.kind === "uuid");
  }
  get isCUID() {
    return !!this._def.checks.find((ch) => ch.kind === "cuid");
  }
  get isCUID2() {
    return !!this._def.checks.find((ch) => ch.kind === "cuid2");
  }
  get isULID() {
    return !!this._def.checks.find((ch) => ch.kind === "ulid");
  }
  get isIP() {
    return !!this._def.checks.find((ch) => ch.kind === "ip");
  }
  get minLength() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxLength() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
};
ZodString.create = (params) => {
  var _a2;
  return new ZodString({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodString,
    coerce: (_a2 = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a2 !== void 0 ? _a2 : false,
    ...processCreateParams(params)
  });
};
function floatSafeRemainder(val, step) {
  const valDecCount = (val.toString().split(".")[1] || "").length;
  const stepDecCount = (step.toString().split(".")[1] || "").length;
  const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
  const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
  const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
  return valInt % stepInt / Math.pow(10, decCount);
}
var ZodNumber = class extends ZodType {
  constructor() {
    super(...arguments);
    this.min = this.gte;
    this.max = this.lte;
    this.step = this.multipleOf;
  }
  _parse(input) {
    if (this._def.coerce) {
      input.data = Number(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.number) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.number,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    let ctx = void 0;
    const status = new ParseStatus();
    for (const check of this._def.checks) {
      if (check.kind === "int") {
        if (!util.isInteger(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: "integer",
            received: "float",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "min") {
        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
        if (tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: check.value,
            type: "number",
            inclusive: check.inclusive,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
        if (tooBig) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: check.value,
            type: "number",
            inclusive: check.inclusive,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "multipleOf") {
        if (floatSafeRemainder(input.data, check.value) !== 0) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_multiple_of,
            multipleOf: check.value,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "finite") {
        if (!Number.isFinite(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_finite,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  gte(value, message) {
    return this.setLimit("min", value, true, errorUtil.toString(message));
  }
  gt(value, message) {
    return this.setLimit("min", value, false, errorUtil.toString(message));
  }
  lte(value, message) {
    return this.setLimit("max", value, true, errorUtil.toString(message));
  }
  lt(value, message) {
    return this.setLimit("max", value, false, errorUtil.toString(message));
  }
  setLimit(kind, value, inclusive, message) {
    return new ZodNumber({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind,
          value,
          inclusive,
          message: errorUtil.toString(message)
        }
      ]
    });
  }
  _addCheck(check) {
    return new ZodNumber({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  int(message) {
    return this._addCheck({
      kind: "int",
      message: errorUtil.toString(message)
    });
  }
  positive(message) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  negative(message) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  nonpositive(message) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  nonnegative(message) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  multipleOf(value, message) {
    return this._addCheck({
      kind: "multipleOf",
      value,
      message: errorUtil.toString(message)
    });
  }
  finite(message) {
    return this._addCheck({
      kind: "finite",
      message: errorUtil.toString(message)
    });
  }
  safe(message) {
    return this._addCheck({
      kind: "min",
      inclusive: true,
      value: Number.MIN_SAFE_INTEGER,
      message: errorUtil.toString(message)
    })._addCheck({
      kind: "max",
      inclusive: true,
      value: Number.MAX_SAFE_INTEGER,
      message: errorUtil.toString(message)
    });
  }
  get minValue() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxValue() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
  get isInt() {
    return !!this._def.checks.find((ch) => ch.kind === "int" || ch.kind === "multipleOf" && util.isInteger(ch.value));
  }
  get isFinite() {
    let max = null, min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
        return true;
      } else if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      } else if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return Number.isFinite(min) && Number.isFinite(max);
  }
};
ZodNumber.create = (params) => {
  return new ZodNumber({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodNumber,
    coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
    ...processCreateParams(params)
  });
};
var ZodBigInt = class extends ZodType {
  constructor() {
    super(...arguments);
    this.min = this.gte;
    this.max = this.lte;
  }
  _parse(input) {
    if (this._def.coerce) {
      input.data = BigInt(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.bigint) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.bigint,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    let ctx = void 0;
    const status = new ParseStatus();
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
        if (tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            type: "bigint",
            minimum: check.value,
            inclusive: check.inclusive,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
        if (tooBig) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            type: "bigint",
            maximum: check.value,
            inclusive: check.inclusive,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "multipleOf") {
        if (input.data % check.value !== BigInt(0)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_multiple_of,
            multipleOf: check.value,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  gte(value, message) {
    return this.setLimit("min", value, true, errorUtil.toString(message));
  }
  gt(value, message) {
    return this.setLimit("min", value, false, errorUtil.toString(message));
  }
  lte(value, message) {
    return this.setLimit("max", value, true, errorUtil.toString(message));
  }
  lt(value, message) {
    return this.setLimit("max", value, false, errorUtil.toString(message));
  }
  setLimit(kind, value, inclusive, message) {
    return new ZodBigInt({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind,
          value,
          inclusive,
          message: errorUtil.toString(message)
        }
      ]
    });
  }
  _addCheck(check) {
    return new ZodBigInt({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  positive(message) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  negative(message) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  nonpositive(message) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  nonnegative(message) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  multipleOf(value, message) {
    return this._addCheck({
      kind: "multipleOf",
      value,
      message: errorUtil.toString(message)
    });
  }
  get minValue() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxValue() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
};
ZodBigInt.create = (params) => {
  var _a2;
  return new ZodBigInt({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodBigInt,
    coerce: (_a2 = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a2 !== void 0 ? _a2 : false,
    ...processCreateParams(params)
  });
};
var ZodBoolean = class extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = Boolean(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.boolean) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.boolean,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodBoolean.create = (params) => {
  return new ZodBoolean({
    typeName: ZodFirstPartyTypeKind.ZodBoolean,
    coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
    ...processCreateParams(params)
  });
};
var ZodDate = class extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = new Date(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.date) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.date,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    if (isNaN(input.data.getTime())) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_date
      });
      return INVALID;
    }
    const status = new ParseStatus();
    let ctx = void 0;
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        if (input.data.getTime() < check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            message: check.message,
            inclusive: true,
            exact: false,
            minimum: check.value,
            type: "date"
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        if (input.data.getTime() > check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            message: check.message,
            inclusive: true,
            exact: false,
            maximum: check.value,
            type: "date"
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return {
      status: status.value,
      value: new Date(input.data.getTime())
    };
  }
  _addCheck(check) {
    return new ZodDate({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  min(minDate, message) {
    return this._addCheck({
      kind: "min",
      value: minDate.getTime(),
      message: errorUtil.toString(message)
    });
  }
  max(maxDate, message) {
    return this._addCheck({
      kind: "max",
      value: maxDate.getTime(),
      message: errorUtil.toString(message)
    });
  }
  get minDate() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min != null ? new Date(min) : null;
  }
  get maxDate() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max != null ? new Date(max) : null;
  }
};
ZodDate.create = (params) => {
  return new ZodDate({
    checks: [],
    coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
    typeName: ZodFirstPartyTypeKind.ZodDate,
    ...processCreateParams(params)
  });
};
var ZodSymbol = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.symbol) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.symbol,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodSymbol.create = (params) => {
  return new ZodSymbol({
    typeName: ZodFirstPartyTypeKind.ZodSymbol,
    ...processCreateParams(params)
  });
};
var ZodUndefined = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.undefined,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodUndefined.create = (params) => {
  return new ZodUndefined({
    typeName: ZodFirstPartyTypeKind.ZodUndefined,
    ...processCreateParams(params)
  });
};
var ZodNull = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.null) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.null,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodNull.create = (params) => {
  return new ZodNull({
    typeName: ZodFirstPartyTypeKind.ZodNull,
    ...processCreateParams(params)
  });
};
var ZodAny = class extends ZodType {
  constructor() {
    super(...arguments);
    this._any = true;
  }
  _parse(input) {
    return OK(input.data);
  }
};
ZodAny.create = (params) => {
  return new ZodAny({
    typeName: ZodFirstPartyTypeKind.ZodAny,
    ...processCreateParams(params)
  });
};
var ZodUnknown = class extends ZodType {
  constructor() {
    super(...arguments);
    this._unknown = true;
  }
  _parse(input) {
    return OK(input.data);
  }
};
ZodUnknown.create = (params) => {
  return new ZodUnknown({
    typeName: ZodFirstPartyTypeKind.ZodUnknown,
    ...processCreateParams(params)
  });
};
var ZodNever = class extends ZodType {
  _parse(input) {
    const ctx = this._getOrReturnCtx(input);
    addIssueToContext(ctx, {
      code: ZodIssueCode.invalid_type,
      expected: ZodParsedType.never,
      received: ctx.parsedType
    });
    return INVALID;
  }
};
ZodNever.create = (params) => {
  return new ZodNever({
    typeName: ZodFirstPartyTypeKind.ZodNever,
    ...processCreateParams(params)
  });
};
var ZodVoid = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.void,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodVoid.create = (params) => {
  return new ZodVoid({
    typeName: ZodFirstPartyTypeKind.ZodVoid,
    ...processCreateParams(params)
  });
};
var ZodArray = class extends ZodType {
  _parse(input) {
    const { ctx, status } = this._processInputParams(input);
    const def = this._def;
    if (ctx.parsedType !== ZodParsedType.array) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (def.exactLength !== null) {
      const tooBig = ctx.data.length > def.exactLength.value;
      const tooSmall = ctx.data.length < def.exactLength.value;
      if (tooBig || tooSmall) {
        addIssueToContext(ctx, {
          code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
          minimum: tooSmall ? def.exactLength.value : void 0,
          maximum: tooBig ? def.exactLength.value : void 0,
          type: "array",
          inclusive: true,
          exact: true,
          message: def.exactLength.message
        });
        status.dirty();
      }
    }
    if (def.minLength !== null) {
      if (ctx.data.length < def.minLength.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: def.minLength.value,
          type: "array",
          inclusive: true,
          exact: false,
          message: def.minLength.message
        });
        status.dirty();
      }
    }
    if (def.maxLength !== null) {
      if (ctx.data.length > def.maxLength.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: def.maxLength.value,
          type: "array",
          inclusive: true,
          exact: false,
          message: def.maxLength.message
        });
        status.dirty();
      }
    }
    if (ctx.common.async) {
      return Promise.all([...ctx.data].map((item, i8) => {
        return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i8));
      })).then((result2) => {
        return ParseStatus.mergeArray(status, result2);
      });
    }
    const result = [...ctx.data].map((item, i8) => {
      return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i8));
    });
    return ParseStatus.mergeArray(status, result);
  }
  get element() {
    return this._def.type;
  }
  min(minLength, message) {
    return new ZodArray({
      ...this._def,
      minLength: { value: minLength, message: errorUtil.toString(message) }
    });
  }
  max(maxLength, message) {
    return new ZodArray({
      ...this._def,
      maxLength: { value: maxLength, message: errorUtil.toString(message) }
    });
  }
  length(len, message) {
    return new ZodArray({
      ...this._def,
      exactLength: { value: len, message: errorUtil.toString(message) }
    });
  }
  nonempty(message) {
    return this.min(1, message);
  }
};
ZodArray.create = (schema, params) => {
  return new ZodArray({
    type: schema,
    minLength: null,
    maxLength: null,
    exactLength: null,
    typeName: ZodFirstPartyTypeKind.ZodArray,
    ...processCreateParams(params)
  });
};
function deepPartialify(schema) {
  if (schema instanceof ZodObject) {
    const newShape = {};
    for (const key in schema.shape) {
      const fieldSchema = schema.shape[key];
      newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
    }
    return new ZodObject({
      ...schema._def,
      shape: () => newShape
    });
  } else if (schema instanceof ZodArray) {
    return new ZodArray({
      ...schema._def,
      type: deepPartialify(schema.element)
    });
  } else if (schema instanceof ZodOptional) {
    return ZodOptional.create(deepPartialify(schema.unwrap()));
  } else if (schema instanceof ZodNullable) {
    return ZodNullable.create(deepPartialify(schema.unwrap()));
  } else if (schema instanceof ZodTuple) {
    return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
  } else {
    return schema;
  }
}
var ZodObject = class extends ZodType {
  constructor() {
    super(...arguments);
    this._cached = null;
    this.nonstrict = this.passthrough;
    this.augment = this.extend;
  }
  _getCached() {
    if (this._cached !== null)
      return this._cached;
    const shape = this._def.shape();
    const keys = util.objectKeys(shape);
    return this._cached = { shape, keys };
  }
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.object) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    const { status, ctx } = this._processInputParams(input);
    const { shape, keys: shapeKeys } = this._getCached();
    const extraKeys = [];
    if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
      for (const key in ctx.data) {
        if (!shapeKeys.includes(key)) {
          extraKeys.push(key);
        }
      }
    }
    const pairs = [];
    for (const key of shapeKeys) {
      const keyValidator = shape[key];
      const value = ctx.data[key];
      pairs.push({
        key: { status: "valid", value: key },
        value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
        alwaysSet: key in ctx.data
      });
    }
    if (this._def.catchall instanceof ZodNever) {
      const unknownKeys = this._def.unknownKeys;
      if (unknownKeys === "passthrough") {
        for (const key of extraKeys) {
          pairs.push({
            key: { status: "valid", value: key },
            value: { status: "valid", value: ctx.data[key] }
          });
        }
      } else if (unknownKeys === "strict") {
        if (extraKeys.length > 0) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.unrecognized_keys,
            keys: extraKeys
          });
          status.dirty();
        }
      } else if (unknownKeys === "strip")
        ;
      else {
        throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
      }
    } else {
      const catchall = this._def.catchall;
      for (const key of extraKeys) {
        const value = ctx.data[key];
        pairs.push({
          key: { status: "valid", value: key },
          value: catchall._parse(
            new ParseInputLazyPath(ctx, value, ctx.path, key)
          ),
          alwaysSet: key in ctx.data
        });
      }
    }
    if (ctx.common.async) {
      return Promise.resolve().then(async () => {
        const syncPairs = [];
        for (const pair of pairs) {
          const key = await pair.key;
          syncPairs.push({
            key,
            value: await pair.value,
            alwaysSet: pair.alwaysSet
          });
        }
        return syncPairs;
      }).then((syncPairs) => {
        return ParseStatus.mergeObjectSync(status, syncPairs);
      });
    } else {
      return ParseStatus.mergeObjectSync(status, pairs);
    }
  }
  get shape() {
    return this._def.shape();
  }
  strict(message) {
    errorUtil.errToObj;
    return new ZodObject({
      ...this._def,
      unknownKeys: "strict",
      ...message !== void 0 ? {
        errorMap: (issue, ctx) => {
          var _a2, _b, _c, _d;
          const defaultError = (_c = (_b = (_a2 = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a2, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
          if (issue.code === "unrecognized_keys")
            return {
              message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError
            };
          return {
            message: defaultError
          };
        }
      } : {}
    });
  }
  strip() {
    return new ZodObject({
      ...this._def,
      unknownKeys: "strip"
    });
  }
  passthrough() {
    return new ZodObject({
      ...this._def,
      unknownKeys: "passthrough"
    });
  }
  extend(augmentation) {
    return new ZodObject({
      ...this._def,
      shape: () => ({
        ...this._def.shape(),
        ...augmentation
      })
    });
  }
  merge(merging) {
    const merged = new ZodObject({
      unknownKeys: merging._def.unknownKeys,
      catchall: merging._def.catchall,
      shape: () => ({
        ...this._def.shape(),
        ...merging._def.shape()
      }),
      typeName: ZodFirstPartyTypeKind.ZodObject
    });
    return merged;
  }
  setKey(key, schema) {
    return this.augment({ [key]: schema });
  }
  catchall(index) {
    return new ZodObject({
      ...this._def,
      catchall: index
    });
  }
  pick(mask) {
    const shape = {};
    util.objectKeys(mask).forEach((key) => {
      if (mask[key] && this.shape[key]) {
        shape[key] = this.shape[key];
      }
    });
    return new ZodObject({
      ...this._def,
      shape: () => shape
    });
  }
  omit(mask) {
    const shape = {};
    util.objectKeys(this.shape).forEach((key) => {
      if (!mask[key]) {
        shape[key] = this.shape[key];
      }
    });
    return new ZodObject({
      ...this._def,
      shape: () => shape
    });
  }
  deepPartial() {
    return deepPartialify(this);
  }
  partial(mask) {
    const newShape = {};
    util.objectKeys(this.shape).forEach((key) => {
      const fieldSchema = this.shape[key];
      if (mask && !mask[key]) {
        newShape[key] = fieldSchema;
      } else {
        newShape[key] = fieldSchema.optional();
      }
    });
    return new ZodObject({
      ...this._def,
      shape: () => newShape
    });
  }
  required(mask) {
    const newShape = {};
    util.objectKeys(this.shape).forEach((key) => {
      if (mask && !mask[key]) {
        newShape[key] = this.shape[key];
      } else {
        const fieldSchema = this.shape[key];
        let newField = fieldSchema;
        while (newField instanceof ZodOptional) {
          newField = newField._def.innerType;
        }
        newShape[key] = newField;
      }
    });
    return new ZodObject({
      ...this._def,
      shape: () => newShape
    });
  }
  keyof() {
    return createZodEnum(util.objectKeys(this.shape));
  }
};
ZodObject.create = (shape, params) => {
  return new ZodObject({
    shape: () => shape,
    unknownKeys: "strip",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
ZodObject.strictCreate = (shape, params) => {
  return new ZodObject({
    shape: () => shape,
    unknownKeys: "strict",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
ZodObject.lazycreate = (shape, params) => {
  return new ZodObject({
    shape,
    unknownKeys: "strip",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
var ZodUnion = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const options = this._def.options;
    function handleResults(results) {
      for (const result of results) {
        if (result.result.status === "valid") {
          return result.result;
        }
      }
      for (const result of results) {
        if (result.result.status === "dirty") {
          ctx.common.issues.push(...result.ctx.common.issues);
          return result.result;
        }
      }
      const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union,
        unionErrors
      });
      return INVALID;
    }
    if (ctx.common.async) {
      return Promise.all(options.map(async (option) => {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        return {
          result: await option._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: childCtx
          }),
          ctx: childCtx
        };
      })).then(handleResults);
    } else {
      let dirty = void 0;
      const issues = [];
      for (const option of options) {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        const result = option._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: childCtx
        });
        if (result.status === "valid") {
          return result;
        } else if (result.status === "dirty" && !dirty) {
          dirty = { result, ctx: childCtx };
        }
        if (childCtx.common.issues.length) {
          issues.push(childCtx.common.issues);
        }
      }
      if (dirty) {
        ctx.common.issues.push(...dirty.ctx.common.issues);
        return dirty.result;
      }
      const unionErrors = issues.map((issues2) => new ZodError(issues2));
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union,
        unionErrors
      });
      return INVALID;
    }
  }
  get options() {
    return this._def.options;
  }
};
ZodUnion.create = (types3, params) => {
  return new ZodUnion({
    options: types3,
    typeName: ZodFirstPartyTypeKind.ZodUnion,
    ...processCreateParams(params)
  });
};
var getDiscriminator = (type) => {
  if (type instanceof ZodLazy) {
    return getDiscriminator(type.schema);
  } else if (type instanceof ZodEffects) {
    return getDiscriminator(type.innerType());
  } else if (type instanceof ZodLiteral) {
    return [type.value];
  } else if (type instanceof ZodEnum) {
    return type.options;
  } else if (type instanceof ZodNativeEnum) {
    return Object.keys(type.enum);
  } else if (type instanceof ZodDefault) {
    return getDiscriminator(type._def.innerType);
  } else if (type instanceof ZodUndefined) {
    return [void 0];
  } else if (type instanceof ZodNull) {
    return [null];
  } else {
    return null;
  }
};
var ZodDiscriminatedUnion = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.object) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const discriminator = this.discriminator;
    const discriminatorValue = ctx.data[discriminator];
    const option = this.optionsMap.get(discriminatorValue);
    if (!option) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union_discriminator,
        options: Array.from(this.optionsMap.keys()),
        path: [discriminator]
      });
      return INVALID;
    }
    if (ctx.common.async) {
      return option._parseAsync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
    } else {
      return option._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
    }
  }
  get discriminator() {
    return this._def.discriminator;
  }
  get options() {
    return this._def.options;
  }
  get optionsMap() {
    return this._def.optionsMap;
  }
  static create(discriminator, options, params) {
    const optionsMap = /* @__PURE__ */ new Map();
    for (const type of options) {
      const discriminatorValues = getDiscriminator(type.shape[discriminator]);
      if (!discriminatorValues) {
        throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
      }
      for (const value of discriminatorValues) {
        if (optionsMap.has(value)) {
          throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
        }
        optionsMap.set(value, type);
      }
    }
    return new ZodDiscriminatedUnion({
      typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
      discriminator,
      options,
      optionsMap,
      ...processCreateParams(params)
    });
  }
};
function mergeValues(a8, b5) {
  const aType = getParsedType(a8);
  const bType = getParsedType(b5);
  if (a8 === b5) {
    return { valid: true, data: a8 };
  } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
    const bKeys = util.objectKeys(b5);
    const sharedKeys = util.objectKeys(a8).filter((key) => bKeys.indexOf(key) !== -1);
    const newObj = { ...a8, ...b5 };
    for (const key of sharedKeys) {
      const sharedValue = mergeValues(a8[key], b5[key]);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newObj[key] = sharedValue.data;
    }
    return { valid: true, data: newObj };
  } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
    if (a8.length !== b5.length) {
      return { valid: false };
    }
    const newArray = [];
    for (let index = 0; index < a8.length; index++) {
      const itemA = a8[index];
      const itemB = b5[index];
      const sharedValue = mergeValues(itemA, itemB);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newArray.push(sharedValue.data);
    }
    return { valid: true, data: newArray };
  } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a8 === +b5) {
    return { valid: true, data: a8 };
  } else {
    return { valid: false };
  }
}
var ZodIntersection = class extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const handleParsed = (parsedLeft, parsedRight) => {
      if (isAborted(parsedLeft) || isAborted(parsedRight)) {
        return INVALID;
      }
      const merged = mergeValues(parsedLeft.value, parsedRight.value);
      if (!merged.valid) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_intersection_types
        });
        return INVALID;
      }
      if (isDirty(parsedLeft) || isDirty(parsedRight)) {
        status.dirty();
      }
      return { status: status.value, value: merged.data };
    };
    if (ctx.common.async) {
      return Promise.all([
        this._def.left._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }),
        this._def.right._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        })
      ]).then(([left, right]) => handleParsed(left, right));
    } else {
      return handleParsed(this._def.left._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }), this._def.right._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }));
    }
  }
};
ZodIntersection.create = (left, right, params) => {
  return new ZodIntersection({
    left,
    right,
    typeName: ZodFirstPartyTypeKind.ZodIntersection,
    ...processCreateParams(params)
  });
};
var ZodTuple = class extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.array) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (ctx.data.length < this._def.items.length) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.too_small,
        minimum: this._def.items.length,
        inclusive: true,
        exact: false,
        type: "array"
      });
      return INVALID;
    }
    const rest = this._def.rest;
    if (!rest && ctx.data.length > this._def.items.length) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.too_big,
        maximum: this._def.items.length,
        inclusive: true,
        exact: false,
        type: "array"
      });
      status.dirty();
    }
    const items = [...ctx.data].map((item, itemIndex) => {
      const schema = this._def.items[itemIndex] || this._def.rest;
      if (!schema)
        return null;
      return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
    }).filter((x4) => !!x4);
    if (ctx.common.async) {
      return Promise.all(items).then((results) => {
        return ParseStatus.mergeArray(status, results);
      });
    } else {
      return ParseStatus.mergeArray(status, items);
    }
  }
  get items() {
    return this._def.items;
  }
  rest(rest) {
    return new ZodTuple({
      ...this._def,
      rest
    });
  }
};
ZodTuple.create = (schemas, params) => {
  if (!Array.isArray(schemas)) {
    throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
  }
  return new ZodTuple({
    items: schemas,
    typeName: ZodFirstPartyTypeKind.ZodTuple,
    rest: null,
    ...processCreateParams(params)
  });
};
var ZodRecord = class extends ZodType {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.object) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const pairs = [];
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    for (const key in ctx.data) {
      pairs.push({
        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
        value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key))
      });
    }
    if (ctx.common.async) {
      return ParseStatus.mergeObjectAsync(status, pairs);
    } else {
      return ParseStatus.mergeObjectSync(status, pairs);
    }
  }
  get element() {
    return this._def.valueType;
  }
  static create(first, second, third) {
    if (second instanceof ZodType) {
      return new ZodRecord({
        keyType: first,
        valueType: second,
        typeName: ZodFirstPartyTypeKind.ZodRecord,
        ...processCreateParams(third)
      });
    }
    return new ZodRecord({
      keyType: ZodString.create(),
      valueType: first,
      typeName: ZodFirstPartyTypeKind.ZodRecord,
      ...processCreateParams(second)
    });
  }
};
var ZodMap = class extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.map) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.map,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    const pairs = [...ctx.data.entries()].map(([key, value], index) => {
      return {
        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
        value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"]))
      };
    });
    if (ctx.common.async) {
      const finalMap = /* @__PURE__ */ new Map();
      return Promise.resolve().then(async () => {
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          if (key.status === "aborted" || value.status === "aborted") {
            return INVALID;
          }
          if (key.status === "dirty" || value.status === "dirty") {
            status.dirty();
          }
          finalMap.set(key.value, value.value);
        }
        return { status: status.value, value: finalMap };
      });
    } else {
      const finalMap = /* @__PURE__ */ new Map();
      for (const pair of pairs) {
        const key = pair.key;
        const value = pair.value;
        if (key.status === "aborted" || value.status === "aborted") {
          return INVALID;
        }
        if (key.status === "dirty" || value.status === "dirty") {
          status.dirty();
        }
        finalMap.set(key.value, value.value);
      }
      return { status: status.value, value: finalMap };
    }
  }
};
ZodMap.create = (keyType, valueType, params) => {
  return new ZodMap({
    valueType,
    keyType,
    typeName: ZodFirstPartyTypeKind.ZodMap,
    ...processCreateParams(params)
  });
};
var ZodSet = class extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.set) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.set,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const def = this._def;
    if (def.minSize !== null) {
      if (ctx.data.size < def.minSize.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: def.minSize.value,
          type: "set",
          inclusive: true,
          exact: false,
          message: def.minSize.message
        });
        status.dirty();
      }
    }
    if (def.maxSize !== null) {
      if (ctx.data.size > def.maxSize.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: def.maxSize.value,
          type: "set",
          inclusive: true,
          exact: false,
          message: def.maxSize.message
        });
        status.dirty();
      }
    }
    const valueType = this._def.valueType;
    function finalizeSet(elements2) {
      const parsedSet = /* @__PURE__ */ new Set();
      for (const element of elements2) {
        if (element.status === "aborted")
          return INVALID;
        if (element.status === "dirty")
          status.dirty();
        parsedSet.add(element.value);
      }
      return { status: status.value, value: parsedSet };
    }
    const elements = [...ctx.data.values()].map((item, i8) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i8)));
    if (ctx.common.async) {
      return Promise.all(elements).then((elements2) => finalizeSet(elements2));
    } else {
      return finalizeSet(elements);
    }
  }
  min(minSize, message) {
    return new ZodSet({
      ...this._def,
      minSize: { value: minSize, message: errorUtil.toString(message) }
    });
  }
  max(maxSize, message) {
    return new ZodSet({
      ...this._def,
      maxSize: { value: maxSize, message: errorUtil.toString(message) }
    });
  }
  size(size, message) {
    return this.min(size, message).max(size, message);
  }
  nonempty(message) {
    return this.min(1, message);
  }
};
ZodSet.create = (valueType, params) => {
  return new ZodSet({
    valueType,
    minSize: null,
    maxSize: null,
    typeName: ZodFirstPartyTypeKind.ZodSet,
    ...processCreateParams(params)
  });
};
var ZodFunction = class extends ZodType {
  constructor() {
    super(...arguments);
    this.validate = this.implement;
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.function) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.function,
        received: ctx.parsedType
      });
      return INVALID;
    }
    function makeArgsIssue(args, error) {
      return makeIssue({
        data: args,
        path: ctx.path,
        errorMaps: [
          ctx.common.contextualErrorMap,
          ctx.schemaErrorMap,
          getErrorMap(),
          errorMap
        ].filter((x4) => !!x4),
        issueData: {
          code: ZodIssueCode.invalid_arguments,
          argumentsError: error
        }
      });
    }
    function makeReturnsIssue(returns, error) {
      return makeIssue({
        data: returns,
        path: ctx.path,
        errorMaps: [
          ctx.common.contextualErrorMap,
          ctx.schemaErrorMap,
          getErrorMap(),
          errorMap
        ].filter((x4) => !!x4),
        issueData: {
          code: ZodIssueCode.invalid_return_type,
          returnTypeError: error
        }
      });
    }
    const params = { errorMap: ctx.common.contextualErrorMap };
    const fn = ctx.data;
    if (this._def.returns instanceof ZodPromise) {
      return OK(async (...args) => {
        const error = new ZodError([]);
        const parsedArgs = await this._def.args.parseAsync(args, params).catch((e11) => {
          error.addIssue(makeArgsIssue(args, e11));
          throw error;
        });
        const result = await fn(...parsedArgs);
        const parsedReturns = await this._def.returns._def.type.parseAsync(result, params).catch((e11) => {
          error.addIssue(makeReturnsIssue(result, e11));
          throw error;
        });
        return parsedReturns;
      });
    } else {
      return OK((...args) => {
        const parsedArgs = this._def.args.safeParse(args, params);
        if (!parsedArgs.success) {
          throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
        }
        const result = fn(...parsedArgs.data);
        const parsedReturns = this._def.returns.safeParse(result, params);
        if (!parsedReturns.success) {
          throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
        }
        return parsedReturns.data;
      });
    }
  }
  parameters() {
    return this._def.args;
  }
  returnType() {
    return this._def.returns;
  }
  args(...items) {
    return new ZodFunction({
      ...this._def,
      args: ZodTuple.create(items).rest(ZodUnknown.create())
    });
  }
  returns(returnType) {
    return new ZodFunction({
      ...this._def,
      returns: returnType
    });
  }
  implement(func) {
    const validatedFunc = this.parse(func);
    return validatedFunc;
  }
  strictImplement(func) {
    const validatedFunc = this.parse(func);
    return validatedFunc;
  }
  static create(args, returns, params) {
    return new ZodFunction({
      args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
      returns: returns || ZodUnknown.create(),
      typeName: ZodFirstPartyTypeKind.ZodFunction,
      ...processCreateParams(params)
    });
  }
};
var ZodLazy = class extends ZodType {
  get schema() {
    return this._def.getter();
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const lazySchema = this._def.getter();
    return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
  }
};
ZodLazy.create = (getter, params) => {
  return new ZodLazy({
    getter,
    typeName: ZodFirstPartyTypeKind.ZodLazy,
    ...processCreateParams(params)
  });
};
var ZodLiteral = class extends ZodType {
  _parse(input) {
    if (input.data !== this._def.value) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_literal,
        expected: this._def.value
      });
      return INVALID;
    }
    return { status: "valid", value: input.data };
  }
  get value() {
    return this._def.value;
  }
};
ZodLiteral.create = (value, params) => {
  return new ZodLiteral({
    value,
    typeName: ZodFirstPartyTypeKind.ZodLiteral,
    ...processCreateParams(params)
  });
};
function createZodEnum(values, params) {
  return new ZodEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodEnum,
    ...processCreateParams(params)
  });
}
var ZodEnum = class extends ZodType {
  _parse(input) {
    if (typeof input.data !== "string") {
      const ctx = this._getOrReturnCtx(input);
      const expectedValues = this._def.values;
      addIssueToContext(ctx, {
        expected: util.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode.invalid_type
      });
      return INVALID;
    }
    if (this._def.values.indexOf(input.data) === -1) {
      const ctx = this._getOrReturnCtx(input);
      const expectedValues = this._def.values;
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_enum_value,
        options: expectedValues
      });
      return INVALID;
    }
    return OK(input.data);
  }
  get options() {
    return this._def.values;
  }
  get enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Values() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  extract(values) {
    return ZodEnum.create(values);
  }
  exclude(values) {
    return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)));
  }
};
ZodEnum.create = createZodEnum;
var ZodNativeEnum = class extends ZodType {
  _parse(input) {
    const nativeEnumValues = util.getValidEnumValues(this._def.values);
    const ctx = this._getOrReturnCtx(input);
    if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {
      const expectedValues = util.objectValues(nativeEnumValues);
      addIssueToContext(ctx, {
        expected: util.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode.invalid_type
      });
      return INVALID;
    }
    if (nativeEnumValues.indexOf(input.data) === -1) {
      const expectedValues = util.objectValues(nativeEnumValues);
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_enum_value,
        options: expectedValues
      });
      return INVALID;
    }
    return OK(input.data);
  }
  get enum() {
    return this._def.values;
  }
};
ZodNativeEnum.create = (values, params) => {
  return new ZodNativeEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
    ...processCreateParams(params)
  });
};
var ZodPromise = class extends ZodType {
  unwrap() {
    return this._def.type;
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.promise,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
    return OK(promisified.then((data) => {
      return this._def.type.parseAsync(data, {
        path: ctx.path,
        errorMap: ctx.common.contextualErrorMap
      });
    }));
  }
};
ZodPromise.create = (schema, params) => {
  return new ZodPromise({
    type: schema,
    typeName: ZodFirstPartyTypeKind.ZodPromise,
    ...processCreateParams(params)
  });
};
var ZodEffects = class extends ZodType {
  innerType() {
    return this._def.schema;
  }
  sourceType() {
    return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const effect = this._def.effect || null;
    if (effect.type === "preprocess") {
      const processed = effect.transform(ctx.data);
      if (ctx.common.async) {
        return Promise.resolve(processed).then((processed2) => {
          return this._def.schema._parseAsync({
            data: processed2,
            path: ctx.path,
            parent: ctx
          });
        });
      } else {
        return this._def.schema._parseSync({
          data: processed,
          path: ctx.path,
          parent: ctx
        });
      }
    }
    const checkCtx = {
      addIssue: (arg) => {
        addIssueToContext(ctx, arg);
        if (arg.fatal) {
          status.abort();
        } else {
          status.dirty();
        }
      },
      get path() {
        return ctx.path;
      }
    };
    checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
    if (effect.type === "refinement") {
      const executeRefinement = (acc) => {
        const result = effect.refinement(acc, checkCtx);
        if (ctx.common.async) {
          return Promise.resolve(result);
        }
        if (result instanceof Promise) {
          throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
        }
        return acc;
      };
      if (ctx.common.async === false) {
        const inner = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inner.status === "aborted")
          return INVALID;
        if (inner.status === "dirty")
          status.dirty();
        executeRefinement(inner.value);
        return { status: status.value, value: inner.value };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
          if (inner.status === "aborted")
            return INVALID;
          if (inner.status === "dirty")
            status.dirty();
          return executeRefinement(inner.value).then(() => {
            return { status: status.value, value: inner.value };
          });
        });
      }
    }
    if (effect.type === "transform") {
      if (ctx.common.async === false) {
        const base = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (!isValid(base))
          return base;
        const result = effect.transform(base.value, checkCtx);
        if (result instanceof Promise) {
          throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
        }
        return { status: status.value, value: result };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {
          if (!isValid(base))
            return base;
          return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));
        });
      }
    }
    util.assertNever(effect);
  }
};
ZodEffects.create = (schema, effect, params) => {
  return new ZodEffects({
    schema,
    typeName: ZodFirstPartyTypeKind.ZodEffects,
    effect,
    ...processCreateParams(params)
  });
};
ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
  return new ZodEffects({
    schema,
    effect: { type: "preprocess", transform: preprocess },
    typeName: ZodFirstPartyTypeKind.ZodEffects,
    ...processCreateParams(params)
  });
};
var ZodOptional = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType === ZodParsedType.undefined) {
      return OK(void 0);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodOptional.create = (type, params) => {
  return new ZodOptional({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodOptional,
    ...processCreateParams(params)
  });
};
var ZodNullable = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType === ZodParsedType.null) {
      return OK(null);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodNullable.create = (type, params) => {
  return new ZodNullable({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodNullable,
    ...processCreateParams(params)
  });
};
var ZodDefault = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    let data = ctx.data;
    if (ctx.parsedType === ZodParsedType.undefined) {
      data = this._def.defaultValue();
    }
    return this._def.innerType._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  removeDefault() {
    return this._def.innerType;
  }
};
ZodDefault.create = (type, params) => {
  return new ZodDefault({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodDefault,
    defaultValue: typeof params.default === "function" ? params.default : () => params.default,
    ...processCreateParams(params)
  });
};
var ZodCatch = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const newCtx = {
      ...ctx,
      common: {
        ...ctx.common,
        issues: []
      }
    };
    const result = this._def.innerType._parse({
      data: newCtx.data,
      path: newCtx.path,
      parent: {
        ...newCtx
      }
    });
    if (isAsync(result)) {
      return result.then((result2) => {
        return {
          status: "valid",
          value: result2.status === "valid" ? result2.value : this._def.catchValue({
            get error() {
              return new ZodError(newCtx.common.issues);
            },
            input: newCtx.data
          })
        };
      });
    } else {
      return {
        status: "valid",
        value: result.status === "valid" ? result.value : this._def.catchValue({
          get error() {
            return new ZodError(newCtx.common.issues);
          },
          input: newCtx.data
        })
      };
    }
  }
  removeCatch() {
    return this._def.innerType;
  }
};
ZodCatch.create = (type, params) => {
  return new ZodCatch({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodCatch,
    catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
    ...processCreateParams(params)
  });
};
var ZodNaN = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.nan) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.nan,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return { status: "valid", value: input.data };
  }
};
ZodNaN.create = (params) => {
  return new ZodNaN({
    typeName: ZodFirstPartyTypeKind.ZodNaN,
    ...processCreateParams(params)
  });
};
var BRAND = Symbol("zod_brand");
var ZodBranded = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const data = ctx.data;
    return this._def.type._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  unwrap() {
    return this._def.type;
  }
};
var ZodPipeline = class extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.common.async) {
      const handleAsync = async () => {
        const inResult = await this._def.in._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inResult.status === "aborted")
          return INVALID;
        if (inResult.status === "dirty") {
          status.dirty();
          return DIRTY(inResult.value);
        } else {
          return this._def.out._parseAsync({
            data: inResult.value,
            path: ctx.path,
            parent: ctx
          });
        }
      };
      return handleAsync();
    } else {
      const inResult = this._def.in._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
      if (inResult.status === "aborted")
        return INVALID;
      if (inResult.status === "dirty") {
        status.dirty();
        return {
          status: "dirty",
          value: inResult.value
        };
      } else {
        return this._def.out._parseSync({
          data: inResult.value,
          path: ctx.path,
          parent: ctx
        });
      }
    }
  }
  static create(a8, b5) {
    return new ZodPipeline({
      in: a8,
      out: b5,
      typeName: ZodFirstPartyTypeKind.ZodPipeline
    });
  }
};
var custom = (check, params = {}, fatal) => {
  if (check)
    return ZodAny.create().superRefine((data, ctx) => {
      var _a2, _b;
      if (!check(data)) {
        const p8 = typeof params === "function" ? params(data) : typeof params === "string" ? { message: params } : params;
        const _fatal = (_b = (_a2 = p8.fatal) !== null && _a2 !== void 0 ? _a2 : fatal) !== null && _b !== void 0 ? _b : true;
        const p22 = typeof p8 === "string" ? { message: p8 } : p8;
        ctx.addIssue({ code: "custom", ...p22, fatal: _fatal });
      }
    });
  return ZodAny.create();
};
var late = {
  object: ZodObject.lazycreate
};
var ZodFirstPartyTypeKind;
(function(ZodFirstPartyTypeKind2) {
  ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
  ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
  ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
  ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
  ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
  ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
  ZodFirstPartyTypeKind2["ZodSymbol"] = "ZodSymbol";
  ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
  ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
  ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
  ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
  ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
  ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
  ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
  ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
  ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
  ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
  ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
  ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
  ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
  ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
  ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
  ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
  ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
  ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
  ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
  ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
  ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
  ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
  ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
  ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
  ZodFirstPartyTypeKind2["ZodCatch"] = "ZodCatch";
  ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
  ZodFirstPartyTypeKind2["ZodBranded"] = "ZodBranded";
  ZodFirstPartyTypeKind2["ZodPipeline"] = "ZodPipeline";
})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
var instanceOfType = (cls, params = {
  message: `Input not instance of ${cls.name}`
}) => custom((data) => data instanceof cls, params);
var stringType = ZodString.create;
var numberType = ZodNumber.create;
var nanType = ZodNaN.create;
var bigIntType = ZodBigInt.create;
var booleanType = ZodBoolean.create;
var dateType = ZodDate.create;
var symbolType = ZodSymbol.create;
var undefinedType = ZodUndefined.create;
var nullType = ZodNull.create;
var anyType = ZodAny.create;
var unknownType = ZodUnknown.create;
var neverType = ZodNever.create;
var voidType = ZodVoid.create;
var arrayType = ZodArray.create;
var objectType = ZodObject.create;
var strictObjectType = ZodObject.strictCreate;
var unionType = ZodUnion.create;
var discriminatedUnionType = ZodDiscriminatedUnion.create;
var intersectionType = ZodIntersection.create;
var tupleType = ZodTuple.create;
var recordType = ZodRecord.create;
var mapType = ZodMap.create;
var setType = ZodSet.create;
var functionType = ZodFunction.create;
var lazyType = ZodLazy.create;
var literalType = ZodLiteral.create;
var enumType = ZodEnum.create;
var nativeEnumType = ZodNativeEnum.create;
var promiseType = ZodPromise.create;
var effectsType = ZodEffects.create;
var optionalType = ZodOptional.create;
var nullableType = ZodNullable.create;
var preprocessType = ZodEffects.createWithPreprocess;
var pipelineType = ZodPipeline.create;
var ostring = () => stringType().optional();
var onumber = () => numberType().optional();
var oboolean = () => booleanType().optional();
var coerce = {
  string: (arg) => ZodString.create({ ...arg, coerce: true }),
  number: (arg) => ZodNumber.create({ ...arg, coerce: true }),
  boolean: (arg) => ZodBoolean.create({
    ...arg,
    coerce: true
  }),
  bigint: (arg) => ZodBigInt.create({ ...arg, coerce: true }),
  date: (arg) => ZodDate.create({ ...arg, coerce: true })
};
var NEVER = INVALID;
var z4 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  defaultErrorMap: errorMap,
  setErrorMap,
  getErrorMap,
  makeIssue,
  EMPTY_PATH,
  addIssueToContext,
  ParseStatus,
  INVALID,
  DIRTY,
  OK,
  isAborted,
  isDirty,
  isValid,
  isAsync,
  get util() {
    return util;
  },
  get objectUtil() {
    return objectUtil;
  },
  ZodParsedType,
  getParsedType,
  ZodType,
  ZodString,
  ZodNumber,
  ZodBigInt,
  ZodBoolean,
  ZodDate,
  ZodSymbol,
  ZodUndefined,
  ZodNull,
  ZodAny,
  ZodUnknown,
  ZodNever,
  ZodVoid,
  ZodArray,
  ZodObject,
  ZodUnion,
  ZodDiscriminatedUnion,
  ZodIntersection,
  ZodTuple,
  ZodRecord,
  ZodMap,
  ZodSet,
  ZodFunction,
  ZodLazy,
  ZodLiteral,
  ZodEnum,
  ZodNativeEnum,
  ZodPromise,
  ZodEffects,
  ZodTransformer: ZodEffects,
  ZodOptional,
  ZodNullable,
  ZodDefault,
  ZodCatch,
  ZodNaN,
  BRAND,
  ZodBranded,
  ZodPipeline,
  custom,
  Schema: ZodType,
  ZodSchema: ZodType,
  late,
  get ZodFirstPartyTypeKind() {
    return ZodFirstPartyTypeKind;
  },
  coerce,
  any: anyType,
  array: arrayType,
  bigint: bigIntType,
  boolean: booleanType,
  date: dateType,
  discriminatedUnion: discriminatedUnionType,
  effect: effectsType,
  "enum": enumType,
  "function": functionType,
  "instanceof": instanceOfType,
  intersection: intersectionType,
  lazy: lazyType,
  literal: literalType,
  map: mapType,
  nan: nanType,
  nativeEnum: nativeEnumType,
  never: neverType,
  "null": nullType,
  nullable: nullableType,
  number: numberType,
  object: objectType,
  oboolean,
  onumber,
  optional: optionalType,
  ostring,
  pipeline: pipelineType,
  preprocess: preprocessType,
  promise: promiseType,
  record: recordType,
  set: setType,
  strictObject: strictObjectType,
  string: stringType,
  symbol: symbolType,
  transformer: effectsType,
  tuple: tupleType,
  "undefined": undefinedType,
  union: unionType,
  unknown: unknownType,
  "void": voidType,
  NEVER,
  ZodIssueCode,
  quotelessJson,
  ZodError
});

// src/gen/signals/messageCreated.z.ts
var messageCreated_z_default = z4.object({
  type: z4.literal("message_created"),
  data: z4.object({
    id: z4.string().describe("Identifier of the [Message](#schema_message)"),
    createdAt: z4.string().datetime().describe(
      "Creation date of the [Message](#schema_message) in ISO 8601 format"
    ),
    payload: z4.union([
      z4.object({ audioUrl: z4.string().min(1), type: z4.literal("audio") }),
      z4.object({
        title: z4.string().min(1),
        subtitle: z4.string().min(1).optional(),
        imageUrl: z4.string().min(1).optional(),
        actions: z4.array(
          z4.object({
            action: z4.enum(["postback", "url", "say"]),
            label: z4.string().min(1),
            value: z4.string().min(1)
          })
        ),
        type: z4.literal("card")
      }),
      z4.object({
        items: z4.array(
          z4.object({
            title: z4.string().min(1),
            subtitle: z4.string().min(1).optional(),
            imageUrl: z4.string().min(1).optional(),
            actions: z4.array(
              z4.object({
                action: z4.enum(["postback", "url", "say"]),
                label: z4.string().min(1),
                value: z4.string().min(1)
              })
            )
          })
        ),
        type: z4.literal("carousel")
      }),
      z4.object({
        text: z4.string().min(1),
        options: z4.array(
          z4.object({ label: z4.string().min(1), value: z4.string().min(1) })
        ),
        type: z4.literal("choice")
      }),
      z4.object({
        text: z4.string().min(1),
        options: z4.array(
          z4.object({ label: z4.string().min(1), value: z4.string().min(1) })
        ),
        type: z4.literal("dropdown")
      }),
      z4.object({
        fileUrl: z4.string().min(1),
        title: z4.string().min(1).optional(),
        type: z4.literal("file")
      }),
      z4.object({ imageUrl: z4.string().min(1), type: z4.literal("image") }),
      z4.object({
        latitude: z4.number(),
        longitude: z4.number(),
        address: z4.string().optional(),
        title: z4.string().optional(),
        type: z4.literal("location")
      }),
      z4.object({
        markdown: z4.string().min(1),
        type: z4.literal("markdown")
      }),
      z4.object({ text: z4.string().min(1), type: z4.literal("text") }),
      z4.object({ videoUrl: z4.string().min(1), type: z4.literal("video") })
    ]).describe("Payload is the content type of the message."),
    userId: z4.string().describe("ID of the [User](#schema_user)"),
    conversationId: z4.string().describe("ID of the [Conversation](#schema_conversation)"),
    isBot: z4.boolean().describe("Whether the message was created by the bot or not")
  })
});

// src/gen/signals/eventCreated.z.ts
init_dirname();
init_buffer2();
init_process2();
var eventCreated_z_default = z4.object({
  type: z4.literal("event_created"),
  data: z4.object({
    createdAt: z4.string().datetime().describe(
      "Creation date of the custom [Event](#schema_event) in ISO 8601 format"
    ),
    payload: z4.record(z4.any()).describe("Payload is the content of the custom event."),
    conversationId: z4.string().describe("ID of the [Conversation](#schema_conversation)."),
    userId: z4.string().describe("ID of the [User](#schema_user)."),
    id: z4.union([z4.string(), z4.null()]),
    isBot: z4.boolean().describe("Whether the event was created by the bot or not")
  })
});

// src/gen/signals/participantAdded.z.ts
init_dirname();
init_buffer2();
init_process2();
var participantAdded_z_default = z4.object({
  type: z4.literal("participant_added"),
  data: z4.object({ conversationId: z4.string(), participantId: z4.string() })
});

// src/gen/signals/participantRemoved.z.ts
init_dirname();
init_buffer2();
init_process2();
var participantRemoved_z_default = z4.object({
  type: z4.literal("participant_removed"),
  data: z4.object({ conversationId: z4.string(), participantId: z4.string() })
});

// src/gen/signals/messageDeleted.z.ts
init_dirname();
init_buffer2();
init_process2();
var messageDeleted_z_default = z4.object({
  type: z4.literal("message_deleted"),
  data: z4.object({
    id: z4.string(),
    conversationId: z4.string(),
    userId: z4.string()
  })
});

// src/gen/signals/index.ts
var zod = {
  messageCreated: messageCreated_z_default,
  eventCreated: eventCreated_z_default,
  participantAdded: participantAdded_z_default,
  participantRemoved: participantRemoved_z_default,
  messageDeleted: messageDeleted_z_default
};

// src/signal-listener.ts
var DEFAULT_ERROR_MESSAGE = "unknown error";
var _SignalListener = class extends EventEmitter {
  constructor(_props) {
    super();
    this._props = _props;
  }
  _state = { status: "disconnected" };
  get status() {
    return this._state.status;
  }
  connect = async () => {
    if (this._state.status === "connected") {
      return;
    }
    if (this._state.status === "connecting") {
      await this._state.connectionPromise;
      return;
    }
    const connectionPromise = this._connect();
    this._state = { status: "connecting", connectionPromise };
    await connectionPromise;
  };
  disconnect = async () => {
    if (this._state.status === "disconnected") {
      return;
    }
    let source;
    if (this._state.status === "connecting") {
      source = await this._state.connectionPromise;
    } else {
      source = this._state.source;
    }
    this._disconnectSync(source);
  };
  _connect = async () => {
    const source = await listenEventSource(`${this._props.url}/conversations/${this._props.conversationId}/listen`, {
      headers: { "x-user-key": this._props.userKey }
    });
    source.on("message", this._handleMessage);
    source.on("error", this._handleError(source));
    this._state = { status: "connected", source };
    return source;
  };
  _disconnectSync = (source) => {
    source.close();
    this._state = { status: "disconnected" };
  };
  _handleMessage = (ev) => {
    const signal = this._parseSignal(ev.data);
    this.emit(signal.type, signal.data);
  };
  _handleError = (source) => (ev) => {
    this._disconnectSync(source);
    const err = this._toError(ev);
    this.emit("error", err);
  };
  _parseSignal = (data) => {
    for (const schema of Object.values(zod)) {
      const parsedData = this._safeJsonParse(data);
      const parseResult = schema.safeParse(parsedData);
      if (parseResult.success) {
        return parseResult.data;
      }
    }
    return {
      type: "unknown",
      data
    };
  };
  _safeJsonParse = (x4) => {
    try {
      return JSON.parse(x4);
    } catch {
      return x4;
    }
  };
  _toError = (thrown) => {
    if (thrown instanceof Error) {
      return thrown;
    }
    if (typeof thrown === "string") {
      return new Error(thrown);
    }
    if (thrown === null) {
      return new Error(DEFAULT_ERROR_MESSAGE);
    }
    if (typeof thrown === "object" && "message" in thrown) {
      return this._toError(thrown.message);
    }
    try {
      const json = JSON.stringify(thrown);
      return new Error(json);
    } catch {
      return new Error(DEFAULT_ERROR_MESSAGE);
    }
  };
};
var SignalListener = _SignalListener;
__publicField(SignalListener, "listen", async (props) => {
  const inst = new _SignalListener(props);
  await inst.connect();
  return inst;
});

// src/jsonwebtoken.ts
init_dirname();
init_buffer2();
init_process2();
var import_browser_or_node2 = __toESM(require_lib());
var requireJwt = () => require_jsonwebtoken();
var module2 = import_browser_or_node2.isBrowser ? null : requireJwt();
var jsonwebtoken_default = module2;

// src/client.ts
var _100mb = 100 * 1024 * 1024;
var maxBodyLength = _100mb;
var maxContentLength = _100mb;
var defaultTimeout = 6e4;
var _createAuthClient = Symbol("_createAuthClient");
var _Client = class {
  constructor(props) {
    this.props = props;
    const axiosClient = _Client._createAxios(props);
    this._auto = new Client(axiosClient);
  }
  _auto;
  static async connect(props) {
    const { userId, userKey, encryptionKey, ...clientProps } = props;
    const client = new _Client(clientProps);
    if (userKey) {
      const { user: user2 } = await client.getOrCreateUser({ "x-user-key": userKey });
      return AuthenticatedClient[_createAuthClient](client, { ...user2, key: userKey });
    }
    if (encryptionKey) {
      if (!jsonwebtoken_default) {
        const message = "Connecting with an encryption key is not supported in the browser; use in NodeJs or format the key manually with jsonwebtoken.";
        throw new Error(message);
      }
      if (!userId) {
        throw new Error(
          "userId is required when connecting with an encryption key. You may pick any userId of your choice that is not already taken by another user."
        );
      }
      const userKey2 = jsonwebtoken_default.sign({ id: userId }, encryptionKey, { algorithm: "HS256" });
      const { user: user2 } = await client.getOrCreateUser({ "x-user-key": userKey2 });
      return AuthenticatedClient[_createAuthClient](client, { ...user2, key: userKey2 });
    }
    const { user, key } = await client.createUser({ id: userId });
    return AuthenticatedClient[_createAuthClient](client, { ...user, key });
  }
  createConversation = (x4) => this._auto.createConversation(x4);
  getConversation = (x4) => this._auto.getConversation(x4);
  getOrCreateConversation = (x4) => this._auto.getOrCreateConversation(x4);
  deleteConversation = (x4) => this._auto.deleteConversation(x4);
  listConversations = (x4) => this._auto.listConversations(x4);
  listMessages = (x4) => this._auto.listMessages(x4);
  addParticipant = (x4) => this._auto.addParticipant(x4);
  removeParticipant = (x4) => this._auto.removeParticipant(x4);
  getParticipant = (x4) => this._auto.getParticipant(x4);
  listParticipants = (x4) => this._auto.listParticipants(x4);
  createMessage = (x4) => this._auto.createMessage(x4);
  getMessage = (x4) => this._auto.getMessage(x4);
  deleteMessage = (x4) => this._auto.deleteMessage(x4);
  createUser = (x4) => this._auto.createUser(x4);
  getUser = (x4) => this._auto.getUser(x4);
  getOrCreateUser = (x4) => this._auto.getOrCreateUser(x4);
  updateUser = (x4) => this._auto.updateUser(x4);
  deleteUser = (x4) => this._auto.deleteUser(x4);
  createEvent = (x4) => this._auto.createEvent(x4);
  getEvent = (x4) => this._auto.getEvent(x4);
  listenConversation = async ({ id, "x-user-key": userKey }) => {
    const signalListener = await SignalListener.listen({
      url: this.props.apiUrl,
      conversationId: id,
      userKey
    });
    return signalListener;
  };
};
var Client2 = _Client;
__publicField(Client2, "_createAxios", (props) => {
  const headers = {
    ...props.headers
  };
  const timeout = props.timeout ?? defaultTimeout;
  const withCredentials = import_browser_or_node3.isBrowser;
  const { apiUrl: baseURL } = props;
  return axios_default.create({
    baseURL,
    headers,
    withCredentials,
    timeout,
    maxBodyLength,
    maxContentLength,
    validateStatus: (status) => status >= 200 && status < 400
  });
});
var _a;
var _AuthenticatedClient = class {
  constructor(_client, user) {
    this._client = _client;
    this.user = user;
  }
  createConversation = (x4) => this._client.createConversation({ "x-user-key": this.user.key, ...x4 });
  getConversation = (x4) => this._client.getConversation({ "x-user-key": this.user.key, ...x4 });
  getOrCreateConversation = (x4) => this._client.getOrCreateConversation({ "x-user-key": this.user.key, ...x4 });
  deleteConversation = (x4) => this._client.deleteConversation({ "x-user-key": this.user.key, ...x4 });
  listConversations = (x4) => this._client.listConversations({ "x-user-key": this.user.key, ...x4 });
  listMessages = (x4) => this._client.listMessages({ "x-user-key": this.user.key, ...x4 });
  listenConversation = (x4) => this._client.listenConversation({ "x-user-key": this.user.key, ...x4 });
  addParticipant = (x4) => this._client.addParticipant({ "x-user-key": this.user.key, ...x4 });
  removeParticipant = (x4) => this._client.removeParticipant({ "x-user-key": this.user.key, ...x4 });
  getParticipant = (x4) => this._client.getParticipant({ "x-user-key": this.user.key, ...x4 });
  listParticipants = (x4) => this._client.listParticipants({ "x-user-key": this.user.key, ...x4 });
  createMessage = (x4) => this._client.createMessage({ "x-user-key": this.user.key, ...x4 });
  getMessage = (x4) => this._client.getMessage({ "x-user-key": this.user.key, ...x4 });
  deleteMessage = (x4) => this._client.deleteMessage({ "x-user-key": this.user.key, ...x4 });
  getUser = (x4) => this._client.getUser({ "x-user-key": this.user.key, ...x4 });
  updateUser = (x4) => this._client.updateUser({ "x-user-key": this.user.key, ...x4 });
  deleteUser = (x4) => this._client.deleteUser({ "x-user-key": this.user.key, ...x4 });
  createEvent = (x4) => this._client.createEvent({ "x-user-key": this.user.key, ...x4 });
  getEvent = (x4) => this._client.getEvent({ "x-user-key": this.user.key, ...x4 });
};
var AuthenticatedClient = _AuthenticatedClient;
_a = _createAuthClient;
__publicField(AuthenticatedClient, _a, (client, user) => {
  return new _AuthenticatedClient(client, user);
});
export {
  AlreadyExistsError,
  AuthenticatedClient,
  BreakingChangesError,
  Client2 as Client,
  ForbiddenError,
  InternalError,
  InvalidDataFormatError,
  InvalidIdentifierError,
  InvalidJsonSchemaError,
  InvalidPayloadError,
  InvalidQueryError,
  LimitExceededError,
  MethodNotFoundError,
  PayloadTooLargeError,
  PaymentRequiredError,
  QuotaExceededError,
  RateLimitedError,
  ReferenceConstraintError,
  ReferenceNotFoundError,
  RelationConflictError,
  ResourceLockedConflictError,
  ResourceNotFoundError,
  RuntimeError,
  SignalListener,
  UnauthorizedError,
  UnknownError,
  UnsupportedMediaTypeError,
  axios_exports as axios,
  errorFrom,
  isApiError
};
/*! Bundled license information:

@jspm/core/nodelibs/browser/buffer.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)

@jspm/core/nodelibs/browser/chunk-44e51b61.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)

@jspm/core/nodelibs/browser/crypto.js:
  (*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)
  (*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)
  (*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)

event-source-polyfill/src/eventsource.js:
  (** @license
   * eventsource.js
   * Available under MIT License (MIT)
   * https://github.com/Yaffle/EventSource/
   *)

safe-buffer/index.js:
  (*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)
*/
//# sourceMappingURL=index.mjs.map
