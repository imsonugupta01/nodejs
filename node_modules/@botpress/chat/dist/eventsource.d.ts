import type EventSourceNodeJs from 'eventsource';
import type EventSourceBrowser from 'event-source-polyfill';
import { EventEmitter } from './event-emitter';
type NodeOnOpen = EventSourceNodeJs['onopen'];
type NodeOnMessage = EventSourceNodeJs['onmessage'];
type NodeOnError = EventSourceNodeJs['onerror'];
type NodeOpenEvent = Parameters<NodeOnOpen>[0];
type NodeMessageEvent = Parameters<NodeOnMessage>[0];
type NodeErrorEvent = Parameters<NodeOnError>[0];
type BrowserOnOpen = NonNullable<EventSourceBrowser.EventSourcePolyfill['onopen']>;
type BrowserOnMessage = NonNullable<EventSourceBrowser.EventSourcePolyfill['onmessage']>;
type BrowserOnError = NonNullable<EventSourceBrowser.EventSourcePolyfill['onerror']>;
type BrowserOpenEvent = Parameters<BrowserOnOpen>[0];
type BrowserMessageEvent = Parameters<BrowserOnMessage>[0];
type BrowserErrorEvent = Parameters<BrowserOnError>[0];
export type OpenEvent = NodeOpenEvent | BrowserOpenEvent;
export type MessageEvent = NodeMessageEvent | BrowserMessageEvent;
export type ErrorEvent = NodeErrorEvent | BrowserErrorEvent;
export type Events = {
    open: OpenEvent;
    message: MessageEvent;
    error: ErrorEvent;
};
export type Props = {
    headers?: Record<string, string>;
};
export type EventSourceEmitter = {
    on: EventEmitter<Events>['on'];
    close: () => void;
};
export declare const listenEventSource: (url: string, props?: Props) => Promise<EventSourceEmitter>;
export {};
