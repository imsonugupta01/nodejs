import { SignalListener } from './signal-listener';
import * as types from './types';
declare const _createAuthClient: unique symbol;
type Merge<A, B> = Omit<A, keyof B> & B;
type IClient = Merge<{
    [K in types.ClientOperation]: (x: types.ClientRequests[K]) => Promise<types.ClientResponses[K]>;
}, {
    listenConversation: (args: types.ClientRequests['listenConversation']) => Promise<SignalListener>;
}>;
type IAuthenticatedClient = Merge<{
    [K in types.AuthenticatedOperation]: (x: types.AuthenticatedClientRequests[K]) => Promise<types.ClientResponses[K]>;
}, {
    listenConversation: (args: types.AuthenticatedClientRequests['listenConversation']) => Promise<SignalListener>;
}>;
export declare class Client implements IClient {
    readonly props: Readonly<types.ClientProps>;
    private _auto;
    constructor(props: Readonly<types.ClientProps>);
    /**
     * Gets or creates a user based on the provided props and returns an authenticated client.
     */
    static connect(props: types.ConnectProps): Promise<AuthenticatedClient>;
    readonly createConversation: IClient['createConversation'];
    readonly getConversation: IClient['getConversation'];
    readonly getOrCreateConversation: IClient['getOrCreateConversation'];
    readonly deleteConversation: IClient['deleteConversation'];
    readonly listConversations: IClient['listConversations'];
    readonly listMessages: IClient['listMessages'];
    readonly addParticipant: IClient['addParticipant'];
    readonly removeParticipant: IClient['removeParticipant'];
    readonly getParticipant: IClient['getParticipant'];
    readonly listParticipants: IClient['listParticipants'];
    readonly createMessage: IClient['createMessage'];
    readonly getMessage: IClient['getMessage'];
    readonly deleteMessage: IClient['deleteMessage'];
    readonly createUser: IClient['createUser'];
    readonly getUser: IClient['getUser'];
    readonly getOrCreateUser: IClient['getOrCreateUser'];
    readonly updateUser: IClient['updateUser'];
    readonly deleteUser: IClient['deleteUser'];
    readonly createEvent: IClient['createEvent'];
    readonly getEvent: IClient['getEvent'];
    readonly listenConversation: IClient['listenConversation'];
    private static _createAxios;
}
export declare class AuthenticatedClient implements IAuthenticatedClient {
    private _client;
    readonly user: types.AuthenticatedUser;
    private constructor();
    static [_createAuthClient]: (client: Client, user: types.AuthenticatedUser) => AuthenticatedClient;
    readonly createConversation: IAuthenticatedClient['createConversation'];
    readonly getConversation: IAuthenticatedClient['getConversation'];
    readonly getOrCreateConversation: IAuthenticatedClient['getOrCreateConversation'];
    readonly deleteConversation: IAuthenticatedClient['deleteConversation'];
    readonly listConversations: IAuthenticatedClient['listConversations'];
    readonly listMessages: IAuthenticatedClient['listMessages'];
    readonly listenConversation: IAuthenticatedClient['listenConversation'];
    readonly addParticipant: IAuthenticatedClient['addParticipant'];
    readonly removeParticipant: IAuthenticatedClient['removeParticipant'];
    readonly getParticipant: IAuthenticatedClient['getParticipant'];
    readonly listParticipants: IAuthenticatedClient['listParticipants'];
    readonly createMessage: IAuthenticatedClient['createMessage'];
    readonly getMessage: IAuthenticatedClient['getMessage'];
    readonly deleteMessage: IAuthenticatedClient['deleteMessage'];
    readonly getUser: IAuthenticatedClient['getUser'];
    readonly updateUser: IAuthenticatedClient['updateUser'];
    readonly deleteUser: IAuthenticatedClient['deleteUser'];
    readonly createEvent: IAuthenticatedClient['createEvent'];
    readonly getEvent: IAuthenticatedClient['getEvent'];
}
export {};
