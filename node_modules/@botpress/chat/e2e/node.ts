import { runServer } from './server'
import { SignalListener } from '../src/signal-listener'
import * as consts from './consts'
import * as utils from './utils'

const main = async () => {
  const server = await runServer({
    port: consts.port,
    messageInterval: consts.messageInterval,
    requestTimeout: consts.requestTimeout,
  })

  const listener = await SignalListener.listen({
    userKey: 'lololol',
    conversationId: '123',
    url: `http://localhost:${consts.port}`,
  })

  let messageReceived = 0
  listener.on('message_created', (data) => {
    console.log('message_created', data.payload)
    messageReceived++
  })

  try {
    await Promise.race([
      utils.fail(consts.failureTimeout),
      new Promise<void>((resolve) => {
        listener.on('error', (err) => {
          console.log('server disconnected !', err.message)
          resolve()
        })
      }),
    ])
  } finally {
    await server.close()
    await listener.disconnect()
  }

  const expectedMessageCount = Math.floor(consts.requestTimeout / consts.messageInterval)
  if (!utils.isIn(messageReceived, [expectedMessageCount - 1, expectedMessageCount + 1])) {
    throw new Error(`Expected ${expectedMessageCount} messages, got ${messageReceived}`)
  }
}

void main().then(
  () => {
    console.log('Done')
    process.exit(0)
  },
  (err) => {
    console.error(err)
    process.exit(1)
  },
)
