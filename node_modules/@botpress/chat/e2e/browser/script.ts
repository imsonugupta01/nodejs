import { SignalListener } from '../../src/signal-listener'
import * as consts from '../consts'
import * as utils from '../utils'

const toString = (x: any) => {
  if (typeof x === 'string') {
    return x
  }
  if (typeof x === 'number') {
    return x.toString()
  }
  if (x instanceof Error) {
    return x.message
  }
  return JSON.stringify(x)
}

const debug = (...args: any[]) => {
  const strs = args.map(toString) // for puppeteer to be able to print it
  const str = strs.join(' ')
  console.log(str)
}

const exit = (code: 0 | 1) => {
  if (code === 0) {
    console.log(consts.successMessage)
  } else {
    console.log(consts.failureMessage)
  }
}

const main = async () => {
  const listener = await SignalListener.listen({
    userKey: 'lololol',
    conversationId: '123',
    url: `http://localhost:${consts.port}`,
  })

  let messageReceived = 0
  listener.on('message_created', (data) => {
    debug('message_created', data.payload)
    messageReceived++
  })

  await Promise.race([
    utils.fail(consts.failureTimeout),
    new Promise<void>((resolve) => {
      listener.on('error', (err) => {
        debug('server disconnected !', err.message)
        resolve()
      })
    }),
  ])

  const expectedMessageCount = Math.floor(consts.requestTimeout / consts.messageInterval)
  if (!utils.isIn(messageReceived, [expectedMessageCount - 1, expectedMessageCount + 1])) {
    throw new Error(`Expected ${expectedMessageCount} messages, got ${messageReceived}`)
  }
}

void main().then(
  () => {
    exit(0)
  },
  (err) => {
    debug(err)
    exit(1)
  },
)
