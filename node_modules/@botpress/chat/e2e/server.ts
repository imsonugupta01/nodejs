import http from 'http'
import { MessageCreated as MessageCreatedSignal } from '../src/gen/signals/messageCreated.t'

const messageCreatedSignal: MessageCreatedSignal = {
  type: 'message_created',
  data: {
    id: '987',
    conversationId: '123',
    createdAt: '2021-08-05T18:00:00.000Z',
    userId: '456',
    payload: {
      type: 'text',
      text: 'hello world',
    },
    isBot: false,
  },
}

const ssePayload = `event: message\ndata: ${JSON.stringify(messageCreatedSignal)}\n\n`

const headers: http.OutgoingHttpHeaders = {
  'Content-Type': 'text/event-stream',
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': '*',
}

const sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms))

export type RunServerProps = {
  port: number
  messageInterval: number
  requestTimeout: number
}

export const runServer = async (props: RunServerProps) => {
  const { port, messageInterval, requestTimeout } = props

  const server = http.createServer(async (_req, res) => {
    res.writeHead(200, headers)

    const timeout = setInterval(() => {
      res.write(ssePayload)
    }, messageInterval)

    await sleep(requestTimeout)

    clearInterval(timeout)

    res.end()
  })

  await new Promise<void>((resolve) =>
    server.listen(port, () => {
      console.log('Server is listening on port 3000')
      resolve()
    }),
  )

  return {
    close: () => new Promise<void>((resolve, reject) => server.close((err) => (err ? reject(err) : resolve()))),
  }
}
